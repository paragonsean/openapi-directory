/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cable;
import org.openapitools.client.model.ConsolePort;
import org.openapitools.client.model.ConsolePortTemplate;
import org.openapitools.client.model.ConsoleServerPort;
import org.openapitools.client.model.ConsoleServerPortTemplate;
import org.openapitools.client.model.DcimCablesList200Response;
import org.openapitools.client.model.DcimConsoleConnectionsList200Response;
import org.openapitools.client.model.DcimConsolePortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortsList200Response;
import org.openapitools.client.model.DcimDeviceBayTemplatesList200Response;
import org.openapitools.client.model.DcimDeviceBaysList200Response;
import org.openapitools.client.model.DcimDeviceRolesList200Response;
import org.openapitools.client.model.DcimDeviceTypesList200Response;
import org.openapitools.client.model.DcimDevicesList200Response;
import org.openapitools.client.model.DcimFrontPortTemplatesList200Response;
import org.openapitools.client.model.DcimFrontPortsList200Response;
import org.openapitools.client.model.DcimInterfaceConnectionsList200Response;
import org.openapitools.client.model.DcimInterfaceTemplatesList200Response;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.DcimInventoryItemsList200Response;
import org.openapitools.client.model.DcimManufacturersList200Response;
import org.openapitools.client.model.DcimPlatformsList200Response;
import org.openapitools.client.model.DcimPowerConnectionsList200Response;
import org.openapitools.client.model.DcimPowerFeedsList200Response;
import org.openapitools.client.model.DcimPowerOutletTemplatesList200Response;
import org.openapitools.client.model.DcimPowerOutletsList200Response;
import org.openapitools.client.model.DcimPowerPanelsList200Response;
import org.openapitools.client.model.DcimPowerPortTemplatesList200Response;
import org.openapitools.client.model.DcimRackGroupsList200Response;
import org.openapitools.client.model.DcimRackReservationsList200Response;
import org.openapitools.client.model.DcimRackRolesList200Response;
import org.openapitools.client.model.DcimRacksList200Response;
import org.openapitools.client.model.DcimRearPortTemplatesList200Response;
import org.openapitools.client.model.DcimRearPortsList200Response;
import org.openapitools.client.model.DcimRegionsList200Response;
import org.openapitools.client.model.DcimSitesList200Response;
import org.openapitools.client.model.DcimVirtualChassisList200Response;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceBay;
import org.openapitools.client.model.DeviceBayTemplate;
import org.openapitools.client.model.DeviceInterface;
import org.openapitools.client.model.DeviceNAPALM;
import org.openapitools.client.model.DeviceRole;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.DeviceWithConfigContext;
import org.openapitools.client.model.FrontPort;
import org.openapitools.client.model.FrontPortTemplate;
import org.openapitools.client.model.InterfaceTemplate;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.Manufacturer;
import org.openapitools.client.model.Platform;
import org.openapitools.client.model.PowerFeed;
import org.openapitools.client.model.PowerOutlet;
import org.openapitools.client.model.PowerOutletTemplate;
import org.openapitools.client.model.PowerPanel;
import org.openapitools.client.model.PowerPort;
import org.openapitools.client.model.PowerPortTemplate;
import org.openapitools.client.model.Rack;
import org.openapitools.client.model.RackGroup;
import org.openapitools.client.model.RackReservation;
import org.openapitools.client.model.RackRole;
import org.openapitools.client.model.RackUnit;
import org.openapitools.client.model.RearPort;
import org.openapitools.client.model.RearPortTemplate;
import org.openapitools.client.model.Region;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.VirtualChassis;
import org.openapitools.client.model.WritableCable;
import org.openapitools.client.model.WritableConsolePort;
import org.openapitools.client.model.WritableConsolePortTemplate;
import org.openapitools.client.model.WritableConsoleServerPort;
import org.openapitools.client.model.WritableConsoleServerPortTemplate;
import org.openapitools.client.model.WritableDeviceBay;
import org.openapitools.client.model.WritableDeviceBayTemplate;
import org.openapitools.client.model.WritableDeviceInterface;
import org.openapitools.client.model.WritableDeviceType;
import org.openapitools.client.model.WritableDeviceWithConfigContext;
import org.openapitools.client.model.WritableFrontPort;
import org.openapitools.client.model.WritableFrontPortTemplate;
import org.openapitools.client.model.WritableInterfaceTemplate;
import org.openapitools.client.model.WritableInventoryItem;
import org.openapitools.client.model.WritablePlatform;
import org.openapitools.client.model.WritablePowerFeed;
import org.openapitools.client.model.WritablePowerOutlet;
import org.openapitools.client.model.WritablePowerOutletTemplate;
import org.openapitools.client.model.WritablePowerPanel;
import org.openapitools.client.model.WritablePowerPort;
import org.openapitools.client.model.WritablePowerPortTemplate;
import org.openapitools.client.model.WritableRack;
import org.openapitools.client.model.WritableRackGroup;
import org.openapitools.client.model.WritableRackReservation;
import org.openapitools.client.model.WritableRearPort;
import org.openapitools.client.model.WritableRearPortTemplate;
import org.openapitools.client.model.WritableRegion;
import org.openapitools.client.model.WritableSite;
import org.openapitools.client.model.WritableVirtualChassis;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DcimApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DcimApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DcimApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dcimCablesCreate
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesCreateValidateBeforeCall(WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesCreate(Async)");
        }

        return dcimCablesCreateCall(writableCable, _callback);

    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesCreate(WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesCreateWithHttpInfo(writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesCreateWithHttpInfo(WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesCreateAsync(WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesCreateValidateBeforeCall(writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesDelete
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesDelete(Async)");
        }

        return dcimCablesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimCablesDelete(Integer id) throws ApiException {
        dcimCablesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimCablesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesList
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListCall(String id, String label, String length, String lengthUnit, String q, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String typeN, String statusN, String colorN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (lengthUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit", lengthUnit));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (rack != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack", rack));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (labelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__n", labelN));
        }

        if (labelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ic", labelIc));
        }

        if (labelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nic", labelNic));
        }

        if (labelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__iew", labelIew));
        }

        if (labelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__niew", labelNiew));
        }

        if (labelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__isw", labelIsw));
        }

        if (labelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nisw", labelNisw));
        }

        if (labelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__ie", labelIe));
        }

        if (labelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label__nie", labelNie));
        }

        if (lengthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__n", lengthN));
        }

        if (lengthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lte", lengthLte));
        }

        if (lengthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__lt", lengthLt));
        }

        if (lengthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gte", lengthGte));
        }

        if (lengthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length__gt", lengthGt));
        }

        if (lengthUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_unit__n", lengthUnitN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesListValidateBeforeCall(String id, String label, String length, String lengthUnit, String q, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String typeN, String statusN, String colorN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimCablesListCall(id, label, length, lengthUnit, q, type, status, color, deviceId, device, rackId, rack, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, typeN, statusN, colorN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimCablesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimCablesList200Response dcimCablesList(String id, String label, String length, String lengthUnit, String q, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String typeN, String statusN, String colorN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimCablesList200Response> localVarResp = dcimCablesListWithHttpInfo(id, label, length, lengthUnit, q, type, status, color, deviceId, device, rackId, rack, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, typeN, statusN, colorN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimCablesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimCablesList200Response> dcimCablesListWithHttpInfo(String id, String label, String length, String lengthUnit, String q, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String typeN, String statusN, String colorN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, q, type, status, color, deviceId, device, rackId, rack, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, typeN, statusN, colorN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param label  (optional)
     * @param length  (optional)
     * @param lengthUnit  (optional)
     * @param q  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param color  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param rackId  (optional)
     * @param rack  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param labelN  (optional)
     * @param labelIc  (optional)
     * @param labelNic  (optional)
     * @param labelIew  (optional)
     * @param labelNiew  (optional)
     * @param labelIsw  (optional)
     * @param labelNisw  (optional)
     * @param labelIe  (optional)
     * @param labelNie  (optional)
     * @param lengthN  (optional)
     * @param lengthLte  (optional)
     * @param lengthLt  (optional)
     * @param lengthGte  (optional)
     * @param lengthGt  (optional)
     * @param lengthUnitN  (optional)
     * @param typeN  (optional)
     * @param statusN  (optional)
     * @param colorN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesListAsync(String id, String label, String length, String lengthUnit, String q, String type, String status, String color, String deviceId, String device, String rackId, String rack, String siteId, String site, String tenantId, String tenant, String idN, String idLte, String idLt, String idGte, String idGt, String labelN, String labelIc, String labelNic, String labelIew, String labelNiew, String labelIsw, String labelNisw, String labelIe, String labelNie, String lengthN, String lengthLte, String lengthLt, String lengthGte, String lengthGt, String lengthUnitN, String typeN, String statusN, String colorN, Integer limit, Integer offset, final ApiCallback<DcimCablesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesListValidateBeforeCall(id, label, length, lengthUnit, q, type, status, color, deviceId, device, rackId, rack, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, typeN, statusN, colorN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimCablesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesPartialUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesPartialUpdateValidateBeforeCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesPartialUpdate(Async)");
        }

        return dcimCablesPartialUpdateCall(id, writableCable, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesPartialUpdate(Integer id, WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesPartialUpdateWithHttpInfo(id, writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesPartialUpdateWithHttpInfo(Integer id, WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesPartialUpdateAsync(Integer id, WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesPartialUpdateValidateBeforeCall(id, writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesRead
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesRead(Async)");
        }

        return dcimCablesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this cable. (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesRead(Integer id) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this cable. (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this cable. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesReadAsync(Integer id, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimCablesUpdate
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableCable;

        // create path and map variables
        String localVarPath = "/dcim/cables/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimCablesUpdateValidateBeforeCall(Integer id, WritableCable writableCable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimCablesUpdate(Async)");
        }

        // verify the required parameter 'writableCable' is set
        if (writableCable == null) {
            throw new ApiException("Missing the required parameter 'writableCable' when calling dcimCablesUpdate(Async)");
        }

        return dcimCablesUpdateCall(id, writableCable, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return Cable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cable dcimCablesUpdate(Integer id, WritableCable writableCable) throws ApiException {
        ApiResponse<Cable> localVarResp = dcimCablesUpdateWithHttpInfo(id, writableCable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @return ApiResponse&lt;Cable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cable> dcimCablesUpdateWithHttpInfo(Integer id, WritableCable writableCable) throws ApiException {
        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, writableCable, null);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this cable. (required)
     * @param writableCable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimCablesUpdateAsync(Integer id, WritableCable writableCable, final ApiCallback<Cable> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimCablesUpdateValidateBeforeCall(id, writableCable, _callback);
        Type localVarReturnType = new TypeToken<Cable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConnectedDeviceList
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/connected-device/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (peerDevice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_device", peerDevice));
        }

        if (peerInterface != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("peer_interface", peerInterface));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConnectedDeviceListValidateBeforeCall(String peerDevice, String peerInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peerDevice' is set
        if (peerDevice == null) {
            throw new ApiException("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList(Async)");
        }

        // verify the required parameter 'peerInterface' is set
        if (peerInterface == null) {
            throw new ApiException("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList(Async)");
        }

        return dcimConnectedDeviceListCall(peerDevice, peerInterface, _callback);

    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Device dcimConnectedDeviceList(String peerDevice, String peerInterface) throws ApiException {
        ApiResponse<Device> localVarResp = dcimConnectedDeviceListWithHttpInfo(peerDevice, peerInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> dcimConnectedDeviceListWithHttpInfo(String peerDevice, String peerInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     * @param peerDevice The name of the peer device (required)
     * @param peerInterface The name of the peer interface (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConnectedDeviceListAsync(String peerDevice, String peerInterface, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConnectedDeviceListValidateBeforeCall(peerDevice, peerInterface, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleConnectionsList
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleConnectionsListCall(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleConnectionsListValidateBeforeCall(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleConnectionsListCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleConnectionsList200Response dcimConsoleConnectionsList(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleConnectionsList200Response> localVarResp = dcimConsoleConnectionsListWithHttpInfo(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleConnectionsList200Response> dcimConsoleConnectionsListWithHttpInfo(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleConnectionsListValidateBeforeCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleConnectionsListAsync(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback<DcimConsoleConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleConnectionsListValidateBeforeCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesCreate
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesCreateValidateBeforeCall(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesCreate(Async)");
        }

        return dcimConsolePortTemplatesCreateCall(writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesCreate(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesCreateWithHttpInfo(writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesCreateWithHttpInfo(WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesCreateAsync(WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesCreateValidateBeforeCall(writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesDelete
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete(Async)");
        }

        return dcimConsolePortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortTemplatesDelete(Integer id) throws ApiException {
        dcimConsolePortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesListValidateBeforeCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortTemplatesListCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsolePortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsolePortTemplatesList200Response dcimConsolePortTemplatesList(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsolePortTemplatesList200Response> localVarResp = dcimConsolePortTemplatesListWithHttpInfo(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsolePortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsolePortTemplatesList200Response> dcimConsolePortTemplatesListWithHttpInfo(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesListAsync(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimConsolePortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsolePortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesPartialUpdate(Async)");
        }

        return dcimConsolePortTemplatesPartialUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesPartialUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesPartialUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesPartialUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesPartialUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesRead
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead(Async)");
        }

        return dcimConsolePortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port template. (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port template. (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesReadAsync(Integer id, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortTemplatesUpdate
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePortTemplate' is set
        if (writableConsolePortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesUpdate(Async)");
        }

        return dcimConsolePortTemplatesUpdateCall(id, writableConsolePortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ConsolePortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePortTemplate dcimConsolePortTemplatesUpdate(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        ApiResponse<ConsolePortTemplate> localVarResp = dcimConsolePortTemplatesUpdateWithHttpInfo(id, writableConsolePortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @return ApiResponse&lt;ConsolePortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePortTemplate> dcimConsolePortTemplatesUpdateWithHttpInfo(Integer id, WritableConsolePortTemplate writableConsolePortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port template. (required)
     * @param writableConsolePortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortTemplatesUpdateAsync(Integer id, WritableConsolePortTemplate writableConsolePortTemplate, final ApiCallback<ConsolePortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortTemplatesUpdateValidateBeforeCall(id, writableConsolePortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsolePortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsCreate
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsCreateValidateBeforeCall(WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsCreate(Async)");
        }

        return dcimConsolePortsCreateCall(writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsCreate(WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsCreateWithHttpInfo(writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsCreateWithHttpInfo(WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsCreateAsync(WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsCreateValidateBeforeCall(writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsDelete
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsDelete(Async)");
        }

        return dcimConsolePortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsolePortsDelete(Integer id) throws ApiException {
        dcimConsolePortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsolePortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListCall(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsListValidateBeforeCall(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsolePortsListCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleConnectionsList200Response dcimConsolePortsList(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleConnectionsList200Response> localVarResp = dcimConsolePortsListWithHttpInfo(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleConnectionsList200Response> dcimConsolePortsListWithHttpInfo(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsListAsync(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback<DcimConsoleConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsListValidateBeforeCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsPartialUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsPartialUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsPartialUpdate(Async)");
        }

        return dcimConsolePortsPartialUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsPartialUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsPartialUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsPartialUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsPartialUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsPartialUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsRead
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsRead(Async)");
        }

        return dcimConsolePortsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsRead(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsReadAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsTrace
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsTrace(Async)");
        }

        return dcimConsolePortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsTraceAsync(Integer id, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsolePortsUpdate
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsolePort;

        // create path and map variables
        String localVarPath = "/dcim/console-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsolePortsUpdateValidateBeforeCall(Integer id, WritableConsolePort writableConsolePort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsolePortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsolePort' is set
        if (writableConsolePort == null) {
            throw new ApiException("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsUpdate(Async)");
        }

        return dcimConsolePortsUpdateCall(id, writableConsolePort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ConsolePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsolePort dcimConsolePortsUpdate(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        ApiResponse<ConsolePort> localVarResp = dcimConsolePortsUpdateWithHttpInfo(id, writableConsolePort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @return ApiResponse&lt;ConsolePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsolePort> dcimConsolePortsUpdateWithHttpInfo(Integer id, WritableConsolePort writableConsolePort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, null);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console port. (required)
     * @param writableConsolePort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsolePortsUpdateAsync(Integer id, WritableConsolePort writableConsolePort, final ApiCallback<ConsolePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsolePortsUpdateValidateBeforeCall(id, writableConsolePort, _callback);
        Type localVarReturnType = new TypeToken<ConsolePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesCreate
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesCreateValidateBeforeCall(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesCreate(Async)");
        }

        return dcimConsoleServerPortTemplatesCreateCall(writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesCreate(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesCreateWithHttpInfo(writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesCreateWithHttpInfo(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesCreateAsync(WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesCreateValidateBeforeCall(writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesDelete
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete(Async)");
        }

        return dcimConsoleServerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortTemplatesDelete(Integer id) throws ApiException {
        dcimConsoleServerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesListValidateBeforeCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortTemplatesListCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortTemplatesList200Response dcimConsoleServerPortTemplatesList(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortTemplatesList200Response> localVarResp = dcimConsoleServerPortTemplatesListWithHttpInfo(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortTemplatesList200Response> dcimConsoleServerPortTemplatesListWithHttpInfo(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesListAsync(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesPartialUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesPartialUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesPartialUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesPartialUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesPartialUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesRead
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead(Async)");
        }

        return dcimConsoleServerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port template. (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesReadAsync(Integer id, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortTemplatesUpdate
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/console-server-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPortTemplate' is set
        if (writableConsoleServerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesUpdate(Async)");
        }

        return dcimConsoleServerPortTemplatesUpdateCall(id, writableConsoleServerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ConsoleServerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPortTemplate dcimConsoleServerPortTemplatesUpdate(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        ApiResponse<ConsoleServerPortTemplate> localVarResp = dcimConsoleServerPortTemplatesUpdateWithHttpInfo(id, writableConsoleServerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @return ApiResponse&lt;ConsoleServerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPortTemplate> dcimConsoleServerPortTemplatesUpdateWithHttpInfo(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port template. (required)
     * @param writableConsoleServerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortTemplatesUpdateAsync(Integer id, WritableConsoleServerPortTemplate writableConsoleServerPortTemplate, final ApiCallback<ConsoleServerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortTemplatesUpdateValidateBeforeCall(id, writableConsoleServerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsCreate
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsCreateValidateBeforeCall(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsCreate(Async)");
        }

        return dcimConsoleServerPortsCreateCall(writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsCreate(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsCreateWithHttpInfo(writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsCreateWithHttpInfo(WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsCreateAsync(WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsCreateValidateBeforeCall(writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsDelete
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete(Async)");
        }

        return dcimConsoleServerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimConsoleServerPortsDelete(Integer id) throws ApiException {
        dcimConsoleServerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimConsoleServerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListCall(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsListValidateBeforeCall(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimConsoleServerPortsListCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimConsoleServerPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimConsoleServerPortsList200Response dcimConsoleServerPortsList(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimConsoleServerPortsList200Response> localVarResp = dcimConsoleServerPortsListWithHttpInfo(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimConsoleServerPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimConsoleServerPortsList200Response> dcimConsoleServerPortsListWithHttpInfo(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsListAsync(String id, String name, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback<DcimConsoleServerPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsListValidateBeforeCall(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimConsoleServerPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsPartialUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsPartialUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsPartialUpdate(Async)");
        }

        return dcimConsoleServerPortsPartialUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsPartialUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsPartialUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsPartialUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsPartialUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsPartialUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsRead
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead(Async)");
        }

        return dcimConsoleServerPortsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsRead(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsReadAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsTrace
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsTrace(Async)");
        }

        return dcimConsoleServerPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsTrace(Integer id) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this console server port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsTraceAsync(Integer id, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimConsoleServerPortsUpdate
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableConsoleServerPort;

        // create path and map variables
        String localVarPath = "/dcim/console-server-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimConsoleServerPortsUpdateValidateBeforeCall(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        // verify the required parameter 'writableConsoleServerPort' is set
        if (writableConsoleServerPort == null) {
            throw new ApiException("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsUpdate(Async)");
        }

        return dcimConsoleServerPortsUpdateCall(id, writableConsoleServerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ConsoleServerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsoleServerPort dcimConsoleServerPortsUpdate(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        ApiResponse<ConsoleServerPort> localVarResp = dcimConsoleServerPortsUpdateWithHttpInfo(id, writableConsoleServerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @return ApiResponse&lt;ConsoleServerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsoleServerPort> dcimConsoleServerPortsUpdateWithHttpInfo(Integer id, WritableConsoleServerPort writableConsoleServerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, null);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this console server port. (required)
     * @param writableConsoleServerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimConsoleServerPortsUpdateAsync(Integer id, WritableConsoleServerPort writableConsoleServerPort, final ApiCallback<ConsoleServerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimConsoleServerPortsUpdateValidateBeforeCall(id, writableConsoleServerPort, _callback);
        Type localVarReturnType = new TypeToken<ConsoleServerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesCreate
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesCreateValidateBeforeCall(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesCreate(Async)");
        }

        return dcimDeviceBayTemplatesCreateCall(writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesCreate(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesCreateWithHttpInfo(writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesCreateWithHttpInfo(WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesCreateAsync(WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesCreateValidateBeforeCall(writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesDelete
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete(Async)");
        }

        return dcimDeviceBayTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBayTemplatesDelete(Integer id) throws ApiException {
        dcimDeviceBayTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBayTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListCall(String id, String name, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesListValidateBeforeCall(String id, String name, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBayTemplatesListCall(id, name, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBayTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBayTemplatesList200Response dcimDeviceBayTemplatesList(String id, String name, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBayTemplatesList200Response> localVarResp = dcimDeviceBayTemplatesListWithHttpInfo(id, name, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBayTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBayTemplatesList200Response> dcimDeviceBayTemplatesListWithHttpInfo(String id, String name, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesListAsync(String id, String name, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimDeviceBayTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesListValidateBeforeCall(id, name, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBayTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesPartialUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesPartialUpdate(Async)");
        }

        return dcimDeviceBayTemplatesPartialUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesPartialUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesPartialUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesPartialUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesPartialUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesRead
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead(Async)");
        }

        return dcimDeviceBayTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay template. (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesRead(Integer id) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay template. (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesReadAsync(Integer id, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBayTemplatesUpdate
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBayTemplate;

        // create path and map variables
        String localVarPath = "/dcim/device-bay-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBayTemplatesUpdateValidateBeforeCall(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBayTemplate' is set
        if (writableDeviceBayTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesUpdate(Async)");
        }

        return dcimDeviceBayTemplatesUpdateCall(id, writableDeviceBayTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return DeviceBayTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBayTemplate dcimDeviceBayTemplatesUpdate(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        ApiResponse<DeviceBayTemplate> localVarResp = dcimDeviceBayTemplatesUpdateWithHttpInfo(id, writableDeviceBayTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @return ApiResponse&lt;DeviceBayTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBayTemplate> dcimDeviceBayTemplatesUpdateWithHttpInfo(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, null);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay template. (required)
     * @param writableDeviceBayTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBayTemplatesUpdateAsync(Integer id, WritableDeviceBayTemplate writableDeviceBayTemplate, final ApiCallback<DeviceBayTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBayTemplatesUpdateValidateBeforeCall(id, writableDeviceBayTemplate, _callback);
        Type localVarReturnType = new TypeToken<DeviceBayTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysCreate
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysCreateValidateBeforeCall(WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysCreate(Async)");
        }

        return dcimDeviceBaysCreateCall(writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysCreate(WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysCreateWithHttpInfo(writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysCreateWithHttpInfo(WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysCreateAsync(WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysCreateValidateBeforeCall(writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysDelete
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysDelete(Async)");
        }

        return dcimDeviceBaysDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceBaysDelete(Integer id) throws ApiException {
        dcimDeviceBaysDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceBaysDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysList
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListCall(String id, String name, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysListValidateBeforeCall(String id, String name, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceBaysListCall(id, name, description, q, regionId, region, siteId, site, deviceId, device, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceBaysList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceBaysList200Response dcimDeviceBaysList(String id, String name, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceBaysList200Response> localVarResp = dcimDeviceBaysListWithHttpInfo(id, name, description, q, regionId, region, siteId, site, deviceId, device, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceBaysList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceBaysList200Response> dcimDeviceBaysListWithHttpInfo(String id, String name, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, description, q, regionId, region, siteId, site, deviceId, device, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysListAsync(String id, String name, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimDeviceBaysList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysListValidateBeforeCall(id, name, description, q, regionId, region, siteId, site, deviceId, device, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceBaysList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysPartialUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysPartialUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysPartialUpdate(Async)");
        }

        return dcimDeviceBaysPartialUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysPartialUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysPartialUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysPartialUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysPartialUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysPartialUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysRead
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysRead(Async)");
        }

        return dcimDeviceBaysReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay. (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysRead(Integer id) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay. (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device bay. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysReadAsync(Integer id, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceBaysUpdate
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceBay;

        // create path and map variables
        String localVarPath = "/dcim/device-bays/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceBaysUpdateValidateBeforeCall(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceBay' is set
        if (writableDeviceBay == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysUpdate(Async)");
        }

        return dcimDeviceBaysUpdateCall(id, writableDeviceBay, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return DeviceBay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceBay dcimDeviceBaysUpdate(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        ApiResponse<DeviceBay> localVarResp = dcimDeviceBaysUpdateWithHttpInfo(id, writableDeviceBay);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @return ApiResponse&lt;DeviceBay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceBay> dcimDeviceBaysUpdateWithHttpInfo(Integer id, WritableDeviceBay writableDeviceBay) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, null);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device bay. (required)
     * @param writableDeviceBay  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceBaysUpdateAsync(Integer id, WritableDeviceBay writableDeviceBay, final ApiCallback<DeviceBay> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceBaysUpdateValidateBeforeCall(id, writableDeviceBay, _callback);
        Type localVarReturnType = new TypeToken<DeviceBay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesCreate
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesCreateValidateBeforeCall(DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesCreate(Async)");
        }

        return dcimDeviceRolesCreateCall(deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesCreate(DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesCreateWithHttpInfo(deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesCreateWithHttpInfo(DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesCreateAsync(DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesCreateValidateBeforeCall(deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesDelete
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesDelete(Async)");
        }

        return dcimDeviceRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceRolesDelete(Integer id) throws ApiException {
        dcimDeviceRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListCall(String id, String name, String slug, String color, String vmRole, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (vmRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vm_role", vmRole));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesListValidateBeforeCall(String id, String name, String slug, String color, String vmRole, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceRolesListCall(id, name, slug, color, vmRole, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceRolesList200Response dcimDeviceRolesList(String id, String name, String slug, String color, String vmRole, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceRolesList200Response> localVarResp = dcimDeviceRolesListWithHttpInfo(id, name, slug, color, vmRole, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceRolesList200Response> dcimDeviceRolesListWithHttpInfo(String id, String name, String slug, String color, String vmRole, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param vmRole  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesListAsync(String id, String name, String slug, String color, String vmRole, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback<DcimDeviceRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesListValidateBeforeCall(id, name, slug, color, vmRole, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesPartialUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesPartialUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesPartialUpdate(Async)");
        }

        return dcimDeviceRolesPartialUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesPartialUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesPartialUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesPartialUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesPartialUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesPartialUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesRead
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesRead(Async)");
        }

        return dcimDeviceRolesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device role. (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesRead(Integer id) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device role. (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesReadAsync(Integer id, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceRolesUpdate
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceRole;

        // create path and map variables
        String localVarPath = "/dcim/device-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceRolesUpdateValidateBeforeCall(Integer id, DeviceRole deviceRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate(Async)");
        }

        // verify the required parameter 'deviceRole' is set
        if (deviceRole == null) {
            throw new ApiException("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesUpdate(Async)");
        }

        return dcimDeviceRolesUpdateCall(id, deviceRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return DeviceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRole dcimDeviceRolesUpdate(Integer id, DeviceRole deviceRole) throws ApiException {
        ApiResponse<DeviceRole> localVarResp = dcimDeviceRolesUpdateWithHttpInfo(id, deviceRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @return ApiResponse&lt;DeviceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRole> dcimDeviceRolesUpdateWithHttpInfo(Integer id, DeviceRole deviceRole) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, null);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device role. (required)
     * @param deviceRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceRolesUpdateAsync(Integer id, DeviceRole deviceRole, final ApiCallback<DeviceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceRolesUpdateValidateBeforeCall(id, deviceRole, _callback);
        Type localVarReturnType = new TypeToken<DeviceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesCreate
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesCreateValidateBeforeCall(WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesCreate(Async)");
        }

        return dcimDeviceTypesCreateCall(writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesCreate(WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesCreateWithHttpInfo(writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesCreateWithHttpInfo(WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesCreateAsync(WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesCreateValidateBeforeCall(writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesDelete
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesDelete(Async)");
        }

        return dcimDeviceTypesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDeviceTypesDelete(Integer id) throws ApiException {
        dcimDeviceTypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDeviceTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesList
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String manufacturerIdN, String manufacturerN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (partNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number", partNumber));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (subdeviceRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role", subdeviceRole));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (modelIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ic", modelIc));
        }

        if (modelNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nic", modelNic));
        }

        if (modelIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__iew", modelIew));
        }

        if (modelNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__niew", modelNiew));
        }

        if (modelIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__isw", modelIsw));
        }

        if (modelNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nisw", modelNisw));
        }

        if (modelIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__ie", modelIe));
        }

        if (modelNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__nie", modelNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (partNumberN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__n", partNumberN));
        }

        if (partNumberIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ic", partNumberIc));
        }

        if (partNumberNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nic", partNumberNic));
        }

        if (partNumberIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__iew", partNumberIew));
        }

        if (partNumberNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__niew", partNumberNiew));
        }

        if (partNumberIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__isw", partNumberIsw));
        }

        if (partNumberNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nisw", partNumberNisw));
        }

        if (partNumberIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__ie", partNumberIe));
        }

        if (partNumberNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_number__nie", partNumberNie));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (subdeviceRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subdevice_role__n", subdeviceRoleN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesListValidateBeforeCall(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String manufacturerIdN, String manufacturerN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDeviceTypesListCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, manufacturerIdN, manufacturerN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDeviceTypesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDeviceTypesList200Response dcimDeviceTypesList(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String manufacturerIdN, String manufacturerN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDeviceTypesList200Response> localVarResp = dcimDeviceTypesListWithHttpInfo(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, manufacturerIdN, manufacturerN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDeviceTypesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDeviceTypesList200Response> dcimDeviceTypesListWithHttpInfo(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String manufacturerIdN, String manufacturerN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, manufacturerIdN, manufacturerN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param model  (optional)
     * @param slug  (optional)
     * @param partNumber  (optional)
     * @param uHeight  (optional)
     * @param isFullDepth  (optional)
     * @param subdeviceRole  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param modelN  (optional)
     * @param modelIc  (optional)
     * @param modelNic  (optional)
     * @param modelIew  (optional)
     * @param modelNiew  (optional)
     * @param modelIsw  (optional)
     * @param modelNisw  (optional)
     * @param modelIe  (optional)
     * @param modelNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param partNumberN  (optional)
     * @param partNumberIc  (optional)
     * @param partNumberNic  (optional)
     * @param partNumberIew  (optional)
     * @param partNumberNiew  (optional)
     * @param partNumberIsw  (optional)
     * @param partNumberNisw  (optional)
     * @param partNumberIe  (optional)
     * @param partNumberNie  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param subdeviceRoleN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesListAsync(String id, String model, String slug, String partNumber, String uHeight, String isFullDepth, String subdeviceRole, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String modelN, String modelIc, String modelNic, String modelIew, String modelNiew, String modelIsw, String modelNisw, String modelIe, String modelNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String partNumberN, String partNumberIc, String partNumberNic, String partNumberIew, String partNumberNiew, String partNumberIsw, String partNumberNisw, String partNumberIe, String partNumberNie, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String subdeviceRoleN, String manufacturerIdN, String manufacturerN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimDeviceTypesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesListValidateBeforeCall(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, manufacturerIdN, manufacturerN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDeviceTypesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesPartialUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesPartialUpdate(Async)");
        }

        return dcimDeviceTypesPartialUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesPartialUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesPartialUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesPartialUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesPartialUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesPartialUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesRead
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesRead(Async)");
        }

        return dcimDeviceTypesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device type. (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesRead(Integer id) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device type. (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesReadAsync(Integer id, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDeviceTypesUpdate
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceType;

        // create path and map variables
        String localVarPath = "/dcim/device-types/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDeviceTypesUpdateValidateBeforeCall(Integer id, WritableDeviceType writableDeviceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceType' is set
        if (writableDeviceType == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesUpdate(Async)");
        }

        return dcimDeviceTypesUpdateCall(id, writableDeviceType, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return DeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceType dcimDeviceTypesUpdate(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        ApiResponse<DeviceType> localVarResp = dcimDeviceTypesUpdateWithHttpInfo(id, writableDeviceType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @return ApiResponse&lt;DeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceType> dcimDeviceTypesUpdateWithHttpInfo(Integer id, WritableDeviceType writableDeviceType) throws ApiException {
        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, null);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device type. (required)
     * @param writableDeviceType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDeviceTypesUpdateAsync(Integer id, WritableDeviceType writableDeviceType, final ApiCallback<DeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDeviceTypesUpdateValidateBeforeCall(id, writableDeviceType, _callback);
        Type localVarReturnType = new TypeToken<DeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesCreate
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesCreateValidateBeforeCall(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesCreate(Async)");
        }

        return dcimDevicesCreateCall(writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesCreate(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesCreateWithHttpInfo(writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesCreateWithHttpInfo(WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesCreateAsync(WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesCreateValidateBeforeCall(writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesDelete
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesDelete(Async)");
        }

        return dcimDevicesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimDevicesDelete(Integer id) throws ApiException {
        dcimDevicesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimDevicesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesGraphs
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesGraphs(Async)");
        }

        return dcimDevicesGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular Device.
     * @param id A unique integer value identifying this device. (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesGraphs(Integer id) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular Device.
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular Device.
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesGraphsAsync(Integer id, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesList
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param localContextData  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListCall(String id, String name, String assetTag, String face, String position, String vcPosition, String vcPriority, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String localContextData, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String platformId, String platform, String regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String virtualChassisIdN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (vcPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position", vcPosition));
        }

        if (vcPriority != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority", vcPriority));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (localContextData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_context_data", localContextData));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (deviceTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id", deviceTypeId));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (platformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id", platformId));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (rackGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_group_id", rackGroupId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (clusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id", clusterId));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (isFullDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_full_depth", isFullDepth));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (hasPrimaryIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_primary_ip", hasPrimaryIp));
        }

        if (virtualChassisId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id", virtualChassisId));
        }

        if (virtualChassisMember != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_member", virtualChassisMember));
        }

        if (consolePorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_ports", consolePorts));
        }

        if (consoleServerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("console_server_ports", consoleServerPorts));
        }

        if (powerPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_ports", powerPorts));
        }

        if (powerOutlets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_outlets", powerOutlets));
        }

        if (interfaces != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interfaces", interfaces));
        }

        if (passThroughPorts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass_through_ports", passThroughPorts));
        }

        if (deviceBays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_bays", deviceBays));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (faceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face__n", faceN));
        }

        if (positionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__n", positionN));
        }

        if (positionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lte", positionLte));
        }

        if (positionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__lt", positionLt));
        }

        if (positionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gte", positionGte));
        }

        if (positionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position__gt", positionGt));
        }

        if (vcPositionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__n", vcPositionN));
        }

        if (vcPositionLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lte", vcPositionLte));
        }

        if (vcPositionLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__lt", vcPositionLt));
        }

        if (vcPositionGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gte", vcPositionGte));
        }

        if (vcPositionGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_position__gt", vcPositionGt));
        }

        if (vcPriorityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__n", vcPriorityN));
        }

        if (vcPriorityLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lte", vcPriorityLte));
        }

        if (vcPriorityLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__lt", vcPriorityLt));
        }

        if (vcPriorityGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gte", vcPriorityGte));
        }

        if (vcPriorityGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vc_priority__gt", vcPriorityGt));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (deviceTypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_type_id__n", deviceTypeIdN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (platformIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform_id__n", platformIdN));
        }

        if (platformN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform__n", platformN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (rackGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_group_id__n", rackGroupIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (clusterIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cluster_id__n", clusterIdN));
        }

        if (modelN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model__n", modelN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (virtualChassisIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual_chassis_id__n", virtualChassisIdN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesListValidateBeforeCall(String id, String name, String assetTag, String face, String position, String vcPosition, String vcPriority, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String localContextData, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String platformId, String platform, String regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String virtualChassisIdN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimDevicesListCall(id, name, assetTag, face, position, vcPosition, vcPriority, tenantGroupId, tenantGroup, tenantId, tenant, localContextData, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, platformId, platform, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, virtualChassisIdN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param localContextData  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimDevicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimDevicesList200Response dcimDevicesList(String id, String name, String assetTag, String face, String position, String vcPosition, String vcPriority, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String localContextData, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String platformId, String platform, String regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String virtualChassisIdN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimDevicesList200Response> localVarResp = dcimDevicesListWithHttpInfo(id, name, assetTag, face, position, vcPosition, vcPriority, tenantGroupId, tenantGroup, tenantId, tenant, localContextData, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, platformId, platform, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, virtualChassisIdN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param localContextData  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimDevicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimDevicesList200Response> dcimDevicesListWithHttpInfo(String id, String name, String assetTag, String face, String position, String vcPosition, String vcPriority, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String localContextData, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String platformId, String platform, String regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String virtualChassisIdN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, name, assetTag, face, position, vcPosition, vcPriority, tenantGroupId, tenantGroup, tenantId, tenant, localContextData, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, platformId, platform, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, virtualChassisIdN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param assetTag  (optional)
     * @param face  (optional)
     * @param position  (optional)
     * @param vcPosition  (optional)
     * @param vcPriority  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param localContextData  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param deviceTypeId  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param platformId  (optional)
     * @param platform  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param rackId  (optional)
     * @param clusterId  (optional)
     * @param model  (optional)
     * @param status  (optional)
     * @param isFullDepth  (optional)
     * @param macAddress  (optional)
     * @param serial  (optional)
     * @param hasPrimaryIp  (optional)
     * @param virtualChassisId  (optional)
     * @param virtualChassisMember  (optional)
     * @param consolePorts  (optional)
     * @param consoleServerPorts  (optional)
     * @param powerPorts  (optional)
     * @param powerOutlets  (optional)
     * @param interfaces  (optional)
     * @param passThroughPorts  (optional)
     * @param deviceBays  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param faceN  (optional)
     * @param positionN  (optional)
     * @param positionLte  (optional)
     * @param positionLt  (optional)
     * @param positionGte  (optional)
     * @param positionGt  (optional)
     * @param vcPositionN  (optional)
     * @param vcPositionLte  (optional)
     * @param vcPositionLt  (optional)
     * @param vcPositionGte  (optional)
     * @param vcPositionGt  (optional)
     * @param vcPriorityN  (optional)
     * @param vcPriorityLte  (optional)
     * @param vcPriorityLt  (optional)
     * @param vcPriorityGte  (optional)
     * @param vcPriorityGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param deviceTypeIdN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param platformIdN  (optional)
     * @param platformN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param rackIdN  (optional)
     * @param clusterIdN  (optional)
     * @param modelN  (optional)
     * @param statusN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param virtualChassisIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesListAsync(String id, String name, String assetTag, String face, String position, String vcPosition, String vcPriority, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String localContextData, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String manufacturerId, String manufacturer, String deviceTypeId, String roleId, String role, String platformId, String platform, String regionId, String region, String siteId, String site, String rackGroupId, String rackId, String clusterId, String model, String status, String isFullDepth, String macAddress, String serial, String hasPrimaryIp, String virtualChassisId, String virtualChassisMember, String consolePorts, String consoleServerPorts, String powerPorts, String powerOutlets, String interfaces, String passThroughPorts, String deviceBays, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String faceN, String positionN, String positionLte, String positionLt, String positionGte, String positionGt, String vcPositionN, String vcPositionLte, String vcPositionLt, String vcPositionGte, String vcPositionGt, String vcPriorityN, String vcPriorityLte, String vcPriorityLt, String vcPriorityGte, String vcPriorityGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String manufacturerIdN, String manufacturerN, String deviceTypeIdN, String roleIdN, String roleN, String platformIdN, String platformN, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, String rackIdN, String clusterIdN, String modelN, String statusN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, String virtualChassisIdN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimDevicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesListValidateBeforeCall(id, name, assetTag, face, position, vcPosition, vcPriority, tenantGroupId, tenantGroup, tenantId, tenant, localContextData, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, platformId, platform, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, virtualChassisIdN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimDevicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesNapalm
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/napalm/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (method != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("method", method));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesNapalmValidateBeforeCall(Integer id, String method, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesNapalm(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling dcimDevicesNapalm(Async)");
        }

        return dcimDevicesNapalmCall(id, method, _callback);

    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return DeviceNAPALM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceNAPALM dcimDevicesNapalm(Integer id, String method) throws ApiException {
        ApiResponse<DeviceNAPALM> localVarResp = dcimDevicesNapalmWithHttpInfo(id, method);
        return localVarResp.getData();
    }

    /**
     * 
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @return ApiResponse&lt;DeviceNAPALM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceNAPALM> dcimDevicesNapalmWithHttpInfo(Integer id, String method) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, null);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Execute a NAPALM method on a Device
     * @param id A unique integer value identifying this device. (required)
     * @param method  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesNapalmAsync(Integer id, String method, final ApiCallback<DeviceNAPALM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesNapalmValidateBeforeCall(id, method, _callback);
        Type localVarReturnType = new TypeToken<DeviceNAPALM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesPartialUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesPartialUpdate(Async)");
        }

        return dcimDevicesPartialUpdateCall(id, writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesPartialUpdate(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesPartialUpdateWithHttpInfo(id, writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesPartialUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesPartialUpdateAsync(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesPartialUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesRead
     * @param id A unique integer value identifying this device. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesRead(Async)");
        }

        return dcimDevicesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device. (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesRead(Integer id) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device. (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this device. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesReadAsync(Integer id, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimDevicesUpdate
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceWithConfigContext;

        // create path and map variables
        String localVarPath = "/dcim/devices/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimDevicesUpdateValidateBeforeCall(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimDevicesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceWithConfigContext' is set
        if (writableDeviceWithConfigContext == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesUpdate(Async)");
        }

        return dcimDevicesUpdateCall(id, writableDeviceWithConfigContext, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return DeviceWithConfigContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceWithConfigContext dcimDevicesUpdate(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        ApiResponse<DeviceWithConfigContext> localVarResp = dcimDevicesUpdateWithHttpInfo(id, writableDeviceWithConfigContext);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @return ApiResponse&lt;DeviceWithConfigContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceWithConfigContext> dcimDevicesUpdateWithHttpInfo(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext) throws ApiException {
        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, null);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this device. (required)
     * @param writableDeviceWithConfigContext  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimDevicesUpdateAsync(Integer id, WritableDeviceWithConfigContext writableDeviceWithConfigContext, final ApiCallback<DeviceWithConfigContext> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimDevicesUpdateValidateBeforeCall(id, writableDeviceWithConfigContext, _callback);
        Type localVarReturnType = new TypeToken<DeviceWithConfigContext>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesCreate
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesCreateValidateBeforeCall(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesCreate(Async)");
        }

        return dcimFrontPortTemplatesCreateCall(writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesCreate(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesCreateWithHttpInfo(writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesCreateWithHttpInfo(WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesCreateAsync(WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesCreateValidateBeforeCall(writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesDelete
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesDelete(Async)");
        }

        return dcimFrontPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortTemplatesDelete(Integer id) throws ApiException {
        dcimFrontPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesListValidateBeforeCall(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimFrontPortTemplatesListCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortTemplatesList200Response dcimFrontPortTemplatesList(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortTemplatesList200Response> localVarResp = dcimFrontPortTemplatesListWithHttpInfo(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortTemplatesList200Response> dcimFrontPortTemplatesListWithHttpInfo(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesListAsync(String id, String name, String type, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimFrontPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesListValidateBeforeCall(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesPartialUpdate(Async)");
        }

        return dcimFrontPortTemplatesPartialUpdateCall(id, writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesPartialUpdate(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesPartialUpdateWithHttpInfo(id, writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesPartialUpdateAsync(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesPartialUpdateValidateBeforeCall(id, writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesRead
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesRead(Async)");
        }

        return dcimFrontPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port template. (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port template. (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesReadAsync(Integer id, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortTemplatesUpdate
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/front-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortTemplatesUpdateValidateBeforeCall(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPortTemplate' is set
        if (writableFrontPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesUpdate(Async)");
        }

        return dcimFrontPortTemplatesUpdateCall(id, writableFrontPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return FrontPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPortTemplate dcimFrontPortTemplatesUpdate(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        ApiResponse<FrontPortTemplate> localVarResp = dcimFrontPortTemplatesUpdateWithHttpInfo(id, writableFrontPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @return ApiResponse&lt;FrontPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPortTemplate> dcimFrontPortTemplatesUpdateWithHttpInfo(Integer id, WritableFrontPortTemplate writableFrontPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, writableFrontPortTemplate, null);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port template. (required)
     * @param writableFrontPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortTemplatesUpdateAsync(Integer id, WritableFrontPortTemplate writableFrontPortTemplate, final ApiCallback<FrontPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortTemplatesUpdateValidateBeforeCall(id, writableFrontPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<FrontPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsCreate
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsCreateValidateBeforeCall(WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsCreate(Async)");
        }

        return dcimFrontPortsCreateCall(writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsCreate(WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsCreateWithHttpInfo(writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsCreateWithHttpInfo(WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsCreateAsync(WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsCreateValidateBeforeCall(writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsDelete
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsDelete(Async)");
        }

        return dcimFrontPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimFrontPortsDelete(Integer id) throws ApiException {
        dcimFrontPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimFrontPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListCall(String id, String name, String type, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsListValidateBeforeCall(String id, String name, String type, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimFrontPortsListCall(id, name, type, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimFrontPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimFrontPortsList200Response dcimFrontPortsList(String id, String name, String type, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimFrontPortsList200Response> localVarResp = dcimFrontPortsListWithHttpInfo(id, name, type, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimFrontPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimFrontPortsList200Response> dcimFrontPortsListWithHttpInfo(String id, String name, String type, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, type, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsListAsync(String id, String name, String type, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimFrontPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsListValidateBeforeCall(id, name, type, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimFrontPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsPartialUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsPartialUpdateValidateBeforeCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsPartialUpdate(Async)");
        }

        return dcimFrontPortsPartialUpdateCall(id, writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsPartialUpdate(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsPartialUpdateWithHttpInfo(id, writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsPartialUpdateWithHttpInfo(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsPartialUpdateAsync(Integer id, WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsPartialUpdateValidateBeforeCall(id, writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsRead
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsRead(Async)");
        }

        return dcimFrontPortsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsRead(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsReadAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsTrace
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsTrace(Async)");
        }

        return dcimFrontPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this front port. (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsTrace(Integer id) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this front port. (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this front port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsTraceAsync(Integer id, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimFrontPortsUpdate
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableFrontPort;

        // create path and map variables
        String localVarPath = "/dcim/front-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimFrontPortsUpdateValidateBeforeCall(Integer id, WritableFrontPort writableFrontPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimFrontPortsUpdate(Async)");
        }

        // verify the required parameter 'writableFrontPort' is set
        if (writableFrontPort == null) {
            throw new ApiException("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsUpdate(Async)");
        }

        return dcimFrontPortsUpdateCall(id, writableFrontPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return FrontPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FrontPort dcimFrontPortsUpdate(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        ApiResponse<FrontPort> localVarResp = dcimFrontPortsUpdateWithHttpInfo(id, writableFrontPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @return ApiResponse&lt;FrontPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontPort> dcimFrontPortsUpdateWithHttpInfo(Integer id, WritableFrontPort writableFrontPort) throws ApiException {
        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, writableFrontPort, null);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this front port. (required)
     * @param writableFrontPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimFrontPortsUpdateAsync(Integer id, WritableFrontPort writableFrontPort, final ApiCallback<FrontPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimFrontPortsUpdateValidateBeforeCall(id, writableFrontPort, _callback);
        Type localVarReturnType = new TypeToken<FrontPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceConnectionsList
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsListCall(String connectionStatus, String site, String deviceId, String device, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceConnectionsListValidateBeforeCall(String connectionStatus, String site, String deviceId, String device, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfaceConnectionsListCall(connectionStatus, site, deviceId, device, connectionStatusN, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceConnectionsList200Response dcimInterfaceConnectionsList(String connectionStatus, String site, String deviceId, String device, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceConnectionsList200Response> localVarResp = dcimInterfaceConnectionsListWithHttpInfo(connectionStatus, site, deviceId, device, connectionStatusN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceConnectionsList200Response> dcimInterfaceConnectionsListWithHttpInfo(String connectionStatus, String site, String deviceId, String device, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceConnectionsListValidateBeforeCall(connectionStatus, site, deviceId, device, connectionStatusN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceConnectionsListAsync(String connectionStatus, String site, String deviceId, String device, String connectionStatusN, Integer limit, Integer offset, final ApiCallback<DcimInterfaceConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceConnectionsListValidateBeforeCall(connectionStatus, site, deviceId, device, connectionStatusN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesCreate
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesCreateValidateBeforeCall(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesCreate(Async)");
        }

        return dcimInterfaceTemplatesCreateCall(writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesCreate(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesCreateWithHttpInfo(writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesCreateWithHttpInfo(WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesCreateAsync(WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesCreateValidateBeforeCall(writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesDelete
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete(Async)");
        }

        return dcimInterfaceTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfaceTemplatesDelete(Integer id) throws ApiException {
        dcimInterfaceTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfaceTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListCall(String id, String name, String type, String mgmtOnly, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesListValidateBeforeCall(String id, String name, String type, String mgmtOnly, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfaceTemplatesListCall(id, name, type, mgmtOnly, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfaceTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfaceTemplatesList200Response dcimInterfaceTemplatesList(String id, String name, String type, String mgmtOnly, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfaceTemplatesList200Response> localVarResp = dcimInterfaceTemplatesListWithHttpInfo(id, name, type, mgmtOnly, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfaceTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfaceTemplatesList200Response> dcimInterfaceTemplatesListWithHttpInfo(String id, String name, String type, String mgmtOnly, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param mgmtOnly  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesListAsync(String id, String name, String type, String mgmtOnly, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimInterfaceTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesListValidateBeforeCall(id, name, type, mgmtOnly, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfaceTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesPartialUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesPartialUpdate(Async)");
        }

        return dcimInterfaceTemplatesPartialUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesPartialUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesPartialUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesPartialUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesPartialUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesPartialUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesRead
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead(Async)");
        }

        return dcimInterfaceTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface template. (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesRead(Integer id) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface template. (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesReadAsync(Integer id, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfaceTemplatesUpdate
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInterfaceTemplate;

        // create path and map variables
        String localVarPath = "/dcim/interface-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfaceTemplatesUpdateValidateBeforeCall(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableInterfaceTemplate' is set
        if (writableInterfaceTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesUpdate(Async)");
        }

        return dcimInterfaceTemplatesUpdateCall(id, writableInterfaceTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return InterfaceTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InterfaceTemplate dcimInterfaceTemplatesUpdate(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        ApiResponse<InterfaceTemplate> localVarResp = dcimInterfaceTemplatesUpdateWithHttpInfo(id, writableInterfaceTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @return ApiResponse&lt;InterfaceTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InterfaceTemplate> dcimInterfaceTemplatesUpdateWithHttpInfo(Integer id, WritableInterfaceTemplate writableInterfaceTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, null);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface template. (required)
     * @param writableInterfaceTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfaceTemplatesUpdateAsync(Integer id, WritableInterfaceTemplate writableInterfaceTemplate, final ApiCallback<InterfaceTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfaceTemplatesUpdateValidateBeforeCall(id, writableInterfaceTemplate, _callback);
        Type localVarReturnType = new TypeToken<InterfaceTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesCreate
     * @param writableDeviceInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateCall(WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesCreateValidateBeforeCall(WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableDeviceInterface' is set
        if (writableDeviceInterface == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesCreate(Async)");
        }

        return dcimInterfacesCreateCall(writableDeviceInterface, _callback);

    }

    /**
     * 
     * 
     * @param writableDeviceInterface  (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesCreate(WritableDeviceInterface writableDeviceInterface) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesCreateWithHttpInfo(writableDeviceInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableDeviceInterface  (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesCreateWithHttpInfo(WritableDeviceInterface writableDeviceInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableDeviceInterface, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableDeviceInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesCreateAsync(WritableDeviceInterface writableDeviceInterface, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesCreateValidateBeforeCall(writableDeviceInterface, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesDelete
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesDelete(Async)");
        }

        return dcimInterfacesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInterfacesDelete(Integer id) throws ApiException {
        dcimInterfacesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInterfacesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesGraphs
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesGraphs(Async)");
        }

        return dcimInterfacesGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesGraphs(Integer id) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular interface.
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesGraphsAsync(Integer id, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesList
     * @param id  (optional)
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param mode  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param kind  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param modeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param lagIdN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListCall(String id, String name, String connectionStatus, String type, String enabled, String mtu, String mgmtOnly, String mode, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String kind, String lagId, String macAddress, String vlanId, String vlan, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, String lagIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (mtu != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu", mtu));
        }

        if (mgmtOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mgmt_only", mgmtOnly));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (lagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id", lagId));
        }

        if (macAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address", macAddress));
        }

        if (vlanId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan_id", vlanId));
        }

        if (vlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vlan", vlan));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (mtuN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__n", mtuN));
        }

        if (mtuLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lte", mtuLte));
        }

        if (mtuLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__lt", mtuLt));
        }

        if (mtuGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gte", mtuGte));
        }

        if (mtuGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtu__gt", mtuGt));
        }

        if (modeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode__n", modeN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (lagIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lag_id__n", lagIdN));
        }

        if (macAddressN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__n", macAddressN));
        }

        if (macAddressIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ic", macAddressIc));
        }

        if (macAddressNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nic", macAddressNic));
        }

        if (macAddressIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__iew", macAddressIew));
        }

        if (macAddressNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__niew", macAddressNiew));
        }

        if (macAddressIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__isw", macAddressIsw));
        }

        if (macAddressNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nisw", macAddressNisw));
        }

        if (macAddressIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__ie", macAddressIe));
        }

        if (macAddressNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mac_address__nie", macAddressNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesListValidateBeforeCall(String id, String name, String connectionStatus, String type, String enabled, String mtu, String mgmtOnly, String mode, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String kind, String lagId, String macAddress, String vlanId, String vlan, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, String lagIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInterfacesListCall(id, name, connectionStatus, type, enabled, mtu, mgmtOnly, mode, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, kind, lagId, macAddress, vlanId, vlan, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, tagN, lagIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param mode  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param kind  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param modeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param lagIdN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInterfacesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInterfacesList200Response dcimInterfacesList(String id, String name, String connectionStatus, String type, String enabled, String mtu, String mgmtOnly, String mode, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String kind, String lagId, String macAddress, String vlanId, String vlan, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, String lagIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInterfacesList200Response> localVarResp = dcimInterfacesListWithHttpInfo(id, name, connectionStatus, type, enabled, mtu, mgmtOnly, mode, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, kind, lagId, macAddress, vlanId, vlan, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, tagN, lagIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param mode  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param kind  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param modeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param lagIdN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInterfacesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInterfacesList200Response> dcimInterfacesListWithHttpInfo(String id, String name, String connectionStatus, String type, String enabled, String mtu, String mgmtOnly, String mode, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String kind, String lagId, String macAddress, String vlanId, String vlan, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, String lagIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, connectionStatus, type, enabled, mtu, mgmtOnly, mode, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, kind, lagId, macAddress, vlanId, vlan, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, tagN, lagIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param type  (optional)
     * @param enabled  (optional)
     * @param mtu  (optional)
     * @param mgmtOnly  (optional)
     * @param mode  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param kind  (optional)
     * @param lagId  (optional)
     * @param macAddress  (optional)
     * @param vlanId  (optional)
     * @param vlan  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param typeN  (optional)
     * @param mtuN  (optional)
     * @param mtuLte  (optional)
     * @param mtuLt  (optional)
     * @param mtuGte  (optional)
     * @param mtuGt  (optional)
     * @param modeN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tagN  (optional)
     * @param lagIdN  (optional)
     * @param macAddressN  (optional)
     * @param macAddressIc  (optional)
     * @param macAddressNic  (optional)
     * @param macAddressIew  (optional)
     * @param macAddressNiew  (optional)
     * @param macAddressIsw  (optional)
     * @param macAddressNisw  (optional)
     * @param macAddressIe  (optional)
     * @param macAddressNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesListAsync(String id, String name, String connectionStatus, String type, String enabled, String mtu, String mgmtOnly, String mode, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String kind, String lagId, String macAddress, String vlanId, String vlan, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, String typeN, String mtuN, String mtuLte, String mtuLt, String mtuGte, String mtuGt, String modeN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String tagN, String lagIdN, String macAddressN, String macAddressIc, String macAddressNic, String macAddressIew, String macAddressNiew, String macAddressIsw, String macAddressNisw, String macAddressIe, String macAddressNie, Integer limit, Integer offset, final ApiCallback<DcimInterfacesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesListValidateBeforeCall(id, name, connectionStatus, type, enabled, mtu, mgmtOnly, mode, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, kind, lagId, macAddress, vlanId, vlan, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, tagN, lagIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInterfacesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesPartialUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateCall(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesPartialUpdateValidateBeforeCall(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceInterface' is set
        if (writableDeviceInterface == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesPartialUpdate(Async)");
        }

        return dcimInterfacesPartialUpdateCall(id, writableDeviceInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesPartialUpdate(Integer id, WritableDeviceInterface writableDeviceInterface) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesPartialUpdateWithHttpInfo(id, writableDeviceInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesPartialUpdateWithHttpInfo(Integer id, WritableDeviceInterface writableDeviceInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableDeviceInterface, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesPartialUpdateAsync(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesPartialUpdateValidateBeforeCall(id, writableDeviceInterface, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesRead
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesRead(Async)");
        }

        return dcimInterfacesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface. (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesRead(Integer id) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesReadAsync(Integer id, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesTrace
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesTrace(Async)");
        }

        return dcimInterfacesTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesTrace(Integer id) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this interface. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesTraceAsync(Integer id, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInterfacesUpdate
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateCall(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableDeviceInterface;

        // create path and map variables
        String localVarPath = "/dcim/interfaces/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInterfacesUpdateValidateBeforeCall(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInterfacesUpdate(Async)");
        }

        // verify the required parameter 'writableDeviceInterface' is set
        if (writableDeviceInterface == null) {
            throw new ApiException("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesUpdate(Async)");
        }

        return dcimInterfacesUpdateCall(id, writableDeviceInterface, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @return DeviceInterface
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInterface dcimInterfacesUpdate(Integer id, WritableDeviceInterface writableDeviceInterface) throws ApiException {
        ApiResponse<DeviceInterface> localVarResp = dcimInterfacesUpdateWithHttpInfo(id, writableDeviceInterface);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @return ApiResponse&lt;DeviceInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInterface> dcimInterfacesUpdateWithHttpInfo(Integer id, WritableDeviceInterface writableDeviceInterface) throws ApiException {
        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableDeviceInterface, null);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this interface. (required)
     * @param writableDeviceInterface  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInterfacesUpdateAsync(Integer id, WritableDeviceInterface writableDeviceInterface, final ApiCallback<DeviceInterface> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInterfacesUpdateValidateBeforeCall(id, writableDeviceInterface, _callback);
        Type localVarReturnType = new TypeToken<DeviceInterface>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsCreate
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsCreateValidateBeforeCall(WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsCreate(Async)");
        }

        return dcimInventoryItemsCreateCall(writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsCreate(WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsCreateWithHttpInfo(writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsCreateWithHttpInfo(WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsCreateAsync(WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsCreateValidateBeforeCall(writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsDelete
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsDelete(Async)");
        }

        return dcimInventoryItemsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimInventoryItemsDelete(Integer id) throws ApiException {
        dcimInventoryItemsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimInventoryItemsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsList
     * @param id  (optional)
     * @param name  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListCall(String id, String name, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String parentId, String manufacturerId, String manufacturer, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (partId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id", partId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (discovered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("discovered", discovered));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (partIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__n", partIdN));
        }

        if (partIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ic", partIdIc));
        }

        if (partIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nic", partIdNic));
        }

        if (partIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__iew", partIdIew));
        }

        if (partIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__niew", partIdNiew));
        }

        if (partIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__isw", partIdIsw));
        }

        if (partIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nisw", partIdNisw));
        }

        if (partIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__ie", partIdIe));
        }

        if (partIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("part_id__nie", partIdNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsListValidateBeforeCall(String id, String name, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String parentId, String manufacturerId, String manufacturer, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimInventoryItemsListCall(id, name, partId, assetTag, discovered, q, regionId, region, siteId, site, deviceId, device, tag, parentId, manufacturerId, manufacturer, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, parentIdN, manufacturerIdN, manufacturerN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimInventoryItemsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimInventoryItemsList200Response dcimInventoryItemsList(String id, String name, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String parentId, String manufacturerId, String manufacturer, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimInventoryItemsList200Response> localVarResp = dcimInventoryItemsListWithHttpInfo(id, name, partId, assetTag, discovered, q, regionId, region, siteId, site, deviceId, device, tag, parentId, manufacturerId, manufacturer, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, parentIdN, manufacturerIdN, manufacturerN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimInventoryItemsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimInventoryItemsList200Response> dcimInventoryItemsListWithHttpInfo(String id, String name, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String parentId, String manufacturerId, String manufacturer, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, partId, assetTag, discovered, q, regionId, region, siteId, site, deviceId, device, tag, parentId, manufacturerId, manufacturer, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, parentIdN, manufacturerIdN, manufacturerN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param partId  (optional)
     * @param assetTag  (optional)
     * @param discovered  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param parentId  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param serial  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param partIdN  (optional)
     * @param partIdIc  (optional)
     * @param partIdNic  (optional)
     * @param partIdIew  (optional)
     * @param partIdNiew  (optional)
     * @param partIdIsw  (optional)
     * @param partIdNisw  (optional)
     * @param partIdIe  (optional)
     * @param partIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param parentIdN  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsListAsync(String id, String name, String partId, String assetTag, String discovered, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String parentId, String manufacturerId, String manufacturer, String serial, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String partIdN, String partIdIc, String partIdNic, String partIdIew, String partIdNiew, String partIdIsw, String partIdNisw, String partIdIe, String partIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String parentIdN, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback<DcimInventoryItemsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsListValidateBeforeCall(id, name, partId, assetTag, discovered, q, regionId, region, siteId, site, deviceId, device, tag, parentId, manufacturerId, manufacturer, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, parentIdN, manufacturerIdN, manufacturerN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimInventoryItemsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsPartialUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsPartialUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsPartialUpdate(Async)");
        }

        return dcimInventoryItemsPartialUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsPartialUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsPartialUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsPartialUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsPartialUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsPartialUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsRead
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsRead(Async)");
        }

        return dcimInventoryItemsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this inventory item. (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsRead(Integer id) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this inventory item. (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this inventory item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsReadAsync(Integer id, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimInventoryItemsUpdate
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableInventoryItem;

        // create path and map variables
        String localVarPath = "/dcim/inventory-items/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimInventoryItemsUpdateValidateBeforeCall(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate(Async)");
        }

        // verify the required parameter 'writableInventoryItem' is set
        if (writableInventoryItem == null) {
            throw new ApiException("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsUpdate(Async)");
        }

        return dcimInventoryItemsUpdateCall(id, writableInventoryItem, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return InventoryItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InventoryItem dcimInventoryItemsUpdate(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        ApiResponse<InventoryItem> localVarResp = dcimInventoryItemsUpdateWithHttpInfo(id, writableInventoryItem);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @return ApiResponse&lt;InventoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryItem> dcimInventoryItemsUpdateWithHttpInfo(Integer id, WritableInventoryItem writableInventoryItem) throws ApiException {
        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, null);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this inventory item. (required)
     * @param writableInventoryItem  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimInventoryItemsUpdateAsync(Integer id, WritableInventoryItem writableInventoryItem, final ApiCallback<InventoryItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimInventoryItemsUpdateValidateBeforeCall(id, writableInventoryItem, _callback);
        Type localVarReturnType = new TypeToken<InventoryItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersCreate
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersCreateValidateBeforeCall(Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersCreate(Async)");
        }

        return dcimManufacturersCreateCall(manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersCreate(Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersCreateWithHttpInfo(manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersCreateWithHttpInfo(Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersCreateAsync(Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersCreateValidateBeforeCall(manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersDelete
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersDelete(Async)");
        }

        return dcimManufacturersDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimManufacturersDelete(Integer id) throws ApiException {
        dcimManufacturersDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimManufacturersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListCall(String id, String name, String slug, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersListValidateBeforeCall(String id, String name, String slug, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimManufacturersListCall(id, name, slug, description, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimManufacturersList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimManufacturersList200Response dcimManufacturersList(String id, String name, String slug, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimManufacturersList200Response> localVarResp = dcimManufacturersListWithHttpInfo(id, name, slug, description, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimManufacturersList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimManufacturersList200Response> dcimManufacturersListWithHttpInfo(String id, String name, String slug, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersListAsync(String id, String name, String slug, String description, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, Integer limit, Integer offset, final ApiCallback<DcimManufacturersList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersListValidateBeforeCall(id, name, slug, description, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimManufacturersList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersPartialUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersPartialUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersPartialUpdate(Async)");
        }

        return dcimManufacturersPartialUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersPartialUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersPartialUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersPartialUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersPartialUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersPartialUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersRead
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersRead(Async)");
        }

        return dcimManufacturersReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersRead(Integer id) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this manufacturer. (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersReadAsync(Integer id, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimManufacturersUpdate
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manufacturer;

        // create path and map variables
        String localVarPath = "/dcim/manufacturers/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimManufacturersUpdateValidateBeforeCall(Integer id, Manufacturer manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimManufacturersUpdate(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling dcimManufacturersUpdate(Async)");
        }

        return dcimManufacturersUpdateCall(id, manufacturer, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return Manufacturer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Manufacturer dcimManufacturersUpdate(Integer id, Manufacturer manufacturer) throws ApiException {
        ApiResponse<Manufacturer> localVarResp = dcimManufacturersUpdateWithHttpInfo(id, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @return ApiResponse&lt;Manufacturer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Manufacturer> dcimManufacturersUpdateWithHttpInfo(Integer id, Manufacturer manufacturer) throws ApiException {
        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, null);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this manufacturer. (required)
     * @param manufacturer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimManufacturersUpdateAsync(Integer id, Manufacturer manufacturer, final ApiCallback<Manufacturer> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimManufacturersUpdateValidateBeforeCall(id, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<Manufacturer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsCreate
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsCreateValidateBeforeCall(WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsCreate(Async)");
        }

        return dcimPlatformsCreateCall(writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsCreate(WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsCreateWithHttpInfo(writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsCreateWithHttpInfo(WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsCreateAsync(WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsCreateValidateBeforeCall(writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsDelete
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsDelete(Async)");
        }

        return dcimPlatformsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPlatformsDelete(Integer id) throws ApiException {
        dcimPlatformsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPlatformsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListCall(String id, String name, String slug, String napalmDriver, String description, String q, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (napalmDriver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver", napalmDriver));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (manufacturerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id", manufacturerId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (napalmDriverN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__n", napalmDriverN));
        }

        if (napalmDriverIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ic", napalmDriverIc));
        }

        if (napalmDriverNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nic", napalmDriverNic));
        }

        if (napalmDriverIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__iew", napalmDriverIew));
        }

        if (napalmDriverNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__niew", napalmDriverNiew));
        }

        if (napalmDriverIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__isw", napalmDriverIsw));
        }

        if (napalmDriverNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nisw", napalmDriverNisw));
        }

        if (napalmDriverIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__ie", napalmDriverIe));
        }

        if (napalmDriverNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("napalm_driver__nie", napalmDriverNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (manufacturerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer_id__n", manufacturerIdN));
        }

        if (manufacturerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer__n", manufacturerN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsListValidateBeforeCall(String id, String name, String slug, String napalmDriver, String description, String q, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPlatformsListCall(id, name, slug, napalmDriver, description, q, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, manufacturerIdN, manufacturerN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPlatformsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPlatformsList200Response dcimPlatformsList(String id, String name, String slug, String napalmDriver, String description, String q, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPlatformsList200Response> localVarResp = dcimPlatformsListWithHttpInfo(id, name, slug, napalmDriver, description, q, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, manufacturerIdN, manufacturerN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPlatformsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPlatformsList200Response> dcimPlatformsListWithHttpInfo(String id, String name, String slug, String napalmDriver, String description, String q, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, q, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, manufacturerIdN, manufacturerN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param napalmDriver  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param manufacturerId  (optional)
     * @param manufacturer  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param napalmDriverN  (optional)
     * @param napalmDriverIc  (optional)
     * @param napalmDriverNic  (optional)
     * @param napalmDriverIew  (optional)
     * @param napalmDriverNiew  (optional)
     * @param napalmDriverIsw  (optional)
     * @param napalmDriverNisw  (optional)
     * @param napalmDriverIe  (optional)
     * @param napalmDriverNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param manufacturerIdN  (optional)
     * @param manufacturerN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsListAsync(String id, String name, String slug, String napalmDriver, String description, String q, String manufacturerId, String manufacturer, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String napalmDriverN, String napalmDriverIc, String napalmDriverNic, String napalmDriverIew, String napalmDriverNiew, String napalmDriverIsw, String napalmDriverNisw, String napalmDriverIe, String napalmDriverNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String manufacturerIdN, String manufacturerN, Integer limit, Integer offset, final ApiCallback<DcimPlatformsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsListValidateBeforeCall(id, name, slug, napalmDriver, description, q, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, manufacturerIdN, manufacturerN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPlatformsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsPartialUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsPartialUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsPartialUpdate(Async)");
        }

        return dcimPlatformsPartialUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsPartialUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsPartialUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsPartialUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsPartialUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsPartialUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsRead
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsRead(Async)");
        }

        return dcimPlatformsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this platform. (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsRead(Integer id) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this platform. (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this platform. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsReadAsync(Integer id, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPlatformsUpdate
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePlatform;

        // create path and map variables
        String localVarPath = "/dcim/platforms/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPlatformsUpdateValidateBeforeCall(Integer id, WritablePlatform writablePlatform, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPlatformsUpdate(Async)");
        }

        // verify the required parameter 'writablePlatform' is set
        if (writablePlatform == null) {
            throw new ApiException("Missing the required parameter 'writablePlatform' when calling dcimPlatformsUpdate(Async)");
        }

        return dcimPlatformsUpdateCall(id, writablePlatform, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Platform dcimPlatformsUpdate(Integer id, WritablePlatform writablePlatform) throws ApiException {
        ApiResponse<Platform> localVarResp = dcimPlatformsUpdateWithHttpInfo(id, writablePlatform);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> dcimPlatformsUpdateWithHttpInfo(Integer id, WritablePlatform writablePlatform) throws ApiException {
        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this platform. (required)
     * @param writablePlatform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPlatformsUpdateAsync(Integer id, WritablePlatform writablePlatform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPlatformsUpdateValidateBeforeCall(id, writablePlatform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerConnectionsList
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerConnectionsListCall(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-connections/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerConnectionsListValidateBeforeCall(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerConnectionsListCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerConnectionsList200Response dcimPowerConnectionsList(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerConnectionsList200Response> localVarResp = dcimPowerConnectionsListWithHttpInfo(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerConnectionsList200Response> dcimPowerConnectionsListWithHttpInfo(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerConnectionsListValidateBeforeCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (optional)
     * @param connectionStatus  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param connectionStatusN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerConnectionsListAsync(String name, String connectionStatus, String site, String deviceId, String device, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String connectionStatusN, Integer limit, Integer offset, final ApiCallback<DcimPowerConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerConnectionsListValidateBeforeCall(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsCreate
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsCreateValidateBeforeCall(WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsCreate(Async)");
        }

        return dcimPowerFeedsCreateCall(writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsCreate(WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsCreateWithHttpInfo(writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsCreateWithHttpInfo(WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsCreateAsync(WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsCreateValidateBeforeCall(writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsDelete
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsDelete(Async)");
        }

        return dcimPowerFeedsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerFeedsDelete(Integer id) throws ApiException {
        dcimPowerFeedsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerFeedsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsList
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String powerPanelId, String rackId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String regionIdN, String regionN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (supply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply", supply));
        }

        if (phase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase", phase));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (amperage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage", amperage));
        }

        if (maxUtilization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization", maxUtilization));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (powerPanelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id", powerPanelId));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (supplyN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supply__n", supplyN));
        }

        if (phaseN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phase__n", phaseN));
        }

        if (voltageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__n", voltageN));
        }

        if (voltageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lte", voltageLte));
        }

        if (voltageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__lt", voltageLt));
        }

        if (voltageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gte", voltageGte));
        }

        if (voltageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage__gt", voltageGt));
        }

        if (amperageN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__n", amperageN));
        }

        if (amperageLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lte", amperageLte));
        }

        if (amperageLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__lt", amperageLt));
        }

        if (amperageGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gte", amperageGte));
        }

        if (amperageGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amperage__gt", amperageGt));
        }

        if (maxUtilizationN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__n", maxUtilizationN));
        }

        if (maxUtilizationLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lte", maxUtilizationLte));
        }

        if (maxUtilizationLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__lt", maxUtilizationLt));
        }

        if (maxUtilizationGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gte", maxUtilizationGte));
        }

        if (maxUtilizationGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_utilization__gt", maxUtilizationGt));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (powerPanelIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("power_panel_id__n", powerPanelIdN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsListValidateBeforeCall(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String powerPanelId, String rackId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String regionIdN, String regionN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerFeedsListCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, powerPanelId, rackId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, regionIdN, regionN, siteIdN, siteN, powerPanelIdN, rackIdN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerFeedsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerFeedsList200Response dcimPowerFeedsList(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String powerPanelId, String rackId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String regionIdN, String regionN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerFeedsList200Response> localVarResp = dcimPowerFeedsListWithHttpInfo(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, powerPanelId, rackId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, regionIdN, regionN, siteIdN, siteN, powerPanelIdN, rackIdN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerFeedsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerFeedsList200Response> dcimPowerFeedsListWithHttpInfo(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String powerPanelId, String rackId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String regionIdN, String regionN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, powerPanelId, rackId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, regionIdN, regionN, siteIdN, siteN, powerPanelIdN, rackIdN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param status  (optional)
     * @param type  (optional)
     * @param supply  (optional)
     * @param phase  (optional)
     * @param voltage  (optional)
     * @param amperage  (optional)
     * @param maxUtilization  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param powerPanelId  (optional)
     * @param rackId  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param statusN  (optional)
     * @param typeN  (optional)
     * @param supplyN  (optional)
     * @param phaseN  (optional)
     * @param voltageN  (optional)
     * @param voltageLte  (optional)
     * @param voltageLt  (optional)
     * @param voltageGte  (optional)
     * @param voltageGt  (optional)
     * @param amperageN  (optional)
     * @param amperageLte  (optional)
     * @param amperageLt  (optional)
     * @param amperageGte  (optional)
     * @param amperageGt  (optional)
     * @param maxUtilizationN  (optional)
     * @param maxUtilizationLte  (optional)
     * @param maxUtilizationLt  (optional)
     * @param maxUtilizationGte  (optional)
     * @param maxUtilizationGt  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param powerPanelIdN  (optional)
     * @param rackIdN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsListAsync(String id, String name, String status, String type, String supply, String phase, String voltage, String amperage, String maxUtilization, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String powerPanelId, String rackId, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String statusN, String typeN, String supplyN, String phaseN, String voltageN, String voltageLte, String voltageLt, String voltageGte, String voltageGt, String amperageN, String amperageLte, String amperageLt, String amperageGte, String amperageGt, String maxUtilizationN, String maxUtilizationLte, String maxUtilizationLt, String maxUtilizationGte, String maxUtilizationGt, String regionIdN, String regionN, String siteIdN, String siteN, String powerPanelIdN, String rackIdN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimPowerFeedsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsListValidateBeforeCall(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, powerPanelId, rackId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, regionIdN, regionN, siteIdN, siteN, powerPanelIdN, rackIdN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerFeedsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsPartialUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsPartialUpdateValidateBeforeCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsPartialUpdate(Async)");
        }

        return dcimPowerFeedsPartialUpdateCall(id, writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsPartialUpdate(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsPartialUpdateWithHttpInfo(id, writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsPartialUpdateWithHttpInfo(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsPartialUpdateAsync(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsPartialUpdateValidateBeforeCall(id, writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsRead
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsRead(Async)");
        }

        return dcimPowerFeedsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power feed. (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsRead(Integer id) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power feed. (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power feed. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsReadAsync(Integer id, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerFeedsUpdate
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerFeed;

        // create path and map variables
        String localVarPath = "/dcim/power-feeds/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerFeedsUpdateValidateBeforeCall(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerFeedsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerFeed' is set
        if (writablePowerFeed == null) {
            throw new ApiException("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsUpdate(Async)");
        }

        return dcimPowerFeedsUpdateCall(id, writablePowerFeed, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return PowerFeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerFeed dcimPowerFeedsUpdate(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        ApiResponse<PowerFeed> localVarResp = dcimPowerFeedsUpdateWithHttpInfo(id, writablePowerFeed);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @return ApiResponse&lt;PowerFeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerFeed> dcimPowerFeedsUpdateWithHttpInfo(Integer id, WritablePowerFeed writablePowerFeed) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, writablePowerFeed, null);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power feed. (required)
     * @param writablePowerFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerFeedsUpdateAsync(Integer id, WritablePowerFeed writablePowerFeed, final ApiCallback<PowerFeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerFeedsUpdateValidateBeforeCall(id, writablePowerFeed, _callback);
        Type localVarReturnType = new TypeToken<PowerFeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesCreate
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesCreateValidateBeforeCall(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesCreate(Async)");
        }

        return dcimPowerOutletTemplatesCreateCall(writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesCreate(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesCreateWithHttpInfo(writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesCreateWithHttpInfo(WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesCreateAsync(WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesCreateValidateBeforeCall(writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesDelete
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete(Async)");
        }

        return dcimPowerOutletTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletTemplatesDelete(Integer id) throws ApiException {
        dcimPowerOutletTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListCall(String id, String name, String type, String feedLeg, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesListValidateBeforeCall(String id, String name, String type, String feedLeg, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletTemplatesListCall(id, name, type, feedLeg, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletTemplatesList200Response dcimPowerOutletTemplatesList(String id, String name, String type, String feedLeg, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletTemplatesList200Response> localVarResp = dcimPowerOutletTemplatesListWithHttpInfo(id, name, type, feedLeg, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletTemplatesList200Response> dcimPowerOutletTemplatesListWithHttpInfo(String id, String name, String type, String feedLeg, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param feedLeg  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param feedLegN  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesListAsync(String id, String name, String type, String feedLeg, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String feedLegN, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesListValidateBeforeCall(id, name, type, feedLeg, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesPartialUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesPartialUpdate(Async)");
        }

        return dcimPowerOutletTemplatesPartialUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesPartialUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesPartialUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesPartialUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesRead
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead(Async)");
        }

        return dcimPowerOutletTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet template. (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesReadAsync(Integer id, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletTemplatesUpdate
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutletTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-outlet-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutletTemplate' is set
        if (writablePowerOutletTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesUpdate(Async)");
        }

        return dcimPowerOutletTemplatesUpdateCall(id, writablePowerOutletTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return PowerOutletTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutletTemplate dcimPowerOutletTemplatesUpdate(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        ApiResponse<PowerOutletTemplate> localVarResp = dcimPowerOutletTemplatesUpdateWithHttpInfo(id, writablePowerOutletTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @return ApiResponse&lt;PowerOutletTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutletTemplate> dcimPowerOutletTemplatesUpdateWithHttpInfo(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, null);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet template. (required)
     * @param writablePowerOutletTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletTemplatesUpdateAsync(Integer id, WritablePowerOutletTemplate writablePowerOutletTemplate, final ApiCallback<PowerOutletTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletTemplatesUpdateValidateBeforeCall(id, writablePowerOutletTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerOutletTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsCreate
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsCreateValidateBeforeCall(WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsCreate(Async)");
        }

        return dcimPowerOutletsCreateCall(writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsCreate(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsCreateWithHttpInfo(writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsCreateWithHttpInfo(WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsCreateAsync(WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsCreateValidateBeforeCall(writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsDelete
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsDelete(Async)");
        }

        return dcimPowerOutletsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerOutletsDelete(Integer id) throws ApiException {
        dcimPowerOutletsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerOutletsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsList
     * @param id  (optional)
     * @param name  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListCall(String id, String name, String feedLeg, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (feedLeg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg", feedLeg));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (feedLegN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed_leg__n", feedLegN));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsListValidateBeforeCall(String id, String name, String feedLeg, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerOutletsListCall(id, name, feedLeg, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerOutletsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerOutletsList200Response dcimPowerOutletsList(String id, String name, String feedLeg, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerOutletsList200Response> localVarResp = dcimPowerOutletsListWithHttpInfo(id, name, feedLeg, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerOutletsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerOutletsList200Response> dcimPowerOutletsListWithHttpInfo(String id, String name, String feedLeg, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, feedLeg, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param feedLeg  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param feedLegN  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsListAsync(String id, String name, String feedLeg, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String feedLegN, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback<DcimPowerOutletsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsListValidateBeforeCall(id, name, feedLeg, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerOutletsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsPartialUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsPartialUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsPartialUpdate(Async)");
        }

        return dcimPowerOutletsPartialUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsPartialUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsPartialUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsPartialUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsPartialUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsPartialUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsRead
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsRead(Async)");
        }

        return dcimPowerOutletsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsRead(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsReadAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsTrace
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsTrace(Async)");
        }

        return dcimPowerOutletsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsTrace(Integer id) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power outlet. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsTraceAsync(Integer id, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerOutletsUpdate
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerOutlet;

        // create path and map variables
        String localVarPath = "/dcim/power-outlets/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerOutletsUpdateValidateBeforeCall(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerOutlet' is set
        if (writablePowerOutlet == null) {
            throw new ApiException("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsUpdate(Async)");
        }

        return dcimPowerOutletsUpdateCall(id, writablePowerOutlet, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return PowerOutlet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerOutlet dcimPowerOutletsUpdate(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        ApiResponse<PowerOutlet> localVarResp = dcimPowerOutletsUpdateWithHttpInfo(id, writablePowerOutlet);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @return ApiResponse&lt;PowerOutlet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerOutlet> dcimPowerOutletsUpdateWithHttpInfo(Integer id, WritablePowerOutlet writablePowerOutlet) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, null);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power outlet. (required)
     * @param writablePowerOutlet  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerOutletsUpdateAsync(Integer id, WritablePowerOutlet writablePowerOutlet, final ApiCallback<PowerOutlet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerOutletsUpdateValidateBeforeCall(id, writablePowerOutlet, _callback);
        Type localVarReturnType = new TypeToken<PowerOutlet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsCreate
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsCreateValidateBeforeCall(WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsCreate(Async)");
        }

        return dcimPowerPanelsCreateCall(writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsCreate(WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsCreateWithHttpInfo(writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsCreateWithHttpInfo(WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsCreateAsync(WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsCreateValidateBeforeCall(writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsDelete
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsDelete(Async)");
        }

        return dcimPowerPanelsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPanelsDelete(Integer id) throws ApiException {
        dcimPowerPanelsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPanelsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsList
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListCall(String id, String name, String q, String regionId, String region, String siteId, String site, String rackGroupId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (rackGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_group_id", rackGroupId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (rackGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_group_id__n", rackGroupIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsListValidateBeforeCall(String id, String name, String q, String regionId, String region, String siteId, String site, String rackGroupId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPanelsListCall(id, name, q, regionId, region, siteId, site, rackGroupId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPanelsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPanelsList200Response dcimPowerPanelsList(String id, String name, String q, String regionId, String region, String siteId, String site, String rackGroupId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPanelsList200Response> localVarResp = dcimPowerPanelsListWithHttpInfo(id, name, q, regionId, region, siteId, site, rackGroupId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPanelsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPanelsList200Response> dcimPowerPanelsListWithHttpInfo(String id, String name, String q, String regionId, String region, String siteId, String site, String rackGroupId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, q, regionId, region, siteId, site, rackGroupId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param rackGroupId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param rackGroupIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsListAsync(String id, String name, String q, String regionId, String region, String siteId, String site, String rackGroupId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String regionIdN, String regionN, String siteIdN, String siteN, String rackGroupIdN, Integer limit, Integer offset, final ApiCallback<DcimPowerPanelsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsListValidateBeforeCall(id, name, q, regionId, region, siteId, site, rackGroupId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPanelsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsPartialUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsPartialUpdate(Async)");
        }

        return dcimPowerPanelsPartialUpdateCall(id, writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsPartialUpdate(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsPartialUpdateWithHttpInfo(id, writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsPartialUpdateWithHttpInfo(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsPartialUpdateAsync(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsPartialUpdateValidateBeforeCall(id, writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsRead
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsRead(Async)");
        }

        return dcimPowerPanelsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power panel. (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsRead(Integer id) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power panel. (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power panel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsReadAsync(Integer id, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPanelsUpdate
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPanel;

        // create path and map variables
        String localVarPath = "/dcim/power-panels/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPanelsUpdateValidateBeforeCall(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPanelsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPanel' is set
        if (writablePowerPanel == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsUpdate(Async)");
        }

        return dcimPowerPanelsUpdateCall(id, writablePowerPanel, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return PowerPanel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPanel dcimPowerPanelsUpdate(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        ApiResponse<PowerPanel> localVarResp = dcimPowerPanelsUpdateWithHttpInfo(id, writablePowerPanel);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @return ApiResponse&lt;PowerPanel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPanel> dcimPowerPanelsUpdateWithHttpInfo(Integer id, WritablePowerPanel writablePowerPanel) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, writablePowerPanel, null);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power panel. (required)
     * @param writablePowerPanel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPanelsUpdateAsync(Integer id, WritablePowerPanel writablePowerPanel, final ApiCallback<PowerPanel> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPanelsUpdateValidateBeforeCall(id, writablePowerPanel, _callback);
        Type localVarReturnType = new TypeToken<PowerPanel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesCreate
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesCreateValidateBeforeCall(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesCreate(Async)");
        }

        return dcimPowerPortTemplatesCreateCall(writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesCreate(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesCreateWithHttpInfo(writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesCreateWithHttpInfo(WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesCreateAsync(WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesCreateValidateBeforeCall(writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesDelete
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete(Async)");
        }

        return dcimPowerPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortTemplatesDelete(Integer id) throws ApiException {
        dcimPowerPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesListValidateBeforeCall(String id, String name, String type, String maximumDraw, String allocatedDraw, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortTemplatesListCall(id, name, type, maximumDraw, allocatedDraw, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerPortTemplatesList200Response dcimPowerPortTemplatesList(String id, String name, String type, String maximumDraw, String allocatedDraw, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerPortTemplatesList200Response> localVarResp = dcimPowerPortTemplatesListWithHttpInfo(id, name, type, maximumDraw, allocatedDraw, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerPortTemplatesList200Response> dcimPowerPortTemplatesListWithHttpInfo(String id, String name, String type, String maximumDraw, String allocatedDraw, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesListAsync(String id, String name, String type, String maximumDraw, String allocatedDraw, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimPowerPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesListValidateBeforeCall(id, name, type, maximumDraw, allocatedDraw, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesPartialUpdate(Async)");
        }

        return dcimPowerPortTemplatesPartialUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesPartialUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesPartialUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesPartialUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesPartialUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesRead
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead(Async)");
        }

        return dcimPowerPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port template. (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port template. (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesReadAsync(Integer id, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortTemplatesUpdate
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/power-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortTemplatesUpdateValidateBeforeCall(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPortTemplate' is set
        if (writablePowerPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesUpdate(Async)");
        }

        return dcimPowerPortTemplatesUpdateCall(id, writablePowerPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return PowerPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPortTemplate dcimPowerPortTemplatesUpdate(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        ApiResponse<PowerPortTemplate> localVarResp = dcimPowerPortTemplatesUpdateWithHttpInfo(id, writablePowerPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @return ApiResponse&lt;PowerPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPortTemplate> dcimPowerPortTemplatesUpdateWithHttpInfo(Integer id, WritablePowerPortTemplate writablePowerPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, null);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port template. (required)
     * @param writablePowerPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortTemplatesUpdateAsync(Integer id, WritablePowerPortTemplate writablePowerPortTemplate, final ApiCallback<PowerPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortTemplatesUpdateValidateBeforeCall(id, writablePowerPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<PowerPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsCreate
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsCreateValidateBeforeCall(WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsCreate(Async)");
        }

        return dcimPowerPortsCreateCall(writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsCreate(WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsCreateWithHttpInfo(writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsCreateWithHttpInfo(WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsCreateAsync(WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsCreateValidateBeforeCall(writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsDelete
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsDelete(Async)");
        }

        return dcimPowerPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimPowerPortsDelete(Integer id) throws ApiException {
        dcimPowerPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimPowerPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListCall(String id, String name, String maximumDraw, String allocatedDraw, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (maximumDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw", maximumDraw));
        }

        if (allocatedDraw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw", allocatedDraw));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (connectionStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status", connectionStatus));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (maximumDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__n", maximumDrawN));
        }

        if (maximumDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lte", maximumDrawLte));
        }

        if (maximumDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__lt", maximumDrawLt));
        }

        if (maximumDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gte", maximumDrawGte));
        }

        if (maximumDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximum_draw__gt", maximumDrawGt));
        }

        if (allocatedDrawN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__n", allocatedDrawN));
        }

        if (allocatedDrawLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lte", allocatedDrawLte));
        }

        if (allocatedDrawLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__lt", allocatedDrawLt));
        }

        if (allocatedDrawGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gte", allocatedDrawGte));
        }

        if (allocatedDrawGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allocated_draw__gt", allocatedDrawGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (connectionStatusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_status__n", connectionStatusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsListValidateBeforeCall(String id, String name, String maximumDraw, String allocatedDraw, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimPowerPortsListCall(id, name, maximumDraw, allocatedDraw, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimPowerConnectionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimPowerConnectionsList200Response dcimPowerPortsList(String id, String name, String maximumDraw, String allocatedDraw, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimPowerConnectionsList200Response> localVarResp = dcimPowerPortsListWithHttpInfo(id, name, maximumDraw, allocatedDraw, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimPowerConnectionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimPowerConnectionsList200Response> dcimPowerPortsListWithHttpInfo(String id, String name, String maximumDraw, String allocatedDraw, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, maximumDraw, allocatedDraw, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param maximumDraw  (optional)
     * @param allocatedDraw  (optional)
     * @param description  (optional)
     * @param connectionStatus  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param type  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param maximumDrawN  (optional)
     * @param maximumDrawLte  (optional)
     * @param maximumDrawLt  (optional)
     * @param maximumDrawGte  (optional)
     * @param maximumDrawGt  (optional)
     * @param allocatedDrawN  (optional)
     * @param allocatedDrawLte  (optional)
     * @param allocatedDrawLt  (optional)
     * @param allocatedDrawGte  (optional)
     * @param allocatedDrawGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param connectionStatusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param typeN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsListAsync(String id, String name, String maximumDraw, String allocatedDraw, String description, String connectionStatus, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String type, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String maximumDrawN, String maximumDrawLte, String maximumDrawLt, String maximumDrawGte, String maximumDrawGt, String allocatedDrawN, String allocatedDrawLte, String allocatedDrawLt, String allocatedDrawGte, String allocatedDrawGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String connectionStatusN, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, String typeN, Integer limit, Integer offset, final ApiCallback<DcimPowerConnectionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsListValidateBeforeCall(id, name, maximumDraw, allocatedDraw, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimPowerConnectionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsPartialUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsPartialUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsPartialUpdate(Async)");
        }

        return dcimPowerPortsPartialUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsPartialUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsPartialUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsPartialUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsPartialUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsPartialUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsRead
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsRead(Async)");
        }

        return dcimPowerPortsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsRead(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsReadAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsTrace
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsTrace(Async)");
        }

        return dcimPowerPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsTrace(Integer id) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this power port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsTraceAsync(Integer id, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimPowerPortsUpdate
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writablePowerPort;

        // create path and map variables
        String localVarPath = "/dcim/power-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimPowerPortsUpdateValidateBeforeCall(Integer id, WritablePowerPort writablePowerPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimPowerPortsUpdate(Async)");
        }

        // verify the required parameter 'writablePowerPort' is set
        if (writablePowerPort == null) {
            throw new ApiException("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsUpdate(Async)");
        }

        return dcimPowerPortsUpdateCall(id, writablePowerPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return PowerPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PowerPort dcimPowerPortsUpdate(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        ApiResponse<PowerPort> localVarResp = dcimPowerPortsUpdateWithHttpInfo(id, writablePowerPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @return ApiResponse&lt;PowerPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerPort> dcimPowerPortsUpdateWithHttpInfo(Integer id, WritablePowerPort writablePowerPort) throws ApiException {
        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, null);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this power port. (required)
     * @param writablePowerPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimPowerPortsUpdateAsync(Integer id, WritablePowerPort writablePowerPort, final ApiCallback<PowerPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimPowerPortsUpdateValidateBeforeCall(id, writablePowerPort, _callback);
        Type localVarReturnType = new TypeToken<PowerPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsCreate
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsCreateCall(WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsCreateValidateBeforeCall(WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsCreate(Async)");
        }

        return dcimRackGroupsCreateCall(writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsCreate(WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsCreateWithHttpInfo(writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsCreateWithHttpInfo(WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsCreateValidateBeforeCall(writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsCreateAsync(WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsCreateValidateBeforeCall(writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsDelete
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsDelete(Async)");
        }

        return dcimRackGroupsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackGroupsDelete(Integer id) throws ApiException {
        dcimRackGroupsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackGroupsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsListCall(String id, String name, String slug, String description, String q, String regionId, String region, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsListValidateBeforeCall(String id, String name, String slug, String description, String q, String regionId, String region, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackGroupsListCall(id, name, slug, description, q, regionId, region, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, parentIdN, parentN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackGroupsList200Response dcimRackGroupsList(String id, String name, String slug, String description, String q, String regionId, String region, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackGroupsList200Response> localVarResp = dcimRackGroupsListWithHttpInfo(id, name, slug, description, q, regionId, region, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, parentIdN, parentN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackGroupsList200Response> dcimRackGroupsListWithHttpInfo(String id, String name, String slug, String description, String q, String regionId, String region, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsListValidateBeforeCall(id, name, slug, description, q, regionId, region, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, parentIdN, parentN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsListAsync(String id, String name, String slug, String description, String q, String regionId, String region, String siteId, String site, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback<DcimRackGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsListValidateBeforeCall(id, name, slug, description, q, regionId, region, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, parentIdN, parentN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsPartialUpdate
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsPartialUpdateCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsPartialUpdateValidateBeforeCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsPartialUpdate(Async)");
        }

        return dcimRackGroupsPartialUpdateCall(id, writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsPartialUpdate(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsPartialUpdateWithHttpInfo(id, writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsPartialUpdateWithHttpInfo(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsPartialUpdateValidateBeforeCall(id, writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsPartialUpdateAsync(Integer id, WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsPartialUpdateValidateBeforeCall(id, writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsRead
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsRead(Async)");
        }

        return dcimRackGroupsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack group. (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsRead(Integer id) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack group. (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsReadAsync(Integer id, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackGroupsUpdate
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsUpdateCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackGroup;

        // create path and map variables
        String localVarPath = "/dcim/rack-groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackGroupsUpdateValidateBeforeCall(Integer id, WritableRackGroup writableRackGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackGroupsUpdate(Async)");
        }

        // verify the required parameter 'writableRackGroup' is set
        if (writableRackGroup == null) {
            throw new ApiException("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsUpdate(Async)");
        }

        return dcimRackGroupsUpdateCall(id, writableRackGroup, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return RackGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackGroup dcimRackGroupsUpdate(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        ApiResponse<RackGroup> localVarResp = dcimRackGroupsUpdateWithHttpInfo(id, writableRackGroup);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @return ApiResponse&lt;RackGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackGroup> dcimRackGroupsUpdateWithHttpInfo(Integer id, WritableRackGroup writableRackGroup) throws ApiException {
        okhttp3.Call localVarCall = dcimRackGroupsUpdateValidateBeforeCall(id, writableRackGroup, null);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack group. (required)
     * @param writableRackGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackGroupsUpdateAsync(Integer id, WritableRackGroup writableRackGroup, final ApiCallback<RackGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackGroupsUpdateValidateBeforeCall(id, writableRackGroup, _callback);
        Type localVarReturnType = new TypeToken<RackGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsCreate
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsCreateValidateBeforeCall(WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsCreate(Async)");
        }

        return dcimRackReservationsCreateCall(writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsCreate(WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsCreateWithHttpInfo(writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsCreateWithHttpInfo(WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsCreateAsync(WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsCreateValidateBeforeCall(writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsDelete
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsDelete(Async)");
        }

        return dcimRackReservationsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackReservationsDelete(Integer id) throws ApiException {
        dcimRackReservationsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackReservationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsList
     * @param id  (optional)
     * @param created  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListCall(String id, String created, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String q, String rackId, String siteId, String site, String groupId, String group, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String groupIdN, String groupN, String userIdN, String userN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (rackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id", rackId));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (rackIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rack_id__n", rackIdN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }

        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }

        if (userIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id__n", userIdN));
        }

        if (userN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__n", userN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsListValidateBeforeCall(String id, String created, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String q, String rackId, String siteId, String site, String groupId, String group, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String groupIdN, String groupN, String userIdN, String userN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackReservationsListCall(id, created, tenantGroupId, tenantGroup, tenantId, tenant, q, rackId, siteId, site, groupId, group, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, groupIdN, groupN, userIdN, userN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param created  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackReservationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackReservationsList200Response dcimRackReservationsList(String id, String created, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String q, String rackId, String siteId, String site, String groupId, String group, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String groupIdN, String groupN, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackReservationsList200Response> localVarResp = dcimRackReservationsListWithHttpInfo(id, created, tenantGroupId, tenantGroup, tenantId, tenant, q, rackId, siteId, site, groupId, group, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, groupIdN, groupN, userIdN, userN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param created  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackReservationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackReservationsList200Response> dcimRackReservationsListWithHttpInfo(String id, String created, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String q, String rackId, String siteId, String site, String groupId, String group, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String groupIdN, String groupN, String userIdN, String userN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, tenantGroupId, tenantGroup, tenantId, tenant, q, rackId, siteId, site, groupId, group, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, groupIdN, groupN, userIdN, userN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param created  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param q  (optional)
     * @param rackId  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param userId  (optional)
     * @param user  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param createdN  (optional)
     * @param createdLte  (optional)
     * @param createdLt  (optional)
     * @param createdGte  (optional)
     * @param createdGt  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param rackIdN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param userIdN  (optional)
     * @param userN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsListAsync(String id, String created, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String q, String rackId, String siteId, String site, String groupId, String group, String userId, String user, String idN, String idLte, String idLt, String idGte, String idGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String rackIdN, String siteIdN, String siteN, String groupIdN, String groupN, String userIdN, String userN, Integer limit, Integer offset, final ApiCallback<DcimRackReservationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsListValidateBeforeCall(id, created, tenantGroupId, tenantGroup, tenantId, tenant, q, rackId, siteId, site, groupId, group, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, groupIdN, groupN, userIdN, userN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackReservationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsPartialUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsPartialUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsPartialUpdate(Async)");
        }

        return dcimRackReservationsPartialUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsPartialUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsPartialUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsPartialUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsPartialUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsPartialUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsRead
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsRead(Async)");
        }

        return dcimRackReservationsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsRead(Integer id) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack reservation. (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsReadAsync(Integer id, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackReservationsUpdate
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRackReservation;

        // create path and map variables
        String localVarPath = "/dcim/rack-reservations/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackReservationsUpdateValidateBeforeCall(Integer id, WritableRackReservation writableRackReservation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackReservationsUpdate(Async)");
        }

        // verify the required parameter 'writableRackReservation' is set
        if (writableRackReservation == null) {
            throw new ApiException("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsUpdate(Async)");
        }

        return dcimRackReservationsUpdateCall(id, writableRackReservation, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return RackReservation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackReservation dcimRackReservationsUpdate(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        ApiResponse<RackReservation> localVarResp = dcimRackReservationsUpdateWithHttpInfo(id, writableRackReservation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @return ApiResponse&lt;RackReservation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackReservation> dcimRackReservationsUpdateWithHttpInfo(Integer id, WritableRackReservation writableRackReservation) throws ApiException {
        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, null);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack reservation. (required)
     * @param writableRackReservation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackReservationsUpdateAsync(Integer id, WritableRackReservation writableRackReservation, final ApiCallback<RackReservation> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackReservationsUpdateValidateBeforeCall(id, writableRackReservation, _callback);
        Type localVarReturnType = new TypeToken<RackReservation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesCreate
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesCreateValidateBeforeCall(RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesCreate(Async)");
        }

        return dcimRackRolesCreateCall(rackRole, _callback);

    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesCreate(RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesCreateWithHttpInfo(rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesCreateWithHttpInfo(RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesCreateAsync(RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesCreateValidateBeforeCall(rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesDelete
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesDelete(Async)");
        }

        return dcimRackRolesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRackRolesDelete(Integer id) throws ApiException {
        dcimRackRolesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRackRolesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListCall(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (colorN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__n", colorN));
        }

        if (colorIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ic", colorIc));
        }

        if (colorNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nic", colorNic));
        }

        if (colorIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__iew", colorIew));
        }

        if (colorNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__niew", colorNiew));
        }

        if (colorIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__isw", colorIsw));
        }

        if (colorNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nisw", colorNisw));
        }

        if (colorIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__ie", colorIe));
        }

        if (colorNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color__nie", colorNie));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesListValidateBeforeCall(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRackRolesListCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRackRolesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRackRolesList200Response dcimRackRolesList(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRackRolesList200Response> localVarResp = dcimRackRolesListWithHttpInfo(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRackRolesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRackRolesList200Response> dcimRackRolesListWithHttpInfo(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param color  (optional)
     * @param q  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param colorN  (optional)
     * @param colorIc  (optional)
     * @param colorNic  (optional)
     * @param colorIew  (optional)
     * @param colorNiew  (optional)
     * @param colorIsw  (optional)
     * @param colorNisw  (optional)
     * @param colorIe  (optional)
     * @param colorNie  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesListAsync(String id, String name, String slug, String color, String q, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String colorN, String colorIc, String colorNic, String colorIew, String colorNiew, String colorIsw, String colorNisw, String colorIe, String colorNie, Integer limit, Integer offset, final ApiCallback<DcimRackRolesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesListValidateBeforeCall(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRackRolesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesPartialUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesPartialUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesPartialUpdate(Async)");
        }

        return dcimRackRolesPartialUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesPartialUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesPartialUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesPartialUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesPartialUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesPartialUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesRead
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesRead(Async)");
        }

        return dcimRackRolesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack role. (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesRead(Integer id) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack role. (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesReadAsync(Integer id, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRackRolesUpdate
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rackRole;

        // create path and map variables
        String localVarPath = "/dcim/rack-roles/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRackRolesUpdateValidateBeforeCall(Integer id, RackRole rackRole, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRackRolesUpdate(Async)");
        }

        // verify the required parameter 'rackRole' is set
        if (rackRole == null) {
            throw new ApiException("Missing the required parameter 'rackRole' when calling dcimRackRolesUpdate(Async)");
        }

        return dcimRackRolesUpdateCall(id, rackRole, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return RackRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RackRole dcimRackRolesUpdate(Integer id, RackRole rackRole) throws ApiException {
        ApiResponse<RackRole> localVarResp = dcimRackRolesUpdateWithHttpInfo(id, rackRole);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @return ApiResponse&lt;RackRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RackRole> dcimRackRolesUpdateWithHttpInfo(Integer id, RackRole rackRole) throws ApiException {
        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, null);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack role. (required)
     * @param rackRole  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRackRolesUpdateAsync(Integer id, RackRole rackRole, final ApiCallback<RackRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRackRolesUpdateValidateBeforeCall(id, rackRole, _callback);
        Type localVarReturnType = new TypeToken<RackRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksCreate
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksCreateValidateBeforeCall(WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksCreate(Async)");
        }

        return dcimRacksCreateCall(writableRack, _callback);

    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksCreate(WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksCreateWithHttpInfo(writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksCreateWithHttpInfo(WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksCreateAsync(WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksCreateValidateBeforeCall(writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksDelete
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksDelete(Async)");
        }

        return dcimRacksDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRacksDelete(Integer id) throws ApiException {
        dcimRacksDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRacksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksElevation
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/elevation/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (face != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("face", face));
        }

        if (render != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("render", render));
        }

        if (unitWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_width", unitWidth));
        }

        if (unitHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_height", unitHeight));
        }

        if (legendWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legend_width", legendWidth));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (expandDevices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand_devices", expandDevices));
        }

        if (includeImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_images", includeImages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksElevationValidateBeforeCall(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksElevation(Async)");
        }

        return dcimRacksElevationCall(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages, _callback);

    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return List&lt;RackUnit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<RackUnit> dcimRacksElevation(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        ApiResponse<List<RackUnit>> localVarResp = dcimRacksElevationWithHttpInfo(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages);
        return localVarResp.getData();
    }

    /**
     * 
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @return ApiResponse&lt;List&lt;RackUnit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RackUnit>> dcimRacksElevationWithHttpInfo(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksElevationValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages, null);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param id A unique integer value identifying this rack. (required)
     * @param q  (optional)
     * @param face  (optional, default to front)
     * @param render  (optional, default to json)
     * @param unitWidth  (optional, default to 220)
     * @param unitHeight  (optional, default to 22)
     * @param legendWidth  (optional, default to 30)
     * @param exclude  (optional)
     * @param expandDevices  (optional, default to true)
     * @param includeImages  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksElevationAsync(Integer id, String q, String face, String render, Integer unitWidth, Integer unitHeight, Integer legendWidth, Integer exclude, Boolean expandDevices, Boolean includeImages, final ApiCallback<List<RackUnit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksElevationValidateBeforeCall(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages, _callback);
        Type localVarReturnType = new TypeToken<List<RackUnit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksList
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListCall(String id, String name, String facilityId, String assetTag, String type, String width, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String groupId, String group, String status, String roleId, String role, String serial, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String typeN, String widthN, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteIdN, String siteN, String groupIdN, String groupN, String statusN, String roleIdN, String roleN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (facilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id", facilityId));
        }

        if (assetTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag", assetTag));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (uHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height", uHeight));
        }

        if (descUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc_units", descUnits));
        }

        if (outerWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width", outerWidth));
        }

        if (outerDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth", outerDepth));
        }

        if (outerUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit", outerUnit));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (roleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id", roleId));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (serial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serial", serial));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (facilityIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__n", facilityIdN));
        }

        if (facilityIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ic", facilityIdIc));
        }

        if (facilityIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nic", facilityIdNic));
        }

        if (facilityIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__iew", facilityIdIew));
        }

        if (facilityIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__niew", facilityIdNiew));
        }

        if (facilityIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__isw", facilityIdIsw));
        }

        if (facilityIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nisw", facilityIdNisw));
        }

        if (facilityIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__ie", facilityIdIe));
        }

        if (facilityIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility_id__nie", facilityIdNie));
        }

        if (assetTagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__n", assetTagN));
        }

        if (assetTagIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ic", assetTagIc));
        }

        if (assetTagNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nic", assetTagNic));
        }

        if (assetTagIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__iew", assetTagIew));
        }

        if (assetTagNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__niew", assetTagNiew));
        }

        if (assetTagIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__isw", assetTagIsw));
        }

        if (assetTagNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nisw", assetTagNisw));
        }

        if (assetTagIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__ie", assetTagIe));
        }

        if (assetTagNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_tag__nie", assetTagNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (widthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width__n", widthN));
        }

        if (uHeightN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__n", uHeightN));
        }

        if (uHeightLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lte", uHeightLte));
        }

        if (uHeightLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__lt", uHeightLt));
        }

        if (uHeightGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gte", uHeightGte));
        }

        if (uHeightGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("u_height__gt", uHeightGt));
        }

        if (outerWidthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__n", outerWidthN));
        }

        if (outerWidthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lte", outerWidthLte));
        }

        if (outerWidthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__lt", outerWidthLt));
        }

        if (outerWidthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gte", outerWidthGte));
        }

        if (outerWidthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_width__gt", outerWidthGt));
        }

        if (outerDepthN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__n", outerDepthN));
        }

        if (outerDepthLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lte", outerDepthLte));
        }

        if (outerDepthLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__lt", outerDepthLt));
        }

        if (outerDepthGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gte", outerDepthGte));
        }

        if (outerDepthGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_depth__gt", outerDepthGt));
        }

        if (outerUnitN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_unit__n", outerUnitN));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (groupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id__n", groupIdN));
        }

        if (groupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__n", groupN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (roleIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role_id__n", roleIdN));
        }

        if (roleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role__n", roleN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksListValidateBeforeCall(String id, String name, String facilityId, String assetTag, String type, String width, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String groupId, String group, String status, String roleId, String role, String serial, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String typeN, String widthN, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteIdN, String siteN, String groupIdN, String groupN, String statusN, String roleIdN, String roleN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRacksListCall(id, name, facilityId, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, groupId, group, status, roleId, role, serial, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, typeN, widthN, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteIdN, siteN, groupIdN, groupN, statusN, roleIdN, roleN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRacksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRacksList200Response dcimRacksList(String id, String name, String facilityId, String assetTag, String type, String width, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String groupId, String group, String status, String roleId, String role, String serial, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String typeN, String widthN, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteIdN, String siteN, String groupIdN, String groupN, String statusN, String roleIdN, String roleN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRacksList200Response> localVarResp = dcimRacksListWithHttpInfo(id, name, facilityId, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, groupId, group, status, roleId, role, serial, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, typeN, widthN, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteIdN, siteN, groupIdN, groupN, statusN, roleIdN, roleN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRacksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRacksList200Response> dcimRacksListWithHttpInfo(String id, String name, String facilityId, String assetTag, String type, String width, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String groupId, String group, String status, String roleId, String role, String serial, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String typeN, String widthN, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteIdN, String siteN, String groupIdN, String groupN, String statusN, String roleIdN, String roleN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, groupId, group, status, roleId, role, serial, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, typeN, widthN, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteIdN, siteN, groupIdN, groupN, statusN, roleIdN, roleN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param facilityId  (optional)
     * @param assetTag  (optional)
     * @param type  (optional)
     * @param width  (optional)
     * @param uHeight  (optional)
     * @param descUnits  (optional)
     * @param outerWidth  (optional)
     * @param outerDepth  (optional)
     * @param outerUnit  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param groupId  (optional)
     * @param group  (optional)
     * @param status  (optional)
     * @param roleId  (optional)
     * @param role  (optional)
     * @param serial  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param facilityIdN  (optional)
     * @param facilityIdIc  (optional)
     * @param facilityIdNic  (optional)
     * @param facilityIdIew  (optional)
     * @param facilityIdNiew  (optional)
     * @param facilityIdIsw  (optional)
     * @param facilityIdNisw  (optional)
     * @param facilityIdIe  (optional)
     * @param facilityIdNie  (optional)
     * @param assetTagN  (optional)
     * @param assetTagIc  (optional)
     * @param assetTagNic  (optional)
     * @param assetTagIew  (optional)
     * @param assetTagNiew  (optional)
     * @param assetTagIsw  (optional)
     * @param assetTagNisw  (optional)
     * @param assetTagIe  (optional)
     * @param assetTagNie  (optional)
     * @param typeN  (optional)
     * @param widthN  (optional)
     * @param uHeightN  (optional)
     * @param uHeightLte  (optional)
     * @param uHeightLt  (optional)
     * @param uHeightGte  (optional)
     * @param uHeightGt  (optional)
     * @param outerWidthN  (optional)
     * @param outerWidthLte  (optional)
     * @param outerWidthLt  (optional)
     * @param outerWidthGte  (optional)
     * @param outerWidthGt  (optional)
     * @param outerDepthN  (optional)
     * @param outerDepthLte  (optional)
     * @param outerDepthLt  (optional)
     * @param outerDepthGte  (optional)
     * @param outerDepthGt  (optional)
     * @param outerUnitN  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param groupIdN  (optional)
     * @param groupN  (optional)
     * @param statusN  (optional)
     * @param roleIdN  (optional)
     * @param roleN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksListAsync(String id, String name, String facilityId, String assetTag, String type, String width, String uHeight, String descUnits, String outerWidth, String outerDepth, String outerUnit, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String regionId, String region, String siteId, String site, String groupId, String group, String status, String roleId, String role, String serial, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String facilityIdN, String facilityIdIc, String facilityIdNic, String facilityIdIew, String facilityIdNiew, String facilityIdIsw, String facilityIdNisw, String facilityIdIe, String facilityIdNie, String assetTagN, String assetTagIc, String assetTagNic, String assetTagIew, String assetTagNiew, String assetTagIsw, String assetTagNisw, String assetTagIe, String assetTagNie, String typeN, String widthN, String uHeightN, String uHeightLte, String uHeightLt, String uHeightGte, String uHeightGt, String outerWidthN, String outerWidthLte, String outerWidthLt, String outerWidthGte, String outerWidthGt, String outerDepthN, String outerDepthLte, String outerDepthLt, String outerDepthGte, String outerDepthGt, String outerUnitN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String regionIdN, String regionN, String siteIdN, String siteN, String groupIdN, String groupN, String statusN, String roleIdN, String roleN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimRacksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksListValidateBeforeCall(id, name, facilityId, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, groupId, group, status, roleId, role, serial, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, typeN, widthN, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteIdN, siteN, groupIdN, groupN, statusN, roleIdN, roleN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRacksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksPartialUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksPartialUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksPartialUpdate(Async)");
        }

        return dcimRacksPartialUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksPartialUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksPartialUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksPartialUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksPartialUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksPartialUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksRead
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksRead(Async)");
        }

        return dcimRacksReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack. (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksRead(Integer id) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack. (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rack. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksReadAsync(Integer id, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRacksUpdate
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRack;

        // create path and map variables
        String localVarPath = "/dcim/racks/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRacksUpdateValidateBeforeCall(Integer id, WritableRack writableRack, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRacksUpdate(Async)");
        }

        // verify the required parameter 'writableRack' is set
        if (writableRack == null) {
            throw new ApiException("Missing the required parameter 'writableRack' when calling dcimRacksUpdate(Async)");
        }

        return dcimRacksUpdateCall(id, writableRack, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return Rack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rack dcimRacksUpdate(Integer id, WritableRack writableRack) throws ApiException {
        ApiResponse<Rack> localVarResp = dcimRacksUpdateWithHttpInfo(id, writableRack);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @return ApiResponse&lt;Rack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rack> dcimRacksUpdateWithHttpInfo(Integer id, WritableRack writableRack) throws ApiException {
        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, null);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rack. (required)
     * @param writableRack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRacksUpdateAsync(Integer id, WritableRack writableRack, final ApiCallback<Rack> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRacksUpdateValidateBeforeCall(id, writableRack, _callback);
        Type localVarReturnType = new TypeToken<Rack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesCreate
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesCreateValidateBeforeCall(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesCreate(Async)");
        }

        return dcimRearPortTemplatesCreateCall(writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesCreate(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesCreateWithHttpInfo(writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesCreateWithHttpInfo(WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesCreateAsync(WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesCreateValidateBeforeCall(writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesDelete
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesDelete(Async)");
        }

        return dcimRearPortTemplatesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortTemplatesDelete(Integer id) throws ApiException {
        dcimRearPortTemplatesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortTemplatesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListCall(String id, String name, String type, String positions, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (devicetypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id", devicetypeId));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (devicetypeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devicetype_id__n", devicetypeIdN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesListValidateBeforeCall(String id, String name, String type, String positions, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRearPortTemplatesListCall(id, name, type, positions, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortTemplatesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortTemplatesList200Response dcimRearPortTemplatesList(String id, String name, String type, String positions, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortTemplatesList200Response> localVarResp = dcimRearPortTemplatesListWithHttpInfo(id, name, type, positions, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortTemplatesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortTemplatesList200Response> dcimRearPortTemplatesListWithHttpInfo(String id, String name, String type, String positions, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, positions, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param q  (optional)
     * @param devicetypeId  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param devicetypeIdN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesListAsync(String id, String name, String type, String positions, String q, String devicetypeId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String devicetypeIdN, Integer limit, Integer offset, final ApiCallback<DcimRearPortTemplatesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesListValidateBeforeCall(id, name, type, positions, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortTemplatesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesPartialUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesPartialUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesPartialUpdate(Async)");
        }

        return dcimRearPortTemplatesPartialUpdateCall(id, writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesPartialUpdate(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesPartialUpdateWithHttpInfo(id, writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesPartialUpdateWithHttpInfo(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesPartialUpdateAsync(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesPartialUpdateValidateBeforeCall(id, writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesRead
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesRead(Async)");
        }

        return dcimRearPortTemplatesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port template. (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesRead(Integer id) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port template. (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesReadAsync(Integer id, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortTemplatesUpdate
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPortTemplate;

        // create path and map variables
        String localVarPath = "/dcim/rear-port-templates/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortTemplatesUpdateValidateBeforeCall(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortTemplatesUpdate(Async)");
        }

        // verify the required parameter 'writableRearPortTemplate' is set
        if (writableRearPortTemplate == null) {
            throw new ApiException("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesUpdate(Async)");
        }

        return dcimRearPortTemplatesUpdateCall(id, writableRearPortTemplate, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return RearPortTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPortTemplate dcimRearPortTemplatesUpdate(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        ApiResponse<RearPortTemplate> localVarResp = dcimRearPortTemplatesUpdateWithHttpInfo(id, writableRearPortTemplate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @return ApiResponse&lt;RearPortTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPortTemplate> dcimRearPortTemplatesUpdateWithHttpInfo(Integer id, WritableRearPortTemplate writableRearPortTemplate) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, writableRearPortTemplate, null);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port template. (required)
     * @param writableRearPortTemplate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortTemplatesUpdateAsync(Integer id, WritableRearPortTemplate writableRearPortTemplate, final ApiCallback<RearPortTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortTemplatesUpdateValidateBeforeCall(id, writableRearPortTemplate, _callback);
        Type localVarReturnType = new TypeToken<RearPortTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsCreate
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsCreateValidateBeforeCall(WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsCreate(Async)");
        }

        return dcimRearPortsCreateCall(writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsCreate(WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsCreateWithHttpInfo(writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsCreateWithHttpInfo(WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsCreateAsync(WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsCreateValidateBeforeCall(writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsDelete
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsDelete(Async)");
        }

        return dcimRearPortsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRearPortsDelete(Integer id) throws ApiException {
        dcimRearPortsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRearPortsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsList
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListCall(String id, String name, String type, String positions, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (positions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions", positions));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (deviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id", deviceId));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }

        if (positionsN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__n", positionsN));
        }

        if (positionsLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lte", positionsLte));
        }

        if (positionsLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__lt", positionsLt));
        }

        if (positionsGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gte", positionsGte));
        }

        if (positionsGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positions__gt", positionsGt));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (deviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_id__n", deviceIdN));
        }

        if (deviceN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device__n", deviceN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsListValidateBeforeCall(String id, String name, String type, String positions, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRearPortsListCall(id, name, type, positions, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRearPortsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRearPortsList200Response dcimRearPortsList(String id, String name, String type, String positions, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRearPortsList200Response> localVarResp = dcimRearPortsListWithHttpInfo(id, name, type, positions, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRearPortsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRearPortsList200Response> dcimRearPortsListWithHttpInfo(String id, String name, String type, String positions, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, type, positions, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param type  (optional)
     * @param positions  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param deviceId  (optional)
     * @param device  (optional)
     * @param tag  (optional)
     * @param cabled  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param typeN  (optional)
     * @param positionsN  (optional)
     * @param positionsLte  (optional)
     * @param positionsLt  (optional)
     * @param positionsGte  (optional)
     * @param positionsGt  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param deviceIdN  (optional)
     * @param deviceN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsListAsync(String id, String name, String type, String positions, String description, String q, String regionId, String region, String siteId, String site, String deviceId, String device, String tag, String cabled, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String typeN, String positionsN, String positionsLte, String positionsLt, String positionsGte, String positionsGt, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String regionIdN, String regionN, String siteIdN, String siteN, String deviceIdN, String deviceN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimRearPortsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsListValidateBeforeCall(id, name, type, positions, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRearPortsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsPartialUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsPartialUpdateValidateBeforeCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsPartialUpdate(Async)");
        }

        return dcimRearPortsPartialUpdateCall(id, writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsPartialUpdate(Integer id, WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsPartialUpdateWithHttpInfo(id, writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsPartialUpdateWithHttpInfo(Integer id, WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsPartialUpdateAsync(Integer id, WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsPartialUpdateValidateBeforeCall(id, writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsRead
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsRead(Async)");
        }

        return dcimRearPortsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsRead(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsReadAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsTrace
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsTraceCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/trace/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsTraceValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsTrace(Async)");
        }

        return dcimRearPortsTraceCall(id, _callback);

    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this rear port. (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsTrace(Integer id) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsTraceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this rear port. (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsTraceWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsTraceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param id A unique integer value identifying this rear port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsTraceAsync(Integer id, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsTraceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRearPortsUpdate
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRearPort;

        // create path and map variables
        String localVarPath = "/dcim/rear-ports/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRearPortsUpdateValidateBeforeCall(Integer id, WritableRearPort writableRearPort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRearPortsUpdate(Async)");
        }

        // verify the required parameter 'writableRearPort' is set
        if (writableRearPort == null) {
            throw new ApiException("Missing the required parameter 'writableRearPort' when calling dcimRearPortsUpdate(Async)");
        }

        return dcimRearPortsUpdateCall(id, writableRearPort, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return RearPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RearPort dcimRearPortsUpdate(Integer id, WritableRearPort writableRearPort) throws ApiException {
        ApiResponse<RearPort> localVarResp = dcimRearPortsUpdateWithHttpInfo(id, writableRearPort);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @return ApiResponse&lt;RearPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RearPort> dcimRearPortsUpdateWithHttpInfo(Integer id, WritableRearPort writableRearPort) throws ApiException {
        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, writableRearPort, null);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this rear port. (required)
     * @param writableRearPort  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRearPortsUpdateAsync(Integer id, WritableRearPort writableRearPort, final ApiCallback<RearPort> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRearPortsUpdateValidateBeforeCall(id, writableRearPort, _callback);
        Type localVarReturnType = new TypeToken<RearPort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsCreate
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsCreateValidateBeforeCall(WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsCreate(Async)");
        }

        return dcimRegionsCreateCall(writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsCreate(WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsCreateWithHttpInfo(writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsCreateWithHttpInfo(WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsCreateAsync(WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsCreateValidateBeforeCall(writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsDelete
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsDelete(Async)");
        }

        return dcimRegionsDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimRegionsDelete(Integer id) throws ApiException {
        dcimRegionsDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimRegionsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListCall(String id, String name, String slug, String description, String q, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }

        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }

        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }

        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }

        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }

        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }

        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }

        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }

        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }

        if (parentIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id__n", parentIdN));
        }

        if (parentN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent__n", parentN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsListValidateBeforeCall(String id, String name, String slug, String description, String q, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimRegionsListCall(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimRegionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimRegionsList200Response dcimRegionsList(String id, String name, String slug, String description, String q, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimRegionsList200Response> localVarResp = dcimRegionsListWithHttpInfo(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimRegionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimRegionsList200Response> dcimRegionsListWithHttpInfo(String id, String name, String slug, String description, String q, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String parentIdN, String parentN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param description  (optional)
     * @param q  (optional)
     * @param parentId  (optional)
     * @param parent  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param descriptionN  (optional)
     * @param descriptionIc  (optional)
     * @param descriptionNic  (optional)
     * @param descriptionIew  (optional)
     * @param descriptionNiew  (optional)
     * @param descriptionIsw  (optional)
     * @param descriptionNisw  (optional)
     * @param descriptionIe  (optional)
     * @param descriptionNie  (optional)
     * @param parentIdN  (optional)
     * @param parentN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsListAsync(String id, String name, String slug, String description, String q, String parentId, String parent, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String parentIdN, String parentN, Integer limit, Integer offset, final ApiCallback<DcimRegionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsListValidateBeforeCall(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimRegionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsPartialUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsPartialUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsPartialUpdate(Async)");
        }

        return dcimRegionsPartialUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsPartialUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsPartialUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsPartialUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsPartialUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsPartialUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsRead
     * @param id A unique integer value identifying this region. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsRead(Async)");
        }

        return dcimRegionsReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this region. (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsRead(Integer id) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this region. (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this region. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsReadAsync(Integer id, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimRegionsUpdate
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableRegion;

        // create path and map variables
        String localVarPath = "/dcim/regions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimRegionsUpdateValidateBeforeCall(Integer id, WritableRegion writableRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimRegionsUpdate(Async)");
        }

        // verify the required parameter 'writableRegion' is set
        if (writableRegion == null) {
            throw new ApiException("Missing the required parameter 'writableRegion' when calling dcimRegionsUpdate(Async)");
        }

        return dcimRegionsUpdateCall(id, writableRegion, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return Region
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Region dcimRegionsUpdate(Integer id, WritableRegion writableRegion) throws ApiException {
        ApiResponse<Region> localVarResp = dcimRegionsUpdateWithHttpInfo(id, writableRegion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @return ApiResponse&lt;Region&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Region> dcimRegionsUpdateWithHttpInfo(Integer id, WritableRegion writableRegion) throws ApiException {
        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, null);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this region. (required)
     * @param writableRegion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimRegionsUpdateAsync(Integer id, WritableRegion writableRegion, final ApiCallback<Region> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimRegionsUpdateValidateBeforeCall(id, writableRegion, _callback);
        Type localVarReturnType = new TypeToken<Region>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesCreate
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesCreateValidateBeforeCall(WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesCreate(Async)");
        }

        return dcimSitesCreateCall(writableSite, _callback);

    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesCreate(WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesCreateWithHttpInfo(writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesCreateWithHttpInfo(WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesCreateAsync(WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesCreateValidateBeforeCall(writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesDelete
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesDelete(Async)");
        }

        return dcimSitesDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimSitesDelete(Integer id) throws ApiException {
        dcimSitesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimSitesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesGraphs
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesGraphsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/graphs/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesGraphsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesGraphs(Async)");
        }

        return dcimSitesGraphsCall(id, _callback);

    }

    /**
     * 
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesGraphs(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesGraphsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesGraphsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesGraphsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A convenience method for rendering graphs for a particular site.
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesGraphsAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesGraphsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesList
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param contactNameN  (optional)
     * @param contactNameIc  (optional)
     * @param contactNameNic  (optional)
     * @param contactNameIew  (optional)
     * @param contactNameNiew  (optional)
     * @param contactNameIsw  (optional)
     * @param contactNameNisw  (optional)
     * @param contactNameIe  (optional)
     * @param contactNameNie  (optional)
     * @param contactPhoneN  (optional)
     * @param contactPhoneIc  (optional)
     * @param contactPhoneNic  (optional)
     * @param contactPhoneIew  (optional)
     * @param contactPhoneNiew  (optional)
     * @param contactPhoneIsw  (optional)
     * @param contactPhoneNisw  (optional)
     * @param contactPhoneIe  (optional)
     * @param contactPhoneNie  (optional)
     * @param contactEmailN  (optional)
     * @param contactEmailIc  (optional)
     * @param contactEmailNic  (optional)
     * @param contactEmailIew  (optional)
     * @param contactEmailNiew  (optional)
     * @param contactEmailIsw  (optional)
     * @param contactEmailNisw  (optional)
     * @param contactEmailIe  (optional)
     * @param contactEmailNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListCall(String id, String name, String slug, String facility, String asn, String latitude, String longitude, String contactName, String contactPhone, String contactEmail, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String status, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String contactNameN, String contactNameIc, String contactNameNic, String contactNameIew, String contactNameNiew, String contactNameIsw, String contactNameNisw, String contactNameIe, String contactNameNie, String contactPhoneN, String contactPhoneIc, String contactPhoneNic, String contactPhoneIew, String contactPhoneNiew, String contactPhoneIsw, String contactPhoneNisw, String contactPhoneIe, String contactPhoneNie, String contactEmailN, String contactEmailIc, String contactEmailNic, String contactEmailIew, String contactEmailNiew, String contactEmailIsw, String contactEmailNisw, String contactEmailIe, String contactEmailNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String statusN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (facility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility", facility));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (contactName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name", contactName));
        }

        if (contactPhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone", contactPhone));
        }

        if (contactEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email", contactEmail));
        }

        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }

        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }

        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }

        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }

        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }

        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }

        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }

        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }

        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }

        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }

        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }

        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }

        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }

        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }

        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }

        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }

        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }

        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }

        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }

        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }

        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }

        if (facilityN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__n", facilityN));
        }

        if (facilityIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ic", facilityIc));
        }

        if (facilityNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nic", facilityNic));
        }

        if (facilityIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__iew", facilityIew));
        }

        if (facilityNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__niew", facilityNiew));
        }

        if (facilityIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__isw", facilityIsw));
        }

        if (facilityNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nisw", facilityNisw));
        }

        if (facilityIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__ie", facilityIe));
        }

        if (facilityNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility__nie", facilityNie));
        }

        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }

        if (asnLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lte", asnLte));
        }

        if (asnLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lt", asnLt));
        }

        if (asnGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gte", asnGte));
        }

        if (asnGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gt", asnGt));
        }

        if (latitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__n", latitudeN));
        }

        if (latitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lte", latitudeLte));
        }

        if (latitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__lt", latitudeLt));
        }

        if (latitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gte", latitudeGte));
        }

        if (latitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude__gt", latitudeGt));
        }

        if (longitudeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__n", longitudeN));
        }

        if (longitudeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lte", longitudeLte));
        }

        if (longitudeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__lt", longitudeLt));
        }

        if (longitudeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gte", longitudeGte));
        }

        if (longitudeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude__gt", longitudeGt));
        }

        if (contactNameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__n", contactNameN));
        }

        if (contactNameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__ic", contactNameIc));
        }

        if (contactNameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__nic", contactNameNic));
        }

        if (contactNameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__iew", contactNameIew));
        }

        if (contactNameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__niew", contactNameNiew));
        }

        if (contactNameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__isw", contactNameIsw));
        }

        if (contactNameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__nisw", contactNameNisw));
        }

        if (contactNameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__ie", contactNameIe));
        }

        if (contactNameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_name__nie", contactNameNie));
        }

        if (contactPhoneN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__n", contactPhoneN));
        }

        if (contactPhoneIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__ic", contactPhoneIc));
        }

        if (contactPhoneNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__nic", contactPhoneNic));
        }

        if (contactPhoneIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__iew", contactPhoneIew));
        }

        if (contactPhoneNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__niew", contactPhoneNiew));
        }

        if (contactPhoneIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__isw", contactPhoneIsw));
        }

        if (contactPhoneNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__nisw", contactPhoneNisw));
        }

        if (contactPhoneIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__ie", contactPhoneIe));
        }

        if (contactPhoneNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_phone__nie", contactPhoneNie));
        }

        if (contactEmailN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__n", contactEmailN));
        }

        if (contactEmailIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__ic", contactEmailIc));
        }

        if (contactEmailNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__nic", contactEmailNic));
        }

        if (contactEmailIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__iew", contactEmailIew));
        }

        if (contactEmailNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__niew", contactEmailNiew));
        }

        if (contactEmailIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__isw", contactEmailIsw));
        }

        if (contactEmailNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__nisw", contactEmailNisw));
        }

        if (contactEmailIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__ie", contactEmailIe));
        }

        if (contactEmailNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_email__nie", contactEmailNie));
        }

        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }

        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesListValidateBeforeCall(String id, String name, String slug, String facility, String asn, String latitude, String longitude, String contactName, String contactPhone, String contactEmail, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String status, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String contactNameN, String contactNameIc, String contactNameNic, String contactNameIew, String contactNameNiew, String contactNameIsw, String contactNameNisw, String contactNameIe, String contactNameNie, String contactPhoneN, String contactPhoneIc, String contactPhoneNic, String contactPhoneIew, String contactPhoneNiew, String contactPhoneIsw, String contactPhoneNisw, String contactPhoneIe, String contactPhoneNie, String contactEmailN, String contactEmailIc, String contactEmailNic, String contactEmailIew, String contactEmailNiew, String contactEmailIsw, String contactEmailNisw, String contactEmailIe, String contactEmailNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String statusN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimSitesListCall(id, name, slug, facility, asn, latitude, longitude, contactName, contactPhone, contactEmail, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, status, regionId, region, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, asnN, asnLte, asnLt, asnGte, asnGt, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, contactNameN, contactNameIc, contactNameNic, contactNameIew, contactNameNiew, contactNameIsw, contactNameNisw, contactNameIe, contactNameNie, contactPhoneN, contactPhoneIc, contactPhoneNic, contactPhoneIew, contactPhoneNiew, contactPhoneIsw, contactPhoneNisw, contactPhoneIe, contactPhoneNie, contactEmailN, contactEmailIc, contactEmailNic, contactEmailIew, contactEmailNiew, contactEmailIsw, contactEmailNisw, contactEmailIe, contactEmailNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, statusN, regionIdN, regionN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param contactNameN  (optional)
     * @param contactNameIc  (optional)
     * @param contactNameNic  (optional)
     * @param contactNameIew  (optional)
     * @param contactNameNiew  (optional)
     * @param contactNameIsw  (optional)
     * @param contactNameNisw  (optional)
     * @param contactNameIe  (optional)
     * @param contactNameNie  (optional)
     * @param contactPhoneN  (optional)
     * @param contactPhoneIc  (optional)
     * @param contactPhoneNic  (optional)
     * @param contactPhoneIew  (optional)
     * @param contactPhoneNiew  (optional)
     * @param contactPhoneIsw  (optional)
     * @param contactPhoneNisw  (optional)
     * @param contactPhoneIe  (optional)
     * @param contactPhoneNie  (optional)
     * @param contactEmailN  (optional)
     * @param contactEmailIc  (optional)
     * @param contactEmailNic  (optional)
     * @param contactEmailIew  (optional)
     * @param contactEmailNiew  (optional)
     * @param contactEmailIsw  (optional)
     * @param contactEmailNisw  (optional)
     * @param contactEmailIe  (optional)
     * @param contactEmailNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimSitesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimSitesList200Response dcimSitesList(String id, String name, String slug, String facility, String asn, String latitude, String longitude, String contactName, String contactPhone, String contactEmail, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String status, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String contactNameN, String contactNameIc, String contactNameNic, String contactNameIew, String contactNameNiew, String contactNameIsw, String contactNameNisw, String contactNameIe, String contactNameNie, String contactPhoneN, String contactPhoneIc, String contactPhoneNic, String contactPhoneIew, String contactPhoneNiew, String contactPhoneIsw, String contactPhoneNisw, String contactPhoneIe, String contactPhoneNie, String contactEmailN, String contactEmailIc, String contactEmailNic, String contactEmailIew, String contactEmailNiew, String contactEmailIsw, String contactEmailNisw, String contactEmailIe, String contactEmailNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String statusN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimSitesList200Response> localVarResp = dcimSitesListWithHttpInfo(id, name, slug, facility, asn, latitude, longitude, contactName, contactPhone, contactEmail, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, status, regionId, region, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, asnN, asnLte, asnLt, asnGte, asnGt, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, contactNameN, contactNameIc, contactNameNic, contactNameIew, contactNameNiew, contactNameIsw, contactNameNisw, contactNameIe, contactNameNie, contactPhoneN, contactPhoneIc, contactPhoneNic, contactPhoneIew, contactPhoneNiew, contactPhoneIsw, contactPhoneNisw, contactPhoneIe, contactPhoneNie, contactEmailN, contactEmailIc, contactEmailNic, contactEmailIew, contactEmailNiew, contactEmailIsw, contactEmailNisw, contactEmailIe, contactEmailNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, statusN, regionIdN, regionN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param contactNameN  (optional)
     * @param contactNameIc  (optional)
     * @param contactNameNic  (optional)
     * @param contactNameIew  (optional)
     * @param contactNameNiew  (optional)
     * @param contactNameIsw  (optional)
     * @param contactNameNisw  (optional)
     * @param contactNameIe  (optional)
     * @param contactNameNie  (optional)
     * @param contactPhoneN  (optional)
     * @param contactPhoneIc  (optional)
     * @param contactPhoneNic  (optional)
     * @param contactPhoneIew  (optional)
     * @param contactPhoneNiew  (optional)
     * @param contactPhoneIsw  (optional)
     * @param contactPhoneNisw  (optional)
     * @param contactPhoneIe  (optional)
     * @param contactPhoneNie  (optional)
     * @param contactEmailN  (optional)
     * @param contactEmailIc  (optional)
     * @param contactEmailNic  (optional)
     * @param contactEmailIew  (optional)
     * @param contactEmailNiew  (optional)
     * @param contactEmailIsw  (optional)
     * @param contactEmailNisw  (optional)
     * @param contactEmailIe  (optional)
     * @param contactEmailNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimSitesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimSitesList200Response> dcimSitesListWithHttpInfo(String id, String name, String slug, String facility, String asn, String latitude, String longitude, String contactName, String contactPhone, String contactEmail, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String status, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String contactNameN, String contactNameIc, String contactNameNic, String contactNameIew, String contactNameNiew, String contactNameIsw, String contactNameNisw, String contactNameIe, String contactNameNie, String contactPhoneN, String contactPhoneIc, String contactPhoneNic, String contactPhoneIew, String contactPhoneNiew, String contactPhoneIsw, String contactPhoneNisw, String contactPhoneIe, String contactPhoneNie, String contactEmailN, String contactEmailIc, String contactEmailNic, String contactEmailIew, String contactEmailNiew, String contactEmailIsw, String contactEmailNisw, String contactEmailIe, String contactEmailNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String statusN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, asn, latitude, longitude, contactName, contactPhone, contactEmail, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, status, regionId, region, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, asnN, asnLte, asnLt, asnGte, asnGt, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, contactNameN, contactNameIc, contactNameNic, contactNameIew, contactNameNiew, contactNameIsw, contactNameNisw, contactNameIe, contactNameNie, contactPhoneN, contactPhoneIc, contactPhoneNic, contactPhoneIew, contactPhoneNiew, contactPhoneIsw, contactPhoneNisw, contactPhoneIe, contactPhoneNie, contactEmailN, contactEmailIc, contactEmailNic, contactEmailIew, contactEmailNiew, contactEmailIsw, contactEmailNisw, contactEmailIe, contactEmailNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, statusN, regionIdN, regionN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param name  (optional)
     * @param slug  (optional)
     * @param facility  (optional)
     * @param asn  (optional)
     * @param latitude  (optional)
     * @param longitude  (optional)
     * @param contactName  (optional)
     * @param contactPhone  (optional)
     * @param contactEmail  (optional)
     * @param tenantGroupId  (optional)
     * @param tenantGroup  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param created  (optional)
     * @param createdGte  (optional)
     * @param createdLte  (optional)
     * @param lastUpdated  (optional)
     * @param lastUpdatedGte  (optional)
     * @param lastUpdatedLte  (optional)
     * @param q  (optional)
     * @param status  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param nameN  (optional)
     * @param nameIc  (optional)
     * @param nameNic  (optional)
     * @param nameIew  (optional)
     * @param nameNiew  (optional)
     * @param nameIsw  (optional)
     * @param nameNisw  (optional)
     * @param nameIe  (optional)
     * @param nameNie  (optional)
     * @param slugN  (optional)
     * @param slugIc  (optional)
     * @param slugNic  (optional)
     * @param slugIew  (optional)
     * @param slugNiew  (optional)
     * @param slugIsw  (optional)
     * @param slugNisw  (optional)
     * @param slugIe  (optional)
     * @param slugNie  (optional)
     * @param facilityN  (optional)
     * @param facilityIc  (optional)
     * @param facilityNic  (optional)
     * @param facilityIew  (optional)
     * @param facilityNiew  (optional)
     * @param facilityIsw  (optional)
     * @param facilityNisw  (optional)
     * @param facilityIe  (optional)
     * @param facilityNie  (optional)
     * @param asnN  (optional)
     * @param asnLte  (optional)
     * @param asnLt  (optional)
     * @param asnGte  (optional)
     * @param asnGt  (optional)
     * @param latitudeN  (optional)
     * @param latitudeLte  (optional)
     * @param latitudeLt  (optional)
     * @param latitudeGte  (optional)
     * @param latitudeGt  (optional)
     * @param longitudeN  (optional)
     * @param longitudeLte  (optional)
     * @param longitudeLt  (optional)
     * @param longitudeGte  (optional)
     * @param longitudeGt  (optional)
     * @param contactNameN  (optional)
     * @param contactNameIc  (optional)
     * @param contactNameNic  (optional)
     * @param contactNameIew  (optional)
     * @param contactNameNiew  (optional)
     * @param contactNameIsw  (optional)
     * @param contactNameNisw  (optional)
     * @param contactNameIe  (optional)
     * @param contactNameNie  (optional)
     * @param contactPhoneN  (optional)
     * @param contactPhoneIc  (optional)
     * @param contactPhoneNic  (optional)
     * @param contactPhoneIew  (optional)
     * @param contactPhoneNiew  (optional)
     * @param contactPhoneIsw  (optional)
     * @param contactPhoneNisw  (optional)
     * @param contactPhoneIe  (optional)
     * @param contactPhoneNie  (optional)
     * @param contactEmailN  (optional)
     * @param contactEmailIc  (optional)
     * @param contactEmailNic  (optional)
     * @param contactEmailIew  (optional)
     * @param contactEmailNiew  (optional)
     * @param contactEmailIsw  (optional)
     * @param contactEmailNisw  (optional)
     * @param contactEmailIe  (optional)
     * @param contactEmailNie  (optional)
     * @param tenantGroupIdN  (optional)
     * @param tenantGroupN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param statusN  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesListAsync(String id, String name, String slug, String facility, String asn, String latitude, String longitude, String contactName, String contactPhone, String contactEmail, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String created, String createdGte, String createdLte, String lastUpdated, String lastUpdatedGte, String lastUpdatedLte, String q, String status, String regionId, String region, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String facilityN, String facilityIc, String facilityNic, String facilityIew, String facilityNiew, String facilityIsw, String facilityNisw, String facilityIe, String facilityNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String latitudeN, String latitudeLte, String latitudeLt, String latitudeGte, String latitudeGt, String longitudeN, String longitudeLte, String longitudeLt, String longitudeGte, String longitudeGt, String contactNameN, String contactNameIc, String contactNameNic, String contactNameIew, String contactNameNiew, String contactNameIsw, String contactNameNisw, String contactNameIe, String contactNameNie, String contactPhoneN, String contactPhoneIc, String contactPhoneNic, String contactPhoneIew, String contactPhoneNiew, String contactPhoneIsw, String contactPhoneNisw, String contactPhoneIe, String contactPhoneNie, String contactEmailN, String contactEmailIc, String contactEmailNic, String contactEmailIew, String contactEmailNiew, String contactEmailIsw, String contactEmailNisw, String contactEmailIe, String contactEmailNie, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String statusN, String regionIdN, String regionN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimSitesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesListValidateBeforeCall(id, name, slug, facility, asn, latitude, longitude, contactName, contactPhone, contactEmail, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, status, regionId, region, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, asnN, asnLte, asnLt, asnGte, asnGt, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, contactNameN, contactNameIc, contactNameNic, contactNameIew, contactNameNiew, contactNameIsw, contactNameNisw, contactNameIe, contactNameNie, contactPhoneN, contactPhoneIc, contactPhoneNic, contactPhoneIew, contactPhoneNiew, contactPhoneIsw, contactPhoneNisw, contactPhoneIe, contactPhoneNie, contactEmailN, contactEmailIc, contactEmailNic, contactEmailIew, contactEmailNiew, contactEmailIsw, contactEmailNisw, contactEmailIe, contactEmailNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, statusN, regionIdN, regionN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimSitesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesPartialUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesPartialUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesPartialUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesPartialUpdate(Async)");
        }

        return dcimSitesPartialUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesPartialUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesPartialUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesPartialUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesPartialUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesPartialUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesRead
     * @param id A unique integer value identifying this site. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesRead(Async)");
        }

        return dcimSitesReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this site. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesRead(Integer id) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this site. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this site. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesReadAsync(Integer id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimSitesUpdate
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableSite;

        // create path and map variables
        String localVarPath = "/dcim/sites/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimSitesUpdateValidateBeforeCall(Integer id, WritableSite writableSite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimSitesUpdate(Async)");
        }

        // verify the required parameter 'writableSite' is set
        if (writableSite == null) {
            throw new ApiException("Missing the required parameter 'writableSite' when calling dcimSitesUpdate(Async)");
        }

        return dcimSitesUpdateCall(id, writableSite, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Site dcimSitesUpdate(Integer id, WritableSite writableSite) throws ApiException {
        ApiResponse<Site> localVarResp = dcimSitesUpdateWithHttpInfo(id, writableSite);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> dcimSitesUpdateWithHttpInfo(Integer id, WritableSite writableSite) throws ApiException {
        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this site. (required)
     * @param writableSite  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimSitesUpdateAsync(Integer id, WritableSite writableSite, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimSitesUpdateValidateBeforeCall(id, writableSite, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisCreate
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisCreateValidateBeforeCall(WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisCreate(Async)");
        }

        return dcimVirtualChassisCreateCall(writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisCreate(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisCreateWithHttpInfo(writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisCreateWithHttpInfo(WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisCreateAsync(WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisCreateValidateBeforeCall(writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisDelete
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisDelete(Async)");
        }

        return dcimVirtualChassisDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void dcimVirtualChassisDelete(Integer id) throws ApiException {
        dcimVirtualChassisDeleteWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dcimVirtualChassisDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisList
     * @param id  (optional)
     * @param domain  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListCall(String id, String domain, String q, String regionId, String region, String siteId, String site, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String regionIdN, String regionN, String siteIdN, String siteN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }

        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }

        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }

        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }

        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }

        if (domainN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__n", domainN));
        }

        if (domainIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ic", domainIc));
        }

        if (domainNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nic", domainNic));
        }

        if (domainIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__iew", domainIew));
        }

        if (domainNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__niew", domainNiew));
        }

        if (domainIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__isw", domainIsw));
        }

        if (domainNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nisw", domainNisw));
        }

        if (domainIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__ie", domainIe));
        }

        if (domainNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain__nie", domainNie));
        }

        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }

        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }

        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }

        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }

        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }

        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }

        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisListValidateBeforeCall(String id, String domain, String q, String regionId, String region, String siteId, String site, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String regionIdN, String regionN, String siteIdN, String siteN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return dcimVirtualChassisListCall(id, domain, q, regionId, region, siteId, site, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, regionIdN, regionN, siteIdN, siteN, tenantIdN, tenantN, tagN, limit, offset, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param domain  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return DcimVirtualChassisList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DcimVirtualChassisList200Response dcimVirtualChassisList(String id, String domain, String q, String regionId, String region, String siteId, String site, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String regionIdN, String regionN, String siteIdN, String siteN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DcimVirtualChassisList200Response> localVarResp = dcimVirtualChassisListWithHttpInfo(id, domain, q, regionId, region, siteId, site, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, regionIdN, regionN, siteIdN, siteN, tenantIdN, tenantN, tagN, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id  (optional)
     * @param domain  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;DcimVirtualChassisList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DcimVirtualChassisList200Response> dcimVirtualChassisListWithHttpInfo(String id, String domain, String q, String regionId, String region, String siteId, String site, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String regionIdN, String regionN, String siteIdN, String siteN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, q, regionId, region, siteId, site, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, regionIdN, regionN, siteIdN, siteN, tenantIdN, tenantN, tagN, limit, offset, null);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id  (optional)
     * @param domain  (optional)
     * @param q  (optional)
     * @param regionId  (optional)
     * @param region  (optional)
     * @param siteId  (optional)
     * @param site  (optional)
     * @param tenantId  (optional)
     * @param tenant  (optional)
     * @param tag  (optional)
     * @param idN  (optional)
     * @param idLte  (optional)
     * @param idLt  (optional)
     * @param idGte  (optional)
     * @param idGt  (optional)
     * @param domainN  (optional)
     * @param domainIc  (optional)
     * @param domainNic  (optional)
     * @param domainIew  (optional)
     * @param domainNiew  (optional)
     * @param domainIsw  (optional)
     * @param domainNisw  (optional)
     * @param domainIe  (optional)
     * @param domainNie  (optional)
     * @param regionIdN  (optional)
     * @param regionN  (optional)
     * @param siteIdN  (optional)
     * @param siteN  (optional)
     * @param tenantIdN  (optional)
     * @param tenantN  (optional)
     * @param tagN  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisListAsync(String id, String domain, String q, String regionId, String region, String siteId, String site, String tenantId, String tenant, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String domainN, String domainIc, String domainNic, String domainIew, String domainNiew, String domainIsw, String domainNisw, String domainIe, String domainNie, String regionIdN, String regionN, String siteIdN, String siteN, String tenantIdN, String tenantN, String tagN, Integer limit, Integer offset, final ApiCallback<DcimVirtualChassisList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisListValidateBeforeCall(id, domain, q, regionId, region, siteId, site, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, regionIdN, regionN, siteIdN, siteN, tenantIdN, tenantN, tagN, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DcimVirtualChassisList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisPartialUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisPartialUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisPartialUpdate(Async)");
        }

        return dcimVirtualChassisPartialUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisPartialUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisPartialUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisPartialUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisPartialUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisPartialUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisRead
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisRead(Async)");
        }

        return dcimVirtualChassisReadCall(id, _callback);

    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisRead(Integer id) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Call to super to allow for caching
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Call to super to allow for caching
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisReadAsync(Integer id, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dcimVirtualChassisUpdate
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = writableVirtualChassis;

        // create path and map variables
        String localVarPath = "/dcim/virtual-chassis/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dcimVirtualChassisUpdateValidateBeforeCall(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate(Async)");
        }

        // verify the required parameter 'writableVirtualChassis' is set
        if (writableVirtualChassis == null) {
            throw new ApiException("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisUpdate(Async)");
        }

        return dcimVirtualChassisUpdateCall(id, writableVirtualChassis, _callback);

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return VirtualChassis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VirtualChassis dcimVirtualChassisUpdate(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        ApiResponse<VirtualChassis> localVarResp = dcimVirtualChassisUpdateWithHttpInfo(id, writableVirtualChassis);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @return ApiResponse&lt;VirtualChassis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualChassis> dcimVirtualChassisUpdateWithHttpInfo(Integer id, WritableVirtualChassis writableVirtualChassis) throws ApiException {
        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, null);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this virtual chassis. (required)
     * @param writableVirtualChassis  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dcimVirtualChassisUpdateAsync(Integer id, WritableVirtualChassis writableVirtualChassis, final ApiCallback<VirtualChassis> _callback) throws ApiException {

        okhttp3.Call localVarCall = dcimVirtualChassisUpdateValidateBeforeCall(id, writableVirtualChassis, _callback);
        Type localVarReturnType = new TypeToken<VirtualChassis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
