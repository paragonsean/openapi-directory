/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableCable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableCable {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  /**
   * Gets or Sets lengthUnit
   */
  @JsonAdapter(LengthUnitEnum.Adapter.class)
  public enum LengthUnitEnum {
    M("m"),
    
    CM("cm"),
    
    FT("ft"),
    
    IN("in");

    private String value;

    LengthUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LengthUnitEnum fromValue(String value) {
      for (LengthUnitEnum b : LengthUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LengthUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LengthUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LengthUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LengthUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LengthUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LENGTH_UNIT = "length_unit";
  @SerializedName(SERIALIZED_NAME_LENGTH_UNIT)
  private LengthUnitEnum lengthUnit;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CONNECTED("connected"),
    
    PLANNED("planned"),
    
    DECOMMISSIONING("decommissioning");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TERMINATION_A = "termination_a";
  @SerializedName(SERIALIZED_NAME_TERMINATION_A)
  private Map<String, String> terminationA = new HashMap<>();

  public static final String SERIALIZED_NAME_TERMINATION_A_ID = "termination_a_id";
  @SerializedName(SERIALIZED_NAME_TERMINATION_A_ID)
  private Integer terminationAId;

  public static final String SERIALIZED_NAME_TERMINATION_A_TYPE = "termination_a_type";
  @SerializedName(SERIALIZED_NAME_TERMINATION_A_TYPE)
  private String terminationAType;

  public static final String SERIALIZED_NAME_TERMINATION_B = "termination_b";
  @SerializedName(SERIALIZED_NAME_TERMINATION_B)
  private Map<String, String> terminationB = new HashMap<>();

  public static final String SERIALIZED_NAME_TERMINATION_B_ID = "termination_b_id";
  @SerializedName(SERIALIZED_NAME_TERMINATION_B_ID)
  private Integer terminationBId;

  public static final String SERIALIZED_NAME_TERMINATION_B_TYPE = "termination_b_type";
  @SerializedName(SERIALIZED_NAME_TERMINATION_B_TYPE)
  private String terminationBType;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CAT3("cat3"),
    
    CAT5("cat5"),
    
    CAT5E("cat5e"),
    
    CAT6("cat6"),
    
    CAT6A("cat6a"),
    
    CAT7("cat7"),
    
    DAC_ACTIVE("dac-active"),
    
    DAC_PASSIVE("dac-passive"),
    
    MRJ21_TRUNK("mrj21-trunk"),
    
    COAXIAL("coaxial"),
    
    MMF("mmf"),
    
    MMF_OM1("mmf-om1"),
    
    MMF_OM2("mmf-om2"),
    
    MMF_OM3("mmf-om3"),
    
    MMF_OM4("mmf-om4"),
    
    SMF("smf"),
    
    SMF_OS1("smf-os1"),
    
    SMF_OS2("smf-os2"),
    
    AOC("aoc"),
    
    POWER("power");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public WritableCable() {
  }

  public WritableCable(
     Integer id, 
     Map<String, String> terminationA, 
     Map<String, String> terminationB
  ) {
    this();
    this.id = id;
    this.terminationA = terminationA;
    this.terminationB = terminationB;
  }

  public WritableCable color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableCable label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public WritableCable length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * minimum: 0
   * maximum: 32767
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public WritableCable lengthUnit(LengthUnitEnum lengthUnit) {
    this.lengthUnit = lengthUnit;
    return this;
  }

  /**
   * Get lengthUnit
   * @return lengthUnit
   */
  @javax.annotation.Nullable
  public LengthUnitEnum getLengthUnit() {
    return lengthUnit;
  }

  public void setLengthUnit(LengthUnitEnum lengthUnit) {
    this.lengthUnit = lengthUnit;
  }


  public WritableCable status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * Get terminationA
   * @return terminationA
   */
  @javax.annotation.Nullable
  public Map<String, String> getTerminationA() {
    return terminationA;
  }



  public WritableCable terminationAId(Integer terminationAId) {
    this.terminationAId = terminationAId;
    return this;
  }

  /**
   * Get terminationAId
   * minimum: 0
   * maximum: 2147483647
   * @return terminationAId
   */
  @javax.annotation.Nonnull
  public Integer getTerminationAId() {
    return terminationAId;
  }

  public void setTerminationAId(Integer terminationAId) {
    this.terminationAId = terminationAId;
  }


  public WritableCable terminationAType(String terminationAType) {
    this.terminationAType = terminationAType;
    return this;
  }

  /**
   * Get terminationAType
   * @return terminationAType
   */
  @javax.annotation.Nonnull
  public String getTerminationAType() {
    return terminationAType;
  }

  public void setTerminationAType(String terminationAType) {
    this.terminationAType = terminationAType;
  }


  /**
   * Get terminationB
   * @return terminationB
   */
  @javax.annotation.Nullable
  public Map<String, String> getTerminationB() {
    return terminationB;
  }



  public WritableCable terminationBId(Integer terminationBId) {
    this.terminationBId = terminationBId;
    return this;
  }

  /**
   * Get terminationBId
   * minimum: 0
   * maximum: 2147483647
   * @return terminationBId
   */
  @javax.annotation.Nonnull
  public Integer getTerminationBId() {
    return terminationBId;
  }

  public void setTerminationBId(Integer terminationBId) {
    this.terminationBId = terminationBId;
  }


  public WritableCable terminationBType(String terminationBType) {
    this.terminationBType = terminationBType;
    return this;
  }

  /**
   * Get terminationBType
   * @return terminationBType
   */
  @javax.annotation.Nonnull
  public String getTerminationBType() {
    return terminationBType;
  }

  public void setTerminationBType(String terminationBType) {
    this.terminationBType = terminationBType;
  }


  public WritableCable type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableCable writableCable = (WritableCable) o;
    return Objects.equals(this.color, writableCable.color) &&
        Objects.equals(this.id, writableCable.id) &&
        Objects.equals(this.label, writableCable.label) &&
        Objects.equals(this.length, writableCable.length) &&
        Objects.equals(this.lengthUnit, writableCable.lengthUnit) &&
        Objects.equals(this.status, writableCable.status) &&
        Objects.equals(this.terminationA, writableCable.terminationA) &&
        Objects.equals(this.terminationAId, writableCable.terminationAId) &&
        Objects.equals(this.terminationAType, writableCable.terminationAType) &&
        Objects.equals(this.terminationB, writableCable.terminationB) &&
        Objects.equals(this.terminationBId, writableCable.terminationBId) &&
        Objects.equals(this.terminationBType, writableCable.terminationBType) &&
        Objects.equals(this.type, writableCable.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, id, label, length, lengthUnit, status, terminationA, terminationAId, terminationAType, terminationB, terminationBId, terminationBType, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableCable {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    lengthUnit: ").append(toIndentedString(lengthUnit)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    terminationA: ").append(toIndentedString(terminationA)).append("\n");
    sb.append("    terminationAId: ").append(toIndentedString(terminationAId)).append("\n");
    sb.append("    terminationAType: ").append(toIndentedString(terminationAType)).append("\n");
    sb.append("    terminationB: ").append(toIndentedString(terminationB)).append("\n");
    sb.append("    terminationBId: ").append(toIndentedString(terminationBId)).append("\n");
    sb.append("    terminationBType: ").append(toIndentedString(terminationBType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("length");
    openapiFields.add("length_unit");
    openapiFields.add("status");
    openapiFields.add("termination_a");
    openapiFields.add("termination_a_id");
    openapiFields.add("termination_a_type");
    openapiFields.add("termination_b");
    openapiFields.add("termination_b_id");
    openapiFields.add("termination_b_type");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("termination_a_id");
    openapiRequiredFields.add("termination_a_type");
    openapiRequiredFields.add("termination_b_id");
    openapiRequiredFields.add("termination_b_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableCable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableCable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableCable is not found in the empty JSON string", WritableCable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableCable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableCable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableCable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("length_unit") != null && !jsonObj.get("length_unit").isJsonNull()) && !jsonObj.get("length_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `length_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("length_unit").toString()));
      }
      // validate the optional field `length_unit`
      if (jsonObj.get("length_unit") != null && !jsonObj.get("length_unit").isJsonNull()) {
        LengthUnitEnum.validateJsonElement(jsonObj.get("length_unit"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (!jsonObj.get("termination_a_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termination_a_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termination_a_type").toString()));
      }
      if (!jsonObj.get("termination_b_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termination_b_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termination_b_type").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableCable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableCable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableCable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableCable.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableCable>() {
           @Override
           public void write(JsonWriter out, WritableCable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableCable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableCable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableCable
   * @throws IOException if the JSON string is invalid with respect to WritableCable
   */
  public static WritableCable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableCable.class);
  }

  /**
   * Convert an instance of WritableCable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

