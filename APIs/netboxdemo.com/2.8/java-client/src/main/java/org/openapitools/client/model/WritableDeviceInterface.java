/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.NestedCable;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WritableDeviceInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:50.058495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WritableDeviceInterface {
  public static final String SERIALIZED_NAME_CABLE = "cable";
  @SerializedName(SERIALIZED_NAME_CABLE)
  private NestedCable cable;

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT = "connected_endpoint";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT)
  private Map<String, String> connectedEndpoint = new HashMap<>();

  public static final String SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE = "connected_endpoint_type";
  @SerializedName(SERIALIZED_NAME_CONNECTED_ENDPOINT_TYPE)
  private String connectedEndpointType;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private Boolean connectionStatus;

  public static final String SERIALIZED_NAME_COUNT_IPADDRESSES = "count_ipaddresses";
  @SerializedName(SERIALIZED_NAME_COUNT_IPADDRESSES)
  private Integer countIpaddresses;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Integer device;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAG = "lag";
  @SerializedName(SERIALIZED_NAME_LAG)
  private Integer lag;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MGMT_ONLY = "mgmt_only";
  @SerializedName(SERIALIZED_NAME_MGMT_ONLY)
  private Boolean mgmtOnly;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ACCESS("access"),
    
    TAGGED("tagged"),
    
    TAGGED_ALL("tagged-all");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_MTU = "mtu";
  @SerializedName(SERIALIZED_NAME_MTU)
  private Integer mtu;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGGED_VLANS = "tagged_vlans";
  @SerializedName(SERIALIZED_NAME_TAGGED_VLANS)
  private Set<Integer> taggedVlans = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VIRTUAL("virtual"),
    
    LAG("lag"),
    
    _100BASE_TX("100base-tx"),
    
    _1000BASE_T("1000base-t"),
    
    _2_5GBASE_T("2.5gbase-t"),
    
    _5GBASE_T("5gbase-t"),
    
    _10GBASE_T("10gbase-t"),
    
    _10GBASE_CX4("10gbase-cx4"),
    
    _1000BASE_X_GBIC("1000base-x-gbic"),
    
    _1000BASE_X_SFP("1000base-x-sfp"),
    
    _10GBASE_X_SFPP("10gbase-x-sfpp"),
    
    _10GBASE_X_XFP("10gbase-x-xfp"),
    
    _10GBASE_X_XENPAK("10gbase-x-xenpak"),
    
    _10GBASE_X_X2("10gbase-x-x2"),
    
    _25GBASE_X_SFP28("25gbase-x-sfp28"),
    
    _40GBASE_X_QSFPP("40gbase-x-qsfpp"),
    
    _50GBASE_X_SFP28("50gbase-x-sfp28"),
    
    _100GBASE_X_CFP("100gbase-x-cfp"),
    
    _100GBASE_X_CFP2("100gbase-x-cfp2"),
    
    _200GBASE_X_CFP2("200gbase-x-cfp2"),
    
    _100GBASE_X_CFP4("100gbase-x-cfp4"),
    
    _100GBASE_X_CPAK("100gbase-x-cpak"),
    
    _100GBASE_X_QSFP28("100gbase-x-qsfp28"),
    
    _200GBASE_X_QSFP56("200gbase-x-qsfp56"),
    
    _400GBASE_X_QSFPDD("400gbase-x-qsfpdd"),
    
    _400GBASE_X_OSFP("400gbase-x-osfp"),
    
    IEEE802_11A("ieee802.11a"),
    
    IEEE802_11G("ieee802.11g"),
    
    IEEE802_11N("ieee802.11n"),
    
    IEEE802_11AC("ieee802.11ac"),
    
    IEEE802_11AD("ieee802.11ad"),
    
    IEEE802_11AX("ieee802.11ax"),
    
    GSM("gsm"),
    
    CDMA("cdma"),
    
    LTE("lte"),
    
    SONET_OC3("sonet-oc3"),
    
    SONET_OC12("sonet-oc12"),
    
    SONET_OC48("sonet-oc48"),
    
    SONET_OC192("sonet-oc192"),
    
    SONET_OC768("sonet-oc768"),
    
    SONET_OC1920("sonet-oc1920"),
    
    SONET_OC3840("sonet-oc3840"),
    
    _1GFC_SFP("1gfc-sfp"),
    
    _2GFC_SFP("2gfc-sfp"),
    
    _4GFC_SFP("4gfc-sfp"),
    
    _8GFC_SFPP("8gfc-sfpp"),
    
    _16GFC_SFPP("16gfc-sfpp"),
    
    _32GFC_SFP28("32gfc-sfp28"),
    
    _128GFC_SFP28("128gfc-sfp28"),
    
    INFINIBAND_SDR("infiniband-sdr"),
    
    INFINIBAND_DDR("infiniband-ddr"),
    
    INFINIBAND_QDR("infiniband-qdr"),
    
    INFINIBAND_FDR10("infiniband-fdr10"),
    
    INFINIBAND_FDR("infiniband-fdr"),
    
    INFINIBAND_EDR("infiniband-edr"),
    
    INFINIBAND_HDR("infiniband-hdr"),
    
    INFINIBAND_NDR("infiniband-ndr"),
    
    INFINIBAND_XDR("infiniband-xdr"),
    
    T1("t1"),
    
    E1("e1"),
    
    T3("t3"),
    
    E3("e3"),
    
    CISCO_STACKWISE("cisco-stackwise"),
    
    CISCO_STACKWISE_PLUS("cisco-stackwise-plus"),
    
    CISCO_FLEXSTACK("cisco-flexstack"),
    
    CISCO_FLEXSTACK_PLUS("cisco-flexstack-plus"),
    
    JUNIPER_VCP("juniper-vcp"),
    
    EXTREME_SUMMITSTACK("extreme-summitstack"),
    
    EXTREME_SUMMITSTACK_128("extreme-summitstack-128"),
    
    EXTREME_SUMMITSTACK_256("extreme-summitstack-256"),
    
    EXTREME_SUMMITSTACK_512("extreme-summitstack-512"),
    
    OTHER("other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNTAGGED_VLAN = "untagged_vlan";
  @SerializedName(SERIALIZED_NAME_UNTAGGED_VLAN)
  private Integer untaggedVlan;

  public WritableDeviceInterface() {
  }

  public WritableDeviceInterface(
     Map<String, String> connectedEndpoint, 
     String connectedEndpointType, 
     Integer countIpaddresses, 
     Integer id
  ) {
    this();
    this.connectedEndpoint = connectedEndpoint;
    this.connectedEndpointType = connectedEndpointType;
    this.countIpaddresses = countIpaddresses;
    this.id = id;
  }

  public WritableDeviceInterface cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  /**
   * Get cable
   * @return cable
   */
  @javax.annotation.Nullable
  public NestedCable getCable() {
    return cable;
  }

  public void setCable(NestedCable cable) {
    this.cable = cable;
  }


  /**
   *  Return the appropriate serializer for the type of connected object. 
   * @return connectedEndpoint
   */
  @javax.annotation.Nullable
  public Map<String, String> getConnectedEndpoint() {
    return connectedEndpoint;
  }



  /**
   * Get connectedEndpointType
   * @return connectedEndpointType
   */
  @javax.annotation.Nullable
  public String getConnectedEndpointType() {
    return connectedEndpointType;
  }



  public WritableDeviceInterface connectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public Boolean getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  /**
   * Get countIpaddresses
   * @return countIpaddresses
   */
  @javax.annotation.Nullable
  public Integer getCountIpaddresses() {
    return countIpaddresses;
  }



  public WritableDeviceInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WritableDeviceInterface device(Integer device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public Integer getDevice() {
    return device;
  }

  public void setDevice(Integer device) {
    this.device = device;
  }


  public WritableDeviceInterface enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  public WritableDeviceInterface lag(Integer lag) {
    this.lag = lag;
    return this;
  }

  /**
   * Get lag
   * @return lag
   */
  @javax.annotation.Nullable
  public Integer getLag() {
    return lag;
  }

  public void setLag(Integer lag) {
    this.lag = lag;
  }


  public WritableDeviceInterface macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public WritableDeviceInterface mgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
    return this;
  }

  /**
   * This interface is used only for out-of-band management
   * @return mgmtOnly
   */
  @javax.annotation.Nullable
  public Boolean getMgmtOnly() {
    return mgmtOnly;
  }

  public void setMgmtOnly(Boolean mgmtOnly) {
    this.mgmtOnly = mgmtOnly;
  }


  public WritableDeviceInterface mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public WritableDeviceInterface mtu(Integer mtu) {
    this.mtu = mtu;
    return this;
  }

  /**
   * Get mtu
   * minimum: 1
   * maximum: 65536
   * @return mtu
   */
  @javax.annotation.Nullable
  public Integer getMtu() {
    return mtu;
  }

  public void setMtu(Integer mtu) {
    this.mtu = mtu;
  }


  public WritableDeviceInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WritableDeviceInterface taggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
    return this;
  }

  public WritableDeviceInterface addTaggedVlansItem(Integer taggedVlansItem) {
    if (this.taggedVlans == null) {
      this.taggedVlans = new LinkedHashSet<>();
    }
    this.taggedVlans.add(taggedVlansItem);
    return this;
  }

  /**
   * Get taggedVlans
   * @return taggedVlans
   */
  @javax.annotation.Nullable
  public Set<Integer> getTaggedVlans() {
    return taggedVlans;
  }

  public void setTaggedVlans(Set<Integer> taggedVlans) {
    this.taggedVlans = taggedVlans;
  }


  public WritableDeviceInterface tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WritableDeviceInterface addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public WritableDeviceInterface type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WritableDeviceInterface untaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
    return this;
  }

  /**
   * Get untaggedVlan
   * @return untaggedVlan
   */
  @javax.annotation.Nullable
  public Integer getUntaggedVlan() {
    return untaggedVlan;
  }

  public void setUntaggedVlan(Integer untaggedVlan) {
    this.untaggedVlan = untaggedVlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableDeviceInterface writableDeviceInterface = (WritableDeviceInterface) o;
    return Objects.equals(this.cable, writableDeviceInterface.cable) &&
        Objects.equals(this.connectedEndpoint, writableDeviceInterface.connectedEndpoint) &&
        Objects.equals(this.connectedEndpointType, writableDeviceInterface.connectedEndpointType) &&
        Objects.equals(this.connectionStatus, writableDeviceInterface.connectionStatus) &&
        Objects.equals(this.countIpaddresses, writableDeviceInterface.countIpaddresses) &&
        Objects.equals(this.description, writableDeviceInterface.description) &&
        Objects.equals(this.device, writableDeviceInterface.device) &&
        Objects.equals(this.enabled, writableDeviceInterface.enabled) &&
        Objects.equals(this.id, writableDeviceInterface.id) &&
        Objects.equals(this.lag, writableDeviceInterface.lag) &&
        Objects.equals(this.macAddress, writableDeviceInterface.macAddress) &&
        Objects.equals(this.mgmtOnly, writableDeviceInterface.mgmtOnly) &&
        Objects.equals(this.mode, writableDeviceInterface.mode) &&
        Objects.equals(this.mtu, writableDeviceInterface.mtu) &&
        Objects.equals(this.name, writableDeviceInterface.name) &&
        Objects.equals(this.taggedVlans, writableDeviceInterface.taggedVlans) &&
        Objects.equals(this.tags, writableDeviceInterface.tags) &&
        Objects.equals(this.type, writableDeviceInterface.type) &&
        Objects.equals(this.untaggedVlan, writableDeviceInterface.untaggedVlan);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cable, connectedEndpoint, connectedEndpointType, connectionStatus, countIpaddresses, description, device, enabled, id, lag, macAddress, mgmtOnly, mode, mtu, name, taggedVlans, tags, type, untaggedVlan);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableDeviceInterface {\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    connectedEndpoint: ").append(toIndentedString(connectedEndpoint)).append("\n");
    sb.append("    connectedEndpointType: ").append(toIndentedString(connectedEndpointType)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    countIpaddresses: ").append(toIndentedString(countIpaddresses)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    mgmtOnly: ").append(toIndentedString(mgmtOnly)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    mtu: ").append(toIndentedString(mtu)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taggedVlans: ").append(toIndentedString(taggedVlans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    untaggedVlan: ").append(toIndentedString(untaggedVlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cable");
    openapiFields.add("connected_endpoint");
    openapiFields.add("connected_endpoint_type");
    openapiFields.add("connection_status");
    openapiFields.add("count_ipaddresses");
    openapiFields.add("description");
    openapiFields.add("device");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("lag");
    openapiFields.add("mac_address");
    openapiFields.add("mgmt_only");
    openapiFields.add("mode");
    openapiFields.add("mtu");
    openapiFields.add("name");
    openapiFields.add("tagged_vlans");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("untagged_vlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WritableDeviceInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WritableDeviceInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WritableDeviceInterface is not found in the empty JSON string", WritableDeviceInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WritableDeviceInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WritableDeviceInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WritableDeviceInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cable`
      if (jsonObj.get("cable") != null && !jsonObj.get("cable").isJsonNull()) {
        NestedCable.validateJsonElement(jsonObj.get("cable"));
      }
      if ((jsonObj.get("connected_endpoint_type") != null && !jsonObj.get("connected_endpoint_type").isJsonNull()) && !jsonObj.get("connected_endpoint_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connected_endpoint_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connected_endpoint_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagged_vlans") != null && !jsonObj.get("tagged_vlans").isJsonNull() && !jsonObj.get("tagged_vlans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagged_vlans` to be an array in the JSON string but got `%s`", jsonObj.get("tagged_vlans").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WritableDeviceInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WritableDeviceInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WritableDeviceInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WritableDeviceInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<WritableDeviceInterface>() {
           @Override
           public void write(JsonWriter out, WritableDeviceInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WritableDeviceInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WritableDeviceInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WritableDeviceInterface
   * @throws IOException if the JSON string is invalid with respect to WritableDeviceInterface
   */
  public static WritableDeviceInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WritableDeviceInterface.class);
  }

  /**
   * Convert an instance of WritableDeviceInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

