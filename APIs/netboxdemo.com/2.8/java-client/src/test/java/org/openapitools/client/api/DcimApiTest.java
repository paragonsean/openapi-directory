/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cable;
import org.openapitools.client.model.ConsolePort;
import org.openapitools.client.model.ConsolePortTemplate;
import org.openapitools.client.model.ConsoleServerPort;
import org.openapitools.client.model.ConsoleServerPortTemplate;
import org.openapitools.client.model.DcimCablesList200Response;
import org.openapitools.client.model.DcimConsoleConnectionsList200Response;
import org.openapitools.client.model.DcimConsolePortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortTemplatesList200Response;
import org.openapitools.client.model.DcimConsoleServerPortsList200Response;
import org.openapitools.client.model.DcimDeviceBayTemplatesList200Response;
import org.openapitools.client.model.DcimDeviceBaysList200Response;
import org.openapitools.client.model.DcimDeviceRolesList200Response;
import org.openapitools.client.model.DcimDeviceTypesList200Response;
import org.openapitools.client.model.DcimDevicesList200Response;
import org.openapitools.client.model.DcimFrontPortTemplatesList200Response;
import org.openapitools.client.model.DcimFrontPortsList200Response;
import org.openapitools.client.model.DcimInterfaceConnectionsList200Response;
import org.openapitools.client.model.DcimInterfaceTemplatesList200Response;
import org.openapitools.client.model.DcimInterfacesList200Response;
import org.openapitools.client.model.DcimInventoryItemsList200Response;
import org.openapitools.client.model.DcimManufacturersList200Response;
import org.openapitools.client.model.DcimPlatformsList200Response;
import org.openapitools.client.model.DcimPowerConnectionsList200Response;
import org.openapitools.client.model.DcimPowerFeedsList200Response;
import org.openapitools.client.model.DcimPowerOutletTemplatesList200Response;
import org.openapitools.client.model.DcimPowerOutletsList200Response;
import org.openapitools.client.model.DcimPowerPanelsList200Response;
import org.openapitools.client.model.DcimPowerPortTemplatesList200Response;
import org.openapitools.client.model.DcimRackGroupsList200Response;
import org.openapitools.client.model.DcimRackReservationsList200Response;
import org.openapitools.client.model.DcimRackRolesList200Response;
import org.openapitools.client.model.DcimRacksList200Response;
import org.openapitools.client.model.DcimRearPortTemplatesList200Response;
import org.openapitools.client.model.DcimRearPortsList200Response;
import org.openapitools.client.model.DcimRegionsList200Response;
import org.openapitools.client.model.DcimSitesList200Response;
import org.openapitools.client.model.DcimVirtualChassisList200Response;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceBay;
import org.openapitools.client.model.DeviceBayTemplate;
import org.openapitools.client.model.DeviceInterface;
import org.openapitools.client.model.DeviceNAPALM;
import org.openapitools.client.model.DeviceRole;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.DeviceWithConfigContext;
import org.openapitools.client.model.FrontPort;
import org.openapitools.client.model.FrontPortTemplate;
import org.openapitools.client.model.InterfaceTemplate;
import org.openapitools.client.model.InventoryItem;
import org.openapitools.client.model.Manufacturer;
import org.openapitools.client.model.Platform;
import org.openapitools.client.model.PowerFeed;
import org.openapitools.client.model.PowerOutlet;
import org.openapitools.client.model.PowerOutletTemplate;
import org.openapitools.client.model.PowerPanel;
import org.openapitools.client.model.PowerPort;
import org.openapitools.client.model.PowerPortTemplate;
import org.openapitools.client.model.Rack;
import org.openapitools.client.model.RackGroup;
import org.openapitools.client.model.RackReservation;
import org.openapitools.client.model.RackRole;
import org.openapitools.client.model.RackUnit;
import org.openapitools.client.model.RearPort;
import org.openapitools.client.model.RearPortTemplate;
import org.openapitools.client.model.Region;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.VirtualChassis;
import org.openapitools.client.model.WritableCable;
import org.openapitools.client.model.WritableConsolePort;
import org.openapitools.client.model.WritableConsolePortTemplate;
import org.openapitools.client.model.WritableConsoleServerPort;
import org.openapitools.client.model.WritableConsoleServerPortTemplate;
import org.openapitools.client.model.WritableDeviceBay;
import org.openapitools.client.model.WritableDeviceBayTemplate;
import org.openapitools.client.model.WritableDeviceInterface;
import org.openapitools.client.model.WritableDeviceType;
import org.openapitools.client.model.WritableDeviceWithConfigContext;
import org.openapitools.client.model.WritableFrontPort;
import org.openapitools.client.model.WritableFrontPortTemplate;
import org.openapitools.client.model.WritableInterfaceTemplate;
import org.openapitools.client.model.WritableInventoryItem;
import org.openapitools.client.model.WritablePlatform;
import org.openapitools.client.model.WritablePowerFeed;
import org.openapitools.client.model.WritablePowerOutlet;
import org.openapitools.client.model.WritablePowerOutletTemplate;
import org.openapitools.client.model.WritablePowerPanel;
import org.openapitools.client.model.WritablePowerPort;
import org.openapitools.client.model.WritablePowerPortTemplate;
import org.openapitools.client.model.WritableRack;
import org.openapitools.client.model.WritableRackGroup;
import org.openapitools.client.model.WritableRackReservation;
import org.openapitools.client.model.WritableRearPort;
import org.openapitools.client.model.WritableRearPortTemplate;
import org.openapitools.client.model.WritableRegion;
import org.openapitools.client.model.WritableSite;
import org.openapitools.client.model.WritableVirtualChassis;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DcimApi
 */
@Disabled
public class DcimApiTest {

    private final DcimApi api = new DcimApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesCreateTest() throws ApiException {
        WritableCable writableCable = null;
        Cable response = api.dcimCablesCreate(writableCable);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimCablesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesListTest() throws ApiException {
        String id = null;
        String label = null;
        String length = null;
        String lengthUnit = null;
        String q = null;
        String type = null;
        String status = null;
        String color = null;
        String deviceId = null;
        String device = null;
        String rackId = null;
        String rack = null;
        String siteId = null;
        String site = null;
        String tenantId = null;
        String tenant = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String labelN = null;
        String labelIc = null;
        String labelNic = null;
        String labelIew = null;
        String labelNiew = null;
        String labelIsw = null;
        String labelNisw = null;
        String labelIe = null;
        String labelNie = null;
        String lengthN = null;
        String lengthLte = null;
        String lengthLt = null;
        String lengthGte = null;
        String lengthGt = null;
        String lengthUnitN = null;
        String typeN = null;
        String statusN = null;
        String colorN = null;
        Integer limit = null;
        Integer offset = null;
        DcimCablesList200Response response = api.dcimCablesList(id, label, length, lengthUnit, q, type, status, color, deviceId, device, rackId, rack, siteId, site, tenantId, tenant, idN, idLte, idLt, idGte, idGt, labelN, labelIc, labelNic, labelIew, labelNiew, labelIsw, labelNisw, labelIe, labelNie, lengthN, lengthLte, lengthLt, lengthGte, lengthGt, lengthUnitN, typeN, statusN, colorN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableCable writableCable = null;
        Cable response = api.dcimCablesPartialUpdate(id, writableCable);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesReadTest() throws ApiException {
        Integer id = null;
        Cable response = api.dcimCablesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimCablesUpdateTest() throws ApiException {
        Integer id = null;
        WritableCable writableCable = null;
        Cable response = api.dcimCablesUpdate(id, writableCable);
        // TODO: test validations
    }

    /**
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConnectedDeviceListTest() throws ApiException {
        String peerDevice = null;
        String peerInterface = null;
        Device response = api.dcimConnectedDeviceList(peerDevice, peerInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String connectionStatusN = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleConnectionsList200Response response = api.dcimConsoleConnectionsList(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesCreateTest() throws ApiException {
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesCreate(writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsolePortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsolePortTemplatesList200Response response = api.dcimConsolePortTemplatesList(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesPartialUpdate(id, writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePortTemplate writableConsolePortTemplate = null;
        ConsolePortTemplate response = api.dcimConsolePortTemplatesUpdate(id, writableConsolePortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsCreateTest() throws ApiException {
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsCreate(writableConsolePort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsolePortsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsListTest() throws ApiException {
        String id = null;
        String name = null;
        String description = null;
        String connectionStatus = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String type = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String connectionStatusN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        String typeN = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleConnectionsList200Response response = api.dcimConsolePortsList(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsPartialUpdate(id, writableConsolePort);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsReadTest() throws ApiException {
        Integer id = null;
        ConsolePort response = api.dcimConsolePortsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsTraceTest() throws ApiException {
        Integer id = null;
        ConsolePort response = api.dcimConsolePortsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsolePortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsolePort writableConsolePort = null;
        ConsolePort response = api.dcimConsolePortsUpdate(id, writableConsolePort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesCreateTest() throws ApiException {
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesCreate(writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsoleServerPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleServerPortTemplatesList200Response response = api.dcimConsoleServerPortTemplatesList(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesPartialUpdate(id, writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPortTemplate writableConsoleServerPortTemplate = null;
        ConsoleServerPortTemplate response = api.dcimConsoleServerPortTemplatesUpdate(id, writableConsoleServerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsCreateTest() throws ApiException {
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsCreate(writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimConsoleServerPortsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsListTest() throws ApiException {
        String id = null;
        String name = null;
        String description = null;
        String connectionStatus = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String type = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String connectionStatusN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        String typeN = null;
        Integer limit = null;
        Integer offset = null;
        DcimConsoleServerPortsList200Response response = api.dcimConsoleServerPortsList(id, name, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsPartialUpdate(id, writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsTraceTest() throws ApiException {
        Integer id = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimConsoleServerPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConsoleServerPort writableConsoleServerPort = null;
        ConsoleServerPort response = api.dcimConsoleServerPortsUpdate(id, writableConsoleServerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesCreateTest() throws ApiException {
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesCreate(writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceBayTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceBayTemplatesList200Response response = api.dcimDeviceBayTemplatesList(id, name, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesPartialUpdate(id, writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesReadTest() throws ApiException {
        Integer id = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBayTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBayTemplate writableDeviceBayTemplate = null;
        DeviceBayTemplate response = api.dcimDeviceBayTemplatesUpdate(id, writableDeviceBayTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysCreateTest() throws ApiException {
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysCreate(writableDeviceBay);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceBaysDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysListTest() throws ApiException {
        String id = null;
        String name = null;
        String description = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceBaysList200Response response = api.dcimDeviceBaysList(id, name, description, q, regionId, region, siteId, site, deviceId, device, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysPartialUpdate(id, writableDeviceBay);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysReadTest() throws ApiException {
        Integer id = null;
        DeviceBay response = api.dcimDeviceBaysRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceBaysUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceBay writableDeviceBay = null;
        DeviceBay response = api.dcimDeviceBaysUpdate(id, writableDeviceBay);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesCreateTest() throws ApiException {
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesCreate(deviceRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceRolesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String color = null;
        String vmRole = null;
        String q = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String colorN = null;
        String colorIc = null;
        String colorNic = null;
        String colorIew = null;
        String colorNiew = null;
        String colorIsw = null;
        String colorNisw = null;
        String colorIe = null;
        String colorNie = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceRolesList200Response response = api.dcimDeviceRolesList(id, name, slug, color, vmRole, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesPartialUpdate(id, deviceRole);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesReadTest() throws ApiException {
        Integer id = null;
        DeviceRole response = api.dcimDeviceRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceRolesUpdateTest() throws ApiException {
        Integer id = null;
        DeviceRole deviceRole = null;
        DeviceRole response = api.dcimDeviceRolesUpdate(id, deviceRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesCreateTest() throws ApiException {
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesCreate(writableDeviceType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDeviceTypesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesListTest() throws ApiException {
        String id = null;
        String model = null;
        String slug = null;
        String partNumber = null;
        String uHeight = null;
        String isFullDepth = null;
        String subdeviceRole = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String consolePorts = null;
        String consoleServerPorts = null;
        String powerPorts = null;
        String powerOutlets = null;
        String interfaces = null;
        String passThroughPorts = null;
        String deviceBays = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String modelN = null;
        String modelIc = null;
        String modelNic = null;
        String modelIew = null;
        String modelNiew = null;
        String modelIsw = null;
        String modelNisw = null;
        String modelIe = null;
        String modelNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String partNumberN = null;
        String partNumberIc = null;
        String partNumberNic = null;
        String partNumberIew = null;
        String partNumberNiew = null;
        String partNumberIsw = null;
        String partNumberNisw = null;
        String partNumberIe = null;
        String partNumberNie = null;
        String uHeightN = null;
        String uHeightLte = null;
        String uHeightLt = null;
        String uHeightGte = null;
        String uHeightGt = null;
        String subdeviceRoleN = null;
        String manufacturerIdN = null;
        String manufacturerN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimDeviceTypesList200Response response = api.dcimDeviceTypesList(id, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, modelN, modelIc, modelNic, modelIew, modelNiew, modelIsw, modelNisw, modelIe, modelNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, partNumberN, partNumberIc, partNumberNic, partNumberIew, partNumberNiew, partNumberIsw, partNumberNisw, partNumberIe, partNumberNie, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, subdeviceRoleN, manufacturerIdN, manufacturerN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesPartialUpdate(id, writableDeviceType);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesReadTest() throws ApiException {
        Integer id = null;
        DeviceType response = api.dcimDeviceTypesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDeviceTypesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceType writableDeviceType = null;
        DeviceType response = api.dcimDeviceTypesUpdate(id, writableDeviceType);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesCreateTest() throws ApiException {
        WritableDeviceWithConfigContext writableDeviceWithConfigContext = null;
        DeviceWithConfigContext response = api.dcimDevicesCreate(writableDeviceWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimDevicesDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular Device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesGraphsTest() throws ApiException {
        Integer id = null;
        DeviceWithConfigContext response = api.dcimDevicesGraphs(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesListTest() throws ApiException {
        String id = null;
        String name = null;
        String assetTag = null;
        String face = null;
        String position = null;
        String vcPosition = null;
        String vcPriority = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String localContextData = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String deviceTypeId = null;
        String roleId = null;
        String role = null;
        String platformId = null;
        String platform = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String rackGroupId = null;
        String rackId = null;
        String clusterId = null;
        String model = null;
        String status = null;
        String isFullDepth = null;
        String macAddress = null;
        String serial = null;
        String hasPrimaryIp = null;
        String virtualChassisId = null;
        String virtualChassisMember = null;
        String consolePorts = null;
        String consoleServerPorts = null;
        String powerPorts = null;
        String powerOutlets = null;
        String interfaces = null;
        String passThroughPorts = null;
        String deviceBays = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String assetTagN = null;
        String assetTagIc = null;
        String assetTagNic = null;
        String assetTagIew = null;
        String assetTagNiew = null;
        String assetTagIsw = null;
        String assetTagNisw = null;
        String assetTagIe = null;
        String assetTagNie = null;
        String faceN = null;
        String positionN = null;
        String positionLte = null;
        String positionLt = null;
        String positionGte = null;
        String positionGt = null;
        String vcPositionN = null;
        String vcPositionLte = null;
        String vcPositionLt = null;
        String vcPositionGte = null;
        String vcPositionGt = null;
        String vcPriorityN = null;
        String vcPriorityLte = null;
        String vcPriorityLt = null;
        String vcPriorityGte = null;
        String vcPriorityGt = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String manufacturerIdN = null;
        String manufacturerN = null;
        String deviceTypeIdN = null;
        String roleIdN = null;
        String roleN = null;
        String platformIdN = null;
        String platformN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String rackGroupIdN = null;
        String rackIdN = null;
        String clusterIdN = null;
        String modelN = null;
        String statusN = null;
        String macAddressN = null;
        String macAddressIc = null;
        String macAddressNic = null;
        String macAddressIew = null;
        String macAddressNiew = null;
        String macAddressIsw = null;
        String macAddressNisw = null;
        String macAddressIe = null;
        String macAddressNie = null;
        String virtualChassisIdN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimDevicesList200Response response = api.dcimDevicesList(id, name, assetTag, face, position, vcPosition, vcPriority, tenantGroupId, tenantGroup, tenantId, tenant, localContextData, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, platformId, platform, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, serial, hasPrimaryIp, virtualChassisId, virtualChassisMember, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, deviceBays, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, faceN, positionN, positionLte, positionLt, positionGte, positionGt, vcPositionN, vcPositionLte, vcPositionLt, vcPositionGte, vcPositionGt, vcPriorityN, vcPriorityLte, vcPriorityLt, vcPriorityGte, vcPriorityGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, manufacturerIdN, manufacturerN, deviceTypeIdN, roleIdN, roleN, platformIdN, platformN, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, rackIdN, clusterIdN, modelN, statusN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, virtualChassisIdN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * Execute a NAPALM method on a Device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesNapalmTest() throws ApiException {
        Integer id = null;
        String method = null;
        DeviceNAPALM response = api.dcimDevicesNapalm(id, method);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceWithConfigContext writableDeviceWithConfigContext = null;
        DeviceWithConfigContext response = api.dcimDevicesPartialUpdate(id, writableDeviceWithConfigContext);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesReadTest() throws ApiException {
        Integer id = null;
        DeviceWithConfigContext response = api.dcimDevicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimDevicesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceWithConfigContext writableDeviceWithConfigContext = null;
        DeviceWithConfigContext response = api.dcimDevicesUpdate(id, writableDeviceWithConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesCreateTest() throws ApiException {
        WritableFrontPortTemplate writableFrontPortTemplate = null;
        FrontPortTemplate response = api.dcimFrontPortTemplatesCreate(writableFrontPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimFrontPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimFrontPortTemplatesList200Response response = api.dcimFrontPortTemplatesList(id, name, type, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableFrontPortTemplate writableFrontPortTemplate = null;
        FrontPortTemplate response = api.dcimFrontPortTemplatesPartialUpdate(id, writableFrontPortTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        FrontPortTemplate response = api.dcimFrontPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableFrontPortTemplate writableFrontPortTemplate = null;
        FrontPortTemplate response = api.dcimFrontPortTemplatesUpdate(id, writableFrontPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsCreateTest() throws ApiException {
        WritableFrontPort writableFrontPort = null;
        FrontPort response = api.dcimFrontPortsCreate(writableFrontPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimFrontPortsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String description = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimFrontPortsList200Response response = api.dcimFrontPortsList(id, name, type, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableFrontPort writableFrontPort = null;
        FrontPort response = api.dcimFrontPortsPartialUpdate(id, writableFrontPort);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsReadTest() throws ApiException {
        Integer id = null;
        FrontPort response = api.dcimFrontPortsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsTraceTest() throws ApiException {
        Integer id = null;
        FrontPort response = api.dcimFrontPortsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimFrontPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableFrontPort writableFrontPort = null;
        FrontPort response = api.dcimFrontPortsUpdate(id, writableFrontPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceConnectionsListTest() throws ApiException {
        String connectionStatus = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String connectionStatusN = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfaceConnectionsList200Response response = api.dcimInterfaceConnectionsList(connectionStatus, site, deviceId, device, connectionStatusN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesCreateTest() throws ApiException {
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesCreate(writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInterfaceTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String mgmtOnly = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfaceTemplatesList200Response response = api.dcimInterfaceTemplatesList(id, name, type, mgmtOnly, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesPartialUpdate(id, writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesReadTest() throws ApiException {
        Integer id = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfaceTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableInterfaceTemplate writableInterfaceTemplate = null;
        InterfaceTemplate response = api.dcimInterfaceTemplatesUpdate(id, writableInterfaceTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesCreateTest() throws ApiException {
        WritableDeviceInterface writableDeviceInterface = null;
        DeviceInterface response = api.dcimInterfacesCreate(writableDeviceInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInterfacesDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesGraphsTest() throws ApiException {
        Integer id = null;
        DeviceInterface response = api.dcimInterfacesGraphs(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesListTest() throws ApiException {
        String id = null;
        String name = null;
        String connectionStatus = null;
        String type = null;
        String enabled = null;
        String mtu = null;
        String mgmtOnly = null;
        String mode = null;
        String description = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        String kind = null;
        String lagId = null;
        String macAddress = null;
        String vlanId = null;
        String vlan = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String connectionStatusN = null;
        String typeN = null;
        String mtuN = null;
        String mtuLte = null;
        String mtuLt = null;
        String mtuGte = null;
        String mtuGt = null;
        String modeN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String tagN = null;
        String lagIdN = null;
        String macAddressN = null;
        String macAddressIc = null;
        String macAddressNic = null;
        String macAddressIew = null;
        String macAddressNiew = null;
        String macAddressIsw = null;
        String macAddressNisw = null;
        String macAddressIe = null;
        String macAddressNie = null;
        Integer limit = null;
        Integer offset = null;
        DcimInterfacesList200Response response = api.dcimInterfacesList(id, name, connectionStatus, type, enabled, mtu, mgmtOnly, mode, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, kind, lagId, macAddress, vlanId, vlan, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, typeN, mtuN, mtuLte, mtuLt, mtuGte, mtuGt, modeN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, tagN, lagIdN, macAddressN, macAddressIc, macAddressNic, macAddressIew, macAddressNiew, macAddressIsw, macAddressNisw, macAddressIe, macAddressNie, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceInterface writableDeviceInterface = null;
        DeviceInterface response = api.dcimInterfacesPartialUpdate(id, writableDeviceInterface);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesReadTest() throws ApiException {
        Integer id = null;
        DeviceInterface response = api.dcimInterfacesRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesTraceTest() throws ApiException {
        Integer id = null;
        DeviceInterface response = api.dcimInterfacesTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInterfacesUpdateTest() throws ApiException {
        Integer id = null;
        WritableDeviceInterface writableDeviceInterface = null;
        DeviceInterface response = api.dcimInterfacesUpdate(id, writableDeviceInterface);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsCreateTest() throws ApiException {
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsCreate(writableInventoryItem);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimInventoryItemsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsListTest() throws ApiException {
        String id = null;
        String name = null;
        String partId = null;
        String assetTag = null;
        String discovered = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String parentId = null;
        String manufacturerId = null;
        String manufacturer = null;
        String serial = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String partIdN = null;
        String partIdIc = null;
        String partIdNic = null;
        String partIdIew = null;
        String partIdNiew = null;
        String partIdIsw = null;
        String partIdNisw = null;
        String partIdIe = null;
        String partIdNie = null;
        String assetTagN = null;
        String assetTagIc = null;
        String assetTagNic = null;
        String assetTagIew = null;
        String assetTagNiew = null;
        String assetTagIsw = null;
        String assetTagNisw = null;
        String assetTagIe = null;
        String assetTagNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        String parentIdN = null;
        String manufacturerIdN = null;
        String manufacturerN = null;
        Integer limit = null;
        Integer offset = null;
        DcimInventoryItemsList200Response response = api.dcimInventoryItemsList(id, name, partId, assetTag, discovered, q, regionId, region, siteId, site, deviceId, device, tag, parentId, manufacturerId, manufacturer, serial, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, partIdN, partIdIc, partIdNic, partIdIew, partIdNiew, partIdIsw, partIdNisw, partIdIe, partIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, parentIdN, manufacturerIdN, manufacturerN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsPartialUpdate(id, writableInventoryItem);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsReadTest() throws ApiException {
        Integer id = null;
        InventoryItem response = api.dcimInventoryItemsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimInventoryItemsUpdateTest() throws ApiException {
        Integer id = null;
        WritableInventoryItem writableInventoryItem = null;
        InventoryItem response = api.dcimInventoryItemsUpdate(id, writableInventoryItem);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersCreateTest() throws ApiException {
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersCreate(manufacturer);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimManufacturersDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String q = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        Integer limit = null;
        Integer offset = null;
        DcimManufacturersList200Response response = api.dcimManufacturersList(id, name, slug, description, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersPartialUpdateTest() throws ApiException {
        Integer id = null;
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersPartialUpdate(id, manufacturer);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersReadTest() throws ApiException {
        Integer id = null;
        Manufacturer response = api.dcimManufacturersRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimManufacturersUpdateTest() throws ApiException {
        Integer id = null;
        Manufacturer manufacturer = null;
        Manufacturer response = api.dcimManufacturersUpdate(id, manufacturer);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsCreateTest() throws ApiException {
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsCreate(writablePlatform);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPlatformsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String napalmDriver = null;
        String description = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String napalmDriverN = null;
        String napalmDriverIc = null;
        String napalmDriverNic = null;
        String napalmDriverIew = null;
        String napalmDriverNiew = null;
        String napalmDriverIsw = null;
        String napalmDriverNisw = null;
        String napalmDriverIe = null;
        String napalmDriverNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String manufacturerIdN = null;
        String manufacturerN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPlatformsList200Response response = api.dcimPlatformsList(id, name, slug, napalmDriver, description, q, manufacturerId, manufacturer, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, napalmDriverN, napalmDriverIc, napalmDriverNic, napalmDriverIew, napalmDriverNiew, napalmDriverIsw, napalmDriverNisw, napalmDriverIe, napalmDriverNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, manufacturerIdN, manufacturerN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsPartialUpdate(id, writablePlatform);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsReadTest() throws ApiException {
        Integer id = null;
        Platform response = api.dcimPlatformsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPlatformsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePlatform writablePlatform = null;
        Platform response = api.dcimPlatformsUpdate(id, writablePlatform);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String connectionStatusN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerConnectionsList200Response response = api.dcimPowerConnectionsList(name, connectionStatus, site, deviceId, device, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, connectionStatusN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsCreateTest() throws ApiException {
        WritablePowerFeed writablePowerFeed = null;
        PowerFeed response = api.dcimPowerFeedsCreate(writablePowerFeed);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerFeedsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsListTest() throws ApiException {
        String id = null;
        String name = null;
        String status = null;
        String type = null;
        String supply = null;
        String phase = null;
        String voltage = null;
        String amperage = null;
        String maxUtilization = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String powerPanelId = null;
        String rackId = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String statusN = null;
        String typeN = null;
        String supplyN = null;
        String phaseN = null;
        String voltageN = null;
        String voltageLte = null;
        String voltageLt = null;
        String voltageGte = null;
        String voltageGt = null;
        String amperageN = null;
        String amperageLte = null;
        String amperageLt = null;
        String amperageGte = null;
        String amperageGt = null;
        String maxUtilizationN = null;
        String maxUtilizationLte = null;
        String maxUtilizationLt = null;
        String maxUtilizationGte = null;
        String maxUtilizationGt = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String powerPanelIdN = null;
        String rackIdN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerFeedsList200Response response = api.dcimPowerFeedsList(id, name, status, type, supply, phase, voltage, amperage, maxUtilization, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, powerPanelId, rackId, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, statusN, typeN, supplyN, phaseN, voltageN, voltageLte, voltageLt, voltageGte, voltageGt, amperageN, amperageLte, amperageLt, amperageGte, amperageGt, maxUtilizationN, maxUtilizationLte, maxUtilizationLt, maxUtilizationGte, maxUtilizationGt, regionIdN, regionN, siteIdN, siteN, powerPanelIdN, rackIdN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerFeed writablePowerFeed = null;
        PowerFeed response = api.dcimPowerFeedsPartialUpdate(id, writablePowerFeed);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsReadTest() throws ApiException {
        Integer id = null;
        PowerFeed response = api.dcimPowerFeedsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerFeedsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerFeed writablePowerFeed = null;
        PowerFeed response = api.dcimPowerFeedsUpdate(id, writablePowerFeed);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesCreateTest() throws ApiException {
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesCreate(writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerOutletTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String feedLeg = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String feedLegN = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerOutletTemplatesList200Response response = api.dcimPowerOutletTemplatesList(id, name, type, feedLeg, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, feedLegN, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesPartialUpdate(id, writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutletTemplate writablePowerOutletTemplate = null;
        PowerOutletTemplate response = api.dcimPowerOutletTemplatesUpdate(id, writablePowerOutletTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsCreateTest() throws ApiException {
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsCreate(writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerOutletsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsListTest() throws ApiException {
        String id = null;
        String name = null;
        String feedLeg = null;
        String description = null;
        String connectionStatus = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String type = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String feedLegN = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String connectionStatusN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        String typeN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerOutletsList200Response response = api.dcimPowerOutletsList(id, name, feedLeg, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, feedLegN, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsPartialUpdate(id, writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsReadTest() throws ApiException {
        Integer id = null;
        PowerOutlet response = api.dcimPowerOutletsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsTraceTest() throws ApiException {
        Integer id = null;
        PowerOutlet response = api.dcimPowerOutletsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerOutletsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerOutlet writablePowerOutlet = null;
        PowerOutlet response = api.dcimPowerOutletsUpdate(id, writablePowerOutlet);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsCreateTest() throws ApiException {
        WritablePowerPanel writablePowerPanel = null;
        PowerPanel response = api.dcimPowerPanelsCreate(writablePowerPanel);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerPanelsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsListTest() throws ApiException {
        String id = null;
        String name = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String rackGroupId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String rackGroupIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerPanelsList200Response response = api.dcimPowerPanelsList(id, name, q, regionId, region, siteId, site, rackGroupId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, rackGroupIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPanel writablePowerPanel = null;
        PowerPanel response = api.dcimPowerPanelsPartialUpdate(id, writablePowerPanel);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsReadTest() throws ApiException {
        Integer id = null;
        PowerPanel response = api.dcimPowerPanelsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPanelsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPanel writablePowerPanel = null;
        PowerPanel response = api.dcimPowerPanelsUpdate(id, writablePowerPanel);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesCreateTest() throws ApiException {
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesCreate(writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String maximumDraw = null;
        String allocatedDraw = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String maximumDrawN = null;
        String maximumDrawLte = null;
        String maximumDrawLt = null;
        String maximumDrawGte = null;
        String maximumDrawGt = null;
        String allocatedDrawN = null;
        String allocatedDrawLte = null;
        String allocatedDrawLt = null;
        String allocatedDrawGte = null;
        String allocatedDrawGt = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerPortTemplatesList200Response response = api.dcimPowerPortTemplatesList(id, name, type, maximumDraw, allocatedDraw, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesPartialUpdate(id, writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPortTemplate writablePowerPortTemplate = null;
        PowerPortTemplate response = api.dcimPowerPortTemplatesUpdate(id, writablePowerPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsCreateTest() throws ApiException {
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsCreate(writablePowerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimPowerPortsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsListTest() throws ApiException {
        String id = null;
        String name = null;
        String maximumDraw = null;
        String allocatedDraw = null;
        String description = null;
        String connectionStatus = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String type = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String maximumDrawN = null;
        String maximumDrawLte = null;
        String maximumDrawLt = null;
        String maximumDrawGte = null;
        String maximumDrawGt = null;
        String allocatedDrawN = null;
        String allocatedDrawLte = null;
        String allocatedDrawLt = null;
        String allocatedDrawGte = null;
        String allocatedDrawGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String connectionStatusN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        String typeN = null;
        Integer limit = null;
        Integer offset = null;
        DcimPowerConnectionsList200Response response = api.dcimPowerPortsList(id, name, maximumDraw, allocatedDraw, description, connectionStatus, q, regionId, region, siteId, site, deviceId, device, tag, type, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, maximumDrawN, maximumDrawLte, maximumDrawLt, maximumDrawGte, maximumDrawGt, allocatedDrawN, allocatedDrawLte, allocatedDrawLt, allocatedDrawGte, allocatedDrawGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, connectionStatusN, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, typeN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsPartialUpdate(id, writablePowerPort);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsReadTest() throws ApiException {
        Integer id = null;
        PowerPort response = api.dcimPowerPortsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsTraceTest() throws ApiException {
        Integer id = null;
        PowerPort response = api.dcimPowerPortsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimPowerPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritablePowerPort writablePowerPort = null;
        PowerPort response = api.dcimPowerPortsUpdate(id, writablePowerPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsCreateTest() throws ApiException {
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsCreate(writableRackGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackGroupsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String parentIdN = null;
        String parentN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackGroupsList200Response response = api.dcimRackGroupsList(id, name, slug, description, q, regionId, region, siteId, site, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, parentIdN, parentN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsPartialUpdate(id, writableRackGroup);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsReadTest() throws ApiException {
        Integer id = null;
        RackGroup response = api.dcimRackGroupsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackGroup writableRackGroup = null;
        RackGroup response = api.dcimRackGroupsUpdate(id, writableRackGroup);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsCreateTest() throws ApiException {
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsCreate(writableRackReservation);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackReservationsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsListTest() throws ApiException {
        String id = null;
        String created = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String q = null;
        String rackId = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String userId = null;
        String user = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String createdN = null;
        String createdLte = null;
        String createdLt = null;
        String createdGte = null;
        String createdGt = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String rackIdN = null;
        String siteIdN = null;
        String siteN = null;
        String groupIdN = null;
        String groupN = null;
        String userIdN = null;
        String userN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackReservationsList200Response response = api.dcimRackReservationsList(id, created, tenantGroupId, tenantGroup, tenantId, tenant, q, rackId, siteId, site, groupId, group, userId, user, idN, idLte, idLt, idGte, idGt, createdN, createdLte, createdLt, createdGte, createdGt, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, rackIdN, siteIdN, siteN, groupIdN, groupN, userIdN, userN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsPartialUpdate(id, writableRackReservation);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsReadTest() throws ApiException {
        Integer id = null;
        RackReservation response = api.dcimRackReservationsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackReservationsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRackReservation writableRackReservation = null;
        RackReservation response = api.dcimRackReservationsUpdate(id, writableRackReservation);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesCreateTest() throws ApiException {
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesCreate(rackRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRackRolesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String color = null;
        String q = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String colorN = null;
        String colorIc = null;
        String colorNic = null;
        String colorIew = null;
        String colorNiew = null;
        String colorIsw = null;
        String colorNisw = null;
        String colorIe = null;
        String colorNie = null;
        Integer limit = null;
        Integer offset = null;
        DcimRackRolesList200Response response = api.dcimRackRolesList(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesPartialUpdateTest() throws ApiException {
        Integer id = null;
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesPartialUpdate(id, rackRole);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesReadTest() throws ApiException {
        Integer id = null;
        RackRole response = api.dcimRackRolesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRackRolesUpdateTest() throws ApiException {
        Integer id = null;
        RackRole rackRole = null;
        RackRole response = api.dcimRackRolesUpdate(id, rackRole);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksCreateTest() throws ApiException {
        WritableRack writableRack = null;
        Rack response = api.dcimRacksCreate(writableRack);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRacksDelete(id);
        // TODO: test validations
    }

    /**
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksElevationTest() throws ApiException {
        Integer id = null;
        String q = null;
        String face = null;
        String render = null;
        Integer unitWidth = null;
        Integer unitHeight = null;
        Integer legendWidth = null;
        Integer exclude = null;
        Boolean expandDevices = null;
        Boolean includeImages = null;
        List<RackUnit> response = api.dcimRacksElevation(id, q, face, render, unitWidth, unitHeight, legendWidth, exclude, expandDevices, includeImages);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksListTest() throws ApiException {
        String id = null;
        String name = null;
        String facilityId = null;
        String assetTag = null;
        String type = null;
        String width = null;
        String uHeight = null;
        String descUnits = null;
        String outerWidth = null;
        String outerDepth = null;
        String outerUnit = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String status = null;
        String roleId = null;
        String role = null;
        String serial = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String facilityIdN = null;
        String facilityIdIc = null;
        String facilityIdNic = null;
        String facilityIdIew = null;
        String facilityIdNiew = null;
        String facilityIdIsw = null;
        String facilityIdNisw = null;
        String facilityIdIe = null;
        String facilityIdNie = null;
        String assetTagN = null;
        String assetTagIc = null;
        String assetTagNic = null;
        String assetTagIew = null;
        String assetTagNiew = null;
        String assetTagIsw = null;
        String assetTagNisw = null;
        String assetTagIe = null;
        String assetTagNie = null;
        String typeN = null;
        String widthN = null;
        String uHeightN = null;
        String uHeightLte = null;
        String uHeightLt = null;
        String uHeightGte = null;
        String uHeightGt = null;
        String outerWidthN = null;
        String outerWidthLte = null;
        String outerWidthLt = null;
        String outerWidthGte = null;
        String outerWidthGt = null;
        String outerDepthN = null;
        String outerDepthLte = null;
        String outerDepthLt = null;
        String outerDepthGte = null;
        String outerDepthGt = null;
        String outerUnitN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String groupIdN = null;
        String groupN = null;
        String statusN = null;
        String roleIdN = null;
        String roleN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRacksList200Response response = api.dcimRacksList(id, name, facilityId, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, regionId, region, siteId, site, groupId, group, status, roleId, role, serial, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, facilityIdN, facilityIdIc, facilityIdNic, facilityIdIew, facilityIdNiew, facilityIdIsw, facilityIdNisw, facilityIdIe, facilityIdNie, assetTagN, assetTagIc, assetTagNic, assetTagIew, assetTagNiew, assetTagIsw, assetTagNisw, assetTagIe, assetTagNie, typeN, widthN, uHeightN, uHeightLte, uHeightLt, uHeightGte, uHeightGt, outerWidthN, outerWidthLte, outerWidthLt, outerWidthGte, outerWidthGt, outerDepthN, outerDepthLte, outerDepthLt, outerDepthGte, outerDepthGt, outerUnitN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, regionIdN, regionN, siteIdN, siteN, groupIdN, groupN, statusN, roleIdN, roleN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRack writableRack = null;
        Rack response = api.dcimRacksPartialUpdate(id, writableRack);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksReadTest() throws ApiException {
        Integer id = null;
        Rack response = api.dcimRacksRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRacksUpdateTest() throws ApiException {
        Integer id = null;
        WritableRack writableRack = null;
        Rack response = api.dcimRacksUpdate(id, writableRack);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesCreateTest() throws ApiException {
        WritableRearPortTemplate writableRearPortTemplate = null;
        RearPortTemplate response = api.dcimRearPortTemplatesCreate(writableRearPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRearPortTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String positions = null;
        String q = null;
        String devicetypeId = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String positionsN = null;
        String positionsLte = null;
        String positionsLt = null;
        String positionsGte = null;
        String positionsGt = null;
        String devicetypeIdN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRearPortTemplatesList200Response response = api.dcimRearPortTemplatesList(id, name, type, positions, q, devicetypeId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, devicetypeIdN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRearPortTemplate writableRearPortTemplate = null;
        RearPortTemplate response = api.dcimRearPortTemplatesPartialUpdate(id, writableRearPortTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        RearPortTemplate response = api.dcimRearPortTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableRearPortTemplate writableRearPortTemplate = null;
        RearPortTemplate response = api.dcimRearPortTemplatesUpdate(id, writableRearPortTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsCreateTest() throws ApiException {
        WritableRearPort writableRearPort = null;
        RearPort response = api.dcimRearPortsCreate(writableRearPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRearPortsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsListTest() throws ApiException {
        String id = null;
        String name = null;
        String type = null;
        String positions = null;
        String description = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String typeN = null;
        String positionsN = null;
        String positionsLte = null;
        String positionsLt = null;
        String positionsGte = null;
        String positionsGt = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String deviceIdN = null;
        String deviceN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRearPortsList200Response response = api.dcimRearPortsList(id, name, type, positions, description, q, regionId, region, siteId, site, deviceId, device, tag, cabled, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, typeN, positionsN, positionsLte, positionsLt, positionsGte, positionsGt, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, regionIdN, regionN, siteIdN, siteN, deviceIdN, deviceN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRearPort writableRearPort = null;
        RearPort response = api.dcimRearPortsPartialUpdate(id, writableRearPort);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsReadTest() throws ApiException {
        Integer id = null;
        RearPort response = api.dcimRearPortsRead(id);
        // TODO: test validations
    }

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsTraceTest() throws ApiException {
        Integer id = null;
        RearPort response = api.dcimRearPortsTrace(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRearPortsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRearPort writableRearPort = null;
        RearPort response = api.dcimRearPortsUpdate(id, writableRearPort);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsCreateTest() throws ApiException {
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsCreate(writableRegion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimRegionsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String q = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String parentIdN = null;
        String parentN = null;
        Integer limit = null;
        Integer offset = null;
        DcimRegionsList200Response response = api.dcimRegionsList(id, name, slug, description, q, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, parentIdN, parentN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsPartialUpdate(id, writableRegion);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsReadTest() throws ApiException {
        Integer id = null;
        Region response = api.dcimRegionsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimRegionsUpdateTest() throws ApiException {
        Integer id = null;
        WritableRegion writableRegion = null;
        Region response = api.dcimRegionsUpdate(id, writableRegion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesCreateTest() throws ApiException {
        WritableSite writableSite = null;
        Site response = api.dcimSitesCreate(writableSite);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimSitesDelete(id);
        // TODO: test validations
    }

    /**
     * A convenience method for rendering graphs for a particular site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesGraphsTest() throws ApiException {
        Integer id = null;
        Site response = api.dcimSitesGraphs(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String facility = null;
        String asn = null;
        String latitude = null;
        String longitude = null;
        String contactName = null;
        String contactPhone = null;
        String contactEmail = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String status = null;
        String regionId = null;
        String region = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String facilityN = null;
        String facilityIc = null;
        String facilityNic = null;
        String facilityIew = null;
        String facilityNiew = null;
        String facilityIsw = null;
        String facilityNisw = null;
        String facilityIe = null;
        String facilityNie = null;
        String asnN = null;
        String asnLte = null;
        String asnLt = null;
        String asnGte = null;
        String asnGt = null;
        String latitudeN = null;
        String latitudeLte = null;
        String latitudeLt = null;
        String latitudeGte = null;
        String latitudeGt = null;
        String longitudeN = null;
        String longitudeLte = null;
        String longitudeLt = null;
        String longitudeGte = null;
        String longitudeGt = null;
        String contactNameN = null;
        String contactNameIc = null;
        String contactNameNic = null;
        String contactNameIew = null;
        String contactNameNiew = null;
        String contactNameIsw = null;
        String contactNameNisw = null;
        String contactNameIe = null;
        String contactNameNie = null;
        String contactPhoneN = null;
        String contactPhoneIc = null;
        String contactPhoneNic = null;
        String contactPhoneIew = null;
        String contactPhoneNiew = null;
        String contactPhoneIsw = null;
        String contactPhoneNisw = null;
        String contactPhoneIe = null;
        String contactPhoneNie = null;
        String contactEmailN = null;
        String contactEmailIc = null;
        String contactEmailNic = null;
        String contactEmailIew = null;
        String contactEmailNiew = null;
        String contactEmailIsw = null;
        String contactEmailNisw = null;
        String contactEmailIe = null;
        String contactEmailNie = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String statusN = null;
        String regionIdN = null;
        String regionN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimSitesList200Response response = api.dcimSitesList(id, name, slug, facility, asn, latitude, longitude, contactName, contactPhone, contactEmail, tenantGroupId, tenantGroup, tenantId, tenant, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, status, regionId, region, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, facilityN, facilityIc, facilityNic, facilityIew, facilityNiew, facilityIsw, facilityNisw, facilityIe, facilityNie, asnN, asnLte, asnLt, asnGte, asnGt, latitudeN, latitudeLte, latitudeLt, latitudeGte, latitudeGt, longitudeN, longitudeLte, longitudeLt, longitudeGte, longitudeGt, contactNameN, contactNameIc, contactNameNic, contactNameIew, contactNameNiew, contactNameIsw, contactNameNisw, contactNameIe, contactNameNie, contactPhoneN, contactPhoneIc, contactPhoneNic, contactPhoneIew, contactPhoneNiew, contactPhoneIsw, contactPhoneNisw, contactPhoneIe, contactPhoneNie, contactEmailN, contactEmailIc, contactEmailNic, contactEmailIew, contactEmailNiew, contactEmailIsw, contactEmailNisw, contactEmailIe, contactEmailNie, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, statusN, regionIdN, regionN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableSite writableSite = null;
        Site response = api.dcimSitesPartialUpdate(id, writableSite);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesReadTest() throws ApiException {
        Integer id = null;
        Site response = api.dcimSitesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimSitesUpdateTest() throws ApiException {
        Integer id = null;
        WritableSite writableSite = null;
        Site response = api.dcimSitesUpdate(id, writableSite);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisCreateTest() throws ApiException {
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisCreate(writableVirtualChassis);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisDeleteTest() throws ApiException {
        Integer id = null;
        api.dcimVirtualChassisDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisListTest() throws ApiException {
        String id = null;
        String domain = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String domainN = null;
        String domainIc = null;
        String domainNic = null;
        String domainIew = null;
        String domainNiew = null;
        String domainIsw = null;
        String domainNisw = null;
        String domainIe = null;
        String domainNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String tenantIdN = null;
        String tenantN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        DcimVirtualChassisList200Response response = api.dcimVirtualChassisList(id, domain, q, regionId, region, siteId, site, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, domainN, domainIc, domainNic, domainIew, domainNiew, domainIsw, domainNisw, domainIe, domainNie, regionIdN, regionN, siteIdN, siteN, tenantIdN, tenantN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisPartialUpdate(id, writableVirtualChassis);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisReadTest() throws ApiException {
        Integer id = null;
        VirtualChassis response = api.dcimVirtualChassisRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dcimVirtualChassisUpdateTest() throws ApiException {
        Integer id = null;
        WritableVirtualChassis writableVirtualChassis = null;
        VirtualChassis response = api.dcimVirtualChassisUpdate(id, writableVirtualChassis);
        // TODO: test validations
    }

}
