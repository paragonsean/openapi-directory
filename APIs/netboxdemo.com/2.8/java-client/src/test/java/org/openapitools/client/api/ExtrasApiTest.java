/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigContext;
import org.openapitools.client.model.ExportTemplate;
import org.openapitools.client.model.ExtrasConfigContextsList200Response;
import org.openapitools.client.model.ExtrasExportTemplatesList200Response;
import org.openapitools.client.model.ExtrasGraphsList200Response;
import org.openapitools.client.model.ExtrasImageAttachmentsList200Response;
import org.openapitools.client.model.ExtrasObjectChangesList200Response;
import org.openapitools.client.model.ExtrasTagsList200Response;
import org.openapitools.client.model.Graph;
import org.openapitools.client.model.ImageAttachment;
import org.openapitools.client.model.ObjectChange;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.WritableConfigContext;
import org.openapitools.client.model.WritableExportTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExtrasApi
 */
@Disabled
public class ExtrasApiTest {

    private final ExtrasApi api = new ExtrasApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsCreateTest() throws ApiException {
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsCreate(writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasConfigContextsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsListTest() throws ApiException {
        String id = null;
        String name = null;
        String isActive = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String roleId = null;
        String role = null;
        String platformId = null;
        String platform = null;
        String clusterGroupId = null;
        String clusterGroup = null;
        String clusterId = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String regionIdN = null;
        String regionN = null;
        String siteIdN = null;
        String siteN = null;
        String roleIdN = null;
        String roleN = null;
        String platformIdN = null;
        String platformN = null;
        String clusterGroupIdN = null;
        String clusterGroupN = null;
        String clusterIdN = null;
        String tenantGroupIdN = null;
        String tenantGroupN = null;
        String tenantIdN = null;
        String tenantN = null;
        String tagN = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasConfigContextsList200Response response = api.extrasConfigContextsList(id, name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, clusterGroupId, clusterGroup, clusterId, tenantGroupId, tenantGroup, tenantId, tenant, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, regionIdN, regionN, siteIdN, siteN, roleIdN, roleN, platformIdN, platformN, clusterGroupIdN, clusterGroupN, clusterIdN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, tagN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsPartialUpdate(id, writableConfigContext);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsReadTest() throws ApiException {
        Integer id = null;
        ConfigContext response = api.extrasConfigContextsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasConfigContextsUpdateTest() throws ApiException {
        Integer id = null;
        WritableConfigContext writableConfigContext = null;
        ConfigContext response = api.extrasConfigContextsUpdate(id, writableConfigContext);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldChoicesListTest() throws ApiException {
        api.extrasCustomFieldChoicesList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasCustomFieldChoicesReadTest() throws ApiException {
        String id = null;
        api.extrasCustomFieldChoicesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesCreateTest() throws ApiException {
        WritableExportTemplate writableExportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesCreate(writableExportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasExportTemplatesDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesListTest() throws ApiException {
        String id = null;
        String contentType = null;
        String name = null;
        String templateLanguage = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String contentTypeN = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String templateLanguageN = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasExportTemplatesList200Response response = api.extrasExportTemplatesList(id, contentType, name, templateLanguage, idN, idLte, idLt, idGte, idGt, contentTypeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableExportTemplate writableExportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesPartialUpdate(id, writableExportTemplate);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesReadTest() throws ApiException {
        Integer id = null;
        ExportTemplate response = api.extrasExportTemplatesRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasExportTemplatesUpdateTest() throws ApiException {
        Integer id = null;
        WritableExportTemplate writableExportTemplate = null;
        ExportTemplate response = api.extrasExportTemplatesUpdate(id, writableExportTemplate);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsCreateTest() throws ApiException {
        Graph graph = null;
        Graph response = api.extrasGraphsCreate(graph);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasGraphsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsListTest() throws ApiException {
        String id = null;
        String type = null;
        String name = null;
        String templateLanguage = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String typeN = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String templateLanguageN = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasGraphsList200Response response = api.extrasGraphsList(id, type, name, templateLanguage, idN, idLte, idLt, idGte, idGt, typeN, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, templateLanguageN, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsPartialUpdateTest() throws ApiException {
        Integer id = null;
        Graph graph = null;
        Graph response = api.extrasGraphsPartialUpdate(id, graph);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsReadTest() throws ApiException {
        Integer id = null;
        Graph response = api.extrasGraphsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasGraphsUpdateTest() throws ApiException {
        Integer id = null;
        Graph graph = null;
        Graph response = api.extrasGraphsUpdate(id, graph);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsCreateTest() throws ApiException {
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsCreate(imageAttachment);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasImageAttachmentsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        ExtrasImageAttachmentsList200Response response = api.extrasImageAttachmentsList(limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsPartialUpdateTest() throws ApiException {
        Integer id = null;
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsPartialUpdate(id, imageAttachment);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsReadTest() throws ApiException {
        Integer id = null;
        ImageAttachment response = api.extrasImageAttachmentsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasImageAttachmentsUpdateTest() throws ApiException {
        Integer id = null;
        ImageAttachment imageAttachment = null;
        ImageAttachment response = api.extrasImageAttachmentsUpdate(id, imageAttachment);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recent changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasObjectChangesListTest() throws ApiException {
        String id = null;
        String user = null;
        String userName = null;
        String requestId = null;
        String action = null;
        String changedObjectType = null;
        String changedObjectId = null;
        String objectRepr = null;
        String q = null;
        String time = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String userN = null;
        String userNameN = null;
        String userNameIc = null;
        String userNameNic = null;
        String userNameIew = null;
        String userNameNiew = null;
        String userNameIsw = null;
        String userNameNisw = null;
        String userNameIe = null;
        String userNameNie = null;
        String actionN = null;
        String changedObjectTypeN = null;
        String changedObjectIdN = null;
        String changedObjectIdLte = null;
        String changedObjectIdLt = null;
        String changedObjectIdGte = null;
        String changedObjectIdGt = null;
        String objectReprN = null;
        String objectReprIc = null;
        String objectReprNic = null;
        String objectReprIew = null;
        String objectReprNiew = null;
        String objectReprIsw = null;
        String objectReprNisw = null;
        String objectReprIe = null;
        String objectReprNie = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasObjectChangesList200Response response = api.extrasObjectChangesList(id, user, userName, requestId, action, changedObjectType, changedObjectId, objectRepr, q, time, idN, idLte, idLt, idGte, idGt, userN, userNameN, userNameIc, userNameNic, userNameIew, userNameNiew, userNameIsw, userNameNisw, userNameIe, userNameNie, actionN, changedObjectTypeN, changedObjectIdN, changedObjectIdLte, changedObjectIdLt, changedObjectIdGte, changedObjectIdGt, objectReprN, objectReprIc, objectReprNic, objectReprIew, objectReprNiew, objectReprIsw, objectReprNisw, objectReprIe, objectReprNie, limit, offset);
        // TODO: test validations
    }

    /**
     * Retrieve a list of recent changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasObjectChangesReadTest() throws ApiException {
        Integer id = null;
        ObjectChange response = api.extrasObjectChangesRead(id);
        // TODO: test validations
    }

    /**
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsListTest() throws ApiException {
        api.extrasReportsList();
        // TODO: test validations
    }

    /**
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsReadTest() throws ApiException {
        String id = null;
        api.extrasReportsRead(id);
        // TODO: test validations
    }

    /**
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasReportsRunTest() throws ApiException {
        String id = null;
        api.extrasReportsRun(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasScriptsListTest() throws ApiException {
        api.extrasScriptsList();
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasScriptsReadTest() throws ApiException {
        String id = null;
        api.extrasScriptsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsCreateTest() throws ApiException {
        Tag tag = null;
        Tag response = api.extrasTagsCreate(tag);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsDeleteTest() throws ApiException {
        Integer id = null;
        api.extrasTagsDelete(id);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String color = null;
        String q = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String colorN = null;
        String colorIc = null;
        String colorNic = null;
        String colorIew = null;
        String colorNiew = null;
        String colorIsw = null;
        String colorNisw = null;
        String colorIe = null;
        String colorNie = null;
        Integer limit = null;
        Integer offset = null;
        ExtrasTagsList200Response response = api.extrasTagsList(id, name, slug, color, q, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, colorN, colorIc, colorNic, colorIew, colorNiew, colorIsw, colorNisw, colorIe, colorNie, limit, offset);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsPartialUpdateTest() throws ApiException {
        Integer id = null;
        Tag tag = null;
        Tag response = api.extrasTagsPartialUpdate(id, tag);
        // TODO: test validations
    }

    /**
     * Call to super to allow for caching
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsReadTest() throws ApiException {
        Integer id = null;
        Tag response = api.extrasTagsRead(id);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extrasTagsUpdateTest() throws ApiException {
        Integer id = null;
        Tag tag = null;
        Tag response = api.extrasTagsUpdate(id, tag);
        // TODO: test validations
    }

}
