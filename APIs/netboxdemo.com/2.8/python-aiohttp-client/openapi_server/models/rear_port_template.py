# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device_type import NestedDeviceType
from openapi_server.models.type2 import Type2
from openapi_server import util


class RearPortTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: NestedDeviceType=None, id: int=None, name: str=None, positions: int=None, type: Type2=None):
        """RearPortTemplate - a model defined in OpenAPI

        :param device_type: The device_type of this RearPortTemplate.
        :param id: The id of this RearPortTemplate.
        :param name: The name of this RearPortTemplate.
        :param positions: The positions of this RearPortTemplate.
        :param type: The type of this RearPortTemplate.
        """
        self.openapi_types = {
            'device_type': NestedDeviceType,
            'id': int,
            'name': str,
            'positions': int,
            'type': Type2
        }

        self.attribute_map = {
            'device_type': 'device_type',
            'id': 'id',
            'name': 'name',
            'positions': 'positions',
            'type': 'type'
        }

        self._device_type = device_type
        self._id = id
        self._name = name
        self._positions = positions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RearPortTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RearPortTemplate of this RearPortTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this RearPortTemplate.


        :return: The device_type of this RearPortTemplate.
        :rtype: NestedDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this RearPortTemplate.


        :param device_type: The device_type of this RearPortTemplate.
        :type device_type: NestedDeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def id(self):
        """Gets the id of this RearPortTemplate.


        :return: The id of this RearPortTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RearPortTemplate.


        :param id: The id of this RearPortTemplate.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RearPortTemplate.


        :return: The name of this RearPortTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RearPortTemplate.


        :param name: The name of this RearPortTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def positions(self):
        """Gets the positions of this RearPortTemplate.


        :return: The positions of this RearPortTemplate.
        :rtype: int
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this RearPortTemplate.


        :param positions: The positions of this RearPortTemplate.
        :type positions: int
        """
        if positions is not None and positions > 64:
            raise ValueError("Invalid value for `positions`, must be a value less than or equal to `64`")
        if positions is not None and positions < 1:
            raise ValueError("Invalid value for `positions`, must be a value greater than or equal to `1`")

        self._positions = positions

    @property
    def type(self):
        """Gets the type of this RearPortTemplate.


        :return: The type of this RearPortTemplate.
        :rtype: Type2
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RearPortTemplate.


        :param type: The type of this RearPortTemplate.
        :type type: Type2
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
