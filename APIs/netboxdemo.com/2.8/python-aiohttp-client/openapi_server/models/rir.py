# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RIR(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_count: int=None, description: str=None, id: int=None, is_private: bool=None, name: str=None, slug: str=None):
        """RIR - a model defined in OpenAPI

        :param aggregate_count: The aggregate_count of this RIR.
        :param description: The description of this RIR.
        :param id: The id of this RIR.
        :param is_private: The is_private of this RIR.
        :param name: The name of this RIR.
        :param slug: The slug of this RIR.
        """
        self.openapi_types = {
            'aggregate_count': int,
            'description': str,
            'id': int,
            'is_private': bool,
            'name': str,
            'slug': str
        }

        self.attribute_map = {
            'aggregate_count': 'aggregate_count',
            'description': 'description',
            'id': 'id',
            'is_private': 'is_private',
            'name': 'name',
            'slug': 'slug'
        }

        self._aggregate_count = aggregate_count
        self._description = description
        self._id = id
        self._is_private = is_private
        self._name = name
        self._slug = slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RIR':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RIR of this RIR.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_count(self):
        """Gets the aggregate_count of this RIR.


        :return: The aggregate_count of this RIR.
        :rtype: int
        """
        return self._aggregate_count

    @aggregate_count.setter
    def aggregate_count(self, aggregate_count):
        """Sets the aggregate_count of this RIR.


        :param aggregate_count: The aggregate_count of this RIR.
        :type aggregate_count: int
        """

        self._aggregate_count = aggregate_count

    @property
    def description(self):
        """Gets the description of this RIR.


        :return: The description of this RIR.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RIR.


        :param description: The description of this RIR.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this RIR.


        :return: The id of this RIR.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RIR.


        :param id: The id of this RIR.
        :type id: int
        """

        self._id = id

    @property
    def is_private(self):
        """Gets the is_private of this RIR.

        IP space managed by this RIR is considered private

        :return: The is_private of this RIR.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this RIR.

        IP space managed by this RIR is considered private

        :param is_private: The is_private of this RIR.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def name(self):
        """Gets the name of this RIR.


        :return: The name of this RIR.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RIR.


        :param name: The name of this RIR.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this RIR.


        :return: The slug of this RIR.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RIR.


        :param slug: The slug of this RIR.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug
