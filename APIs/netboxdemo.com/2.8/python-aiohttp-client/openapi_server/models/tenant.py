# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tenant_group import NestedTenantGroup
import re
from openapi_server import util


class Tenant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit_count: int=None, cluster_count: int=None, comments: str=None, created: date=None, custom_fields: object=None, description: str=None, device_count: int=None, group: NestedTenantGroup=None, id: int=None, ipaddress_count: int=None, last_updated: datetime=None, name: str=None, prefix_count: int=None, rack_count: int=None, site_count: int=None, slug: str=None, tags: List[str]=None, virtualmachine_count: int=None, vlan_count: int=None, vrf_count: int=None):
        """Tenant - a model defined in OpenAPI

        :param circuit_count: The circuit_count of this Tenant.
        :param cluster_count: The cluster_count of this Tenant.
        :param comments: The comments of this Tenant.
        :param created: The created of this Tenant.
        :param custom_fields: The custom_fields of this Tenant.
        :param description: The description of this Tenant.
        :param device_count: The device_count of this Tenant.
        :param group: The group of this Tenant.
        :param id: The id of this Tenant.
        :param ipaddress_count: The ipaddress_count of this Tenant.
        :param last_updated: The last_updated of this Tenant.
        :param name: The name of this Tenant.
        :param prefix_count: The prefix_count of this Tenant.
        :param rack_count: The rack_count of this Tenant.
        :param site_count: The site_count of this Tenant.
        :param slug: The slug of this Tenant.
        :param tags: The tags of this Tenant.
        :param virtualmachine_count: The virtualmachine_count of this Tenant.
        :param vlan_count: The vlan_count of this Tenant.
        :param vrf_count: The vrf_count of this Tenant.
        """
        self.openapi_types = {
            'circuit_count': int,
            'cluster_count': int,
            'comments': str,
            'created': date,
            'custom_fields': object,
            'description': str,
            'device_count': int,
            'group': NestedTenantGroup,
            'id': int,
            'ipaddress_count': int,
            'last_updated': datetime,
            'name': str,
            'prefix_count': int,
            'rack_count': int,
            'site_count': int,
            'slug': str,
            'tags': List[str],
            'virtualmachine_count': int,
            'vlan_count': int,
            'vrf_count': int
        }

        self.attribute_map = {
            'circuit_count': 'circuit_count',
            'cluster_count': 'cluster_count',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device_count': 'device_count',
            'group': 'group',
            'id': 'id',
            'ipaddress_count': 'ipaddress_count',
            'last_updated': 'last_updated',
            'name': 'name',
            'prefix_count': 'prefix_count',
            'rack_count': 'rack_count',
            'site_count': 'site_count',
            'slug': 'slug',
            'tags': 'tags',
            'virtualmachine_count': 'virtualmachine_count',
            'vlan_count': 'vlan_count',
            'vrf_count': 'vrf_count'
        }

        self._circuit_count = circuit_count
        self._cluster_count = cluster_count
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device_count = device_count
        self._group = group
        self._id = id
        self._ipaddress_count = ipaddress_count
        self._last_updated = last_updated
        self._name = name
        self._prefix_count = prefix_count
        self._rack_count = rack_count
        self._site_count = site_count
        self._slug = slug
        self._tags = tags
        self._virtualmachine_count = virtualmachine_count
        self._vlan_count = vlan_count
        self._vrf_count = vrf_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tenant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tenant of this Tenant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit_count(self):
        """Gets the circuit_count of this Tenant.


        :return: The circuit_count of this Tenant.
        :rtype: int
        """
        return self._circuit_count

    @circuit_count.setter
    def circuit_count(self, circuit_count):
        """Sets the circuit_count of this Tenant.


        :param circuit_count: The circuit_count of this Tenant.
        :type circuit_count: int
        """

        self._circuit_count = circuit_count

    @property
    def cluster_count(self):
        """Gets the cluster_count of this Tenant.


        :return: The cluster_count of this Tenant.
        :rtype: int
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """Sets the cluster_count of this Tenant.


        :param cluster_count: The cluster_count of this Tenant.
        :type cluster_count: int
        """

        self._cluster_count = cluster_count

    @property
    def comments(self):
        """Gets the comments of this Tenant.


        :return: The comments of this Tenant.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Tenant.


        :param comments: The comments of this Tenant.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this Tenant.


        :return: The created of this Tenant.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Tenant.


        :param created: The created of this Tenant.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Tenant.


        :return: The custom_fields of this Tenant.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Tenant.


        :param custom_fields: The custom_fields of this Tenant.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Tenant.


        :return: The description of this Tenant.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tenant.


        :param description: The description of this Tenant.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_count(self):
        """Gets the device_count of this Tenant.


        :return: The device_count of this Tenant.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this Tenant.


        :param device_count: The device_count of this Tenant.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def group(self):
        """Gets the group of this Tenant.


        :return: The group of this Tenant.
        :rtype: NestedTenantGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Tenant.


        :param group: The group of this Tenant.
        :type group: NestedTenantGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Tenant.


        :return: The id of this Tenant.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenant.


        :param id: The id of this Tenant.
        :type id: int
        """

        self._id = id

    @property
    def ipaddress_count(self):
        """Gets the ipaddress_count of this Tenant.


        :return: The ipaddress_count of this Tenant.
        :rtype: int
        """
        return self._ipaddress_count

    @ipaddress_count.setter
    def ipaddress_count(self, ipaddress_count):
        """Sets the ipaddress_count of this Tenant.


        :param ipaddress_count: The ipaddress_count of this Tenant.
        :type ipaddress_count: int
        """

        self._ipaddress_count = ipaddress_count

    @property
    def last_updated(self):
        """Gets the last_updated of this Tenant.


        :return: The last_updated of this Tenant.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Tenant.


        :param last_updated: The last_updated of this Tenant.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Tenant.


        :return: The name of this Tenant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.


        :param name: The name of this Tenant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def prefix_count(self):
        """Gets the prefix_count of this Tenant.


        :return: The prefix_count of this Tenant.
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this Tenant.


        :param prefix_count: The prefix_count of this Tenant.
        :type prefix_count: int
        """

        self._prefix_count = prefix_count

    @property
    def rack_count(self):
        """Gets the rack_count of this Tenant.


        :return: The rack_count of this Tenant.
        :rtype: int
        """
        return self._rack_count

    @rack_count.setter
    def rack_count(self, rack_count):
        """Sets the rack_count of this Tenant.


        :param rack_count: The rack_count of this Tenant.
        :type rack_count: int
        """

        self._rack_count = rack_count

    @property
    def site_count(self):
        """Gets the site_count of this Tenant.


        :return: The site_count of this Tenant.
        :rtype: int
        """
        return self._site_count

    @site_count.setter
    def site_count(self, site_count):
        """Sets the site_count of this Tenant.


        :param site_count: The site_count of this Tenant.
        :type site_count: int
        """

        self._site_count = site_count

    @property
    def slug(self):
        """Gets the slug of this Tenant.


        :return: The slug of this Tenant.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Tenant.


        :param slug: The slug of this Tenant.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def tags(self):
        """Gets the tags of this Tenant.


        :return: The tags of this Tenant.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Tenant.


        :param tags: The tags of this Tenant.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def virtualmachine_count(self):
        """Gets the virtualmachine_count of this Tenant.


        :return: The virtualmachine_count of this Tenant.
        :rtype: int
        """
        return self._virtualmachine_count

    @virtualmachine_count.setter
    def virtualmachine_count(self, virtualmachine_count):
        """Sets the virtualmachine_count of this Tenant.


        :param virtualmachine_count: The virtualmachine_count of this Tenant.
        :type virtualmachine_count: int
        """

        self._virtualmachine_count = virtualmachine_count

    @property
    def vlan_count(self):
        """Gets the vlan_count of this Tenant.


        :return: The vlan_count of this Tenant.
        :rtype: int
        """
        return self._vlan_count

    @vlan_count.setter
    def vlan_count(self, vlan_count):
        """Sets the vlan_count of this Tenant.


        :param vlan_count: The vlan_count of this Tenant.
        :type vlan_count: int
        """

        self._vlan_count = vlan_count

    @property
    def vrf_count(self):
        """Gets the vrf_count of this Tenant.


        :return: The vrf_count of this Tenant.
        :rtype: int
        """
        return self._vrf_count

    @vrf_count.setter
    def vrf_count(self, vrf_count):
        """Sets the vrf_count of this Tenant.


        :param vrf_count: The vrf_count of this Tenant.
        :type vrf_count: int
        """

        self._vrf_count = vrf_count
