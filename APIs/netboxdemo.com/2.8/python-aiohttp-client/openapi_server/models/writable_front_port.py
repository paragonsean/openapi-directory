# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cable import NestedCable
from openapi_server import util


class WritableFrontPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: NestedCable=None, description: str=None, device: int=None, id: int=None, name: str=None, rear_port: int=None, rear_port_position: int=1, tags: List[str]=None, type: str=None):
        """WritableFrontPort - a model defined in OpenAPI

        :param cable: The cable of this WritableFrontPort.
        :param description: The description of this WritableFrontPort.
        :param device: The device of this WritableFrontPort.
        :param id: The id of this WritableFrontPort.
        :param name: The name of this WritableFrontPort.
        :param rear_port: The rear_port of this WritableFrontPort.
        :param rear_port_position: The rear_port_position of this WritableFrontPort.
        :param tags: The tags of this WritableFrontPort.
        :param type: The type of this WritableFrontPort.
        """
        self.openapi_types = {
            'cable': NestedCable,
            'description': str,
            'device': int,
            'id': int,
            'name': str,
            'rear_port': int,
            'rear_port_position': int,
            'tags': List[str],
            'type': str
        }

        self.attribute_map = {
            'cable': 'cable',
            'description': 'description',
            'device': 'device',
            'id': 'id',
            'name': 'name',
            'rear_port': 'rear_port',
            'rear_port_position': 'rear_port_position',
            'tags': 'tags',
            'type': 'type'
        }

        self._cable = cable
        self._description = description
        self._device = device
        self._id = id
        self._name = name
        self._rear_port = rear_port
        self._rear_port_position = rear_port_position
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableFrontPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableFrontPort of this WritableFrontPort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this WritableFrontPort.


        :return: The cable of this WritableFrontPort.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this WritableFrontPort.


        :param cable: The cable of this WritableFrontPort.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def description(self):
        """Gets the description of this WritableFrontPort.


        :return: The description of this WritableFrontPort.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableFrontPort.


        :param description: The description of this WritableFrontPort.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this WritableFrontPort.


        :return: The device of this WritableFrontPort.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this WritableFrontPort.


        :param device: The device of this WritableFrontPort.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def id(self):
        """Gets the id of this WritableFrontPort.


        :return: The id of this WritableFrontPort.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableFrontPort.


        :param id: The id of this WritableFrontPort.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritableFrontPort.


        :return: The name of this WritableFrontPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableFrontPort.


        :param name: The name of this WritableFrontPort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def rear_port(self):
        """Gets the rear_port of this WritableFrontPort.


        :return: The rear_port of this WritableFrontPort.
        :rtype: int
        """
        return self._rear_port

    @rear_port.setter
    def rear_port(self, rear_port):
        """Sets the rear_port of this WritableFrontPort.


        :param rear_port: The rear_port of this WritableFrontPort.
        :type rear_port: int
        """
        if rear_port is None:
            raise ValueError("Invalid value for `rear_port`, must not be `None`")

        self._rear_port = rear_port

    @property
    def rear_port_position(self):
        """Gets the rear_port_position of this WritableFrontPort.


        :return: The rear_port_position of this WritableFrontPort.
        :rtype: int
        """
        return self._rear_port_position

    @rear_port_position.setter
    def rear_port_position(self, rear_port_position):
        """Sets the rear_port_position of this WritableFrontPort.


        :param rear_port_position: The rear_port_position of this WritableFrontPort.
        :type rear_port_position: int
        """
        if rear_port_position is not None and rear_port_position > 64:
            raise ValueError("Invalid value for `rear_port_position`, must be a value less than or equal to `64`")
        if rear_port_position is not None and rear_port_position < 1:
            raise ValueError("Invalid value for `rear_port_position`, must be a value greater than or equal to `1`")

        self._rear_port_position = rear_port_position

    @property
    def tags(self):
        """Gets the tags of this WritableFrontPort.


        :return: The tags of this WritableFrontPort.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableFrontPort.


        :param tags: The tags of this WritableFrontPort.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this WritableFrontPort.


        :return: The type of this WritableFrontPort.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableFrontPort.


        :param type: The type of this WritableFrontPort.
        :type type: str
        """
        allowed_values = ["8p8c", "110-punch", "bnc", "mrj21", "fc", "lc", "lc-apc", "lsh", "lsh-apc", "mpo", "mtrj", "sc", "sc-apc", "st"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
