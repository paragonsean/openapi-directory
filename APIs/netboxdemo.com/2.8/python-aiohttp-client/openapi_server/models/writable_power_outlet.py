# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cable import NestedCable
from openapi_server import util


class WritablePowerOutlet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: NestedCable=None, connected_endpoint: Dict[str, str]=None, connected_endpoint_type: str=None, connection_status: bool=None, description: str=None, device: int=None, feed_leg: str=None, id: int=None, name: str=None, power_port: int=None, tags: List[str]=None, type: str=None):
        """WritablePowerOutlet - a model defined in OpenAPI

        :param cable: The cable of this WritablePowerOutlet.
        :param connected_endpoint: The connected_endpoint of this WritablePowerOutlet.
        :param connected_endpoint_type: The connected_endpoint_type of this WritablePowerOutlet.
        :param connection_status: The connection_status of this WritablePowerOutlet.
        :param description: The description of this WritablePowerOutlet.
        :param device: The device of this WritablePowerOutlet.
        :param feed_leg: The feed_leg of this WritablePowerOutlet.
        :param id: The id of this WritablePowerOutlet.
        :param name: The name of this WritablePowerOutlet.
        :param power_port: The power_port of this WritablePowerOutlet.
        :param tags: The tags of this WritablePowerOutlet.
        :param type: The type of this WritablePowerOutlet.
        """
        self.openapi_types = {
            'cable': NestedCable,
            'connected_endpoint': Dict[str, str],
            'connected_endpoint_type': str,
            'connection_status': bool,
            'description': str,
            'device': int,
            'feed_leg': str,
            'id': int,
            'name': str,
            'power_port': int,
            'tags': List[str],
            'type': str
        }

        self.attribute_map = {
            'cable': 'cable',
            'connected_endpoint': 'connected_endpoint',
            'connected_endpoint_type': 'connected_endpoint_type',
            'connection_status': 'connection_status',
            'description': 'description',
            'device': 'device',
            'feed_leg': 'feed_leg',
            'id': 'id',
            'name': 'name',
            'power_port': 'power_port',
            'tags': 'tags',
            'type': 'type'
        }

        self._cable = cable
        self._connected_endpoint = connected_endpoint
        self._connected_endpoint_type = connected_endpoint_type
        self._connection_status = connection_status
        self._description = description
        self._device = device
        self._feed_leg = feed_leg
        self._id = id
        self._name = name
        self._power_port = power_port
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePowerOutlet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePowerOutlet of this WritablePowerOutlet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this WritablePowerOutlet.


        :return: The cable of this WritablePowerOutlet.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this WritablePowerOutlet.


        :param cable: The cable of this WritablePowerOutlet.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def connected_endpoint(self):
        """Gets the connected_endpoint of this WritablePowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoint of this WritablePowerOutlet.
        :rtype: Dict[str, str]
        """
        return self._connected_endpoint

    @connected_endpoint.setter
    def connected_endpoint(self, connected_endpoint):
        """Sets the connected_endpoint of this WritablePowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoint: The connected_endpoint of this WritablePowerOutlet.
        :type connected_endpoint: Dict[str, str]
        """

        self._connected_endpoint = connected_endpoint

    @property
    def connected_endpoint_type(self):
        """Gets the connected_endpoint_type of this WritablePowerOutlet.


        :return: The connected_endpoint_type of this WritablePowerOutlet.
        :rtype: str
        """
        return self._connected_endpoint_type

    @connected_endpoint_type.setter
    def connected_endpoint_type(self, connected_endpoint_type):
        """Sets the connected_endpoint_type of this WritablePowerOutlet.


        :param connected_endpoint_type: The connected_endpoint_type of this WritablePowerOutlet.
        :type connected_endpoint_type: str
        """

        self._connected_endpoint_type = connected_endpoint_type

    @property
    def connection_status(self):
        """Gets the connection_status of this WritablePowerOutlet.


        :return: The connection_status of this WritablePowerOutlet.
        :rtype: bool
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this WritablePowerOutlet.


        :param connection_status: The connection_status of this WritablePowerOutlet.
        :type connection_status: bool
        """

        self._connection_status = connection_status

    @property
    def description(self):
        """Gets the description of this WritablePowerOutlet.


        :return: The description of this WritablePowerOutlet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritablePowerOutlet.


        :param description: The description of this WritablePowerOutlet.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this WritablePowerOutlet.


        :return: The device of this WritablePowerOutlet.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this WritablePowerOutlet.


        :param device: The device of this WritablePowerOutlet.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def feed_leg(self):
        """Gets the feed_leg of this WritablePowerOutlet.

        Phase (for three-phase feeds)

        :return: The feed_leg of this WritablePowerOutlet.
        :rtype: str
        """
        return self._feed_leg

    @feed_leg.setter
    def feed_leg(self, feed_leg):
        """Sets the feed_leg of this WritablePowerOutlet.

        Phase (for three-phase feeds)

        :param feed_leg: The feed_leg of this WritablePowerOutlet.
        :type feed_leg: str
        """
        allowed_values = ["A", "B", "C"]  # noqa: E501
        if feed_leg not in allowed_values:
            raise ValueError(
                "Invalid value for `feed_leg` ({0}), must be one of {1}"
                .format(feed_leg, allowed_values)
            )

        self._feed_leg = feed_leg

    @property
    def id(self):
        """Gets the id of this WritablePowerOutlet.


        :return: The id of this WritablePowerOutlet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePowerOutlet.


        :param id: The id of this WritablePowerOutlet.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritablePowerOutlet.


        :return: The name of this WritablePowerOutlet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePowerOutlet.


        :param name: The name of this WritablePowerOutlet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def power_port(self):
        """Gets the power_port of this WritablePowerOutlet.


        :return: The power_port of this WritablePowerOutlet.
        :rtype: int
        """
        return self._power_port

    @power_port.setter
    def power_port(self, power_port):
        """Sets the power_port of this WritablePowerOutlet.


        :param power_port: The power_port of this WritablePowerOutlet.
        :type power_port: int
        """

        self._power_port = power_port

    @property
    def tags(self):
        """Gets the tags of this WritablePowerOutlet.


        :return: The tags of this WritablePowerOutlet.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritablePowerOutlet.


        :param tags: The tags of this WritablePowerOutlet.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this WritablePowerOutlet.

        Physical port type

        :return: The type of this WritablePowerOutlet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritablePowerOutlet.

        Physical port type

        :param type: The type of this WritablePowerOutlet.
        :type type: str
        """
        allowed_values = ["iec-60320-c5", "iec-60320-c7", "iec-60320-c13", "iec-60320-c15", "iec-60320-c19", "iec-60309-p-n-e-4h", "iec-60309-p-n-e-6h", "iec-60309-p-n-e-9h", "iec-60309-2p-e-4h", "iec-60309-2p-e-6h", "iec-60309-2p-e-9h", "iec-60309-3p-e-4h", "iec-60309-3p-e-6h", "iec-60309-3p-e-9h", "iec-60309-3p-n-e-4h", "iec-60309-3p-n-e-6h", "iec-60309-3p-n-e-9h", "nema-1-15r", "nema-5-15r", "nema-5-20r", "nema-5-30r", "nema-5-50r", "nema-6-15r", "nema-6-20r", "nema-6-30r", "nema-6-50r", "nema-10-30r", "nema-10-50r", "nema-14-20r", "nema-14-30r", "nema-14-50r", "nema-14-60r", "nema-l1-15r", "nema-l5-15r", "nema-l5-20r", "nema-l5-30r", "nema-l5-50r", "nema-l6-15r", "nema-l6-20r", "nema-l6-30r", "nema-l6-50r", "nema-l10-30r", "nema-l14-20r", "nema-l14-30r", "nema-l14-50r", "nema-l14-60r", "nema-l21-20r", "nema-l21-30r", "CS6360C", "CS6364C", "CS8164C", "CS8264C", "CS8364C", "CS8464C", "ita-e", "ita-f", "ita-g", "ita-h", "ita-i", "ita-j", "ita-k", "ita-l", "ita-m", "ita-n", "ita-o", "hdot-cx"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
