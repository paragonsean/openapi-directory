# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_language import TemplateLanguage
from openapi_server import util


class ExportTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, description: str=None, file_extension: str=None, id: int=None, mime_type: str=None, name: str=None, template_code: str=None, template_language: TemplateLanguage=None):
        """ExportTemplate - a model defined in OpenAPI

        :param content_type: The content_type of this ExportTemplate.
        :param description: The description of this ExportTemplate.
        :param file_extension: The file_extension of this ExportTemplate.
        :param id: The id of this ExportTemplate.
        :param mime_type: The mime_type of this ExportTemplate.
        :param name: The name of this ExportTemplate.
        :param template_code: The template_code of this ExportTemplate.
        :param template_language: The template_language of this ExportTemplate.
        """
        self.openapi_types = {
            'content_type': str,
            'description': str,
            'file_extension': str,
            'id': int,
            'mime_type': str,
            'name': str,
            'template_code': str,
            'template_language': TemplateLanguage
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'description': 'description',
            'file_extension': 'file_extension',
            'id': 'id',
            'mime_type': 'mime_type',
            'name': 'name',
            'template_code': 'template_code',
            'template_language': 'template_language'
        }

        self._content_type = content_type
        self._description = description
        self._file_extension = file_extension
        self._id = id
        self._mime_type = mime_type
        self._name = name
        self._template_code = template_code
        self._template_language = template_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportTemplate of this ExportTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this ExportTemplate.


        :return: The content_type of this ExportTemplate.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ExportTemplate.


        :param content_type: The content_type of this ExportTemplate.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def description(self):
        """Gets the description of this ExportTemplate.


        :return: The description of this ExportTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExportTemplate.


        :param description: The description of this ExportTemplate.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def file_extension(self):
        """Gets the file_extension of this ExportTemplate.

        Extension to append to the rendered filename

        :return: The file_extension of this ExportTemplate.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ExportTemplate.

        Extension to append to the rendered filename

        :param file_extension: The file_extension of this ExportTemplate.
        :type file_extension: str
        """
        if file_extension is not None and len(file_extension) > 15:
            raise ValueError("Invalid value for `file_extension`, length must be less than or equal to `15`")

        self._file_extension = file_extension

    @property
    def id(self):
        """Gets the id of this ExportTemplate.


        :return: The id of this ExportTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportTemplate.


        :param id: The id of this ExportTemplate.
        :type id: int
        """

        self._id = id

    @property
    def mime_type(self):
        """Gets the mime_type of this ExportTemplate.

        Defaults to <code>text/plain</code>

        :return: The mime_type of this ExportTemplate.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this ExportTemplate.

        Defaults to <code>text/plain</code>

        :param mime_type: The mime_type of this ExportTemplate.
        :type mime_type: str
        """
        if mime_type is not None and len(mime_type) > 50:
            raise ValueError("Invalid value for `mime_type`, length must be less than or equal to `50`")

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this ExportTemplate.


        :return: The name of this ExportTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExportTemplate.


        :param name: The name of this ExportTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def template_code(self):
        """Gets the template_code of this ExportTemplate.

        The list of objects being exported is passed as a context variable named <code>queryset</code>.

        :return: The template_code of this ExportTemplate.
        :rtype: str
        """
        return self._template_code

    @template_code.setter
    def template_code(self, template_code):
        """Sets the template_code of this ExportTemplate.

        The list of objects being exported is passed as a context variable named <code>queryset</code>.

        :param template_code: The template_code of this ExportTemplate.
        :type template_code: str
        """
        if template_code is None:
            raise ValueError("Invalid value for `template_code`, must not be `None`")
        if template_code is not None and len(template_code) < 1:
            raise ValueError("Invalid value for `template_code`, length must be greater than or equal to `1`")

        self._template_code = template_code

    @property
    def template_language(self):
        """Gets the template_language of this ExportTemplate.


        :return: The template_language of this ExportTemplate.
        :rtype: TemplateLanguage
        """
        return self._template_language

    @template_language.setter
    def template_language(self, template_language):
        """Sets the template_language of this ExportTemplate.


        :param template_language: The template_language of this ExportTemplate.
        :type template_language: TemplateLanguage
        """

        self._template_language = template_language
