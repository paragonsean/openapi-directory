# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableRackReservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: date=None, description: str=None, id: int=None, rack: int=None, tenant: int=None, units: List[int]=None, user: int=None):
        """WritableRackReservation - a model defined in OpenAPI

        :param created: The created of this WritableRackReservation.
        :param description: The description of this WritableRackReservation.
        :param id: The id of this WritableRackReservation.
        :param rack: The rack of this WritableRackReservation.
        :param tenant: The tenant of this WritableRackReservation.
        :param units: The units of this WritableRackReservation.
        :param user: The user of this WritableRackReservation.
        """
        self.openapi_types = {
            'created': date,
            'description': str,
            'id': int,
            'rack': int,
            'tenant': int,
            'units': List[int],
            'user': int
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'id': 'id',
            'rack': 'rack',
            'tenant': 'tenant',
            'units': 'units',
            'user': 'user'
        }

        self._created = created
        self._description = description
        self._id = id
        self._rack = rack
        self._tenant = tenant
        self._units = units
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableRackReservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableRackReservation of this WritableRackReservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this WritableRackReservation.


        :return: The created of this WritableRackReservation.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableRackReservation.


        :param created: The created of this WritableRackReservation.
        :type created: date
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this WritableRackReservation.


        :return: The description of this WritableRackReservation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableRackReservation.


        :param description: The description of this WritableRackReservation.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this WritableRackReservation.


        :return: The id of this WritableRackReservation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableRackReservation.


        :param id: The id of this WritableRackReservation.
        :type id: int
        """

        self._id = id

    @property
    def rack(self):
        """Gets the rack of this WritableRackReservation.


        :return: The rack of this WritableRackReservation.
        :rtype: int
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """Sets the rack of this WritableRackReservation.


        :param rack: The rack of this WritableRackReservation.
        :type rack: int
        """
        if rack is None:
            raise ValueError("Invalid value for `rack`, must not be `None`")

        self._rack = rack

    @property
    def tenant(self):
        """Gets the tenant of this WritableRackReservation.


        :return: The tenant of this WritableRackReservation.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableRackReservation.


        :param tenant: The tenant of this WritableRackReservation.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def units(self):
        """Gets the units of this WritableRackReservation.


        :return: The units of this WritableRackReservation.
        :rtype: List[int]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this WritableRackReservation.


        :param units: The units of this WritableRackReservation.
        :type units: List[int]
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")

        self._units = units

    @property
    def user(self):
        """Gets the user of this WritableRackReservation.


        :return: The user of this WritableRackReservation.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this WritableRackReservation.


        :param user: The user of this WritableRackReservation.
        :type user: int
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
