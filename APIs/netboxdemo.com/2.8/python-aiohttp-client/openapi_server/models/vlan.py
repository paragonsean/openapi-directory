# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_role import NestedRole
from openapi_server.models.nested_site import NestedSite
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.nested_vlan_group import NestedVLANGroup
from openapi_server.models.status8 import Status8
from openapi_server import util


class VLAN(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: date=None, custom_fields: object=None, description: str=None, display_name: str=None, group: NestedVLANGroup=None, id: int=None, last_updated: datetime=None, name: str=None, prefix_count: int=None, role: NestedRole=None, site: NestedSite=None, status: Status8=None, tags: List[str]=None, tenant: NestedTenant=None, vid: int=None):
        """VLAN - a model defined in OpenAPI

        :param created: The created of this VLAN.
        :param custom_fields: The custom_fields of this VLAN.
        :param description: The description of this VLAN.
        :param display_name: The display_name of this VLAN.
        :param group: The group of this VLAN.
        :param id: The id of this VLAN.
        :param last_updated: The last_updated of this VLAN.
        :param name: The name of this VLAN.
        :param prefix_count: The prefix_count of this VLAN.
        :param role: The role of this VLAN.
        :param site: The site of this VLAN.
        :param status: The status of this VLAN.
        :param tags: The tags of this VLAN.
        :param tenant: The tenant of this VLAN.
        :param vid: The vid of this VLAN.
        """
        self.openapi_types = {
            'created': date,
            'custom_fields': object,
            'description': str,
            'display_name': str,
            'group': NestedVLANGroup,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'prefix_count': int,
            'role': NestedRole,
            'site': NestedSite,
            'status': Status8,
            'tags': List[str],
            'tenant': NestedTenant,
            'vid': int
        }

        self.attribute_map = {
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display_name': 'display_name',
            'group': 'group',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'prefix_count': 'prefix_count',
            'role': 'role',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'vid': 'vid'
        }

        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display_name = display_name
        self._group = group
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._prefix_count = prefix_count
        self._role = role
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._vid = vid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VLAN':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VLAN of this VLAN.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this VLAN.


        :return: The created of this VLAN.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VLAN.


        :param created: The created of this VLAN.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this VLAN.


        :return: The custom_fields of this VLAN.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this VLAN.


        :param custom_fields: The custom_fields of this VLAN.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this VLAN.


        :return: The description of this VLAN.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VLAN.


        :param description: The description of this VLAN.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this VLAN.


        :return: The display_name of this VLAN.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VLAN.


        :param display_name: The display_name of this VLAN.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def group(self):
        """Gets the group of this VLAN.


        :return: The group of this VLAN.
        :rtype: NestedVLANGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this VLAN.


        :param group: The group of this VLAN.
        :type group: NestedVLANGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this VLAN.


        :return: The id of this VLAN.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VLAN.


        :param id: The id of this VLAN.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this VLAN.


        :return: The last_updated of this VLAN.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VLAN.


        :param last_updated: The last_updated of this VLAN.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this VLAN.


        :return: The name of this VLAN.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VLAN.


        :param name: The name of this VLAN.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def prefix_count(self):
        """Gets the prefix_count of this VLAN.


        :return: The prefix_count of this VLAN.
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this VLAN.


        :param prefix_count: The prefix_count of this VLAN.
        :type prefix_count: int
        """

        self._prefix_count = prefix_count

    @property
    def role(self):
        """Gets the role of this VLAN.


        :return: The role of this VLAN.
        :rtype: NestedRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this VLAN.


        :param role: The role of this VLAN.
        :type role: NestedRole
        """

        self._role = role

    @property
    def site(self):
        """Gets the site of this VLAN.


        :return: The site of this VLAN.
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this VLAN.


        :param site: The site of this VLAN.
        :type site: NestedSite
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this VLAN.


        :return: The status of this VLAN.
        :rtype: Status8
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VLAN.


        :param status: The status of this VLAN.
        :type status: Status8
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this VLAN.


        :return: The tags of this VLAN.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VLAN.


        :param tags: The tags of this VLAN.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this VLAN.


        :return: The tenant of this VLAN.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this VLAN.


        :param tenant: The tenant of this VLAN.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def vid(self):
        """Gets the vid of this VLAN.


        :return: The vid of this VLAN.
        :rtype: int
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """Sets the vid of this VLAN.


        :param vid: The vid of this VLAN.
        :type vid: int
        """
        if vid is None:
            raise ValueError("Invalid value for `vid`, must not be `None`")
        if vid is not None and vid > 4094:
            raise ValueError("Invalid value for `vid`, must be a value less than or equal to `4094`")
        if vid is not None and vid < 1:
            raise ValueError("Invalid value for `vid`, must be a value greater than or equal to `1`")

        self._vid = vid
