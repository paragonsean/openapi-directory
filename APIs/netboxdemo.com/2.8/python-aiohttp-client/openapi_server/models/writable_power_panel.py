# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritablePowerPanel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, powerfeed_count: int=None, rack_group: int=None, site: int=None):
        """WritablePowerPanel - a model defined in OpenAPI

        :param id: The id of this WritablePowerPanel.
        :param name: The name of this WritablePowerPanel.
        :param powerfeed_count: The powerfeed_count of this WritablePowerPanel.
        :param rack_group: The rack_group of this WritablePowerPanel.
        :param site: The site of this WritablePowerPanel.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'powerfeed_count': int,
            'rack_group': int,
            'site': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'powerfeed_count': 'powerfeed_count',
            'rack_group': 'rack_group',
            'site': 'site'
        }

        self._id = id
        self._name = name
        self._powerfeed_count = powerfeed_count
        self._rack_group = rack_group
        self._site = site

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePowerPanel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePowerPanel of this WritablePowerPanel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this WritablePowerPanel.


        :return: The id of this WritablePowerPanel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePowerPanel.


        :param id: The id of this WritablePowerPanel.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritablePowerPanel.


        :return: The name of this WritablePowerPanel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePowerPanel.


        :param name: The name of this WritablePowerPanel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def powerfeed_count(self):
        """Gets the powerfeed_count of this WritablePowerPanel.


        :return: The powerfeed_count of this WritablePowerPanel.
        :rtype: int
        """
        return self._powerfeed_count

    @powerfeed_count.setter
    def powerfeed_count(self, powerfeed_count):
        """Sets the powerfeed_count of this WritablePowerPanel.


        :param powerfeed_count: The powerfeed_count of this WritablePowerPanel.
        :type powerfeed_count: int
        """

        self._powerfeed_count = powerfeed_count

    @property
    def rack_group(self):
        """Gets the rack_group of this WritablePowerPanel.


        :return: The rack_group of this WritablePowerPanel.
        :rtype: int
        """
        return self._rack_group

    @rack_group.setter
    def rack_group(self, rack_group):
        """Sets the rack_group of this WritablePowerPanel.


        :param rack_group: The rack_group of this WritablePowerPanel.
        :type rack_group: int
        """

        self._rack_group = rack_group

    @property
    def site(self):
        """Gets the site of this WritablePowerPanel.


        :return: The site of this WritablePowerPanel.
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritablePowerPanel.


        :param site: The site of this WritablePowerPanel.
        :type site: int
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")

        self._site = site
