# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WritableDeviceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, created: date=None, custom_fields: object=None, device_count: int=None, display_name: str=None, front_image: str=None, id: int=None, is_full_depth: bool=None, last_updated: datetime=None, manufacturer: int=None, model: str=None, part_number: str=None, rear_image: str=None, slug: str=None, subdevice_role: str=None, tags: List[str]=None, u_height: int=None):
        """WritableDeviceType - a model defined in OpenAPI

        :param comments: The comments of this WritableDeviceType.
        :param created: The created of this WritableDeviceType.
        :param custom_fields: The custom_fields of this WritableDeviceType.
        :param device_count: The device_count of this WritableDeviceType.
        :param display_name: The display_name of this WritableDeviceType.
        :param front_image: The front_image of this WritableDeviceType.
        :param id: The id of this WritableDeviceType.
        :param is_full_depth: The is_full_depth of this WritableDeviceType.
        :param last_updated: The last_updated of this WritableDeviceType.
        :param manufacturer: The manufacturer of this WritableDeviceType.
        :param model: The model of this WritableDeviceType.
        :param part_number: The part_number of this WritableDeviceType.
        :param rear_image: The rear_image of this WritableDeviceType.
        :param slug: The slug of this WritableDeviceType.
        :param subdevice_role: The subdevice_role of this WritableDeviceType.
        :param tags: The tags of this WritableDeviceType.
        :param u_height: The u_height of this WritableDeviceType.
        """
        self.openapi_types = {
            'comments': str,
            'created': date,
            'custom_fields': object,
            'device_count': int,
            'display_name': str,
            'front_image': str,
            'id': int,
            'is_full_depth': bool,
            'last_updated': datetime,
            'manufacturer': int,
            'model': str,
            'part_number': str,
            'rear_image': str,
            'slug': str,
            'subdevice_role': str,
            'tags': List[str],
            'u_height': int
        }

        self.attribute_map = {
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'device_count': 'device_count',
            'display_name': 'display_name',
            'front_image': 'front_image',
            'id': 'id',
            'is_full_depth': 'is_full_depth',
            'last_updated': 'last_updated',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'part_number': 'part_number',
            'rear_image': 'rear_image',
            'slug': 'slug',
            'subdevice_role': 'subdevice_role',
            'tags': 'tags',
            'u_height': 'u_height'
        }

        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._device_count = device_count
        self._display_name = display_name
        self._front_image = front_image
        self._id = id
        self._is_full_depth = is_full_depth
        self._last_updated = last_updated
        self._manufacturer = manufacturer
        self._model = model
        self._part_number = part_number
        self._rear_image = rear_image
        self._slug = slug
        self._subdevice_role = subdevice_role
        self._tags = tags
        self._u_height = u_height

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableDeviceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableDeviceType of this WritableDeviceType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this WritableDeviceType.


        :return: The comments of this WritableDeviceType.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableDeviceType.


        :param comments: The comments of this WritableDeviceType.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritableDeviceType.


        :return: The created of this WritableDeviceType.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableDeviceType.


        :param created: The created of this WritableDeviceType.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableDeviceType.


        :return: The custom_fields of this WritableDeviceType.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableDeviceType.


        :param custom_fields: The custom_fields of this WritableDeviceType.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def device_count(self):
        """Gets the device_count of this WritableDeviceType.


        :return: The device_count of this WritableDeviceType.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this WritableDeviceType.


        :param device_count: The device_count of this WritableDeviceType.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def display_name(self):
        """Gets the display_name of this WritableDeviceType.


        :return: The display_name of this WritableDeviceType.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WritableDeviceType.


        :param display_name: The display_name of this WritableDeviceType.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def front_image(self):
        """Gets the front_image of this WritableDeviceType.


        :return: The front_image of this WritableDeviceType.
        :rtype: str
        """
        return self._front_image

    @front_image.setter
    def front_image(self, front_image):
        """Sets the front_image of this WritableDeviceType.


        :param front_image: The front_image of this WritableDeviceType.
        :type front_image: str
        """

        self._front_image = front_image

    @property
    def id(self):
        """Gets the id of this WritableDeviceType.


        :return: The id of this WritableDeviceType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableDeviceType.


        :param id: The id of this WritableDeviceType.
        :type id: int
        """

        self._id = id

    @property
    def is_full_depth(self):
        """Gets the is_full_depth of this WritableDeviceType.

        Device consumes both front and rear rack faces

        :return: The is_full_depth of this WritableDeviceType.
        :rtype: bool
        """
        return self._is_full_depth

    @is_full_depth.setter
    def is_full_depth(self, is_full_depth):
        """Sets the is_full_depth of this WritableDeviceType.

        Device consumes both front and rear rack faces

        :param is_full_depth: The is_full_depth of this WritableDeviceType.
        :type is_full_depth: bool
        """

        self._is_full_depth = is_full_depth

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableDeviceType.


        :return: The last_updated of this WritableDeviceType.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableDeviceType.


        :param last_updated: The last_updated of this WritableDeviceType.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def manufacturer(self):
        """Gets the manufacturer of this WritableDeviceType.


        :return: The manufacturer of this WritableDeviceType.
        :rtype: int
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this WritableDeviceType.


        :param manufacturer: The manufacturer of this WritableDeviceType.
        :type manufacturer: int
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this WritableDeviceType.


        :return: The model of this WritableDeviceType.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this WritableDeviceType.


        :param model: The model of this WritableDeviceType.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")
        if model is not None and len(model) > 50:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `50`")
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")

        self._model = model

    @property
    def part_number(self):
        """Gets the part_number of this WritableDeviceType.

        Discrete part number (optional)

        :return: The part_number of this WritableDeviceType.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this WritableDeviceType.

        Discrete part number (optional)

        :param part_number: The part_number of this WritableDeviceType.
        :type part_number: str
        """
        if part_number is not None and len(part_number) > 50:
            raise ValueError("Invalid value for `part_number`, length must be less than or equal to `50`")

        self._part_number = part_number

    @property
    def rear_image(self):
        """Gets the rear_image of this WritableDeviceType.


        :return: The rear_image of this WritableDeviceType.
        :rtype: str
        """
        return self._rear_image

    @rear_image.setter
    def rear_image(self, rear_image):
        """Sets the rear_image of this WritableDeviceType.


        :param rear_image: The rear_image of this WritableDeviceType.
        :type rear_image: str
        """

        self._rear_image = rear_image

    @property
    def slug(self):
        """Gets the slug of this WritableDeviceType.


        :return: The slug of this WritableDeviceType.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this WritableDeviceType.


        :param slug: The slug of this WritableDeviceType.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def subdevice_role(self):
        """Gets the subdevice_role of this WritableDeviceType.

        Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.

        :return: The subdevice_role of this WritableDeviceType.
        :rtype: str
        """
        return self._subdevice_role

    @subdevice_role.setter
    def subdevice_role(self, subdevice_role):
        """Sets the subdevice_role of this WritableDeviceType.

        Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.

        :param subdevice_role: The subdevice_role of this WritableDeviceType.
        :type subdevice_role: str
        """
        allowed_values = ["parent", "child"]  # noqa: E501
        if subdevice_role not in allowed_values:
            raise ValueError(
                "Invalid value for `subdevice_role` ({0}), must be one of {1}"
                .format(subdevice_role, allowed_values)
            )

        self._subdevice_role = subdevice_role

    @property
    def tags(self):
        """Gets the tags of this WritableDeviceType.


        :return: The tags of this WritableDeviceType.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableDeviceType.


        :param tags: The tags of this WritableDeviceType.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def u_height(self):
        """Gets the u_height of this WritableDeviceType.


        :return: The u_height of this WritableDeviceType.
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """Sets the u_height of this WritableDeviceType.


        :param u_height: The u_height of this WritableDeviceType.
        :type u_height: int
        """
        if u_height is not None and u_height > 32767:
            raise ValueError("Invalid value for `u_height`, must be a value less than or equal to `32767`")
        if u_height is not None and u_height < 0:
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `0`")

        self._u_height = u_height
