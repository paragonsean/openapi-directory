# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritablePowerOutletTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: int=None, feed_leg: str=None, id: int=None, name: str=None, power_port: int=None, type: str=None):
        """WritablePowerOutletTemplate - a model defined in OpenAPI

        :param device_type: The device_type of this WritablePowerOutletTemplate.
        :param feed_leg: The feed_leg of this WritablePowerOutletTemplate.
        :param id: The id of this WritablePowerOutletTemplate.
        :param name: The name of this WritablePowerOutletTemplate.
        :param power_port: The power_port of this WritablePowerOutletTemplate.
        :param type: The type of this WritablePowerOutletTemplate.
        """
        self.openapi_types = {
            'device_type': int,
            'feed_leg': str,
            'id': int,
            'name': str,
            'power_port': int,
            'type': str
        }

        self.attribute_map = {
            'device_type': 'device_type',
            'feed_leg': 'feed_leg',
            'id': 'id',
            'name': 'name',
            'power_port': 'power_port',
            'type': 'type'
        }

        self._device_type = device_type
        self._feed_leg = feed_leg
        self._id = id
        self._name = name
        self._power_port = power_port
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePowerOutletTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePowerOutletTemplate of this WritablePowerOutletTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this WritablePowerOutletTemplate.


        :return: The device_type of this WritablePowerOutletTemplate.
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WritablePowerOutletTemplate.


        :param device_type: The device_type of this WritablePowerOutletTemplate.
        :type device_type: int
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def feed_leg(self):
        """Gets the feed_leg of this WritablePowerOutletTemplate.

        Phase (for three-phase feeds)

        :return: The feed_leg of this WritablePowerOutletTemplate.
        :rtype: str
        """
        return self._feed_leg

    @feed_leg.setter
    def feed_leg(self, feed_leg):
        """Sets the feed_leg of this WritablePowerOutletTemplate.

        Phase (for three-phase feeds)

        :param feed_leg: The feed_leg of this WritablePowerOutletTemplate.
        :type feed_leg: str
        """
        allowed_values = ["A", "B", "C"]  # noqa: E501
        if feed_leg not in allowed_values:
            raise ValueError(
                "Invalid value for `feed_leg` ({0}), must be one of {1}"
                .format(feed_leg, allowed_values)
            )

        self._feed_leg = feed_leg

    @property
    def id(self):
        """Gets the id of this WritablePowerOutletTemplate.


        :return: The id of this WritablePowerOutletTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePowerOutletTemplate.


        :param id: The id of this WritablePowerOutletTemplate.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WritablePowerOutletTemplate.


        :return: The name of this WritablePowerOutletTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePowerOutletTemplate.


        :param name: The name of this WritablePowerOutletTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def power_port(self):
        """Gets the power_port of this WritablePowerOutletTemplate.


        :return: The power_port of this WritablePowerOutletTemplate.
        :rtype: int
        """
        return self._power_port

    @power_port.setter
    def power_port(self, power_port):
        """Sets the power_port of this WritablePowerOutletTemplate.


        :param power_port: The power_port of this WritablePowerOutletTemplate.
        :type power_port: int
        """

        self._power_port = power_port

    @property
    def type(self):
        """Gets the type of this WritablePowerOutletTemplate.


        :return: The type of this WritablePowerOutletTemplate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritablePowerOutletTemplate.


        :param type: The type of this WritablePowerOutletTemplate.
        :type type: str
        """
        allowed_values = ["iec-60320-c5", "iec-60320-c7", "iec-60320-c13", "iec-60320-c15", "iec-60320-c19", "iec-60309-p-n-e-4h", "iec-60309-p-n-e-6h", "iec-60309-p-n-e-9h", "iec-60309-2p-e-4h", "iec-60309-2p-e-6h", "iec-60309-2p-e-9h", "iec-60309-3p-e-4h", "iec-60309-3p-e-6h", "iec-60309-3p-e-9h", "iec-60309-3p-n-e-4h", "iec-60309-3p-n-e-6h", "iec-60309-3p-n-e-9h", "nema-1-15r", "nema-5-15r", "nema-5-20r", "nema-5-30r", "nema-5-50r", "nema-6-15r", "nema-6-20r", "nema-6-30r", "nema-6-50r", "nema-10-30r", "nema-10-50r", "nema-14-20r", "nema-14-30r", "nema-14-50r", "nema-14-60r", "nema-l1-15r", "nema-l5-15r", "nema-l5-20r", "nema-l5-30r", "nema-l5-50r", "nema-l6-15r", "nema-l6-20r", "nema-l6-30r", "nema-l6-50r", "nema-l10-30r", "nema-l14-20r", "nema-l14-30r", "nema-l14-50r", "nema-l14-60r", "nema-l21-20r", "nema-l21-30r", "CS6360C", "CS6364C", "CS8164C", "CS8264C", "CS8364C", "CS8464C", "ita-e", "ita-f", "ita-g", "ita-h", "ita-i", "ita-j", "ita-k", "ita-l", "ita-m", "ita-n", "ita-o", "hdot-cx"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
