# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cable import NestedCable
from openapi_server import util


class WritableDeviceInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: NestedCable=None, connected_endpoint: Dict[str, str]=None, connected_endpoint_type: str=None, connection_status: bool=None, count_ipaddresses: int=None, description: str=None, device: int=None, enabled: bool=None, id: int=None, lag: int=None, mac_address: str=None, mgmt_only: bool=None, mode: str=None, mtu: int=None, name: str=None, tagged_vlans: list[int]=None, tags: List[str]=None, type: str=None, untagged_vlan: int=None):
        """WritableDeviceInterface - a model defined in OpenAPI

        :param cable: The cable of this WritableDeviceInterface.
        :param connected_endpoint: The connected_endpoint of this WritableDeviceInterface.
        :param connected_endpoint_type: The connected_endpoint_type of this WritableDeviceInterface.
        :param connection_status: The connection_status of this WritableDeviceInterface.
        :param count_ipaddresses: The count_ipaddresses of this WritableDeviceInterface.
        :param description: The description of this WritableDeviceInterface.
        :param device: The device of this WritableDeviceInterface.
        :param enabled: The enabled of this WritableDeviceInterface.
        :param id: The id of this WritableDeviceInterface.
        :param lag: The lag of this WritableDeviceInterface.
        :param mac_address: The mac_address of this WritableDeviceInterface.
        :param mgmt_only: The mgmt_only of this WritableDeviceInterface.
        :param mode: The mode of this WritableDeviceInterface.
        :param mtu: The mtu of this WritableDeviceInterface.
        :param name: The name of this WritableDeviceInterface.
        :param tagged_vlans: The tagged_vlans of this WritableDeviceInterface.
        :param tags: The tags of this WritableDeviceInterface.
        :param type: The type of this WritableDeviceInterface.
        :param untagged_vlan: The untagged_vlan of this WritableDeviceInterface.
        """
        self.openapi_types = {
            'cable': NestedCable,
            'connected_endpoint': Dict[str, str],
            'connected_endpoint_type': str,
            'connection_status': bool,
            'count_ipaddresses': int,
            'description': str,
            'device': int,
            'enabled': bool,
            'id': int,
            'lag': int,
            'mac_address': str,
            'mgmt_only': bool,
            'mode': str,
            'mtu': int,
            'name': str,
            'tagged_vlans': list[int],
            'tags': List[str],
            'type': str,
            'untagged_vlan': int
        }

        self.attribute_map = {
            'cable': 'cable',
            'connected_endpoint': 'connected_endpoint',
            'connected_endpoint_type': 'connected_endpoint_type',
            'connection_status': 'connection_status',
            'count_ipaddresses': 'count_ipaddresses',
            'description': 'description',
            'device': 'device',
            'enabled': 'enabled',
            'id': 'id',
            'lag': 'lag',
            'mac_address': 'mac_address',
            'mgmt_only': 'mgmt_only',
            'mode': 'mode',
            'mtu': 'mtu',
            'name': 'name',
            'tagged_vlans': 'tagged_vlans',
            'tags': 'tags',
            'type': 'type',
            'untagged_vlan': 'untagged_vlan'
        }

        self._cable = cable
        self._connected_endpoint = connected_endpoint
        self._connected_endpoint_type = connected_endpoint_type
        self._connection_status = connection_status
        self._count_ipaddresses = count_ipaddresses
        self._description = description
        self._device = device
        self._enabled = enabled
        self._id = id
        self._lag = lag
        self._mac_address = mac_address
        self._mgmt_only = mgmt_only
        self._mode = mode
        self._mtu = mtu
        self._name = name
        self._tagged_vlans = tagged_vlans
        self._tags = tags
        self._type = type
        self._untagged_vlan = untagged_vlan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableDeviceInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableDeviceInterface of this WritableDeviceInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this WritableDeviceInterface.


        :return: The cable of this WritableDeviceInterface.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this WritableDeviceInterface.


        :param cable: The cable of this WritableDeviceInterface.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def connected_endpoint(self):
        """Gets the connected_endpoint of this WritableDeviceInterface.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoint of this WritableDeviceInterface.
        :rtype: Dict[str, str]
        """
        return self._connected_endpoint

    @connected_endpoint.setter
    def connected_endpoint(self, connected_endpoint):
        """Sets the connected_endpoint of this WritableDeviceInterface.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoint: The connected_endpoint of this WritableDeviceInterface.
        :type connected_endpoint: Dict[str, str]
        """

        self._connected_endpoint = connected_endpoint

    @property
    def connected_endpoint_type(self):
        """Gets the connected_endpoint_type of this WritableDeviceInterface.


        :return: The connected_endpoint_type of this WritableDeviceInterface.
        :rtype: str
        """
        return self._connected_endpoint_type

    @connected_endpoint_type.setter
    def connected_endpoint_type(self, connected_endpoint_type):
        """Sets the connected_endpoint_type of this WritableDeviceInterface.


        :param connected_endpoint_type: The connected_endpoint_type of this WritableDeviceInterface.
        :type connected_endpoint_type: str
        """

        self._connected_endpoint_type = connected_endpoint_type

    @property
    def connection_status(self):
        """Gets the connection_status of this WritableDeviceInterface.


        :return: The connection_status of this WritableDeviceInterface.
        :rtype: bool
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this WritableDeviceInterface.


        :param connection_status: The connection_status of this WritableDeviceInterface.
        :type connection_status: bool
        """

        self._connection_status = connection_status

    @property
    def count_ipaddresses(self):
        """Gets the count_ipaddresses of this WritableDeviceInterface.


        :return: The count_ipaddresses of this WritableDeviceInterface.
        :rtype: int
        """
        return self._count_ipaddresses

    @count_ipaddresses.setter
    def count_ipaddresses(self, count_ipaddresses):
        """Sets the count_ipaddresses of this WritableDeviceInterface.


        :param count_ipaddresses: The count_ipaddresses of this WritableDeviceInterface.
        :type count_ipaddresses: int
        """

        self._count_ipaddresses = count_ipaddresses

    @property
    def description(self):
        """Gets the description of this WritableDeviceInterface.


        :return: The description of this WritableDeviceInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableDeviceInterface.


        :param description: The description of this WritableDeviceInterface.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this WritableDeviceInterface.


        :return: The device of this WritableDeviceInterface.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this WritableDeviceInterface.


        :param device: The device of this WritableDeviceInterface.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def enabled(self):
        """Gets the enabled of this WritableDeviceInterface.


        :return: The enabled of this WritableDeviceInterface.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WritableDeviceInterface.


        :param enabled: The enabled of this WritableDeviceInterface.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this WritableDeviceInterface.


        :return: The id of this WritableDeviceInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableDeviceInterface.


        :param id: The id of this WritableDeviceInterface.
        :type id: int
        """

        self._id = id

    @property
    def lag(self):
        """Gets the lag of this WritableDeviceInterface.


        :return: The lag of this WritableDeviceInterface.
        :rtype: int
        """
        return self._lag

    @lag.setter
    def lag(self, lag):
        """Sets the lag of this WritableDeviceInterface.


        :param lag: The lag of this WritableDeviceInterface.
        :type lag: int
        """

        self._lag = lag

    @property
    def mac_address(self):
        """Gets the mac_address of this WritableDeviceInterface.


        :return: The mac_address of this WritableDeviceInterface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this WritableDeviceInterface.


        :param mac_address: The mac_address of this WritableDeviceInterface.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this WritableDeviceInterface.

        This interface is used only for out-of-band management

        :return: The mgmt_only of this WritableDeviceInterface.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this WritableDeviceInterface.

        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this WritableDeviceInterface.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def mode(self):
        """Gets the mode of this WritableDeviceInterface.


        :return: The mode of this WritableDeviceInterface.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this WritableDeviceInterface.


        :param mode: The mode of this WritableDeviceInterface.
        :type mode: str
        """
        allowed_values = ["access", "tagged", "tagged-all"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def mtu(self):
        """Gets the mtu of this WritableDeviceInterface.


        :return: The mtu of this WritableDeviceInterface.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this WritableDeviceInterface.


        :param mtu: The mtu of this WritableDeviceInterface.
        :type mtu: int
        """
        if mtu is not None and mtu > 65536:
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `65536`")
        if mtu is not None and mtu < 1:
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1`")

        self._mtu = mtu

    @property
    def name(self):
        """Gets the name of this WritableDeviceInterface.


        :return: The name of this WritableDeviceInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableDeviceInterface.


        :param name: The name of this WritableDeviceInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def tagged_vlans(self):
        """Gets the tagged_vlans of this WritableDeviceInterface.


        :return: The tagged_vlans of this WritableDeviceInterface.
        :rtype: list[int]
        """
        return self._tagged_vlans

    @tagged_vlans.setter
    def tagged_vlans(self, tagged_vlans):
        """Sets the tagged_vlans of this WritableDeviceInterface.


        :param tagged_vlans: The tagged_vlans of this WritableDeviceInterface.
        :type tagged_vlans: list[int]
        """

        self._tagged_vlans = tagged_vlans

    @property
    def tags(self):
        """Gets the tags of this WritableDeviceInterface.


        :return: The tags of this WritableDeviceInterface.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableDeviceInterface.


        :param tags: The tags of this WritableDeviceInterface.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this WritableDeviceInterface.


        :return: The type of this WritableDeviceInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableDeviceInterface.


        :param type: The type of this WritableDeviceInterface.
        :type type: str
        """
        allowed_values = ["virtual", "lag", "100base-tx", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "128gfc-sfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def untagged_vlan(self):
        """Gets the untagged_vlan of this WritableDeviceInterface.


        :return: The untagged_vlan of this WritableDeviceInterface.
        :rtype: int
        """
        return self._untagged_vlan

    @untagged_vlan.setter
    def untagged_vlan(self, untagged_vlan):
        """Sets the untagged_vlan of this WritableDeviceInterface.


        :param untagged_vlan: The untagged_vlan of this WritableDeviceInterface.
        :type untagged_vlan: int
        """

        self._untagged_vlan = untagged_vlan
