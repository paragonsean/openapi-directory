# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableRack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_tag: str=None, comments: str=None, created: date=None, custom_fields: object=None, desc_units: bool=None, device_count: int=None, display_name: str=None, facility_id: str=None, group: int=None, id: int=None, last_updated: datetime=None, name: str=None, outer_depth: int=None, outer_unit: str=None, outer_width: int=None, powerfeed_count: int=None, role: int=None, serial: str=None, site: int=None, status: str=None, tags: List[str]=None, tenant: int=None, type: str=None, u_height: int=None, width: int=None):
        """WritableRack - a model defined in OpenAPI

        :param asset_tag: The asset_tag of this WritableRack.
        :param comments: The comments of this WritableRack.
        :param created: The created of this WritableRack.
        :param custom_fields: The custom_fields of this WritableRack.
        :param desc_units: The desc_units of this WritableRack.
        :param device_count: The device_count of this WritableRack.
        :param display_name: The display_name of this WritableRack.
        :param facility_id: The facility_id of this WritableRack.
        :param group: The group of this WritableRack.
        :param id: The id of this WritableRack.
        :param last_updated: The last_updated of this WritableRack.
        :param name: The name of this WritableRack.
        :param outer_depth: The outer_depth of this WritableRack.
        :param outer_unit: The outer_unit of this WritableRack.
        :param outer_width: The outer_width of this WritableRack.
        :param powerfeed_count: The powerfeed_count of this WritableRack.
        :param role: The role of this WritableRack.
        :param serial: The serial of this WritableRack.
        :param site: The site of this WritableRack.
        :param status: The status of this WritableRack.
        :param tags: The tags of this WritableRack.
        :param tenant: The tenant of this WritableRack.
        :param type: The type of this WritableRack.
        :param u_height: The u_height of this WritableRack.
        :param width: The width of this WritableRack.
        """
        self.openapi_types = {
            'asset_tag': str,
            'comments': str,
            'created': date,
            'custom_fields': object,
            'desc_units': bool,
            'device_count': int,
            'display_name': str,
            'facility_id': str,
            'group': int,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'outer_depth': int,
            'outer_unit': str,
            'outer_width': int,
            'powerfeed_count': int,
            'role': int,
            'serial': str,
            'site': int,
            'status': str,
            'tags': List[str],
            'tenant': int,
            'type': str,
            'u_height': int,
            'width': int
        }

        self.attribute_map = {
            'asset_tag': 'asset_tag',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'desc_units': 'desc_units',
            'device_count': 'device_count',
            'display_name': 'display_name',
            'facility_id': 'facility_id',
            'group': 'group',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'outer_depth': 'outer_depth',
            'outer_unit': 'outer_unit',
            'outer_width': 'outer_width',
            'powerfeed_count': 'powerfeed_count',
            'role': 'role',
            'serial': 'serial',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'type': 'type',
            'u_height': 'u_height',
            'width': 'width'
        }

        self._asset_tag = asset_tag
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._desc_units = desc_units
        self._device_count = device_count
        self._display_name = display_name
        self._facility_id = facility_id
        self._group = group
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._outer_depth = outer_depth
        self._outer_unit = outer_unit
        self._outer_width = outer_width
        self._powerfeed_count = powerfeed_count
        self._role = role
        self._serial = serial
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._type = type
        self._u_height = u_height
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableRack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableRack of this WritableRack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_tag(self):
        """Gets the asset_tag of this WritableRack.

        A unique tag used to identify this rack

        :return: The asset_tag of this WritableRack.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this WritableRack.

        A unique tag used to identify this rack

        :param asset_tag: The asset_tag of this WritableRack.
        :type asset_tag: str
        """
        if asset_tag is not None and len(asset_tag) > 50:
            raise ValueError("Invalid value for `asset_tag`, length must be less than or equal to `50`")

        self._asset_tag = asset_tag

    @property
    def comments(self):
        """Gets the comments of this WritableRack.


        :return: The comments of this WritableRack.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableRack.


        :param comments: The comments of this WritableRack.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritableRack.


        :return: The created of this WritableRack.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableRack.


        :param created: The created of this WritableRack.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableRack.


        :return: The custom_fields of this WritableRack.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableRack.


        :param custom_fields: The custom_fields of this WritableRack.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def desc_units(self):
        """Gets the desc_units of this WritableRack.

        Units are numbered top-to-bottom

        :return: The desc_units of this WritableRack.
        :rtype: bool
        """
        return self._desc_units

    @desc_units.setter
    def desc_units(self, desc_units):
        """Sets the desc_units of this WritableRack.

        Units are numbered top-to-bottom

        :param desc_units: The desc_units of this WritableRack.
        :type desc_units: bool
        """

        self._desc_units = desc_units

    @property
    def device_count(self):
        """Gets the device_count of this WritableRack.


        :return: The device_count of this WritableRack.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this WritableRack.


        :param device_count: The device_count of this WritableRack.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def display_name(self):
        """Gets the display_name of this WritableRack.


        :return: The display_name of this WritableRack.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WritableRack.


        :param display_name: The display_name of this WritableRack.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def facility_id(self):
        """Gets the facility_id of this WritableRack.

        Locally-assigned identifier

        :return: The facility_id of this WritableRack.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this WritableRack.

        Locally-assigned identifier

        :param facility_id: The facility_id of this WritableRack.
        :type facility_id: str
        """
        if facility_id is not None and len(facility_id) > 50:
            raise ValueError("Invalid value for `facility_id`, length must be less than or equal to `50`")

        self._facility_id = facility_id

    @property
    def group(self):
        """Gets the group of this WritableRack.

        Assigned group

        :return: The group of this WritableRack.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this WritableRack.

        Assigned group

        :param group: The group of this WritableRack.
        :type group: int
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this WritableRack.


        :return: The id of this WritableRack.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableRack.


        :param id: The id of this WritableRack.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableRack.


        :return: The last_updated of this WritableRack.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableRack.


        :param last_updated: The last_updated of this WritableRack.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this WritableRack.


        :return: The name of this WritableRack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableRack.


        :param name: The name of this WritableRack.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def outer_depth(self):
        """Gets the outer_depth of this WritableRack.

        Outer dimension of rack (depth)

        :return: The outer_depth of this WritableRack.
        :rtype: int
        """
        return self._outer_depth

    @outer_depth.setter
    def outer_depth(self, outer_depth):
        """Sets the outer_depth of this WritableRack.

        Outer dimension of rack (depth)

        :param outer_depth: The outer_depth of this WritableRack.
        :type outer_depth: int
        """
        if outer_depth is not None and outer_depth > 32767:
            raise ValueError("Invalid value for `outer_depth`, must be a value less than or equal to `32767`")
        if outer_depth is not None and outer_depth < 0:
            raise ValueError("Invalid value for `outer_depth`, must be a value greater than or equal to `0`")

        self._outer_depth = outer_depth

    @property
    def outer_unit(self):
        """Gets the outer_unit of this WritableRack.


        :return: The outer_unit of this WritableRack.
        :rtype: str
        """
        return self._outer_unit

    @outer_unit.setter
    def outer_unit(self, outer_unit):
        """Sets the outer_unit of this WritableRack.


        :param outer_unit: The outer_unit of this WritableRack.
        :type outer_unit: str
        """
        allowed_values = ["mm", "in"]  # noqa: E501
        if outer_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `outer_unit` ({0}), must be one of {1}"
                .format(outer_unit, allowed_values)
            )

        self._outer_unit = outer_unit

    @property
    def outer_width(self):
        """Gets the outer_width of this WritableRack.

        Outer dimension of rack (width)

        :return: The outer_width of this WritableRack.
        :rtype: int
        """
        return self._outer_width

    @outer_width.setter
    def outer_width(self, outer_width):
        """Sets the outer_width of this WritableRack.

        Outer dimension of rack (width)

        :param outer_width: The outer_width of this WritableRack.
        :type outer_width: int
        """
        if outer_width is not None and outer_width > 32767:
            raise ValueError("Invalid value for `outer_width`, must be a value less than or equal to `32767`")
        if outer_width is not None and outer_width < 0:
            raise ValueError("Invalid value for `outer_width`, must be a value greater than or equal to `0`")

        self._outer_width = outer_width

    @property
    def powerfeed_count(self):
        """Gets the powerfeed_count of this WritableRack.


        :return: The powerfeed_count of this WritableRack.
        :rtype: int
        """
        return self._powerfeed_count

    @powerfeed_count.setter
    def powerfeed_count(self, powerfeed_count):
        """Sets the powerfeed_count of this WritableRack.


        :param powerfeed_count: The powerfeed_count of this WritableRack.
        :type powerfeed_count: int
        """

        self._powerfeed_count = powerfeed_count

    @property
    def role(self):
        """Gets the role of this WritableRack.

        Functional role

        :return: The role of this WritableRack.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableRack.

        Functional role

        :param role: The role of this WritableRack.
        :type role: int
        """

        self._role = role

    @property
    def serial(self):
        """Gets the serial of this WritableRack.


        :return: The serial of this WritableRack.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this WritableRack.


        :param serial: The serial of this WritableRack.
        :type serial: str
        """
        if serial is not None and len(serial) > 50:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `50`")

        self._serial = serial

    @property
    def site(self):
        """Gets the site of this WritableRack.


        :return: The site of this WritableRack.
        :rtype: int
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this WritableRack.


        :param site: The site of this WritableRack.
        :type site: int
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")

        self._site = site

    @property
    def status(self):
        """Gets the status of this WritableRack.


        :return: The status of this WritableRack.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableRack.


        :param status: The status of this WritableRack.
        :type status: str
        """
        allowed_values = ["reserved", "available", "planned", "active", "deprecated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableRack.


        :return: The tags of this WritableRack.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableRack.


        :param tags: The tags of this WritableRack.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableRack.


        :return: The tenant of this WritableRack.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableRack.


        :param tenant: The tenant of this WritableRack.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def type(self):
        """Gets the type of this WritableRack.


        :return: The type of this WritableRack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableRack.


        :param type: The type of this WritableRack.
        :type type: str
        """
        allowed_values = ["2-post-frame", "4-post-frame", "4-post-cabinet", "wall-frame", "wall-cabinet"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def u_height(self):
        """Gets the u_height of this WritableRack.

        Height in rack units

        :return: The u_height of this WritableRack.
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """Sets the u_height of this WritableRack.

        Height in rack units

        :param u_height: The u_height of this WritableRack.
        :type u_height: int
        """
        if u_height is not None and u_height > 100:
            raise ValueError("Invalid value for `u_height`, must be a value less than or equal to `100`")
        if u_height is not None and u_height < 1:
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `1`")

        self._u_height = u_height

    @property
    def width(self):
        """Gets the width of this WritableRack.

        Rail-to-rail width

        :return: The width of this WritableRack.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this WritableRack.

        Rail-to-rail width

        :param width: The width of this WritableRack.
        :type width: int
        """
        allowed_values = [10, 19, 21, 23]  # noqa: E501
        if width not in allowed_values:
            raise ValueError(
                "Invalid value for `width` ({0}), must be one of {1}"
                .format(width, allowed_values)
            )

        self._width = width
