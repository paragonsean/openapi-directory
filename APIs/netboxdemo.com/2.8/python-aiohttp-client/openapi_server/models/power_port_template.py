# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device_type import NestedDeviceType
from openapi_server.models.type5 import Type5
from openapi_server import util


class PowerPortTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_draw: int=None, device_type: NestedDeviceType=None, id: int=None, maximum_draw: int=None, name: str=None, type: Type5=None):
        """PowerPortTemplate - a model defined in OpenAPI

        :param allocated_draw: The allocated_draw of this PowerPortTemplate.
        :param device_type: The device_type of this PowerPortTemplate.
        :param id: The id of this PowerPortTemplate.
        :param maximum_draw: The maximum_draw of this PowerPortTemplate.
        :param name: The name of this PowerPortTemplate.
        :param type: The type of this PowerPortTemplate.
        """
        self.openapi_types = {
            'allocated_draw': int,
            'device_type': NestedDeviceType,
            'id': int,
            'maximum_draw': int,
            'name': str,
            'type': Type5
        }

        self.attribute_map = {
            'allocated_draw': 'allocated_draw',
            'device_type': 'device_type',
            'id': 'id',
            'maximum_draw': 'maximum_draw',
            'name': 'name',
            'type': 'type'
        }

        self._allocated_draw = allocated_draw
        self._device_type = device_type
        self._id = id
        self._maximum_draw = maximum_draw
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PowerPortTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PowerPortTemplate of this PowerPortTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_draw(self):
        """Gets the allocated_draw of this PowerPortTemplate.

        Allocated power draw (watts)

        :return: The allocated_draw of this PowerPortTemplate.
        :rtype: int
        """
        return self._allocated_draw

    @allocated_draw.setter
    def allocated_draw(self, allocated_draw):
        """Sets the allocated_draw of this PowerPortTemplate.

        Allocated power draw (watts)

        :param allocated_draw: The allocated_draw of this PowerPortTemplate.
        :type allocated_draw: int
        """
        if allocated_draw is not None and allocated_draw > 32767:
            raise ValueError("Invalid value for `allocated_draw`, must be a value less than or equal to `32767`")
        if allocated_draw is not None and allocated_draw < 1:
            raise ValueError("Invalid value for `allocated_draw`, must be a value greater than or equal to `1`")

        self._allocated_draw = allocated_draw

    @property
    def device_type(self):
        """Gets the device_type of this PowerPortTemplate.


        :return: The device_type of this PowerPortTemplate.
        :rtype: NestedDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this PowerPortTemplate.


        :param device_type: The device_type of this PowerPortTemplate.
        :type device_type: NestedDeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def id(self):
        """Gets the id of this PowerPortTemplate.


        :return: The id of this PowerPortTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PowerPortTemplate.


        :param id: The id of this PowerPortTemplate.
        :type id: int
        """

        self._id = id

    @property
    def maximum_draw(self):
        """Gets the maximum_draw of this PowerPortTemplate.

        Maximum power draw (watts)

        :return: The maximum_draw of this PowerPortTemplate.
        :rtype: int
        """
        return self._maximum_draw

    @maximum_draw.setter
    def maximum_draw(self, maximum_draw):
        """Sets the maximum_draw of this PowerPortTemplate.

        Maximum power draw (watts)

        :param maximum_draw: The maximum_draw of this PowerPortTemplate.
        :type maximum_draw: int
        """
        if maximum_draw is not None and maximum_draw > 32767:
            raise ValueError("Invalid value for `maximum_draw`, must be a value less than or equal to `32767`")
        if maximum_draw is not None and maximum_draw < 1:
            raise ValueError("Invalid value for `maximum_draw`, must be a value greater than or equal to `1`")

        self._maximum_draw = maximum_draw

    @property
    def name(self):
        """Gets the name of this PowerPortTemplate.


        :return: The name of this PowerPortTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerPortTemplate.


        :param name: The name of this PowerPortTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this PowerPortTemplate.


        :return: The type of this PowerPortTemplate.
        :rtype: Type5
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PowerPortTemplate.


        :param type: The type of this PowerPortTemplate.
        :type type: Type5
        """

        self._type = type
