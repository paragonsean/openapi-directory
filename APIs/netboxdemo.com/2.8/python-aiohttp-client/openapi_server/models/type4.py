# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Type4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, value: str=None):
        """Type4 - a model defined in OpenAPI

        :param label: The label of this Type4.
        :param value: The value of this Type4.
        """
        self.openapi_types = {
            'label': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value'
        }

        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type_4 of this Type4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Type4.


        :return: The label of this Type4.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Type4.


        :param label: The label of this Type4.
        :type label: str
        """
        allowed_values = ["C5", "C7", "C13", "C15", "C19", "P+N+E 4H", "P+N+E 6H", "P+N+E 9H", "2P+E 4H", "2P+E 6H", "2P+E 9H", "3P+E 4H", "3P+E 6H", "3P+E 9H", "3P+N+E 4H", "3P+N+E 6H", "3P+N+E 9H", "NEMA 1-15R", "NEMA 5-15R", "NEMA 5-20R", "NEMA 5-30R", "NEMA 5-50R", "NEMA 6-15R", "NEMA 6-20R", "NEMA 6-30R", "NEMA 6-50R", "NEMA 10-30R", "NEMA 10-50R", "NEMA 14-20R", "NEMA 14-30R", "NEMA 14-50R", "NEMA 14-60R", "NEMA L1-15R", "NEMA L5-15R", "NEMA L5-20R", "NEMA L5-30R", "NEMA L5-50R", "NEMA L6-15R", "NEMA L6-20R", "NEMA L6-30R", "NEMA L6-50R", "NEMA L10-30R", "NEMA L14-20R", "NEMA L14-30R", "NEMA L14-50R", "NEMA L14-60R", "NEMA L21-20R", "NEMA L21-30R", "CS6360C", "CS6364C", "CS8164C", "CS8264C", "CS8364C", "CS8464C", "ITA Type E (CEE7/5)", "ITA Type F (CEE7/3)", "ITA Type G (BS 1363)", "ITA Type H", "ITA Type I", "ITA Type J", "ITA Type K", "ITA Type L (CEI 23-50)", "ITA Type M (BS 546)", "ITA Type N", "ITA Type O", "HDOT Cx"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this Type4.


        :return: The value of this Type4.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Type4.


        :param value: The value of this Type4.
        :type value: str
        """
        allowed_values = ["iec-60320-c5", "iec-60320-c7", "iec-60320-c13", "iec-60320-c15", "iec-60320-c19", "iec-60309-p-n-e-4h", "iec-60309-p-n-e-6h", "iec-60309-p-n-e-9h", "iec-60309-2p-e-4h", "iec-60309-2p-e-6h", "iec-60309-2p-e-9h", "iec-60309-3p-e-4h", "iec-60309-3p-e-6h", "iec-60309-3p-e-9h", "iec-60309-3p-n-e-4h", "iec-60309-3p-n-e-6h", "iec-60309-3p-n-e-9h", "nema-1-15r", "nema-5-15r", "nema-5-20r", "nema-5-30r", "nema-5-50r", "nema-6-15r", "nema-6-20r", "nema-6-30r", "nema-6-50r", "nema-10-30r", "nema-10-50r", "nema-14-20r", "nema-14-30r", "nema-14-50r", "nema-14-60r", "nema-l1-15r", "nema-l5-15r", "nema-l5-20r", "nema-l5-30r", "nema-l5-50r", "nema-l6-15r", "nema-l6-20r", "nema-l6-30r", "nema-l6-50r", "nema-l10-30r", "nema-l14-20r", "nema-l14-30r", "nema-l14-50r", "nema-l14-60r", "nema-l21-20r", "nema-l21-30r", "CS6360C", "CS6364C", "CS8164C", "CS8264C", "CS8364C", "CS8464C", "ita-e", "ita-f", "ita-g", "ita-h", "ita-i", "ita-j", "ita-k", "ita-l", "ita-m", "ita-n", "ita-o", "hdot-cx"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
