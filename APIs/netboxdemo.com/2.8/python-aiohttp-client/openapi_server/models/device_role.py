# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeviceRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, description: str=None, device_count: int=None, id: int=None, name: str=None, slug: str=None, virtualmachine_count: int=None, vm_role: bool=None):
        """DeviceRole - a model defined in OpenAPI

        :param color: The color of this DeviceRole.
        :param description: The description of this DeviceRole.
        :param device_count: The device_count of this DeviceRole.
        :param id: The id of this DeviceRole.
        :param name: The name of this DeviceRole.
        :param slug: The slug of this DeviceRole.
        :param virtualmachine_count: The virtualmachine_count of this DeviceRole.
        :param vm_role: The vm_role of this DeviceRole.
        """
        self.openapi_types = {
            'color': str,
            'description': str,
            'device_count': int,
            'id': int,
            'name': str,
            'slug': str,
            'virtualmachine_count': int,
            'vm_role': bool
        }

        self.attribute_map = {
            'color': 'color',
            'description': 'description',
            'device_count': 'device_count',
            'id': 'id',
            'name': 'name',
            'slug': 'slug',
            'virtualmachine_count': 'virtualmachine_count',
            'vm_role': 'vm_role'
        }

        self._color = color
        self._description = description
        self._device_count = device_count
        self._id = id
        self._name = name
        self._slug = slug
        self._virtualmachine_count = virtualmachine_count
        self._vm_role = vm_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRole of this DeviceRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this DeviceRole.


        :return: The color of this DeviceRole.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DeviceRole.


        :param color: The color of this DeviceRole.
        :type color: str
        """
        if color is not None and len(color) > 6:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `6`")
        if color is not None and len(color) < 1:
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `1`")
        if color is not None and not re.search(r'^[0-9a-f]{6}$', color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `/^[0-9a-f]{6}$/`")

        self._color = color

    @property
    def description(self):
        """Gets the description of this DeviceRole.


        :return: The description of this DeviceRole.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceRole.


        :param description: The description of this DeviceRole.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_count(self):
        """Gets the device_count of this DeviceRole.


        :return: The device_count of this DeviceRole.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this DeviceRole.


        :param device_count: The device_count of this DeviceRole.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def id(self):
        """Gets the id of this DeviceRole.


        :return: The id of this DeviceRole.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceRole.


        :param id: The id of this DeviceRole.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeviceRole.


        :return: The name of this DeviceRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceRole.


        :param name: The name of this DeviceRole.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this DeviceRole.


        :return: The slug of this DeviceRole.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DeviceRole.


        :param slug: The slug of this DeviceRole.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def virtualmachine_count(self):
        """Gets the virtualmachine_count of this DeviceRole.


        :return: The virtualmachine_count of this DeviceRole.
        :rtype: int
        """
        return self._virtualmachine_count

    @virtualmachine_count.setter
    def virtualmachine_count(self, virtualmachine_count):
        """Sets the virtualmachine_count of this DeviceRole.


        :param virtualmachine_count: The virtualmachine_count of this DeviceRole.
        :type virtualmachine_count: int
        """

        self._virtualmachine_count = virtualmachine_count

    @property
    def vm_role(self):
        """Gets the vm_role of this DeviceRole.

        Virtual machines may be assigned to this role

        :return: The vm_role of this DeviceRole.
        :rtype: bool
        """
        return self._vm_role

    @vm_role.setter
    def vm_role(self, vm_role):
        """Sets the vm_role of this DeviceRole.

        Virtual machines may be assigned to this role

        :param vm_role: The vm_role of this DeviceRole.
        :type vm_role: bool
        """

        self._vm_role = vm_role
