# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritablePowerFeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amperage: int=None, comments: str=None, created: date=None, custom_fields: object=None, id: int=None, last_updated: datetime=None, max_utilization: int=None, name: str=None, phase: str=None, power_panel: int=None, rack: int=None, status: str=None, supply: str=None, tags: List[str]=None, type: str=None, voltage: int=None):
        """WritablePowerFeed - a model defined in OpenAPI

        :param amperage: The amperage of this WritablePowerFeed.
        :param comments: The comments of this WritablePowerFeed.
        :param created: The created of this WritablePowerFeed.
        :param custom_fields: The custom_fields of this WritablePowerFeed.
        :param id: The id of this WritablePowerFeed.
        :param last_updated: The last_updated of this WritablePowerFeed.
        :param max_utilization: The max_utilization of this WritablePowerFeed.
        :param name: The name of this WritablePowerFeed.
        :param phase: The phase of this WritablePowerFeed.
        :param power_panel: The power_panel of this WritablePowerFeed.
        :param rack: The rack of this WritablePowerFeed.
        :param status: The status of this WritablePowerFeed.
        :param supply: The supply of this WritablePowerFeed.
        :param tags: The tags of this WritablePowerFeed.
        :param type: The type of this WritablePowerFeed.
        :param voltage: The voltage of this WritablePowerFeed.
        """
        self.openapi_types = {
            'amperage': int,
            'comments': str,
            'created': date,
            'custom_fields': object,
            'id': int,
            'last_updated': datetime,
            'max_utilization': int,
            'name': str,
            'phase': str,
            'power_panel': int,
            'rack': int,
            'status': str,
            'supply': str,
            'tags': List[str],
            'type': str,
            'voltage': int
        }

        self.attribute_map = {
            'amperage': 'amperage',
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'last_updated': 'last_updated',
            'max_utilization': 'max_utilization',
            'name': 'name',
            'phase': 'phase',
            'power_panel': 'power_panel',
            'rack': 'rack',
            'status': 'status',
            'supply': 'supply',
            'tags': 'tags',
            'type': 'type',
            'voltage': 'voltage'
        }

        self._amperage = amperage
        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._id = id
        self._last_updated = last_updated
        self._max_utilization = max_utilization
        self._name = name
        self._phase = phase
        self._power_panel = power_panel
        self._rack = rack
        self._status = status
        self._supply = supply
        self._tags = tags
        self._type = type
        self._voltage = voltage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePowerFeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePowerFeed of this WritablePowerFeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amperage(self):
        """Gets the amperage of this WritablePowerFeed.


        :return: The amperage of this WritablePowerFeed.
        :rtype: int
        """
        return self._amperage

    @amperage.setter
    def amperage(self, amperage):
        """Sets the amperage of this WritablePowerFeed.


        :param amperage: The amperage of this WritablePowerFeed.
        :type amperage: int
        """
        if amperage is not None and amperage > 32767:
            raise ValueError("Invalid value for `amperage`, must be a value less than or equal to `32767`")
        if amperage is not None and amperage < 1:
            raise ValueError("Invalid value for `amperage`, must be a value greater than or equal to `1`")

        self._amperage = amperage

    @property
    def comments(self):
        """Gets the comments of this WritablePowerFeed.


        :return: The comments of this WritablePowerFeed.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritablePowerFeed.


        :param comments: The comments of this WritablePowerFeed.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this WritablePowerFeed.


        :return: The created of this WritablePowerFeed.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritablePowerFeed.


        :param created: The created of this WritablePowerFeed.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritablePowerFeed.


        :return: The custom_fields of this WritablePowerFeed.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritablePowerFeed.


        :param custom_fields: The custom_fields of this WritablePowerFeed.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this WritablePowerFeed.


        :return: The id of this WritablePowerFeed.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePowerFeed.


        :param id: The id of this WritablePowerFeed.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritablePowerFeed.


        :return: The last_updated of this WritablePowerFeed.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritablePowerFeed.


        :param last_updated: The last_updated of this WritablePowerFeed.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def max_utilization(self):
        """Gets the max_utilization of this WritablePowerFeed.

        Maximum permissible draw (percentage)

        :return: The max_utilization of this WritablePowerFeed.
        :rtype: int
        """
        return self._max_utilization

    @max_utilization.setter
    def max_utilization(self, max_utilization):
        """Sets the max_utilization of this WritablePowerFeed.

        Maximum permissible draw (percentage)

        :param max_utilization: The max_utilization of this WritablePowerFeed.
        :type max_utilization: int
        """
        if max_utilization is not None and max_utilization > 100:
            raise ValueError("Invalid value for `max_utilization`, must be a value less than or equal to `100`")
        if max_utilization is not None and max_utilization < 1:
            raise ValueError("Invalid value for `max_utilization`, must be a value greater than or equal to `1`")

        self._max_utilization = max_utilization

    @property
    def name(self):
        """Gets the name of this WritablePowerFeed.


        :return: The name of this WritablePowerFeed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePowerFeed.


        :param name: The name of this WritablePowerFeed.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def phase(self):
        """Gets the phase of this WritablePowerFeed.


        :return: The phase of this WritablePowerFeed.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this WritablePowerFeed.


        :param phase: The phase of this WritablePowerFeed.
        :type phase: str
        """
        allowed_values = ["single-phase", "three-phase"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def power_panel(self):
        """Gets the power_panel of this WritablePowerFeed.


        :return: The power_panel of this WritablePowerFeed.
        :rtype: int
        """
        return self._power_panel

    @power_panel.setter
    def power_panel(self, power_panel):
        """Sets the power_panel of this WritablePowerFeed.


        :param power_panel: The power_panel of this WritablePowerFeed.
        :type power_panel: int
        """
        if power_panel is None:
            raise ValueError("Invalid value for `power_panel`, must not be `None`")

        self._power_panel = power_panel

    @property
    def rack(self):
        """Gets the rack of this WritablePowerFeed.


        :return: The rack of this WritablePowerFeed.
        :rtype: int
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """Sets the rack of this WritablePowerFeed.


        :param rack: The rack of this WritablePowerFeed.
        :type rack: int
        """

        self._rack = rack

    @property
    def status(self):
        """Gets the status of this WritablePowerFeed.


        :return: The status of this WritablePowerFeed.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritablePowerFeed.


        :param status: The status of this WritablePowerFeed.
        :type status: str
        """
        allowed_values = ["offline", "active", "planned", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supply(self):
        """Gets the supply of this WritablePowerFeed.


        :return: The supply of this WritablePowerFeed.
        :rtype: str
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this WritablePowerFeed.


        :param supply: The supply of this WritablePowerFeed.
        :type supply: str
        """
        allowed_values = ["ac", "dc"]  # noqa: E501
        if supply not in allowed_values:
            raise ValueError(
                "Invalid value for `supply` ({0}), must be one of {1}"
                .format(supply, allowed_values)
            )

        self._supply = supply

    @property
    def tags(self):
        """Gets the tags of this WritablePowerFeed.


        :return: The tags of this WritablePowerFeed.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritablePowerFeed.


        :param tags: The tags of this WritablePowerFeed.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this WritablePowerFeed.


        :return: The type of this WritablePowerFeed.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritablePowerFeed.


        :param type: The type of this WritablePowerFeed.
        :type type: str
        """
        allowed_values = ["primary", "redundant"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def voltage(self):
        """Gets the voltage of this WritablePowerFeed.


        :return: The voltage of this WritablePowerFeed.
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this WritablePowerFeed.


        :param voltage: The voltage of this WritablePowerFeed.
        :type voltage: int
        """
        if voltage is not None and voltage > 32767:
            raise ValueError("Invalid value for `voltage`, must be a value less than or equal to `32767`")
        if voltage is not None and voltage < -32768:
            raise ValueError("Invalid value for `voltage`, must be a value greater than or equal to `-32768`")

        self._voltage = voltage
