# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WritableSite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, circuit_count: int=None, comments: str=None, contact_email: str=None, contact_name: str=None, contact_phone: str=None, created: date=None, custom_fields: object=None, description: str=None, device_count: int=None, facility: str=None, id: int=None, last_updated: datetime=None, latitude: str=None, longitude: str=None, name: str=None, physical_address: str=None, prefix_count: int=None, rack_count: int=None, region: int=None, shipping_address: str=None, slug: str=None, status: str=None, tags: List[str]=None, tenant: int=None, time_zone: str=None, virtualmachine_count: int=None, vlan_count: int=None):
        """WritableSite - a model defined in OpenAPI

        :param asn: The asn of this WritableSite.
        :param circuit_count: The circuit_count of this WritableSite.
        :param comments: The comments of this WritableSite.
        :param contact_email: The contact_email of this WritableSite.
        :param contact_name: The contact_name of this WritableSite.
        :param contact_phone: The contact_phone of this WritableSite.
        :param created: The created of this WritableSite.
        :param custom_fields: The custom_fields of this WritableSite.
        :param description: The description of this WritableSite.
        :param device_count: The device_count of this WritableSite.
        :param facility: The facility of this WritableSite.
        :param id: The id of this WritableSite.
        :param last_updated: The last_updated of this WritableSite.
        :param latitude: The latitude of this WritableSite.
        :param longitude: The longitude of this WritableSite.
        :param name: The name of this WritableSite.
        :param physical_address: The physical_address of this WritableSite.
        :param prefix_count: The prefix_count of this WritableSite.
        :param rack_count: The rack_count of this WritableSite.
        :param region: The region of this WritableSite.
        :param shipping_address: The shipping_address of this WritableSite.
        :param slug: The slug of this WritableSite.
        :param status: The status of this WritableSite.
        :param tags: The tags of this WritableSite.
        :param tenant: The tenant of this WritableSite.
        :param time_zone: The time_zone of this WritableSite.
        :param virtualmachine_count: The virtualmachine_count of this WritableSite.
        :param vlan_count: The vlan_count of this WritableSite.
        """
        self.openapi_types = {
            'asn': int,
            'circuit_count': int,
            'comments': str,
            'contact_email': str,
            'contact_name': str,
            'contact_phone': str,
            'created': date,
            'custom_fields': object,
            'description': str,
            'device_count': int,
            'facility': str,
            'id': int,
            'last_updated': datetime,
            'latitude': str,
            'longitude': str,
            'name': str,
            'physical_address': str,
            'prefix_count': int,
            'rack_count': int,
            'region': int,
            'shipping_address': str,
            'slug': str,
            'status': str,
            'tags': List[str],
            'tenant': int,
            'time_zone': str,
            'virtualmachine_count': int,
            'vlan_count': int
        }

        self.attribute_map = {
            'asn': 'asn',
            'circuit_count': 'circuit_count',
            'comments': 'comments',
            'contact_email': 'contact_email',
            'contact_name': 'contact_name',
            'contact_phone': 'contact_phone',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'device_count': 'device_count',
            'facility': 'facility',
            'id': 'id',
            'last_updated': 'last_updated',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'physical_address': 'physical_address',
            'prefix_count': 'prefix_count',
            'rack_count': 'rack_count',
            'region': 'region',
            'shipping_address': 'shipping_address',
            'slug': 'slug',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'time_zone': 'time_zone',
            'virtualmachine_count': 'virtualmachine_count',
            'vlan_count': 'vlan_count'
        }

        self._asn = asn
        self._circuit_count = circuit_count
        self._comments = comments
        self._contact_email = contact_email
        self._contact_name = contact_name
        self._contact_phone = contact_phone
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._device_count = device_count
        self._facility = facility
        self._id = id
        self._last_updated = last_updated
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._physical_address = physical_address
        self._prefix_count = prefix_count
        self._rack_count = rack_count
        self._region = region
        self._shipping_address = shipping_address
        self._slug = slug
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._time_zone = time_zone
        self._virtualmachine_count = virtualmachine_count
        self._vlan_count = vlan_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableSite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableSite of this WritableSite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this WritableSite.

        32-bit autonomous system number

        :return: The asn of this WritableSite.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this WritableSite.

        32-bit autonomous system number

        :param asn: The asn of this WritableSite.
        :type asn: int
        """
        if asn is not None and asn > 4294967295:
            raise ValueError("Invalid value for `asn`, must be a value less than or equal to `4294967295`")
        if asn is not None and asn < 1:
            raise ValueError("Invalid value for `asn`, must be a value greater than or equal to `1`")

        self._asn = asn

    @property
    def circuit_count(self):
        """Gets the circuit_count of this WritableSite.


        :return: The circuit_count of this WritableSite.
        :rtype: int
        """
        return self._circuit_count

    @circuit_count.setter
    def circuit_count(self, circuit_count):
        """Sets the circuit_count of this WritableSite.


        :param circuit_count: The circuit_count of this WritableSite.
        :type circuit_count: int
        """

        self._circuit_count = circuit_count

    @property
    def comments(self):
        """Gets the comments of this WritableSite.


        :return: The comments of this WritableSite.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WritableSite.


        :param comments: The comments of this WritableSite.
        :type comments: str
        """

        self._comments = comments

    @property
    def contact_email(self):
        """Gets the contact_email of this WritableSite.


        :return: The contact_email of this WritableSite.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this WritableSite.


        :param contact_email: The contact_email of this WritableSite.
        :type contact_email: str
        """
        if contact_email is not None and len(contact_email) > 254:
            raise ValueError("Invalid value for `contact_email`, length must be less than or equal to `254`")

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """Gets the contact_name of this WritableSite.


        :return: The contact_name of this WritableSite.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this WritableSite.


        :param contact_name: The contact_name of this WritableSite.
        :type contact_name: str
        """
        if contact_name is not None and len(contact_name) > 50:
            raise ValueError("Invalid value for `contact_name`, length must be less than or equal to `50`")

        self._contact_name = contact_name

    @property
    def contact_phone(self):
        """Gets the contact_phone of this WritableSite.


        :return: The contact_phone of this WritableSite.
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this WritableSite.


        :param contact_phone: The contact_phone of this WritableSite.
        :type contact_phone: str
        """
        if contact_phone is not None and len(contact_phone) > 20:
            raise ValueError("Invalid value for `contact_phone`, length must be less than or equal to `20`")

        self._contact_phone = contact_phone

    @property
    def created(self):
        """Gets the created of this WritableSite.


        :return: The created of this WritableSite.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableSite.


        :param created: The created of this WritableSite.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableSite.


        :return: The custom_fields of this WritableSite.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableSite.


        :param custom_fields: The custom_fields of this WritableSite.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableSite.


        :return: The description of this WritableSite.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableSite.


        :param description: The description of this WritableSite.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_count(self):
        """Gets the device_count of this WritableSite.


        :return: The device_count of this WritableSite.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this WritableSite.


        :param device_count: The device_count of this WritableSite.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def facility(self):
        """Gets the facility of this WritableSite.

        Local facility ID or description

        :return: The facility of this WritableSite.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this WritableSite.

        Local facility ID or description

        :param facility: The facility of this WritableSite.
        :type facility: str
        """
        if facility is not None and len(facility) > 50:
            raise ValueError("Invalid value for `facility`, length must be less than or equal to `50`")

        self._facility = facility

    @property
    def id(self):
        """Gets the id of this WritableSite.


        :return: The id of this WritableSite.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableSite.


        :param id: The id of this WritableSite.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableSite.


        :return: The last_updated of this WritableSite.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableSite.


        :param last_updated: The last_updated of this WritableSite.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def latitude(self):
        """Gets the latitude of this WritableSite.

        GPS coordinate (latitude)

        :return: The latitude of this WritableSite.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WritableSite.

        GPS coordinate (latitude)

        :param latitude: The latitude of this WritableSite.
        :type latitude: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this WritableSite.

        GPS coordinate (longitude)

        :return: The longitude of this WritableSite.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WritableSite.

        GPS coordinate (longitude)

        :param longitude: The longitude of this WritableSite.
        :type longitude: str
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this WritableSite.


        :return: The name of this WritableSite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableSite.


        :param name: The name of this WritableSite.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def physical_address(self):
        """Gets the physical_address of this WritableSite.


        :return: The physical_address of this WritableSite.
        :rtype: str
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """Sets the physical_address of this WritableSite.


        :param physical_address: The physical_address of this WritableSite.
        :type physical_address: str
        """
        if physical_address is not None and len(physical_address) > 200:
            raise ValueError("Invalid value for `physical_address`, length must be less than or equal to `200`")

        self._physical_address = physical_address

    @property
    def prefix_count(self):
        """Gets the prefix_count of this WritableSite.


        :return: The prefix_count of this WritableSite.
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this WritableSite.


        :param prefix_count: The prefix_count of this WritableSite.
        :type prefix_count: int
        """

        self._prefix_count = prefix_count

    @property
    def rack_count(self):
        """Gets the rack_count of this WritableSite.


        :return: The rack_count of this WritableSite.
        :rtype: int
        """
        return self._rack_count

    @rack_count.setter
    def rack_count(self, rack_count):
        """Sets the rack_count of this WritableSite.


        :param rack_count: The rack_count of this WritableSite.
        :type rack_count: int
        """

        self._rack_count = rack_count

    @property
    def region(self):
        """Gets the region of this WritableSite.


        :return: The region of this WritableSite.
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this WritableSite.


        :param region: The region of this WritableSite.
        :type region: int
        """

        self._region = region

    @property
    def shipping_address(self):
        """Gets the shipping_address of this WritableSite.


        :return: The shipping_address of this WritableSite.
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this WritableSite.


        :param shipping_address: The shipping_address of this WritableSite.
        :type shipping_address: str
        """
        if shipping_address is not None and len(shipping_address) > 200:
            raise ValueError("Invalid value for `shipping_address`, length must be less than or equal to `200`")

        self._shipping_address = shipping_address

    @property
    def slug(self):
        """Gets the slug of this WritableSite.


        :return: The slug of this WritableSite.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this WritableSite.


        :param slug: The slug of this WritableSite.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 50:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `50`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this WritableSite.


        :return: The status of this WritableSite.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableSite.


        :param status: The status of this WritableSite.
        :type status: str
        """
        allowed_values = ["active", "planned", "retired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableSite.


        :return: The tags of this WritableSite.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableSite.


        :param tags: The tags of this WritableSite.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableSite.


        :return: The tenant of this WritableSite.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableSite.


        :param tenant: The tenant of this WritableSite.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def time_zone(self):
        """Gets the time_zone of this WritableSite.


        :return: The time_zone of this WritableSite.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this WritableSite.


        :param time_zone: The time_zone of this WritableSite.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def virtualmachine_count(self):
        """Gets the virtualmachine_count of this WritableSite.


        :return: The virtualmachine_count of this WritableSite.
        :rtype: int
        """
        return self._virtualmachine_count

    @virtualmachine_count.setter
    def virtualmachine_count(self, virtualmachine_count):
        """Sets the virtualmachine_count of this WritableSite.


        :param virtualmachine_count: The virtualmachine_count of this WritableSite.
        :type virtualmachine_count: int
        """

        self._virtualmachine_count = virtualmachine_count

    @property
    def vlan_count(self):
        """Gets the vlan_count of this WritableSite.


        :return: The vlan_count of this WritableSite.
        :rtype: int
        """
        return self._vlan_count

    @vlan_count.setter
    def vlan_count(self, vlan_count):
        """Sets the vlan_count of this WritableSite.


        :param vlan_count: The vlan_count of this WritableSite.
        :type vlan_count: int
        """

        self._vlan_count = vlan_count
