# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face import Face
from openapi_server.models.nested_cluster import NestedCluster
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_device_role import NestedDeviceRole
from openapi_server.models.nested_device_type import NestedDeviceType
from openapi_server.models.nested_ip_address import NestedIPAddress
from openapi_server.models.nested_platform import NestedPlatform
from openapi_server.models.nested_rack import NestedRack
from openapi_server.models.nested_site import NestedSite
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.nested_virtual_chassis import NestedVirtualChassis
from openapi_server.models.status2 import Status2
from openapi_server import util


class DeviceWithConfigContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_tag: str=None, cluster: NestedCluster=None, comments: str=None, config_context: Dict[str, str]=None, created: date=None, custom_fields: object=None, device_role: NestedDeviceRole=None, device_type: NestedDeviceType=None, display_name: str=None, face: Face=None, id: int=None, last_updated: datetime=None, local_context_data: str=None, name: str=None, parent_device: NestedDevice=None, platform: NestedPlatform=None, position: int=None, primary_ip: NestedIPAddress=None, primary_ip4: NestedIPAddress=None, primary_ip6: NestedIPAddress=None, rack: NestedRack=None, serial: str=None, site: NestedSite=None, status: Status2=None, tags: List[str]=None, tenant: NestedTenant=None, vc_position: int=None, vc_priority: int=None, virtual_chassis: NestedVirtualChassis=None):
        """DeviceWithConfigContext - a model defined in OpenAPI

        :param asset_tag: The asset_tag of this DeviceWithConfigContext.
        :param cluster: The cluster of this DeviceWithConfigContext.
        :param comments: The comments of this DeviceWithConfigContext.
        :param config_context: The config_context of this DeviceWithConfigContext.
        :param created: The created of this DeviceWithConfigContext.
        :param custom_fields: The custom_fields of this DeviceWithConfigContext.
        :param device_role: The device_role of this DeviceWithConfigContext.
        :param device_type: The device_type of this DeviceWithConfigContext.
        :param display_name: The display_name of this DeviceWithConfigContext.
        :param face: The face of this DeviceWithConfigContext.
        :param id: The id of this DeviceWithConfigContext.
        :param last_updated: The last_updated of this DeviceWithConfigContext.
        :param local_context_data: The local_context_data of this DeviceWithConfigContext.
        :param name: The name of this DeviceWithConfigContext.
        :param parent_device: The parent_device of this DeviceWithConfigContext.
        :param platform: The platform of this DeviceWithConfigContext.
        :param position: The position of this DeviceWithConfigContext.
        :param primary_ip: The primary_ip of this DeviceWithConfigContext.
        :param primary_ip4: The primary_ip4 of this DeviceWithConfigContext.
        :param primary_ip6: The primary_ip6 of this DeviceWithConfigContext.
        :param rack: The rack of this DeviceWithConfigContext.
        :param serial: The serial of this DeviceWithConfigContext.
        :param site: The site of this DeviceWithConfigContext.
        :param status: The status of this DeviceWithConfigContext.
        :param tags: The tags of this DeviceWithConfigContext.
        :param tenant: The tenant of this DeviceWithConfigContext.
        :param vc_position: The vc_position of this DeviceWithConfigContext.
        :param vc_priority: The vc_priority of this DeviceWithConfigContext.
        :param virtual_chassis: The virtual_chassis of this DeviceWithConfigContext.
        """
        self.openapi_types = {
            'asset_tag': str,
            'cluster': NestedCluster,
            'comments': str,
            'config_context': Dict[str, str],
            'created': date,
            'custom_fields': object,
            'device_role': NestedDeviceRole,
            'device_type': NestedDeviceType,
            'display_name': str,
            'face': Face,
            'id': int,
            'last_updated': datetime,
            'local_context_data': str,
            'name': str,
            'parent_device': NestedDevice,
            'platform': NestedPlatform,
            'position': int,
            'primary_ip': NestedIPAddress,
            'primary_ip4': NestedIPAddress,
            'primary_ip6': NestedIPAddress,
            'rack': NestedRack,
            'serial': str,
            'site': NestedSite,
            'status': Status2,
            'tags': List[str],
            'tenant': NestedTenant,
            'vc_position': int,
            'vc_priority': int,
            'virtual_chassis': NestedVirtualChassis
        }

        self.attribute_map = {
            'asset_tag': 'asset_tag',
            'cluster': 'cluster',
            'comments': 'comments',
            'config_context': 'config_context',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'device_role': 'device_role',
            'device_type': 'device_type',
            'display_name': 'display_name',
            'face': 'face',
            'id': 'id',
            'last_updated': 'last_updated',
            'local_context_data': 'local_context_data',
            'name': 'name',
            'parent_device': 'parent_device',
            'platform': 'platform',
            'position': 'position',
            'primary_ip': 'primary_ip',
            'primary_ip4': 'primary_ip4',
            'primary_ip6': 'primary_ip6',
            'rack': 'rack',
            'serial': 'serial',
            'site': 'site',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'vc_position': 'vc_position',
            'vc_priority': 'vc_priority',
            'virtual_chassis': 'virtual_chassis'
        }

        self._asset_tag = asset_tag
        self._cluster = cluster
        self._comments = comments
        self._config_context = config_context
        self._created = created
        self._custom_fields = custom_fields
        self._device_role = device_role
        self._device_type = device_type
        self._display_name = display_name
        self._face = face
        self._id = id
        self._last_updated = last_updated
        self._local_context_data = local_context_data
        self._name = name
        self._parent_device = parent_device
        self._platform = platform
        self._position = position
        self._primary_ip = primary_ip
        self._primary_ip4 = primary_ip4
        self._primary_ip6 = primary_ip6
        self._rack = rack
        self._serial = serial
        self._site = site
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._vc_position = vc_position
        self._vc_priority = vc_priority
        self._virtual_chassis = virtual_chassis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceWithConfigContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceWithConfigContext of this DeviceWithConfigContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_tag(self):
        """Gets the asset_tag of this DeviceWithConfigContext.

        A unique tag used to identify this device

        :return: The asset_tag of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this DeviceWithConfigContext.

        A unique tag used to identify this device

        :param asset_tag: The asset_tag of this DeviceWithConfigContext.
        :type asset_tag: str
        """
        if asset_tag is not None and len(asset_tag) > 50:
            raise ValueError("Invalid value for `asset_tag`, length must be less than or equal to `50`")

        self._asset_tag = asset_tag

    @property
    def cluster(self):
        """Gets the cluster of this DeviceWithConfigContext.


        :return: The cluster of this DeviceWithConfigContext.
        :rtype: NestedCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DeviceWithConfigContext.


        :param cluster: The cluster of this DeviceWithConfigContext.
        :type cluster: NestedCluster
        """

        self._cluster = cluster

    @property
    def comments(self):
        """Gets the comments of this DeviceWithConfigContext.


        :return: The comments of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DeviceWithConfigContext.


        :param comments: The comments of this DeviceWithConfigContext.
        :type comments: str
        """

        self._comments = comments

    @property
    def config_context(self):
        """Gets the config_context of this DeviceWithConfigContext.


        :return: The config_context of this DeviceWithConfigContext.
        :rtype: Dict[str, str]
        """
        return self._config_context

    @config_context.setter
    def config_context(self, config_context):
        """Sets the config_context of this DeviceWithConfigContext.


        :param config_context: The config_context of this DeviceWithConfigContext.
        :type config_context: Dict[str, str]
        """

        self._config_context = config_context

    @property
    def created(self):
        """Gets the created of this DeviceWithConfigContext.


        :return: The created of this DeviceWithConfigContext.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DeviceWithConfigContext.


        :param created: The created of this DeviceWithConfigContext.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this DeviceWithConfigContext.


        :return: The custom_fields of this DeviceWithConfigContext.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this DeviceWithConfigContext.


        :param custom_fields: The custom_fields of this DeviceWithConfigContext.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def device_role(self):
        """Gets the device_role of this DeviceWithConfigContext.


        :return: The device_role of this DeviceWithConfigContext.
        :rtype: NestedDeviceRole
        """
        return self._device_role

    @device_role.setter
    def device_role(self, device_role):
        """Sets the device_role of this DeviceWithConfigContext.


        :param device_role: The device_role of this DeviceWithConfigContext.
        :type device_role: NestedDeviceRole
        """
        if device_role is None:
            raise ValueError("Invalid value for `device_role`, must not be `None`")

        self._device_role = device_role

    @property
    def device_type(self):
        """Gets the device_type of this DeviceWithConfigContext.


        :return: The device_type of this DeviceWithConfigContext.
        :rtype: NestedDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceWithConfigContext.


        :param device_type: The device_type of this DeviceWithConfigContext.
        :type device_type: NestedDeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def display_name(self):
        """Gets the display_name of this DeviceWithConfigContext.


        :return: The display_name of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceWithConfigContext.


        :param display_name: The display_name of this DeviceWithConfigContext.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def face(self):
        """Gets the face of this DeviceWithConfigContext.


        :return: The face of this DeviceWithConfigContext.
        :rtype: Face
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this DeviceWithConfigContext.


        :param face: The face of this DeviceWithConfigContext.
        :type face: Face
        """

        self._face = face

    @property
    def id(self):
        """Gets the id of this DeviceWithConfigContext.


        :return: The id of this DeviceWithConfigContext.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceWithConfigContext.


        :param id: The id of this DeviceWithConfigContext.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this DeviceWithConfigContext.


        :return: The last_updated of this DeviceWithConfigContext.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DeviceWithConfigContext.


        :param last_updated: The last_updated of this DeviceWithConfigContext.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def local_context_data(self):
        """Gets the local_context_data of this DeviceWithConfigContext.


        :return: The local_context_data of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._local_context_data

    @local_context_data.setter
    def local_context_data(self, local_context_data):
        """Sets the local_context_data of this DeviceWithConfigContext.


        :param local_context_data: The local_context_data of this DeviceWithConfigContext.
        :type local_context_data: str
        """

        self._local_context_data = local_context_data

    @property
    def name(self):
        """Gets the name of this DeviceWithConfigContext.


        :return: The name of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceWithConfigContext.


        :param name: The name of this DeviceWithConfigContext.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")

        self._name = name

    @property
    def parent_device(self):
        """Gets the parent_device of this DeviceWithConfigContext.


        :return: The parent_device of this DeviceWithConfigContext.
        :rtype: NestedDevice
        """
        return self._parent_device

    @parent_device.setter
    def parent_device(self, parent_device):
        """Sets the parent_device of this DeviceWithConfigContext.


        :param parent_device: The parent_device of this DeviceWithConfigContext.
        :type parent_device: NestedDevice
        """

        self._parent_device = parent_device

    @property
    def platform(self):
        """Gets the platform of this DeviceWithConfigContext.


        :return: The platform of this DeviceWithConfigContext.
        :rtype: NestedPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceWithConfigContext.


        :param platform: The platform of this DeviceWithConfigContext.
        :type platform: NestedPlatform
        """

        self._platform = platform

    @property
    def position(self):
        """Gets the position of this DeviceWithConfigContext.

        The lowest-numbered unit occupied by the device

        :return: The position of this DeviceWithConfigContext.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DeviceWithConfigContext.

        The lowest-numbered unit occupied by the device

        :param position: The position of this DeviceWithConfigContext.
        :type position: int
        """
        if position is not None and position > 32767:
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `32767`")
        if position is not None and position < 1:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1`")

        self._position = position

    @property
    def primary_ip(self):
        """Gets the primary_ip of this DeviceWithConfigContext.


        :return: The primary_ip of this DeviceWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip

    @primary_ip.setter
    def primary_ip(self, primary_ip):
        """Sets the primary_ip of this DeviceWithConfigContext.


        :param primary_ip: The primary_ip of this DeviceWithConfigContext.
        :type primary_ip: NestedIPAddress
        """

        self._primary_ip = primary_ip

    @property
    def primary_ip4(self):
        """Gets the primary_ip4 of this DeviceWithConfigContext.


        :return: The primary_ip4 of this DeviceWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip4

    @primary_ip4.setter
    def primary_ip4(self, primary_ip4):
        """Sets the primary_ip4 of this DeviceWithConfigContext.


        :param primary_ip4: The primary_ip4 of this DeviceWithConfigContext.
        :type primary_ip4: NestedIPAddress
        """

        self._primary_ip4 = primary_ip4

    @property
    def primary_ip6(self):
        """Gets the primary_ip6 of this DeviceWithConfigContext.


        :return: The primary_ip6 of this DeviceWithConfigContext.
        :rtype: NestedIPAddress
        """
        return self._primary_ip6

    @primary_ip6.setter
    def primary_ip6(self, primary_ip6):
        """Sets the primary_ip6 of this DeviceWithConfigContext.


        :param primary_ip6: The primary_ip6 of this DeviceWithConfigContext.
        :type primary_ip6: NestedIPAddress
        """

        self._primary_ip6 = primary_ip6

    @property
    def rack(self):
        """Gets the rack of this DeviceWithConfigContext.


        :return: The rack of this DeviceWithConfigContext.
        :rtype: NestedRack
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """Sets the rack of this DeviceWithConfigContext.


        :param rack: The rack of this DeviceWithConfigContext.
        :type rack: NestedRack
        """

        self._rack = rack

    @property
    def serial(self):
        """Gets the serial of this DeviceWithConfigContext.


        :return: The serial of this DeviceWithConfigContext.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this DeviceWithConfigContext.


        :param serial: The serial of this DeviceWithConfigContext.
        :type serial: str
        """
        if serial is not None and len(serial) > 50:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `50`")

        self._serial = serial

    @property
    def site(self):
        """Gets the site of this DeviceWithConfigContext.


        :return: The site of this DeviceWithConfigContext.
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this DeviceWithConfigContext.


        :param site: The site of this DeviceWithConfigContext.
        :type site: NestedSite
        """
        if site is None:
            raise ValueError("Invalid value for `site`, must not be `None`")

        self._site = site

    @property
    def status(self):
        """Gets the status of this DeviceWithConfigContext.


        :return: The status of this DeviceWithConfigContext.
        :rtype: Status2
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceWithConfigContext.


        :param status: The status of this DeviceWithConfigContext.
        :type status: Status2
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this DeviceWithConfigContext.


        :return: The tags of this DeviceWithConfigContext.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceWithConfigContext.


        :param tags: The tags of this DeviceWithConfigContext.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this DeviceWithConfigContext.


        :return: The tenant of this DeviceWithConfigContext.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this DeviceWithConfigContext.


        :param tenant: The tenant of this DeviceWithConfigContext.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def vc_position(self):
        """Gets the vc_position of this DeviceWithConfigContext.


        :return: The vc_position of this DeviceWithConfigContext.
        :rtype: int
        """
        return self._vc_position

    @vc_position.setter
    def vc_position(self, vc_position):
        """Sets the vc_position of this DeviceWithConfigContext.


        :param vc_position: The vc_position of this DeviceWithConfigContext.
        :type vc_position: int
        """
        if vc_position is not None and vc_position > 255:
            raise ValueError("Invalid value for `vc_position`, must be a value less than or equal to `255`")
        if vc_position is not None and vc_position < 0:
            raise ValueError("Invalid value for `vc_position`, must be a value greater than or equal to `0`")

        self._vc_position = vc_position

    @property
    def vc_priority(self):
        """Gets the vc_priority of this DeviceWithConfigContext.


        :return: The vc_priority of this DeviceWithConfigContext.
        :rtype: int
        """
        return self._vc_priority

    @vc_priority.setter
    def vc_priority(self, vc_priority):
        """Sets the vc_priority of this DeviceWithConfigContext.


        :param vc_priority: The vc_priority of this DeviceWithConfigContext.
        :type vc_priority: int
        """
        if vc_priority is not None and vc_priority > 255:
            raise ValueError("Invalid value for `vc_priority`, must be a value less than or equal to `255`")
        if vc_priority is not None and vc_priority < 0:
            raise ValueError("Invalid value for `vc_priority`, must be a value greater than or equal to `0`")

        self._vc_priority = vc_priority

    @property
    def virtual_chassis(self):
        """Gets the virtual_chassis of this DeviceWithConfigContext.


        :return: The virtual_chassis of this DeviceWithConfigContext.
        :rtype: NestedVirtualChassis
        """
        return self._virtual_chassis

    @virtual_chassis.setter
    def virtual_chassis(self, virtual_chassis):
        """Sets the virtual_chassis of this DeviceWithConfigContext.


        :param virtual_chassis: The virtual_chassis of this DeviceWithConfigContext.
        :type virtual_chassis: NestedVirtualChassis
        """

        self._virtual_chassis = virtual_chassis
