# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WritableIPAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, created: date=None, custom_fields: object=None, description: str=None, dns_name: str=None, family: str=None, id: int=None, interface: int=None, last_updated: datetime=None, nat_inside: int=None, nat_outside: int=None, role: str=None, status: str=None, tags: List[str]=None, tenant: int=None, vrf: int=None):
        """WritableIPAddress - a model defined in OpenAPI

        :param address: The address of this WritableIPAddress.
        :param created: The created of this WritableIPAddress.
        :param custom_fields: The custom_fields of this WritableIPAddress.
        :param description: The description of this WritableIPAddress.
        :param dns_name: The dns_name of this WritableIPAddress.
        :param family: The family of this WritableIPAddress.
        :param id: The id of this WritableIPAddress.
        :param interface: The interface of this WritableIPAddress.
        :param last_updated: The last_updated of this WritableIPAddress.
        :param nat_inside: The nat_inside of this WritableIPAddress.
        :param nat_outside: The nat_outside of this WritableIPAddress.
        :param role: The role of this WritableIPAddress.
        :param status: The status of this WritableIPAddress.
        :param tags: The tags of this WritableIPAddress.
        :param tenant: The tenant of this WritableIPAddress.
        :param vrf: The vrf of this WritableIPAddress.
        """
        self.openapi_types = {
            'address': str,
            'created': date,
            'custom_fields': object,
            'description': str,
            'dns_name': str,
            'family': str,
            'id': int,
            'interface': int,
            'last_updated': datetime,
            'nat_inside': int,
            'nat_outside': int,
            'role': str,
            'status': str,
            'tags': List[str],
            'tenant': int,
            'vrf': int
        }

        self.attribute_map = {
            'address': 'address',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'dns_name': 'dns_name',
            'family': 'family',
            'id': 'id',
            'interface': 'interface',
            'last_updated': 'last_updated',
            'nat_inside': 'nat_inside',
            'nat_outside': 'nat_outside',
            'role': 'role',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'vrf': 'vrf'
        }

        self._address = address
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._dns_name = dns_name
        self._family = family
        self._id = id
        self._interface = interface
        self._last_updated = last_updated
        self._nat_inside = nat_inside
        self._nat_outside = nat_outside
        self._role = role
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._vrf = vrf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableIPAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableIPAddress of this WritableIPAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this WritableIPAddress.

        IPv4 or IPv6 address (with mask)

        :return: The address of this WritableIPAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WritableIPAddress.

        IPv4 or IPv6 address (with mask)

        :param address: The address of this WritableIPAddress.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def created(self):
        """Gets the created of this WritableIPAddress.


        :return: The created of this WritableIPAddress.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WritableIPAddress.


        :param created: The created of this WritableIPAddress.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this WritableIPAddress.


        :return: The custom_fields of this WritableIPAddress.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this WritableIPAddress.


        :param custom_fields: The custom_fields of this WritableIPAddress.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this WritableIPAddress.


        :return: The description of this WritableIPAddress.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritableIPAddress.


        :param description: The description of this WritableIPAddress.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def dns_name(self):
        """Gets the dns_name of this WritableIPAddress.

        Hostname or FQDN (not case-sensitive)

        :return: The dns_name of this WritableIPAddress.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this WritableIPAddress.

        Hostname or FQDN (not case-sensitive)

        :param dns_name: The dns_name of this WritableIPAddress.
        :type dns_name: str
        """
        if dns_name is not None and len(dns_name) > 255:
            raise ValueError("Invalid value for `dns_name`, length must be less than or equal to `255`")
        if dns_name is not None and not re.search(r'^[0-9A-Za-z._-]+$', dns_name):
            raise ValueError("Invalid value for `dns_name`, must be a follow pattern or equal to `/^[0-9A-Za-z._-]+$/`")

        self._dns_name = dns_name

    @property
    def family(self):
        """Gets the family of this WritableIPAddress.


        :return: The family of this WritableIPAddress.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this WritableIPAddress.


        :param family: The family of this WritableIPAddress.
        :type family: str
        """

        self._family = family

    @property
    def id(self):
        """Gets the id of this WritableIPAddress.


        :return: The id of this WritableIPAddress.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableIPAddress.


        :param id: The id of this WritableIPAddress.
        :type id: int
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this WritableIPAddress.


        :return: The interface of this WritableIPAddress.
        :rtype: int
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this WritableIPAddress.


        :param interface: The interface of this WritableIPAddress.
        :type interface: int
        """

        self._interface = interface

    @property
    def last_updated(self):
        """Gets the last_updated of this WritableIPAddress.


        :return: The last_updated of this WritableIPAddress.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WritableIPAddress.


        :param last_updated: The last_updated of this WritableIPAddress.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def nat_inside(self):
        """Gets the nat_inside of this WritableIPAddress.

        The IP for which this address is the \"outside\" IP

        :return: The nat_inside of this WritableIPAddress.
        :rtype: int
        """
        return self._nat_inside

    @nat_inside.setter
    def nat_inside(self, nat_inside):
        """Sets the nat_inside of this WritableIPAddress.

        The IP for which this address is the \"outside\" IP

        :param nat_inside: The nat_inside of this WritableIPAddress.
        :type nat_inside: int
        """

        self._nat_inside = nat_inside

    @property
    def nat_outside(self):
        """Gets the nat_outside of this WritableIPAddress.


        :return: The nat_outside of this WritableIPAddress.
        :rtype: int
        """
        return self._nat_outside

    @nat_outside.setter
    def nat_outside(self, nat_outside):
        """Sets the nat_outside of this WritableIPAddress.


        :param nat_outside: The nat_outside of this WritableIPAddress.
        :type nat_outside: int
        """
        if nat_outside is None:
            raise ValueError("Invalid value for `nat_outside`, must not be `None`")

        self._nat_outside = nat_outside

    @property
    def role(self):
        """Gets the role of this WritableIPAddress.

        The functional role of this IP

        :return: The role of this WritableIPAddress.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this WritableIPAddress.

        The functional role of this IP

        :param role: The role of this WritableIPAddress.
        :type role: str
        """
        allowed_values = ["loopback", "secondary", "anycast", "vip", "vrrp", "hsrp", "glbp", "carp"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this WritableIPAddress.

        The operational status of this IP

        :return: The status of this WritableIPAddress.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableIPAddress.

        The operational status of this IP

        :param status: The status of this WritableIPAddress.
        :type status: str
        """
        allowed_values = ["active", "reserved", "deprecated", "dhcp"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WritableIPAddress.


        :return: The tags of this WritableIPAddress.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WritableIPAddress.


        :param tags: The tags of this WritableIPAddress.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this WritableIPAddress.


        :return: The tenant of this WritableIPAddress.
        :rtype: int
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this WritableIPAddress.


        :param tenant: The tenant of this WritableIPAddress.
        :type tenant: int
        """

        self._tenant = tenant

    @property
    def vrf(self):
        """Gets the vrf of this WritableIPAddress.


        :return: The vrf of this WritableIPAddress.
        :rtype: int
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this WritableIPAddress.


        :param vrf: The vrf of this WritableIPAddress.
        :type vrf: int
        """

        self._vrf = vrf
