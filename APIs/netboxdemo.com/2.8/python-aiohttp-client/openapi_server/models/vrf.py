# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server import util


class VRF(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: date=None, custom_fields: object=None, description: str=None, display_name: str=None, enforce_unique: bool=None, id: int=None, ipaddress_count: int=None, last_updated: datetime=None, name: str=None, prefix_count: int=None, rd: str=None, tags: List[str]=None, tenant: NestedTenant=None):
        """VRF - a model defined in OpenAPI

        :param created: The created of this VRF.
        :param custom_fields: The custom_fields of this VRF.
        :param description: The description of this VRF.
        :param display_name: The display_name of this VRF.
        :param enforce_unique: The enforce_unique of this VRF.
        :param id: The id of this VRF.
        :param ipaddress_count: The ipaddress_count of this VRF.
        :param last_updated: The last_updated of this VRF.
        :param name: The name of this VRF.
        :param prefix_count: The prefix_count of this VRF.
        :param rd: The rd of this VRF.
        :param tags: The tags of this VRF.
        :param tenant: The tenant of this VRF.
        """
        self.openapi_types = {
            'created': date,
            'custom_fields': object,
            'description': str,
            'display_name': str,
            'enforce_unique': bool,
            'id': int,
            'ipaddress_count': int,
            'last_updated': datetime,
            'name': str,
            'prefix_count': int,
            'rd': str,
            'tags': List[str],
            'tenant': NestedTenant
        }

        self.attribute_map = {
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'display_name': 'display_name',
            'enforce_unique': 'enforce_unique',
            'id': 'id',
            'ipaddress_count': 'ipaddress_count',
            'last_updated': 'last_updated',
            'name': 'name',
            'prefix_count': 'prefix_count',
            'rd': 'rd',
            'tags': 'tags',
            'tenant': 'tenant'
        }

        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._display_name = display_name
        self._enforce_unique = enforce_unique
        self._id = id
        self._ipaddress_count = ipaddress_count
        self._last_updated = last_updated
        self._name = name
        self._prefix_count = prefix_count
        self._rd = rd
        self._tags = tags
        self._tenant = tenant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VRF':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VRF of this VRF.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this VRF.


        :return: The created of this VRF.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VRF.


        :param created: The created of this VRF.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this VRF.


        :return: The custom_fields of this VRF.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this VRF.


        :param custom_fields: The custom_fields of this VRF.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this VRF.


        :return: The description of this VRF.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VRF.


        :param description: The description of this VRF.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this VRF.


        :return: The display_name of this VRF.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VRF.


        :param display_name: The display_name of this VRF.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enforce_unique(self):
        """Gets the enforce_unique of this VRF.

        Prevent duplicate prefixes/IP addresses within this VRF

        :return: The enforce_unique of this VRF.
        :rtype: bool
        """
        return self._enforce_unique

    @enforce_unique.setter
    def enforce_unique(self, enforce_unique):
        """Sets the enforce_unique of this VRF.

        Prevent duplicate prefixes/IP addresses within this VRF

        :param enforce_unique: The enforce_unique of this VRF.
        :type enforce_unique: bool
        """

        self._enforce_unique = enforce_unique

    @property
    def id(self):
        """Gets the id of this VRF.


        :return: The id of this VRF.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VRF.


        :param id: The id of this VRF.
        :type id: int
        """

        self._id = id

    @property
    def ipaddress_count(self):
        """Gets the ipaddress_count of this VRF.


        :return: The ipaddress_count of this VRF.
        :rtype: int
        """
        return self._ipaddress_count

    @ipaddress_count.setter
    def ipaddress_count(self, ipaddress_count):
        """Sets the ipaddress_count of this VRF.


        :param ipaddress_count: The ipaddress_count of this VRF.
        :type ipaddress_count: int
        """

        self._ipaddress_count = ipaddress_count

    @property
    def last_updated(self):
        """Gets the last_updated of this VRF.


        :return: The last_updated of this VRF.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this VRF.


        :param last_updated: The last_updated of this VRF.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this VRF.


        :return: The name of this VRF.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VRF.


        :param name: The name of this VRF.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def prefix_count(self):
        """Gets the prefix_count of this VRF.


        :return: The prefix_count of this VRF.
        :rtype: int
        """
        return self._prefix_count

    @prefix_count.setter
    def prefix_count(self, prefix_count):
        """Sets the prefix_count of this VRF.


        :param prefix_count: The prefix_count of this VRF.
        :type prefix_count: int
        """

        self._prefix_count = prefix_count

    @property
    def rd(self):
        """Gets the rd of this VRF.

        Unique route distinguisher (as defined in RFC 4364)

        :return: The rd of this VRF.
        :rtype: str
        """
        return self._rd

    @rd.setter
    def rd(self, rd):
        """Sets the rd of this VRF.

        Unique route distinguisher (as defined in RFC 4364)

        :param rd: The rd of this VRF.
        :type rd: str
        """
        if rd is not None and len(rd) > 21:
            raise ValueError("Invalid value for `rd`, length must be less than or equal to `21`")

        self._rd = rd

    @property
    def tags(self):
        """Gets the tags of this VRF.


        :return: The tags of this VRF.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VRF.


        :param tags: The tags of this VRF.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this VRF.


        :return: The tenant of this VRF.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this VRF.


        :param tenant: The tenant of this VRF.
        :type tenant: NestedTenant
        """

        self._tenant = tenant
