# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_cluster_group import NestedClusterGroup
from openapi_server.models.nested_cluster_type import NestedClusterType
from openapi_server.models.nested_site import NestedSite
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, created: date=None, custom_fields: object=None, device_count: int=None, group: NestedClusterGroup=None, id: int=None, last_updated: datetime=None, name: str=None, site: NestedSite=None, tags: List[str]=None, tenant: NestedTenant=None, type: NestedClusterType=None, virtualmachine_count: int=None):
        """Cluster - a model defined in OpenAPI

        :param comments: The comments of this Cluster.
        :param created: The created of this Cluster.
        :param custom_fields: The custom_fields of this Cluster.
        :param device_count: The device_count of this Cluster.
        :param group: The group of this Cluster.
        :param id: The id of this Cluster.
        :param last_updated: The last_updated of this Cluster.
        :param name: The name of this Cluster.
        :param site: The site of this Cluster.
        :param tags: The tags of this Cluster.
        :param tenant: The tenant of this Cluster.
        :param type: The type of this Cluster.
        :param virtualmachine_count: The virtualmachine_count of this Cluster.
        """
        self.openapi_types = {
            'comments': str,
            'created': date,
            'custom_fields': object,
            'device_count': int,
            'group': NestedClusterGroup,
            'id': int,
            'last_updated': datetime,
            'name': str,
            'site': NestedSite,
            'tags': List[str],
            'tenant': NestedTenant,
            'type': NestedClusterType,
            'virtualmachine_count': int
        }

        self.attribute_map = {
            'comments': 'comments',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'device_count': 'device_count',
            'group': 'group',
            'id': 'id',
            'last_updated': 'last_updated',
            'name': 'name',
            'site': 'site',
            'tags': 'tags',
            'tenant': 'tenant',
            'type': 'type',
            'virtualmachine_count': 'virtualmachine_count'
        }

        self._comments = comments
        self._created = created
        self._custom_fields = custom_fields
        self._device_count = device_count
        self._group = group
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._site = site
        self._tags = tags
        self._tenant = tenant
        self._type = type
        self._virtualmachine_count = virtualmachine_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this Cluster.


        :return: The comments of this Cluster.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Cluster.


        :param comments: The comments of this Cluster.
        :type comments: str
        """

        self._comments = comments

    @property
    def created(self):
        """Gets the created of this Cluster.


        :return: The created of this Cluster.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Cluster.


        :param created: The created of this Cluster.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Cluster.


        :return: The custom_fields of this Cluster.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Cluster.


        :param custom_fields: The custom_fields of this Cluster.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def device_count(self):
        """Gets the device_count of this Cluster.


        :return: The device_count of this Cluster.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this Cluster.


        :param device_count: The device_count of this Cluster.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def group(self):
        """Gets the group of this Cluster.


        :return: The group of this Cluster.
        :rtype: NestedClusterGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Cluster.


        :param group: The group of this Cluster.
        :type group: NestedClusterGroup
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Cluster.


        :return: The id of this Cluster.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.


        :param id: The id of this Cluster.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Cluster.


        :return: The last_updated of this Cluster.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Cluster.


        :param last_updated: The last_updated of this Cluster.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Cluster.


        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def site(self):
        """Gets the site of this Cluster.


        :return: The site of this Cluster.
        :rtype: NestedSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Cluster.


        :param site: The site of this Cluster.
        :type site: NestedSite
        """

        self._site = site

    @property
    def tags(self):
        """Gets the tags of this Cluster.


        :return: The tags of this Cluster.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cluster.


        :param tags: The tags of this Cluster.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this Cluster.


        :return: The tenant of this Cluster.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Cluster.


        :param tenant: The tenant of this Cluster.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def type(self):
        """Gets the type of this Cluster.


        :return: The type of this Cluster.
        :rtype: NestedClusterType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cluster.


        :param type: The type of this Cluster.
        :type type: NestedClusterType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def virtualmachine_count(self):
        """Gets the virtualmachine_count of this Cluster.


        :return: The virtualmachine_count of this Cluster.
        :rtype: int
        """
        return self._virtualmachine_count

    @virtualmachine_count.setter
    def virtualmachine_count(self, virtualmachine_count):
        """Sets the virtualmachine_count of this Cluster.


        :param virtualmachine_count: The virtualmachine_count of this Cluster.
        :type virtualmachine_count: int
        """

        self._virtualmachine_count = virtualmachine_count
