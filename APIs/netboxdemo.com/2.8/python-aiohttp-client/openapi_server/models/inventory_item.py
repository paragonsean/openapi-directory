# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_manufacturer import NestedManufacturer
from openapi_server import util


class InventoryItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_tag: str=None, description: str=None, device: NestedDevice=None, discovered: bool=None, id: int=None, manufacturer: NestedManufacturer=None, name: str=None, parent: int=None, part_id: str=None, serial: str=None, tags: List[str]=None):
        """InventoryItem - a model defined in OpenAPI

        :param asset_tag: The asset_tag of this InventoryItem.
        :param description: The description of this InventoryItem.
        :param device: The device of this InventoryItem.
        :param discovered: The discovered of this InventoryItem.
        :param id: The id of this InventoryItem.
        :param manufacturer: The manufacturer of this InventoryItem.
        :param name: The name of this InventoryItem.
        :param parent: The parent of this InventoryItem.
        :param part_id: The part_id of this InventoryItem.
        :param serial: The serial of this InventoryItem.
        :param tags: The tags of this InventoryItem.
        """
        self.openapi_types = {
            'asset_tag': str,
            'description': str,
            'device': NestedDevice,
            'discovered': bool,
            'id': int,
            'manufacturer': NestedManufacturer,
            'name': str,
            'parent': int,
            'part_id': str,
            'serial': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'asset_tag': 'asset_tag',
            'description': 'description',
            'device': 'device',
            'discovered': 'discovered',
            'id': 'id',
            'manufacturer': 'manufacturer',
            'name': 'name',
            'parent': 'parent',
            'part_id': 'part_id',
            'serial': 'serial',
            'tags': 'tags'
        }

        self._asset_tag = asset_tag
        self._description = description
        self._device = device
        self._discovered = discovered
        self._id = id
        self._manufacturer = manufacturer
        self._name = name
        self._parent = parent
        self._part_id = part_id
        self._serial = serial
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryItem of this InventoryItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_tag(self):
        """Gets the asset_tag of this InventoryItem.

        A unique tag used to identify this item

        :return: The asset_tag of this InventoryItem.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this InventoryItem.

        A unique tag used to identify this item

        :param asset_tag: The asset_tag of this InventoryItem.
        :type asset_tag: str
        """
        if asset_tag is not None and len(asset_tag) > 50:
            raise ValueError("Invalid value for `asset_tag`, length must be less than or equal to `50`")

        self._asset_tag = asset_tag

    @property
    def description(self):
        """Gets the description of this InventoryItem.


        :return: The description of this InventoryItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InventoryItem.


        :param description: The description of this InventoryItem.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this InventoryItem.


        :return: The device of this InventoryItem.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InventoryItem.


        :param device: The device of this InventoryItem.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def discovered(self):
        """Gets the discovered of this InventoryItem.

        This item was automatically discovered

        :return: The discovered of this InventoryItem.
        :rtype: bool
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """Sets the discovered of this InventoryItem.

        This item was automatically discovered

        :param discovered: The discovered of this InventoryItem.
        :type discovered: bool
        """

        self._discovered = discovered

    @property
    def id(self):
        """Gets the id of this InventoryItem.


        :return: The id of this InventoryItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryItem.


        :param id: The id of this InventoryItem.
        :type id: int
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this InventoryItem.


        :return: The manufacturer of this InventoryItem.
        :rtype: NestedManufacturer
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this InventoryItem.


        :param manufacturer: The manufacturer of this InventoryItem.
        :type manufacturer: NestedManufacturer
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this InventoryItem.


        :return: The name of this InventoryItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InventoryItem.


        :param name: The name of this InventoryItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this InventoryItem.


        :return: The parent of this InventoryItem.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this InventoryItem.


        :param parent: The parent of this InventoryItem.
        :type parent: int
        """

        self._parent = parent

    @property
    def part_id(self):
        """Gets the part_id of this InventoryItem.

        Manufacturer-assigned part identifier

        :return: The part_id of this InventoryItem.
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this InventoryItem.

        Manufacturer-assigned part identifier

        :param part_id: The part_id of this InventoryItem.
        :type part_id: str
        """
        if part_id is not None and len(part_id) > 50:
            raise ValueError("Invalid value for `part_id`, length must be less than or equal to `50`")

        self._part_id = part_id

    @property
    def serial(self):
        """Gets the serial of this InventoryItem.


        :return: The serial of this InventoryItem.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this InventoryItem.


        :param serial: The serial of this InventoryItem.
        :type serial: str
        """
        if serial is not None and len(serial) > 50:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `50`")

        self._serial = serial

    @property
    def tags(self):
        """Gets the tags of this InventoryItem.


        :return: The tags of this InventoryItem.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InventoryItem.


        :param tags: The tags of this InventoryItem.
        :type tags: List[str]
        """

        self._tags = tags
