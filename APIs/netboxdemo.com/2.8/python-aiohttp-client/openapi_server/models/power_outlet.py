# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.feed_leg import FeedLeg
from openapi_server.models.nested_cable import NestedCable
from openapi_server.models.nested_device import NestedDevice
from openapi_server.models.nested_power_port import NestedPowerPort
from openapi_server.models.type4 import Type4
from openapi_server import util


class PowerOutlet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cable: NestedCable=None, connected_endpoint: Dict[str, str]=None, connected_endpoint_type: str=None, connection_status: ConnectionStatus=None, description: str=None, device: NestedDevice=None, feed_leg: FeedLeg=None, id: int=None, name: str=None, power_port: NestedPowerPort=None, tags: List[str]=None, type: Type4=None):
        """PowerOutlet - a model defined in OpenAPI

        :param cable: The cable of this PowerOutlet.
        :param connected_endpoint: The connected_endpoint of this PowerOutlet.
        :param connected_endpoint_type: The connected_endpoint_type of this PowerOutlet.
        :param connection_status: The connection_status of this PowerOutlet.
        :param description: The description of this PowerOutlet.
        :param device: The device of this PowerOutlet.
        :param feed_leg: The feed_leg of this PowerOutlet.
        :param id: The id of this PowerOutlet.
        :param name: The name of this PowerOutlet.
        :param power_port: The power_port of this PowerOutlet.
        :param tags: The tags of this PowerOutlet.
        :param type: The type of this PowerOutlet.
        """
        self.openapi_types = {
            'cable': NestedCable,
            'connected_endpoint': Dict[str, str],
            'connected_endpoint_type': str,
            'connection_status': ConnectionStatus,
            'description': str,
            'device': NestedDevice,
            'feed_leg': FeedLeg,
            'id': int,
            'name': str,
            'power_port': NestedPowerPort,
            'tags': List[str],
            'type': Type4
        }

        self.attribute_map = {
            'cable': 'cable',
            'connected_endpoint': 'connected_endpoint',
            'connected_endpoint_type': 'connected_endpoint_type',
            'connection_status': 'connection_status',
            'description': 'description',
            'device': 'device',
            'feed_leg': 'feed_leg',
            'id': 'id',
            'name': 'name',
            'power_port': 'power_port',
            'tags': 'tags',
            'type': 'type'
        }

        self._cable = cable
        self._connected_endpoint = connected_endpoint
        self._connected_endpoint_type = connected_endpoint_type
        self._connection_status = connection_status
        self._description = description
        self._device = device
        self._feed_leg = feed_leg
        self._id = id
        self._name = name
        self._power_port = power_port
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PowerOutlet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PowerOutlet of this PowerOutlet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cable(self):
        """Gets the cable of this PowerOutlet.


        :return: The cable of this PowerOutlet.
        :rtype: NestedCable
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """Sets the cable of this PowerOutlet.


        :param cable: The cable of this PowerOutlet.
        :type cable: NestedCable
        """

        self._cable = cable

    @property
    def connected_endpoint(self):
        """Gets the connected_endpoint of this PowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :return: The connected_endpoint of this PowerOutlet.
        :rtype: Dict[str, str]
        """
        return self._connected_endpoint

    @connected_endpoint.setter
    def connected_endpoint(self, connected_endpoint):
        """Sets the connected_endpoint of this PowerOutlet.

         Return the appropriate serializer for the type of connected object. 

        :param connected_endpoint: The connected_endpoint of this PowerOutlet.
        :type connected_endpoint: Dict[str, str]
        """

        self._connected_endpoint = connected_endpoint

    @property
    def connected_endpoint_type(self):
        """Gets the connected_endpoint_type of this PowerOutlet.


        :return: The connected_endpoint_type of this PowerOutlet.
        :rtype: str
        """
        return self._connected_endpoint_type

    @connected_endpoint_type.setter
    def connected_endpoint_type(self, connected_endpoint_type):
        """Sets the connected_endpoint_type of this PowerOutlet.


        :param connected_endpoint_type: The connected_endpoint_type of this PowerOutlet.
        :type connected_endpoint_type: str
        """

        self._connected_endpoint_type = connected_endpoint_type

    @property
    def connection_status(self):
        """Gets the connection_status of this PowerOutlet.


        :return: The connection_status of this PowerOutlet.
        :rtype: ConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this PowerOutlet.


        :param connection_status: The connection_status of this PowerOutlet.
        :type connection_status: ConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def description(self):
        """Gets the description of this PowerOutlet.


        :return: The description of this PowerOutlet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PowerOutlet.


        :param description: The description of this PowerOutlet.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device(self):
        """Gets the device of this PowerOutlet.


        :return: The device of this PowerOutlet.
        :rtype: NestedDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PowerOutlet.


        :param device: The device of this PowerOutlet.
        :type device: NestedDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def feed_leg(self):
        """Gets the feed_leg of this PowerOutlet.


        :return: The feed_leg of this PowerOutlet.
        :rtype: FeedLeg
        """
        return self._feed_leg

    @feed_leg.setter
    def feed_leg(self, feed_leg):
        """Sets the feed_leg of this PowerOutlet.


        :param feed_leg: The feed_leg of this PowerOutlet.
        :type feed_leg: FeedLeg
        """

        self._feed_leg = feed_leg

    @property
    def id(self):
        """Gets the id of this PowerOutlet.


        :return: The id of this PowerOutlet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PowerOutlet.


        :param id: The id of this PowerOutlet.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PowerOutlet.


        :return: The name of this PowerOutlet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PowerOutlet.


        :param name: The name of this PowerOutlet.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def power_port(self):
        """Gets the power_port of this PowerOutlet.


        :return: The power_port of this PowerOutlet.
        :rtype: NestedPowerPort
        """
        return self._power_port

    @power_port.setter
    def power_port(self, power_port):
        """Sets the power_port of this PowerOutlet.


        :param power_port: The power_port of this PowerOutlet.
        :type power_port: NestedPowerPort
        """

        self._power_port = power_port

    @property
    def tags(self):
        """Gets the tags of this PowerOutlet.


        :return: The tags of this PowerOutlet.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PowerOutlet.


        :param tags: The tags of this PowerOutlet.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this PowerOutlet.


        :return: The type of this PowerOutlet.
        :rtype: Type4
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PowerOutlet.


        :param type: The type of this PowerOutlet.
        :type type: Type4
        """

        self._type = type
