# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Type1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, value: str=None):
        """Type1 - a model defined in OpenAPI

        :param label: The label of this Type1.
        :param value: The value of this Type1.
        """
        self.openapi_types = {
            'label': str,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value'
        }

        self._label = label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Type1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Type_1 of this Type1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Type1.


        :return: The label of this Type1.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Type1.


        :param label: The label of this Type1.
        :type label: str
        """
        allowed_values = ["Virtual", "Link Aggregation Group (LAG)", "100BASE-TX (10/100ME)", "1000BASE-T (1GE)", "2.5GBASE-T (2.5GE)", "5GBASE-T (5GE)", "10GBASE-T (10GE)", "10GBASE-CX4 (10GE)", "GBIC (1GE)", "SFP (1GE)", "SFP+ (10GE)", "XFP (10GE)", "XENPAK (10GE)", "X2 (10GE)", "SFP28 (25GE)", "QSFP+ (40GE)", "QSFP28 (50GE)", "CFP (100GE)", "CFP2 (100GE)", "CFP2 (200GE)", "CFP4 (100GE)", "Cisco CPAK (100GE)", "QSFP28 (100GE)", "QSFP56 (200GE)", "QSFP-DD (400GE)", "OSFP (400GE)", "IEEE 802.11a", "IEEE 802.11b/g", "IEEE 802.11n", "IEEE 802.11ac", "IEEE 802.11ad", "IEEE 802.11ax", "GSM", "CDMA", "LTE", "OC-3/STM-1", "OC-12/STM-4", "OC-48/STM-16", "OC-192/STM-64", "OC-768/STM-256", "OC-1920/STM-640", "OC-3840/STM-1234", "SFP (1GFC)", "SFP (2GFC)", "SFP (4GFC)", "SFP+ (8GFC)", "SFP+ (16GFC)", "SFP28 (32GFC)", "QSFP28 (128GFC)", "SDR (2 Gbps)", "DDR (4 Gbps)", "QDR (8 Gbps)", "FDR10 (10 Gbps)", "FDR (13.5 Gbps)", "EDR (25 Gbps)", "HDR (50 Gbps)", "NDR (100 Gbps)", "XDR (250 Gbps)", "T1 (1.544 Mbps)", "E1 (2.048 Mbps)", "T3 (45 Mbps)", "E3 (34 Mbps)", "Cisco StackWise", "Cisco StackWise Plus", "Cisco FlexStack", "Cisco FlexStack Plus", "Juniper VCP", "Extreme SummitStack", "Extreme SummitStack-128", "Extreme SummitStack-256", "Extreme SummitStack-512", "Other"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def value(self):
        """Gets the value of this Type1.


        :return: The value of this Type1.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Type1.


        :param value: The value of this Type1.
        :type value: str
        """
        allowed_values = ["virtual", "lag", "100base-tx", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "128gfc-sfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
