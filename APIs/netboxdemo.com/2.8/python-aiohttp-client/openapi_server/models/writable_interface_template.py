# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WritableInterfaceTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type: int=None, id: int=None, mgmt_only: bool=None, name: str=None, type: str=None):
        """WritableInterfaceTemplate - a model defined in OpenAPI

        :param device_type: The device_type of this WritableInterfaceTemplate.
        :param id: The id of this WritableInterfaceTemplate.
        :param mgmt_only: The mgmt_only of this WritableInterfaceTemplate.
        :param name: The name of this WritableInterfaceTemplate.
        :param type: The type of this WritableInterfaceTemplate.
        """
        self.openapi_types = {
            'device_type': int,
            'id': int,
            'mgmt_only': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'device_type': 'device_type',
            'id': 'id',
            'mgmt_only': 'mgmt_only',
            'name': 'name',
            'type': 'type'
        }

        self._device_type = device_type
        self._id = id
        self._mgmt_only = mgmt_only
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableInterfaceTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableInterfaceTemplate of this WritableInterfaceTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this WritableInterfaceTemplate.


        :return: The device_type of this WritableInterfaceTemplate.
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WritableInterfaceTemplate.


        :param device_type: The device_type of this WritableInterfaceTemplate.
        :type device_type: int
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def id(self):
        """Gets the id of this WritableInterfaceTemplate.


        :return: The id of this WritableInterfaceTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableInterfaceTemplate.


        :param id: The id of this WritableInterfaceTemplate.
        :type id: int
        """

        self._id = id

    @property
    def mgmt_only(self):
        """Gets the mgmt_only of this WritableInterfaceTemplate.


        :return: The mgmt_only of this WritableInterfaceTemplate.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """Sets the mgmt_only of this WritableInterfaceTemplate.


        :param mgmt_only: The mgmt_only of this WritableInterfaceTemplate.
        :type mgmt_only: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def name(self):
        """Gets the name of this WritableInterfaceTemplate.


        :return: The name of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritableInterfaceTemplate.


        :param name: The name of this WritableInterfaceTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this WritableInterfaceTemplate.


        :return: The type of this WritableInterfaceTemplate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableInterfaceTemplate.


        :param type: The type of this WritableInterfaceTemplate.
        :type type: str
        """
        allowed_values = ["virtual", "lag", "100base-tx", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cpak", "100gbase-x-qsfp28", "200gbase-x-qsfp56", "400gbase-x-qsfpdd", "400gbase-x-osfp", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "128gfc-sfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
