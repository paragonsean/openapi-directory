# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WritablePlatform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, device_count: int=None, id: int=None, manufacturer: int=None, name: str=None, napalm_args: str=None, napalm_driver: str=None, slug: str=None, virtualmachine_count: int=None):
        """WritablePlatform - a model defined in OpenAPI

        :param description: The description of this WritablePlatform.
        :param device_count: The device_count of this WritablePlatform.
        :param id: The id of this WritablePlatform.
        :param manufacturer: The manufacturer of this WritablePlatform.
        :param name: The name of this WritablePlatform.
        :param napalm_args: The napalm_args of this WritablePlatform.
        :param napalm_driver: The napalm_driver of this WritablePlatform.
        :param slug: The slug of this WritablePlatform.
        :param virtualmachine_count: The virtualmachine_count of this WritablePlatform.
        """
        self.openapi_types = {
            'description': str,
            'device_count': int,
            'id': int,
            'manufacturer': int,
            'name': str,
            'napalm_args': str,
            'napalm_driver': str,
            'slug': str,
            'virtualmachine_count': int
        }

        self.attribute_map = {
            'description': 'description',
            'device_count': 'device_count',
            'id': 'id',
            'manufacturer': 'manufacturer',
            'name': 'name',
            'napalm_args': 'napalm_args',
            'napalm_driver': 'napalm_driver',
            'slug': 'slug',
            'virtualmachine_count': 'virtualmachine_count'
        }

        self._description = description
        self._device_count = device_count
        self._id = id
        self._manufacturer = manufacturer
        self._name = name
        self._napalm_args = napalm_args
        self._napalm_driver = napalm_driver
        self._slug = slug
        self._virtualmachine_count = virtualmachine_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritablePlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritablePlatform of this WritablePlatform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this WritablePlatform.


        :return: The description of this WritablePlatform.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WritablePlatform.


        :param description: The description of this WritablePlatform.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def device_count(self):
        """Gets the device_count of this WritablePlatform.


        :return: The device_count of this WritablePlatform.
        :rtype: int
        """
        return self._device_count

    @device_count.setter
    def device_count(self, device_count):
        """Sets the device_count of this WritablePlatform.


        :param device_count: The device_count of this WritablePlatform.
        :type device_count: int
        """

        self._device_count = device_count

    @property
    def id(self):
        """Gets the id of this WritablePlatform.


        :return: The id of this WritablePlatform.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritablePlatform.


        :param id: The id of this WritablePlatform.
        :type id: int
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this WritablePlatform.

        Optionally limit this platform to devices of a certain manufacturer

        :return: The manufacturer of this WritablePlatform.
        :rtype: int
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this WritablePlatform.

        Optionally limit this platform to devices of a certain manufacturer

        :param manufacturer: The manufacturer of this WritablePlatform.
        :type manufacturer: int
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this WritablePlatform.


        :return: The name of this WritablePlatform.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WritablePlatform.


        :param name: The name of this WritablePlatform.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def napalm_args(self):
        """Gets the napalm_args of this WritablePlatform.

        Additional arguments to pass when initiating the NAPALM driver (JSON format)

        :return: The napalm_args of this WritablePlatform.
        :rtype: str
        """
        return self._napalm_args

    @napalm_args.setter
    def napalm_args(self, napalm_args):
        """Sets the napalm_args of this WritablePlatform.

        Additional arguments to pass when initiating the NAPALM driver (JSON format)

        :param napalm_args: The napalm_args of this WritablePlatform.
        :type napalm_args: str
        """

        self._napalm_args = napalm_args

    @property
    def napalm_driver(self):
        """Gets the napalm_driver of this WritablePlatform.

        The name of the NAPALM driver to use when interacting with devices

        :return: The napalm_driver of this WritablePlatform.
        :rtype: str
        """
        return self._napalm_driver

    @napalm_driver.setter
    def napalm_driver(self, napalm_driver):
        """Sets the napalm_driver of this WritablePlatform.

        The name of the NAPALM driver to use when interacting with devices

        :param napalm_driver: The napalm_driver of this WritablePlatform.
        :type napalm_driver: str
        """
        if napalm_driver is not None and len(napalm_driver) > 50:
            raise ValueError("Invalid value for `napalm_driver`, length must be less than or equal to `50`")

        self._napalm_driver = napalm_driver

    @property
    def slug(self):
        """Gets the slug of this WritablePlatform.


        :return: The slug of this WritablePlatform.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this WritablePlatform.


        :param slug: The slug of this WritablePlatform.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")
        if slug is not None and len(slug) > 100:
            raise ValueError("Invalid value for `slug`, length must be less than or equal to `100`")
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def virtualmachine_count(self):
        """Gets the virtualmachine_count of this WritablePlatform.


        :return: The virtualmachine_count of this WritablePlatform.
        :rtype: int
        """
        return self._virtualmachine_count

    @virtualmachine_count.setter
    def virtualmachine_count(self, virtualmachine_count):
        """Sets the virtualmachine_count of this WritablePlatform.


        :param virtualmachine_count: The virtualmachine_count of this WritablePlatform.
        :type virtualmachine_count: int
        """

        self._virtualmachine_count = virtualmachine_count
