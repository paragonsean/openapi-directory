# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.circuit_circuit_termination import CircuitCircuitTermination
from openapi_server.models.nested_circuit_type import NestedCircuitType
from openapi_server.models.nested_provider import NestedProvider
from openapi_server.models.nested_tenant import NestedTenant
from openapi_server.models.status1 import Status1
from openapi_server import util


class Circuit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: str=None, comments: str=None, commit_rate: int=None, created: date=None, custom_fields: object=None, description: str=None, id: int=None, install_date: date=None, last_updated: datetime=None, provider: NestedProvider=None, status: Status1=None, tags: List[str]=None, tenant: NestedTenant=None, termination_a: CircuitCircuitTermination=None, termination_z: CircuitCircuitTermination=None, type: NestedCircuitType=None):
        """Circuit - a model defined in OpenAPI

        :param cid: The cid of this Circuit.
        :param comments: The comments of this Circuit.
        :param commit_rate: The commit_rate of this Circuit.
        :param created: The created of this Circuit.
        :param custom_fields: The custom_fields of this Circuit.
        :param description: The description of this Circuit.
        :param id: The id of this Circuit.
        :param install_date: The install_date of this Circuit.
        :param last_updated: The last_updated of this Circuit.
        :param provider: The provider of this Circuit.
        :param status: The status of this Circuit.
        :param tags: The tags of this Circuit.
        :param tenant: The tenant of this Circuit.
        :param termination_a: The termination_a of this Circuit.
        :param termination_z: The termination_z of this Circuit.
        :param type: The type of this Circuit.
        """
        self.openapi_types = {
            'cid': str,
            'comments': str,
            'commit_rate': int,
            'created': date,
            'custom_fields': object,
            'description': str,
            'id': int,
            'install_date': date,
            'last_updated': datetime,
            'provider': NestedProvider,
            'status': Status1,
            'tags': List[str],
            'tenant': NestedTenant,
            'termination_a': CircuitCircuitTermination,
            'termination_z': CircuitCircuitTermination,
            'type': NestedCircuitType
        }

        self.attribute_map = {
            'cid': 'cid',
            'comments': 'comments',
            'commit_rate': 'commit_rate',
            'created': 'created',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'id': 'id',
            'install_date': 'install_date',
            'last_updated': 'last_updated',
            'provider': 'provider',
            'status': 'status',
            'tags': 'tags',
            'tenant': 'tenant',
            'termination_a': 'termination_a',
            'termination_z': 'termination_z',
            'type': 'type'
        }

        self._cid = cid
        self._comments = comments
        self._commit_rate = commit_rate
        self._created = created
        self._custom_fields = custom_fields
        self._description = description
        self._id = id
        self._install_date = install_date
        self._last_updated = last_updated
        self._provider = provider
        self._status = status
        self._tags = tags
        self._tenant = tenant
        self._termination_a = termination_a
        self._termination_z = termination_z
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Circuit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Circuit of this Circuit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this Circuit.


        :return: The cid of this Circuit.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Circuit.


        :param cid: The cid of this Circuit.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")
        if cid is not None and len(cid) > 50:
            raise ValueError("Invalid value for `cid`, length must be less than or equal to `50`")
        if cid is not None and len(cid) < 1:
            raise ValueError("Invalid value for `cid`, length must be greater than or equal to `1`")

        self._cid = cid

    @property
    def comments(self):
        """Gets the comments of this Circuit.


        :return: The comments of this Circuit.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Circuit.


        :param comments: The comments of this Circuit.
        :type comments: str
        """

        self._comments = comments

    @property
    def commit_rate(self):
        """Gets the commit_rate of this Circuit.


        :return: The commit_rate of this Circuit.
        :rtype: int
        """
        return self._commit_rate

    @commit_rate.setter
    def commit_rate(self, commit_rate):
        """Sets the commit_rate of this Circuit.


        :param commit_rate: The commit_rate of this Circuit.
        :type commit_rate: int
        """
        if commit_rate is not None and commit_rate > 2147483647:
            raise ValueError("Invalid value for `commit_rate`, must be a value less than or equal to `2147483647`")
        if commit_rate is not None and commit_rate < 0:
            raise ValueError("Invalid value for `commit_rate`, must be a value greater than or equal to `0`")

        self._commit_rate = commit_rate

    @property
    def created(self):
        """Gets the created of this Circuit.


        :return: The created of this Circuit.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Circuit.


        :param created: The created of this Circuit.
        :type created: date
        """

        self._created = created

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Circuit.


        :return: The custom_fields of this Circuit.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Circuit.


        :param custom_fields: The custom_fields of this Circuit.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Circuit.


        :return: The description of this Circuit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Circuit.


        :param description: The description of this Circuit.
        :type description: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Circuit.


        :return: The id of this Circuit.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Circuit.


        :param id: The id of this Circuit.
        :type id: int
        """

        self._id = id

    @property
    def install_date(self):
        """Gets the install_date of this Circuit.


        :return: The install_date of this Circuit.
        :rtype: date
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this Circuit.


        :param install_date: The install_date of this Circuit.
        :type install_date: date
        """

        self._install_date = install_date

    @property
    def last_updated(self):
        """Gets the last_updated of this Circuit.


        :return: The last_updated of this Circuit.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Circuit.


        :param last_updated: The last_updated of this Circuit.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def provider(self):
        """Gets the provider of this Circuit.


        :return: The provider of this Circuit.
        :rtype: NestedProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Circuit.


        :param provider: The provider of this Circuit.
        :type provider: NestedProvider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def status(self):
        """Gets the status of this Circuit.


        :return: The status of this Circuit.
        :rtype: Status1
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Circuit.


        :param status: The status of this Circuit.
        :type status: Status1
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Circuit.


        :return: The tags of this Circuit.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Circuit.


        :param tags: The tags of this Circuit.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tenant(self):
        """Gets the tenant of this Circuit.


        :return: The tenant of this Circuit.
        :rtype: NestedTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Circuit.


        :param tenant: The tenant of this Circuit.
        :type tenant: NestedTenant
        """

        self._tenant = tenant

    @property
    def termination_a(self):
        """Gets the termination_a of this Circuit.


        :return: The termination_a of this Circuit.
        :rtype: CircuitCircuitTermination
        """
        return self._termination_a

    @termination_a.setter
    def termination_a(self, termination_a):
        """Sets the termination_a of this Circuit.


        :param termination_a: The termination_a of this Circuit.
        :type termination_a: CircuitCircuitTermination
        """

        self._termination_a = termination_a

    @property
    def termination_z(self):
        """Gets the termination_z of this Circuit.


        :return: The termination_z of this Circuit.
        :rtype: CircuitCircuitTermination
        """
        return self._termination_z

    @termination_z.setter
    def termination_z(self, termination_z):
        """Sets the termination_z of this Circuit.


        :param termination_z: The termination_z of this Circuit.
        :type termination_z: CircuitCircuitTermination
        """

        self._termination_z = termination_z

    @property
    def type(self):
        """Gets the type of this Circuit.


        :return: The type of this Circuit.
        :rtype: NestedCircuitType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Circuit.


        :param type: The type of this Circuit.
        :type type: NestedCircuitType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
