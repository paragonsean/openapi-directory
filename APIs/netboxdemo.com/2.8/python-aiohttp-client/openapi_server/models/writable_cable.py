# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WritableCable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, id: int=None, label: str=None, length: int=None, length_unit: str=None, status: str=None, termination_a: Dict[str, str]=None, termination_a_id: int=None, termination_a_type: str=None, termination_b: Dict[str, str]=None, termination_b_id: int=None, termination_b_type: str=None, type: str=None):
        """WritableCable - a model defined in OpenAPI

        :param color: The color of this WritableCable.
        :param id: The id of this WritableCable.
        :param label: The label of this WritableCable.
        :param length: The length of this WritableCable.
        :param length_unit: The length_unit of this WritableCable.
        :param status: The status of this WritableCable.
        :param termination_a: The termination_a of this WritableCable.
        :param termination_a_id: The termination_a_id of this WritableCable.
        :param termination_a_type: The termination_a_type of this WritableCable.
        :param termination_b: The termination_b of this WritableCable.
        :param termination_b_id: The termination_b_id of this WritableCable.
        :param termination_b_type: The termination_b_type of this WritableCable.
        :param type: The type of this WritableCable.
        """
        self.openapi_types = {
            'color': str,
            'id': int,
            'label': str,
            'length': int,
            'length_unit': str,
            'status': str,
            'termination_a': Dict[str, str],
            'termination_a_id': int,
            'termination_a_type': str,
            'termination_b': Dict[str, str],
            'termination_b_id': int,
            'termination_b_type': str,
            'type': str
        }

        self.attribute_map = {
            'color': 'color',
            'id': 'id',
            'label': 'label',
            'length': 'length',
            'length_unit': 'length_unit',
            'status': 'status',
            'termination_a': 'termination_a',
            'termination_a_id': 'termination_a_id',
            'termination_a_type': 'termination_a_type',
            'termination_b': 'termination_b',
            'termination_b_id': 'termination_b_id',
            'termination_b_type': 'termination_b_type',
            'type': 'type'
        }

        self._color = color
        self._id = id
        self._label = label
        self._length = length
        self._length_unit = length_unit
        self._status = status
        self._termination_a = termination_a
        self._termination_a_id = termination_a_id
        self._termination_a_type = termination_a_type
        self._termination_b = termination_b
        self._termination_b_id = termination_b_id
        self._termination_b_type = termination_b_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WritableCable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WritableCable of this WritableCable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this WritableCable.


        :return: The color of this WritableCable.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this WritableCable.


        :param color: The color of this WritableCable.
        :type color: str
        """
        if color is not None and len(color) > 6:
            raise ValueError("Invalid value for `color`, length must be less than or equal to `6`")
        if color is not None and not re.search(r'^[0-9a-f]{6}$', color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `/^[0-9a-f]{6}$/`")

        self._color = color

    @property
    def id(self):
        """Gets the id of this WritableCable.


        :return: The id of this WritableCable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WritableCable.


        :param id: The id of this WritableCable.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this WritableCable.


        :return: The label of this WritableCable.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WritableCable.


        :param label: The label of this WritableCable.
        :type label: str
        """
        if label is not None and len(label) > 100:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `100`")

        self._label = label

    @property
    def length(self):
        """Gets the length of this WritableCable.


        :return: The length of this WritableCable.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this WritableCable.


        :param length: The length of this WritableCable.
        :type length: int
        """
        if length is not None and length > 32767:
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `32767`")
        if length is not None and length < 0:
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `0`")

        self._length = length

    @property
    def length_unit(self):
        """Gets the length_unit of this WritableCable.


        :return: The length_unit of this WritableCable.
        :rtype: str
        """
        return self._length_unit

    @length_unit.setter
    def length_unit(self, length_unit):
        """Sets the length_unit of this WritableCable.


        :param length_unit: The length_unit of this WritableCable.
        :type length_unit: str
        """
        allowed_values = ["m", "cm", "ft", "in"]  # noqa: E501
        if length_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `length_unit` ({0}), must be one of {1}"
                .format(length_unit, allowed_values)
            )

        self._length_unit = length_unit

    @property
    def status(self):
        """Gets the status of this WritableCable.


        :return: The status of this WritableCable.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WritableCable.


        :param status: The status of this WritableCable.
        :type status: str
        """
        allowed_values = ["connected", "planned", "decommissioning"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def termination_a(self):
        """Gets the termination_a of this WritableCable.


        :return: The termination_a of this WritableCable.
        :rtype: Dict[str, str]
        """
        return self._termination_a

    @termination_a.setter
    def termination_a(self, termination_a):
        """Sets the termination_a of this WritableCable.


        :param termination_a: The termination_a of this WritableCable.
        :type termination_a: Dict[str, str]
        """

        self._termination_a = termination_a

    @property
    def termination_a_id(self):
        """Gets the termination_a_id of this WritableCable.


        :return: The termination_a_id of this WritableCable.
        :rtype: int
        """
        return self._termination_a_id

    @termination_a_id.setter
    def termination_a_id(self, termination_a_id):
        """Sets the termination_a_id of this WritableCable.


        :param termination_a_id: The termination_a_id of this WritableCable.
        :type termination_a_id: int
        """
        if termination_a_id is None:
            raise ValueError("Invalid value for `termination_a_id`, must not be `None`")
        if termination_a_id is not None and termination_a_id > 2147483647:
            raise ValueError("Invalid value for `termination_a_id`, must be a value less than or equal to `2147483647`")
        if termination_a_id is not None and termination_a_id < 0:
            raise ValueError("Invalid value for `termination_a_id`, must be a value greater than or equal to `0`")

        self._termination_a_id = termination_a_id

    @property
    def termination_a_type(self):
        """Gets the termination_a_type of this WritableCable.


        :return: The termination_a_type of this WritableCable.
        :rtype: str
        """
        return self._termination_a_type

    @termination_a_type.setter
    def termination_a_type(self, termination_a_type):
        """Sets the termination_a_type of this WritableCable.


        :param termination_a_type: The termination_a_type of this WritableCable.
        :type termination_a_type: str
        """
        if termination_a_type is None:
            raise ValueError("Invalid value for `termination_a_type`, must not be `None`")

        self._termination_a_type = termination_a_type

    @property
    def termination_b(self):
        """Gets the termination_b of this WritableCable.


        :return: The termination_b of this WritableCable.
        :rtype: Dict[str, str]
        """
        return self._termination_b

    @termination_b.setter
    def termination_b(self, termination_b):
        """Sets the termination_b of this WritableCable.


        :param termination_b: The termination_b of this WritableCable.
        :type termination_b: Dict[str, str]
        """

        self._termination_b = termination_b

    @property
    def termination_b_id(self):
        """Gets the termination_b_id of this WritableCable.


        :return: The termination_b_id of this WritableCable.
        :rtype: int
        """
        return self._termination_b_id

    @termination_b_id.setter
    def termination_b_id(self, termination_b_id):
        """Sets the termination_b_id of this WritableCable.


        :param termination_b_id: The termination_b_id of this WritableCable.
        :type termination_b_id: int
        """
        if termination_b_id is None:
            raise ValueError("Invalid value for `termination_b_id`, must not be `None`")
        if termination_b_id is not None and termination_b_id > 2147483647:
            raise ValueError("Invalid value for `termination_b_id`, must be a value less than or equal to `2147483647`")
        if termination_b_id is not None and termination_b_id < 0:
            raise ValueError("Invalid value for `termination_b_id`, must be a value greater than or equal to `0`")

        self._termination_b_id = termination_b_id

    @property
    def termination_b_type(self):
        """Gets the termination_b_type of this WritableCable.


        :return: The termination_b_type of this WritableCable.
        :rtype: str
        """
        return self._termination_b_type

    @termination_b_type.setter
    def termination_b_type(self, termination_b_type):
        """Sets the termination_b_type of this WritableCable.


        :param termination_b_type: The termination_b_type of this WritableCable.
        :type termination_b_type: str
        """
        if termination_b_type is None:
            raise ValueError("Invalid value for `termination_b_type`, must not be `None`")

        self._termination_b_type = termination_b_type

    @property
    def type(self):
        """Gets the type of this WritableCable.


        :return: The type of this WritableCable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WritableCable.


        :param type: The type of this WritableCable.
        :type type: str
        """
        allowed_values = ["cat3", "cat5", "cat5e", "cat6", "cat6a", "cat7", "dac-active", "dac-passive", "mrj21-trunk", "coaxial", "mmf", "mmf-om1", "mmf-om2", "mmf-om3", "mmf-om4", "smf", "smf-os1", "smf-os2", "aoc", "power"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
