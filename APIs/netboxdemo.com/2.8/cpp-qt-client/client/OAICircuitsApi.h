/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICircuitsApi_H
#define OAI_OAICircuitsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICircuit.h"
#include "OAICircuitTermination.h"
#include "OAICircuitType.h"
#include "OAICircuits_circuit_terminations_list_200_response.h"
#include "OAICircuits_circuit_types_list_200_response.h"
#include "OAICircuits_circuits_list_200_response.h"
#include "OAICircuits_providers_list_200_response.h"
#include "OAIProvider.h"
#include "OAIWritableCircuit.h"
#include "OAIWritableCircuitTermination.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICircuitsApi : public QObject {
    Q_OBJECT

public:
    OAICircuitsApi(const int timeOut = 0);
    ~OAICircuitsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_writable_circuit_termination OAIWritableCircuitTermination [required]
    */
    virtual void circuitsCircuitTerminationsCreate(const OAIWritableCircuitTermination &oai_writable_circuit_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitTerminationsDelete(const qint32 &id);

    /**
    * @param[in]  term_side QString [optional]
    * @param[in]  port_speed QString [optional]
    * @param[in]  upstream_speed QString [optional]
    * @param[in]  xconnect_id QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  circuit_id QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  term_side__n QString [optional]
    * @param[in]  port_speed__n QString [optional]
    * @param[in]  port_speed__lte QString [optional]
    * @param[in]  port_speed__lt QString [optional]
    * @param[in]  port_speed__gte QString [optional]
    * @param[in]  port_speed__gt QString [optional]
    * @param[in]  upstream_speed__n QString [optional]
    * @param[in]  upstream_speed__lte QString [optional]
    * @param[in]  upstream_speed__lt QString [optional]
    * @param[in]  upstream_speed__gte QString [optional]
    * @param[in]  upstream_speed__gt QString [optional]
    * @param[in]  xconnect_id__n QString [optional]
    * @param[in]  xconnect_id__ic QString [optional]
    * @param[in]  xconnect_id__nic QString [optional]
    * @param[in]  xconnect_id__iew QString [optional]
    * @param[in]  xconnect_id__niew QString [optional]
    * @param[in]  xconnect_id__isw QString [optional]
    * @param[in]  xconnect_id__nisw QString [optional]
    * @param[in]  xconnect_id__ie QString [optional]
    * @param[in]  xconnect_id__nie QString [optional]
    * @param[in]  circuit_id__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void circuitsCircuitTerminationsList(const ::OpenAPI::OptionalParam<QString> &term_side = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &circuit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &term_side__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port_speed__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upstream_speed__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &xconnect_id__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &circuit_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_circuit_termination OAIWritableCircuitTermination [required]
    */
    virtual void circuitsCircuitTerminationsPartialUpdate(const qint32 &id, const OAIWritableCircuitTermination &oai_writable_circuit_termination);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitTerminationsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_circuit_termination OAIWritableCircuitTermination [required]
    */
    virtual void circuitsCircuitTerminationsUpdate(const qint32 &id, const OAIWritableCircuitTermination &oai_writable_circuit_termination);

    /**
    * @param[in]  oai_circuit_type OAICircuitType [required]
    */
    virtual void circuitsCircuitTypesCreate(const OAICircuitType &oai_circuit_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitTypesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void circuitsCircuitTypesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_circuit_type OAICircuitType [required]
    */
    virtual void circuitsCircuitTypesPartialUpdate(const qint32 &id, const OAICircuitType &oai_circuit_type);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitTypesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_circuit_type OAICircuitType [required]
    */
    virtual void circuitsCircuitTypesUpdate(const qint32 &id, const OAICircuitType &oai_circuit_type);

    /**
    * @param[in]  oai_writable_circuit OAIWritableCircuit [required]
    */
    virtual void circuitsCircuitsCreate(const OAIWritableCircuit &oai_writable_circuit);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  cid QString [optional]
    * @param[in]  install_date QString [optional]
    * @param[in]  commit_rate QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  provider_id QString [optional]
    * @param[in]  provider QString [optional]
    * @param[in]  type_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  cid__n QString [optional]
    * @param[in]  cid__ic QString [optional]
    * @param[in]  cid__nic QString [optional]
    * @param[in]  cid__iew QString [optional]
    * @param[in]  cid__niew QString [optional]
    * @param[in]  cid__isw QString [optional]
    * @param[in]  cid__nisw QString [optional]
    * @param[in]  cid__ie QString [optional]
    * @param[in]  cid__nie QString [optional]
    * @param[in]  install_date__n QString [optional]
    * @param[in]  install_date__lte QString [optional]
    * @param[in]  install_date__lt QString [optional]
    * @param[in]  install_date__gte QString [optional]
    * @param[in]  install_date__gt QString [optional]
    * @param[in]  commit_rate__n QString [optional]
    * @param[in]  commit_rate__lte QString [optional]
    * @param[in]  commit_rate__lt QString [optional]
    * @param[in]  commit_rate__gte QString [optional]
    * @param[in]  commit_rate__gt QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  provider_id__n QString [optional]
    * @param[in]  provider__n QString [optional]
    * @param[in]  type_id__n QString [optional]
    * @param[in]  type__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void circuitsCircuitsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cid__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &install_date__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commit_rate__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_circuit OAIWritableCircuit [required]
    */
    virtual void circuitsCircuitsPartialUpdate(const qint32 &id, const OAIWritableCircuit &oai_writable_circuit);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsCircuitsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_circuit OAIWritableCircuit [required]
    */
    virtual void circuitsCircuitsUpdate(const qint32 &id, const OAIWritableCircuit &oai_writable_circuit);

    /**
    * @param[in]  oai_provider OAIProvider [required]
    */
    virtual void circuitsProvidersCreate(const OAIProvider &oai_provider);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsProvidersDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsProvidersGraphs(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  asn QString [optional]
    * @param[in]  account QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  asn__n QString [optional]
    * @param[in]  asn__lte QString [optional]
    * @param[in]  asn__lt QString [optional]
    * @param[in]  asn__gte QString [optional]
    * @param[in]  asn__gt QString [optional]
    * @param[in]  account__n QString [optional]
    * @param[in]  account__ic QString [optional]
    * @param[in]  account__nic QString [optional]
    * @param[in]  account__iew QString [optional]
    * @param[in]  account__niew QString [optional]
    * @param[in]  account__isw QString [optional]
    * @param[in]  account__nisw QString [optional]
    * @param[in]  account__ie QString [optional]
    * @param[in]  account__nie QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void circuitsProvidersList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asn__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &account__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_provider OAIProvider [required]
    */
    virtual void circuitsProvidersPartialUpdate(const qint32 &id, const OAIProvider &oai_provider);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void circuitsProvidersRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_provider OAIProvider [required]
    */
    virtual void circuitsProvidersUpdate(const qint32 &id, const OAIProvider &oai_provider);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void circuitsCircuitTerminationsCreateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsDeleteCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsListCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsReadCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesCreateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesDeleteCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesListCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesReadCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsCreateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsDeleteCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsListCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsReadCallback(OAIHttpRequestWorker *worker);
    void circuitsCircuitsUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersCreateCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersDeleteCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersGraphsCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersListCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersReadCallback(OAIHttpRequestWorker *worker);
    void circuitsProvidersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void circuitsCircuitTerminationsCreateSignal(OAICircuitTermination summary);
    void circuitsCircuitTerminationsDeleteSignal();
    void circuitsCircuitTerminationsListSignal(OAICircuits_circuit_terminations_list_200_response summary);
    void circuitsCircuitTerminationsPartialUpdateSignal(OAICircuitTermination summary);
    void circuitsCircuitTerminationsReadSignal(OAICircuitTermination summary);
    void circuitsCircuitTerminationsUpdateSignal(OAICircuitTermination summary);
    void circuitsCircuitTypesCreateSignal(OAICircuitType summary);
    void circuitsCircuitTypesDeleteSignal();
    void circuitsCircuitTypesListSignal(OAICircuits_circuit_types_list_200_response summary);
    void circuitsCircuitTypesPartialUpdateSignal(OAICircuitType summary);
    void circuitsCircuitTypesReadSignal(OAICircuitType summary);
    void circuitsCircuitTypesUpdateSignal(OAICircuitType summary);
    void circuitsCircuitsCreateSignal(OAICircuit summary);
    void circuitsCircuitsDeleteSignal();
    void circuitsCircuitsListSignal(OAICircuits_circuits_list_200_response summary);
    void circuitsCircuitsPartialUpdateSignal(OAICircuit summary);
    void circuitsCircuitsReadSignal(OAICircuit summary);
    void circuitsCircuitsUpdateSignal(OAICircuit summary);
    void circuitsProvidersCreateSignal(OAIProvider summary);
    void circuitsProvidersDeleteSignal();
    void circuitsProvidersGraphsSignal(OAIProvider summary);
    void circuitsProvidersListSignal(OAICircuits_providers_list_200_response summary);
    void circuitsProvidersPartialUpdateSignal(OAIProvider summary);
    void circuitsProvidersReadSignal(OAIProvider summary);
    void circuitsProvidersUpdateSignal(OAIProvider summary);


    void circuitsCircuitTerminationsCreateSignalFull(OAIHttpRequestWorker *worker, OAICircuitTermination summary);
    void circuitsCircuitTerminationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void circuitsCircuitTerminationsListSignalFull(OAIHttpRequestWorker *worker, OAICircuits_circuit_terminations_list_200_response summary);
    void circuitsCircuitTerminationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuitTermination summary);
    void circuitsCircuitTerminationsReadSignalFull(OAIHttpRequestWorker *worker, OAICircuitTermination summary);
    void circuitsCircuitTerminationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuitTermination summary);
    void circuitsCircuitTypesCreateSignalFull(OAIHttpRequestWorker *worker, OAICircuitType summary);
    void circuitsCircuitTypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void circuitsCircuitTypesListSignalFull(OAIHttpRequestWorker *worker, OAICircuits_circuit_types_list_200_response summary);
    void circuitsCircuitTypesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuitType summary);
    void circuitsCircuitTypesReadSignalFull(OAIHttpRequestWorker *worker, OAICircuitType summary);
    void circuitsCircuitTypesUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuitType summary);
    void circuitsCircuitsCreateSignalFull(OAIHttpRequestWorker *worker, OAICircuit summary);
    void circuitsCircuitsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void circuitsCircuitsListSignalFull(OAIHttpRequestWorker *worker, OAICircuits_circuits_list_200_response summary);
    void circuitsCircuitsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuit summary);
    void circuitsCircuitsReadSignalFull(OAIHttpRequestWorker *worker, OAICircuit summary);
    void circuitsCircuitsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICircuit summary);
    void circuitsProvidersCreateSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void circuitsProvidersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void circuitsProvidersGraphsSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void circuitsProvidersListSignalFull(OAIHttpRequestWorker *worker, OAICircuits_providers_list_200_response summary);
    void circuitsProvidersPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void circuitsProvidersReadSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void circuitsProvidersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);

    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsCreateSignalError() instead")
    void circuitsCircuitTerminationsCreateSignalE(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsCreateSignalError(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsDeleteSignalError() instead")
    void circuitsCircuitTerminationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsListSignalError() instead")
    void circuitsCircuitTerminationsListSignalE(OAICircuits_circuit_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsListSignalError(OAICircuits_circuit_terminations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsPartialUpdateSignalError() instead")
    void circuitsCircuitTerminationsPartialUpdateSignalE(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsPartialUpdateSignalError(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsReadSignalError() instead")
    void circuitsCircuitTerminationsReadSignalE(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsReadSignalError(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsUpdateSignalError() instead")
    void circuitsCircuitTerminationsUpdateSignalE(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsUpdateSignalError(OAICircuitTermination summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesCreateSignalError() instead")
    void circuitsCircuitTypesCreateSignalE(OAICircuitType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesCreateSignalError(OAICircuitType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesDeleteSignalError() instead")
    void circuitsCircuitTypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesListSignalError() instead")
    void circuitsCircuitTypesListSignalE(OAICircuits_circuit_types_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesListSignalError(OAICircuits_circuit_types_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesPartialUpdateSignalError() instead")
    void circuitsCircuitTypesPartialUpdateSignalE(OAICircuitType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesPartialUpdateSignalError(OAICircuitType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesReadSignalError() instead")
    void circuitsCircuitTypesReadSignalE(OAICircuitType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesReadSignalError(OAICircuitType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesUpdateSignalError() instead")
    void circuitsCircuitTypesUpdateSignalE(OAICircuitType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesUpdateSignalError(OAICircuitType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsCreateSignalError() instead")
    void circuitsCircuitsCreateSignalE(OAICircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsCreateSignalError(OAICircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsDeleteSignalError() instead")
    void circuitsCircuitsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsListSignalError() instead")
    void circuitsCircuitsListSignalE(OAICircuits_circuits_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsListSignalError(OAICircuits_circuits_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsPartialUpdateSignalError() instead")
    void circuitsCircuitsPartialUpdateSignalE(OAICircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsPartialUpdateSignalError(OAICircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsReadSignalError() instead")
    void circuitsCircuitsReadSignalE(OAICircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsReadSignalError(OAICircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsUpdateSignalError() instead")
    void circuitsCircuitsUpdateSignalE(OAICircuit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsUpdateSignalError(OAICircuit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersCreateSignalError() instead")
    void circuitsProvidersCreateSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersCreateSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersDeleteSignalError() instead")
    void circuitsProvidersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersGraphsSignalError() instead")
    void circuitsProvidersGraphsSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersGraphsSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersListSignalError() instead")
    void circuitsProvidersListSignalE(OAICircuits_providers_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersListSignalError(OAICircuits_providers_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersPartialUpdateSignalError() instead")
    void circuitsProvidersPartialUpdateSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersPartialUpdateSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersReadSignalError() instead")
    void circuitsProvidersReadSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersReadSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersUpdateSignalError() instead")
    void circuitsProvidersUpdateSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersUpdateSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsCreateSignalErrorFull() instead")
    void circuitsCircuitTerminationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsDeleteSignalErrorFull() instead")
    void circuitsCircuitTerminationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsListSignalErrorFull() instead")
    void circuitsCircuitTerminationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsPartialUpdateSignalErrorFull() instead")
    void circuitsCircuitTerminationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsReadSignalErrorFull() instead")
    void circuitsCircuitTerminationsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTerminationsUpdateSignalErrorFull() instead")
    void circuitsCircuitTerminationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTerminationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesCreateSignalErrorFull() instead")
    void circuitsCircuitTypesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesDeleteSignalErrorFull() instead")
    void circuitsCircuitTypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesListSignalErrorFull() instead")
    void circuitsCircuitTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesPartialUpdateSignalErrorFull() instead")
    void circuitsCircuitTypesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesReadSignalErrorFull() instead")
    void circuitsCircuitTypesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitTypesUpdateSignalErrorFull() instead")
    void circuitsCircuitTypesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitTypesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsCreateSignalErrorFull() instead")
    void circuitsCircuitsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsDeleteSignalErrorFull() instead")
    void circuitsCircuitsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsListSignalErrorFull() instead")
    void circuitsCircuitsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsPartialUpdateSignalErrorFull() instead")
    void circuitsCircuitsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsReadSignalErrorFull() instead")
    void circuitsCircuitsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsCircuitsUpdateSignalErrorFull() instead")
    void circuitsCircuitsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsCircuitsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersCreateSignalErrorFull() instead")
    void circuitsProvidersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersDeleteSignalErrorFull() instead")
    void circuitsProvidersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersGraphsSignalErrorFull() instead")
    void circuitsProvidersGraphsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersGraphsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersListSignalErrorFull() instead")
    void circuitsProvidersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersPartialUpdateSignalErrorFull() instead")
    void circuitsProvidersPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersReadSignalErrorFull() instead")
    void circuitsProvidersReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use circuitsProvidersUpdateSignalErrorFull() instead")
    void circuitsProvidersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void circuitsProvidersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
