/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpamApi_H
#define OAI_OAIIpamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregate.h"
#include "OAIAvailableIP.h"
#include "OAIAvailablePrefix.h"
#include "OAIIPAddress.h"
#include "OAIIpam_aggregates_list_200_response.h"
#include "OAIIpam_ip_addresses_list_200_response.h"
#include "OAIIpam_prefixes_list_200_response.h"
#include "OAIIpam_rirs_list_200_response.h"
#include "OAIIpam_roles_list_200_response.h"
#include "OAIIpam_services_list_200_response.h"
#include "OAIIpam_vlan_groups_list_200_response.h"
#include "OAIIpam_vlans_list_200_response.h"
#include "OAIIpam_vrfs_list_200_response.h"
#include "OAIPrefix.h"
#include "OAIRIR.h"
#include "OAIRole.h"
#include "OAIService.h"
#include "OAIVLAN.h"
#include "OAIVLANGroup.h"
#include "OAIVRF.h"
#include "OAIWritableAggregate.h"
#include "OAIWritableAvailableIP.h"
#include "OAIWritableIPAddress.h"
#include "OAIWritablePrefix.h"
#include "OAIWritableService.h"
#include "OAIWritableVLAN.h"
#include "OAIWritableVLANGroup.h"
#include "OAIWritableVRF.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpamApi : public QObject {
    Q_OBJECT

public:
    OAIIpamApi(const int timeOut = 0);
    ~OAIIpamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesCreate(const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAggregatesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  date_added QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  rir_id QString [optional]
    * @param[in]  rir QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  date_added__n QString [optional]
    * @param[in]  date_added__lte QString [optional]
    * @param[in]  date_added__lt QString [optional]
    * @param[in]  date_added__gte QString [optional]
    * @param[in]  date_added__gt QString [optional]
    * @param[in]  rir_id__n QString [optional]
    * @param[in]  rir__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamAggregatesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_added__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rir__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesPartialUpdate(const qint32 &id, const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamAggregatesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_aggregate OAIWritableAggregate [required]
    */
    virtual void ipamAggregatesUpdate(const qint32 &id, const OAIWritableAggregate &oai_writable_aggregate);

    /**
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesCreate(const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpAddressesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  dns_name QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  parent QString [optional]
    * @param[in]  address QString [optional]
    * @param[in]  mask_length double [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  interface QString [optional]
    * @param[in]  interface_id QString [optional]
    * @param[in]  assigned_to_interface QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  dns_name__n QString [optional]
    * @param[in]  dns_name__ic QString [optional]
    * @param[in]  dns_name__nic QString [optional]
    * @param[in]  dns_name__iew QString [optional]
    * @param[in]  dns_name__niew QString [optional]
    * @param[in]  dns_name__isw QString [optional]
    * @param[in]  dns_name__nisw QString [optional]
    * @param[in]  dns_name__ie QString [optional]
    * @param[in]  dns_name__nie QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  virtual_machine_id__n QString [optional]
    * @param[in]  virtual_machine__n QString [optional]
    * @param[in]  interface__n QString [optional]
    * @param[in]  interface_id__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamIpAddressesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mask_length = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_to_interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dns_name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interface_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesPartialUpdate(const qint32 &id, const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamIpAddressesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_ip_address OAIWritableIPAddress [required]
    */
    virtual void ipamIpAddressesUpdate(const qint32 &id, const OAIWritableIPAddress &oai_writable_ip_address);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_available_ip OAIWritableAvailableIP [required]
    */
    virtual void ipamPrefixesAvailableIpsCreate(const qint32 &id, const OAIWritableAvailableIP &oai_writable_available_ip);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesAvailableIpsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesAvailablePrefixesCreate(const qint32 &id, const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesAvailablePrefixesRead(const qint32 &id);

    /**
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesCreate(const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  is_pool QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  family double [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  within QString [optional]
    * @param[in]  within_include QString [optional]
    * @param[in]  contains QString [optional]
    * @param[in]  mask_length double [optional]
    * @param[in]  vrf_id QString [optional]
    * @param[in]  vrf QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  vlan_id QString [optional]
    * @param[in]  vlan_vid double [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  vrf_id__n QString [optional]
    * @param[in]  vrf__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  vlan_id__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamPrefixesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_pool = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &family = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &within = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &within_include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &mask_length = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &vrf_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &vlan_vid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vrf__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vlan_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesPartialUpdate(const qint32 &id, const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamPrefixesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_prefix OAIWritablePrefix [required]
    */
    virtual void ipamPrefixesUpdate(const qint32 &id, const OAIWritablePrefix &oai_writable_prefix);

    /**
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsCreate(const OAIRIR &oairir);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRirsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  is_private QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamRirsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_private = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsPartialUpdate(const qint32 &id, const OAIRIR &oairir);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRirsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oairir OAIRIR [required]
    */
    virtual void ipamRirsUpdate(const qint32 &id, const OAIRIR &oairir);

    /**
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesCreate(const OAIRole &oai_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesPartialUpdate(const qint32 &id, const OAIRole &oai_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_role OAIRole [required]
    */
    virtual void ipamRolesUpdate(const qint32 &id, const OAIRole &oai_role);

    /**
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesCreate(const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServicesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  port QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  virtual_machine_id QString [optional]
    * @param[in]  virtual_machine QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  protocol__n QString [optional]
    * @param[in]  port__n QString [optional]
    * @param[in]  port__lte QString [optional]
    * @param[in]  port__lt QString [optional]
    * @param[in]  port__gte QString [optional]
    * @param[in]  port__gt QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  virtual_machine_id__n QString [optional]
    * @param[in]  virtual_machine__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamServicesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &protocol__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &port__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &virtual_machine__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesPartialUpdate(const qint32 &id, const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamServicesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_service OAIWritableService [required]
    */
    virtual void ipamServicesUpdate(const qint32 &id, const OAIWritableService &oai_writable_service);

    /**
    * @param[in]  oai_writable_vlan_group OAIWritableVLANGroup [required]
    */
    virtual void ipamVlanGroupsCreate(const OAIWritableVLANGroup &oai_writable_vlan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlanGroupsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  description__n QString [optional]
    * @param[in]  description__ic QString [optional]
    * @param[in]  description__nic QString [optional]
    * @param[in]  description__iew QString [optional]
    * @param[in]  description__niew QString [optional]
    * @param[in]  description__isw QString [optional]
    * @param[in]  description__nisw QString [optional]
    * @param[in]  description__ie QString [optional]
    * @param[in]  description__nie QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVlanGroupsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan_group OAIWritableVLANGroup [required]
    */
    virtual void ipamVlanGroupsPartialUpdate(const qint32 &id, const OAIWritableVLANGroup &oai_writable_vlan_group);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlanGroupsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan_group OAIWritableVLANGroup [required]
    */
    virtual void ipamVlanGroupsUpdate(const qint32 &id, const OAIWritableVLANGroup &oai_writable_vlan_group);

    /**
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansCreate(const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlansDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  vid QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  region_id QString [optional]
    * @param[in]  region QString [optional]
    * @param[in]  site_id QString [optional]
    * @param[in]  site QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  vid__n QString [optional]
    * @param[in]  vid__lte QString [optional]
    * @param[in]  vid__lt QString [optional]
    * @param[in]  vid__gte QString [optional]
    * @param[in]  vid__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  region_id__n QString [optional]
    * @param[in]  region__n QString [optional]
    * @param[in]  site_id__n QString [optional]
    * @param[in]  site__n QString [optional]
    * @param[in]  group_id__n QString [optional]
    * @param[in]  group__n QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  status__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVlansList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vid__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansPartialUpdate(const qint32 &id, const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVlansRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vlan OAIWritableVLAN [required]
    */
    virtual void ipamVlansUpdate(const qint32 &id, const OAIWritableVLAN &oai_writable_vlan);

    /**
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsCreate(const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVrfsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  rd QString [optional]
    * @param[in]  enforce_unique QString [optional]
    * @param[in]  tenant_group_id QString [optional]
    * @param[in]  tenant_group QString [optional]
    * @param[in]  tenant_id QString [optional]
    * @param[in]  tenant QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  rd__n QString [optional]
    * @param[in]  rd__ic QString [optional]
    * @param[in]  rd__nic QString [optional]
    * @param[in]  rd__iew QString [optional]
    * @param[in]  rd__niew QString [optional]
    * @param[in]  rd__isw QString [optional]
    * @param[in]  rd__nisw QString [optional]
    * @param[in]  rd__ie QString [optional]
    * @param[in]  rd__nie QString [optional]
    * @param[in]  tenant_group_id__n QString [optional]
    * @param[in]  tenant_group__n QString [optional]
    * @param[in]  tenant_id__n QString [optional]
    * @param[in]  tenant__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void ipamVrfsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enforce_unique = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rd__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_group__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tenant__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsPartialUpdate(const qint32 &id, const OAIWritableVRF &oai_writable_vrf);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void ipamVrfsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_vrf OAIWritableVRF [required]
    */
    virtual void ipamVrfsUpdate(const qint32 &id, const OAIWritableVRF &oai_writable_vrf);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipamAggregatesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesListCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesReadCallback(OAIHttpRequestWorker *worker);
    void ipamAggregatesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesListCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesReadCallback(OAIHttpRequestWorker *worker);
    void ipamIpAddressesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailableIpsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailableIpsReadCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailablePrefixesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesAvailablePrefixesReadCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesListCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesReadCallback(OAIHttpRequestWorker *worker);
    void ipamPrefixesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRirsListCallback(OAIHttpRequestWorker *worker);
    void ipamRirsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRirsReadCallback(OAIHttpRequestWorker *worker);
    void ipamRirsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamRolesListCallback(OAIHttpRequestWorker *worker);
    void ipamRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamRolesReadCallback(OAIHttpRequestWorker *worker);
    void ipamRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesCreateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamServicesListCallback(OAIHttpRequestWorker *worker);
    void ipamServicesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamServicesReadCallback(OAIHttpRequestWorker *worker);
    void ipamServicesUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsListCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsReadCallback(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVlansListCallback(OAIHttpRequestWorker *worker);
    void ipamVlansPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVlansReadCallback(OAIHttpRequestWorker *worker);
    void ipamVlansUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsCreateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsListCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsReadCallback(OAIHttpRequestWorker *worker);
    void ipamVrfsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipamAggregatesCreateSignal(OAIAggregate summary);
    void ipamAggregatesDeleteSignal();
    void ipamAggregatesListSignal(OAIIpam_aggregates_list_200_response summary);
    void ipamAggregatesPartialUpdateSignal(OAIAggregate summary);
    void ipamAggregatesReadSignal(OAIAggregate summary);
    void ipamAggregatesUpdateSignal(OAIAggregate summary);
    void ipamIpAddressesCreateSignal(OAIIPAddress summary);
    void ipamIpAddressesDeleteSignal();
    void ipamIpAddressesListSignal(OAIIpam_ip_addresses_list_200_response summary);
    void ipamIpAddressesPartialUpdateSignal(OAIIPAddress summary);
    void ipamIpAddressesReadSignal(OAIIPAddress summary);
    void ipamIpAddressesUpdateSignal(OAIIPAddress summary);
    void ipamPrefixesAvailableIpsCreateSignal(QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailableIpsReadSignal(QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailablePrefixesCreateSignal(QList<OAIAvailablePrefix> summary);
    void ipamPrefixesAvailablePrefixesReadSignal(QList<OAIAvailablePrefix> summary);
    void ipamPrefixesCreateSignal(OAIPrefix summary);
    void ipamPrefixesDeleteSignal();
    void ipamPrefixesListSignal(OAIIpam_prefixes_list_200_response summary);
    void ipamPrefixesPartialUpdateSignal(OAIPrefix summary);
    void ipamPrefixesReadSignal(OAIPrefix summary);
    void ipamPrefixesUpdateSignal(OAIPrefix summary);
    void ipamRirsCreateSignal(OAIRIR summary);
    void ipamRirsDeleteSignal();
    void ipamRirsListSignal(OAIIpam_rirs_list_200_response summary);
    void ipamRirsPartialUpdateSignal(OAIRIR summary);
    void ipamRirsReadSignal(OAIRIR summary);
    void ipamRirsUpdateSignal(OAIRIR summary);
    void ipamRolesCreateSignal(OAIRole summary);
    void ipamRolesDeleteSignal();
    void ipamRolesListSignal(OAIIpam_roles_list_200_response summary);
    void ipamRolesPartialUpdateSignal(OAIRole summary);
    void ipamRolesReadSignal(OAIRole summary);
    void ipamRolesUpdateSignal(OAIRole summary);
    void ipamServicesCreateSignal(OAIService summary);
    void ipamServicesDeleteSignal();
    void ipamServicesListSignal(OAIIpam_services_list_200_response summary);
    void ipamServicesPartialUpdateSignal(OAIService summary);
    void ipamServicesReadSignal(OAIService summary);
    void ipamServicesUpdateSignal(OAIService summary);
    void ipamVlanGroupsCreateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsDeleteSignal();
    void ipamVlanGroupsListSignal(OAIIpam_vlan_groups_list_200_response summary);
    void ipamVlanGroupsPartialUpdateSignal(OAIVLANGroup summary);
    void ipamVlanGroupsReadSignal(OAIVLANGroup summary);
    void ipamVlanGroupsUpdateSignal(OAIVLANGroup summary);
    void ipamVlansCreateSignal(OAIVLAN summary);
    void ipamVlansDeleteSignal();
    void ipamVlansListSignal(OAIIpam_vlans_list_200_response summary);
    void ipamVlansPartialUpdateSignal(OAIVLAN summary);
    void ipamVlansReadSignal(OAIVLAN summary);
    void ipamVlansUpdateSignal(OAIVLAN summary);
    void ipamVrfsCreateSignal(OAIVRF summary);
    void ipamVrfsDeleteSignal();
    void ipamVrfsListSignal(OAIIpam_vrfs_list_200_response summary);
    void ipamVrfsPartialUpdateSignal(OAIVRF summary);
    void ipamVrfsReadSignal(OAIVRF summary);
    void ipamVrfsUpdateSignal(OAIVRF summary);


    void ipamAggregatesCreateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamAggregatesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_aggregates_list_200_response summary);
    void ipamAggregatesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesReadSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamAggregatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAggregate summary);
    void ipamIpAddressesCreateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamIpAddressesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_ip_addresses_list_200_response summary);
    void ipamIpAddressesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesReadSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamIpAddressesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIPAddress summary);
    void ipamPrefixesAvailableIpsCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailableIpsReadSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailableIP> summary);
    void ipamPrefixesAvailablePrefixesCreateSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailablePrefix> summary);
    void ipamPrefixesAvailablePrefixesReadSignalFull(OAIHttpRequestWorker *worker, QList<OAIAvailablePrefix> summary);
    void ipamPrefixesCreateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamPrefixesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_prefixes_list_200_response summary);
    void ipamPrefixesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesReadSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamPrefixesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPrefix summary);
    void ipamRirsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRirsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_rirs_list_200_response summary);
    void ipamRirsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsReadSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRirsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRIR summary);
    void ipamRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamRolesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_roles_list_200_response summary);
    void ipamRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesReadSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void ipamServicesCreateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamServicesListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_services_list_200_response summary);
    void ipamServicesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesReadSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIService summary);
    void ipamVlanGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlanGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vlan_groups_list_200_response summary);
    void ipamVlanGroupsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsReadSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlanGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLANGroup summary);
    void ipamVlansCreateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVlansListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vlans_list_200_response summary);
    void ipamVlansPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansReadSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVlansUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVLAN summary);
    void ipamVrfsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipamVrfsListSignalFull(OAIHttpRequestWorker *worker, OAIIpam_vrfs_list_200_response summary);
    void ipamVrfsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsReadSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);
    void ipamVrfsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVRF summary);

    Q_DECL_DEPRECATED_X("Use ipamAggregatesCreateSignalError() instead")
    void ipamAggregatesCreateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesCreateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesDeleteSignalError() instead")
    void ipamAggregatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesListSignalError() instead")
    void ipamAggregatesListSignalE(OAIIpam_aggregates_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesListSignalError(OAIIpam_aggregates_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesPartialUpdateSignalError() instead")
    void ipamAggregatesPartialUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesPartialUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesReadSignalError() instead")
    void ipamAggregatesReadSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesReadSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesUpdateSignalError() instead")
    void ipamAggregatesUpdateSignalE(OAIAggregate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesUpdateSignalError(OAIAggregate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesCreateSignalError() instead")
    void ipamIpAddressesCreateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesCreateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesDeleteSignalError() instead")
    void ipamIpAddressesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesListSignalError() instead")
    void ipamIpAddressesListSignalE(OAIIpam_ip_addresses_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesListSignalError(OAIIpam_ip_addresses_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesPartialUpdateSignalError() instead")
    void ipamIpAddressesPartialUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesPartialUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesReadSignalError() instead")
    void ipamIpAddressesReadSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesReadSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesUpdateSignalError() instead")
    void ipamIpAddressesUpdateSignalE(OAIIPAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesUpdateSignalError(OAIIPAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsCreateSignalError() instead")
    void ipamPrefixesAvailableIpsCreateSignalE(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsCreateSignalError(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsReadSignalError() instead")
    void ipamPrefixesAvailableIpsReadSignalE(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsReadSignalError(QList<OAIAvailableIP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesCreateSignalError() instead")
    void ipamPrefixesAvailablePrefixesCreateSignalE(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesCreateSignalError(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesReadSignalError() instead")
    void ipamPrefixesAvailablePrefixesReadSignalE(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesReadSignalError(QList<OAIAvailablePrefix> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesCreateSignalError() instead")
    void ipamPrefixesCreateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesCreateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesDeleteSignalError() instead")
    void ipamPrefixesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesListSignalError() instead")
    void ipamPrefixesListSignalE(OAIIpam_prefixes_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesListSignalError(OAIIpam_prefixes_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesPartialUpdateSignalError() instead")
    void ipamPrefixesPartialUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesPartialUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesReadSignalError() instead")
    void ipamPrefixesReadSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesReadSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesUpdateSignalError() instead")
    void ipamPrefixesUpdateSignalE(OAIPrefix summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesUpdateSignalError(OAIPrefix summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsCreateSignalError() instead")
    void ipamRirsCreateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsCreateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsDeleteSignalError() instead")
    void ipamRirsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsListSignalError() instead")
    void ipamRirsListSignalE(OAIIpam_rirs_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsListSignalError(OAIIpam_rirs_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsPartialUpdateSignalError() instead")
    void ipamRirsPartialUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsPartialUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsReadSignalError() instead")
    void ipamRirsReadSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsReadSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsUpdateSignalError() instead")
    void ipamRirsUpdateSignalE(OAIRIR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsUpdateSignalError(OAIRIR summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesCreateSignalError() instead")
    void ipamRolesCreateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesCreateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesDeleteSignalError() instead")
    void ipamRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesListSignalError() instead")
    void ipamRolesListSignalE(OAIIpam_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesListSignalError(OAIIpam_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesPartialUpdateSignalError() instead")
    void ipamRolesPartialUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesPartialUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesReadSignalError() instead")
    void ipamRolesReadSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesReadSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesUpdateSignalError() instead")
    void ipamRolesUpdateSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesUpdateSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesCreateSignalError() instead")
    void ipamServicesCreateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesCreateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesDeleteSignalError() instead")
    void ipamServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesListSignalError() instead")
    void ipamServicesListSignalE(OAIIpam_services_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesListSignalError(OAIIpam_services_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesPartialUpdateSignalError() instead")
    void ipamServicesPartialUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesPartialUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesReadSignalError() instead")
    void ipamServicesReadSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesReadSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesUpdateSignalError() instead")
    void ipamServicesUpdateSignalE(OAIService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesUpdateSignalError(OAIService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsCreateSignalError() instead")
    void ipamVlanGroupsCreateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsCreateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsDeleteSignalError() instead")
    void ipamVlanGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsListSignalError() instead")
    void ipamVlanGroupsListSignalE(OAIIpam_vlan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsListSignalError(OAIIpam_vlan_groups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsPartialUpdateSignalError() instead")
    void ipamVlanGroupsPartialUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsPartialUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsReadSignalError() instead")
    void ipamVlanGroupsReadSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsReadSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsUpdateSignalError() instead")
    void ipamVlanGroupsUpdateSignalE(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsUpdateSignalError(OAIVLANGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansCreateSignalError() instead")
    void ipamVlansCreateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansCreateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansDeleteSignalError() instead")
    void ipamVlansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansListSignalError() instead")
    void ipamVlansListSignalE(OAIIpam_vlans_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansListSignalError(OAIIpam_vlans_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansPartialUpdateSignalError() instead")
    void ipamVlansPartialUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansPartialUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansReadSignalError() instead")
    void ipamVlansReadSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansReadSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansUpdateSignalError() instead")
    void ipamVlansUpdateSignalE(OAIVLAN summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansUpdateSignalError(OAIVLAN summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsCreateSignalError() instead")
    void ipamVrfsCreateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsCreateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsDeleteSignalError() instead")
    void ipamVrfsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsListSignalError() instead")
    void ipamVrfsListSignalE(OAIIpam_vrfs_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsListSignalError(OAIIpam_vrfs_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsPartialUpdateSignalError() instead")
    void ipamVrfsPartialUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsPartialUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsReadSignalError() instead")
    void ipamVrfsReadSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsReadSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsUpdateSignalError() instead")
    void ipamVrfsUpdateSignalE(OAIVRF summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsUpdateSignalError(OAIVRF summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipamAggregatesCreateSignalErrorFull() instead")
    void ipamAggregatesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesDeleteSignalErrorFull() instead")
    void ipamAggregatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesListSignalErrorFull() instead")
    void ipamAggregatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesPartialUpdateSignalErrorFull() instead")
    void ipamAggregatesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesReadSignalErrorFull() instead")
    void ipamAggregatesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamAggregatesUpdateSignalErrorFull() instead")
    void ipamAggregatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamAggregatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesCreateSignalErrorFull() instead")
    void ipamIpAddressesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesDeleteSignalErrorFull() instead")
    void ipamIpAddressesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesListSignalErrorFull() instead")
    void ipamIpAddressesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesPartialUpdateSignalErrorFull() instead")
    void ipamIpAddressesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesReadSignalErrorFull() instead")
    void ipamIpAddressesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamIpAddressesUpdateSignalErrorFull() instead")
    void ipamIpAddressesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamIpAddressesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsCreateSignalErrorFull() instead")
    void ipamPrefixesAvailableIpsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailableIpsReadSignalErrorFull() instead")
    void ipamPrefixesAvailableIpsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailableIpsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesCreateSignalErrorFull() instead")
    void ipamPrefixesAvailablePrefixesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesAvailablePrefixesReadSignalErrorFull() instead")
    void ipamPrefixesAvailablePrefixesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesAvailablePrefixesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesCreateSignalErrorFull() instead")
    void ipamPrefixesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesDeleteSignalErrorFull() instead")
    void ipamPrefixesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesListSignalErrorFull() instead")
    void ipamPrefixesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesPartialUpdateSignalErrorFull() instead")
    void ipamPrefixesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesReadSignalErrorFull() instead")
    void ipamPrefixesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamPrefixesUpdateSignalErrorFull() instead")
    void ipamPrefixesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamPrefixesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsCreateSignalErrorFull() instead")
    void ipamRirsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsDeleteSignalErrorFull() instead")
    void ipamRirsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsListSignalErrorFull() instead")
    void ipamRirsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsPartialUpdateSignalErrorFull() instead")
    void ipamRirsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsReadSignalErrorFull() instead")
    void ipamRirsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRirsUpdateSignalErrorFull() instead")
    void ipamRirsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRirsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesCreateSignalErrorFull() instead")
    void ipamRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesDeleteSignalErrorFull() instead")
    void ipamRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesListSignalErrorFull() instead")
    void ipamRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesPartialUpdateSignalErrorFull() instead")
    void ipamRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesReadSignalErrorFull() instead")
    void ipamRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamRolesUpdateSignalErrorFull() instead")
    void ipamRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesCreateSignalErrorFull() instead")
    void ipamServicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesDeleteSignalErrorFull() instead")
    void ipamServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesListSignalErrorFull() instead")
    void ipamServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesPartialUpdateSignalErrorFull() instead")
    void ipamServicesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesReadSignalErrorFull() instead")
    void ipamServicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamServicesUpdateSignalErrorFull() instead")
    void ipamServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsCreateSignalErrorFull() instead")
    void ipamVlanGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsDeleteSignalErrorFull() instead")
    void ipamVlanGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsListSignalErrorFull() instead")
    void ipamVlanGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsPartialUpdateSignalErrorFull() instead")
    void ipamVlanGroupsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsReadSignalErrorFull() instead")
    void ipamVlanGroupsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlanGroupsUpdateSignalErrorFull() instead")
    void ipamVlanGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlanGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansCreateSignalErrorFull() instead")
    void ipamVlansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansDeleteSignalErrorFull() instead")
    void ipamVlansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansListSignalErrorFull() instead")
    void ipamVlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansPartialUpdateSignalErrorFull() instead")
    void ipamVlansPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansReadSignalErrorFull() instead")
    void ipamVlansReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVlansUpdateSignalErrorFull() instead")
    void ipamVlansUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVlansUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsCreateSignalErrorFull() instead")
    void ipamVrfsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsDeleteSignalErrorFull() instead")
    void ipamVrfsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsListSignalErrorFull() instead")
    void ipamVrfsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsPartialUpdateSignalErrorFull() instead")
    void ipamVrfsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsReadSignalErrorFull() instead")
    void ipamVrfsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipamVrfsUpdateSignalErrorFull() instead")
    void ipamVrfsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipamVrfsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
