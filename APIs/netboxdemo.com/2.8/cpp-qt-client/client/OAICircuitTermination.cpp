/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICircuitTermination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICircuitTermination::OAICircuitTermination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICircuitTermination::OAICircuitTermination() {
    this->initializeModel();
}

OAICircuitTermination::~OAICircuitTermination() {}

void OAICircuitTermination::initializeModel() {

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_circuit_isSet = false;
    m_circuit_isValid = false;

    m_connected_endpoint_isSet = false;
    m_connected_endpoint_isValid = false;

    m_connected_endpoint_type_isSet = false;
    m_connected_endpoint_type_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_port_speed_isSet = false;
    m_port_speed_isValid = false;

    m_pp_info_isSet = false;
    m_pp_info_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_term_side_isSet = false;
    m_term_side_isValid = false;

    m_upstream_speed_isSet = false;
    m_upstream_speed_isValid = false;

    m_xconnect_id_isSet = false;
    m_xconnect_id_isValid = false;
}

void OAICircuitTermination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICircuitTermination::fromJsonObject(QJsonObject json) {

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_circuit_isValid = ::OpenAPI::fromJsonValue(m_circuit, json[QString("circuit")]);
    m_circuit_isSet = !json[QString("circuit")].isNull() && m_circuit_isValid;

    m_connected_endpoint_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint, json[QString("connected_endpoint")]);
    m_connected_endpoint_isSet = !json[QString("connected_endpoint")].isNull() && m_connected_endpoint_isValid;

    m_connected_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint_type, json[QString("connected_endpoint_type")]);
    m_connected_endpoint_type_isSet = !json[QString("connected_endpoint_type")].isNull() && m_connected_endpoint_type_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_port_speed_isValid = ::OpenAPI::fromJsonValue(m_port_speed, json[QString("port_speed")]);
    m_port_speed_isSet = !json[QString("port_speed")].isNull() && m_port_speed_isValid;

    m_pp_info_isValid = ::OpenAPI::fromJsonValue(m_pp_info, json[QString("pp_info")]);
    m_pp_info_isSet = !json[QString("pp_info")].isNull() && m_pp_info_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_term_side_isValid = ::OpenAPI::fromJsonValue(m_term_side, json[QString("term_side")]);
    m_term_side_isSet = !json[QString("term_side")].isNull() && m_term_side_isValid;

    m_upstream_speed_isValid = ::OpenAPI::fromJsonValue(m_upstream_speed, json[QString("upstream_speed")]);
    m_upstream_speed_isSet = !json[QString("upstream_speed")].isNull() && m_upstream_speed_isValid;

    m_xconnect_id_isValid = ::OpenAPI::fromJsonValue(m_xconnect_id, json[QString("xconnect_id")]);
    m_xconnect_id_isSet = !json[QString("xconnect_id")].isNull() && m_xconnect_id_isValid;
}

QString OAICircuitTermination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICircuitTermination::asJsonObject() const {
    QJsonObject obj;
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_circuit.isSet()) {
        obj.insert(QString("circuit"), ::OpenAPI::toJsonValue(m_circuit));
    }
    if (m_connected_endpoint.size() > 0) {
        obj.insert(QString("connected_endpoint"), ::OpenAPI::toJsonValue(m_connected_endpoint));
    }
    if (m_connected_endpoint_type_isSet) {
        obj.insert(QString("connected_endpoint_type"), ::OpenAPI::toJsonValue(m_connected_endpoint_type));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_port_speed_isSet) {
        obj.insert(QString("port_speed"), ::OpenAPI::toJsonValue(m_port_speed));
    }
    if (m_pp_info_isSet) {
        obj.insert(QString("pp_info"), ::OpenAPI::toJsonValue(m_pp_info));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_term_side_isSet) {
        obj.insert(QString("term_side"), ::OpenAPI::toJsonValue(m_term_side));
    }
    if (m_upstream_speed_isSet) {
        obj.insert(QString("upstream_speed"), ::OpenAPI::toJsonValue(m_upstream_speed));
    }
    if (m_xconnect_id_isSet) {
        obj.insert(QString("xconnect_id"), ::OpenAPI::toJsonValue(m_xconnect_id));
    }
    return obj;
}

OAINestedCable OAICircuitTermination::getCable() const {
    return m_cable;
}
void OAICircuitTermination::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAICircuitTermination::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAICircuitTermination::is_cable_Valid() const{
    return m_cable_isValid;
}

OAINestedCircuit OAICircuitTermination::getCircuit() const {
    return m_circuit;
}
void OAICircuitTermination::setCircuit(const OAINestedCircuit &circuit) {
    m_circuit = circuit;
    m_circuit_isSet = true;
}

bool OAICircuitTermination::is_circuit_Set() const{
    return m_circuit_isSet;
}

bool OAICircuitTermination::is_circuit_Valid() const{
    return m_circuit_isValid;
}

QMap<QString, QString> OAICircuitTermination::getConnectedEndpoint() const {
    return m_connected_endpoint;
}
void OAICircuitTermination::setConnectedEndpoint(const QMap<QString, QString> &connected_endpoint) {
    m_connected_endpoint = connected_endpoint;
    m_connected_endpoint_isSet = true;
}

bool OAICircuitTermination::is_connected_endpoint_Set() const{
    return m_connected_endpoint_isSet;
}

bool OAICircuitTermination::is_connected_endpoint_Valid() const{
    return m_connected_endpoint_isValid;
}

QString OAICircuitTermination::getConnectedEndpointType() const {
    return m_connected_endpoint_type;
}
void OAICircuitTermination::setConnectedEndpointType(const QString &connected_endpoint_type) {
    m_connected_endpoint_type = connected_endpoint_type;
    m_connected_endpoint_type_isSet = true;
}

bool OAICircuitTermination::is_connected_endpoint_type_Set() const{
    return m_connected_endpoint_type_isSet;
}

bool OAICircuitTermination::is_connected_endpoint_type_Valid() const{
    return m_connected_endpoint_type_isValid;
}

OAIConnection_status OAICircuitTermination::getConnectionStatus() const {
    return m_connection_status;
}
void OAICircuitTermination::setConnectionStatus(const OAIConnection_status &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAICircuitTermination::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAICircuitTermination::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAICircuitTermination::getDescription() const {
    return m_description;
}
void OAICircuitTermination::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICircuitTermination::is_description_Set() const{
    return m_description_isSet;
}

bool OAICircuitTermination::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICircuitTermination::getId() const {
    return m_id;
}
void OAICircuitTermination::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICircuitTermination::is_id_Set() const{
    return m_id_isSet;
}

bool OAICircuitTermination::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICircuitTermination::getPortSpeed() const {
    return m_port_speed;
}
void OAICircuitTermination::setPortSpeed(const qint32 &port_speed) {
    m_port_speed = port_speed;
    m_port_speed_isSet = true;
}

bool OAICircuitTermination::is_port_speed_Set() const{
    return m_port_speed_isSet;
}

bool OAICircuitTermination::is_port_speed_Valid() const{
    return m_port_speed_isValid;
}

QString OAICircuitTermination::getPpInfo() const {
    return m_pp_info;
}
void OAICircuitTermination::setPpInfo(const QString &pp_info) {
    m_pp_info = pp_info;
    m_pp_info_isSet = true;
}

bool OAICircuitTermination::is_pp_info_Set() const{
    return m_pp_info_isSet;
}

bool OAICircuitTermination::is_pp_info_Valid() const{
    return m_pp_info_isValid;
}

OAINestedSite OAICircuitTermination::getSite() const {
    return m_site;
}
void OAICircuitTermination::setSite(const OAINestedSite &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAICircuitTermination::is_site_Set() const{
    return m_site_isSet;
}

bool OAICircuitTermination::is_site_Valid() const{
    return m_site_isValid;
}

QString OAICircuitTermination::getTermSide() const {
    return m_term_side;
}
void OAICircuitTermination::setTermSide(const QString &term_side) {
    m_term_side = term_side;
    m_term_side_isSet = true;
}

bool OAICircuitTermination::is_term_side_Set() const{
    return m_term_side_isSet;
}

bool OAICircuitTermination::is_term_side_Valid() const{
    return m_term_side_isValid;
}

qint32 OAICircuitTermination::getUpstreamSpeed() const {
    return m_upstream_speed;
}
void OAICircuitTermination::setUpstreamSpeed(const qint32 &upstream_speed) {
    m_upstream_speed = upstream_speed;
    m_upstream_speed_isSet = true;
}

bool OAICircuitTermination::is_upstream_speed_Set() const{
    return m_upstream_speed_isSet;
}

bool OAICircuitTermination::is_upstream_speed_Valid() const{
    return m_upstream_speed_isValid;
}

QString OAICircuitTermination::getXconnectId() const {
    return m_xconnect_id;
}
void OAICircuitTermination::setXconnectId(const QString &xconnect_id) {
    m_xconnect_id = xconnect_id;
    m_xconnect_id_isSet = true;
}

bool OAICircuitTermination::is_xconnect_id_Set() const{
    return m_xconnect_id_isSet;
}

bool OAICircuitTermination::is_xconnect_id_Valid() const{
    return m_xconnect_id_isValid;
}

bool OAICircuitTermination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pp_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xconnect_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICircuitTermination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_circuit_isValid && m_port_speed_isValid && m_site_isValid && m_term_side_isValid && true;
}

} // namespace OpenAPI
