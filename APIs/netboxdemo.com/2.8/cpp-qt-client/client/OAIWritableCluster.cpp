/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableCluster::OAIWritableCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableCluster::OAIWritableCluster() {
    this->initializeModel();
}

OAIWritableCluster::~OAIWritableCluster() {}

void OAIWritableCluster::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_device_count_isSet = false;
    m_device_count_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_virtualmachine_count_isSet = false;
    m_virtualmachine_count_isValid = false;
}

void OAIWritableCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableCluster::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_device_count_isValid = ::OpenAPI::fromJsonValue(m_device_count, json[QString("device_count")]);
    m_device_count_isSet = !json[QString("device_count")].isNull() && m_device_count_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_virtualmachine_count_isValid = ::OpenAPI::fromJsonValue(m_virtualmachine_count, json[QString("virtualmachine_count")]);
    m_virtualmachine_count_isSet = !json[QString("virtualmachine_count")].isNull() && m_virtualmachine_count_isValid;
}

QString OAIWritableCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_device_count_isSet) {
        obj.insert(QString("device_count"), ::OpenAPI::toJsonValue(m_device_count));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_virtualmachine_count_isSet) {
        obj.insert(QString("virtualmachine_count"), ::OpenAPI::toJsonValue(m_virtualmachine_count));
    }
    return obj;
}

QString OAIWritableCluster::getComments() const {
    return m_comments;
}
void OAIWritableCluster::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritableCluster::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritableCluster::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIWritableCluster::getCreated() const {
    return m_created;
}
void OAIWritableCluster::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableCluster::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableCluster::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableCluster::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableCluster::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableCluster::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableCluster::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIWritableCluster::getDeviceCount() const {
    return m_device_count;
}
void OAIWritableCluster::setDeviceCount(const qint32 &device_count) {
    m_device_count = device_count;
    m_device_count_isSet = true;
}

bool OAIWritableCluster::is_device_count_Set() const{
    return m_device_count_isSet;
}

bool OAIWritableCluster::is_device_count_Valid() const{
    return m_device_count_isValid;
}

qint32 OAIWritableCluster::getGroup() const {
    return m_group;
}
void OAIWritableCluster::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIWritableCluster::is_group_Set() const{
    return m_group_isSet;
}

bool OAIWritableCluster::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIWritableCluster::getId() const {
    return m_id;
}
void OAIWritableCluster::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableCluster::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableCluster::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableCluster::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableCluster::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableCluster::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableCluster::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableCluster::getName() const {
    return m_name;
}
void OAIWritableCluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableCluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableCluster::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIWritableCluster::getSite() const {
    return m_site;
}
void OAIWritableCluster::setSite(const qint32 &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIWritableCluster::is_site_Set() const{
    return m_site_isSet;
}

bool OAIWritableCluster::is_site_Valid() const{
    return m_site_isValid;
}

QList<QString> OAIWritableCluster::getTags() const {
    return m_tags;
}
void OAIWritableCluster::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableCluster::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableCluster::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIWritableCluster::getTenant() const {
    return m_tenant;
}
void OAIWritableCluster::setTenant(const qint32 &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIWritableCluster::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIWritableCluster::is_tenant_Valid() const{
    return m_tenant_isValid;
}

qint32 OAIWritableCluster::getType() const {
    return m_type;
}
void OAIWritableCluster::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableCluster::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableCluster::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIWritableCluster::getVirtualmachineCount() const {
    return m_virtualmachine_count;
}
void OAIWritableCluster::setVirtualmachineCount(const qint32 &virtualmachine_count) {
    m_virtualmachine_count = virtualmachine_count;
    m_virtualmachine_count_isSet = true;
}

bool OAIWritableCluster::is_virtualmachine_count_Set() const{
    return m_virtualmachine_count_isSet;
}

bool OAIWritableCluster::is_virtualmachine_count_Valid() const{
    return m_virtualmachine_count_isValid;
}

bool OAIWritableCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtualmachine_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
