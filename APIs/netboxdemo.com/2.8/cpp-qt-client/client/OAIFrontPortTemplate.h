/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFrontPortTemplate.h
 *
 * 
 */

#ifndef OAIFrontPortTemplate_H
#define OAIFrontPortTemplate_H

#include <QJsonObject>

#include "OAINestedDeviceType.h"
#include "OAINestedRearPortTemplate.h"
#include "OAIType_2.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINestedDeviceType;
class OAINestedRearPortTemplate;
class OAIType_2;

class OAIFrontPortTemplate : public OAIObject {
public:
    OAIFrontPortTemplate();
    OAIFrontPortTemplate(QString json);
    ~OAIFrontPortTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINestedDeviceType getDeviceType() const;
    void setDeviceType(const OAINestedDeviceType &device_type);
    bool is_device_type_Set() const;
    bool is_device_type_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINestedRearPortTemplate getRearPort() const;
    void setRearPort(const OAINestedRearPortTemplate &rear_port);
    bool is_rear_port_Set() const;
    bool is_rear_port_Valid() const;

    qint32 getRearPortPosition() const;
    void setRearPortPosition(const qint32 &rear_port_position);
    bool is_rear_port_position_Set() const;
    bool is_rear_port_position_Valid() const;

    OAIType_2 getType() const;
    void setType(const OAIType_2 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINestedDeviceType m_device_type;
    bool m_device_type_isSet;
    bool m_device_type_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINestedRearPortTemplate m_rear_port;
    bool m_rear_port_isSet;
    bool m_rear_port_isValid;

    qint32 m_rear_port_position;
    bool m_rear_port_position_isSet;
    bool m_rear_port_position_isValid;

    OAIType_2 m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFrontPortTemplate)

#endif // OAIFrontPortTemplate_H
