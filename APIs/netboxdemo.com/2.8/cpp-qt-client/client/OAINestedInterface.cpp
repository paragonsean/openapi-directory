/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINestedInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINestedInterface::OAINestedInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINestedInterface::OAINestedInterface() {
    this->initializeModel();
}

OAINestedInterface::~OAINestedInterface() {}

void OAINestedInterface::initializeModel() {

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINestedInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINestedInterface::fromJsonObject(QJsonObject json) {

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINestedInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINestedInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_cable_isSet) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAINestedInterface::getCable() const {
    return m_cable;
}
void OAINestedInterface::setCable(const qint32 &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAINestedInterface::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAINestedInterface::is_cable_Valid() const{
    return m_cable_isValid;
}

OAIConnection_status OAINestedInterface::getConnectionStatus() const {
    return m_connection_status;
}
void OAINestedInterface::setConnectionStatus(const OAIConnection_status &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAINestedInterface::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAINestedInterface::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

OAINestedDevice OAINestedInterface::getDevice() const {
    return m_device;
}
void OAINestedInterface::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAINestedInterface::is_device_Set() const{
    return m_device_isSet;
}

bool OAINestedInterface::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAINestedInterface::getId() const {
    return m_id;
}
void OAINestedInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINestedInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAINestedInterface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINestedInterface::getName() const {
    return m_name;
}
void OAINestedInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINestedInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAINestedInterface::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINestedInterface::getUrl() const {
    return m_url;
}
void OAINestedInterface::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINestedInterface::is_url_Set() const{
    return m_url_isSet;
}

bool OAINestedInterface::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINestedInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINestedInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
