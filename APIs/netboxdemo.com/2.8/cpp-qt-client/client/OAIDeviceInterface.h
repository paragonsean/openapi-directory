/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceInterface.h
 *
 * 
 */

#ifndef OAIDeviceInterface_H
#define OAIDeviceInterface_H

#include <QJsonObject>

#include "OAIConnection_status.h"
#include "OAIMode.h"
#include "OAINestedCable.h"
#include "OAINestedDevice.h"
#include "OAINestedInterface.h"
#include "OAINestedVLAN.h"
#include "OAIType_1.h"
#include <QList>
#include <QMap>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINestedCable;
class OAIConnection_status;
class OAINestedDevice;
class OAINestedInterface;
class OAIMode;
class OAINestedVLAN;
class OAIType_1;

class OAIDeviceInterface : public OAIObject {
public:
    OAIDeviceInterface();
    OAIDeviceInterface(QString json);
    ~OAIDeviceInterface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINestedCable getCable() const;
    void setCable(const OAINestedCable &cable);
    bool is_cable_Set() const;
    bool is_cable_Valid() const;

    QMap<QString, QString> getConnectedEndpoint() const;
    void setConnectedEndpoint(const QMap<QString, QString> &connected_endpoint);
    bool is_connected_endpoint_Set() const;
    bool is_connected_endpoint_Valid() const;

    QString getConnectedEndpointType() const;
    void setConnectedEndpointType(const QString &connected_endpoint_type);
    bool is_connected_endpoint_type_Set() const;
    bool is_connected_endpoint_type_Valid() const;

    OAIConnection_status getConnectionStatus() const;
    void setConnectionStatus(const OAIConnection_status &connection_status);
    bool is_connection_status_Set() const;
    bool is_connection_status_Valid() const;

    qint32 getCountIpaddresses() const;
    void setCountIpaddresses(const qint32 &count_ipaddresses);
    bool is_count_ipaddresses_Set() const;
    bool is_count_ipaddresses_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAINestedDevice getDevice() const;
    void setDevice(const OAINestedDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAINestedInterface getLag() const;
    void setLag(const OAINestedInterface &lag);
    bool is_lag_Set() const;
    bool is_lag_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    bool isMgmtOnly() const;
    void setMgmtOnly(const bool &mgmt_only);
    bool is_mgmt_only_Set() const;
    bool is_mgmt_only_Valid() const;

    OAIMode getMode() const;
    void setMode(const OAIMode &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    qint32 getMtu() const;
    void setMtu(const qint32 &mtu);
    bool is_mtu_Set() const;
    bool is_mtu_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QSet<OAINestedVLAN> getTaggedVlans() const;
    void setTaggedVlans(const QSet<OAINestedVLAN> &tagged_vlans);
    bool is_tagged_vlans_Set() const;
    bool is_tagged_vlans_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIType_1 getType() const;
    void setType(const OAIType_1 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAINestedVLAN getUntaggedVlan() const;
    void setUntaggedVlan(const OAINestedVLAN &untagged_vlan);
    bool is_untagged_vlan_Set() const;
    bool is_untagged_vlan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINestedCable m_cable;
    bool m_cable_isSet;
    bool m_cable_isValid;

    QMap<QString, QString> m_connected_endpoint;
    bool m_connected_endpoint_isSet;
    bool m_connected_endpoint_isValid;

    QString m_connected_endpoint_type;
    bool m_connected_endpoint_type_isSet;
    bool m_connected_endpoint_type_isValid;

    OAIConnection_status m_connection_status;
    bool m_connection_status_isSet;
    bool m_connection_status_isValid;

    qint32 m_count_ipaddresses;
    bool m_count_ipaddresses_isSet;
    bool m_count_ipaddresses_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAINestedDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAINestedInterface m_lag;
    bool m_lag_isSet;
    bool m_lag_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    bool m_mgmt_only;
    bool m_mgmt_only_isSet;
    bool m_mgmt_only_isValid;

    OAIMode m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    qint32 m_mtu;
    bool m_mtu_isSet;
    bool m_mtu_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QSet<OAINestedVLAN> m_tagged_vlans;
    bool m_tagged_vlans_isSet;
    bool m_tagged_vlans_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIType_1 m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAINestedVLAN m_untagged_vlan;
    bool m_untagged_vlan_isSet;
    bool m_untagged_vlan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceInterface)

#endif // OAIDeviceInterface_H
