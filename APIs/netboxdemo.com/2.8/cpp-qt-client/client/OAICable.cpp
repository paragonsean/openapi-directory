/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICable::OAICable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICable::OAICable() {
    this->initializeModel();
}

OAICable::~OAICable() {}

void OAICable::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_length_unit_isSet = false;
    m_length_unit_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_termination_a_isSet = false;
    m_termination_a_isValid = false;

    m_termination_a_id_isSet = false;
    m_termination_a_id_isValid = false;

    m_termination_a_type_isSet = false;
    m_termination_a_type_isValid = false;

    m_termination_b_isSet = false;
    m_termination_b_isValid = false;

    m_termination_b_id_isSet = false;
    m_termination_b_id_isValid = false;

    m_termination_b_type_isSet = false;
    m_termination_b_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICable::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_length_unit_isValid = ::OpenAPI::fromJsonValue(m_length_unit, json[QString("length_unit")]);
    m_length_unit_isSet = !json[QString("length_unit")].isNull() && m_length_unit_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_termination_a_isValid = ::OpenAPI::fromJsonValue(m_termination_a, json[QString("termination_a")]);
    m_termination_a_isSet = !json[QString("termination_a")].isNull() && m_termination_a_isValid;

    m_termination_a_id_isValid = ::OpenAPI::fromJsonValue(m_termination_a_id, json[QString("termination_a_id")]);
    m_termination_a_id_isSet = !json[QString("termination_a_id")].isNull() && m_termination_a_id_isValid;

    m_termination_a_type_isValid = ::OpenAPI::fromJsonValue(m_termination_a_type, json[QString("termination_a_type")]);
    m_termination_a_type_isSet = !json[QString("termination_a_type")].isNull() && m_termination_a_type_isValid;

    m_termination_b_isValid = ::OpenAPI::fromJsonValue(m_termination_b, json[QString("termination_b")]);
    m_termination_b_isSet = !json[QString("termination_b")].isNull() && m_termination_b_isValid;

    m_termination_b_id_isValid = ::OpenAPI::fromJsonValue(m_termination_b_id, json[QString("termination_b_id")]);
    m_termination_b_id_isSet = !json[QString("termination_b_id")].isNull() && m_termination_b_id_isValid;

    m_termination_b_type_isValid = ::OpenAPI::fromJsonValue(m_termination_b_type, json[QString("termination_b_type")]);
    m_termination_b_type_isSet = !json[QString("termination_b_type")].isNull() && m_termination_b_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICable::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_length_unit.isSet()) {
        obj.insert(QString("length_unit"), ::OpenAPI::toJsonValue(m_length_unit));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_termination_a.size() > 0) {
        obj.insert(QString("termination_a"), ::OpenAPI::toJsonValue(m_termination_a));
    }
    if (m_termination_a_id_isSet) {
        obj.insert(QString("termination_a_id"), ::OpenAPI::toJsonValue(m_termination_a_id));
    }
    if (m_termination_a_type_isSet) {
        obj.insert(QString("termination_a_type"), ::OpenAPI::toJsonValue(m_termination_a_type));
    }
    if (m_termination_b.size() > 0) {
        obj.insert(QString("termination_b"), ::OpenAPI::toJsonValue(m_termination_b));
    }
    if (m_termination_b_id_isSet) {
        obj.insert(QString("termination_b_id"), ::OpenAPI::toJsonValue(m_termination_b_id));
    }
    if (m_termination_b_type_isSet) {
        obj.insert(QString("termination_b_type"), ::OpenAPI::toJsonValue(m_termination_b_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICable::getColor() const {
    return m_color;
}
void OAICable::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICable::is_color_Set() const{
    return m_color_isSet;
}

bool OAICable::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAICable::getId() const {
    return m_id;
}
void OAICable::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICable::is_id_Set() const{
    return m_id_isSet;
}

bool OAICable::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICable::getLabel() const {
    return m_label;
}
void OAICable::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICable::is_label_Set() const{
    return m_label_isSet;
}

bool OAICable::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAICable::getLength() const {
    return m_length;
}
void OAICable::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAICable::is_length_Set() const{
    return m_length_isSet;
}

bool OAICable::is_length_Valid() const{
    return m_length_isValid;
}

OAILength_unit OAICable::getLengthUnit() const {
    return m_length_unit;
}
void OAICable::setLengthUnit(const OAILength_unit &length_unit) {
    m_length_unit = length_unit;
    m_length_unit_isSet = true;
}

bool OAICable::is_length_unit_Set() const{
    return m_length_unit_isSet;
}

bool OAICable::is_length_unit_Valid() const{
    return m_length_unit_isValid;
}

OAIStatus OAICable::getStatus() const {
    return m_status;
}
void OAICable::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICable::is_status_Set() const{
    return m_status_isSet;
}

bool OAICable::is_status_Valid() const{
    return m_status_isValid;
}

QMap<QString, QString> OAICable::getTerminationA() const {
    return m_termination_a;
}
void OAICable::setTerminationA(const QMap<QString, QString> &termination_a) {
    m_termination_a = termination_a;
    m_termination_a_isSet = true;
}

bool OAICable::is_termination_a_Set() const{
    return m_termination_a_isSet;
}

bool OAICable::is_termination_a_Valid() const{
    return m_termination_a_isValid;
}

qint32 OAICable::getTerminationAId() const {
    return m_termination_a_id;
}
void OAICable::setTerminationAId(const qint32 &termination_a_id) {
    m_termination_a_id = termination_a_id;
    m_termination_a_id_isSet = true;
}

bool OAICable::is_termination_a_id_Set() const{
    return m_termination_a_id_isSet;
}

bool OAICable::is_termination_a_id_Valid() const{
    return m_termination_a_id_isValid;
}

QString OAICable::getTerminationAType() const {
    return m_termination_a_type;
}
void OAICable::setTerminationAType(const QString &termination_a_type) {
    m_termination_a_type = termination_a_type;
    m_termination_a_type_isSet = true;
}

bool OAICable::is_termination_a_type_Set() const{
    return m_termination_a_type_isSet;
}

bool OAICable::is_termination_a_type_Valid() const{
    return m_termination_a_type_isValid;
}

QMap<QString, QString> OAICable::getTerminationB() const {
    return m_termination_b;
}
void OAICable::setTerminationB(const QMap<QString, QString> &termination_b) {
    m_termination_b = termination_b;
    m_termination_b_isSet = true;
}

bool OAICable::is_termination_b_Set() const{
    return m_termination_b_isSet;
}

bool OAICable::is_termination_b_Valid() const{
    return m_termination_b_isValid;
}

qint32 OAICable::getTerminationBId() const {
    return m_termination_b_id;
}
void OAICable::setTerminationBId(const qint32 &termination_b_id) {
    m_termination_b_id = termination_b_id;
    m_termination_b_id_isSet = true;
}

bool OAICable::is_termination_b_id_Set() const{
    return m_termination_b_id_isSet;
}

bool OAICable::is_termination_b_id_Valid() const{
    return m_termination_b_id_isValid;
}

QString OAICable::getTerminationBType() const {
    return m_termination_b_type;
}
void OAICable::setTerminationBType(const QString &termination_b_type) {
    m_termination_b_type = termination_b_type;
    m_termination_b_type_isSet = true;
}

bool OAICable::is_termination_b_type_Set() const{
    return m_termination_b_type_isSet;
}

bool OAICable::is_termination_b_type_Valid() const{
    return m_termination_b_type_isValid;
}

QString OAICable::getType() const {
    return m_type;
}
void OAICable::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICable::is_type_Set() const{
    return m_type_isSet;
}

bool OAICable::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_a.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_a_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_a_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_b.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_b_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_b_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_termination_a_id_isValid && m_termination_a_type_isValid && m_termination_b_id_isValid && m_termination_b_type_isValid && true;
}

} // namespace OpenAPI
