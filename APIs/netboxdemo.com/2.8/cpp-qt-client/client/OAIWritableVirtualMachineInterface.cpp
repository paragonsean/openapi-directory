/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableVirtualMachineInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableVirtualMachineInterface::OAIWritableVirtualMachineInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableVirtualMachineInterface::OAIWritableVirtualMachineInterface() {
    this->initializeModel();
}

OAIWritableVirtualMachineInterface::~OAIWritableVirtualMachineInterface() {}

void OAIWritableVirtualMachineInterface::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tagged_vlans_isSet = false;
    m_tagged_vlans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_untagged_vlan_isSet = false;
    m_untagged_vlan_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;
}

void OAIWritableVirtualMachineInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableVirtualMachineInterface::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("mac_address")]);
    m_mac_address_isSet = !json[QString("mac_address")].isNull() && m_mac_address_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tagged_vlans_isValid = ::OpenAPI::fromJsonValue(m_tagged_vlans, json[QString("tagged_vlans")]);
    m_tagged_vlans_isSet = !json[QString("tagged_vlans")].isNull() && m_tagged_vlans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_untagged_vlan_isValid = ::OpenAPI::fromJsonValue(m_untagged_vlan, json[QString("untagged_vlan")]);
    m_untagged_vlan_isSet = !json[QString("untagged_vlan")].isNull() && m_untagged_vlan_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtual_machine")]);
    m_virtual_machine_isSet = !json[QString("virtual_machine")].isNull() && m_virtual_machine_isValid;
}

QString OAIWritableVirtualMachineInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableVirtualMachineInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("mac_address"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tagged_vlans.size() > 0) {
        obj.insert(QString("tagged_vlans"), ::OpenAPI::toJsonValue(m_tagged_vlans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_untagged_vlan_isSet) {
        obj.insert(QString("untagged_vlan"), ::OpenAPI::toJsonValue(m_untagged_vlan));
    }
    if (m_virtual_machine_isSet) {
        obj.insert(QString("virtual_machine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    return obj;
}

QString OAIWritableVirtualMachineInterface::getDescription() const {
    return m_description;
}
void OAIWritableVirtualMachineInterface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableVirtualMachineInterface::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWritableVirtualMachineInterface::isEnabled() const {
    return m_enabled;
}
void OAIWritableVirtualMachineInterface::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWritableVirtualMachineInterface::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIWritableVirtualMachineInterface::getId() const {
    return m_id;
}
void OAIWritableVirtualMachineInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableVirtualMachineInterface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableVirtualMachineInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIWritableVirtualMachineInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIWritableVirtualMachineInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QString OAIWritableVirtualMachineInterface::getMode() const {
    return m_mode;
}
void OAIWritableVirtualMachineInterface::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIWritableVirtualMachineInterface::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIWritableVirtualMachineInterface::getMtu() const {
    return m_mtu;
}
void OAIWritableVirtualMachineInterface::setMtu(const qint32 &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIWritableVirtualMachineInterface::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIWritableVirtualMachineInterface::getName() const {
    return m_name;
}
void OAIWritableVirtualMachineInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableVirtualMachineInterface::is_name_Valid() const{
    return m_name_isValid;
}

QSet<qint32> OAIWritableVirtualMachineInterface::getTaggedVlans() const {
    return m_tagged_vlans;
}
void OAIWritableVirtualMachineInterface::setTaggedVlans(const QSet<qint32> &tagged_vlans) {
    m_tagged_vlans = tagged_vlans;
    m_tagged_vlans_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_tagged_vlans_Set() const{
    return m_tagged_vlans_isSet;
}

bool OAIWritableVirtualMachineInterface::is_tagged_vlans_Valid() const{
    return m_tagged_vlans_isValid;
}

QList<QString> OAIWritableVirtualMachineInterface::getTags() const {
    return m_tags;
}
void OAIWritableVirtualMachineInterface::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableVirtualMachineInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIWritableVirtualMachineInterface::getType() const {
    return m_type;
}
void OAIWritableVirtualMachineInterface::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritableVirtualMachineInterface::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIWritableVirtualMachineInterface::getUntaggedVlan() const {
    return m_untagged_vlan;
}
void OAIWritableVirtualMachineInterface::setUntaggedVlan(const qint32 &untagged_vlan) {
    m_untagged_vlan = untagged_vlan;
    m_untagged_vlan_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_untagged_vlan_Set() const{
    return m_untagged_vlan_isSet;
}

bool OAIWritableVirtualMachineInterface::is_untagged_vlan_Valid() const{
    return m_untagged_vlan_isValid;
}

qint32 OAIWritableVirtualMachineInterface::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIWritableVirtualMachineInterface::setVirtualMachine(const qint32 &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIWritableVirtualMachineInterface::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIWritableVirtualMachineInterface::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

bool OAIWritableVirtualMachineInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableVirtualMachineInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
