/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritablePowerFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritablePowerFeed::OAIWritablePowerFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritablePowerFeed::OAIWritablePowerFeed() {
    this->initializeModel();
}

OAIWritablePowerFeed::~OAIWritablePowerFeed() {}

void OAIWritablePowerFeed::initializeModel() {

    m_amperage_isSet = false;
    m_amperage_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_max_utilization_isSet = false;
    m_max_utilization_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_power_panel_isSet = false;
    m_power_panel_isValid = false;

    m_rack_isSet = false;
    m_rack_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supply_isSet = false;
    m_supply_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;
}

void OAIWritablePowerFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritablePowerFeed::fromJsonObject(QJsonObject json) {

    m_amperage_isValid = ::OpenAPI::fromJsonValue(m_amperage, json[QString("amperage")]);
    m_amperage_isSet = !json[QString("amperage")].isNull() && m_amperage_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_max_utilization_isValid = ::OpenAPI::fromJsonValue(m_max_utilization, json[QString("max_utilization")]);
    m_max_utilization_isSet = !json[QString("max_utilization")].isNull() && m_max_utilization_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_power_panel_isValid = ::OpenAPI::fromJsonValue(m_power_panel, json[QString("power_panel")]);
    m_power_panel_isSet = !json[QString("power_panel")].isNull() && m_power_panel_isValid;

    m_rack_isValid = ::OpenAPI::fromJsonValue(m_rack, json[QString("rack")]);
    m_rack_isSet = !json[QString("rack")].isNull() && m_rack_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supply_isValid = ::OpenAPI::fromJsonValue(m_supply, json[QString("supply")]);
    m_supply_isSet = !json[QString("supply")].isNull() && m_supply_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_voltage_isValid = ::OpenAPI::fromJsonValue(m_voltage, json[QString("voltage")]);
    m_voltage_isSet = !json[QString("voltage")].isNull() && m_voltage_isValid;
}

QString OAIWritablePowerFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritablePowerFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_amperage_isSet) {
        obj.insert(QString("amperage"), ::OpenAPI::toJsonValue(m_amperage));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_max_utilization_isSet) {
        obj.insert(QString("max_utilization"), ::OpenAPI::toJsonValue(m_max_utilization));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_power_panel_isSet) {
        obj.insert(QString("power_panel"), ::OpenAPI::toJsonValue(m_power_panel));
    }
    if (m_rack_isSet) {
        obj.insert(QString("rack"), ::OpenAPI::toJsonValue(m_rack));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supply_isSet) {
        obj.insert(QString("supply"), ::OpenAPI::toJsonValue(m_supply));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("voltage"), ::OpenAPI::toJsonValue(m_voltage));
    }
    return obj;
}

qint32 OAIWritablePowerFeed::getAmperage() const {
    return m_amperage;
}
void OAIWritablePowerFeed::setAmperage(const qint32 &amperage) {
    m_amperage = amperage;
    m_amperage_isSet = true;
}

bool OAIWritablePowerFeed::is_amperage_Set() const{
    return m_amperage_isSet;
}

bool OAIWritablePowerFeed::is_amperage_Valid() const{
    return m_amperage_isValid;
}

QString OAIWritablePowerFeed::getComments() const {
    return m_comments;
}
void OAIWritablePowerFeed::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIWritablePowerFeed::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIWritablePowerFeed::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIWritablePowerFeed::getCreated() const {
    return m_created;
}
void OAIWritablePowerFeed::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritablePowerFeed::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritablePowerFeed::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritablePowerFeed::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritablePowerFeed::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritablePowerFeed::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritablePowerFeed::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIWritablePowerFeed::getId() const {
    return m_id;
}
void OAIWritablePowerFeed::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritablePowerFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritablePowerFeed::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritablePowerFeed::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritablePowerFeed::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritablePowerFeed::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritablePowerFeed::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIWritablePowerFeed::getMaxUtilization() const {
    return m_max_utilization;
}
void OAIWritablePowerFeed::setMaxUtilization(const qint32 &max_utilization) {
    m_max_utilization = max_utilization;
    m_max_utilization_isSet = true;
}

bool OAIWritablePowerFeed::is_max_utilization_Set() const{
    return m_max_utilization_isSet;
}

bool OAIWritablePowerFeed::is_max_utilization_Valid() const{
    return m_max_utilization_isValid;
}

QString OAIWritablePowerFeed::getName() const {
    return m_name;
}
void OAIWritablePowerFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritablePowerFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritablePowerFeed::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritablePowerFeed::getPhase() const {
    return m_phase;
}
void OAIWritablePowerFeed::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIWritablePowerFeed::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIWritablePowerFeed::is_phase_Valid() const{
    return m_phase_isValid;
}

qint32 OAIWritablePowerFeed::getPowerPanel() const {
    return m_power_panel;
}
void OAIWritablePowerFeed::setPowerPanel(const qint32 &power_panel) {
    m_power_panel = power_panel;
    m_power_panel_isSet = true;
}

bool OAIWritablePowerFeed::is_power_panel_Set() const{
    return m_power_panel_isSet;
}

bool OAIWritablePowerFeed::is_power_panel_Valid() const{
    return m_power_panel_isValid;
}

qint32 OAIWritablePowerFeed::getRack() const {
    return m_rack;
}
void OAIWritablePowerFeed::setRack(const qint32 &rack) {
    m_rack = rack;
    m_rack_isSet = true;
}

bool OAIWritablePowerFeed::is_rack_Set() const{
    return m_rack_isSet;
}

bool OAIWritablePowerFeed::is_rack_Valid() const{
    return m_rack_isValid;
}

QString OAIWritablePowerFeed::getStatus() const {
    return m_status;
}
void OAIWritablePowerFeed::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWritablePowerFeed::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWritablePowerFeed::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWritablePowerFeed::getSupply() const {
    return m_supply;
}
void OAIWritablePowerFeed::setSupply(const QString &supply) {
    m_supply = supply;
    m_supply_isSet = true;
}

bool OAIWritablePowerFeed::is_supply_Set() const{
    return m_supply_isSet;
}

bool OAIWritablePowerFeed::is_supply_Valid() const{
    return m_supply_isValid;
}

QList<QString> OAIWritablePowerFeed::getTags() const {
    return m_tags;
}
void OAIWritablePowerFeed::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritablePowerFeed::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritablePowerFeed::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIWritablePowerFeed::getType() const {
    return m_type;
}
void OAIWritablePowerFeed::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWritablePowerFeed::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWritablePowerFeed::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIWritablePowerFeed::getVoltage() const {
    return m_voltage;
}
void OAIWritablePowerFeed::setVoltage(const qint32 &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAIWritablePowerFeed::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAIWritablePowerFeed::is_voltage_Valid() const{
    return m_voltage_isValid;
}

bool OAIWritablePowerFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amperage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_panel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritablePowerFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_power_panel_isValid && true;
}

} // namespace OpenAPI
