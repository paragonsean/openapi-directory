/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICircuitCircuitTermination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICircuitCircuitTermination::OAICircuitCircuitTermination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICircuitCircuitTermination::OAICircuitCircuitTermination() {
    this->initializeModel();
}

OAICircuitCircuitTermination::~OAICircuitCircuitTermination() {}

void OAICircuitCircuitTermination::initializeModel() {

    m_connected_endpoint_isSet = false;
    m_connected_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_port_speed_isSet = false;
    m_port_speed_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_upstream_speed_isSet = false;
    m_upstream_speed_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_xconnect_id_isSet = false;
    m_xconnect_id_isValid = false;
}

void OAICircuitCircuitTermination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICircuitCircuitTermination::fromJsonObject(QJsonObject json) {

    m_connected_endpoint_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint, json[QString("connected_endpoint")]);
    m_connected_endpoint_isSet = !json[QString("connected_endpoint")].isNull() && m_connected_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_port_speed_isValid = ::OpenAPI::fromJsonValue(m_port_speed, json[QString("port_speed")]);
    m_port_speed_isSet = !json[QString("port_speed")].isNull() && m_port_speed_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_upstream_speed_isValid = ::OpenAPI::fromJsonValue(m_upstream_speed, json[QString("upstream_speed")]);
    m_upstream_speed_isSet = !json[QString("upstream_speed")].isNull() && m_upstream_speed_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_xconnect_id_isValid = ::OpenAPI::fromJsonValue(m_xconnect_id, json[QString("xconnect_id")]);
    m_xconnect_id_isSet = !json[QString("xconnect_id")].isNull() && m_xconnect_id_isValid;
}

QString OAICircuitCircuitTermination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICircuitCircuitTermination::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_endpoint.isSet()) {
        obj.insert(QString("connected_endpoint"), ::OpenAPI::toJsonValue(m_connected_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_port_speed_isSet) {
        obj.insert(QString("port_speed"), ::OpenAPI::toJsonValue(m_port_speed));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_upstream_speed_isSet) {
        obj.insert(QString("upstream_speed"), ::OpenAPI::toJsonValue(m_upstream_speed));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_xconnect_id_isSet) {
        obj.insert(QString("xconnect_id"), ::OpenAPI::toJsonValue(m_xconnect_id));
    }
    return obj;
}

OAINestedInterface OAICircuitCircuitTermination::getConnectedEndpoint() const {
    return m_connected_endpoint;
}
void OAICircuitCircuitTermination::setConnectedEndpoint(const OAINestedInterface &connected_endpoint) {
    m_connected_endpoint = connected_endpoint;
    m_connected_endpoint_isSet = true;
}

bool OAICircuitCircuitTermination::is_connected_endpoint_Set() const{
    return m_connected_endpoint_isSet;
}

bool OAICircuitCircuitTermination::is_connected_endpoint_Valid() const{
    return m_connected_endpoint_isValid;
}

qint32 OAICircuitCircuitTermination::getId() const {
    return m_id;
}
void OAICircuitCircuitTermination::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICircuitCircuitTermination::is_id_Set() const{
    return m_id_isSet;
}

bool OAICircuitCircuitTermination::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICircuitCircuitTermination::getPortSpeed() const {
    return m_port_speed;
}
void OAICircuitCircuitTermination::setPortSpeed(const qint32 &port_speed) {
    m_port_speed = port_speed;
    m_port_speed_isSet = true;
}

bool OAICircuitCircuitTermination::is_port_speed_Set() const{
    return m_port_speed_isSet;
}

bool OAICircuitCircuitTermination::is_port_speed_Valid() const{
    return m_port_speed_isValid;
}

OAINestedSite OAICircuitCircuitTermination::getSite() const {
    return m_site;
}
void OAICircuitCircuitTermination::setSite(const OAINestedSite &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAICircuitCircuitTermination::is_site_Set() const{
    return m_site_isSet;
}

bool OAICircuitCircuitTermination::is_site_Valid() const{
    return m_site_isValid;
}

qint32 OAICircuitCircuitTermination::getUpstreamSpeed() const {
    return m_upstream_speed;
}
void OAICircuitCircuitTermination::setUpstreamSpeed(const qint32 &upstream_speed) {
    m_upstream_speed = upstream_speed;
    m_upstream_speed_isSet = true;
}

bool OAICircuitCircuitTermination::is_upstream_speed_Set() const{
    return m_upstream_speed_isSet;
}

bool OAICircuitCircuitTermination::is_upstream_speed_Valid() const{
    return m_upstream_speed_isValid;
}

QString OAICircuitCircuitTermination::getUrl() const {
    return m_url;
}
void OAICircuitCircuitTermination::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICircuitCircuitTermination::is_url_Set() const{
    return m_url_isSet;
}

bool OAICircuitCircuitTermination::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICircuitCircuitTermination::getXconnectId() const {
    return m_xconnect_id;
}
void OAICircuitCircuitTermination::setXconnectId(const QString &xconnect_id) {
    m_xconnect_id = xconnect_id;
    m_xconnect_id_isSet = true;
}

bool OAICircuitCircuitTermination::is_xconnect_id_Set() const{
    return m_xconnect_id_isSet;
}

bool OAICircuitCircuitTermination::is_xconnect_id_Valid() const{
    return m_xconnect_id_isValid;
}

bool OAICircuitCircuitTermination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xconnect_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICircuitCircuitTermination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connected_endpoint_isValid && m_port_speed_isValid && m_site_isValid && true;
}

} // namespace OpenAPI
