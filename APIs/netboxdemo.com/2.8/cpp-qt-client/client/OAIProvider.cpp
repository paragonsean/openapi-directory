/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvider::OAIProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvider::OAIProvider() {
    this->initializeModel();
}

OAIProvider::~OAIProvider() {}

void OAIProvider::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_admin_contact_isSet = false;
    m_admin_contact_isValid = false;

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_circuit_count_isSet = false;
    m_circuit_count_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_noc_contact_isSet = false;
    m_noc_contact_isValid = false;

    m_portal_url_isSet = false;
    m_portal_url_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvider::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_admin_contact_isValid = ::OpenAPI::fromJsonValue(m_admin_contact, json[QString("admin_contact")]);
    m_admin_contact_isSet = !json[QString("admin_contact")].isNull() && m_admin_contact_isValid;

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_circuit_count_isValid = ::OpenAPI::fromJsonValue(m_circuit_count, json[QString("circuit_count")]);
    m_circuit_count_isSet = !json[QString("circuit_count")].isNull() && m_circuit_count_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_noc_contact_isValid = ::OpenAPI::fromJsonValue(m_noc_contact, json[QString("noc_contact")]);
    m_noc_contact_isSet = !json[QString("noc_contact")].isNull() && m_noc_contact_isValid;

    m_portal_url_isValid = ::OpenAPI::fromJsonValue(m_portal_url, json[QString("portal_url")]);
    m_portal_url_isSet = !json[QString("portal_url")].isNull() && m_portal_url_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_admin_contact_isSet) {
        obj.insert(QString("admin_contact"), ::OpenAPI::toJsonValue(m_admin_contact));
    }
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_circuit_count_isSet) {
        obj.insert(QString("circuit_count"), ::OpenAPI::toJsonValue(m_circuit_count));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_noc_contact_isSet) {
        obj.insert(QString("noc_contact"), ::OpenAPI::toJsonValue(m_noc_contact));
    }
    if (m_portal_url_isSet) {
        obj.insert(QString("portal_url"), ::OpenAPI::toJsonValue(m_portal_url));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIProvider::getAccount() const {
    return m_account;
}
void OAIProvider::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIProvider::is_account_Set() const{
    return m_account_isSet;
}

bool OAIProvider::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIProvider::getAdminContact() const {
    return m_admin_contact;
}
void OAIProvider::setAdminContact(const QString &admin_contact) {
    m_admin_contact = admin_contact;
    m_admin_contact_isSet = true;
}

bool OAIProvider::is_admin_contact_Set() const{
    return m_admin_contact_isSet;
}

bool OAIProvider::is_admin_contact_Valid() const{
    return m_admin_contact_isValid;
}

qint32 OAIProvider::getAsn() const {
    return m_asn;
}
void OAIProvider::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIProvider::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIProvider::is_asn_Valid() const{
    return m_asn_isValid;
}

qint32 OAIProvider::getCircuitCount() const {
    return m_circuit_count;
}
void OAIProvider::setCircuitCount(const qint32 &circuit_count) {
    m_circuit_count = circuit_count;
    m_circuit_count_isSet = true;
}

bool OAIProvider::is_circuit_count_Set() const{
    return m_circuit_count_isSet;
}

bool OAIProvider::is_circuit_count_Valid() const{
    return m_circuit_count_isValid;
}

QString OAIProvider::getComments() const {
    return m_comments;
}
void OAIProvider::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIProvider::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIProvider::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIProvider::getCreated() const {
    return m_created;
}
void OAIProvider::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIProvider::is_created_Set() const{
    return m_created_isSet;
}

bool OAIProvider::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIProvider::getCustomFields() const {
    return m_custom_fields;
}
void OAIProvider::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProvider::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProvider::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIProvider::getId() const {
    return m_id;
}
void OAIProvider::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvider::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvider::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIProvider::getLastUpdated() const {
    return m_last_updated;
}
void OAIProvider::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProvider::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProvider::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIProvider::getName() const {
    return m_name;
}
void OAIProvider::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvider::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvider::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvider::getNocContact() const {
    return m_noc_contact;
}
void OAIProvider::setNocContact(const QString &noc_contact) {
    m_noc_contact = noc_contact;
    m_noc_contact_isSet = true;
}

bool OAIProvider::is_noc_contact_Set() const{
    return m_noc_contact_isSet;
}

bool OAIProvider::is_noc_contact_Valid() const{
    return m_noc_contact_isValid;
}

QString OAIProvider::getPortalUrl() const {
    return m_portal_url;
}
void OAIProvider::setPortalUrl(const QString &portal_url) {
    m_portal_url = portal_url;
    m_portal_url_isSet = true;
}

bool OAIProvider::is_portal_url_Set() const{
    return m_portal_url_isSet;
}

bool OAIProvider::is_portal_url_Valid() const{
    return m_portal_url_isValid;
}

QString OAIProvider::getSlug() const {
    return m_slug;
}
void OAIProvider::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIProvider::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIProvider::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<QString> OAIProvider::getTags() const {
    return m_tags;
}
void OAIProvider::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProvider::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProvider::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noc_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portal_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_slug_isValid && true;
}

} // namespace OpenAPI
