/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableExportTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableExportTemplate::OAIWritableExportTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableExportTemplate::OAIWritableExportTemplate() {
    this->initializeModel();
}

OAIWritableExportTemplate::~OAIWritableExportTemplate() {}

void OAIWritableExportTemplate::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_template_code_isSet = false;
    m_template_code_isValid = false;

    m_template_language_isSet = false;
    m_template_language_isValid = false;
}

void OAIWritableExportTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableExportTemplate::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("file_extension")]);
    m_file_extension_isSet = !json[QString("file_extension")].isNull() && m_file_extension_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_template_code_isValid = ::OpenAPI::fromJsonValue(m_template_code, json[QString("template_code")]);
    m_template_code_isSet = !json[QString("template_code")].isNull() && m_template_code_isValid;

    m_template_language_isValid = ::OpenAPI::fromJsonValue(m_template_language, json[QString("template_language")]);
    m_template_language_isSet = !json[QString("template_language")].isNull() && m_template_language_isValid;
}

QString OAIWritableExportTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableExportTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("file_extension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_template_code_isSet) {
        obj.insert(QString("template_code"), ::OpenAPI::toJsonValue(m_template_code));
    }
    if (m_template_language_isSet) {
        obj.insert(QString("template_language"), ::OpenAPI::toJsonValue(m_template_language));
    }
    return obj;
}

QString OAIWritableExportTemplate::getContentType() const {
    return m_content_type;
}
void OAIWritableExportTemplate::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIWritableExportTemplate::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIWritableExportTemplate::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIWritableExportTemplate::getDescription() const {
    return m_description;
}
void OAIWritableExportTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWritableExportTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWritableExportTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWritableExportTemplate::getFileExtension() const {
    return m_file_extension;
}
void OAIWritableExportTemplate::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIWritableExportTemplate::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIWritableExportTemplate::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

qint32 OAIWritableExportTemplate::getId() const {
    return m_id;
}
void OAIWritableExportTemplate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableExportTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableExportTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWritableExportTemplate::getMimeType() const {
    return m_mime_type;
}
void OAIWritableExportTemplate::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIWritableExportTemplate::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIWritableExportTemplate::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIWritableExportTemplate::getName() const {
    return m_name;
}
void OAIWritableExportTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableExportTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableExportTemplate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableExportTemplate::getTemplateCode() const {
    return m_template_code;
}
void OAIWritableExportTemplate::setTemplateCode(const QString &template_code) {
    m_template_code = template_code;
    m_template_code_isSet = true;
}

bool OAIWritableExportTemplate::is_template_code_Set() const{
    return m_template_code_isSet;
}

bool OAIWritableExportTemplate::is_template_code_Valid() const{
    return m_template_code_isValid;
}

QString OAIWritableExportTemplate::getTemplateLanguage() const {
    return m_template_language;
}
void OAIWritableExportTemplate::setTemplateLanguage(const QString &template_language) {
    m_template_language = template_language;
    m_template_language_isSet = true;
}

bool OAIWritableExportTemplate::is_template_language_Set() const{
    return m_template_language_isSet;
}

bool OAIWritableExportTemplate::is_template_language_Valid() const{
    return m_template_language_isValid;
}

bool OAIWritableExportTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableExportTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && m_name_isValid && m_template_code_isValid && true;
}

} // namespace OpenAPI
