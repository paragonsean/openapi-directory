/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInterface::OAIDeviceInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInterface::OAIDeviceInterface() {
    this->initializeModel();
}

OAIDeviceInterface::~OAIDeviceInterface() {}

void OAIDeviceInterface::initializeModel() {

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_connected_endpoint_isSet = false;
    m_connected_endpoint_isValid = false;

    m_connected_endpoint_type_isSet = false;
    m_connected_endpoint_type_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_count_ipaddresses_isSet = false;
    m_count_ipaddresses_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lag_isSet = false;
    m_lag_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mgmt_only_isSet = false;
    m_mgmt_only_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tagged_vlans_isSet = false;
    m_tagged_vlans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_untagged_vlan_isSet = false;
    m_untagged_vlan_isValid = false;
}

void OAIDeviceInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInterface::fromJsonObject(QJsonObject json) {

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_connected_endpoint_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint, json[QString("connected_endpoint")]);
    m_connected_endpoint_isSet = !json[QString("connected_endpoint")].isNull() && m_connected_endpoint_isValid;

    m_connected_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint_type, json[QString("connected_endpoint_type")]);
    m_connected_endpoint_type_isSet = !json[QString("connected_endpoint_type")].isNull() && m_connected_endpoint_type_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_count_ipaddresses_isValid = ::OpenAPI::fromJsonValue(m_count_ipaddresses, json[QString("count_ipaddresses")]);
    m_count_ipaddresses_isSet = !json[QString("count_ipaddresses")].isNull() && m_count_ipaddresses_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lag_isValid = ::OpenAPI::fromJsonValue(m_lag, json[QString("lag")]);
    m_lag_isSet = !json[QString("lag")].isNull() && m_lag_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("mac_address")]);
    m_mac_address_isSet = !json[QString("mac_address")].isNull() && m_mac_address_isValid;

    m_mgmt_only_isValid = ::OpenAPI::fromJsonValue(m_mgmt_only, json[QString("mgmt_only")]);
    m_mgmt_only_isSet = !json[QString("mgmt_only")].isNull() && m_mgmt_only_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tagged_vlans_isValid = ::OpenAPI::fromJsonValue(m_tagged_vlans, json[QString("tagged_vlans")]);
    m_tagged_vlans_isSet = !json[QString("tagged_vlans")].isNull() && m_tagged_vlans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_untagged_vlan_isValid = ::OpenAPI::fromJsonValue(m_untagged_vlan, json[QString("untagged_vlan")]);
    m_untagged_vlan_isSet = !json[QString("untagged_vlan")].isNull() && m_untagged_vlan_isValid;
}

QString OAIDeviceInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_connected_endpoint.size() > 0) {
        obj.insert(QString("connected_endpoint"), ::OpenAPI::toJsonValue(m_connected_endpoint));
    }
    if (m_connected_endpoint_type_isSet) {
        obj.insert(QString("connected_endpoint_type"), ::OpenAPI::toJsonValue(m_connected_endpoint_type));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_count_ipaddresses_isSet) {
        obj.insert(QString("count_ipaddresses"), ::OpenAPI::toJsonValue(m_count_ipaddresses));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lag.isSet()) {
        obj.insert(QString("lag"), ::OpenAPI::toJsonValue(m_lag));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("mac_address"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mgmt_only_isSet) {
        obj.insert(QString("mgmt_only"), ::OpenAPI::toJsonValue(m_mgmt_only));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tagged_vlans.size() > 0) {
        obj.insert(QString("tagged_vlans"), ::OpenAPI::toJsonValue(m_tagged_vlans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_untagged_vlan.isSet()) {
        obj.insert(QString("untagged_vlan"), ::OpenAPI::toJsonValue(m_untagged_vlan));
    }
    return obj;
}

OAINestedCable OAIDeviceInterface::getCable() const {
    return m_cable;
}
void OAIDeviceInterface::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIDeviceInterface::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIDeviceInterface::is_cable_Valid() const{
    return m_cable_isValid;
}

QMap<QString, QString> OAIDeviceInterface::getConnectedEndpoint() const {
    return m_connected_endpoint;
}
void OAIDeviceInterface::setConnectedEndpoint(const QMap<QString, QString> &connected_endpoint) {
    m_connected_endpoint = connected_endpoint;
    m_connected_endpoint_isSet = true;
}

bool OAIDeviceInterface::is_connected_endpoint_Set() const{
    return m_connected_endpoint_isSet;
}

bool OAIDeviceInterface::is_connected_endpoint_Valid() const{
    return m_connected_endpoint_isValid;
}

QString OAIDeviceInterface::getConnectedEndpointType() const {
    return m_connected_endpoint_type;
}
void OAIDeviceInterface::setConnectedEndpointType(const QString &connected_endpoint_type) {
    m_connected_endpoint_type = connected_endpoint_type;
    m_connected_endpoint_type_isSet = true;
}

bool OAIDeviceInterface::is_connected_endpoint_type_Set() const{
    return m_connected_endpoint_type_isSet;
}

bool OAIDeviceInterface::is_connected_endpoint_type_Valid() const{
    return m_connected_endpoint_type_isValid;
}

OAIConnection_status OAIDeviceInterface::getConnectionStatus() const {
    return m_connection_status;
}
void OAIDeviceInterface::setConnectionStatus(const OAIConnection_status &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIDeviceInterface::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIDeviceInterface::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

qint32 OAIDeviceInterface::getCountIpaddresses() const {
    return m_count_ipaddresses;
}
void OAIDeviceInterface::setCountIpaddresses(const qint32 &count_ipaddresses) {
    m_count_ipaddresses = count_ipaddresses;
    m_count_ipaddresses_isSet = true;
}

bool OAIDeviceInterface::is_count_ipaddresses_Set() const{
    return m_count_ipaddresses_isSet;
}

bool OAIDeviceInterface::is_count_ipaddresses_Valid() const{
    return m_count_ipaddresses_isValid;
}

QString OAIDeviceInterface::getDescription() const {
    return m_description;
}
void OAIDeviceInterface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeviceInterface::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeviceInterface::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIDeviceInterface::getDevice() const {
    return m_device;
}
void OAIDeviceInterface::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDeviceInterface::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDeviceInterface::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIDeviceInterface::isEnabled() const {
    return m_enabled;
}
void OAIDeviceInterface::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIDeviceInterface::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIDeviceInterface::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIDeviceInterface::getId() const {
    return m_id;
}
void OAIDeviceInterface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceInterface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceInterface::is_id_Valid() const{
    return m_id_isValid;
}

OAINestedInterface OAIDeviceInterface::getLag() const {
    return m_lag;
}
void OAIDeviceInterface::setLag(const OAINestedInterface &lag) {
    m_lag = lag;
    m_lag_isSet = true;
}

bool OAIDeviceInterface::is_lag_Set() const{
    return m_lag_isSet;
}

bool OAIDeviceInterface::is_lag_Valid() const{
    return m_lag_isValid;
}

QString OAIDeviceInterface::getMacAddress() const {
    return m_mac_address;
}
void OAIDeviceInterface::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIDeviceInterface::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIDeviceInterface::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

bool OAIDeviceInterface::isMgmtOnly() const {
    return m_mgmt_only;
}
void OAIDeviceInterface::setMgmtOnly(const bool &mgmt_only) {
    m_mgmt_only = mgmt_only;
    m_mgmt_only_isSet = true;
}

bool OAIDeviceInterface::is_mgmt_only_Set() const{
    return m_mgmt_only_isSet;
}

bool OAIDeviceInterface::is_mgmt_only_Valid() const{
    return m_mgmt_only_isValid;
}

OAIMode OAIDeviceInterface::getMode() const {
    return m_mode;
}
void OAIDeviceInterface::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDeviceInterface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDeviceInterface::is_mode_Valid() const{
    return m_mode_isValid;
}

qint32 OAIDeviceInterface::getMtu() const {
    return m_mtu;
}
void OAIDeviceInterface::setMtu(const qint32 &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIDeviceInterface::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIDeviceInterface::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIDeviceInterface::getName() const {
    return m_name;
}
void OAIDeviceInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceInterface::is_name_Valid() const{
    return m_name_isValid;
}

QSet<OAINestedVLAN> OAIDeviceInterface::getTaggedVlans() const {
    return m_tagged_vlans;
}
void OAIDeviceInterface::setTaggedVlans(const QSet<OAINestedVLAN> &tagged_vlans) {
    m_tagged_vlans = tagged_vlans;
    m_tagged_vlans_isSet = true;
}

bool OAIDeviceInterface::is_tagged_vlans_Set() const{
    return m_tagged_vlans_isSet;
}

bool OAIDeviceInterface::is_tagged_vlans_Valid() const{
    return m_tagged_vlans_isValid;
}

QList<QString> OAIDeviceInterface::getTags() const {
    return m_tags;
}
void OAIDeviceInterface::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeviceInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeviceInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIType_1 OAIDeviceInterface::getType() const {
    return m_type;
}
void OAIDeviceInterface::setType(const OAIType_1 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeviceInterface::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeviceInterface::is_type_Valid() const{
    return m_type_isValid;
}

OAINestedVLAN OAIDeviceInterface::getUntaggedVlan() const {
    return m_untagged_vlan;
}
void OAIDeviceInterface::setUntaggedVlan(const OAINestedVLAN &untagged_vlan) {
    m_untagged_vlan = untagged_vlan;
    m_untagged_vlan_isSet = true;
}

bool OAIDeviceInterface::is_untagged_vlan_Set() const{
    return m_untagged_vlan_isSet;
}

bool OAIDeviceInterface::is_untagged_vlan_Valid() const{
    return m_untagged_vlan_isValid;
}

bool OAIDeviceInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_ipaddresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mgmt_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_untagged_vlan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
