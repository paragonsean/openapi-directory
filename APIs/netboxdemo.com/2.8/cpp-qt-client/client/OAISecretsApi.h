/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretsApi_H
#define OAI_OAISecretsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISecret.h"
#include "OAISecretRole.h"
#include "OAISecrets_secret_roles_list_200_response.h"
#include "OAISecrets_secrets_list_200_response.h"
#include "OAIWritableSecret.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretsApi : public QObject {
    Q_OBJECT

public:
    OAISecretsApi(const int timeOut = 0);
    ~OAISecretsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void secretsGenerateRsaKeyPairList();


    virtual void secretsGetSessionKeyCreate();

    /**
    * @param[in]  oai_secret_role OAISecretRole [required]
    */
    virtual void secretsSecretRolesCreate(const OAISecretRole &oai_secret_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void secretsSecretRolesDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  slug QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  slug__n QString [optional]
    * @param[in]  slug__ic QString [optional]
    * @param[in]  slug__nic QString [optional]
    * @param[in]  slug__iew QString [optional]
    * @param[in]  slug__niew QString [optional]
    * @param[in]  slug__isw QString [optional]
    * @param[in]  slug__nisw QString [optional]
    * @param[in]  slug__ie QString [optional]
    * @param[in]  slug__nie QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void secretsSecretRolesList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &slug__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_secret_role OAISecretRole [required]
    */
    virtual void secretsSecretRolesPartialUpdate(const qint32 &id, const OAISecretRole &oai_secret_role);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void secretsSecretRolesRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_secret_role OAISecretRole [required]
    */
    virtual void secretsSecretRolesUpdate(const qint32 &id, const OAISecretRole &oai_secret_role);

    /**
    * @param[in]  oai_writable_secret OAIWritableSecret [required]
    */
    virtual void secretsSecretsCreate(const OAIWritableSecret &oai_writable_secret);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void secretsSecretsDelete(const qint32 &id);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  created QString [optional]
    * @param[in]  created__gte QString [optional]
    * @param[in]  created__lte QString [optional]
    * @param[in]  last_updated QString [optional]
    * @param[in]  last_updated__gte QString [optional]
    * @param[in]  last_updated__lte QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  role_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  device QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  id__n QString [optional]
    * @param[in]  id__lte QString [optional]
    * @param[in]  id__lt QString [optional]
    * @param[in]  id__gte QString [optional]
    * @param[in]  id__gt QString [optional]
    * @param[in]  name__n QString [optional]
    * @param[in]  name__ic QString [optional]
    * @param[in]  name__nic QString [optional]
    * @param[in]  name__iew QString [optional]
    * @param[in]  name__niew QString [optional]
    * @param[in]  name__isw QString [optional]
    * @param[in]  name__nisw QString [optional]
    * @param[in]  name__ie QString [optional]
    * @param[in]  name__nie QString [optional]
    * @param[in]  role_id__n QString [optional]
    * @param[in]  role__n QString [optional]
    * @param[in]  device_id__n QString [optional]
    * @param[in]  device__n QString [optional]
    * @param[in]  tag__n QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void secretsSecretsList(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_updated__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id__gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__iew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__niew = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__isw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nisw = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__ie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name__nie = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag__n = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_secret OAIWritableSecret [required]
    */
    virtual void secretsSecretsPartialUpdate(const qint32 &id, const OAIWritableSecret &oai_writable_secret);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void secretsSecretsRead(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_writable_secret OAIWritableSecret [required]
    */
    virtual void secretsSecretsUpdate(const qint32 &id, const OAIWritableSecret &oai_writable_secret);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void secretsGenerateRsaKeyPairListCallback(OAIHttpRequestWorker *worker);
    void secretsGetSessionKeyCreateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesCreateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesListCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesReadCallback(OAIHttpRequestWorker *worker);
    void secretsSecretRolesUpdateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsCreateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsDeleteCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsListCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsReadCallback(OAIHttpRequestWorker *worker);
    void secretsSecretsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void secretsGenerateRsaKeyPairListSignal();
    void secretsGetSessionKeyCreateSignal();
    void secretsSecretRolesCreateSignal(OAISecretRole summary);
    void secretsSecretRolesDeleteSignal();
    void secretsSecretRolesListSignal(OAISecrets_secret_roles_list_200_response summary);
    void secretsSecretRolesPartialUpdateSignal(OAISecretRole summary);
    void secretsSecretRolesReadSignal(OAISecretRole summary);
    void secretsSecretRolesUpdateSignal(OAISecretRole summary);
    void secretsSecretsCreateSignal(OAISecret summary);
    void secretsSecretsDeleteSignal();
    void secretsSecretsListSignal(OAISecrets_secrets_list_200_response summary);
    void secretsSecretsPartialUpdateSignal(OAISecret summary);
    void secretsSecretsReadSignal(OAISecret summary);
    void secretsSecretsUpdateSignal(OAISecret summary);


    void secretsGenerateRsaKeyPairListSignalFull(OAIHttpRequestWorker *worker);
    void secretsGetSessionKeyCreateSignalFull(OAIHttpRequestWorker *worker);
    void secretsSecretRolesCreateSignalFull(OAIHttpRequestWorker *worker, OAISecretRole summary);
    void secretsSecretRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void secretsSecretRolesListSignalFull(OAIHttpRequestWorker *worker, OAISecrets_secret_roles_list_200_response summary);
    void secretsSecretRolesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecretRole summary);
    void secretsSecretRolesReadSignalFull(OAIHttpRequestWorker *worker, OAISecretRole summary);
    void secretsSecretRolesUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecretRole summary);
    void secretsSecretsCreateSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsSecretsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void secretsSecretsListSignalFull(OAIHttpRequestWorker *worker, OAISecrets_secrets_list_200_response summary);
    void secretsSecretsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsSecretsReadSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsSecretsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);

    Q_DECL_DEPRECATED_X("Use secretsGenerateRsaKeyPairListSignalError() instead")
    void secretsGenerateRsaKeyPairListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGenerateRsaKeyPairListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSessionKeyCreateSignalError() instead")
    void secretsGetSessionKeyCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSessionKeyCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesCreateSignalError() instead")
    void secretsSecretRolesCreateSignalE(OAISecretRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesCreateSignalError(OAISecretRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesDeleteSignalError() instead")
    void secretsSecretRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesListSignalError() instead")
    void secretsSecretRolesListSignalE(OAISecrets_secret_roles_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesListSignalError(OAISecrets_secret_roles_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesPartialUpdateSignalError() instead")
    void secretsSecretRolesPartialUpdateSignalE(OAISecretRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesPartialUpdateSignalError(OAISecretRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesReadSignalError() instead")
    void secretsSecretRolesReadSignalE(OAISecretRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesReadSignalError(OAISecretRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesUpdateSignalError() instead")
    void secretsSecretRolesUpdateSignalE(OAISecretRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesUpdateSignalError(OAISecretRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsCreateSignalError() instead")
    void secretsSecretsCreateSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsCreateSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsDeleteSignalError() instead")
    void secretsSecretsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsListSignalError() instead")
    void secretsSecretsListSignalE(OAISecrets_secrets_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsListSignalError(OAISecrets_secrets_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsPartialUpdateSignalError() instead")
    void secretsSecretsPartialUpdateSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsPartialUpdateSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsReadSignalError() instead")
    void secretsSecretsReadSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsReadSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsUpdateSignalError() instead")
    void secretsSecretsUpdateSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsUpdateSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use secretsGenerateRsaKeyPairListSignalErrorFull() instead")
    void secretsGenerateRsaKeyPairListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGenerateRsaKeyPairListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSessionKeyCreateSignalErrorFull() instead")
    void secretsGetSessionKeyCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSessionKeyCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesCreateSignalErrorFull() instead")
    void secretsSecretRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesDeleteSignalErrorFull() instead")
    void secretsSecretRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesListSignalErrorFull() instead")
    void secretsSecretRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesPartialUpdateSignalErrorFull() instead")
    void secretsSecretRolesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesReadSignalErrorFull() instead")
    void secretsSecretRolesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretRolesUpdateSignalErrorFull() instead")
    void secretsSecretRolesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretRolesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsCreateSignalErrorFull() instead")
    void secretsSecretsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsDeleteSignalErrorFull() instead")
    void secretsSecretsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsListSignalErrorFull() instead")
    void secretsSecretsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsPartialUpdateSignalErrorFull() instead")
    void secretsSecretsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsReadSignalErrorFull() instead")
    void secretsSecretsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsSecretsUpdateSignalErrorFull() instead")
    void secretsSecretsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsSecretsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
