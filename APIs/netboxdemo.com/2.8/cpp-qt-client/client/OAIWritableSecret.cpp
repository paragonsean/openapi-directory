/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWritableSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWritableSecret::OAIWritableSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWritableSecret::OAIWritableSecret() {
    this->initializeModel();
}

OAIWritableSecret::~OAIWritableSecret() {}

void OAIWritableSecret::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plaintext_isSet = false;
    m_plaintext_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIWritableSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWritableSecret::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plaintext_isValid = ::OpenAPI::fromJsonValue(m_plaintext, json[QString("plaintext")]);
    m_plaintext_isSet = !json[QString("plaintext")].isNull() && m_plaintext_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIWritableSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWritableSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plaintext_isSet) {
        obj.insert(QString("plaintext"), ::OpenAPI::toJsonValue(m_plaintext));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDate OAIWritableSecret::getCreated() const {
    return m_created;
}
void OAIWritableSecret::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWritableSecret::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWritableSecret::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIWritableSecret::getCustomFields() const {
    return m_custom_fields;
}
void OAIWritableSecret::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWritableSecret::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWritableSecret::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIWritableSecret::getDevice() const {
    return m_device;
}
void OAIWritableSecret::setDevice(const qint32 &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIWritableSecret::is_device_Set() const{
    return m_device_isSet;
}

bool OAIWritableSecret::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIWritableSecret::getHash() const {
    return m_hash;
}
void OAIWritableSecret::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIWritableSecret::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIWritableSecret::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIWritableSecret::getId() const {
    return m_id;
}
void OAIWritableSecret::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWritableSecret::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWritableSecret::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWritableSecret::getLastUpdated() const {
    return m_last_updated;
}
void OAIWritableSecret::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIWritableSecret::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIWritableSecret::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIWritableSecret::getName() const {
    return m_name;
}
void OAIWritableSecret::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWritableSecret::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWritableSecret::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWritableSecret::getPlaintext() const {
    return m_plaintext;
}
void OAIWritableSecret::setPlaintext(const QString &plaintext) {
    m_plaintext = plaintext;
    m_plaintext_isSet = true;
}

bool OAIWritableSecret::is_plaintext_Set() const{
    return m_plaintext_isSet;
}

bool OAIWritableSecret::is_plaintext_Valid() const{
    return m_plaintext_isValid;
}

qint32 OAIWritableSecret::getRole() const {
    return m_role;
}
void OAIWritableSecret::setRole(const qint32 &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIWritableSecret::is_role_Set() const{
    return m_role_isSet;
}

bool OAIWritableSecret::is_role_Valid() const{
    return m_role_isValid;
}

QList<QString> OAIWritableSecret::getTags() const {
    return m_tags;
}
void OAIWritableSecret::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWritableSecret::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWritableSecret::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIWritableSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaintext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWritableSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_plaintext_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
