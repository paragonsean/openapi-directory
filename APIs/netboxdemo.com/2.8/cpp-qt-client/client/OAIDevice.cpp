/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_asset_tag_isSet = false;
    m_asset_tag_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_device_role_isSet = false;
    m_device_role_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_face_isSet = false;
    m_face_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_local_context_data_isSet = false;
    m_local_context_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_device_isSet = false;
    m_parent_device_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_primary_ip_isSet = false;
    m_primary_ip_isValid = false;

    m_primary_ip4_isSet = false;
    m_primary_ip4_isValid = false;

    m_primary_ip6_isSet = false;
    m_primary_ip6_isValid = false;

    m_rack_isSet = false;
    m_rack_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_vc_position_isSet = false;
    m_vc_position_isValid = false;

    m_vc_priority_isSet = false;
    m_vc_priority_isValid = false;

    m_virtual_chassis_isSet = false;
    m_virtual_chassis_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_asset_tag_isValid = ::OpenAPI::fromJsonValue(m_asset_tag, json[QString("asset_tag")]);
    m_asset_tag_isSet = !json[QString("asset_tag")].isNull() && m_asset_tag_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_device_role_isValid = ::OpenAPI::fromJsonValue(m_device_role, json[QString("device_role")]);
    m_device_role_isSet = !json[QString("device_role")].isNull() && m_device_role_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("device_type")]);
    m_device_type_isSet = !json[QString("device_type")].isNull() && m_device_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_face_isValid = ::OpenAPI::fromJsonValue(m_face, json[QString("face")]);
    m_face_isSet = !json[QString("face")].isNull() && m_face_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_local_context_data_isValid = ::OpenAPI::fromJsonValue(m_local_context_data, json[QString("local_context_data")]);
    m_local_context_data_isSet = !json[QString("local_context_data")].isNull() && m_local_context_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_device_isValid = ::OpenAPI::fromJsonValue(m_parent_device, json[QString("parent_device")]);
    m_parent_device_isSet = !json[QString("parent_device")].isNull() && m_parent_device_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_primary_ip_isValid = ::OpenAPI::fromJsonValue(m_primary_ip, json[QString("primary_ip")]);
    m_primary_ip_isSet = !json[QString("primary_ip")].isNull() && m_primary_ip_isValid;

    m_primary_ip4_isValid = ::OpenAPI::fromJsonValue(m_primary_ip4, json[QString("primary_ip4")]);
    m_primary_ip4_isSet = !json[QString("primary_ip4")].isNull() && m_primary_ip4_isValid;

    m_primary_ip6_isValid = ::OpenAPI::fromJsonValue(m_primary_ip6, json[QString("primary_ip6")]);
    m_primary_ip6_isSet = !json[QString("primary_ip6")].isNull() && m_primary_ip6_isValid;

    m_rack_isValid = ::OpenAPI::fromJsonValue(m_rack, json[QString("rack")]);
    m_rack_isSet = !json[QString("rack")].isNull() && m_rack_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_vc_position_isValid = ::OpenAPI::fromJsonValue(m_vc_position, json[QString("vc_position")]);
    m_vc_position_isSet = !json[QString("vc_position")].isNull() && m_vc_position_isValid;

    m_vc_priority_isValid = ::OpenAPI::fromJsonValue(m_vc_priority, json[QString("vc_priority")]);
    m_vc_priority_isSet = !json[QString("vc_priority")].isNull() && m_vc_priority_isValid;

    m_virtual_chassis_isValid = ::OpenAPI::fromJsonValue(m_virtual_chassis, json[QString("virtual_chassis")]);
    m_virtual_chassis_isSet = !json[QString("virtual_chassis")].isNull() && m_virtual_chassis_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_tag_isSet) {
        obj.insert(QString("asset_tag"), ::OpenAPI::toJsonValue(m_asset_tag));
    }
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_device_role.isSet()) {
        obj.insert(QString("device_role"), ::OpenAPI::toJsonValue(m_device_role));
    }
    if (m_device_type.isSet()) {
        obj.insert(QString("device_type"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_face.isSet()) {
        obj.insert(QString("face"), ::OpenAPI::toJsonValue(m_face));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_local_context_data_isSet) {
        obj.insert(QString("local_context_data"), ::OpenAPI::toJsonValue(m_local_context_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_device.isSet()) {
        obj.insert(QString("parent_device"), ::OpenAPI::toJsonValue(m_parent_device));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_primary_ip.isSet()) {
        obj.insert(QString("primary_ip"), ::OpenAPI::toJsonValue(m_primary_ip));
    }
    if (m_primary_ip4.isSet()) {
        obj.insert(QString("primary_ip4"), ::OpenAPI::toJsonValue(m_primary_ip4));
    }
    if (m_primary_ip6.isSet()) {
        obj.insert(QString("primary_ip6"), ::OpenAPI::toJsonValue(m_primary_ip6));
    }
    if (m_rack.isSet()) {
        obj.insert(QString("rack"), ::OpenAPI::toJsonValue(m_rack));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant.isSet()) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_vc_position_isSet) {
        obj.insert(QString("vc_position"), ::OpenAPI::toJsonValue(m_vc_position));
    }
    if (m_vc_priority_isSet) {
        obj.insert(QString("vc_priority"), ::OpenAPI::toJsonValue(m_vc_priority));
    }
    if (m_virtual_chassis.isSet()) {
        obj.insert(QString("virtual_chassis"), ::OpenAPI::toJsonValue(m_virtual_chassis));
    }
    return obj;
}

QString OAIDevice::getAssetTag() const {
    return m_asset_tag;
}
void OAIDevice::setAssetTag(const QString &asset_tag) {
    m_asset_tag = asset_tag;
    m_asset_tag_isSet = true;
}

bool OAIDevice::is_asset_tag_Set() const{
    return m_asset_tag_isSet;
}

bool OAIDevice::is_asset_tag_Valid() const{
    return m_asset_tag_isValid;
}

OAINestedCluster OAIDevice::getCluster() const {
    return m_cluster;
}
void OAIDevice::setCluster(const OAINestedCluster &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIDevice::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIDevice::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIDevice::getComments() const {
    return m_comments;
}
void OAIDevice::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIDevice::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIDevice::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIDevice::getCreated() const {
    return m_created;
}
void OAIDevice::setCreated(const QDate &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDevice::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDevice::is_created_Valid() const{
    return m_created_isValid;
}

OAIObject OAIDevice::getCustomFields() const {
    return m_custom_fields;
}
void OAIDevice::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIDevice::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIDevice::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAINestedDeviceRole OAIDevice::getDeviceRole() const {
    return m_device_role;
}
void OAIDevice::setDeviceRole(const OAINestedDeviceRole &device_role) {
    m_device_role = device_role;
    m_device_role_isSet = true;
}

bool OAIDevice::is_device_role_Set() const{
    return m_device_role_isSet;
}

bool OAIDevice::is_device_role_Valid() const{
    return m_device_role_isValid;
}

OAINestedDeviceType OAIDevice::getDeviceType() const {
    return m_device_type;
}
void OAIDevice::setDeviceType(const OAINestedDeviceType &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDevice::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDevice::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDevice::getDisplayName() const {
    return m_display_name;
}
void OAIDevice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDevice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDevice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIFace OAIDevice::getFace() const {
    return m_face;
}
void OAIDevice::setFace(const OAIFace &face) {
    m_face = face;
    m_face_isSet = true;
}

bool OAIDevice::is_face_Set() const{
    return m_face_isSet;
}

bool OAIDevice::is_face_Valid() const{
    return m_face_isValid;
}

qint32 OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIDevice::getLastUpdated() const {
    return m_last_updated;
}
void OAIDevice::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDevice::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDevice::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDevice::getLocalContextData() const {
    return m_local_context_data;
}
void OAIDevice::setLocalContextData(const QString &local_context_data) {
    m_local_context_data = local_context_data;
    m_local_context_data_isSet = true;
}

bool OAIDevice::is_local_context_data_Set() const{
    return m_local_context_data_isSet;
}

bool OAIDevice::is_local_context_data_Valid() const{
    return m_local_context_data_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

OAINestedDevice OAIDevice::getParentDevice() const {
    return m_parent_device;
}
void OAIDevice::setParentDevice(const OAINestedDevice &parent_device) {
    m_parent_device = parent_device;
    m_parent_device_isSet = true;
}

bool OAIDevice::is_parent_device_Set() const{
    return m_parent_device_isSet;
}

bool OAIDevice::is_parent_device_Valid() const{
    return m_parent_device_isValid;
}

OAINestedPlatform OAIDevice::getPlatform() const {
    return m_platform;
}
void OAIDevice::setPlatform(const OAINestedPlatform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDevice::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDevice::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIDevice::getPosition() const {
    return m_position;
}
void OAIDevice::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDevice::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDevice::is_position_Valid() const{
    return m_position_isValid;
}

OAINestedIPAddress OAIDevice::getPrimaryIp() const {
    return m_primary_ip;
}
void OAIDevice::setPrimaryIp(const OAINestedIPAddress &primary_ip) {
    m_primary_ip = primary_ip;
    m_primary_ip_isSet = true;
}

bool OAIDevice::is_primary_ip_Set() const{
    return m_primary_ip_isSet;
}

bool OAIDevice::is_primary_ip_Valid() const{
    return m_primary_ip_isValid;
}

OAINestedIPAddress OAIDevice::getPrimaryIp4() const {
    return m_primary_ip4;
}
void OAIDevice::setPrimaryIp4(const OAINestedIPAddress &primary_ip4) {
    m_primary_ip4 = primary_ip4;
    m_primary_ip4_isSet = true;
}

bool OAIDevice::is_primary_ip4_Set() const{
    return m_primary_ip4_isSet;
}

bool OAIDevice::is_primary_ip4_Valid() const{
    return m_primary_ip4_isValid;
}

OAINestedIPAddress OAIDevice::getPrimaryIp6() const {
    return m_primary_ip6;
}
void OAIDevice::setPrimaryIp6(const OAINestedIPAddress &primary_ip6) {
    m_primary_ip6 = primary_ip6;
    m_primary_ip6_isSet = true;
}

bool OAIDevice::is_primary_ip6_Set() const{
    return m_primary_ip6_isSet;
}

bool OAIDevice::is_primary_ip6_Valid() const{
    return m_primary_ip6_isValid;
}

OAINestedRack OAIDevice::getRack() const {
    return m_rack;
}
void OAIDevice::setRack(const OAINestedRack &rack) {
    m_rack = rack;
    m_rack_isSet = true;
}

bool OAIDevice::is_rack_Set() const{
    return m_rack_isSet;
}

bool OAIDevice::is_rack_Valid() const{
    return m_rack_isValid;
}

QString OAIDevice::getSerial() const {
    return m_serial;
}
void OAIDevice::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDevice::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDevice::is_serial_Valid() const{
    return m_serial_isValid;
}

OAINestedSite OAIDevice::getSite() const {
    return m_site;
}
void OAIDevice::setSite(const OAINestedSite &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIDevice::is_site_Set() const{
    return m_site_isSet;
}

bool OAIDevice::is_site_Valid() const{
    return m_site_isValid;
}

OAIStatus_2 OAIDevice::getStatus() const {
    return m_status;
}
void OAIDevice::setStatus(const OAIStatus_2 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDevice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDevice::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIDevice::getTags() const {
    return m_tags;
}
void OAIDevice::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDevice::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDevice::is_tags_Valid() const{
    return m_tags_isValid;
}

OAINestedTenant OAIDevice::getTenant() const {
    return m_tenant;
}
void OAIDevice::setTenant(const OAINestedTenant &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIDevice::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIDevice::is_tenant_Valid() const{
    return m_tenant_isValid;
}

qint32 OAIDevice::getVcPosition() const {
    return m_vc_position;
}
void OAIDevice::setVcPosition(const qint32 &vc_position) {
    m_vc_position = vc_position;
    m_vc_position_isSet = true;
}

bool OAIDevice::is_vc_position_Set() const{
    return m_vc_position_isSet;
}

bool OAIDevice::is_vc_position_Valid() const{
    return m_vc_position_isValid;
}

qint32 OAIDevice::getVcPriority() const {
    return m_vc_priority;
}
void OAIDevice::setVcPriority(const qint32 &vc_priority) {
    m_vc_priority = vc_priority;
    m_vc_priority_isSet = true;
}

bool OAIDevice::is_vc_priority_Set() const{
    return m_vc_priority_isSet;
}

bool OAIDevice::is_vc_priority_Valid() const{
    return m_vc_priority_isValid;
}

OAINestedVirtualChassis OAIDevice::getVirtualChassis() const {
    return m_virtual_chassis;
}
void OAIDevice::setVirtualChassis(const OAINestedVirtualChassis &virtual_chassis) {
    m_virtual_chassis = virtual_chassis;
    m_virtual_chassis_isSet = true;
}

bool OAIDevice::is_virtual_chassis_Set() const{
    return m_virtual_chassis_isSet;
}

bool OAIDevice::is_virtual_chassis_Valid() const{
    return m_virtual_chassis_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_context_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip6.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vc_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vc_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_chassis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_role_isValid && m_device_type_isValid && m_site_isValid && true;
}

} // namespace OpenAPI
