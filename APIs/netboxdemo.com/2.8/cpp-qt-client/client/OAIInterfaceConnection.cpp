/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInterfaceConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInterfaceConnection::OAIInterfaceConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInterfaceConnection::OAIInterfaceConnection() {
    this->initializeModel();
}

OAIInterfaceConnection::~OAIInterfaceConnection() {}

void OAIInterfaceConnection::initializeModel() {

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_interface_a_isSet = false;
    m_interface_a_isValid = false;

    m_interface_b_isSet = false;
    m_interface_b_isValid = false;
}

void OAIInterfaceConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInterfaceConnection::fromJsonObject(QJsonObject json) {

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_interface_a_isValid = ::OpenAPI::fromJsonValue(m_interface_a, json[QString("interface_a")]);
    m_interface_a_isSet = !json[QString("interface_a")].isNull() && m_interface_a_isValid;

    m_interface_b_isValid = ::OpenAPI::fromJsonValue(m_interface_b, json[QString("interface_b")]);
    m_interface_b_isSet = !json[QString("interface_b")].isNull() && m_interface_b_isValid;
}

QString OAIInterfaceConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInterfaceConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_status.isSet()) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_interface_a.isSet()) {
        obj.insert(QString("interface_a"), ::OpenAPI::toJsonValue(m_interface_a));
    }
    if (m_interface_b.isSet()) {
        obj.insert(QString("interface_b"), ::OpenAPI::toJsonValue(m_interface_b));
    }
    return obj;
}

OAIConnection_status_1 OAIInterfaceConnection::getConnectionStatus() const {
    return m_connection_status;
}
void OAIInterfaceConnection::setConnectionStatus(const OAIConnection_status_1 &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIInterfaceConnection::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIInterfaceConnection::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

OAINestedInterface OAIInterfaceConnection::getInterfaceA() const {
    return m_interface_a;
}
void OAIInterfaceConnection::setInterfaceA(const OAINestedInterface &interface_a) {
    m_interface_a = interface_a;
    m_interface_a_isSet = true;
}

bool OAIInterfaceConnection::is_interface_a_Set() const{
    return m_interface_a_isSet;
}

bool OAIInterfaceConnection::is_interface_a_Valid() const{
    return m_interface_a_isValid;
}

OAINestedInterface OAIInterfaceConnection::getInterfaceB() const {
    return m_interface_b;
}
void OAIInterfaceConnection::setInterfaceB(const OAINestedInterface &interface_b) {
    m_interface_b = interface_b;
    m_interface_b_isSet = true;
}

bool OAIInterfaceConnection::is_interface_b_Set() const{
    return m_interface_b_isSet;
}

bool OAIInterfaceConnection::is_interface_b_Valid() const{
    return m_interface_b_isValid;
}

bool OAIInterfaceConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_b.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInterfaceConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interface_b_isValid && true;
}

} // namespace OpenAPI
