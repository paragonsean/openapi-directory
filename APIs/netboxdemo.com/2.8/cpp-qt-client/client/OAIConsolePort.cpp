/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsolePort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsolePort::OAIConsolePort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsolePort::OAIConsolePort() {
    this->initializeModel();
}

OAIConsolePort::~OAIConsolePort() {}

void OAIConsolePort::initializeModel() {

    m_cable_isSet = false;
    m_cable_isValid = false;

    m_connected_endpoint_isSet = false;
    m_connected_endpoint_isValid = false;

    m_connected_endpoint_type_isSet = false;
    m_connected_endpoint_type_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConsolePort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsolePort::fromJsonObject(QJsonObject json) {

    m_cable_isValid = ::OpenAPI::fromJsonValue(m_cable, json[QString("cable")]);
    m_cable_isSet = !json[QString("cable")].isNull() && m_cable_isValid;

    m_connected_endpoint_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint, json[QString("connected_endpoint")]);
    m_connected_endpoint_isSet = !json[QString("connected_endpoint")].isNull() && m_connected_endpoint_isValid;

    m_connected_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_connected_endpoint_type, json[QString("connected_endpoint_type")]);
    m_connected_endpoint_type_isSet = !json[QString("connected_endpoint_type")].isNull() && m_connected_endpoint_type_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("connection_status")]);
    m_connection_status_isSet = !json[QString("connection_status")].isNull() && m_connection_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConsolePort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsolePort::asJsonObject() const {
    QJsonObject obj;
    if (m_cable.isSet()) {
        obj.insert(QString("cable"), ::OpenAPI::toJsonValue(m_cable));
    }
    if (m_connected_endpoint.size() > 0) {
        obj.insert(QString("connected_endpoint"), ::OpenAPI::toJsonValue(m_connected_endpoint));
    }
    if (m_connected_endpoint_type_isSet) {
        obj.insert(QString("connected_endpoint_type"), ::OpenAPI::toJsonValue(m_connected_endpoint_type));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("connection_status"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAINestedCable OAIConsolePort::getCable() const {
    return m_cable;
}
void OAIConsolePort::setCable(const OAINestedCable &cable) {
    m_cable = cable;
    m_cable_isSet = true;
}

bool OAIConsolePort::is_cable_Set() const{
    return m_cable_isSet;
}

bool OAIConsolePort::is_cable_Valid() const{
    return m_cable_isValid;
}

QMap<QString, QString> OAIConsolePort::getConnectedEndpoint() const {
    return m_connected_endpoint;
}
void OAIConsolePort::setConnectedEndpoint(const QMap<QString, QString> &connected_endpoint) {
    m_connected_endpoint = connected_endpoint;
    m_connected_endpoint_isSet = true;
}

bool OAIConsolePort::is_connected_endpoint_Set() const{
    return m_connected_endpoint_isSet;
}

bool OAIConsolePort::is_connected_endpoint_Valid() const{
    return m_connected_endpoint_isValid;
}

QString OAIConsolePort::getConnectedEndpointType() const {
    return m_connected_endpoint_type;
}
void OAIConsolePort::setConnectedEndpointType(const QString &connected_endpoint_type) {
    m_connected_endpoint_type = connected_endpoint_type;
    m_connected_endpoint_type_isSet = true;
}

bool OAIConsolePort::is_connected_endpoint_type_Set() const{
    return m_connected_endpoint_type_isSet;
}

bool OAIConsolePort::is_connected_endpoint_type_Valid() const{
    return m_connected_endpoint_type_isValid;
}

OAIConnection_status OAIConsolePort::getConnectionStatus() const {
    return m_connection_status;
}
void OAIConsolePort::setConnectionStatus(const OAIConnection_status &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIConsolePort::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIConsolePort::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAIConsolePort::getDescription() const {
    return m_description;
}
void OAIConsolePort::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConsolePort::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConsolePort::is_description_Valid() const{
    return m_description_isValid;
}

OAINestedDevice OAIConsolePort::getDevice() const {
    return m_device;
}
void OAIConsolePort::setDevice(const OAINestedDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIConsolePort::is_device_Set() const{
    return m_device_isSet;
}

bool OAIConsolePort::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAIConsolePort::getId() const {
    return m_id;
}
void OAIConsolePort::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConsolePort::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConsolePort::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConsolePort::getName() const {
    return m_name;
}
void OAIConsolePort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsolePort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsolePort::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConsolePort::getTags() const {
    return m_tags;
}
void OAIConsolePort::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConsolePort::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConsolePort::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIType OAIConsolePort::getType() const {
    return m_type;
}
void OAIConsolePort::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConsolePort::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConsolePort::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConsolePort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsolePort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
