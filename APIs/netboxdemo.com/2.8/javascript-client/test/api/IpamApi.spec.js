/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetBoxApi);
  }
}(this, function(expect, NetBoxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetBoxApi.IpamApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IpamApi', function() {
    describe('ipamAggregatesCreate', function() {
      it('should call ipamAggregatesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesCreate
        //instance.ipamAggregatesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamAggregatesDelete', function() {
      it('should call ipamAggregatesDelete successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesDelete
        //instance.ipamAggregatesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamAggregatesList', function() {
      it('should call ipamAggregatesList successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesList
        //instance.ipamAggregatesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamAggregatesPartialUpdate', function() {
      it('should call ipamAggregatesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesPartialUpdate
        //instance.ipamAggregatesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamAggregatesRead', function() {
      it('should call ipamAggregatesRead successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesRead
        //instance.ipamAggregatesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamAggregatesUpdate', function() {
      it('should call ipamAggregatesUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamAggregatesUpdate
        //instance.ipamAggregatesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesCreate', function() {
      it('should call ipamIpAddressesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesCreate
        //instance.ipamIpAddressesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesDelete', function() {
      it('should call ipamIpAddressesDelete successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesDelete
        //instance.ipamIpAddressesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesList', function() {
      it('should call ipamIpAddressesList successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesList
        //instance.ipamIpAddressesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesPartialUpdate', function() {
      it('should call ipamIpAddressesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesPartialUpdate
        //instance.ipamIpAddressesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesRead', function() {
      it('should call ipamIpAddressesRead successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesRead
        //instance.ipamIpAddressesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamIpAddressesUpdate', function() {
      it('should call ipamIpAddressesUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamIpAddressesUpdate
        //instance.ipamIpAddressesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesAvailableIpsCreate', function() {
      it('should call ipamPrefixesAvailableIpsCreate successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesAvailableIpsCreate
        //instance.ipamPrefixesAvailableIpsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesAvailableIpsRead', function() {
      it('should call ipamPrefixesAvailableIpsRead successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesAvailableIpsRead
        //instance.ipamPrefixesAvailableIpsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesAvailablePrefixesCreate', function() {
      it('should call ipamPrefixesAvailablePrefixesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesAvailablePrefixesCreate
        //instance.ipamPrefixesAvailablePrefixesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesAvailablePrefixesRead', function() {
      it('should call ipamPrefixesAvailablePrefixesRead successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesAvailablePrefixesRead
        //instance.ipamPrefixesAvailablePrefixesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesCreate', function() {
      it('should call ipamPrefixesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesCreate
        //instance.ipamPrefixesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesDelete', function() {
      it('should call ipamPrefixesDelete successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesDelete
        //instance.ipamPrefixesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesList', function() {
      it('should call ipamPrefixesList successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesList
        //instance.ipamPrefixesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesPartialUpdate', function() {
      it('should call ipamPrefixesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesPartialUpdate
        //instance.ipamPrefixesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesRead', function() {
      it('should call ipamPrefixesRead successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesRead
        //instance.ipamPrefixesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamPrefixesUpdate', function() {
      it('should call ipamPrefixesUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamPrefixesUpdate
        //instance.ipamPrefixesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsCreate', function() {
      it('should call ipamRirsCreate successfully', function(done) {
        //uncomment below and update the code to test ipamRirsCreate
        //instance.ipamRirsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsDelete', function() {
      it('should call ipamRirsDelete successfully', function(done) {
        //uncomment below and update the code to test ipamRirsDelete
        //instance.ipamRirsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsList', function() {
      it('should call ipamRirsList successfully', function(done) {
        //uncomment below and update the code to test ipamRirsList
        //instance.ipamRirsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsPartialUpdate', function() {
      it('should call ipamRirsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamRirsPartialUpdate
        //instance.ipamRirsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsRead', function() {
      it('should call ipamRirsRead successfully', function(done) {
        //uncomment below and update the code to test ipamRirsRead
        //instance.ipamRirsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRirsUpdate', function() {
      it('should call ipamRirsUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamRirsUpdate
        //instance.ipamRirsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesCreate', function() {
      it('should call ipamRolesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamRolesCreate
        //instance.ipamRolesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesDelete', function() {
      it('should call ipamRolesDelete successfully', function(done) {
        //uncomment below and update the code to test ipamRolesDelete
        //instance.ipamRolesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesList', function() {
      it('should call ipamRolesList successfully', function(done) {
        //uncomment below and update the code to test ipamRolesList
        //instance.ipamRolesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesPartialUpdate', function() {
      it('should call ipamRolesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamRolesPartialUpdate
        //instance.ipamRolesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesRead', function() {
      it('should call ipamRolesRead successfully', function(done) {
        //uncomment below and update the code to test ipamRolesRead
        //instance.ipamRolesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamRolesUpdate', function() {
      it('should call ipamRolesUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamRolesUpdate
        //instance.ipamRolesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesCreate', function() {
      it('should call ipamServicesCreate successfully', function(done) {
        //uncomment below and update the code to test ipamServicesCreate
        //instance.ipamServicesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesDelete', function() {
      it('should call ipamServicesDelete successfully', function(done) {
        //uncomment below and update the code to test ipamServicesDelete
        //instance.ipamServicesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesList', function() {
      it('should call ipamServicesList successfully', function(done) {
        //uncomment below and update the code to test ipamServicesList
        //instance.ipamServicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesPartialUpdate', function() {
      it('should call ipamServicesPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamServicesPartialUpdate
        //instance.ipamServicesPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesRead', function() {
      it('should call ipamServicesRead successfully', function(done) {
        //uncomment below and update the code to test ipamServicesRead
        //instance.ipamServicesRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamServicesUpdate', function() {
      it('should call ipamServicesUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamServicesUpdate
        //instance.ipamServicesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsCreate', function() {
      it('should call ipamVlanGroupsCreate successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsCreate
        //instance.ipamVlanGroupsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsDelete', function() {
      it('should call ipamVlanGroupsDelete successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsDelete
        //instance.ipamVlanGroupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsList', function() {
      it('should call ipamVlanGroupsList successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsList
        //instance.ipamVlanGroupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsPartialUpdate', function() {
      it('should call ipamVlanGroupsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsPartialUpdate
        //instance.ipamVlanGroupsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsRead', function() {
      it('should call ipamVlanGroupsRead successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsRead
        //instance.ipamVlanGroupsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlanGroupsUpdate', function() {
      it('should call ipamVlanGroupsUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVlanGroupsUpdate
        //instance.ipamVlanGroupsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansCreate', function() {
      it('should call ipamVlansCreate successfully', function(done) {
        //uncomment below and update the code to test ipamVlansCreate
        //instance.ipamVlansCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansDelete', function() {
      it('should call ipamVlansDelete successfully', function(done) {
        //uncomment below and update the code to test ipamVlansDelete
        //instance.ipamVlansDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansList', function() {
      it('should call ipamVlansList successfully', function(done) {
        //uncomment below and update the code to test ipamVlansList
        //instance.ipamVlansList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansPartialUpdate', function() {
      it('should call ipamVlansPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVlansPartialUpdate
        //instance.ipamVlansPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansRead', function() {
      it('should call ipamVlansRead successfully', function(done) {
        //uncomment below and update the code to test ipamVlansRead
        //instance.ipamVlansRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVlansUpdate', function() {
      it('should call ipamVlansUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVlansUpdate
        //instance.ipamVlansUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsCreate', function() {
      it('should call ipamVrfsCreate successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsCreate
        //instance.ipamVrfsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsDelete', function() {
      it('should call ipamVrfsDelete successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsDelete
        //instance.ipamVrfsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsList', function() {
      it('should call ipamVrfsList successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsList
        //instance.ipamVrfsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsPartialUpdate', function() {
      it('should call ipamVrfsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsPartialUpdate
        //instance.ipamVrfsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsRead', function() {
      it('should call ipamVrfsRead successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsRead
        //instance.ipamVrfsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipamVrfsUpdate', function() {
      it('should call ipamVrfsUpdate successfully', function(done) {
        //uncomment below and update the code to test ipamVrfsUpdate
        //instance.ipamVrfsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
