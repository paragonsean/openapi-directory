/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCable from './NestedCable';

/**
 * The WritableConsoleServerPort model module.
 * @module model/WritableConsoleServerPort
 * @version 2.8
 */
class WritableConsoleServerPort {
    /**
     * Constructs a new <code>WritableConsoleServerPort</code>.
     * @alias module:model/WritableConsoleServerPort
     * @param device {Number} 
     * @param name {String} 
     */
    constructor(device, name) { 
        
        WritableConsoleServerPort.initialize(this, device, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name) { 
        obj['device'] = device;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritableConsoleServerPort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableConsoleServerPort} obj Optional instance to populate.
     * @return {module:model/WritableConsoleServerPort} The populated <code>WritableConsoleServerPort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableConsoleServerPort();

            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('connected_endpoint')) {
                obj['connected_endpoint'] = ApiClient.convertToType(data['connected_endpoint'], {'String': 'String'});
            }
            if (data.hasOwnProperty('connected_endpoint_type')) {
                obj['connected_endpoint_type'] = ApiClient.convertToType(data['connected_endpoint_type'], 'String');
            }
            if (data.hasOwnProperty('connection_status')) {
                obj['connection_status'] = ApiClient.convertToType(data['connection_status'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableConsoleServerPort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableConsoleServerPort</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableConsoleServerPort.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['connected_endpoint_type'] && !(typeof data['connected_endpoint_type'] === 'string' || data['connected_endpoint_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoint_type` to be a primitive type in the JSON string but got " + data['connected_endpoint_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WritableConsoleServerPort.RequiredProperties = ["device", "name"];

/**
 * @member {module:model/NestedCable} cable
 */
WritableConsoleServerPort.prototype['cable'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Object.<String, String>} connected_endpoint
 */
WritableConsoleServerPort.prototype['connected_endpoint'] = undefined;

/**
 * @member {String} connected_endpoint_type
 */
WritableConsoleServerPort.prototype['connected_endpoint_type'] = undefined;

/**
 * @member {Boolean} connection_status
 */
WritableConsoleServerPort.prototype['connection_status'] = undefined;

/**
 * @member {String} description
 */
WritableConsoleServerPort.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritableConsoleServerPort.prototype['device'] = undefined;

/**
 * @member {Number} id
 */
WritableConsoleServerPort.prototype['id'] = undefined;

/**
 * @member {String} name
 */
WritableConsoleServerPort.prototype['name'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableConsoleServerPort.prototype['tags'] = undefined;

/**
 * Physical port type
 * @member {module:model/WritableConsoleServerPort.TypeEnum} type
 */
WritableConsoleServerPort.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritableConsoleServerPort['TypeEnum'] = {

    /**
     * value: "de-9"
     * @const
     */
    "de-9": "de-9",

    /**
     * value: "db-25"
     * @const
     */
    "db-25": "db-25",

    /**
     * value: "rj-11"
     * @const
     */
    "rj-11": "rj-11",

    /**
     * value: "rj-12"
     * @const
     */
    "rj-12": "rj-12",

    /**
     * value: "rj-45"
     * @const
     */
    "rj-45": "rj-45",

    /**
     * value: "usb-a"
     * @const
     */
    "usb-a": "usb-a",

    /**
     * value: "usb-b"
     * @const
     */
    "usb-b": "usb-b",

    /**
     * value: "usb-c"
     * @const
     */
    "usb-c": "usb-c",

    /**
     * value: "usb-mini-a"
     * @const
     */
    "usb-mini-a": "usb-mini-a",

    /**
     * value: "usb-mini-b"
     * @const
     */
    "usb-mini-b": "usb-mini-b",

    /**
     * value: "usb-micro-a"
     * @const
     */
    "usb-micro-a": "usb-micro-a",

    /**
     * value: "usb-micro-b"
     * @const
     */
    "usb-micro-b": "usb-micro-b",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default WritableConsoleServerPort;

