/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionStatus from './ConnectionStatus';
import Mode from './Mode';
import NestedCable from './NestedCable';
import NestedDevice from './NestedDevice';
import NestedInterface from './NestedInterface';
import NestedVLAN from './NestedVLAN';
import Type1 from './Type1';

/**
 * The DeviceInterface model module.
 * @module model/DeviceInterface
 * @version 2.8
 */
class DeviceInterface {
    /**
     * Constructs a new <code>DeviceInterface</code>.
     * @alias module:model/DeviceInterface
     * @param device {module:model/NestedDevice} 
     * @param name {String} 
     * @param type {module:model/Type1} 
     */
    constructor(device, name, type) { 
        
        DeviceInterface.initialize(this, device, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name, type) { 
        obj['device'] = device;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DeviceInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInterface} obj Optional instance to populate.
     * @return {module:model/DeviceInterface} The populated <code>DeviceInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInterface();

            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('connected_endpoint')) {
                obj['connected_endpoint'] = ApiClient.convertToType(data['connected_endpoint'], {'String': 'String'});
            }
            if (data.hasOwnProperty('connected_endpoint_type')) {
                obj['connected_endpoint_type'] = ApiClient.convertToType(data['connected_endpoint_type'], 'String');
            }
            if (data.hasOwnProperty('connection_status')) {
                obj['connection_status'] = ConnectionStatus.constructFromObject(data['connection_status']);
            }
            if (data.hasOwnProperty('count_ipaddresses')) {
                obj['count_ipaddresses'] = ApiClient.convertToType(data['count_ipaddresses'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = NestedDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lag')) {
                obj['lag'] = NestedInterface.constructFromObject(data['lag']);
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('mgmt_only')) {
                obj['mgmt_only'] = ApiClient.convertToType(data['mgmt_only'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = Mode.constructFromObject(data['mode']);
            }
            if (data.hasOwnProperty('mtu')) {
                obj['mtu'] = ApiClient.convertToType(data['mtu'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagged_vlans')) {
                obj['tagged_vlans'] = ApiClient.convertToType(data['tagged_vlans'], [NestedVLAN]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type1.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('untagged_vlan')) {
                obj['untagged_vlan'] = NestedVLAN.constructFromObject(data['untagged_vlan']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['connected_endpoint_type'] && !(typeof data['connected_endpoint_type'] === 'string' || data['connected_endpoint_type'] instanceof String)) {
            throw new Error("Expected the field `connected_endpoint_type` to be a primitive type in the JSON string but got " + data['connected_endpoint_type']);
        }
        // validate the optional field `connection_status`
        if (data['connection_status']) { // data not null
          ConnectionStatus.validateJSON(data['connection_status']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          NestedDevice.validateJSON(data['device']);
        }
        // validate the optional field `lag`
        if (data['lag']) { // data not null
          NestedInterface.validateJSON(data['lag']);
        }
        // ensure the json data is a string
        if (data['mac_address'] && !(typeof data['mac_address'] === 'string' || data['mac_address'] instanceof String)) {
            throw new Error("Expected the field `mac_address` to be a primitive type in the JSON string but got " + data['mac_address']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          Mode.validateJSON(data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tagged_vlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagged_vlans'])) {
                throw new Error("Expected the field `tagged_vlans` to be an array in the JSON data but got " + data['tagged_vlans']);
            }
            // validate the optional field `tagged_vlans` (array)
            for (const item of data['tagged_vlans']) {
                NestedVLAN.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type1.validateJSON(data['type']);
        }
        // validate the optional field `untagged_vlan`
        if (data['untagged_vlan']) { // data not null
          NestedVLAN.validateJSON(data['untagged_vlan']);
        }

        return true;
    }


}

DeviceInterface.RequiredProperties = ["device", "name", "type"];

/**
 * @member {module:model/NestedCable} cable
 */
DeviceInterface.prototype['cable'] = undefined;

/**
 *  Return the appropriate serializer for the type of connected object. 
 * @member {Object.<String, String>} connected_endpoint
 */
DeviceInterface.prototype['connected_endpoint'] = undefined;

/**
 * @member {String} connected_endpoint_type
 */
DeviceInterface.prototype['connected_endpoint_type'] = undefined;

/**
 * @member {module:model/ConnectionStatus} connection_status
 */
DeviceInterface.prototype['connection_status'] = undefined;

/**
 * @member {Number} count_ipaddresses
 */
DeviceInterface.prototype['count_ipaddresses'] = undefined;

/**
 * @member {String} description
 */
DeviceInterface.prototype['description'] = undefined;

/**
 * @member {module:model/NestedDevice} device
 */
DeviceInterface.prototype['device'] = undefined;

/**
 * @member {Boolean} enabled
 */
DeviceInterface.prototype['enabled'] = undefined;

/**
 * @member {Number} id
 */
DeviceInterface.prototype['id'] = undefined;

/**
 * @member {module:model/NestedInterface} lag
 */
DeviceInterface.prototype['lag'] = undefined;

/**
 * @member {String} mac_address
 */
DeviceInterface.prototype['mac_address'] = undefined;

/**
 * This interface is used only for out-of-band management
 * @member {Boolean} mgmt_only
 */
DeviceInterface.prototype['mgmt_only'] = undefined;

/**
 * @member {module:model/Mode} mode
 */
DeviceInterface.prototype['mode'] = undefined;

/**
 * @member {Number} mtu
 */
DeviceInterface.prototype['mtu'] = undefined;

/**
 * @member {String} name
 */
DeviceInterface.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/NestedVLAN>} tagged_vlans
 */
DeviceInterface.prototype['tagged_vlans'] = undefined;

/**
 * @member {Array.<String>} tags
 */
DeviceInterface.prototype['tags'] = undefined;

/**
 * @member {module:model/Type1} type
 */
DeviceInterface.prototype['type'] = undefined;

/**
 * @member {module:model/NestedVLAN} untagged_vlan
 */
DeviceInterface.prototype['untagged_vlan'] = undefined;






export default DeviceInterface;

