/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableRack model module.
 * @module model/WritableRack
 * @version 2.8
 */
class WritableRack {
    /**
     * Constructs a new <code>WritableRack</code>.
     * @alias module:model/WritableRack
     * @param name {String} 
     * @param site {Number} 
     */
    constructor(name, site) { 
        
        WritableRack.initialize(this, name, site);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, site) { 
        obj['name'] = name;
        obj['site'] = site;
    }

    /**
     * Constructs a <code>WritableRack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableRack} obj Optional instance to populate.
     * @return {module:model/WritableRack} The populated <code>WritableRack</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableRack();

            if (data.hasOwnProperty('asset_tag')) {
                obj['asset_tag'] = ApiClient.convertToType(data['asset_tag'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('desc_units')) {
                obj['desc_units'] = ApiClient.convertToType(data['desc_units'], 'Boolean');
            }
            if (data.hasOwnProperty('device_count')) {
                obj['device_count'] = ApiClient.convertToType(data['device_count'], 'Number');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('facility_id')) {
                obj['facility_id'] = ApiClient.convertToType(data['facility_id'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outer_depth')) {
                obj['outer_depth'] = ApiClient.convertToType(data['outer_depth'], 'Number');
            }
            if (data.hasOwnProperty('outer_unit')) {
                obj['outer_unit'] = ApiClient.convertToType(data['outer_unit'], 'String');
            }
            if (data.hasOwnProperty('outer_width')) {
                obj['outer_width'] = ApiClient.convertToType(data['outer_width'], 'Number');
            }
            if (data.hasOwnProperty('powerfeed_count')) {
                obj['powerfeed_count'] = ApiClient.convertToType(data['powerfeed_count'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('u_height')) {
                obj['u_height'] = ApiClient.convertToType(data['u_height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableRack</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableRack</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableRack.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['asset_tag'] && !(typeof data['asset_tag'] === 'string' || data['asset_tag'] instanceof String)) {
            throw new Error("Expected the field `asset_tag` to be a primitive type in the JSON string but got " + data['asset_tag']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['facility_id'] && !(typeof data['facility_id'] === 'string' || data['facility_id'] instanceof String)) {
            throw new Error("Expected the field `facility_id` to be a primitive type in the JSON string but got " + data['facility_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['outer_unit'] && !(typeof data['outer_unit'] === 'string' || data['outer_unit'] instanceof String)) {
            throw new Error("Expected the field `outer_unit` to be a primitive type in the JSON string but got " + data['outer_unit']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WritableRack.RequiredProperties = ["name", "site"];

/**
 * A unique tag used to identify this rack
 * @member {String} asset_tag
 */
WritableRack.prototype['asset_tag'] = undefined;

/**
 * @member {String} comments
 */
WritableRack.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritableRack.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritableRack.prototype['custom_fields'] = undefined;

/**
 * Units are numbered top-to-bottom
 * @member {Boolean} desc_units
 */
WritableRack.prototype['desc_units'] = undefined;

/**
 * @member {Number} device_count
 */
WritableRack.prototype['device_count'] = undefined;

/**
 * @member {String} display_name
 */
WritableRack.prototype['display_name'] = undefined;

/**
 * Locally-assigned identifier
 * @member {String} facility_id
 */
WritableRack.prototype['facility_id'] = undefined;

/**
 * Assigned group
 * @member {Number} group
 */
WritableRack.prototype['group'] = undefined;

/**
 * @member {Number} id
 */
WritableRack.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WritableRack.prototype['last_updated'] = undefined;

/**
 * @member {String} name
 */
WritableRack.prototype['name'] = undefined;

/**
 * Outer dimension of rack (depth)
 * @member {Number} outer_depth
 */
WritableRack.prototype['outer_depth'] = undefined;

/**
 * @member {module:model/WritableRack.OuterUnitEnum} outer_unit
 */
WritableRack.prototype['outer_unit'] = undefined;

/**
 * Outer dimension of rack (width)
 * @member {Number} outer_width
 */
WritableRack.prototype['outer_width'] = undefined;

/**
 * @member {Number} powerfeed_count
 */
WritableRack.prototype['powerfeed_count'] = undefined;

/**
 * Functional role
 * @member {Number} role
 */
WritableRack.prototype['role'] = undefined;

/**
 * @member {String} serial
 */
WritableRack.prototype['serial'] = undefined;

/**
 * @member {Number} site
 */
WritableRack.prototype['site'] = undefined;

/**
 * @member {module:model/WritableRack.StatusEnum} status
 */
WritableRack.prototype['status'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableRack.prototype['tags'] = undefined;

/**
 * @member {Number} tenant
 */
WritableRack.prototype['tenant'] = undefined;

/**
 * @member {module:model/WritableRack.TypeEnum} type
 */
WritableRack.prototype['type'] = undefined;

/**
 * Height in rack units
 * @member {Number} u_height
 */
WritableRack.prototype['u_height'] = undefined;

/**
 * Rail-to-rail width
 * @member {module:model/WritableRack.WidthEnum} width
 */
WritableRack.prototype['width'] = undefined;





/**
 * Allowed values for the <code>outer_unit</code> property.
 * @enum {String}
 * @readonly
 */
WritableRack['OuterUnitEnum'] = {

    /**
     * value: "mm"
     * @const
     */
    "mm": "mm",

    /**
     * value: "in"
     * @const
     */
    "in": "in"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WritableRack['StatusEnum'] = {

    /**
     * value: "reserved"
     * @const
     */
    "reserved": "reserved",

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "deprecated"
     * @const
     */
    "deprecated": "deprecated"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritableRack['TypeEnum'] = {

    /**
     * value: "2-post-frame"
     * @const
     */
    "2-post-frame": "2-post-frame",

    /**
     * value: "4-post-frame"
     * @const
     */
    "4-post-frame": "4-post-frame",

    /**
     * value: "4-post-cabinet"
     * @const
     */
    "4-post-cabinet": "4-post-cabinet",

    /**
     * value: "wall-frame"
     * @const
     */
    "wall-frame": "wall-frame",

    /**
     * value: "wall-cabinet"
     * @const
     */
    "wall-cabinet": "wall-cabinet"
};


/**
 * Allowed values for the <code>width</code> property.
 * @enum {Number}
 * @readonly
 */
WritableRack['WidthEnum'] = {

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 23
     * @const
     */
    "23": 23
};



export default WritableRack;

