/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type5 model module.
 * @module model/Type5
 * @version 2.8
 */
class Type5 {
    /**
     * Constructs a new <code>Type5</code>.
     * @alias module:model/Type5
     * @param label {module:model/Type5.LabelEnum} 
     * @param value {module:model/Type5.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type5.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type5</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type5} obj Optional instance to populate.
     * @return {module:model/Type5} The populated <code>Type5</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type5();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type5</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type5</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type5.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type5.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type5.LabelEnum} label
 */
Type5.prototype['label'] = undefined;

/**
 * @member {module:model/Type5.ValueEnum} value
 */
Type5.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type5['LabelEnum'] = {

    /**
     * value: "C6"
     * @const
     */
    "C6": "C6",

    /**
     * value: "C8"
     * @const
     */
    "C8": "C8",

    /**
     * value: "C14"
     * @const
     */
    "C14": "C14",

    /**
     * value: "C16"
     * @const
     */
    "C16": "C16",

    /**
     * value: "C20"
     * @const
     */
    "C20": "C20",

    /**
     * value: "P+N+E 4H"
     * @const
     */
    "P+N+E 4H": "P+N+E 4H",

    /**
     * value: "P+N+E 6H"
     * @const
     */
    "P+N+E 6H": "P+N+E 6H",

    /**
     * value: "P+N+E 9H"
     * @const
     */
    "P+N+E 9H": "P+N+E 9H",

    /**
     * value: "2P+E 4H"
     * @const
     */
    "2P+E 4H": "2P+E 4H",

    /**
     * value: "2P+E 6H"
     * @const
     */
    "2P+E 6H": "2P+E 6H",

    /**
     * value: "2P+E 9H"
     * @const
     */
    "2P+E 9H": "2P+E 9H",

    /**
     * value: "3P+E 4H"
     * @const
     */
    "3P+E 4H": "3P+E 4H",

    /**
     * value: "3P+E 6H"
     * @const
     */
    "3P+E 6H": "3P+E 6H",

    /**
     * value: "3P+E 9H"
     * @const
     */
    "3P+E 9H": "3P+E 9H",

    /**
     * value: "3P+N+E 4H"
     * @const
     */
    "3P+N+E 4H": "3P+N+E 4H",

    /**
     * value: "3P+N+E 6H"
     * @const
     */
    "3P+N+E 6H": "3P+N+E 6H",

    /**
     * value: "3P+N+E 9H"
     * @const
     */
    "3P+N+E 9H": "3P+N+E 9H",

    /**
     * value: "NEMA 1-15P"
     * @const
     */
    "NEMA 1-15P": "NEMA 1-15P",

    /**
     * value: "NEMA 5-15P"
     * @const
     */
    "NEMA 5-15P": "NEMA 5-15P",

    /**
     * value: "NEMA 5-20P"
     * @const
     */
    "NEMA 5-20P": "NEMA 5-20P",

    /**
     * value: "NEMA 5-30P"
     * @const
     */
    "NEMA 5-30P": "NEMA 5-30P",

    /**
     * value: "NEMA 5-50P"
     * @const
     */
    "NEMA 5-50P": "NEMA 5-50P",

    /**
     * value: "NEMA 6-15P"
     * @const
     */
    "NEMA 6-15P": "NEMA 6-15P",

    /**
     * value: "NEMA 6-20P"
     * @const
     */
    "NEMA 6-20P": "NEMA 6-20P",

    /**
     * value: "NEMA 6-30P"
     * @const
     */
    "NEMA 6-30P": "NEMA 6-30P",

    /**
     * value: "NEMA 6-50P"
     * @const
     */
    "NEMA 6-50P": "NEMA 6-50P",

    /**
     * value: "NEMA 10-30P"
     * @const
     */
    "NEMA 10-30P": "NEMA 10-30P",

    /**
     * value: "NEMA 10-50P"
     * @const
     */
    "NEMA 10-50P": "NEMA 10-50P",

    /**
     * value: "NEMA 14-20P"
     * @const
     */
    "NEMA 14-20P": "NEMA 14-20P",

    /**
     * value: "NEMA 14-30P"
     * @const
     */
    "NEMA 14-30P": "NEMA 14-30P",

    /**
     * value: "NEMA 14-50P"
     * @const
     */
    "NEMA 14-50P": "NEMA 14-50P",

    /**
     * value: "NEMA 14-60P"
     * @const
     */
    "NEMA 14-60P": "NEMA 14-60P",

    /**
     * value: "NEMA L1-15P"
     * @const
     */
    "NEMA L1-15P": "NEMA L1-15P",

    /**
     * value: "NEMA L5-15P"
     * @const
     */
    "NEMA L5-15P": "NEMA L5-15P",

    /**
     * value: "NEMA L5-20P"
     * @const
     */
    "NEMA L5-20P": "NEMA L5-20P",

    /**
     * value: "NEMA L5-30P"
     * @const
     */
    "NEMA L5-30P": "NEMA L5-30P",

    /**
     * value: "NEMA L5-50P"
     * @const
     */
    "NEMA L5-50P": "NEMA L5-50P",

    /**
     * value: "NEMA L6-15P"
     * @const
     */
    "NEMA L6-15P": "NEMA L6-15P",

    /**
     * value: "NEMA L6-20P"
     * @const
     */
    "NEMA L6-20P": "NEMA L6-20P",

    /**
     * value: "NEMA L6-30P"
     * @const
     */
    "NEMA L6-30P": "NEMA L6-30P",

    /**
     * value: "NEMA L6-50P"
     * @const
     */
    "NEMA L6-50P": "NEMA L6-50P",

    /**
     * value: "NEMA L10-30P"
     * @const
     */
    "NEMA L10-30P": "NEMA L10-30P",

    /**
     * value: "NEMA L14-20P"
     * @const
     */
    "NEMA L14-20P": "NEMA L14-20P",

    /**
     * value: "NEMA L14-30P"
     * @const
     */
    "NEMA L14-30P": "NEMA L14-30P",

    /**
     * value: "NEMA L14-50P"
     * @const
     */
    "NEMA L14-50P": "NEMA L14-50P",

    /**
     * value: "NEMA L14-60P"
     * @const
     */
    "NEMA L14-60P": "NEMA L14-60P",

    /**
     * value: "NEMA L21-20P"
     * @const
     */
    "NEMA L21-20P": "NEMA L21-20P",

    /**
     * value: "NEMA L21-30P"
     * @const
     */
    "NEMA L21-30P": "NEMA L21-30P",

    /**
     * value: "CS6361C"
     * @const
     */
    "CS6361C": "CS6361C",

    /**
     * value: "CS6365C"
     * @const
     */
    "CS6365C": "CS6365C",

    /**
     * value: "CS8165C"
     * @const
     */
    "CS8165C": "CS8165C",

    /**
     * value: "CS8265C"
     * @const
     */
    "CS8265C": "CS8265C",

    /**
     * value: "CS8365C"
     * @const
     */
    "CS8365C": "CS8365C",

    /**
     * value: "CS8465C"
     * @const
     */
    "CS8465C": "CS8465C",

    /**
     * value: "ITA Type E (CEE 7/5)"
     * @const
     */
    "ITA Type E (CEE 7/5)": "ITA Type E (CEE 7/5)",

    /**
     * value: "ITA Type F (CEE 7/4)"
     * @const
     */
    "ITA Type F (CEE 7/4)": "ITA Type F (CEE 7/4)",

    /**
     * value: "ITA Type E/F (CEE 7/7)"
     * @const
     */
    "ITA Type E/F (CEE 7/7)": "ITA Type E/F (CEE 7/7)",

    /**
     * value: "ITA Type G (BS 1363)"
     * @const
     */
    "ITA Type G (BS 1363)": "ITA Type G (BS 1363)",

    /**
     * value: "ITA Type H"
     * @const
     */
    "ITA Type H": "ITA Type H",

    /**
     * value: "ITA Type I"
     * @const
     */
    "ITA Type I": "ITA Type I",

    /**
     * value: "ITA Type J"
     * @const
     */
    "ITA Type J": "ITA Type J",

    /**
     * value: "ITA Type K"
     * @const
     */
    "ITA Type K": "ITA Type K",

    /**
     * value: "ITA Type L (CEI 23-50)"
     * @const
     */
    "ITA Type L (CEI 23-50)": "ITA Type L (CEI 23-50)",

    /**
     * value: "ITA Type M (BS 546)"
     * @const
     */
    "ITA Type M (BS 546)": "ITA Type M (BS 546)",

    /**
     * value: "ITA Type N"
     * @const
     */
    "ITA Type N": "ITA Type N",

    /**
     * value: "ITA Type O"
     * @const
     */
    "ITA Type O": "ITA Type O"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type5['ValueEnum'] = {

    /**
     * value: "iec-60320-c6"
     * @const
     */
    "iec-60320-c6": "iec-60320-c6",

    /**
     * value: "iec-60320-c8"
     * @const
     */
    "iec-60320-c8": "iec-60320-c8",

    /**
     * value: "iec-60320-c14"
     * @const
     */
    "iec-60320-c14": "iec-60320-c14",

    /**
     * value: "iec-60320-c16"
     * @const
     */
    "iec-60320-c16": "iec-60320-c16",

    /**
     * value: "iec-60320-c20"
     * @const
     */
    "iec-60320-c20": "iec-60320-c20",

    /**
     * value: "iec-60309-p-n-e-4h"
     * @const
     */
    "iec-60309-p-n-e-4h": "iec-60309-p-n-e-4h",

    /**
     * value: "iec-60309-p-n-e-6h"
     * @const
     */
    "iec-60309-p-n-e-6h": "iec-60309-p-n-e-6h",

    /**
     * value: "iec-60309-p-n-e-9h"
     * @const
     */
    "iec-60309-p-n-e-9h": "iec-60309-p-n-e-9h",

    /**
     * value: "iec-60309-2p-e-4h"
     * @const
     */
    "iec-60309-2p-e-4h": "iec-60309-2p-e-4h",

    /**
     * value: "iec-60309-2p-e-6h"
     * @const
     */
    "iec-60309-2p-e-6h": "iec-60309-2p-e-6h",

    /**
     * value: "iec-60309-2p-e-9h"
     * @const
     */
    "iec-60309-2p-e-9h": "iec-60309-2p-e-9h",

    /**
     * value: "iec-60309-3p-e-4h"
     * @const
     */
    "iec-60309-3p-e-4h": "iec-60309-3p-e-4h",

    /**
     * value: "iec-60309-3p-e-6h"
     * @const
     */
    "iec-60309-3p-e-6h": "iec-60309-3p-e-6h",

    /**
     * value: "iec-60309-3p-e-9h"
     * @const
     */
    "iec-60309-3p-e-9h": "iec-60309-3p-e-9h",

    /**
     * value: "iec-60309-3p-n-e-4h"
     * @const
     */
    "iec-60309-3p-n-e-4h": "iec-60309-3p-n-e-4h",

    /**
     * value: "iec-60309-3p-n-e-6h"
     * @const
     */
    "iec-60309-3p-n-e-6h": "iec-60309-3p-n-e-6h",

    /**
     * value: "iec-60309-3p-n-e-9h"
     * @const
     */
    "iec-60309-3p-n-e-9h": "iec-60309-3p-n-e-9h",

    /**
     * value: "nema-1-15p"
     * @const
     */
    "nema-1-15p": "nema-1-15p",

    /**
     * value: "nema-5-15p"
     * @const
     */
    "nema-5-15p": "nema-5-15p",

    /**
     * value: "nema-5-20p"
     * @const
     */
    "nema-5-20p": "nema-5-20p",

    /**
     * value: "nema-5-30p"
     * @const
     */
    "nema-5-30p": "nema-5-30p",

    /**
     * value: "nema-5-50p"
     * @const
     */
    "nema-5-50p": "nema-5-50p",

    /**
     * value: "nema-6-15p"
     * @const
     */
    "nema-6-15p": "nema-6-15p",

    /**
     * value: "nema-6-20p"
     * @const
     */
    "nema-6-20p": "nema-6-20p",

    /**
     * value: "nema-6-30p"
     * @const
     */
    "nema-6-30p": "nema-6-30p",

    /**
     * value: "nema-6-50p"
     * @const
     */
    "nema-6-50p": "nema-6-50p",

    /**
     * value: "nema-10-30p"
     * @const
     */
    "nema-10-30p": "nema-10-30p",

    /**
     * value: "nema-10-50p"
     * @const
     */
    "nema-10-50p": "nema-10-50p",

    /**
     * value: "nema-14-20p"
     * @const
     */
    "nema-14-20p": "nema-14-20p",

    /**
     * value: "nema-14-30p"
     * @const
     */
    "nema-14-30p": "nema-14-30p",

    /**
     * value: "nema-14-50p"
     * @const
     */
    "nema-14-50p": "nema-14-50p",

    /**
     * value: "nema-14-60p"
     * @const
     */
    "nema-14-60p": "nema-14-60p",

    /**
     * value: "nema-l1-15p"
     * @const
     */
    "nema-l1-15p": "nema-l1-15p",

    /**
     * value: "nema-l5-15p"
     * @const
     */
    "nema-l5-15p": "nema-l5-15p",

    /**
     * value: "nema-l5-20p"
     * @const
     */
    "nema-l5-20p": "nema-l5-20p",

    /**
     * value: "nema-l5-30p"
     * @const
     */
    "nema-l5-30p": "nema-l5-30p",

    /**
     * value: "nema-l5-50p"
     * @const
     */
    "nema-l5-50p": "nema-l5-50p",

    /**
     * value: "nema-l6-15p"
     * @const
     */
    "nema-l6-15p": "nema-l6-15p",

    /**
     * value: "nema-l6-20p"
     * @const
     */
    "nema-l6-20p": "nema-l6-20p",

    /**
     * value: "nema-l6-30p"
     * @const
     */
    "nema-l6-30p": "nema-l6-30p",

    /**
     * value: "nema-l6-50p"
     * @const
     */
    "nema-l6-50p": "nema-l6-50p",

    /**
     * value: "nema-l10-30p"
     * @const
     */
    "nema-l10-30p": "nema-l10-30p",

    /**
     * value: "nema-l14-20p"
     * @const
     */
    "nema-l14-20p": "nema-l14-20p",

    /**
     * value: "nema-l14-30p"
     * @const
     */
    "nema-l14-30p": "nema-l14-30p",

    /**
     * value: "nema-l14-50p"
     * @const
     */
    "nema-l14-50p": "nema-l14-50p",

    /**
     * value: "nema-l14-60p"
     * @const
     */
    "nema-l14-60p": "nema-l14-60p",

    /**
     * value: "nema-l21-20p"
     * @const
     */
    "nema-l21-20p": "nema-l21-20p",

    /**
     * value: "nema-l21-30p"
     * @const
     */
    "nema-l21-30p": "nema-l21-30p",

    /**
     * value: "cs6361c"
     * @const
     */
    "cs6361c": "cs6361c",

    /**
     * value: "cs6365c"
     * @const
     */
    "cs6365c": "cs6365c",

    /**
     * value: "cs8165c"
     * @const
     */
    "cs8165c": "cs8165c",

    /**
     * value: "cs8265c"
     * @const
     */
    "cs8265c": "cs8265c",

    /**
     * value: "cs8365c"
     * @const
     */
    "cs8365c": "cs8365c",

    /**
     * value: "cs8465c"
     * @const
     */
    "cs8465c": "cs8465c",

    /**
     * value: "ita-e"
     * @const
     */
    "ita-e": "ita-e",

    /**
     * value: "ita-f"
     * @const
     */
    "ita-f": "ita-f",

    /**
     * value: "ita-ef"
     * @const
     */
    "ita-ef": "ita-ef",

    /**
     * value: "ita-g"
     * @const
     */
    "ita-g": "ita-g",

    /**
     * value: "ita-h"
     * @const
     */
    "ita-h": "ita-h",

    /**
     * value: "ita-i"
     * @const
     */
    "ita-i": "ita-i",

    /**
     * value: "ita-j"
     * @const
     */
    "ita-j": "ita-j",

    /**
     * value: "ita-k"
     * @const
     */
    "ita-k": "ita-k",

    /**
     * value: "ita-l"
     * @const
     */
    "ita-l": "ita-l",

    /**
     * value: "ita-m"
     * @const
     */
    "ita-m": "ita-m",

    /**
     * value: "ita-n"
     * @const
     */
    "ita-n": "ita-n",

    /**
     * value: "ita-o"
     * @const
     */
    "ita-o": "ita-o"
};



export default Type5;

