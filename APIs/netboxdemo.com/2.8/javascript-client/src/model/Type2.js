/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type2 model module.
 * @module model/Type2
 * @version 2.8
 */
class Type2 {
    /**
     * Constructs a new <code>Type2</code>.
     * @alias module:model/Type2
     * @param label {module:model/Type2.LabelEnum} 
     * @param value {module:model/Type2.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type2.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type2} obj Optional instance to populate.
     * @return {module:model/Type2} The populated <code>Type2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type2();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type2.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type2.LabelEnum} label
 */
Type2.prototype['label'] = undefined;

/**
 * @member {module:model/Type2.ValueEnum} value
 */
Type2.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type2['LabelEnum'] = {

    /**
     * value: "8P8C"
     * @const
     */
    "8P8C": "8P8C",

    /**
     * value: "110 Punch"
     * @const
     */
    "110 Punch": "110 Punch",

    /**
     * value: "BNC"
     * @const
     */
    "BNC": "BNC",

    /**
     * value: "MRJ21"
     * @const
     */
    "MRJ21": "MRJ21",

    /**
     * value: "FC"
     * @const
     */
    "FC": "FC",

    /**
     * value: "LC"
     * @const
     */
    "LC": "LC",

    /**
     * value: "LC/APC"
     * @const
     */
    "LC/APC": "LC/APC",

    /**
     * value: "LSH"
     * @const
     */
    "LSH": "LSH",

    /**
     * value: "LSH/APC"
     * @const
     */
    "LSH/APC": "LSH/APC",

    /**
     * value: "MPO"
     * @const
     */
    "MPO": "MPO",

    /**
     * value: "MTRJ"
     * @const
     */
    "MTRJ": "MTRJ",

    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",

    /**
     * value: "SC/APC"
     * @const
     */
    "SC/APC": "SC/APC",

    /**
     * value: "ST"
     * @const
     */
    "ST": "ST"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type2['ValueEnum'] = {

    /**
     * value: "8p8c"
     * @const
     */
    "8p8c": "8p8c",

    /**
     * value: "110-punch"
     * @const
     */
    "110-punch": "110-punch",

    /**
     * value: "bnc"
     * @const
     */
    "bnc": "bnc",

    /**
     * value: "mrj21"
     * @const
     */
    "mrj21": "mrj21",

    /**
     * value: "fc"
     * @const
     */
    "fc": "fc",

    /**
     * value: "lc"
     * @const
     */
    "lc": "lc",

    /**
     * value: "lc-apc"
     * @const
     */
    "lc-apc": "lc-apc",

    /**
     * value: "lsh"
     * @const
     */
    "lsh": "lsh",

    /**
     * value: "lsh-apc"
     * @const
     */
    "lsh-apc": "lsh-apc",

    /**
     * value: "mpo"
     * @const
     */
    "mpo": "mpo",

    /**
     * value: "mtrj"
     * @const
     */
    "mtrj": "mtrj",

    /**
     * value: "sc"
     * @const
     */
    "sc": "sc",

    /**
     * value: "sc-apc"
     * @const
     */
    "sc-apc": "sc-apc",

    /**
     * value: "st"
     * @const
     */
    "st": "st"
};



export default Type2;

