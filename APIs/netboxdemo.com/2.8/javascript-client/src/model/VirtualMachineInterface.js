/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mode from './Mode';
import NestedVLAN from './NestedVLAN';
import NestedVirtualMachine from './NestedVirtualMachine';
import Type7 from './Type7';

/**
 * The VirtualMachineInterface model module.
 * @module model/VirtualMachineInterface
 * @version 2.8
 */
class VirtualMachineInterface {
    /**
     * Constructs a new <code>VirtualMachineInterface</code>.
     * @alias module:model/VirtualMachineInterface
     * @param name {String} 
     * @param virtualMachine {module:model/NestedVirtualMachine} 
     */
    constructor(name, virtualMachine) { 
        
        VirtualMachineInterface.initialize(this, name, virtualMachine);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, virtualMachine) { 
        obj['name'] = name;
        obj['virtual_machine'] = virtualMachine;
    }

    /**
     * Constructs a <code>VirtualMachineInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineInterface} obj Optional instance to populate.
     * @return {module:model/VirtualMachineInterface} The populated <code>VirtualMachineInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineInterface();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = Mode.constructFromObject(data['mode']);
            }
            if (data.hasOwnProperty('mtu')) {
                obj['mtu'] = ApiClient.convertToType(data['mtu'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagged_vlans')) {
                obj['tagged_vlans'] = ApiClient.convertToType(data['tagged_vlans'], [NestedVLAN]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = Type7.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('untagged_vlan')) {
                obj['untagged_vlan'] = NestedVLAN.constructFromObject(data['untagged_vlan']);
            }
            if (data.hasOwnProperty('virtual_machine')) {
                obj['virtual_machine'] = NestedVirtualMachine.constructFromObject(data['virtual_machine']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mac_address'] && !(typeof data['mac_address'] === 'string' || data['mac_address'] instanceof String)) {
            throw new Error("Expected the field `mac_address` to be a primitive type in the JSON string but got " + data['mac_address']);
        }
        // validate the optional field `mode`
        if (data['mode']) { // data not null
          Mode.validateJSON(data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tagged_vlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tagged_vlans'])) {
                throw new Error("Expected the field `tagged_vlans` to be an array in the JSON data but got " + data['tagged_vlans']);
            }
            // validate the optional field `tagged_vlans` (array)
            for (const item of data['tagged_vlans']) {
                NestedVLAN.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          Type7.validateJSON(data['type']);
        }
        // validate the optional field `untagged_vlan`
        if (data['untagged_vlan']) { // data not null
          NestedVLAN.validateJSON(data['untagged_vlan']);
        }
        // validate the optional field `virtual_machine`
        if (data['virtual_machine']) { // data not null
          NestedVirtualMachine.validateJSON(data['virtual_machine']);
        }

        return true;
    }


}

VirtualMachineInterface.RequiredProperties = ["name", "virtual_machine"];

/**
 * @member {String} description
 */
VirtualMachineInterface.prototype['description'] = undefined;

/**
 * @member {Boolean} enabled
 */
VirtualMachineInterface.prototype['enabled'] = undefined;

/**
 * @member {Number} id
 */
VirtualMachineInterface.prototype['id'] = undefined;

/**
 * @member {String} mac_address
 */
VirtualMachineInterface.prototype['mac_address'] = undefined;

/**
 * @member {module:model/Mode} mode
 */
VirtualMachineInterface.prototype['mode'] = undefined;

/**
 * @member {Number} mtu
 */
VirtualMachineInterface.prototype['mtu'] = undefined;

/**
 * @member {String} name
 */
VirtualMachineInterface.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/NestedVLAN>} tagged_vlans
 */
VirtualMachineInterface.prototype['tagged_vlans'] = undefined;

/**
 * @member {Array.<String>} tags
 */
VirtualMachineInterface.prototype['tags'] = undefined;

/**
 * @member {module:model/Type7} type
 */
VirtualMachineInterface.prototype['type'] = undefined;

/**
 * @member {module:model/NestedVLAN} untagged_vlan
 */
VirtualMachineInterface.prototype['untagged_vlan'] = undefined;

/**
 * @member {module:model/NestedVirtualMachine} virtual_machine
 */
VirtualMachineInterface.prototype['virtual_machine'] = undefined;






export default VirtualMachineInterface;

