/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type4 model module.
 * @module model/Type4
 * @version 2.8
 */
class Type4 {
    /**
     * Constructs a new <code>Type4</code>.
     * @alias module:model/Type4
     * @param label {module:model/Type4.LabelEnum} 
     * @param value {module:model/Type4.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type4.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type4} obj Optional instance to populate.
     * @return {module:model/Type4} The populated <code>Type4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type4();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type4</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type4.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type4.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type4.LabelEnum} label
 */
Type4.prototype['label'] = undefined;

/**
 * @member {module:model/Type4.ValueEnum} value
 */
Type4.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type4['LabelEnum'] = {

    /**
     * value: "C5"
     * @const
     */
    "C5": "C5",

    /**
     * value: "C7"
     * @const
     */
    "C7": "C7",

    /**
     * value: "C13"
     * @const
     */
    "C13": "C13",

    /**
     * value: "C15"
     * @const
     */
    "C15": "C15",

    /**
     * value: "C19"
     * @const
     */
    "C19": "C19",

    /**
     * value: "P+N+E 4H"
     * @const
     */
    "P+N+E 4H": "P+N+E 4H",

    /**
     * value: "P+N+E 6H"
     * @const
     */
    "P+N+E 6H": "P+N+E 6H",

    /**
     * value: "P+N+E 9H"
     * @const
     */
    "P+N+E 9H": "P+N+E 9H",

    /**
     * value: "2P+E 4H"
     * @const
     */
    "2P+E 4H": "2P+E 4H",

    /**
     * value: "2P+E 6H"
     * @const
     */
    "2P+E 6H": "2P+E 6H",

    /**
     * value: "2P+E 9H"
     * @const
     */
    "2P+E 9H": "2P+E 9H",

    /**
     * value: "3P+E 4H"
     * @const
     */
    "3P+E 4H": "3P+E 4H",

    /**
     * value: "3P+E 6H"
     * @const
     */
    "3P+E 6H": "3P+E 6H",

    /**
     * value: "3P+E 9H"
     * @const
     */
    "3P+E 9H": "3P+E 9H",

    /**
     * value: "3P+N+E 4H"
     * @const
     */
    "3P+N+E 4H": "3P+N+E 4H",

    /**
     * value: "3P+N+E 6H"
     * @const
     */
    "3P+N+E 6H": "3P+N+E 6H",

    /**
     * value: "3P+N+E 9H"
     * @const
     */
    "3P+N+E 9H": "3P+N+E 9H",

    /**
     * value: "NEMA 1-15R"
     * @const
     */
    "NEMA 1-15R": "NEMA 1-15R",

    /**
     * value: "NEMA 5-15R"
     * @const
     */
    "NEMA 5-15R": "NEMA 5-15R",

    /**
     * value: "NEMA 5-20R"
     * @const
     */
    "NEMA 5-20R": "NEMA 5-20R",

    /**
     * value: "NEMA 5-30R"
     * @const
     */
    "NEMA 5-30R": "NEMA 5-30R",

    /**
     * value: "NEMA 5-50R"
     * @const
     */
    "NEMA 5-50R": "NEMA 5-50R",

    /**
     * value: "NEMA 6-15R"
     * @const
     */
    "NEMA 6-15R": "NEMA 6-15R",

    /**
     * value: "NEMA 6-20R"
     * @const
     */
    "NEMA 6-20R": "NEMA 6-20R",

    /**
     * value: "NEMA 6-30R"
     * @const
     */
    "NEMA 6-30R": "NEMA 6-30R",

    /**
     * value: "NEMA 6-50R"
     * @const
     */
    "NEMA 6-50R": "NEMA 6-50R",

    /**
     * value: "NEMA 10-30R"
     * @const
     */
    "NEMA 10-30R": "NEMA 10-30R",

    /**
     * value: "NEMA 10-50R"
     * @const
     */
    "NEMA 10-50R": "NEMA 10-50R",

    /**
     * value: "NEMA 14-20R"
     * @const
     */
    "NEMA 14-20R": "NEMA 14-20R",

    /**
     * value: "NEMA 14-30R"
     * @const
     */
    "NEMA 14-30R": "NEMA 14-30R",

    /**
     * value: "NEMA 14-50R"
     * @const
     */
    "NEMA 14-50R": "NEMA 14-50R",

    /**
     * value: "NEMA 14-60R"
     * @const
     */
    "NEMA 14-60R": "NEMA 14-60R",

    /**
     * value: "NEMA L1-15R"
     * @const
     */
    "NEMA L1-15R": "NEMA L1-15R",

    /**
     * value: "NEMA L5-15R"
     * @const
     */
    "NEMA L5-15R": "NEMA L5-15R",

    /**
     * value: "NEMA L5-20R"
     * @const
     */
    "NEMA L5-20R": "NEMA L5-20R",

    /**
     * value: "NEMA L5-30R"
     * @const
     */
    "NEMA L5-30R": "NEMA L5-30R",

    /**
     * value: "NEMA L5-50R"
     * @const
     */
    "NEMA L5-50R": "NEMA L5-50R",

    /**
     * value: "NEMA L6-15R"
     * @const
     */
    "NEMA L6-15R": "NEMA L6-15R",

    /**
     * value: "NEMA L6-20R"
     * @const
     */
    "NEMA L6-20R": "NEMA L6-20R",

    /**
     * value: "NEMA L6-30R"
     * @const
     */
    "NEMA L6-30R": "NEMA L6-30R",

    /**
     * value: "NEMA L6-50R"
     * @const
     */
    "NEMA L6-50R": "NEMA L6-50R",

    /**
     * value: "NEMA L10-30R"
     * @const
     */
    "NEMA L10-30R": "NEMA L10-30R",

    /**
     * value: "NEMA L14-20R"
     * @const
     */
    "NEMA L14-20R": "NEMA L14-20R",

    /**
     * value: "NEMA L14-30R"
     * @const
     */
    "NEMA L14-30R": "NEMA L14-30R",

    /**
     * value: "NEMA L14-50R"
     * @const
     */
    "NEMA L14-50R": "NEMA L14-50R",

    /**
     * value: "NEMA L14-60R"
     * @const
     */
    "NEMA L14-60R": "NEMA L14-60R",

    /**
     * value: "NEMA L21-20R"
     * @const
     */
    "NEMA L21-20R": "NEMA L21-20R",

    /**
     * value: "NEMA L21-30R"
     * @const
     */
    "NEMA L21-30R": "NEMA L21-30R",

    /**
     * value: "CS6360C"
     * @const
     */
    "CS6360C": "CS6360C",

    /**
     * value: "CS6364C"
     * @const
     */
    "CS6364C": "CS6364C",

    /**
     * value: "CS8164C"
     * @const
     */
    "CS8164C": "CS8164C",

    /**
     * value: "CS8264C"
     * @const
     */
    "CS8264C": "CS8264C",

    /**
     * value: "CS8364C"
     * @const
     */
    "CS8364C": "CS8364C",

    /**
     * value: "CS8464C"
     * @const
     */
    "CS8464C": "CS8464C",

    /**
     * value: "ITA Type E (CEE7/5)"
     * @const
     */
    "ITA Type E (CEE7/5)": "ITA Type E (CEE7/5)",

    /**
     * value: "ITA Type F (CEE7/3)"
     * @const
     */
    "ITA Type F (CEE7/3)": "ITA Type F (CEE7/3)",

    /**
     * value: "ITA Type G (BS 1363)"
     * @const
     */
    "ITA Type G (BS 1363)": "ITA Type G (BS 1363)",

    /**
     * value: "ITA Type H"
     * @const
     */
    "ITA Type H": "ITA Type H",

    /**
     * value: "ITA Type I"
     * @const
     */
    "ITA Type I": "ITA Type I",

    /**
     * value: "ITA Type J"
     * @const
     */
    "ITA Type J": "ITA Type J",

    /**
     * value: "ITA Type K"
     * @const
     */
    "ITA Type K": "ITA Type K",

    /**
     * value: "ITA Type L (CEI 23-50)"
     * @const
     */
    "ITA Type L (CEI 23-50)": "ITA Type L (CEI 23-50)",

    /**
     * value: "ITA Type M (BS 546)"
     * @const
     */
    "ITA Type M (BS 546)": "ITA Type M (BS 546)",

    /**
     * value: "ITA Type N"
     * @const
     */
    "ITA Type N": "ITA Type N",

    /**
     * value: "ITA Type O"
     * @const
     */
    "ITA Type O": "ITA Type O",

    /**
     * value: "HDOT Cx"
     * @const
     */
    "HDOT Cx": "HDOT Cx"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type4['ValueEnum'] = {

    /**
     * value: "iec-60320-c5"
     * @const
     */
    "iec-60320-c5": "iec-60320-c5",

    /**
     * value: "iec-60320-c7"
     * @const
     */
    "iec-60320-c7": "iec-60320-c7",

    /**
     * value: "iec-60320-c13"
     * @const
     */
    "iec-60320-c13": "iec-60320-c13",

    /**
     * value: "iec-60320-c15"
     * @const
     */
    "iec-60320-c15": "iec-60320-c15",

    /**
     * value: "iec-60320-c19"
     * @const
     */
    "iec-60320-c19": "iec-60320-c19",

    /**
     * value: "iec-60309-p-n-e-4h"
     * @const
     */
    "iec-60309-p-n-e-4h": "iec-60309-p-n-e-4h",

    /**
     * value: "iec-60309-p-n-e-6h"
     * @const
     */
    "iec-60309-p-n-e-6h": "iec-60309-p-n-e-6h",

    /**
     * value: "iec-60309-p-n-e-9h"
     * @const
     */
    "iec-60309-p-n-e-9h": "iec-60309-p-n-e-9h",

    /**
     * value: "iec-60309-2p-e-4h"
     * @const
     */
    "iec-60309-2p-e-4h": "iec-60309-2p-e-4h",

    /**
     * value: "iec-60309-2p-e-6h"
     * @const
     */
    "iec-60309-2p-e-6h": "iec-60309-2p-e-6h",

    /**
     * value: "iec-60309-2p-e-9h"
     * @const
     */
    "iec-60309-2p-e-9h": "iec-60309-2p-e-9h",

    /**
     * value: "iec-60309-3p-e-4h"
     * @const
     */
    "iec-60309-3p-e-4h": "iec-60309-3p-e-4h",

    /**
     * value: "iec-60309-3p-e-6h"
     * @const
     */
    "iec-60309-3p-e-6h": "iec-60309-3p-e-6h",

    /**
     * value: "iec-60309-3p-e-9h"
     * @const
     */
    "iec-60309-3p-e-9h": "iec-60309-3p-e-9h",

    /**
     * value: "iec-60309-3p-n-e-4h"
     * @const
     */
    "iec-60309-3p-n-e-4h": "iec-60309-3p-n-e-4h",

    /**
     * value: "iec-60309-3p-n-e-6h"
     * @const
     */
    "iec-60309-3p-n-e-6h": "iec-60309-3p-n-e-6h",

    /**
     * value: "iec-60309-3p-n-e-9h"
     * @const
     */
    "iec-60309-3p-n-e-9h": "iec-60309-3p-n-e-9h",

    /**
     * value: "nema-1-15r"
     * @const
     */
    "nema-1-15r": "nema-1-15r",

    /**
     * value: "nema-5-15r"
     * @const
     */
    "nema-5-15r": "nema-5-15r",

    /**
     * value: "nema-5-20r"
     * @const
     */
    "nema-5-20r": "nema-5-20r",

    /**
     * value: "nema-5-30r"
     * @const
     */
    "nema-5-30r": "nema-5-30r",

    /**
     * value: "nema-5-50r"
     * @const
     */
    "nema-5-50r": "nema-5-50r",

    /**
     * value: "nema-6-15r"
     * @const
     */
    "nema-6-15r": "nema-6-15r",

    /**
     * value: "nema-6-20r"
     * @const
     */
    "nema-6-20r": "nema-6-20r",

    /**
     * value: "nema-6-30r"
     * @const
     */
    "nema-6-30r": "nema-6-30r",

    /**
     * value: "nema-6-50r"
     * @const
     */
    "nema-6-50r": "nema-6-50r",

    /**
     * value: "nema-10-30r"
     * @const
     */
    "nema-10-30r": "nema-10-30r",

    /**
     * value: "nema-10-50r"
     * @const
     */
    "nema-10-50r": "nema-10-50r",

    /**
     * value: "nema-14-20r"
     * @const
     */
    "nema-14-20r": "nema-14-20r",

    /**
     * value: "nema-14-30r"
     * @const
     */
    "nema-14-30r": "nema-14-30r",

    /**
     * value: "nema-14-50r"
     * @const
     */
    "nema-14-50r": "nema-14-50r",

    /**
     * value: "nema-14-60r"
     * @const
     */
    "nema-14-60r": "nema-14-60r",

    /**
     * value: "nema-l1-15r"
     * @const
     */
    "nema-l1-15r": "nema-l1-15r",

    /**
     * value: "nema-l5-15r"
     * @const
     */
    "nema-l5-15r": "nema-l5-15r",

    /**
     * value: "nema-l5-20r"
     * @const
     */
    "nema-l5-20r": "nema-l5-20r",

    /**
     * value: "nema-l5-30r"
     * @const
     */
    "nema-l5-30r": "nema-l5-30r",

    /**
     * value: "nema-l5-50r"
     * @const
     */
    "nema-l5-50r": "nema-l5-50r",

    /**
     * value: "nema-l6-15r"
     * @const
     */
    "nema-l6-15r": "nema-l6-15r",

    /**
     * value: "nema-l6-20r"
     * @const
     */
    "nema-l6-20r": "nema-l6-20r",

    /**
     * value: "nema-l6-30r"
     * @const
     */
    "nema-l6-30r": "nema-l6-30r",

    /**
     * value: "nema-l6-50r"
     * @const
     */
    "nema-l6-50r": "nema-l6-50r",

    /**
     * value: "nema-l10-30r"
     * @const
     */
    "nema-l10-30r": "nema-l10-30r",

    /**
     * value: "nema-l14-20r"
     * @const
     */
    "nema-l14-20r": "nema-l14-20r",

    /**
     * value: "nema-l14-30r"
     * @const
     */
    "nema-l14-30r": "nema-l14-30r",

    /**
     * value: "nema-l14-50r"
     * @const
     */
    "nema-l14-50r": "nema-l14-50r",

    /**
     * value: "nema-l14-60r"
     * @const
     */
    "nema-l14-60r": "nema-l14-60r",

    /**
     * value: "nema-l21-20r"
     * @const
     */
    "nema-l21-20r": "nema-l21-20r",

    /**
     * value: "nema-l21-30r"
     * @const
     */
    "nema-l21-30r": "nema-l21-30r",

    /**
     * value: "CS6360C"
     * @const
     */
    "CS6360C": "CS6360C",

    /**
     * value: "CS6364C"
     * @const
     */
    "CS6364C": "CS6364C",

    /**
     * value: "CS8164C"
     * @const
     */
    "CS8164C": "CS8164C",

    /**
     * value: "CS8264C"
     * @const
     */
    "CS8264C": "CS8264C",

    /**
     * value: "CS8364C"
     * @const
     */
    "CS8364C": "CS8364C",

    /**
     * value: "CS8464C"
     * @const
     */
    "CS8464C": "CS8464C",

    /**
     * value: "ita-e"
     * @const
     */
    "ita-e": "ita-e",

    /**
     * value: "ita-f"
     * @const
     */
    "ita-f": "ita-f",

    /**
     * value: "ita-g"
     * @const
     */
    "ita-g": "ita-g",

    /**
     * value: "ita-h"
     * @const
     */
    "ita-h": "ita-h",

    /**
     * value: "ita-i"
     * @const
     */
    "ita-i": "ita-i",

    /**
     * value: "ita-j"
     * @const
     */
    "ita-j": "ita-j",

    /**
     * value: "ita-k"
     * @const
     */
    "ita-k": "ita-k",

    /**
     * value: "ita-l"
     * @const
     */
    "ita-l": "ita-l",

    /**
     * value: "ita-m"
     * @const
     */
    "ita-m": "ita-m",

    /**
     * value: "ita-n"
     * @const
     */
    "ita-n": "ita-n",

    /**
     * value: "ita-o"
     * @const
     */
    "ita-o": "ita-o",

    /**
     * value: "hdot-cx"
     * @const
     */
    "hdot-cx": "hdot-cx"
};



export default Type4;

