/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NestedCable from './NestedCable';

/**
 * The WritableRearPort model module.
 * @module model/WritableRearPort
 * @version 2.8
 */
class WritableRearPort {
    /**
     * Constructs a new <code>WritableRearPort</code>.
     * @alias module:model/WritableRearPort
     * @param device {Number} 
     * @param name {String} 
     * @param type {module:model/WritableRearPort.TypeEnum} 
     */
    constructor(device, name, type) { 
        
        WritableRearPort.initialize(this, device, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name, type) { 
        obj['device'] = device;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>WritableRearPort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableRearPort} obj Optional instance to populate.
     * @return {module:model/WritableRearPort} The populated <code>WritableRearPort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableRearPort();

            if (data.hasOwnProperty('cable')) {
                obj['cable'] = NestedCable.constructFromObject(data['cable']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('positions')) {
                obj['positions'] = ApiClient.convertToType(data['positions'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableRearPort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableRearPort</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableRearPort.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cable`
        if (data['cable']) { // data not null
          NestedCable.validateJSON(data['cable']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WritableRearPort.RequiredProperties = ["device", "name", "type"];

/**
 * @member {module:model/NestedCable} cable
 */
WritableRearPort.prototype['cable'] = undefined;

/**
 * @member {String} description
 */
WritableRearPort.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritableRearPort.prototype['device'] = undefined;

/**
 * @member {Number} id
 */
WritableRearPort.prototype['id'] = undefined;

/**
 * @member {String} name
 */
WritableRearPort.prototype['name'] = undefined;

/**
 * @member {Number} positions
 */
WritableRearPort.prototype['positions'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableRearPort.prototype['tags'] = undefined;

/**
 * @member {module:model/WritableRearPort.TypeEnum} type
 */
WritableRearPort.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritableRearPort['TypeEnum'] = {

    /**
     * value: "8p8c"
     * @const
     */
    "8p8c": "8p8c",

    /**
     * value: "110-punch"
     * @const
     */
    "110-punch": "110-punch",

    /**
     * value: "bnc"
     * @const
     */
    "bnc": "bnc",

    /**
     * value: "mrj21"
     * @const
     */
    "mrj21": "mrj21",

    /**
     * value: "fc"
     * @const
     */
    "fc": "fc",

    /**
     * value: "lc"
     * @const
     */
    "lc": "lc",

    /**
     * value: "lc-apc"
     * @const
     */
    "lc-apc": "lc-apc",

    /**
     * value: "lsh"
     * @const
     */
    "lsh": "lsh",

    /**
     * value: "lsh-apc"
     * @const
     */
    "lsh-apc": "lsh-apc",

    /**
     * value: "mpo"
     * @const
     */
    "mpo": "mpo",

    /**
     * value: "mtrj"
     * @const
     */
    "mtrj": "mtrj",

    /**
     * value: "sc"
     * @const
     */
    "sc": "sc",

    /**
     * value: "sc-apc"
     * @const
     */
    "sc-apc": "sc-apc",

    /**
     * value: "st"
     * @const
     */
    "st": "st"
};



export default WritableRearPort;

