/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phase model module.
 * @module model/Phase
 * @version 2.8
 */
class Phase {
    /**
     * Constructs a new <code>Phase</code>.
     * @alias module:model/Phase
     * @param label {module:model/Phase.LabelEnum} 
     * @param value {module:model/Phase.ValueEnum} 
     */
    constructor(label, value) { 
        
        Phase.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Phase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phase} obj Optional instance to populate.
     * @return {module:model/Phase} The populated <code>Phase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phase();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Phase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Phase.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Phase.LabelEnum} label
 */
Phase.prototype['label'] = undefined;

/**
 * @member {module:model/Phase.ValueEnum} value
 */
Phase.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Phase['LabelEnum'] = {

    /**
     * value: "Single phase"
     * @const
     */
    "Single phase": "Single phase",

    /**
     * value: "Three-phase"
     * @const
     */
    "Three-phase": "Three-phase"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Phase['ValueEnum'] = {

    /**
     * value: "single-phase"
     * @const
     */
    "single-phase": "single-phase",

    /**
     * value: "three-phase"
     * @const
     */
    "three-phase": "three-phase"
};



export default Phase;

