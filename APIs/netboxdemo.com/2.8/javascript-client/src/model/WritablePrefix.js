/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritablePrefix model module.
 * @module model/WritablePrefix
 * @version 2.8
 */
class WritablePrefix {
    /**
     * Constructs a new <code>WritablePrefix</code>.
     * @alias module:model/WritablePrefix
     * @param prefix {String} IPv4 or IPv6 network with mask
     */
    constructor(prefix) { 
        
        WritablePrefix.initialize(this, prefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, prefix) { 
        obj['prefix'] = prefix;
    }

    /**
     * Constructs a <code>WritablePrefix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritablePrefix} obj Optional instance to populate.
     * @return {module:model/WritablePrefix} The populated <code>WritablePrefix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritablePrefix();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_pool')) {
                obj['is_pool'] = ApiClient.convertToType(data['is_pool'], 'Boolean');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'Number');
            }
            if (data.hasOwnProperty('vlan')) {
                obj['vlan'] = ApiClient.convertToType(data['vlan'], 'Number');
            }
            if (data.hasOwnProperty('vrf')) {
                obj['vrf'] = ApiClient.convertToType(data['vrf'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritablePrefix</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritablePrefix</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritablePrefix.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritablePrefix.RequiredProperties = ["prefix"];

/**
 * @member {Date} created
 */
WritablePrefix.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritablePrefix.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
WritablePrefix.prototype['description'] = undefined;

/**
 * @member {String} family
 */
WritablePrefix.prototype['family'] = undefined;

/**
 * @member {Number} id
 */
WritablePrefix.prototype['id'] = undefined;

/**
 * All IP addresses within this prefix are considered usable
 * @member {Boolean} is_pool
 */
WritablePrefix.prototype['is_pool'] = undefined;

/**
 * @member {Date} last_updated
 */
WritablePrefix.prototype['last_updated'] = undefined;

/**
 * IPv4 or IPv6 network with mask
 * @member {String} prefix
 */
WritablePrefix.prototype['prefix'] = undefined;

/**
 * The primary function of this prefix
 * @member {Number} role
 */
WritablePrefix.prototype['role'] = undefined;

/**
 * @member {Number} site
 */
WritablePrefix.prototype['site'] = undefined;

/**
 * Operational status of this prefix
 * @member {module:model/WritablePrefix.StatusEnum} status
 */
WritablePrefix.prototype['status'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritablePrefix.prototype['tags'] = undefined;

/**
 * @member {Number} tenant
 */
WritablePrefix.prototype['tenant'] = undefined;

/**
 * @member {Number} vlan
 */
WritablePrefix.prototype['vlan'] = undefined;

/**
 * @member {Number} vrf
 */
WritablePrefix.prototype['vrf'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WritablePrefix['StatusEnum'] = {

    /**
     * value: "container"
     * @const
     */
    "container": "container",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "reserved"
     * @const
     */
    "reserved": "reserved",

    /**
     * value: "deprecated"
     * @const
     */
    "deprecated": "deprecated"
};



export default WritablePrefix;

