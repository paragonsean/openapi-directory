/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageAttachment model module.
 * @module model/ImageAttachment
 * @version 2.8
 */
class ImageAttachment {
    /**
     * Constructs a new <code>ImageAttachment</code>.
     * @alias module:model/ImageAttachment
     * @param contentType {String} 
     * @param imageHeight {Number} 
     * @param imageWidth {Number} 
     * @param objectId {Number} 
     */
    constructor(contentType, imageHeight, imageWidth, objectId) { 
        
        ImageAttachment.initialize(this, contentType, imageHeight, imageWidth, objectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, imageHeight, imageWidth, objectId) { 
        obj['content_type'] = contentType;
        obj['image_height'] = imageHeight;
        obj['image_width'] = imageWidth;
        obj['object_id'] = objectId;
    }

    /**
     * Constructs a <code>ImageAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageAttachment} obj Optional instance to populate.
     * @return {module:model/ImageAttachment} The populated <code>ImageAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageAttachment();

            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('image_height')) {
                obj['image_height'] = ApiClient.convertToType(data['image_height'], 'Number');
            }
            if (data.hasOwnProperty('image_width')) {
                obj['image_width'] = ApiClient.convertToType(data['image_width'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object_id')) {
                obj['object_id'] = ApiClient.convertToType(data['object_id'], 'Number');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageAttachment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageAttachment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ImageAttachment.RequiredProperties = ["content_type", "image_height", "image_width", "object_id"];

/**
 * @member {String} content_type
 */
ImageAttachment.prototype['content_type'] = undefined;

/**
 * @member {Date} created
 */
ImageAttachment.prototype['created'] = undefined;

/**
 * @member {Number} id
 */
ImageAttachment.prototype['id'] = undefined;

/**
 * @member {String} image
 */
ImageAttachment.prototype['image'] = undefined;

/**
 * @member {Number} image_height
 */
ImageAttachment.prototype['image_height'] = undefined;

/**
 * @member {Number} image_width
 */
ImageAttachment.prototype['image_width'] = undefined;

/**
 * @member {String} name
 */
ImageAttachment.prototype['name'] = undefined;

/**
 * @member {Number} object_id
 */
ImageAttachment.prototype['object_id'] = undefined;

/**
 * @member {Object.<String, String>} parent
 */
ImageAttachment.prototype['parent'] = undefined;






export default ImageAttachment;

