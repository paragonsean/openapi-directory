/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritableInventoryItem model module.
 * @module model/WritableInventoryItem
 * @version 2.8
 */
class WritableInventoryItem {
    /**
     * Constructs a new <code>WritableInventoryItem</code>.
     * @alias module:model/WritableInventoryItem
     * @param device {Number} 
     * @param name {String} 
     */
    constructor(device, name) { 
        
        WritableInventoryItem.initialize(this, device, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, name) { 
        obj['device'] = device;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritableInventoryItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritableInventoryItem} obj Optional instance to populate.
     * @return {module:model/WritableInventoryItem} The populated <code>WritableInventoryItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritableInventoryItem();

            if (data.hasOwnProperty('asset_tag')) {
                obj['asset_tag'] = ApiClient.convertToType(data['asset_tag'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('discovered')) {
                obj['discovered'] = ApiClient.convertToType(data['discovered'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'Number');
            }
            if (data.hasOwnProperty('part_id')) {
                obj['part_id'] = ApiClient.convertToType(data['part_id'], 'String');
            }
            if (data.hasOwnProperty('serial')) {
                obj['serial'] = ApiClient.convertToType(data['serial'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritableInventoryItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritableInventoryItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritableInventoryItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['asset_tag'] && !(typeof data['asset_tag'] === 'string' || data['asset_tag'] instanceof String)) {
            throw new Error("Expected the field `asset_tag` to be a primitive type in the JSON string but got " + data['asset_tag']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['part_id'] && !(typeof data['part_id'] === 'string' || data['part_id'] instanceof String)) {
            throw new Error("Expected the field `part_id` to be a primitive type in the JSON string but got " + data['part_id']);
        }
        // ensure the json data is a string
        if (data['serial'] && !(typeof data['serial'] === 'string' || data['serial'] instanceof String)) {
            throw new Error("Expected the field `serial` to be a primitive type in the JSON string but got " + data['serial']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

WritableInventoryItem.RequiredProperties = ["device", "name"];

/**
 * A unique tag used to identify this item
 * @member {String} asset_tag
 */
WritableInventoryItem.prototype['asset_tag'] = undefined;

/**
 * @member {String} description
 */
WritableInventoryItem.prototype['description'] = undefined;

/**
 * @member {Number} device
 */
WritableInventoryItem.prototype['device'] = undefined;

/**
 * This item was automatically discovered
 * @member {Boolean} discovered
 */
WritableInventoryItem.prototype['discovered'] = undefined;

/**
 * @member {Number} id
 */
WritableInventoryItem.prototype['id'] = undefined;

/**
 * @member {Number} manufacturer
 */
WritableInventoryItem.prototype['manufacturer'] = undefined;

/**
 * @member {String} name
 */
WritableInventoryItem.prototype['name'] = undefined;

/**
 * @member {Number} parent
 */
WritableInventoryItem.prototype['parent'] = undefined;

/**
 * Manufacturer-assigned part identifier
 * @member {String} part_id
 */
WritableInventoryItem.prototype['part_id'] = undefined;

/**
 * @member {String} serial
 */
WritableInventoryItem.prototype['serial'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritableInventoryItem.prototype['tags'] = undefined;






export default WritableInventoryItem;

