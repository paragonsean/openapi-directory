/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritablePowerOutletTemplate model module.
 * @module model/WritablePowerOutletTemplate
 * @version 2.8
 */
class WritablePowerOutletTemplate {
    /**
     * Constructs a new <code>WritablePowerOutletTemplate</code>.
     * @alias module:model/WritablePowerOutletTemplate
     * @param deviceType {Number} 
     * @param name {String} 
     */
    constructor(deviceType, name) { 
        
        WritablePowerOutletTemplate.initialize(this, deviceType, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceType, name) { 
        obj['device_type'] = deviceType;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>WritablePowerOutletTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritablePowerOutletTemplate} obj Optional instance to populate.
     * @return {module:model/WritablePowerOutletTemplate} The populated <code>WritablePowerOutletTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritablePowerOutletTemplate();

            if (data.hasOwnProperty('device_type')) {
                obj['device_type'] = ApiClient.convertToType(data['device_type'], 'Number');
            }
            if (data.hasOwnProperty('feed_leg')) {
                obj['feed_leg'] = ApiClient.convertToType(data['feed_leg'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('power_port')) {
                obj['power_port'] = ApiClient.convertToType(data['power_port'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritablePowerOutletTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritablePowerOutletTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritablePowerOutletTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['feed_leg'] && !(typeof data['feed_leg'] === 'string' || data['feed_leg'] instanceof String)) {
            throw new Error("Expected the field `feed_leg` to be a primitive type in the JSON string but got " + data['feed_leg']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WritablePowerOutletTemplate.RequiredProperties = ["device_type", "name"];

/**
 * @member {Number} device_type
 */
WritablePowerOutletTemplate.prototype['device_type'] = undefined;

/**
 * Phase (for three-phase feeds)
 * @member {module:model/WritablePowerOutletTemplate.FeedLegEnum} feed_leg
 */
WritablePowerOutletTemplate.prototype['feed_leg'] = undefined;

/**
 * @member {Number} id
 */
WritablePowerOutletTemplate.prototype['id'] = undefined;

/**
 * @member {String} name
 */
WritablePowerOutletTemplate.prototype['name'] = undefined;

/**
 * @member {Number} power_port
 */
WritablePowerOutletTemplate.prototype['power_port'] = undefined;

/**
 * @member {module:model/WritablePowerOutletTemplate.TypeEnum} type
 */
WritablePowerOutletTemplate.prototype['type'] = undefined;





/**
 * Allowed values for the <code>feed_leg</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerOutletTemplate['FeedLegEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B",

    /**
     * value: "C"
     * @const
     */
    "C": "C"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerOutletTemplate['TypeEnum'] = {

    /**
     * value: "iec-60320-c5"
     * @const
     */
    "iec-60320-c5": "iec-60320-c5",

    /**
     * value: "iec-60320-c7"
     * @const
     */
    "iec-60320-c7": "iec-60320-c7",

    /**
     * value: "iec-60320-c13"
     * @const
     */
    "iec-60320-c13": "iec-60320-c13",

    /**
     * value: "iec-60320-c15"
     * @const
     */
    "iec-60320-c15": "iec-60320-c15",

    /**
     * value: "iec-60320-c19"
     * @const
     */
    "iec-60320-c19": "iec-60320-c19",

    /**
     * value: "iec-60309-p-n-e-4h"
     * @const
     */
    "iec-60309-p-n-e-4h": "iec-60309-p-n-e-4h",

    /**
     * value: "iec-60309-p-n-e-6h"
     * @const
     */
    "iec-60309-p-n-e-6h": "iec-60309-p-n-e-6h",

    /**
     * value: "iec-60309-p-n-e-9h"
     * @const
     */
    "iec-60309-p-n-e-9h": "iec-60309-p-n-e-9h",

    /**
     * value: "iec-60309-2p-e-4h"
     * @const
     */
    "iec-60309-2p-e-4h": "iec-60309-2p-e-4h",

    /**
     * value: "iec-60309-2p-e-6h"
     * @const
     */
    "iec-60309-2p-e-6h": "iec-60309-2p-e-6h",

    /**
     * value: "iec-60309-2p-e-9h"
     * @const
     */
    "iec-60309-2p-e-9h": "iec-60309-2p-e-9h",

    /**
     * value: "iec-60309-3p-e-4h"
     * @const
     */
    "iec-60309-3p-e-4h": "iec-60309-3p-e-4h",

    /**
     * value: "iec-60309-3p-e-6h"
     * @const
     */
    "iec-60309-3p-e-6h": "iec-60309-3p-e-6h",

    /**
     * value: "iec-60309-3p-e-9h"
     * @const
     */
    "iec-60309-3p-e-9h": "iec-60309-3p-e-9h",

    /**
     * value: "iec-60309-3p-n-e-4h"
     * @const
     */
    "iec-60309-3p-n-e-4h": "iec-60309-3p-n-e-4h",

    /**
     * value: "iec-60309-3p-n-e-6h"
     * @const
     */
    "iec-60309-3p-n-e-6h": "iec-60309-3p-n-e-6h",

    /**
     * value: "iec-60309-3p-n-e-9h"
     * @const
     */
    "iec-60309-3p-n-e-9h": "iec-60309-3p-n-e-9h",

    /**
     * value: "nema-1-15r"
     * @const
     */
    "nema-1-15r": "nema-1-15r",

    /**
     * value: "nema-5-15r"
     * @const
     */
    "nema-5-15r": "nema-5-15r",

    /**
     * value: "nema-5-20r"
     * @const
     */
    "nema-5-20r": "nema-5-20r",

    /**
     * value: "nema-5-30r"
     * @const
     */
    "nema-5-30r": "nema-5-30r",

    /**
     * value: "nema-5-50r"
     * @const
     */
    "nema-5-50r": "nema-5-50r",

    /**
     * value: "nema-6-15r"
     * @const
     */
    "nema-6-15r": "nema-6-15r",

    /**
     * value: "nema-6-20r"
     * @const
     */
    "nema-6-20r": "nema-6-20r",

    /**
     * value: "nema-6-30r"
     * @const
     */
    "nema-6-30r": "nema-6-30r",

    /**
     * value: "nema-6-50r"
     * @const
     */
    "nema-6-50r": "nema-6-50r",

    /**
     * value: "nema-10-30r"
     * @const
     */
    "nema-10-30r": "nema-10-30r",

    /**
     * value: "nema-10-50r"
     * @const
     */
    "nema-10-50r": "nema-10-50r",

    /**
     * value: "nema-14-20r"
     * @const
     */
    "nema-14-20r": "nema-14-20r",

    /**
     * value: "nema-14-30r"
     * @const
     */
    "nema-14-30r": "nema-14-30r",

    /**
     * value: "nema-14-50r"
     * @const
     */
    "nema-14-50r": "nema-14-50r",

    /**
     * value: "nema-14-60r"
     * @const
     */
    "nema-14-60r": "nema-14-60r",

    /**
     * value: "nema-l1-15r"
     * @const
     */
    "nema-l1-15r": "nema-l1-15r",

    /**
     * value: "nema-l5-15r"
     * @const
     */
    "nema-l5-15r": "nema-l5-15r",

    /**
     * value: "nema-l5-20r"
     * @const
     */
    "nema-l5-20r": "nema-l5-20r",

    /**
     * value: "nema-l5-30r"
     * @const
     */
    "nema-l5-30r": "nema-l5-30r",

    /**
     * value: "nema-l5-50r"
     * @const
     */
    "nema-l5-50r": "nema-l5-50r",

    /**
     * value: "nema-l6-15r"
     * @const
     */
    "nema-l6-15r": "nema-l6-15r",

    /**
     * value: "nema-l6-20r"
     * @const
     */
    "nema-l6-20r": "nema-l6-20r",

    /**
     * value: "nema-l6-30r"
     * @const
     */
    "nema-l6-30r": "nema-l6-30r",

    /**
     * value: "nema-l6-50r"
     * @const
     */
    "nema-l6-50r": "nema-l6-50r",

    /**
     * value: "nema-l10-30r"
     * @const
     */
    "nema-l10-30r": "nema-l10-30r",

    /**
     * value: "nema-l14-20r"
     * @const
     */
    "nema-l14-20r": "nema-l14-20r",

    /**
     * value: "nema-l14-30r"
     * @const
     */
    "nema-l14-30r": "nema-l14-30r",

    /**
     * value: "nema-l14-50r"
     * @const
     */
    "nema-l14-50r": "nema-l14-50r",

    /**
     * value: "nema-l14-60r"
     * @const
     */
    "nema-l14-60r": "nema-l14-60r",

    /**
     * value: "nema-l21-20r"
     * @const
     */
    "nema-l21-20r": "nema-l21-20r",

    /**
     * value: "nema-l21-30r"
     * @const
     */
    "nema-l21-30r": "nema-l21-30r",

    /**
     * value: "CS6360C"
     * @const
     */
    "CS6360C": "CS6360C",

    /**
     * value: "CS6364C"
     * @const
     */
    "CS6364C": "CS6364C",

    /**
     * value: "CS8164C"
     * @const
     */
    "CS8164C": "CS8164C",

    /**
     * value: "CS8264C"
     * @const
     */
    "CS8264C": "CS8264C",

    /**
     * value: "CS8364C"
     * @const
     */
    "CS8364C": "CS8364C",

    /**
     * value: "CS8464C"
     * @const
     */
    "CS8464C": "CS8464C",

    /**
     * value: "ita-e"
     * @const
     */
    "ita-e": "ita-e",

    /**
     * value: "ita-f"
     * @const
     */
    "ita-f": "ita-f",

    /**
     * value: "ita-g"
     * @const
     */
    "ita-g": "ita-g",

    /**
     * value: "ita-h"
     * @const
     */
    "ita-h": "ita-h",

    /**
     * value: "ita-i"
     * @const
     */
    "ita-i": "ita-i",

    /**
     * value: "ita-j"
     * @const
     */
    "ita-j": "ita-j",

    /**
     * value: "ita-k"
     * @const
     */
    "ita-k": "ita-k",

    /**
     * value: "ita-l"
     * @const
     */
    "ita-l": "ita-l",

    /**
     * value: "ita-m"
     * @const
     */
    "ita-m": "ita-m",

    /**
     * value: "ita-n"
     * @const
     */
    "ita-n": "ita-n",

    /**
     * value: "ita-o"
     * @const
     */
    "ita-o": "ita-o",

    /**
     * value: "hdot-cx"
     * @const
     */
    "hdot-cx": "hdot-cx"
};



export default WritablePowerOutletTemplate;

