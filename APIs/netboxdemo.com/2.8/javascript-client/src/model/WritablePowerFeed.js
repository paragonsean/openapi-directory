/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WritablePowerFeed model module.
 * @module model/WritablePowerFeed
 * @version 2.8
 */
class WritablePowerFeed {
    /**
     * Constructs a new <code>WritablePowerFeed</code>.
     * @alias module:model/WritablePowerFeed
     * @param name {String} 
     * @param powerPanel {Number} 
     */
    constructor(name, powerPanel) { 
        
        WritablePowerFeed.initialize(this, name, powerPanel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, powerPanel) { 
        obj['name'] = name;
        obj['power_panel'] = powerPanel;
    }

    /**
     * Constructs a <code>WritablePowerFeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WritablePowerFeed} obj Optional instance to populate.
     * @return {module:model/WritablePowerFeed} The populated <code>WritablePowerFeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WritablePowerFeed();

            if (data.hasOwnProperty('amperage')) {
                obj['amperage'] = ApiClient.convertToType(data['amperage'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('max_utilization')) {
                obj['max_utilization'] = ApiClient.convertToType(data['max_utilization'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
            }
            if (data.hasOwnProperty('power_panel')) {
                obj['power_panel'] = ApiClient.convertToType(data['power_panel'], 'Number');
            }
            if (data.hasOwnProperty('rack')) {
                obj['rack'] = ApiClient.convertToType(data['rack'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('supply')) {
                obj['supply'] = ApiClient.convertToType(data['supply'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WritablePowerFeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WritablePowerFeed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WritablePowerFeed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phase'] && !(typeof data['phase'] === 'string' || data['phase'] instanceof String)) {
            throw new Error("Expected the field `phase` to be a primitive type in the JSON string but got " + data['phase']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['supply'] && !(typeof data['supply'] === 'string' || data['supply'] instanceof String)) {
            throw new Error("Expected the field `supply` to be a primitive type in the JSON string but got " + data['supply']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

WritablePowerFeed.RequiredProperties = ["name", "power_panel"];

/**
 * @member {Number} amperage
 */
WritablePowerFeed.prototype['amperage'] = undefined;

/**
 * @member {String} comments
 */
WritablePowerFeed.prototype['comments'] = undefined;

/**
 * @member {Date} created
 */
WritablePowerFeed.prototype['created'] = undefined;

/**
 * @member {Object} custom_fields
 */
WritablePowerFeed.prototype['custom_fields'] = undefined;

/**
 * @member {Number} id
 */
WritablePowerFeed.prototype['id'] = undefined;

/**
 * @member {Date} last_updated
 */
WritablePowerFeed.prototype['last_updated'] = undefined;

/**
 * Maximum permissible draw (percentage)
 * @member {Number} max_utilization
 */
WritablePowerFeed.prototype['max_utilization'] = undefined;

/**
 * @member {String} name
 */
WritablePowerFeed.prototype['name'] = undefined;

/**
 * @member {module:model/WritablePowerFeed.PhaseEnum} phase
 */
WritablePowerFeed.prototype['phase'] = undefined;

/**
 * @member {Number} power_panel
 */
WritablePowerFeed.prototype['power_panel'] = undefined;

/**
 * @member {Number} rack
 */
WritablePowerFeed.prototype['rack'] = undefined;

/**
 * @member {module:model/WritablePowerFeed.StatusEnum} status
 */
WritablePowerFeed.prototype['status'] = undefined;

/**
 * @member {module:model/WritablePowerFeed.SupplyEnum} supply
 */
WritablePowerFeed.prototype['supply'] = undefined;

/**
 * @member {Array.<String>} tags
 */
WritablePowerFeed.prototype['tags'] = undefined;

/**
 * @member {module:model/WritablePowerFeed.TypeEnum} type
 */
WritablePowerFeed.prototype['type'] = undefined;

/**
 * @member {Number} voltage
 */
WritablePowerFeed.prototype['voltage'] = undefined;





/**
 * Allowed values for the <code>phase</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerFeed['PhaseEnum'] = {

    /**
     * value: "single-phase"
     * @const
     */
    "single-phase": "single-phase",

    /**
     * value: "three-phase"
     * @const
     */
    "three-phase": "three-phase"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerFeed['StatusEnum'] = {

    /**
     * value: "offline"
     * @const
     */
    "offline": "offline",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "planned"
     * @const
     */
    "planned": "planned",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};


/**
 * Allowed values for the <code>supply</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerFeed['SupplyEnum'] = {

    /**
     * value: "ac"
     * @const
     */
    "ac": "ac",

    /**
     * value: "dc"
     * @const
     */
    "dc": "dc"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WritablePowerFeed['TypeEnum'] = {

    /**
     * value: "primary"
     * @const
     */
    "primary": "primary",

    /**
     * value: "redundant"
     * @const
     */
    "redundant": "redundant"
};



export default WritablePowerFeed;

