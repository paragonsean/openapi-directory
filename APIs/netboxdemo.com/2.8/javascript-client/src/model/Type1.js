/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Type1 model module.
 * @module model/Type1
 * @version 2.8
 */
class Type1 {
    /**
     * Constructs a new <code>Type1</code>.
     * @alias module:model/Type1
     * @param label {module:model/Type1.LabelEnum} 
     * @param value {module:model/Type1.ValueEnum} 
     */
    constructor(label, value) { 
        
        Type1.initialize(this, label, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, value) { 
        obj['label'] = label;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Type1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type1} obj Optional instance to populate.
     * @return {module:model/Type1} The populated <code>Type1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type1();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Type1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

Type1.RequiredProperties = ["label", "value"];

/**
 * @member {module:model/Type1.LabelEnum} label
 */
Type1.prototype['label'] = undefined;

/**
 * @member {module:model/Type1.ValueEnum} value
 */
Type1.prototype['value'] = undefined;





/**
 * Allowed values for the <code>label</code> property.
 * @enum {String}
 * @readonly
 */
Type1['LabelEnum'] = {

    /**
     * value: "Virtual"
     * @const
     */
    "Virtual": "Virtual",

    /**
     * value: "Link Aggregation Group (LAG)"
     * @const
     */
    "Link Aggregation Group (LAG)": "Link Aggregation Group (LAG)",

    /**
     * value: "100BASE-TX (10/100ME)"
     * @const
     */
    "100BASE-TX (10/100ME)": "100BASE-TX (10/100ME)",

    /**
     * value: "1000BASE-T (1GE)"
     * @const
     */
    "1000BASE-T (1GE)": "1000BASE-T (1GE)",

    /**
     * value: "2.5GBASE-T (2.5GE)"
     * @const
     */
    "2.5GBASE-T (2.5GE)": "2.5GBASE-T (2.5GE)",

    /**
     * value: "5GBASE-T (5GE)"
     * @const
     */
    "5GBASE-T (5GE)": "5GBASE-T (5GE)",

    /**
     * value: "10GBASE-T (10GE)"
     * @const
     */
    "10GBASE-T (10GE)": "10GBASE-T (10GE)",

    /**
     * value: "10GBASE-CX4 (10GE)"
     * @const
     */
    "10GBASE-CX4 (10GE)": "10GBASE-CX4 (10GE)",

    /**
     * value: "GBIC (1GE)"
     * @const
     */
    "GBIC (1GE)": "GBIC (1GE)",

    /**
     * value: "SFP (1GE)"
     * @const
     */
    "SFP (1GE)": "SFP (1GE)",

    /**
     * value: "SFP+ (10GE)"
     * @const
     */
    "SFP+ (10GE)": "SFP+ (10GE)",

    /**
     * value: "XFP (10GE)"
     * @const
     */
    "XFP (10GE)": "XFP (10GE)",

    /**
     * value: "XENPAK (10GE)"
     * @const
     */
    "XENPAK (10GE)": "XENPAK (10GE)",

    /**
     * value: "X2 (10GE)"
     * @const
     */
    "X2 (10GE)": "X2 (10GE)",

    /**
     * value: "SFP28 (25GE)"
     * @const
     */
    "SFP28 (25GE)": "SFP28 (25GE)",

    /**
     * value: "QSFP+ (40GE)"
     * @const
     */
    "QSFP+ (40GE)": "QSFP+ (40GE)",

    /**
     * value: "QSFP28 (50GE)"
     * @const
     */
    "QSFP28 (50GE)": "QSFP28 (50GE)",

    /**
     * value: "CFP (100GE)"
     * @const
     */
    "CFP (100GE)": "CFP (100GE)",

    /**
     * value: "CFP2 (100GE)"
     * @const
     */
    "CFP2 (100GE)": "CFP2 (100GE)",

    /**
     * value: "CFP2 (200GE)"
     * @const
     */
    "CFP2 (200GE)": "CFP2 (200GE)",

    /**
     * value: "CFP4 (100GE)"
     * @const
     */
    "CFP4 (100GE)": "CFP4 (100GE)",

    /**
     * value: "Cisco CPAK (100GE)"
     * @const
     */
    "Cisco CPAK (100GE)": "Cisco CPAK (100GE)",

    /**
     * value: "QSFP28 (100GE)"
     * @const
     */
    "QSFP28 (100GE)": "QSFP28 (100GE)",

    /**
     * value: "QSFP56 (200GE)"
     * @const
     */
    "QSFP56 (200GE)": "QSFP56 (200GE)",

    /**
     * value: "QSFP-DD (400GE)"
     * @const
     */
    "QSFP-DD (400GE)": "QSFP-DD (400GE)",

    /**
     * value: "OSFP (400GE)"
     * @const
     */
    "OSFP (400GE)": "OSFP (400GE)",

    /**
     * value: "IEEE 802.11a"
     * @const
     */
    "IEEE 802.11a": "IEEE 802.11a",

    /**
     * value: "IEEE 802.11b/g"
     * @const
     */
    "IEEE 802.11b/g": "IEEE 802.11b/g",

    /**
     * value: "IEEE 802.11n"
     * @const
     */
    "IEEE 802.11n": "IEEE 802.11n",

    /**
     * value: "IEEE 802.11ac"
     * @const
     */
    "IEEE 802.11ac": "IEEE 802.11ac",

    /**
     * value: "IEEE 802.11ad"
     * @const
     */
    "IEEE 802.11ad": "IEEE 802.11ad",

    /**
     * value: "IEEE 802.11ax"
     * @const
     */
    "IEEE 802.11ax": "IEEE 802.11ax",

    /**
     * value: "GSM"
     * @const
     */
    "GSM": "GSM",

    /**
     * value: "CDMA"
     * @const
     */
    "CDMA": "CDMA",

    /**
     * value: "LTE"
     * @const
     */
    "LTE": "LTE",

    /**
     * value: "OC-3/STM-1"
     * @const
     */
    "OC-3/STM-1": "OC-3/STM-1",

    /**
     * value: "OC-12/STM-4"
     * @const
     */
    "OC-12/STM-4": "OC-12/STM-4",

    /**
     * value: "OC-48/STM-16"
     * @const
     */
    "OC-48/STM-16": "OC-48/STM-16",

    /**
     * value: "OC-192/STM-64"
     * @const
     */
    "OC-192/STM-64": "OC-192/STM-64",

    /**
     * value: "OC-768/STM-256"
     * @const
     */
    "OC-768/STM-256": "OC-768/STM-256",

    /**
     * value: "OC-1920/STM-640"
     * @const
     */
    "OC-1920/STM-640": "OC-1920/STM-640",

    /**
     * value: "OC-3840/STM-1234"
     * @const
     */
    "OC-3840/STM-1234": "OC-3840/STM-1234",

    /**
     * value: "SFP (1GFC)"
     * @const
     */
    "SFP (1GFC)": "SFP (1GFC)",

    /**
     * value: "SFP (2GFC)"
     * @const
     */
    "SFP (2GFC)": "SFP (2GFC)",

    /**
     * value: "SFP (4GFC)"
     * @const
     */
    "SFP (4GFC)": "SFP (4GFC)",

    /**
     * value: "SFP+ (8GFC)"
     * @const
     */
    "SFP+ (8GFC)": "SFP+ (8GFC)",

    /**
     * value: "SFP+ (16GFC)"
     * @const
     */
    "SFP+ (16GFC)": "SFP+ (16GFC)",

    /**
     * value: "SFP28 (32GFC)"
     * @const
     */
    "SFP28 (32GFC)": "SFP28 (32GFC)",

    /**
     * value: "QSFP28 (128GFC)"
     * @const
     */
    "QSFP28 (128GFC)": "QSFP28 (128GFC)",

    /**
     * value: "SDR (2 Gbps)"
     * @const
     */
    "SDR (2 Gbps)": "SDR (2 Gbps)",

    /**
     * value: "DDR (4 Gbps)"
     * @const
     */
    "DDR (4 Gbps)": "DDR (4 Gbps)",

    /**
     * value: "QDR (8 Gbps)"
     * @const
     */
    "QDR (8 Gbps)": "QDR (8 Gbps)",

    /**
     * value: "FDR10 (10 Gbps)"
     * @const
     */
    "FDR10 (10 Gbps)": "FDR10 (10 Gbps)",

    /**
     * value: "FDR (13.5 Gbps)"
     * @const
     */
    "FDR (13.5 Gbps)": "FDR (13.5 Gbps)",

    /**
     * value: "EDR (25 Gbps)"
     * @const
     */
    "EDR (25 Gbps)": "EDR (25 Gbps)",

    /**
     * value: "HDR (50 Gbps)"
     * @const
     */
    "HDR (50 Gbps)": "HDR (50 Gbps)",

    /**
     * value: "NDR (100 Gbps)"
     * @const
     */
    "NDR (100 Gbps)": "NDR (100 Gbps)",

    /**
     * value: "XDR (250 Gbps)"
     * @const
     */
    "XDR (250 Gbps)": "XDR (250 Gbps)",

    /**
     * value: "T1 (1.544 Mbps)"
     * @const
     */
    "T1 (1.544 Mbps)": "T1 (1.544 Mbps)",

    /**
     * value: "E1 (2.048 Mbps)"
     * @const
     */
    "E1 (2.048 Mbps)": "E1 (2.048 Mbps)",

    /**
     * value: "T3 (45 Mbps)"
     * @const
     */
    "T3 (45 Mbps)": "T3 (45 Mbps)",

    /**
     * value: "E3 (34 Mbps)"
     * @const
     */
    "E3 (34 Mbps)": "E3 (34 Mbps)",

    /**
     * value: "Cisco StackWise"
     * @const
     */
    "Cisco StackWise": "Cisco StackWise",

    /**
     * value: "Cisco StackWise Plus"
     * @const
     */
    "Cisco StackWise Plus": "Cisco StackWise Plus",

    /**
     * value: "Cisco FlexStack"
     * @const
     */
    "Cisco FlexStack": "Cisco FlexStack",

    /**
     * value: "Cisco FlexStack Plus"
     * @const
     */
    "Cisco FlexStack Plus": "Cisco FlexStack Plus",

    /**
     * value: "Juniper VCP"
     * @const
     */
    "Juniper VCP": "Juniper VCP",

    /**
     * value: "Extreme SummitStack"
     * @const
     */
    "Extreme SummitStack": "Extreme SummitStack",

    /**
     * value: "Extreme SummitStack-128"
     * @const
     */
    "Extreme SummitStack-128": "Extreme SummitStack-128",

    /**
     * value: "Extreme SummitStack-256"
     * @const
     */
    "Extreme SummitStack-256": "Extreme SummitStack-256",

    /**
     * value: "Extreme SummitStack-512"
     * @const
     */
    "Extreme SummitStack-512": "Extreme SummitStack-512",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>value</code> property.
 * @enum {String}
 * @readonly
 */
Type1['ValueEnum'] = {

    /**
     * value: "virtual"
     * @const
     */
    "virtual": "virtual",

    /**
     * value: "lag"
     * @const
     */
    "lag": "lag",

    /**
     * value: "100base-tx"
     * @const
     */
    "100base-tx": "100base-tx",

    /**
     * value: "1000base-t"
     * @const
     */
    "1000base-t": "1000base-t",

    /**
     * value: "2.5gbase-t"
     * @const
     */
    "2.5gbase-t": "2.5gbase-t",

    /**
     * value: "5gbase-t"
     * @const
     */
    "5gbase-t": "5gbase-t",

    /**
     * value: "10gbase-t"
     * @const
     */
    "10gbase-t": "10gbase-t",

    /**
     * value: "10gbase-cx4"
     * @const
     */
    "10gbase-cx4": "10gbase-cx4",

    /**
     * value: "1000base-x-gbic"
     * @const
     */
    "1000base-x-gbic": "1000base-x-gbic",

    /**
     * value: "1000base-x-sfp"
     * @const
     */
    "1000base-x-sfp": "1000base-x-sfp",

    /**
     * value: "10gbase-x-sfpp"
     * @const
     */
    "10gbase-x-sfpp": "10gbase-x-sfpp",

    /**
     * value: "10gbase-x-xfp"
     * @const
     */
    "10gbase-x-xfp": "10gbase-x-xfp",

    /**
     * value: "10gbase-x-xenpak"
     * @const
     */
    "10gbase-x-xenpak": "10gbase-x-xenpak",

    /**
     * value: "10gbase-x-x2"
     * @const
     */
    "10gbase-x-x2": "10gbase-x-x2",

    /**
     * value: "25gbase-x-sfp28"
     * @const
     */
    "25gbase-x-sfp28": "25gbase-x-sfp28",

    /**
     * value: "40gbase-x-qsfpp"
     * @const
     */
    "40gbase-x-qsfpp": "40gbase-x-qsfpp",

    /**
     * value: "50gbase-x-sfp28"
     * @const
     */
    "50gbase-x-sfp28": "50gbase-x-sfp28",

    /**
     * value: "100gbase-x-cfp"
     * @const
     */
    "100gbase-x-cfp": "100gbase-x-cfp",

    /**
     * value: "100gbase-x-cfp2"
     * @const
     */
    "100gbase-x-cfp2": "100gbase-x-cfp2",

    /**
     * value: "200gbase-x-cfp2"
     * @const
     */
    "200gbase-x-cfp2": "200gbase-x-cfp2",

    /**
     * value: "100gbase-x-cfp4"
     * @const
     */
    "100gbase-x-cfp4": "100gbase-x-cfp4",

    /**
     * value: "100gbase-x-cpak"
     * @const
     */
    "100gbase-x-cpak": "100gbase-x-cpak",

    /**
     * value: "100gbase-x-qsfp28"
     * @const
     */
    "100gbase-x-qsfp28": "100gbase-x-qsfp28",

    /**
     * value: "200gbase-x-qsfp56"
     * @const
     */
    "200gbase-x-qsfp56": "200gbase-x-qsfp56",

    /**
     * value: "400gbase-x-qsfpdd"
     * @const
     */
    "400gbase-x-qsfpdd": "400gbase-x-qsfpdd",

    /**
     * value: "400gbase-x-osfp"
     * @const
     */
    "400gbase-x-osfp": "400gbase-x-osfp",

    /**
     * value: "ieee802.11a"
     * @const
     */
    "ieee802.11a": "ieee802.11a",

    /**
     * value: "ieee802.11g"
     * @const
     */
    "ieee802.11g": "ieee802.11g",

    /**
     * value: "ieee802.11n"
     * @const
     */
    "ieee802.11n": "ieee802.11n",

    /**
     * value: "ieee802.11ac"
     * @const
     */
    "ieee802.11ac": "ieee802.11ac",

    /**
     * value: "ieee802.11ad"
     * @const
     */
    "ieee802.11ad": "ieee802.11ad",

    /**
     * value: "ieee802.11ax"
     * @const
     */
    "ieee802.11ax": "ieee802.11ax",

    /**
     * value: "gsm"
     * @const
     */
    "gsm": "gsm",

    /**
     * value: "cdma"
     * @const
     */
    "cdma": "cdma",

    /**
     * value: "lte"
     * @const
     */
    "lte": "lte",

    /**
     * value: "sonet-oc3"
     * @const
     */
    "sonet-oc3": "sonet-oc3",

    /**
     * value: "sonet-oc12"
     * @const
     */
    "sonet-oc12": "sonet-oc12",

    /**
     * value: "sonet-oc48"
     * @const
     */
    "sonet-oc48": "sonet-oc48",

    /**
     * value: "sonet-oc192"
     * @const
     */
    "sonet-oc192": "sonet-oc192",

    /**
     * value: "sonet-oc768"
     * @const
     */
    "sonet-oc768": "sonet-oc768",

    /**
     * value: "sonet-oc1920"
     * @const
     */
    "sonet-oc1920": "sonet-oc1920",

    /**
     * value: "sonet-oc3840"
     * @const
     */
    "sonet-oc3840": "sonet-oc3840",

    /**
     * value: "1gfc-sfp"
     * @const
     */
    "1gfc-sfp": "1gfc-sfp",

    /**
     * value: "2gfc-sfp"
     * @const
     */
    "2gfc-sfp": "2gfc-sfp",

    /**
     * value: "4gfc-sfp"
     * @const
     */
    "4gfc-sfp": "4gfc-sfp",

    /**
     * value: "8gfc-sfpp"
     * @const
     */
    "8gfc-sfpp": "8gfc-sfpp",

    /**
     * value: "16gfc-sfpp"
     * @const
     */
    "16gfc-sfpp": "16gfc-sfpp",

    /**
     * value: "32gfc-sfp28"
     * @const
     */
    "32gfc-sfp28": "32gfc-sfp28",

    /**
     * value: "128gfc-sfp28"
     * @const
     */
    "128gfc-sfp28": "128gfc-sfp28",

    /**
     * value: "infiniband-sdr"
     * @const
     */
    "infiniband-sdr": "infiniband-sdr",

    /**
     * value: "infiniband-ddr"
     * @const
     */
    "infiniband-ddr": "infiniband-ddr",

    /**
     * value: "infiniband-qdr"
     * @const
     */
    "infiniband-qdr": "infiniband-qdr",

    /**
     * value: "infiniband-fdr10"
     * @const
     */
    "infiniband-fdr10": "infiniband-fdr10",

    /**
     * value: "infiniband-fdr"
     * @const
     */
    "infiniband-fdr": "infiniband-fdr",

    /**
     * value: "infiniband-edr"
     * @const
     */
    "infiniband-edr": "infiniband-edr",

    /**
     * value: "infiniband-hdr"
     * @const
     */
    "infiniband-hdr": "infiniband-hdr",

    /**
     * value: "infiniband-ndr"
     * @const
     */
    "infiniband-ndr": "infiniband-ndr",

    /**
     * value: "infiniband-xdr"
     * @const
     */
    "infiniband-xdr": "infiniband-xdr",

    /**
     * value: "t1"
     * @const
     */
    "t1": "t1",

    /**
     * value: "e1"
     * @const
     */
    "e1": "e1",

    /**
     * value: "t3"
     * @const
     */
    "t3": "t3",

    /**
     * value: "e3"
     * @const
     */
    "e3": "e3",

    /**
     * value: "cisco-stackwise"
     * @const
     */
    "cisco-stackwise": "cisco-stackwise",

    /**
     * value: "cisco-stackwise-plus"
     * @const
     */
    "cisco-stackwise-plus": "cisco-stackwise-plus",

    /**
     * value: "cisco-flexstack"
     * @const
     */
    "cisco-flexstack": "cisco-flexstack",

    /**
     * value: "cisco-flexstack-plus"
     * @const
     */
    "cisco-flexstack-plus": "cisco-flexstack-plus",

    /**
     * value: "juniper-vcp"
     * @const
     */
    "juniper-vcp": "juniper-vcp",

    /**
     * value: "extreme-summitstack"
     * @const
     */
    "extreme-summitstack": "extreme-summitstack",

    /**
     * value: "extreme-summitstack-128"
     * @const
     */
    "extreme-summitstack-128": "extreme-summitstack-128",

    /**
     * value: "extreme-summitstack-256"
     * @const
     */
    "extreme-summitstack-256": "extreme-summitstack-256",

    /**
     * value: "extreme-summitstack-512"
     * @const
     */
    "extreme-summitstack-512": "extreme-summitstack-512",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Type1;

