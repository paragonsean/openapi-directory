/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TenancyTenantGroupsList200Response from '../model/TenancyTenantGroupsList200Response';
import TenancyTenantsList200Response from '../model/TenancyTenantsList200Response';
import Tenant from '../model/Tenant';
import TenantGroup from '../model/TenantGroup';
import WritableTenant from '../model/WritableTenant';
import WritableTenantGroup from '../model/WritableTenantGroup';

/**
* Tenancy service.
* @module api/TenancyApi
* @version 2.8
*/
export default class TenancyApi {

    /**
    * Constructs a new TenancyApi. 
    * @alias module:api/TenancyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenancyTenantGroupsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsCreate(writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsList operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [parentIdN] 
     * @param {String} [parentN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantGroupsList200Response}
     */
    tenancyTenantGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'q': opts['q'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'parent_id__n': opts['parentIdN'],
        'parent__n': opts['parentN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantGroupsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsPartialUpdate(id, writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsPartialUpdate");
      }
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:api/TenancyApi~tenancyTenantGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantGroupsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant group.
     * @param {module:model/WritableTenantGroup} writableTenantGroup 
     * @param {module:api/TenancyApi~tenancyTenantGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantGroup}
     */
    tenancyTenantGroupsUpdate(id, writableTenantGroup, callback) {
      let postBody = writableTenantGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantGroupsUpdate");
      }
      // verify the required parameter 'writableTenantGroup' is set
      if (writableTenantGroup === undefined || writableTenantGroup === null) {
        throw new Error("Missing the required parameter 'writableTenantGroup' when calling tenancyTenantGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TenantGroup;
      return this.apiClient.callApi(
        '/tenancy/tenant-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsCreate operation.
     * @callback module:api/TenancyApi~tenancyTenantsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsCreate(writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsDelete operation.
     * @callback module:api/TenancyApi~tenancyTenantsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenancyTenantsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsList operation.
     * @callback module:api/TenancyApi~tenancyTenantsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyTenantsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/TenancyApi~tenancyTenantsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyTenantsList200Response}
     */
    tenancyTenantsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TenancyTenantsList200Response;
      return this.apiClient.callApi(
        '/tenancy/tenants/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsPartialUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsPartialUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsPartialUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsRead operation.
     * @callback module:api/TenancyApi~tenancyTenantsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:api/TenancyApi~tenancyTenantsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenancyTenantsUpdate operation.
     * @callback module:api/TenancyApi~tenancyTenantsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tenant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tenant.
     * @param {module:model/WritableTenant} writableTenant 
     * @param {module:api/TenancyApi~tenancyTenantsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tenant}
     */
    tenancyTenantsUpdate(id, writableTenant, callback) {
      let postBody = writableTenant;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenancyTenantsUpdate");
      }
      // verify the required parameter 'writableTenant' is set
      if (writableTenant === undefined || writableTenant === null) {
        throw new Error("Missing the required parameter 'writableTenant' when calling tenancyTenantsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tenant;
      return this.apiClient.callApi(
        '/tenancy/tenants/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
