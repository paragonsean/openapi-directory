/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Circuit from '../model/Circuit';
import CircuitTermination from '../model/CircuitTermination';
import CircuitType from '../model/CircuitType';
import CircuitsCircuitTerminationsList200Response from '../model/CircuitsCircuitTerminationsList200Response';
import CircuitsCircuitTypesList200Response from '../model/CircuitsCircuitTypesList200Response';
import CircuitsCircuitsList200Response from '../model/CircuitsCircuitsList200Response';
import CircuitsProvidersList200Response from '../model/CircuitsProvidersList200Response';
import Provider from '../model/Provider';
import WritableCircuit from '../model/WritableCircuit';
import WritableCircuitTermination from '../model/WritableCircuitTermination';

/**
* Circuits service.
* @module api/CircuitsApi
* @version 2.8
*/
export default class CircuitsApi {

    /**
    * Constructs a new CircuitsApi. 
    * @alias module:api/CircuitsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsCreate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCircuitTermination} writableCircuitTermination 
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitTermination}
     */
    circuitsCircuitTerminationsCreate(writableCircuitTermination, callback) {
      let postBody = writableCircuitTermination;
      // verify the required parameter 'writableCircuitTermination' is set
      if (writableCircuitTermination === undefined || writableCircuitTermination === null) {
        throw new Error("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitTermination;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsDelete operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit termination.
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    circuitsCircuitTerminationsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTerminationsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsList operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitsCircuitTerminationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [termSide] 
     * @param {String} [portSpeed] 
     * @param {String} [upstreamSpeed] 
     * @param {String} [xconnectId] 
     * @param {String} [q] 
     * @param {String} [circuitId] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [termSideN] 
     * @param {String} [portSpeedN] 
     * @param {String} [portSpeedLte] 
     * @param {String} [portSpeedLt] 
     * @param {String} [portSpeedGte] 
     * @param {String} [portSpeedGt] 
     * @param {String} [upstreamSpeedN] 
     * @param {String} [upstreamSpeedLte] 
     * @param {String} [upstreamSpeedLt] 
     * @param {String} [upstreamSpeedGte] 
     * @param {String} [upstreamSpeedGt] 
     * @param {String} [xconnectIdN] 
     * @param {String} [xconnectIdIc] 
     * @param {String} [xconnectIdNic] 
     * @param {String} [xconnectIdIew] 
     * @param {String} [xconnectIdNiew] 
     * @param {String} [xconnectIdIsw] 
     * @param {String} [xconnectIdNisw] 
     * @param {String} [xconnectIdIe] 
     * @param {String} [xconnectIdNie] 
     * @param {String} [circuitIdN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitsCircuitTerminationsList200Response}
     */
    circuitsCircuitTerminationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term_side': opts['termSide'],
        'port_speed': opts['portSpeed'],
        'upstream_speed': opts['upstreamSpeed'],
        'xconnect_id': opts['xconnectId'],
        'q': opts['q'],
        'circuit_id': opts['circuitId'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'term_side__n': opts['termSideN'],
        'port_speed__n': opts['portSpeedN'],
        'port_speed__lte': opts['portSpeedLte'],
        'port_speed__lt': opts['portSpeedLt'],
        'port_speed__gte': opts['portSpeedGte'],
        'port_speed__gt': opts['portSpeedGt'],
        'upstream_speed__n': opts['upstreamSpeedN'],
        'upstream_speed__lte': opts['upstreamSpeedLte'],
        'upstream_speed__lt': opts['upstreamSpeedLt'],
        'upstream_speed__gte': opts['upstreamSpeedGte'],
        'upstream_speed__gt': opts['upstreamSpeedGt'],
        'xconnect_id__n': opts['xconnectIdN'],
        'xconnect_id__ic': opts['xconnectIdIc'],
        'xconnect_id__nic': opts['xconnectIdNic'],
        'xconnect_id__iew': opts['xconnectIdIew'],
        'xconnect_id__niew': opts['xconnectIdNiew'],
        'xconnect_id__isw': opts['xconnectIdIsw'],
        'xconnect_id__nisw': opts['xconnectIdNisw'],
        'xconnect_id__ie': opts['xconnectIdIe'],
        'xconnect_id__nie': opts['xconnectIdNie'],
        'circuit_id__n': opts['circuitIdN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitsCircuitTerminationsList200Response;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsPartialUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit termination.
     * @param {module:model/WritableCircuitTermination} writableCircuitTermination 
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitTermination}
     */
    circuitsCircuitTerminationsPartialUpdate(id, writableCircuitTermination, callback) {
      let postBody = writableCircuitTermination;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTerminationsPartialUpdate");
      }
      // verify the required parameter 'writableCircuitTermination' is set
      if (writableCircuitTermination === undefined || writableCircuitTermination === null) {
        throw new Error("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitTermination;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsRead operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this circuit termination.
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitTermination}
     */
    circuitsCircuitTerminationsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTerminationsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitTermination;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTerminationsUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTerminationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitTermination} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit termination.
     * @param {module:model/WritableCircuitTermination} writableCircuitTermination 
     * @param {module:api/CircuitsApi~circuitsCircuitTerminationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitTermination}
     */
    circuitsCircuitTerminationsUpdate(id, writableCircuitTermination, callback) {
      let postBody = writableCircuitTermination;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTerminationsUpdate");
      }
      // verify the required parameter 'writableCircuitTermination' is set
      if (writableCircuitTermination === undefined || writableCircuitTermination === null) {
        throw new Error("Missing the required parameter 'writableCircuitTermination' when calling circuitsCircuitTerminationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitTermination;
      return this.apiClient.callApi(
        '/circuits/circuit-terminations/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesCreate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/CircuitType} circuitType 
     * @param {module:api/CircuitsApi~circuitsCircuitTypesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitType}
     */
    circuitsCircuitTypesCreate(circuitType, callback) {
      let postBody = circuitType;
      // verify the required parameter 'circuitType' is set
      if (circuitType === undefined || circuitType === null) {
        throw new Error("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitType;
      return this.apiClient.callApi(
        '/circuits/circuit-types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesDelete operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit type.
     * @param {module:api/CircuitsApi~circuitsCircuitTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    circuitsCircuitTypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/circuits/circuit-types/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesList operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitsCircuitTypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/CircuitsApi~circuitsCircuitTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitsCircuitTypesList200Response}
     */
    circuitsCircuitTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitsCircuitTypesList200Response;
      return this.apiClient.callApi(
        '/circuits/circuit-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesPartialUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit type.
     * @param {module:model/CircuitType} circuitType 
     * @param {module:api/CircuitsApi~circuitsCircuitTypesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitType}
     */
    circuitsCircuitTypesPartialUpdate(id, circuitType, callback) {
      let postBody = circuitType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTypesPartialUpdate");
      }
      // verify the required parameter 'circuitType' is set
      if (circuitType === undefined || circuitType === null) {
        throw new Error("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitType;
      return this.apiClient.callApi(
        '/circuits/circuit-types/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesRead operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this circuit type.
     * @param {module:api/CircuitsApi~circuitsCircuitTypesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitType}
     */
    circuitsCircuitTypesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTypesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitType;
      return this.apiClient.callApi(
        '/circuits/circuit-types/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitTypesUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitTypesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit type.
     * @param {module:model/CircuitType} circuitType 
     * @param {module:api/CircuitsApi~circuitsCircuitTypesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitType}
     */
    circuitsCircuitTypesUpdate(id, circuitType, callback) {
      let postBody = circuitType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitTypesUpdate");
      }
      // verify the required parameter 'circuitType' is set
      if (circuitType === undefined || circuitType === null) {
        throw new Error("Missing the required parameter 'circuitType' when calling circuitsCircuitTypesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CircuitType;
      return this.apiClient.callApi(
        '/circuits/circuit-types/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsCreate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Circuit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCircuit} writableCircuit 
     * @param {module:api/CircuitsApi~circuitsCircuitsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Circuit}
     */
    circuitsCircuitsCreate(writableCircuit, callback) {
      let postBody = writableCircuit;
      // verify the required parameter 'writableCircuit' is set
      if (writableCircuit === undefined || writableCircuit === null) {
        throw new Error("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Circuit;
      return this.apiClient.callApi(
        '/circuits/circuits/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsDelete operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit.
     * @param {module:api/CircuitsApi~circuitsCircuitsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    circuitsCircuitsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/circuits/circuits/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsList operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitsCircuitsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [cid] 
     * @param {String} [installDate] 
     * @param {String} [commitRate] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [providerId] 
     * @param {String} [provider] 
     * @param {String} [typeId] 
     * @param {String} [type] 
     * @param {String} [status] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [cidN] 
     * @param {String} [cidIc] 
     * @param {String} [cidNic] 
     * @param {String} [cidIew] 
     * @param {String} [cidNiew] 
     * @param {String} [cidIsw] 
     * @param {String} [cidNisw] 
     * @param {String} [cidIe] 
     * @param {String} [cidNie] 
     * @param {String} [installDateN] 
     * @param {String} [installDateLte] 
     * @param {String} [installDateLt] 
     * @param {String} [installDateGte] 
     * @param {String} [installDateGt] 
     * @param {String} [commitRateN] 
     * @param {String} [commitRateLte] 
     * @param {String} [commitRateLt] 
     * @param {String} [commitRateGte] 
     * @param {String} [commitRateGt] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [providerIdN] 
     * @param {String} [providerN] 
     * @param {String} [typeIdN] 
     * @param {String} [typeN] 
     * @param {String} [statusN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/CircuitsApi~circuitsCircuitsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitsCircuitsList200Response}
     */
    circuitsCircuitsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'cid': opts['cid'],
        'install_date': opts['installDate'],
        'commit_rate': opts['commitRate'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'provider_id': opts['providerId'],
        'provider': opts['provider'],
        'type_id': opts['typeId'],
        'type': opts['type'],
        'status': opts['status'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'cid__n': opts['cidN'],
        'cid__ic': opts['cidIc'],
        'cid__nic': opts['cidNic'],
        'cid__iew': opts['cidIew'],
        'cid__niew': opts['cidNiew'],
        'cid__isw': opts['cidIsw'],
        'cid__nisw': opts['cidNisw'],
        'cid__ie': opts['cidIe'],
        'cid__nie': opts['cidNie'],
        'install_date__n': opts['installDateN'],
        'install_date__lte': opts['installDateLte'],
        'install_date__lt': opts['installDateLt'],
        'install_date__gte': opts['installDateGte'],
        'install_date__gt': opts['installDateGt'],
        'commit_rate__n': opts['commitRateN'],
        'commit_rate__lte': opts['commitRateLte'],
        'commit_rate__lt': opts['commitRateLt'],
        'commit_rate__gte': opts['commitRateGte'],
        'commit_rate__gt': opts['commitRateGt'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'provider_id__n': opts['providerIdN'],
        'provider__n': opts['providerN'],
        'type_id__n': opts['typeIdN'],
        'type__n': opts['typeN'],
        'status__n': opts['statusN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitsCircuitsList200Response;
      return this.apiClient.callApi(
        '/circuits/circuits/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsPartialUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Circuit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit.
     * @param {module:model/WritableCircuit} writableCircuit 
     * @param {module:api/CircuitsApi~circuitsCircuitsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Circuit}
     */
    circuitsCircuitsPartialUpdate(id, writableCircuit, callback) {
      let postBody = writableCircuit;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitsPartialUpdate");
      }
      // verify the required parameter 'writableCircuit' is set
      if (writableCircuit === undefined || writableCircuit === null) {
        throw new Error("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Circuit;
      return this.apiClient.callApi(
        '/circuits/circuits/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsRead operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Circuit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this circuit.
     * @param {module:api/CircuitsApi~circuitsCircuitsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Circuit}
     */
    circuitsCircuitsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Circuit;
      return this.apiClient.callApi(
        '/circuits/circuits/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsCircuitsUpdate operation.
     * @callback module:api/CircuitsApi~circuitsCircuitsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Circuit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this circuit.
     * @param {module:model/WritableCircuit} writableCircuit 
     * @param {module:api/CircuitsApi~circuitsCircuitsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Circuit}
     */
    circuitsCircuitsUpdate(id, writableCircuit, callback) {
      let postBody = writableCircuit;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsCircuitsUpdate");
      }
      // verify the required parameter 'writableCircuit' is set
      if (writableCircuit === undefined || writableCircuit === null) {
        throw new Error("Missing the required parameter 'writableCircuit' when calling circuitsCircuitsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Circuit;
      return this.apiClient.callApi(
        '/circuits/circuits/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersCreate operation.
     * @callback module:api/CircuitsApi~circuitsProvidersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Provider} provider 
     * @param {module:api/CircuitsApi~circuitsProvidersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    circuitsProvidersCreate(provider, callback) {
      let postBody = provider;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling circuitsProvidersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/circuits/providers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersDelete operation.
     * @callback module:api/CircuitsApi~circuitsProvidersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this provider.
     * @param {module:api/CircuitsApi~circuitsProvidersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    circuitsProvidersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsProvidersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/circuits/providers/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersGraphs operation.
     * @callback module:api/CircuitsApi~circuitsProvidersGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular provider.
     * @param {Number} id A unique integer value identifying this provider.
     * @param {module:api/CircuitsApi~circuitsProvidersGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    circuitsProvidersGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsProvidersGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/circuits/providers/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersList operation.
     * @callback module:api/CircuitsApi~circuitsProvidersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CircuitsProvidersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [asn] 
     * @param {String} [account] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [asnN] 
     * @param {String} [asnLte] 
     * @param {String} [asnLt] 
     * @param {String} [asnGte] 
     * @param {String} [asnGt] 
     * @param {String} [accountN] 
     * @param {String} [accountIc] 
     * @param {String} [accountNic] 
     * @param {String} [accountIew] 
     * @param {String} [accountNiew] 
     * @param {String} [accountIsw] 
     * @param {String} [accountNisw] 
     * @param {String} [accountIe] 
     * @param {String} [accountNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/CircuitsApi~circuitsProvidersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CircuitsProvidersList200Response}
     */
    circuitsProvidersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'asn': opts['asn'],
        'account': opts['account'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'asn__n': opts['asnN'],
        'asn__lte': opts['asnLte'],
        'asn__lt': opts['asnLt'],
        'asn__gte': opts['asnGte'],
        'asn__gt': opts['asnGt'],
        'account__n': opts['accountN'],
        'account__ic': opts['accountIc'],
        'account__nic': opts['accountNic'],
        'account__iew': opts['accountIew'],
        'account__niew': opts['accountNiew'],
        'account__isw': opts['accountIsw'],
        'account__nisw': opts['accountNisw'],
        'account__ie': opts['accountIe'],
        'account__nie': opts['accountNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CircuitsProvidersList200Response;
      return this.apiClient.callApi(
        '/circuits/providers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersPartialUpdate operation.
     * @callback module:api/CircuitsApi~circuitsProvidersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this provider.
     * @param {module:model/Provider} provider 
     * @param {module:api/CircuitsApi~circuitsProvidersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    circuitsProvidersPartialUpdate(id, provider, callback) {
      let postBody = provider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsProvidersPartialUpdate");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling circuitsProvidersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/circuits/providers/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersRead operation.
     * @callback module:api/CircuitsApi~circuitsProvidersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this provider.
     * @param {module:api/CircuitsApi~circuitsProvidersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    circuitsProvidersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsProvidersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/circuits/providers/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the circuitsProvidersUpdate operation.
     * @callback module:api/CircuitsApi~circuitsProvidersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Provider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this provider.
     * @param {module:model/Provider} provider 
     * @param {module:api/CircuitsApi~circuitsProvidersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Provider}
     */
    circuitsProvidersUpdate(id, provider, callback) {
      let postBody = provider;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling circuitsProvidersUpdate");
      }
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling circuitsProvidersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Provider;
      return this.apiClient.callApi(
        '/circuits/providers/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
