/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aggregate from '../model/Aggregate';
import AvailableIP from '../model/AvailableIP';
import AvailablePrefix from '../model/AvailablePrefix';
import IPAddress from '../model/IPAddress';
import IpamAggregatesList200Response from '../model/IpamAggregatesList200Response';
import IpamIpAddressesList200Response from '../model/IpamIpAddressesList200Response';
import IpamPrefixesList200Response from '../model/IpamPrefixesList200Response';
import IpamRirsList200Response from '../model/IpamRirsList200Response';
import IpamRolesList200Response from '../model/IpamRolesList200Response';
import IpamServicesList200Response from '../model/IpamServicesList200Response';
import IpamVlanGroupsList200Response from '../model/IpamVlanGroupsList200Response';
import IpamVlansList200Response from '../model/IpamVlansList200Response';
import IpamVrfsList200Response from '../model/IpamVrfsList200Response';
import Prefix from '../model/Prefix';
import RIR from '../model/RIR';
import Role from '../model/Role';
import Service from '../model/Service';
import VLAN from '../model/VLAN';
import VLANGroup from '../model/VLANGroup';
import VRF from '../model/VRF';
import WritableAggregate from '../model/WritableAggregate';
import WritableAvailableIP from '../model/WritableAvailableIP';
import WritableIPAddress from '../model/WritableIPAddress';
import WritablePrefix from '../model/WritablePrefix';
import WritableService from '../model/WritableService';
import WritableVLAN from '../model/WritableVLAN';
import WritableVLANGroup from '../model/WritableVLANGroup';
import WritableVRF from '../model/WritableVRF';

/**
* Ipam service.
* @module api/IpamApi
* @version 2.8
*/
export default class IpamApi {

    /**
    * Constructs a new IpamApi. 
    * @alias module:api/IpamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ipamAggregatesCreate operation.
     * @callback module:api/IpamApi~ipamAggregatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesCreate(writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesDelete operation.
     * @callback module:api/IpamApi~ipamAggregatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:api/IpamApi~ipamAggregatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamAggregatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesList operation.
     * @callback module:api/IpamApi~ipamAggregatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamAggregatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [dateAdded] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {Number} [family] 
     * @param {String} [prefix] 
     * @param {String} [rirId] 
     * @param {String} [rir] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [dateAddedN] 
     * @param {String} [dateAddedLte] 
     * @param {String} [dateAddedLt] 
     * @param {String} [dateAddedGte] 
     * @param {String} [dateAddedGt] 
     * @param {String} [rirIdN] 
     * @param {String} [rirN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamAggregatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamAggregatesList200Response}
     */
    ipamAggregatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'date_added': opts['dateAdded'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'family': opts['family'],
        'prefix': opts['prefix'],
        'rir_id': opts['rirId'],
        'rir': opts['rir'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'date_added__n': opts['dateAddedN'],
        'date_added__lte': opts['dateAddedLte'],
        'date_added__lt': opts['dateAddedLt'],
        'date_added__gte': opts['dateAddedGte'],
        'date_added__gt': opts['dateAddedGt'],
        'rir_id__n': opts['rirIdN'],
        'rir__n': opts['rirN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamAggregatesList200Response;
      return this.apiClient.callApi(
        '/ipam/aggregates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesPartialUpdate(id, writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesPartialUpdate");
      }
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesRead operation.
     * @callback module:api/IpamApi~ipamAggregatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:api/IpamApi~ipamAggregatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamAggregatesUpdate operation.
     * @callback module:api/IpamApi~ipamAggregatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Aggregate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this aggregate.
     * @param {module:model/WritableAggregate} writableAggregate 
     * @param {module:api/IpamApi~ipamAggregatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Aggregate}
     */
    ipamAggregatesUpdate(id, writableAggregate, callback) {
      let postBody = writableAggregate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamAggregatesUpdate");
      }
      // verify the required parameter 'writableAggregate' is set
      if (writableAggregate === undefined || writableAggregate === null) {
        throw new Error("Missing the required parameter 'writableAggregate' when calling ipamAggregatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Aggregate;
      return this.apiClient.callApi(
        '/ipam/aggregates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesCreate operation.
     * @callback module:api/IpamApi~ipamIpAddressesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesCreate(writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesDelete operation.
     * @callback module:api/IpamApi~ipamIpAddressesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamIpAddressesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamIpAddressesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesList operation.
     * @callback module:api/IpamApi~ipamIpAddressesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamIpAddressesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [dnsName] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {Number} [family] 
     * @param {String} [parent] 
     * @param {String} [address] 
     * @param {Number} [maskLength] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [device] 
     * @param {String} [deviceId] 
     * @param {String} [virtualMachineId] 
     * @param {String} [virtualMachine] 
     * @param {String} [_interface] 
     * @param {String} [interfaceId] 
     * @param {String} [assignedToInterface] 
     * @param {String} [status] 
     * @param {String} [role] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [dnsNameN] 
     * @param {String} [dnsNameIc] 
     * @param {String} [dnsNameNic] 
     * @param {String} [dnsNameIew] 
     * @param {String} [dnsNameNiew] 
     * @param {String} [dnsNameIsw] 
     * @param {String} [dnsNameNisw] 
     * @param {String} [dnsNameIe] 
     * @param {String} [dnsNameNie] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [virtualMachineIdN] 
     * @param {String} [virtualMachineN] 
     * @param {String} [interfaceN] 
     * @param {String} [interfaceIdN] 
     * @param {String} [statusN] 
     * @param {String} [roleN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamIpAddressesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamIpAddressesList200Response}
     */
    ipamIpAddressesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'dns_name': opts['dnsName'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'family': opts['family'],
        'parent': opts['parent'],
        'address': opts['address'],
        'mask_length': opts['maskLength'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'device': opts['device'],
        'device_id': opts['deviceId'],
        'virtual_machine_id': opts['virtualMachineId'],
        'virtual_machine': opts['virtualMachine'],
        'interface': opts['_interface'],
        'interface_id': opts['interfaceId'],
        'assigned_to_interface': opts['assignedToInterface'],
        'status': opts['status'],
        'role': opts['role'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'dns_name__n': opts['dnsNameN'],
        'dns_name__ic': opts['dnsNameIc'],
        'dns_name__nic': opts['dnsNameNic'],
        'dns_name__iew': opts['dnsNameIew'],
        'dns_name__niew': opts['dnsNameNiew'],
        'dns_name__isw': opts['dnsNameIsw'],
        'dns_name__nisw': opts['dnsNameNisw'],
        'dns_name__ie': opts['dnsNameIe'],
        'dns_name__nie': opts['dnsNameNie'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'virtual_machine_id__n': opts['virtualMachineIdN'],
        'virtual_machine__n': opts['virtualMachineN'],
        'interface__n': opts['interfaceN'],
        'interface_id__n': opts['interfaceIdN'],
        'status__n': opts['statusN'],
        'role__n': opts['roleN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamIpAddressesList200Response;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesPartialUpdate(id, writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesPartialUpdate");
      }
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesRead operation.
     * @callback module:api/IpamApi~ipamIpAddressesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:api/IpamApi~ipamIpAddressesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamIpAddressesUpdate operation.
     * @callback module:api/IpamApi~ipamIpAddressesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IPAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this IP address.
     * @param {module:model/WritableIPAddress} writableIPAddress 
     * @param {module:api/IpamApi~ipamIpAddressesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IPAddress}
     */
    ipamIpAddressesUpdate(id, writableIPAddress, callback) {
      let postBody = writableIPAddress;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamIpAddressesUpdate");
      }
      // verify the required parameter 'writableIPAddress' is set
      if (writableIPAddress === undefined || writableIPAddress === null) {
        throw new Error("Missing the required parameter 'writableIPAddress' when calling ipamIpAddressesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IPAddress;
      return this.apiClient.callApi(
        '/ipam/ip-addresses/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailableIpsCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailableIpsCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritableAvailableIP} writableAvailableIP 
     * @param {module:api/IpamApi~ipamPrefixesAvailableIpsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableIP>}
     */
    ipamPrefixesAvailableIpsCreate(id, writableAvailableIP, callback) {
      let postBody = writableAvailableIP;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsCreate");
      }
      // verify the required parameter 'writableAvailableIP' is set
      if (writableAvailableIP === undefined || writableAvailableIP === null) {
        throw new Error("Missing the required parameter 'writableAvailableIP' when calling ipamPrefixesAvailableIpsCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AvailableIP];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-ips/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailableIpsRead operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailableIpsReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableIP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.  The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesAvailableIpsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableIP>}
     */
    ipamPrefixesAvailableIpsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailableIpsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailableIP];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-ips/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailablePrefixesCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailablePrefixesCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailablePrefix>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for returning available child prefixes within a parent.
     * The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesAvailablePrefixesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailablePrefix>}
     */
    ipamPrefixesAvailablePrefixesCreate(id, writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesCreate");
      }
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesAvailablePrefixesCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AvailablePrefix];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-prefixes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesAvailablePrefixesRead operation.
     * @callback module:api/IpamApi~ipamPrefixesAvailablePrefixesReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailablePrefix>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for returning available child prefixes within a parent.
     * The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being invoked in parallel, which results in a race condition where multiple insertions can occur.
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesAvailablePrefixesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailablePrefix>}
     */
    ipamPrefixesAvailablePrefixesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesAvailablePrefixesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AvailablePrefix];
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/available-prefixes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesCreate operation.
     * @callback module:api/IpamApi~ipamPrefixesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesCreate(writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesDelete operation.
     * @callback module:api/IpamApi~ipamPrefixesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamPrefixesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesList operation.
     * @callback module:api/IpamApi~ipamPrefixesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamPrefixesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [isPool] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {Number} [family] 
     * @param {String} [prefix] 
     * @param {String} [within] 
     * @param {String} [withinInclude] 
     * @param {String} [contains] 
     * @param {Number} [maskLength] 
     * @param {String} [vrfId] 
     * @param {String} [vrf] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [vlanId] 
     * @param {Number} [vlanVid] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [status] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [vrfIdN] 
     * @param {String} [vrfN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [vlanIdN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [statusN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamPrefixesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamPrefixesList200Response}
     */
    ipamPrefixesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'is_pool': opts['isPool'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'family': opts['family'],
        'prefix': opts['prefix'],
        'within': opts['within'],
        'within_include': opts['withinInclude'],
        'contains': opts['contains'],
        'mask_length': opts['maskLength'],
        'vrf_id': opts['vrfId'],
        'vrf': opts['vrf'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'vlan_id': opts['vlanId'],
        'vlan_vid': opts['vlanVid'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'status': opts['status'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'vrf_id__n': opts['vrfIdN'],
        'vrf__n': opts['vrfN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'vlan_id__n': opts['vlanIdN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'status__n': opts['statusN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamPrefixesList200Response;
      return this.apiClient.callApi(
        '/ipam/prefixes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesPartialUpdate(id, writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesPartialUpdate");
      }
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesRead operation.
     * @callback module:api/IpamApi~ipamPrefixesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:api/IpamApi~ipamPrefixesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamPrefixesUpdate operation.
     * @callback module:api/IpamApi~ipamPrefixesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Prefix} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this prefix.
     * @param {module:model/WritablePrefix} writablePrefix 
     * @param {module:api/IpamApi~ipamPrefixesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Prefix}
     */
    ipamPrefixesUpdate(id, writablePrefix, callback) {
      let postBody = writablePrefix;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamPrefixesUpdate");
      }
      // verify the required parameter 'writablePrefix' is set
      if (writablePrefix === undefined || writablePrefix === null) {
        throw new Error("Missing the required parameter 'writablePrefix' when calling ipamPrefixesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Prefix;
      return this.apiClient.callApi(
        '/ipam/prefixes/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsCreate operation.
     * @callback module:api/IpamApi~ipamRirsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsCreate(RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsDelete operation.
     * @callback module:api/IpamApi~ipamRirsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:api/IpamApi~ipamRirsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRirsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsList operation.
     * @callback module:api/IpamApi~ipamRirsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamRirsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [isPrivate] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamRirsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamRirsList200Response}
     */
    ipamRirsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'is_private': opts['isPrivate'],
        'description': opts['description'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamRirsList200Response;
      return this.apiClient.callApi(
        '/ipam/rirs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRirsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsPartialUpdate(id, RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsPartialUpdate");
      }
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsRead operation.
     * @callback module:api/IpamApi~ipamRirsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:api/IpamApi~ipamRirsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRirsUpdate operation.
     * @callback module:api/IpamApi~ipamRirsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RIR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this RIR.
     * @param {module:model/RIR} RIR 
     * @param {module:api/IpamApi~ipamRirsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RIR}
     */
    ipamRirsUpdate(id, RIR, callback) {
      let postBody = RIR;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRirsUpdate");
      }
      // verify the required parameter 'RIR' is set
      if (RIR === undefined || RIR === null) {
        throw new Error("Missing the required parameter 'RIR' when calling ipamRirsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RIR;
      return this.apiClient.callApi(
        '/ipam/rirs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesCreate operation.
     * @callback module:api/IpamApi~ipamRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesCreate(role, callback) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesDelete operation.
     * @callback module:api/IpamApi~ipamRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:api/IpamApi~ipamRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesList operation.
     * @callback module:api/IpamApi~ipamRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamRolesList200Response}
     */
    ipamRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamRolesList200Response;
      return this.apiClient.callApi(
        '/ipam/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesPartialUpdate(id, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesPartialUpdate");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesRead operation.
     * @callback module:api/IpamApi~ipamRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:api/IpamApi~ipamRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamRolesUpdate operation.
     * @callback module:api/IpamApi~ipamRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this role.
     * @param {module:model/Role} role 
     * @param {module:api/IpamApi~ipamRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    ipamRolesUpdate(id, role, callback) {
      let postBody = role;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamRolesUpdate");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling ipamRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/ipam/roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesCreate operation.
     * @callback module:api/IpamApi~ipamServicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesCreate(writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesDelete operation.
     * @callback module:api/IpamApi~ipamServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:api/IpamApi~ipamServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamServicesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesList operation.
     * @callback module:api/IpamApi~ipamServicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamServicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [protocol] 
     * @param {String} [port] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [virtualMachineId] 
     * @param {String} [virtualMachine] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [protocolN] 
     * @param {String} [portN] 
     * @param {String} [portLte] 
     * @param {String} [portLt] 
     * @param {String} [portGte] 
     * @param {String} [portGt] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [virtualMachineIdN] 
     * @param {String} [virtualMachineN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamServicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamServicesList200Response}
     */
    ipamServicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'protocol': opts['protocol'],
        'port': opts['port'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'virtual_machine_id': opts['virtualMachineId'],
        'virtual_machine': opts['virtualMachine'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'protocol__n': opts['protocolN'],
        'port__n': opts['portN'],
        'port__lte': opts['portLte'],
        'port__lt': opts['portLt'],
        'port__gte': opts['portGte'],
        'port__gt': opts['portGt'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'virtual_machine_id__n': opts['virtualMachineIdN'],
        'virtual_machine__n': opts['virtualMachineN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamServicesList200Response;
      return this.apiClient.callApi(
        '/ipam/services/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesPartialUpdate operation.
     * @callback module:api/IpamApi~ipamServicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesPartialUpdate(id, writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesPartialUpdate");
      }
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesRead operation.
     * @callback module:api/IpamApi~ipamServicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:api/IpamApi~ipamServicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamServicesUpdate operation.
     * @callback module:api/IpamApi~ipamServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this service.
     * @param {module:model/WritableService} writableService 
     * @param {module:api/IpamApi~ipamServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Service}
     */
    ipamServicesUpdate(id, writableService, callback) {
      let postBody = writableService;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamServicesUpdate");
      }
      // verify the required parameter 'writableService' is set
      if (writableService === undefined || writableService === null) {
        throw new Error("Missing the required parameter 'writableService' when calling ipamServicesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Service;
      return this.apiClient.callApi(
        '/ipam/services/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsCreate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVLANGroup} writableVLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsCreate(writableVLANGroup, callback) {
      let postBody = writableVLANGroup;
      // verify the required parameter 'writableVLANGroup' is set
      if (writableVLANGroup === undefined || writableVLANGroup === null) {
        throw new Error("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsDelete operation.
     * @callback module:api/IpamApi~ipamVlanGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:api/IpamApi~ipamVlanGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlanGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsList operation.
     * @callback module:api/IpamApi~ipamVlanGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVlanGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVlanGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVlanGroupsList200Response}
     */
    ipamVlanGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVlanGroupsList200Response;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:model/WritableVLANGroup} writableVLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsPartialUpdate(id, writableVLANGroup, callback) {
      let postBody = writableVLANGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsPartialUpdate");
      }
      // verify the required parameter 'writableVLANGroup' is set
      if (writableVLANGroup === undefined || writableVLANGroup === null) {
        throw new Error("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsRead operation.
     * @callback module:api/IpamApi~ipamVlanGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:api/IpamApi~ipamVlanGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlanGroupsUpdate operation.
     * @callback module:api/IpamApi~ipamVlanGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLANGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN group.
     * @param {module:model/WritableVLANGroup} writableVLANGroup 
     * @param {module:api/IpamApi~ipamVlanGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLANGroup}
     */
    ipamVlanGroupsUpdate(id, writableVLANGroup, callback) {
      let postBody = writableVLANGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlanGroupsUpdate");
      }
      // verify the required parameter 'writableVLANGroup' is set
      if (writableVLANGroup === undefined || writableVLANGroup === null) {
        throw new Error("Missing the required parameter 'writableVLANGroup' when calling ipamVlanGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLANGroup;
      return this.apiClient.callApi(
        '/ipam/vlan-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansCreate operation.
     * @callback module:api/IpamApi~ipamVlansCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansCreate(writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansDelete operation.
     * @callback module:api/IpamApi~ipamVlansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:api/IpamApi~ipamVlansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVlansDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansList operation.
     * @callback module:api/IpamApi~ipamVlansListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVlansList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [vid] 
     * @param {String} [name] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [status] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [vidN] 
     * @param {String} [vidLte] 
     * @param {String} [vidLt] 
     * @param {String} [vidGte] 
     * @param {String} [vidGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [statusN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVlansList200Response}
     */
    ipamVlansList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'vid': opts['vid'],
        'name': opts['name'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'status': opts['status'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'vid__n': opts['vidN'],
        'vid__lte': opts['vidLte'],
        'vid__lt': opts['vidLt'],
        'vid__gte': opts['vidGte'],
        'vid__gt': opts['vidGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'status__n': opts['statusN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVlansList200Response;
      return this.apiClient.callApi(
        '/ipam/vlans/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVlansPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansPartialUpdate(id, writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansPartialUpdate");
      }
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansRead operation.
     * @callback module:api/IpamApi~ipamVlansReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:api/IpamApi~ipamVlansReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVlansUpdate operation.
     * @callback module:api/IpamApi~ipamVlansUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLAN} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VLAN.
     * @param {module:model/WritableVLAN} writableVLAN 
     * @param {module:api/IpamApi~ipamVlansUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLAN}
     */
    ipamVlansUpdate(id, writableVLAN, callback) {
      let postBody = writableVLAN;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVlansUpdate");
      }
      // verify the required parameter 'writableVLAN' is set
      if (writableVLAN === undefined || writableVLAN === null) {
        throw new Error("Missing the required parameter 'writableVLAN' when calling ipamVlansUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VLAN;
      return this.apiClient.callApi(
        '/ipam/vlans/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsCreate operation.
     * @callback module:api/IpamApi~ipamVrfsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsCreate(writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsDelete operation.
     * @callback module:api/IpamApi~ipamVrfsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:api/IpamApi~ipamVrfsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ipamVrfsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsList operation.
     * @callback module:api/IpamApi~ipamVrfsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpamVrfsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [rd] 
     * @param {String} [enforceUnique] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [rdN] 
     * @param {String} [rdIc] 
     * @param {String} [rdNic] 
     * @param {String} [rdIew] 
     * @param {String} [rdNiew] 
     * @param {String} [rdIsw] 
     * @param {String} [rdNisw] 
     * @param {String} [rdIe] 
     * @param {String} [rdNie] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/IpamApi~ipamVrfsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpamVrfsList200Response}
     */
    ipamVrfsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'rd': opts['rd'],
        'enforce_unique': opts['enforceUnique'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'rd__n': opts['rdN'],
        'rd__ic': opts['rdIc'],
        'rd__nic': opts['rdNic'],
        'rd__iew': opts['rdIew'],
        'rd__niew': opts['rdNiew'],
        'rd__isw': opts['rdIsw'],
        'rd__nisw': opts['rdNisw'],
        'rd__ie': opts['rdIe'],
        'rd__nie': opts['rdNie'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpamVrfsList200Response;
      return this.apiClient.callApi(
        '/ipam/vrfs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsPartialUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsPartialUpdate(id, writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsPartialUpdate");
      }
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsRead operation.
     * @callback module:api/IpamApi~ipamVrfsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:api/IpamApi~ipamVrfsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipamVrfsUpdate operation.
     * @callback module:api/IpamApi~ipamVrfsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this VRF.
     * @param {module:model/WritableVRF} writableVRF 
     * @param {module:api/IpamApi~ipamVrfsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRF}
     */
    ipamVrfsUpdate(id, writableVRF, callback) {
      let postBody = writableVRF;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipamVrfsUpdate");
      }
      // verify the required parameter 'writableVRF' is set
      if (writableVRF === undefined || writableVRF === null) {
        throw new Error("Missing the required parameter 'writableVRF' when calling ipamVrfsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRF;
      return this.apiClient.callApi(
        '/ipam/vrfs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
