/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cable from '../model/Cable';
import ConsolePort from '../model/ConsolePort';
import ConsolePortTemplate from '../model/ConsolePortTemplate';
import ConsoleServerPort from '../model/ConsoleServerPort';
import ConsoleServerPortTemplate from '../model/ConsoleServerPortTemplate';
import DcimCablesList200Response from '../model/DcimCablesList200Response';
import DcimConsoleConnectionsList200Response from '../model/DcimConsoleConnectionsList200Response';
import DcimConsolePortTemplatesList200Response from '../model/DcimConsolePortTemplatesList200Response';
import DcimConsoleServerPortTemplatesList200Response from '../model/DcimConsoleServerPortTemplatesList200Response';
import DcimConsoleServerPortsList200Response from '../model/DcimConsoleServerPortsList200Response';
import DcimDeviceBayTemplatesList200Response from '../model/DcimDeviceBayTemplatesList200Response';
import DcimDeviceBaysList200Response from '../model/DcimDeviceBaysList200Response';
import DcimDeviceRolesList200Response from '../model/DcimDeviceRolesList200Response';
import DcimDeviceTypesList200Response from '../model/DcimDeviceTypesList200Response';
import DcimDevicesList200Response from '../model/DcimDevicesList200Response';
import DcimFrontPortTemplatesList200Response from '../model/DcimFrontPortTemplatesList200Response';
import DcimFrontPortsList200Response from '../model/DcimFrontPortsList200Response';
import DcimInterfaceConnectionsList200Response from '../model/DcimInterfaceConnectionsList200Response';
import DcimInterfaceTemplatesList200Response from '../model/DcimInterfaceTemplatesList200Response';
import DcimInterfacesList200Response from '../model/DcimInterfacesList200Response';
import DcimInventoryItemsList200Response from '../model/DcimInventoryItemsList200Response';
import DcimManufacturersList200Response from '../model/DcimManufacturersList200Response';
import DcimPlatformsList200Response from '../model/DcimPlatformsList200Response';
import DcimPowerConnectionsList200Response from '../model/DcimPowerConnectionsList200Response';
import DcimPowerFeedsList200Response from '../model/DcimPowerFeedsList200Response';
import DcimPowerOutletTemplatesList200Response from '../model/DcimPowerOutletTemplatesList200Response';
import DcimPowerOutletsList200Response from '../model/DcimPowerOutletsList200Response';
import DcimPowerPanelsList200Response from '../model/DcimPowerPanelsList200Response';
import DcimPowerPortTemplatesList200Response from '../model/DcimPowerPortTemplatesList200Response';
import DcimRackGroupsList200Response from '../model/DcimRackGroupsList200Response';
import DcimRackReservationsList200Response from '../model/DcimRackReservationsList200Response';
import DcimRackRolesList200Response from '../model/DcimRackRolesList200Response';
import DcimRacksList200Response from '../model/DcimRacksList200Response';
import DcimRearPortTemplatesList200Response from '../model/DcimRearPortTemplatesList200Response';
import DcimRearPortsList200Response from '../model/DcimRearPortsList200Response';
import DcimRegionsList200Response from '../model/DcimRegionsList200Response';
import DcimSitesList200Response from '../model/DcimSitesList200Response';
import DcimVirtualChassisList200Response from '../model/DcimVirtualChassisList200Response';
import Device from '../model/Device';
import DeviceBay from '../model/DeviceBay';
import DeviceBayTemplate from '../model/DeviceBayTemplate';
import DeviceInterface from '../model/DeviceInterface';
import DeviceNAPALM from '../model/DeviceNAPALM';
import DeviceRole from '../model/DeviceRole';
import DeviceType from '../model/DeviceType';
import DeviceWithConfigContext from '../model/DeviceWithConfigContext';
import FrontPort from '../model/FrontPort';
import FrontPortTemplate from '../model/FrontPortTemplate';
import InterfaceTemplate from '../model/InterfaceTemplate';
import InventoryItem from '../model/InventoryItem';
import Manufacturer from '../model/Manufacturer';
import Platform from '../model/Platform';
import PowerFeed from '../model/PowerFeed';
import PowerOutlet from '../model/PowerOutlet';
import PowerOutletTemplate from '../model/PowerOutletTemplate';
import PowerPanel from '../model/PowerPanel';
import PowerPort from '../model/PowerPort';
import PowerPortTemplate from '../model/PowerPortTemplate';
import Rack from '../model/Rack';
import RackGroup from '../model/RackGroup';
import RackReservation from '../model/RackReservation';
import RackRole from '../model/RackRole';
import RackUnit from '../model/RackUnit';
import RearPort from '../model/RearPort';
import RearPortTemplate from '../model/RearPortTemplate';
import Region from '../model/Region';
import Site from '../model/Site';
import VirtualChassis from '../model/VirtualChassis';
import WritableCable from '../model/WritableCable';
import WritableConsolePort from '../model/WritableConsolePort';
import WritableConsolePortTemplate from '../model/WritableConsolePortTemplate';
import WritableConsoleServerPort from '../model/WritableConsoleServerPort';
import WritableConsoleServerPortTemplate from '../model/WritableConsoleServerPortTemplate';
import WritableDeviceBay from '../model/WritableDeviceBay';
import WritableDeviceBayTemplate from '../model/WritableDeviceBayTemplate';
import WritableDeviceInterface from '../model/WritableDeviceInterface';
import WritableDeviceType from '../model/WritableDeviceType';
import WritableDeviceWithConfigContext from '../model/WritableDeviceWithConfigContext';
import WritableFrontPort from '../model/WritableFrontPort';
import WritableFrontPortTemplate from '../model/WritableFrontPortTemplate';
import WritableInterfaceTemplate from '../model/WritableInterfaceTemplate';
import WritableInventoryItem from '../model/WritableInventoryItem';
import WritablePlatform from '../model/WritablePlatform';
import WritablePowerFeed from '../model/WritablePowerFeed';
import WritablePowerOutlet from '../model/WritablePowerOutlet';
import WritablePowerOutletTemplate from '../model/WritablePowerOutletTemplate';
import WritablePowerPanel from '../model/WritablePowerPanel';
import WritablePowerPort from '../model/WritablePowerPort';
import WritablePowerPortTemplate from '../model/WritablePowerPortTemplate';
import WritableRack from '../model/WritableRack';
import WritableRackGroup from '../model/WritableRackGroup';
import WritableRackReservation from '../model/WritableRackReservation';
import WritableRearPort from '../model/WritableRearPort';
import WritableRearPortTemplate from '../model/WritableRearPortTemplate';
import WritableRegion from '../model/WritableRegion';
import WritableSite from '../model/WritableSite';
import WritableVirtualChassis from '../model/WritableVirtualChassis';

/**
* Dcim service.
* @module api/DcimApi
* @version 2.8
*/
export default class DcimApi {

    /**
    * Constructs a new DcimApi. 
    * @alias module:api/DcimApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dcimCablesCreate operation.
     * @callback module:api/DcimApi~dcimCablesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableCable} writableCable 
     * @param {module:api/DcimApi~dcimCablesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cable}
     */
    dcimCablesCreate(writableCable, callback) {
      let postBody = writableCable;
      // verify the required parameter 'writableCable' is set
      if (writableCable === undefined || writableCable === null) {
        throw new Error("Missing the required parameter 'writableCable' when calling dcimCablesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cable;
      return this.apiClient.callApi(
        '/dcim/cables/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimCablesDelete operation.
     * @callback module:api/DcimApi~dcimCablesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cable.
     * @param {module:api/DcimApi~dcimCablesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimCablesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimCablesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/cables/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimCablesList operation.
     * @callback module:api/DcimApi~dcimCablesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimCablesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [label] 
     * @param {String} [length] 
     * @param {String} [lengthUnit] 
     * @param {String} [q] 
     * @param {String} [type] 
     * @param {String} [status] 
     * @param {String} [color] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [rackId] 
     * @param {String} [rack] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [labelN] 
     * @param {String} [labelIc] 
     * @param {String} [labelNic] 
     * @param {String} [labelIew] 
     * @param {String} [labelNiew] 
     * @param {String} [labelIsw] 
     * @param {String} [labelNisw] 
     * @param {String} [labelIe] 
     * @param {String} [labelNie] 
     * @param {String} [lengthN] 
     * @param {String} [lengthLte] 
     * @param {String} [lengthLt] 
     * @param {String} [lengthGte] 
     * @param {String} [lengthGt] 
     * @param {String} [lengthUnitN] 
     * @param {String} [typeN] 
     * @param {String} [statusN] 
     * @param {String} [colorN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimCablesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimCablesList200Response}
     */
    dcimCablesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'label': opts['label'],
        'length': opts['length'],
        'length_unit': opts['lengthUnit'],
        'q': opts['q'],
        'type': opts['type'],
        'status': opts['status'],
        'color': opts['color'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'rack_id': opts['rackId'],
        'rack': opts['rack'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'label__n': opts['labelN'],
        'label__ic': opts['labelIc'],
        'label__nic': opts['labelNic'],
        'label__iew': opts['labelIew'],
        'label__niew': opts['labelNiew'],
        'label__isw': opts['labelIsw'],
        'label__nisw': opts['labelNisw'],
        'label__ie': opts['labelIe'],
        'label__nie': opts['labelNie'],
        'length__n': opts['lengthN'],
        'length__lte': opts['lengthLte'],
        'length__lt': opts['lengthLt'],
        'length__gte': opts['lengthGte'],
        'length__gt': opts['lengthGt'],
        'length_unit__n': opts['lengthUnitN'],
        'type__n': opts['typeN'],
        'status__n': opts['statusN'],
        'color__n': opts['colorN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimCablesList200Response;
      return this.apiClient.callApi(
        '/dcim/cables/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimCablesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimCablesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cable.
     * @param {module:model/WritableCable} writableCable 
     * @param {module:api/DcimApi~dcimCablesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cable}
     */
    dcimCablesPartialUpdate(id, writableCable, callback) {
      let postBody = writableCable;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimCablesPartialUpdate");
      }
      // verify the required parameter 'writableCable' is set
      if (writableCable === undefined || writableCable === null) {
        throw new Error("Missing the required parameter 'writableCable' when calling dcimCablesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cable;
      return this.apiClient.callApi(
        '/dcim/cables/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimCablesRead operation.
     * @callback module:api/DcimApi~dcimCablesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this cable.
     * @param {module:api/DcimApi~dcimCablesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cable}
     */
    dcimCablesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimCablesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cable;
      return this.apiClient.callApi(
        '/dcim/cables/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimCablesUpdate operation.
     * @callback module:api/DcimApi~dcimCablesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this cable.
     * @param {module:model/WritableCable} writableCable 
     * @param {module:api/DcimApi~dcimCablesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cable}
     */
    dcimCablesUpdate(id, writableCable, callback) {
      let postBody = writableCable;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimCablesUpdate");
      }
      // verify the required parameter 'writableCable' is set
      if (writableCable === undefined || writableCable === null) {
        throw new Error("Missing the required parameter 'writableCable' when calling dcimCablesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Cable;
      return this.apiClient.callApi(
        '/dcim/cables/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConnectedDeviceList operation.
     * @callback module:api/DcimApi~dcimConnectedDeviceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * `peer_device`: The name of the peer device * `peer_interface`: The name of the peer interface
     * @param {String} peerDevice The name of the peer device
     * @param {String} peerInterface The name of the peer interface
     * @param {module:api/DcimApi~dcimConnectedDeviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    dcimConnectedDeviceList(peerDevice, peerInterface, callback) {
      let postBody = null;
      // verify the required parameter 'peerDevice' is set
      if (peerDevice === undefined || peerDevice === null) {
        throw new Error("Missing the required parameter 'peerDevice' when calling dcimConnectedDeviceList");
      }
      // verify the required parameter 'peerInterface' is set
      if (peerInterface === undefined || peerInterface === null) {
        throw new Error("Missing the required parameter 'peerInterface' when calling dcimConnectedDeviceList");
      }

      let pathParams = {
      };
      let queryParams = {
        'peer_device': peerDevice,
        'peer_interface': peerInterface
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/dcim/connected-device/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleConnectionsList operation.
     * @callback module:api/DcimApi~dcimConsoleConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [connectionStatusN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleConnectionsList200Response}
     */
    dcimConsoleConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'connection_status__n': opts['connectionStatusN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesCreate(writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsolePortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesList operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsolePortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsolePortTemplatesList200Response}
     */
    dcimConsolePortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsolePortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesPartialUpdate(id, writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:api/DcimApi~dcimConsolePortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port template.
     * @param {module:model/WritableConsolePortTemplate} writableConsolePortTemplate 
     * @param {module:api/DcimApi~dcimConsolePortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePortTemplate}
     */
    dcimConsolePortTemplatesUpdate(id, writableConsolePortTemplate, callback) {
      let postBody = writableConsolePortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortTemplatesUpdate");
      }
      // verify the required parameter 'writableConsolePortTemplate' is set
      if (writableConsolePortTemplate === undefined || writableConsolePortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsolePortTemplate' when calling dcimConsolePortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsCreate operation.
     * @callback module:api/DcimApi~dcimConsolePortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsCreate(writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsDelete operation.
     * @callback module:api/DcimApi~dcimConsolePortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:api/DcimApi~dcimConsolePortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsolePortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsList operation.
     * @callback module:api/DcimApi~dcimConsolePortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {String} [connectionStatus] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [type] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [connectionStatusN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {String} [typeN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsolePortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleConnectionsList200Response}
     */
    dcimConsolePortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'description': opts['description'],
        'connection_status': opts['connectionStatus'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'type': opts['type'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'connection_status__n': opts['connectionStatusN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'type__n': opts['typeN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsPartialUpdate(id, writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsPartialUpdate");
      }
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsRead operation.
     * @callback module:api/DcimApi~dcimConsolePortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:api/DcimApi~dcimConsolePortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsTrace operation.
     * @callback module:api/DcimApi~dcimConsolePortsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:api/DcimApi~dcimConsolePortsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsolePortsUpdate operation.
     * @callback module:api/DcimApi~dcimConsolePortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsolePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console port.
     * @param {module:model/WritableConsolePort} writableConsolePort 
     * @param {module:api/DcimApi~dcimConsolePortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsolePort}
     */
    dcimConsolePortsUpdate(id, writableConsolePort, callback) {
      let postBody = writableConsolePort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsolePortsUpdate");
      }
      // verify the required parameter 'writableConsolePort' is set
      if (writableConsolePort === undefined || writableConsolePort === null) {
        throw new Error("Missing the required parameter 'writableConsolePort' when calling dcimConsolePortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsolePort;
      return this.apiClient.callApi(
        '/dcim/console-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesCreate(writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsoleServerPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleServerPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleServerPortTemplatesList200Response}
     */
    dcimConsoleServerPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleServerPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesPartialUpdate(id, writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port template.
     * @param {module:model/WritableConsoleServerPortTemplate} writableConsoleServerPortTemplate 
     * @param {module:api/DcimApi~dcimConsoleServerPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPortTemplate}
     */
    dcimConsoleServerPortTemplatesUpdate(id, writableConsoleServerPortTemplate, callback) {
      let postBody = writableConsoleServerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortTemplatesUpdate");
      }
      // verify the required parameter 'writableConsoleServerPortTemplate' is set
      if (writableConsoleServerPortTemplate === undefined || writableConsoleServerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPortTemplate' when calling dcimConsoleServerPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/console-server-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsCreate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsCreate(writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsDelete operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:api/DcimApi~dcimConsoleServerPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimConsoleServerPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsList operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimConsoleServerPortsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {String} [connectionStatus] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [type] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [connectionStatusN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {String} [typeN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimConsoleServerPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimConsoleServerPortsList200Response}
     */
    dcimConsoleServerPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'description': opts['description'],
        'connection_status': opts['connectionStatus'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'type': opts['type'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'connection_status__n': opts['connectionStatusN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'type__n': opts['typeN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimConsoleServerPortsList200Response;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsPartialUpdate(id, writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsPartialUpdate");
      }
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsRead operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:api/DcimApi~dcimConsoleServerPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsTrace operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:api/DcimApi~dcimConsoleServerPortsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimConsoleServerPortsUpdate operation.
     * @callback module:api/DcimApi~dcimConsoleServerPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsoleServerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this console server port.
     * @param {module:model/WritableConsoleServerPort} writableConsoleServerPort 
     * @param {module:api/DcimApi~dcimConsoleServerPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsoleServerPort}
     */
    dcimConsoleServerPortsUpdate(id, writableConsoleServerPort, callback) {
      let postBody = writableConsoleServerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimConsoleServerPortsUpdate");
      }
      // verify the required parameter 'writableConsoleServerPort' is set
      if (writableConsoleServerPort === undefined || writableConsoleServerPort === null) {
        throw new Error("Missing the required parameter 'writableConsoleServerPort' when calling dcimConsoleServerPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsoleServerPort;
      return this.apiClient.callApi(
        '/dcim/console-server-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesCreate(writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceBayTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesList operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceBayTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceBayTemplatesList200Response}
     */
    dcimDeviceBayTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceBayTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesPartialUpdate(id, writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesRead operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBayTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBayTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBayTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay template.
     * @param {module:model/WritableDeviceBayTemplate} writableDeviceBayTemplate 
     * @param {module:api/DcimApi~dcimDeviceBayTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBayTemplate}
     */
    dcimDeviceBayTemplatesUpdate(id, writableDeviceBayTemplate, callback) {
      let postBody = writableDeviceBayTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBayTemplatesUpdate");
      }
      // verify the required parameter 'writableDeviceBayTemplate' is set
      if (writableDeviceBayTemplate === undefined || writableDeviceBayTemplate === null) {
        throw new Error("Missing the required parameter 'writableDeviceBayTemplate' when calling dcimDeviceBayTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBayTemplate;
      return this.apiClient.callApi(
        '/dcim/device-bay-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysCreate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysCreate(writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysDelete operation.
     * @callback module:api/DcimApi~dcimDeviceBaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:api/DcimApi~dcimDeviceBaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceBaysDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysList operation.
     * @callback module:api/DcimApi~dcimDeviceBaysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceBaysList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceBaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceBaysList200Response}
     */
    dcimDeviceBaysList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceBaysList200Response;
      return this.apiClient.callApi(
        '/dcim/device-bays/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysPartialUpdate(id, writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysPartialUpdate");
      }
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysRead operation.
     * @callback module:api/DcimApi~dcimDeviceBaysReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:api/DcimApi~dcimDeviceBaysReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceBaysUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceBaysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceBay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device bay.
     * @param {module:model/WritableDeviceBay} writableDeviceBay 
     * @param {module:api/DcimApi~dcimDeviceBaysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceBay}
     */
    dcimDeviceBaysUpdate(id, writableDeviceBay, callback) {
      let postBody = writableDeviceBay;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceBaysUpdate");
      }
      // verify the required parameter 'writableDeviceBay' is set
      if (writableDeviceBay === undefined || writableDeviceBay === null) {
        throw new Error("Missing the required parameter 'writableDeviceBay' when calling dcimDeviceBaysUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceBay;
      return this.apiClient.callApi(
        '/dcim/device-bays/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesCreate(deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:api/DcimApi~dcimDeviceRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesList operation.
     * @callback module:api/DcimApi~dcimDeviceRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [color] 
     * @param {String} [vmRole] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [colorN] 
     * @param {String} [colorIc] 
     * @param {String} [colorNic] 
     * @param {String} [colorIew] 
     * @param {String} [colorNiew] 
     * @param {String} [colorIsw] 
     * @param {String} [colorNisw] 
     * @param {String} [colorIe] 
     * @param {String} [colorNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceRolesList200Response}
     */
    dcimDeviceRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'color': opts['color'],
        'vm_role': opts['vmRole'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'color__n': opts['colorN'],
        'color__ic': opts['colorIc'],
        'color__nic': opts['colorNic'],
        'color__iew': opts['colorIew'],
        'color__niew': opts['colorNiew'],
        'color__isw': opts['colorIsw'],
        'color__nisw': opts['colorNisw'],
        'color__ie': opts['colorIe'],
        'color__nie': opts['colorNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceRolesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesPartialUpdate(id, deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesPartialUpdate");
      }
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesRead operation.
     * @callback module:api/DcimApi~dcimDeviceRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:api/DcimApi~dcimDeviceRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceRolesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device role.
     * @param {module:model/DeviceRole} deviceRole 
     * @param {module:api/DcimApi~dcimDeviceRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceRole}
     */
    dcimDeviceRolesUpdate(id, deviceRole, callback) {
      let postBody = deviceRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceRolesUpdate");
      }
      // verify the required parameter 'deviceRole' is set
      if (deviceRole === undefined || deviceRole === null) {
        throw new Error("Missing the required parameter 'deviceRole' when calling dcimDeviceRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceRole;
      return this.apiClient.callApi(
        '/dcim/device-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesCreate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesCreate(writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesDelete operation.
     * @callback module:api/DcimApi~dcimDeviceTypesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:api/DcimApi~dcimDeviceTypesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDeviceTypesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesList operation.
     * @callback module:api/DcimApi~dcimDeviceTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDeviceTypesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [model] 
     * @param {String} [slug] 
     * @param {String} [partNumber] 
     * @param {String} [uHeight] 
     * @param {String} [isFullDepth] 
     * @param {String} [subdeviceRole] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [consolePorts] 
     * @param {String} [consoleServerPorts] 
     * @param {String} [powerPorts] 
     * @param {String} [powerOutlets] 
     * @param {String} [interfaces] 
     * @param {String} [passThroughPorts] 
     * @param {String} [deviceBays] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [modelN] 
     * @param {String} [modelIc] 
     * @param {String} [modelNic] 
     * @param {String} [modelIew] 
     * @param {String} [modelNiew] 
     * @param {String} [modelIsw] 
     * @param {String} [modelNisw] 
     * @param {String} [modelIe] 
     * @param {String} [modelNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [partNumberN] 
     * @param {String} [partNumberIc] 
     * @param {String} [partNumberNic] 
     * @param {String} [partNumberIew] 
     * @param {String} [partNumberNiew] 
     * @param {String} [partNumberIsw] 
     * @param {String} [partNumberNisw] 
     * @param {String} [partNumberIe] 
     * @param {String} [partNumberNie] 
     * @param {String} [uHeightN] 
     * @param {String} [uHeightLte] 
     * @param {String} [uHeightLt] 
     * @param {String} [uHeightGte] 
     * @param {String} [uHeightGt] 
     * @param {String} [subdeviceRoleN] 
     * @param {String} [manufacturerIdN] 
     * @param {String} [manufacturerN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDeviceTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDeviceTypesList200Response}
     */
    dcimDeviceTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'model': opts['model'],
        'slug': opts['slug'],
        'part_number': opts['partNumber'],
        'u_height': opts['uHeight'],
        'is_full_depth': opts['isFullDepth'],
        'subdevice_role': opts['subdeviceRole'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'console_ports': opts['consolePorts'],
        'console_server_ports': opts['consoleServerPorts'],
        'power_ports': opts['powerPorts'],
        'power_outlets': opts['powerOutlets'],
        'interfaces': opts['interfaces'],
        'pass_through_ports': opts['passThroughPorts'],
        'device_bays': opts['deviceBays'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'model__n': opts['modelN'],
        'model__ic': opts['modelIc'],
        'model__nic': opts['modelNic'],
        'model__iew': opts['modelIew'],
        'model__niew': opts['modelNiew'],
        'model__isw': opts['modelIsw'],
        'model__nisw': opts['modelNisw'],
        'model__ie': opts['modelIe'],
        'model__nie': opts['modelNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'part_number__n': opts['partNumberN'],
        'part_number__ic': opts['partNumberIc'],
        'part_number__nic': opts['partNumberNic'],
        'part_number__iew': opts['partNumberIew'],
        'part_number__niew': opts['partNumberNiew'],
        'part_number__isw': opts['partNumberIsw'],
        'part_number__nisw': opts['partNumberNisw'],
        'part_number__ie': opts['partNumberIe'],
        'part_number__nie': opts['partNumberNie'],
        'u_height__n': opts['uHeightN'],
        'u_height__lte': opts['uHeightLte'],
        'u_height__lt': opts['uHeightLt'],
        'u_height__gte': opts['uHeightGte'],
        'u_height__gt': opts['uHeightGt'],
        'subdevice_role__n': opts['subdeviceRoleN'],
        'manufacturer_id__n': opts['manufacturerIdN'],
        'manufacturer__n': opts['manufacturerN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDeviceTypesList200Response;
      return this.apiClient.callApi(
        '/dcim/device-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesPartialUpdate(id, writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesRead operation.
     * @callback module:api/DcimApi~dcimDeviceTypesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:api/DcimApi~dcimDeviceTypesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDeviceTypesUpdate operation.
     * @callback module:api/DcimApi~dcimDeviceTypesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device type.
     * @param {module:model/WritableDeviceType} writableDeviceType 
     * @param {module:api/DcimApi~dcimDeviceTypesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    dcimDeviceTypesUpdate(id, writableDeviceType, callback) {
      let postBody = writableDeviceType;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDeviceTypesUpdate");
      }
      // verify the required parameter 'writableDeviceType' is set
      if (writableDeviceType === undefined || writableDeviceType === null) {
        throw new Error("Missing the required parameter 'writableDeviceType' when calling dcimDeviceTypesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/dcim/device-types/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesCreate operation.
     * @callback module:api/DcimApi~dcimDevicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceWithConfigContext} writableDeviceWithConfigContext 
     * @param {module:api/DcimApi~dcimDevicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesCreate(writableDeviceWithConfigContext, callback) {
      let postBody = writableDeviceWithConfigContext;
      // verify the required parameter 'writableDeviceWithConfigContext' is set
      if (writableDeviceWithConfigContext === undefined || writableDeviceWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesDelete operation.
     * @callback module:api/DcimApi~dcimDevicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimDevicesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesGraphs operation.
     * @callback module:api/DcimApi~dcimDevicesGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular Device.
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesList operation.
     * @callback module:api/DcimApi~dcimDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimDevicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [assetTag] 
     * @param {String} [face] 
     * @param {String} [position] 
     * @param {String} [vcPosition] 
     * @param {String} [vcPriority] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [localContextData] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [deviceTypeId] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [rackGroupId] 
     * @param {String} [rackId] 
     * @param {String} [clusterId] 
     * @param {String} [model] 
     * @param {String} [status] 
     * @param {String} [isFullDepth] 
     * @param {String} [macAddress] 
     * @param {String} [serial] 
     * @param {String} [hasPrimaryIp] 
     * @param {String} [virtualChassisId] 
     * @param {String} [virtualChassisMember] 
     * @param {String} [consolePorts] 
     * @param {String} [consoleServerPorts] 
     * @param {String} [powerPorts] 
     * @param {String} [powerOutlets] 
     * @param {String} [interfaces] 
     * @param {String} [passThroughPorts] 
     * @param {String} [deviceBays] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [assetTagN] 
     * @param {String} [assetTagIc] 
     * @param {String} [assetTagNic] 
     * @param {String} [assetTagIew] 
     * @param {String} [assetTagNiew] 
     * @param {String} [assetTagIsw] 
     * @param {String} [assetTagNisw] 
     * @param {String} [assetTagIe] 
     * @param {String} [assetTagNie] 
     * @param {String} [faceN] 
     * @param {String} [positionN] 
     * @param {String} [positionLte] 
     * @param {String} [positionLt] 
     * @param {String} [positionGte] 
     * @param {String} [positionGt] 
     * @param {String} [vcPositionN] 
     * @param {String} [vcPositionLte] 
     * @param {String} [vcPositionLt] 
     * @param {String} [vcPositionGte] 
     * @param {String} [vcPositionGt] 
     * @param {String} [vcPriorityN] 
     * @param {String} [vcPriorityLte] 
     * @param {String} [vcPriorityLt] 
     * @param {String} [vcPriorityGte] 
     * @param {String} [vcPriorityGt] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [manufacturerIdN] 
     * @param {String} [manufacturerN] 
     * @param {String} [deviceTypeIdN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [platformIdN] 
     * @param {String} [platformN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [rackGroupIdN] 
     * @param {String} [rackIdN] 
     * @param {String} [clusterIdN] 
     * @param {String} [modelN] 
     * @param {String} [statusN] 
     * @param {String} [macAddressN] 
     * @param {String} [macAddressIc] 
     * @param {String} [macAddressNic] 
     * @param {String} [macAddressIew] 
     * @param {String} [macAddressNiew] 
     * @param {String} [macAddressIsw] 
     * @param {String} [macAddressNisw] 
     * @param {String} [macAddressIe] 
     * @param {String} [macAddressNie] 
     * @param {String} [virtualChassisIdN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimDevicesList200Response}
     */
    dcimDevicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'asset_tag': opts['assetTag'],
        'face': opts['face'],
        'position': opts['position'],
        'vc_position': opts['vcPosition'],
        'vc_priority': opts['vcPriority'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'local_context_data': opts['localContextData'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'device_type_id': opts['deviceTypeId'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'rack_group_id': opts['rackGroupId'],
        'rack_id': opts['rackId'],
        'cluster_id': opts['clusterId'],
        'model': opts['model'],
        'status': opts['status'],
        'is_full_depth': opts['isFullDepth'],
        'mac_address': opts['macAddress'],
        'serial': opts['serial'],
        'has_primary_ip': opts['hasPrimaryIp'],
        'virtual_chassis_id': opts['virtualChassisId'],
        'virtual_chassis_member': opts['virtualChassisMember'],
        'console_ports': opts['consolePorts'],
        'console_server_ports': opts['consoleServerPorts'],
        'power_ports': opts['powerPorts'],
        'power_outlets': opts['powerOutlets'],
        'interfaces': opts['interfaces'],
        'pass_through_ports': opts['passThroughPorts'],
        'device_bays': opts['deviceBays'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'asset_tag__n': opts['assetTagN'],
        'asset_tag__ic': opts['assetTagIc'],
        'asset_tag__nic': opts['assetTagNic'],
        'asset_tag__iew': opts['assetTagIew'],
        'asset_tag__niew': opts['assetTagNiew'],
        'asset_tag__isw': opts['assetTagIsw'],
        'asset_tag__nisw': opts['assetTagNisw'],
        'asset_tag__ie': opts['assetTagIe'],
        'asset_tag__nie': opts['assetTagNie'],
        'face__n': opts['faceN'],
        'position__n': opts['positionN'],
        'position__lte': opts['positionLte'],
        'position__lt': opts['positionLt'],
        'position__gte': opts['positionGte'],
        'position__gt': opts['positionGt'],
        'vc_position__n': opts['vcPositionN'],
        'vc_position__lte': opts['vcPositionLte'],
        'vc_position__lt': opts['vcPositionLt'],
        'vc_position__gte': opts['vcPositionGte'],
        'vc_position__gt': opts['vcPositionGt'],
        'vc_priority__n': opts['vcPriorityN'],
        'vc_priority__lte': opts['vcPriorityLte'],
        'vc_priority__lt': opts['vcPriorityLt'],
        'vc_priority__gte': opts['vcPriorityGte'],
        'vc_priority__gt': opts['vcPriorityGt'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'manufacturer_id__n': opts['manufacturerIdN'],
        'manufacturer__n': opts['manufacturerN'],
        'device_type_id__n': opts['deviceTypeIdN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'platform_id__n': opts['platformIdN'],
        'platform__n': opts['platformN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'rack_group_id__n': opts['rackGroupIdN'],
        'rack_id__n': opts['rackIdN'],
        'cluster_id__n': opts['clusterIdN'],
        'model__n': opts['modelN'],
        'status__n': opts['statusN'],
        'mac_address__n': opts['macAddressN'],
        'mac_address__ic': opts['macAddressIc'],
        'mac_address__nic': opts['macAddressNic'],
        'mac_address__iew': opts['macAddressIew'],
        'mac_address__niew': opts['macAddressNiew'],
        'mac_address__isw': opts['macAddressIsw'],
        'mac_address__nisw': opts['macAddressNisw'],
        'mac_address__ie': opts['macAddressIe'],
        'mac_address__nie': opts['macAddressNie'],
        'virtual_chassis_id__n': opts['virtualChassisIdN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimDevicesList200Response;
      return this.apiClient.callApi(
        '/dcim/devices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesNapalm operation.
     * @callback module:api/DcimApi~dcimDevicesNapalmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceNAPALM} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a NAPALM method on a Device
     * @param {Number} id A unique integer value identifying this device.
     * @param {String} method 
     * @param {module:api/DcimApi~dcimDevicesNapalmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceNAPALM}
     */
    dcimDevicesNapalm(id, method, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesNapalm");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling dcimDevicesNapalm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'method': method
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceNAPALM;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/napalm/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimDevicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:model/WritableDeviceWithConfigContext} writableDeviceWithConfigContext 
     * @param {module:api/DcimApi~dcimDevicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesPartialUpdate(id, writableDeviceWithConfigContext, callback) {
      let postBody = writableDeviceWithConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceWithConfigContext' is set
      if (writableDeviceWithConfigContext === undefined || writableDeviceWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesRead operation.
     * @callback module:api/DcimApi~dcimDevicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:api/DcimApi~dcimDevicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimDevicesUpdate operation.
     * @callback module:api/DcimApi~dcimDevicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceWithConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this device.
     * @param {module:model/WritableDeviceWithConfigContext} writableDeviceWithConfigContext 
     * @param {module:api/DcimApi~dcimDevicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceWithConfigContext}
     */
    dcimDevicesUpdate(id, writableDeviceWithConfigContext, callback) {
      let postBody = writableDeviceWithConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimDevicesUpdate");
      }
      // verify the required parameter 'writableDeviceWithConfigContext' is set
      if (writableDeviceWithConfigContext === undefined || writableDeviceWithConfigContext === null) {
        throw new Error("Missing the required parameter 'writableDeviceWithConfigContext' when calling dcimDevicesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceWithConfigContext;
      return this.apiClient.callApi(
        '/dcim/devices/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableFrontPortTemplate} writableFrontPortTemplate 
     * @param {module:api/DcimApi~dcimFrontPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPortTemplate}
     */
    dcimFrontPortTemplatesCreate(writableFrontPortTemplate, callback) {
      let postBody = writableFrontPortTemplate;
      // verify the required parameter 'writableFrontPortTemplate' is set
      if (writableFrontPortTemplate === undefined || writableFrontPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPortTemplate;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port template.
     * @param {module:api/DcimApi~dcimFrontPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimFrontPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimFrontPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimFrontPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimFrontPortTemplatesList200Response}
     */
    dcimFrontPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimFrontPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port template.
     * @param {module:model/WritableFrontPortTemplate} writableFrontPortTemplate 
     * @param {module:api/DcimApi~dcimFrontPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPortTemplate}
     */
    dcimFrontPortTemplatesPartialUpdate(id, writableFrontPortTemplate, callback) {
      let postBody = writableFrontPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableFrontPortTemplate' is set
      if (writableFrontPortTemplate === undefined || writableFrontPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPortTemplate;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this front port template.
     * @param {module:api/DcimApi~dcimFrontPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPortTemplate}
     */
    dcimFrontPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontPortTemplate;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimFrontPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port template.
     * @param {module:model/WritableFrontPortTemplate} writableFrontPortTemplate 
     * @param {module:api/DcimApi~dcimFrontPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPortTemplate}
     */
    dcimFrontPortTemplatesUpdate(id, writableFrontPortTemplate, callback) {
      let postBody = writableFrontPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortTemplatesUpdate");
      }
      // verify the required parameter 'writableFrontPortTemplate' is set
      if (writableFrontPortTemplate === undefined || writableFrontPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableFrontPortTemplate' when calling dcimFrontPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPortTemplate;
      return this.apiClient.callApi(
        '/dcim/front-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsCreate operation.
     * @callback module:api/DcimApi~dcimFrontPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableFrontPort} writableFrontPort 
     * @param {module:api/DcimApi~dcimFrontPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPort}
     */
    dcimFrontPortsCreate(writableFrontPort, callback) {
      let postBody = writableFrontPort;
      // verify the required parameter 'writableFrontPort' is set
      if (writableFrontPort === undefined || writableFrontPort === null) {
        throw new Error("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPort;
      return this.apiClient.callApi(
        '/dcim/front-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsDelete operation.
     * @callback module:api/DcimApi~dcimFrontPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port.
     * @param {module:api/DcimApi~dcimFrontPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimFrontPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/front-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsList operation.
     * @callback module:api/DcimApi~dcimFrontPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimFrontPortsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimFrontPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimFrontPortsList200Response}
     */
    dcimFrontPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimFrontPortsList200Response;
      return this.apiClient.callApi(
        '/dcim/front-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimFrontPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port.
     * @param {module:model/WritableFrontPort} writableFrontPort 
     * @param {module:api/DcimApi~dcimFrontPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPort}
     */
    dcimFrontPortsPartialUpdate(id, writableFrontPort, callback) {
      let postBody = writableFrontPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortsPartialUpdate");
      }
      // verify the required parameter 'writableFrontPort' is set
      if (writableFrontPort === undefined || writableFrontPort === null) {
        throw new Error("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPort;
      return this.apiClient.callApi(
        '/dcim/front-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsRead operation.
     * @callback module:api/DcimApi~dcimFrontPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this front port.
     * @param {module:api/DcimApi~dcimFrontPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPort}
     */
    dcimFrontPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontPort;
      return this.apiClient.callApi(
        '/dcim/front-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsTrace operation.
     * @callback module:api/DcimApi~dcimFrontPortsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this front port.
     * @param {module:api/DcimApi~dcimFrontPortsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPort}
     */
    dcimFrontPortsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontPort;
      return this.apiClient.callApi(
        '/dcim/front-ports/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimFrontPortsUpdate operation.
     * @callback module:api/DcimApi~dcimFrontPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this front port.
     * @param {module:model/WritableFrontPort} writableFrontPort 
     * @param {module:api/DcimApi~dcimFrontPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontPort}
     */
    dcimFrontPortsUpdate(id, writableFrontPort, callback) {
      let postBody = writableFrontPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimFrontPortsUpdate");
      }
      // verify the required parameter 'writableFrontPort' is set
      if (writableFrontPort === undefined || writableFrontPort === null) {
        throw new Error("Missing the required parameter 'writableFrontPort' when calling dcimFrontPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontPort;
      return this.apiClient.callApi(
        '/dcim/front-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceConnectionsList operation.
     * @callback module:api/DcimApi~dcimInterfaceConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfaceConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [connectionStatusN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfaceConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfaceConnectionsList200Response}
     */
    dcimInterfaceConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'connection_status__n': opts['connectionStatusN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfaceConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/interface-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesCreate(writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInterfaceTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesList operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfaceTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [mgmtOnly] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfaceTemplatesList200Response}
     */
    dcimInterfaceTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'mgmt_only': opts['mgmtOnly'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfaceTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/interface-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesPartialUpdate(id, writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesRead operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:api/DcimApi~dcimInterfaceTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfaceTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimInterfaceTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InterfaceTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface template.
     * @param {module:model/WritableInterfaceTemplate} writableInterfaceTemplate 
     * @param {module:api/DcimApi~dcimInterfaceTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InterfaceTemplate}
     */
    dcimInterfaceTemplatesUpdate(id, writableInterfaceTemplate, callback) {
      let postBody = writableInterfaceTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfaceTemplatesUpdate");
      }
      // verify the required parameter 'writableInterfaceTemplate' is set
      if (writableInterfaceTemplate === undefined || writableInterfaceTemplate === null) {
        throw new Error("Missing the required parameter 'writableInterfaceTemplate' when calling dcimInterfaceTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InterfaceTemplate;
      return this.apiClient.callApi(
        '/dcim/interface-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesCreate operation.
     * @callback module:api/DcimApi~dcimInterfacesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableDeviceInterface} writableDeviceInterface 
     * @param {module:api/DcimApi~dcimInterfacesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesCreate(writableDeviceInterface, callback) {
      let postBody = writableDeviceInterface;
      // verify the required parameter 'writableDeviceInterface' is set
      if (writableDeviceInterface === undefined || writableDeviceInterface === null) {
        throw new Error("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesDelete operation.
     * @callback module:api/DcimApi~dcimInterfacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInterfacesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesGraphs operation.
     * @callback module:api/DcimApi~dcimInterfacesGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular interface.
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesList operation.
     * @callback module:api/DcimApi~dcimInterfacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInterfacesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [connectionStatus] 
     * @param {String} [type] 
     * @param {String} [enabled] 
     * @param {String} [mtu] 
     * @param {String} [mgmtOnly] 
     * @param {String} [mode] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [cabled] 
     * @param {String} [kind] 
     * @param {String} [lagId] 
     * @param {String} [macAddress] 
     * @param {String} [vlanId] 
     * @param {String} [vlan] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [connectionStatusN] 
     * @param {String} [typeN] 
     * @param {String} [mtuN] 
     * @param {String} [mtuLte] 
     * @param {String} [mtuLt] 
     * @param {String} [mtuGte] 
     * @param {String} [mtuGt] 
     * @param {String} [modeN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [tagN] 
     * @param {String} [lagIdN] 
     * @param {String} [macAddressN] 
     * @param {String} [macAddressIc] 
     * @param {String} [macAddressNic] 
     * @param {String} [macAddressIew] 
     * @param {String} [macAddressNiew] 
     * @param {String} [macAddressIsw] 
     * @param {String} [macAddressNisw] 
     * @param {String} [macAddressIe] 
     * @param {String} [macAddressNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInterfacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInterfacesList200Response}
     */
    dcimInterfacesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'connection_status': opts['connectionStatus'],
        'type': opts['type'],
        'enabled': opts['enabled'],
        'mtu': opts['mtu'],
        'mgmt_only': opts['mgmtOnly'],
        'mode': opts['mode'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'cabled': opts['cabled'],
        'kind': opts['kind'],
        'lag_id': opts['lagId'],
        'mac_address': opts['macAddress'],
        'vlan_id': opts['vlanId'],
        'vlan': opts['vlan'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'connection_status__n': opts['connectionStatusN'],
        'type__n': opts['typeN'],
        'mtu__n': opts['mtuN'],
        'mtu__lte': opts['mtuLte'],
        'mtu__lt': opts['mtuLt'],
        'mtu__gte': opts['mtuGte'],
        'mtu__gt': opts['mtuGt'],
        'mode__n': opts['modeN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'tag__n': opts['tagN'],
        'lag_id__n': opts['lagIdN'],
        'mac_address__n': opts['macAddressN'],
        'mac_address__ic': opts['macAddressIc'],
        'mac_address__nic': opts['macAddressNic'],
        'mac_address__iew': opts['macAddressIew'],
        'mac_address__niew': opts['macAddressNiew'],
        'mac_address__isw': opts['macAddressIsw'],
        'mac_address__nisw': opts['macAddressNisw'],
        'mac_address__ie': opts['macAddressIe'],
        'mac_address__nie': opts['macAddressNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInterfacesList200Response;
      return this.apiClient.callApi(
        '/dcim/interfaces/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInterfacesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableDeviceInterface} writableDeviceInterface 
     * @param {module:api/DcimApi~dcimInterfacesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesPartialUpdate(id, writableDeviceInterface, callback) {
      let postBody = writableDeviceInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesPartialUpdate");
      }
      // verify the required parameter 'writableDeviceInterface' is set
      if (writableDeviceInterface === undefined || writableDeviceInterface === null) {
        throw new Error("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesRead operation.
     * @callback module:api/DcimApi~dcimInterfacesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesTrace operation.
     * @callback module:api/DcimApi~dcimInterfacesTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:api/DcimApi~dcimInterfacesTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInterfacesUpdate operation.
     * @callback module:api/DcimApi~dcimInterfacesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this interface.
     * @param {module:model/WritableDeviceInterface} writableDeviceInterface 
     * @param {module:api/DcimApi~dcimInterfacesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceInterface}
     */
    dcimInterfacesUpdate(id, writableDeviceInterface, callback) {
      let postBody = writableDeviceInterface;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInterfacesUpdate");
      }
      // verify the required parameter 'writableDeviceInterface' is set
      if (writableDeviceInterface === undefined || writableDeviceInterface === null) {
        throw new Error("Missing the required parameter 'writableDeviceInterface' when calling dcimInterfacesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceInterface;
      return this.apiClient.callApi(
        '/dcim/interfaces/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsCreate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsCreate(writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsDelete operation.
     * @callback module:api/DcimApi~dcimInventoryItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:api/DcimApi~dcimInventoryItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimInventoryItemsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsList operation.
     * @callback module:api/DcimApi~dcimInventoryItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimInventoryItemsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [partId] 
     * @param {String} [assetTag] 
     * @param {String} [discovered] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [parentId] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [serial] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [partIdN] 
     * @param {String} [partIdIc] 
     * @param {String} [partIdNic] 
     * @param {String} [partIdIew] 
     * @param {String} [partIdNiew] 
     * @param {String} [partIdIsw] 
     * @param {String} [partIdNisw] 
     * @param {String} [partIdIe] 
     * @param {String} [partIdNie] 
     * @param {String} [assetTagN] 
     * @param {String} [assetTagIc] 
     * @param {String} [assetTagNic] 
     * @param {String} [assetTagIew] 
     * @param {String} [assetTagNiew] 
     * @param {String} [assetTagIsw] 
     * @param {String} [assetTagNisw] 
     * @param {String} [assetTagIe] 
     * @param {String} [assetTagNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {String} [parentIdN] 
     * @param {String} [manufacturerIdN] 
     * @param {String} [manufacturerN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimInventoryItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimInventoryItemsList200Response}
     */
    dcimInventoryItemsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'part_id': opts['partId'],
        'asset_tag': opts['assetTag'],
        'discovered': opts['discovered'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'parent_id': opts['parentId'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'serial': opts['serial'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'part_id__n': opts['partIdN'],
        'part_id__ic': opts['partIdIc'],
        'part_id__nic': opts['partIdNic'],
        'part_id__iew': opts['partIdIew'],
        'part_id__niew': opts['partIdNiew'],
        'part_id__isw': opts['partIdIsw'],
        'part_id__nisw': opts['partIdNisw'],
        'part_id__ie': opts['partIdIe'],
        'part_id__nie': opts['partIdNie'],
        'asset_tag__n': opts['assetTagN'],
        'asset_tag__ic': opts['assetTagIc'],
        'asset_tag__nic': opts['assetTagNic'],
        'asset_tag__iew': opts['assetTagIew'],
        'asset_tag__niew': opts['assetTagNiew'],
        'asset_tag__isw': opts['assetTagIsw'],
        'asset_tag__nisw': opts['assetTagNisw'],
        'asset_tag__ie': opts['assetTagIe'],
        'asset_tag__nie': opts['assetTagNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'parent_id__n': opts['parentIdN'],
        'manufacturer_id__n': opts['manufacturerIdN'],
        'manufacturer__n': opts['manufacturerN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimInventoryItemsList200Response;
      return this.apiClient.callApi(
        '/dcim/inventory-items/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsPartialUpdate(id, writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsPartialUpdate");
      }
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsRead operation.
     * @callback module:api/DcimApi~dcimInventoryItemsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:api/DcimApi~dcimInventoryItemsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimInventoryItemsUpdate operation.
     * @callback module:api/DcimApi~dcimInventoryItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this inventory item.
     * @param {module:model/WritableInventoryItem} writableInventoryItem 
     * @param {module:api/DcimApi~dcimInventoryItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryItem}
     */
    dcimInventoryItemsUpdate(id, writableInventoryItem, callback) {
      let postBody = writableInventoryItem;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimInventoryItemsUpdate");
      }
      // verify the required parameter 'writableInventoryItem' is set
      if (writableInventoryItem === undefined || writableInventoryItem === null) {
        throw new Error("Missing the required parameter 'writableInventoryItem' when calling dcimInventoryItemsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryItem;
      return this.apiClient.callApi(
        '/dcim/inventory-items/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersCreate operation.
     * @callback module:api/DcimApi~dcimManufacturersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersCreate(manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersDelete operation.
     * @callback module:api/DcimApi~dcimManufacturersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:api/DcimApi~dcimManufacturersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimManufacturersDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersList operation.
     * @callback module:api/DcimApi~dcimManufacturersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimManufacturersList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimManufacturersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimManufacturersList200Response}
     */
    dcimManufacturersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimManufacturersList200Response;
      return this.apiClient.callApi(
        '/dcim/manufacturers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersPartialUpdate operation.
     * @callback module:api/DcimApi~dcimManufacturersPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersPartialUpdate(id, manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersPartialUpdate");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersRead operation.
     * @callback module:api/DcimApi~dcimManufacturersReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:api/DcimApi~dcimManufacturersReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimManufacturersUpdate operation.
     * @callback module:api/DcimApi~dcimManufacturersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this manufacturer.
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/DcimApi~dcimManufacturersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    dcimManufacturersUpdate(id, manufacturer, callback) {
      let postBody = manufacturer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimManufacturersUpdate");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling dcimManufacturersUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Manufacturer;
      return this.apiClient.callApi(
        '/dcim/manufacturers/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsCreate operation.
     * @callback module:api/DcimApi~dcimPlatformsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsCreate(writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsDelete operation.
     * @callback module:api/DcimApi~dcimPlatformsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:api/DcimApi~dcimPlatformsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPlatformsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsList operation.
     * @callback module:api/DcimApi~dcimPlatformsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPlatformsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [napalmDriver] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [manufacturerId] 
     * @param {String} [manufacturer] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [napalmDriverN] 
     * @param {String} [napalmDriverIc] 
     * @param {String} [napalmDriverNic] 
     * @param {String} [napalmDriverIew] 
     * @param {String} [napalmDriverNiew] 
     * @param {String} [napalmDriverIsw] 
     * @param {String} [napalmDriverNisw] 
     * @param {String} [napalmDriverIe] 
     * @param {String} [napalmDriverNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [manufacturerIdN] 
     * @param {String} [manufacturerN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPlatformsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPlatformsList200Response}
     */
    dcimPlatformsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'napalm_driver': opts['napalmDriver'],
        'description': opts['description'],
        'q': opts['q'],
        'manufacturer_id': opts['manufacturerId'],
        'manufacturer': opts['manufacturer'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'napalm_driver__n': opts['napalmDriverN'],
        'napalm_driver__ic': opts['napalmDriverIc'],
        'napalm_driver__nic': opts['napalmDriverNic'],
        'napalm_driver__iew': opts['napalmDriverIew'],
        'napalm_driver__niew': opts['napalmDriverNiew'],
        'napalm_driver__isw': opts['napalmDriverIsw'],
        'napalm_driver__nisw': opts['napalmDriverNisw'],
        'napalm_driver__ie': opts['napalmDriverIe'],
        'napalm_driver__nie': opts['napalmDriverNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'manufacturer_id__n': opts['manufacturerIdN'],
        'manufacturer__n': opts['manufacturerN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPlatformsList200Response;
      return this.apiClient.callApi(
        '/dcim/platforms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPlatformsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsPartialUpdate(id, writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsPartialUpdate");
      }
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsRead operation.
     * @callback module:api/DcimApi~dcimPlatformsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:api/DcimApi~dcimPlatformsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPlatformsUpdate operation.
     * @callback module:api/DcimApi~dcimPlatformsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this platform.
     * @param {module:model/WritablePlatform} writablePlatform 
     * @param {module:api/DcimApi~dcimPlatformsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    dcimPlatformsUpdate(id, writablePlatform, callback) {
      let postBody = writablePlatform;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPlatformsUpdate");
      }
      // verify the required parameter 'writablePlatform' is set
      if (writablePlatform === undefined || writablePlatform === null) {
        throw new Error("Missing the required parameter 'writablePlatform' when calling dcimPlatformsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/dcim/platforms/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerConnectionsList operation.
     * @callback module:api/DcimApi~dcimPowerConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {String} [connectionStatus] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [connectionStatusN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerConnectionsList200Response}
     */
    dcimPowerConnectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'connection_status': opts['connectionStatus'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'connection_status__n': opts['connectionStatusN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-connections/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsCreate operation.
     * @callback module:api/DcimApi~dcimPowerFeedsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerFeed} writablePowerFeed 
     * @param {module:api/DcimApi~dcimPowerFeedsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerFeed}
     */
    dcimPowerFeedsCreate(writablePowerFeed, callback) {
      let postBody = writablePowerFeed;
      // verify the required parameter 'writablePowerFeed' is set
      if (writablePowerFeed === undefined || writablePowerFeed === null) {
        throw new Error("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerFeed;
      return this.apiClient.callApi(
        '/dcim/power-feeds/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsDelete operation.
     * @callback module:api/DcimApi~dcimPowerFeedsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power feed.
     * @param {module:api/DcimApi~dcimPowerFeedsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerFeedsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerFeedsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-feeds/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsList operation.
     * @callback module:api/DcimApi~dcimPowerFeedsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerFeedsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [status] 
     * @param {String} [type] 
     * @param {String} [supply] 
     * @param {String} [phase] 
     * @param {String} [voltage] 
     * @param {String} [amperage] 
     * @param {String} [maxUtilization] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [powerPanelId] 
     * @param {String} [rackId] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [statusN] 
     * @param {String} [typeN] 
     * @param {String} [supplyN] 
     * @param {String} [phaseN] 
     * @param {String} [voltageN] 
     * @param {String} [voltageLte] 
     * @param {String} [voltageLt] 
     * @param {String} [voltageGte] 
     * @param {String} [voltageGt] 
     * @param {String} [amperageN] 
     * @param {String} [amperageLte] 
     * @param {String} [amperageLt] 
     * @param {String} [amperageGte] 
     * @param {String} [amperageGt] 
     * @param {String} [maxUtilizationN] 
     * @param {String} [maxUtilizationLte] 
     * @param {String} [maxUtilizationLt] 
     * @param {String} [maxUtilizationGte] 
     * @param {String} [maxUtilizationGt] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [powerPanelIdN] 
     * @param {String} [rackIdN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerFeedsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerFeedsList200Response}
     */
    dcimPowerFeedsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'status': opts['status'],
        'type': opts['type'],
        'supply': opts['supply'],
        'phase': opts['phase'],
        'voltage': opts['voltage'],
        'amperage': opts['amperage'],
        'max_utilization': opts['maxUtilization'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'power_panel_id': opts['powerPanelId'],
        'rack_id': opts['rackId'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'status__n': opts['statusN'],
        'type__n': opts['typeN'],
        'supply__n': opts['supplyN'],
        'phase__n': opts['phaseN'],
        'voltage__n': opts['voltageN'],
        'voltage__lte': opts['voltageLte'],
        'voltage__lt': opts['voltageLt'],
        'voltage__gte': opts['voltageGte'],
        'voltage__gt': opts['voltageGt'],
        'amperage__n': opts['amperageN'],
        'amperage__lte': opts['amperageLte'],
        'amperage__lt': opts['amperageLt'],
        'amperage__gte': opts['amperageGte'],
        'amperage__gt': opts['amperageGt'],
        'max_utilization__n': opts['maxUtilizationN'],
        'max_utilization__lte': opts['maxUtilizationLte'],
        'max_utilization__lt': opts['maxUtilizationLt'],
        'max_utilization__gte': opts['maxUtilizationGte'],
        'max_utilization__gt': opts['maxUtilizationGt'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'power_panel_id__n': opts['powerPanelIdN'],
        'rack_id__n': opts['rackIdN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerFeedsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-feeds/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerFeedsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power feed.
     * @param {module:model/WritablePowerFeed} writablePowerFeed 
     * @param {module:api/DcimApi~dcimPowerFeedsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerFeed}
     */
    dcimPowerFeedsPartialUpdate(id, writablePowerFeed, callback) {
      let postBody = writablePowerFeed;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerFeedsPartialUpdate");
      }
      // verify the required parameter 'writablePowerFeed' is set
      if (writablePowerFeed === undefined || writablePowerFeed === null) {
        throw new Error("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerFeed;
      return this.apiClient.callApi(
        '/dcim/power-feeds/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsRead operation.
     * @callback module:api/DcimApi~dcimPowerFeedsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power feed.
     * @param {module:api/DcimApi~dcimPowerFeedsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerFeed}
     */
    dcimPowerFeedsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerFeedsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerFeed;
      return this.apiClient.callApi(
        '/dcim/power-feeds/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerFeedsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerFeedsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power feed.
     * @param {module:model/WritablePowerFeed} writablePowerFeed 
     * @param {module:api/DcimApi~dcimPowerFeedsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerFeed}
     */
    dcimPowerFeedsUpdate(id, writablePowerFeed, callback) {
      let postBody = writablePowerFeed;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerFeedsUpdate");
      }
      // verify the required parameter 'writablePowerFeed' is set
      if (writablePowerFeed === undefined || writablePowerFeed === null) {
        throw new Error("Missing the required parameter 'writablePowerFeed' when calling dcimPowerFeedsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerFeed;
      return this.apiClient.callApi(
        '/dcim/power-feeds/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesCreate(writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerOutletTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesList operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerOutletTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [feedLeg] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [feedLegN] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerOutletTemplatesList200Response}
     */
    dcimPowerOutletTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'feed_leg': opts['feedLeg'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'feed_leg__n': opts['feedLegN'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerOutletTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesPartialUpdate(id, writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesPartialUpdate");
      }
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesRead operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutletTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet template.
     * @param {module:model/WritablePowerOutletTemplate} writablePowerOutletTemplate 
     * @param {module:api/DcimApi~dcimPowerOutletTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutletTemplate}
     */
    dcimPowerOutletTemplatesUpdate(id, writablePowerOutletTemplate, callback) {
      let postBody = writablePowerOutletTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletTemplatesUpdate");
      }
      // verify the required parameter 'writablePowerOutletTemplate' is set
      if (writablePowerOutletTemplate === undefined || writablePowerOutletTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerOutletTemplate' when calling dcimPowerOutletTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutletTemplate;
      return this.apiClient.callApi(
        '/dcim/power-outlet-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsCreate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsCreate(writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsDelete operation.
     * @callback module:api/DcimApi~dcimPowerOutletsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:api/DcimApi~dcimPowerOutletsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerOutletsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsList operation.
     * @callback module:api/DcimApi~dcimPowerOutletsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerOutletsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [feedLeg] 
     * @param {String} [description] 
     * @param {String} [connectionStatus] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [type] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [feedLegN] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [connectionStatusN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {String} [typeN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerOutletsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerOutletsList200Response}
     */
    dcimPowerOutletsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'feed_leg': opts['feedLeg'],
        'description': opts['description'],
        'connection_status': opts['connectionStatus'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'type': opts['type'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'feed_leg__n': opts['feedLegN'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'connection_status__n': opts['connectionStatusN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'type__n': opts['typeN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerOutletsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-outlets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsPartialUpdate(id, writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsPartialUpdate");
      }
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsRead operation.
     * @callback module:api/DcimApi~dcimPowerOutletsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:api/DcimApi~dcimPowerOutletsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsTrace operation.
     * @callback module:api/DcimApi~dcimPowerOutletsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:api/DcimApi~dcimPowerOutletsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerOutletsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerOutletsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerOutlet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power outlet.
     * @param {module:model/WritablePowerOutlet} writablePowerOutlet 
     * @param {module:api/DcimApi~dcimPowerOutletsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerOutlet}
     */
    dcimPowerOutletsUpdate(id, writablePowerOutlet, callback) {
      let postBody = writablePowerOutlet;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerOutletsUpdate");
      }
      // verify the required parameter 'writablePowerOutlet' is set
      if (writablePowerOutlet === undefined || writablePowerOutlet === null) {
        throw new Error("Missing the required parameter 'writablePowerOutlet' when calling dcimPowerOutletsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerOutlet;
      return this.apiClient.callApi(
        '/dcim/power-outlets/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsCreate operation.
     * @callback module:api/DcimApi~dcimPowerPanelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPanel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerPanel} writablePowerPanel 
     * @param {module:api/DcimApi~dcimPowerPanelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPanel}
     */
    dcimPowerPanelsCreate(writablePowerPanel, callback) {
      let postBody = writablePowerPanel;
      // verify the required parameter 'writablePowerPanel' is set
      if (writablePowerPanel === undefined || writablePowerPanel === null) {
        throw new Error("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPanel;
      return this.apiClient.callApi(
        '/dcim/power-panels/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsDelete operation.
     * @callback module:api/DcimApi~dcimPowerPanelsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power panel.
     * @param {module:api/DcimApi~dcimPowerPanelsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerPanelsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPanelsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-panels/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsList operation.
     * @callback module:api/DcimApi~dcimPowerPanelsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerPanelsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [rackGroupId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [rackGroupIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerPanelsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerPanelsList200Response}
     */
    dcimPowerPanelsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'rack_group_id': opts['rackGroupId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'rack_group_id__n': opts['rackGroupIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerPanelsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-panels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPanelsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPanel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power panel.
     * @param {module:model/WritablePowerPanel} writablePowerPanel 
     * @param {module:api/DcimApi~dcimPowerPanelsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPanel}
     */
    dcimPowerPanelsPartialUpdate(id, writablePowerPanel, callback) {
      let postBody = writablePowerPanel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPanelsPartialUpdate");
      }
      // verify the required parameter 'writablePowerPanel' is set
      if (writablePowerPanel === undefined || writablePowerPanel === null) {
        throw new Error("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPanel;
      return this.apiClient.callApi(
        '/dcim/power-panels/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsRead operation.
     * @callback module:api/DcimApi~dcimPowerPanelsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPanel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power panel.
     * @param {module:api/DcimApi~dcimPowerPanelsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPanel}
     */
    dcimPowerPanelsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPanelsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPanel;
      return this.apiClient.callApi(
        '/dcim/power-panels/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPanelsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPanelsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPanel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power panel.
     * @param {module:model/WritablePowerPanel} writablePowerPanel 
     * @param {module:api/DcimApi~dcimPowerPanelsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPanel}
     */
    dcimPowerPanelsUpdate(id, writablePowerPanel, callback) {
      let postBody = writablePowerPanel;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPanelsUpdate");
      }
      // verify the required parameter 'writablePowerPanel' is set
      if (writablePowerPanel === undefined || writablePowerPanel === null) {
        throw new Error("Missing the required parameter 'writablePowerPanel' when calling dcimPowerPanelsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPanel;
      return this.apiClient.callApi(
        '/dcim/power-panels/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesCreate(writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [maximumDraw] 
     * @param {String} [allocatedDraw] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [maximumDrawN] 
     * @param {String} [maximumDrawLte] 
     * @param {String} [maximumDrawLt] 
     * @param {String} [maximumDrawGte] 
     * @param {String} [maximumDrawGt] 
     * @param {String} [allocatedDrawN] 
     * @param {String} [allocatedDrawLte] 
     * @param {String} [allocatedDrawLt] 
     * @param {String} [allocatedDrawGte] 
     * @param {String} [allocatedDrawGt] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerPortTemplatesList200Response}
     */
    dcimPowerPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'maximum_draw': opts['maximumDraw'],
        'allocated_draw': opts['allocatedDraw'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'maximum_draw__n': opts['maximumDrawN'],
        'maximum_draw__lte': opts['maximumDrawLte'],
        'maximum_draw__lt': opts['maximumDrawLt'],
        'maximum_draw__gte': opts['maximumDrawGte'],
        'maximum_draw__gt': opts['maximumDrawGt'],
        'allocated_draw__n': opts['allocatedDrawN'],
        'allocated_draw__lte': opts['allocatedDrawLte'],
        'allocated_draw__lt': opts['allocatedDrawLt'],
        'allocated_draw__gte': opts['allocatedDrawGte'],
        'allocated_draw__gt': opts['allocatedDrawGt'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesPartialUpdate(id, writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:api/DcimApi~dcimPowerPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port template.
     * @param {module:model/WritablePowerPortTemplate} writablePowerPortTemplate 
     * @param {module:api/DcimApi~dcimPowerPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPortTemplate}
     */
    dcimPowerPortTemplatesUpdate(id, writablePowerPortTemplate, callback) {
      let postBody = writablePowerPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortTemplatesUpdate");
      }
      // verify the required parameter 'writablePowerPortTemplate' is set
      if (writablePowerPortTemplate === undefined || writablePowerPortTemplate === null) {
        throw new Error("Missing the required parameter 'writablePowerPortTemplate' when calling dcimPowerPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPortTemplate;
      return this.apiClient.callApi(
        '/dcim/power-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsCreate operation.
     * @callback module:api/DcimApi~dcimPowerPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsCreate(writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsDelete operation.
     * @callback module:api/DcimApi~dcimPowerPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:api/DcimApi~dcimPowerPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimPowerPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsList operation.
     * @callback module:api/DcimApi~dcimPowerPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimPowerConnectionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [maximumDraw] 
     * @param {String} [allocatedDraw] 
     * @param {String} [description] 
     * @param {String} [connectionStatus] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [type] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [maximumDrawN] 
     * @param {String} [maximumDrawLte] 
     * @param {String} [maximumDrawLt] 
     * @param {String} [maximumDrawGte] 
     * @param {String} [maximumDrawGt] 
     * @param {String} [allocatedDrawN] 
     * @param {String} [allocatedDrawLte] 
     * @param {String} [allocatedDrawLt] 
     * @param {String} [allocatedDrawGte] 
     * @param {String} [allocatedDrawGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [connectionStatusN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {String} [typeN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimPowerPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimPowerConnectionsList200Response}
     */
    dcimPowerPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'maximum_draw': opts['maximumDraw'],
        'allocated_draw': opts['allocatedDraw'],
        'description': opts['description'],
        'connection_status': opts['connectionStatus'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'type': opts['type'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'maximum_draw__n': opts['maximumDrawN'],
        'maximum_draw__lte': opts['maximumDrawLte'],
        'maximum_draw__lt': opts['maximumDrawLt'],
        'maximum_draw__gte': opts['maximumDrawGte'],
        'maximum_draw__gt': opts['maximumDrawGt'],
        'allocated_draw__n': opts['allocatedDrawN'],
        'allocated_draw__lte': opts['allocatedDrawLte'],
        'allocated_draw__lt': opts['allocatedDrawLt'],
        'allocated_draw__gte': opts['allocatedDrawGte'],
        'allocated_draw__gt': opts['allocatedDrawGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'connection_status__n': opts['connectionStatusN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'type__n': opts['typeN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimPowerConnectionsList200Response;
      return this.apiClient.callApi(
        '/dcim/power-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsPartialUpdate(id, writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsPartialUpdate");
      }
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsRead operation.
     * @callback module:api/DcimApi~dcimPowerPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:api/DcimApi~dcimPowerPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsTrace operation.
     * @callback module:api/DcimApi~dcimPowerPortsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:api/DcimApi~dcimPowerPortsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimPowerPortsUpdate operation.
     * @callback module:api/DcimApi~dcimPowerPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this power port.
     * @param {module:model/WritablePowerPort} writablePowerPort 
     * @param {module:api/DcimApi~dcimPowerPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerPort}
     */
    dcimPowerPortsUpdate(id, writablePowerPort, callback) {
      let postBody = writablePowerPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimPowerPortsUpdate");
      }
      // verify the required parameter 'writablePowerPort' is set
      if (writablePowerPort === undefined || writablePowerPort === null) {
        throw new Error("Missing the required parameter 'writablePowerPort' when calling dcimPowerPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerPort;
      return this.apiClient.callApi(
        '/dcim/power-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsCreate operation.
     * @callback module:api/DcimApi~dcimRackGroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsCreate(writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsDelete operation.
     * @callback module:api/DcimApi~dcimRackGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:api/DcimApi~dcimRackGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackGroupsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsList operation.
     * @callback module:api/DcimApi~dcimRackGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackGroupsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [parentIdN] 
     * @param {String} [parentN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackGroupsList200Response}
     */
    dcimRackGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'parent_id__n': opts['parentIdN'],
        'parent__n': opts['parentN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackGroupsList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackGroupsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsPartialUpdate(id, writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsPartialUpdate");
      }
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsRead operation.
     * @callback module:api/DcimApi~dcimRackGroupsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:api/DcimApi~dcimRackGroupsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackGroupsUpdate operation.
     * @callback module:api/DcimApi~dcimRackGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack group.
     * @param {module:model/WritableRackGroup} writableRackGroup 
     * @param {module:api/DcimApi~dcimRackGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackGroup}
     */
    dcimRackGroupsUpdate(id, writableRackGroup, callback) {
      let postBody = writableRackGroup;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackGroupsUpdate");
      }
      // verify the required parameter 'writableRackGroup' is set
      if (writableRackGroup === undefined || writableRackGroup === null) {
        throw new Error("Missing the required parameter 'writableRackGroup' when calling dcimRackGroupsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackGroup;
      return this.apiClient.callApi(
        '/dcim/rack-groups/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsCreate operation.
     * @callback module:api/DcimApi~dcimRackReservationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsCreate(writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsDelete operation.
     * @callback module:api/DcimApi~dcimRackReservationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:api/DcimApi~dcimRackReservationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackReservationsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsList operation.
     * @callback module:api/DcimApi~dcimRackReservationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackReservationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [created] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [q] 
     * @param {String} [rackId] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [userId] 
     * @param {String} [user] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [createdN] 
     * @param {String} [createdLte] 
     * @param {String} [createdLt] 
     * @param {String} [createdGte] 
     * @param {String} [createdGt] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [rackIdN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [userIdN] 
     * @param {String} [userN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackReservationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackReservationsList200Response}
     */
    dcimRackReservationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'created': opts['created'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'q': opts['q'],
        'rack_id': opts['rackId'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'user_id': opts['userId'],
        'user': opts['user'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'created__n': opts['createdN'],
        'created__lte': opts['createdLte'],
        'created__lt': opts['createdLt'],
        'created__gte': opts['createdGte'],
        'created__gt': opts['createdGt'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'rack_id__n': opts['rackIdN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'user_id__n': opts['userIdN'],
        'user__n': opts['userN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackReservationsList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackReservationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsPartialUpdate(id, writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsPartialUpdate");
      }
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsRead operation.
     * @callback module:api/DcimApi~dcimRackReservationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:api/DcimApi~dcimRackReservationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackReservationsUpdate operation.
     * @callback module:api/DcimApi~dcimRackReservationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackReservation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack reservation.
     * @param {module:model/WritableRackReservation} writableRackReservation 
     * @param {module:api/DcimApi~dcimRackReservationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackReservation}
     */
    dcimRackReservationsUpdate(id, writableRackReservation, callback) {
      let postBody = writableRackReservation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackReservationsUpdate");
      }
      // verify the required parameter 'writableRackReservation' is set
      if (writableRackReservation === undefined || writableRackReservation === null) {
        throw new Error("Missing the required parameter 'writableRackReservation' when calling dcimRackReservationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackReservation;
      return this.apiClient.callApi(
        '/dcim/rack-reservations/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesCreate operation.
     * @callback module:api/DcimApi~dcimRackRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesCreate(rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesDelete operation.
     * @callback module:api/DcimApi~dcimRackRolesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:api/DcimApi~dcimRackRolesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRackRolesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesList operation.
     * @callback module:api/DcimApi~dcimRackRolesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRackRolesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [color] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [colorN] 
     * @param {String} [colorIc] 
     * @param {String} [colorNic] 
     * @param {String} [colorIew] 
     * @param {String} [colorNiew] 
     * @param {String} [colorIsw] 
     * @param {String} [colorNisw] 
     * @param {String} [colorIe] 
     * @param {String} [colorNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRackRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRackRolesList200Response}
     */
    dcimRackRolesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'color': opts['color'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'color__n': opts['colorN'],
        'color__ic': opts['colorIc'],
        'color__nic': opts['colorNic'],
        'color__iew': opts['colorIew'],
        'color__niew': opts['colorNiew'],
        'color__isw': opts['colorIsw'],
        'color__nisw': opts['colorNisw'],
        'color__ie': opts['colorIe'],
        'color__nie': opts['colorNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRackRolesList200Response;
      return this.apiClient.callApi(
        '/dcim/rack-roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRackRolesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesPartialUpdate(id, rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesPartialUpdate");
      }
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesRead operation.
     * @callback module:api/DcimApi~dcimRackRolesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:api/DcimApi~dcimRackRolesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRackRolesUpdate operation.
     * @callback module:api/DcimApi~dcimRackRolesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RackRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack role.
     * @param {module:model/RackRole} rackRole 
     * @param {module:api/DcimApi~dcimRackRolesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RackRole}
     */
    dcimRackRolesUpdate(id, rackRole, callback) {
      let postBody = rackRole;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRackRolesUpdate");
      }
      // verify the required parameter 'rackRole' is set
      if (rackRole === undefined || rackRole === null) {
        throw new Error("Missing the required parameter 'rackRole' when calling dcimRackRolesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RackRole;
      return this.apiClient.callApi(
        '/dcim/rack-roles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksCreate operation.
     * @callback module:api/DcimApi~dcimRacksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksCreate(writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksDelete operation.
     * @callback module:api/DcimApi~dcimRacksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:api/DcimApi~dcimRacksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRacksDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksElevation operation.
     * @callback module:api/DcimApi~dcimRacksElevationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RackUnit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
     * @param {Number} id A unique integer value identifying this rack.
     * @param {Object} opts Optional parameters
     * @param {String} [q] 
     * @param {module:model/String} [face = 'front')] 
     * @param {module:model/String} [render = 'json')] 
     * @param {Number} [unitWidth = 220)] 
     * @param {Number} [unitHeight = 22)] 
     * @param {Number} [legendWidth = 30)] 
     * @param {Number} [exclude] 
     * @param {Boolean} [expandDevices = true)] 
     * @param {Boolean} [includeImages = true)] 
     * @param {module:api/DcimApi~dcimRacksElevationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RackUnit>}
     */
    dcimRacksElevation(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksElevation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'q': opts['q'],
        'face': opts['face'],
        'render': opts['render'],
        'unit_width': opts['unitWidth'],
        'unit_height': opts['unitHeight'],
        'legend_width': opts['legendWidth'],
        'exclude': opts['exclude'],
        'expand_devices': opts['expandDevices'],
        'include_images': opts['includeImages']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RackUnit];
      return this.apiClient.callApi(
        '/dcim/racks/{id}/elevation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksList operation.
     * @callback module:api/DcimApi~dcimRacksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRacksList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [facilityId] 
     * @param {String} [assetTag] 
     * @param {String} [type] 
     * @param {String} [width] 
     * @param {String} [uHeight] 
     * @param {String} [descUnits] 
     * @param {String} [outerWidth] 
     * @param {String} [outerDepth] 
     * @param {String} [outerUnit] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [groupId] 
     * @param {String} [group] 
     * @param {String} [status] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [serial] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [facilityIdN] 
     * @param {String} [facilityIdIc] 
     * @param {String} [facilityIdNic] 
     * @param {String} [facilityIdIew] 
     * @param {String} [facilityIdNiew] 
     * @param {String} [facilityIdIsw] 
     * @param {String} [facilityIdNisw] 
     * @param {String} [facilityIdIe] 
     * @param {String} [facilityIdNie] 
     * @param {String} [assetTagN] 
     * @param {String} [assetTagIc] 
     * @param {String} [assetTagNic] 
     * @param {String} [assetTagIew] 
     * @param {String} [assetTagNiew] 
     * @param {String} [assetTagIsw] 
     * @param {String} [assetTagNisw] 
     * @param {String} [assetTagIe] 
     * @param {String} [assetTagNie] 
     * @param {String} [typeN] 
     * @param {String} [widthN] 
     * @param {String} [uHeightN] 
     * @param {String} [uHeightLte] 
     * @param {String} [uHeightLt] 
     * @param {String} [uHeightGte] 
     * @param {String} [uHeightGt] 
     * @param {String} [outerWidthN] 
     * @param {String} [outerWidthLte] 
     * @param {String} [outerWidthLt] 
     * @param {String} [outerWidthGte] 
     * @param {String} [outerWidthGt] 
     * @param {String} [outerDepthN] 
     * @param {String} [outerDepthLte] 
     * @param {String} [outerDepthLt] 
     * @param {String} [outerDepthGte] 
     * @param {String} [outerDepthGt] 
     * @param {String} [outerUnitN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [groupIdN] 
     * @param {String} [groupN] 
     * @param {String} [statusN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRacksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRacksList200Response}
     */
    dcimRacksList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'facility_id': opts['facilityId'],
        'asset_tag': opts['assetTag'],
        'type': opts['type'],
        'width': opts['width'],
        'u_height': opts['uHeight'],
        'desc_units': opts['descUnits'],
        'outer_width': opts['outerWidth'],
        'outer_depth': opts['outerDepth'],
        'outer_unit': opts['outerUnit'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'group_id': opts['groupId'],
        'group': opts['group'],
        'status': opts['status'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'serial': opts['serial'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'facility_id__n': opts['facilityIdN'],
        'facility_id__ic': opts['facilityIdIc'],
        'facility_id__nic': opts['facilityIdNic'],
        'facility_id__iew': opts['facilityIdIew'],
        'facility_id__niew': opts['facilityIdNiew'],
        'facility_id__isw': opts['facilityIdIsw'],
        'facility_id__nisw': opts['facilityIdNisw'],
        'facility_id__ie': opts['facilityIdIe'],
        'facility_id__nie': opts['facilityIdNie'],
        'asset_tag__n': opts['assetTagN'],
        'asset_tag__ic': opts['assetTagIc'],
        'asset_tag__nic': opts['assetTagNic'],
        'asset_tag__iew': opts['assetTagIew'],
        'asset_tag__niew': opts['assetTagNiew'],
        'asset_tag__isw': opts['assetTagIsw'],
        'asset_tag__nisw': opts['assetTagNisw'],
        'asset_tag__ie': opts['assetTagIe'],
        'asset_tag__nie': opts['assetTagNie'],
        'type__n': opts['typeN'],
        'width__n': opts['widthN'],
        'u_height__n': opts['uHeightN'],
        'u_height__lte': opts['uHeightLte'],
        'u_height__lt': opts['uHeightLt'],
        'u_height__gte': opts['uHeightGte'],
        'u_height__gt': opts['uHeightGt'],
        'outer_width__n': opts['outerWidthN'],
        'outer_width__lte': opts['outerWidthLte'],
        'outer_width__lt': opts['outerWidthLt'],
        'outer_width__gte': opts['outerWidthGte'],
        'outer_width__gt': opts['outerWidthGt'],
        'outer_depth__n': opts['outerDepthN'],
        'outer_depth__lte': opts['outerDepthLte'],
        'outer_depth__lt': opts['outerDepthLt'],
        'outer_depth__gte': opts['outerDepthGte'],
        'outer_depth__gt': opts['outerDepthGt'],
        'outer_unit__n': opts['outerUnitN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'group_id__n': opts['groupIdN'],
        'group__n': opts['groupN'],
        'status__n': opts['statusN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRacksList200Response;
      return this.apiClient.callApi(
        '/dcim/racks/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRacksPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksPartialUpdate(id, writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksPartialUpdate");
      }
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksRead operation.
     * @callback module:api/DcimApi~dcimRacksReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:api/DcimApi~dcimRacksReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRacksUpdate operation.
     * @callback module:api/DcimApi~dcimRacksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rack.
     * @param {module:model/WritableRack} writableRack 
     * @param {module:api/DcimApi~dcimRacksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rack}
     */
    dcimRacksUpdate(id, writableRack, callback) {
      let postBody = writableRack;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRacksUpdate");
      }
      // verify the required parameter 'writableRack' is set
      if (writableRack === undefined || writableRack === null) {
        throw new Error("Missing the required parameter 'writableRack' when calling dcimRacksUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rack;
      return this.apiClient.callApi(
        '/dcim/racks/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesCreate operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRearPortTemplate} writableRearPortTemplate 
     * @param {module:api/DcimApi~dcimRearPortTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPortTemplate}
     */
    dcimRearPortTemplatesCreate(writableRearPortTemplate, callback) {
      let postBody = writableRearPortTemplate;
      // verify the required parameter 'writableRearPortTemplate' is set
      if (writableRearPortTemplate === undefined || writableRearPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPortTemplate;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesDelete operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port template.
     * @param {module:api/DcimApi~dcimRearPortTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRearPortTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesList operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRearPortTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [positions] 
     * @param {String} [q] 
     * @param {String} [devicetypeId] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [positionsN] 
     * @param {String} [positionsLte] 
     * @param {String} [positionsLt] 
     * @param {String} [positionsGte] 
     * @param {String} [positionsGt] 
     * @param {String} [devicetypeIdN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRearPortTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRearPortTemplatesList200Response}
     */
    dcimRearPortTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'positions': opts['positions'],
        'q': opts['q'],
        'devicetype_id': opts['devicetypeId'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'positions__n': opts['positionsN'],
        'positions__lte': opts['positionsLte'],
        'positions__lt': opts['positionsLt'],
        'positions__gte': opts['positionsGte'],
        'positions__gt': opts['positionsGt'],
        'devicetype_id__n': opts['devicetypeIdN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRearPortTemplatesList200Response;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port template.
     * @param {module:model/WritableRearPortTemplate} writableRearPortTemplate 
     * @param {module:api/DcimApi~dcimRearPortTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPortTemplate}
     */
    dcimRearPortTemplatesPartialUpdate(id, writableRearPortTemplate, callback) {
      let postBody = writableRearPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableRearPortTemplate' is set
      if (writableRearPortTemplate === undefined || writableRearPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPortTemplate;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesRead operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rear port template.
     * @param {module:api/DcimApi~dcimRearPortTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPortTemplate}
     */
    dcimRearPortTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RearPortTemplate;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortTemplatesUpdate operation.
     * @callback module:api/DcimApi~dcimRearPortTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPortTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port template.
     * @param {module:model/WritableRearPortTemplate} writableRearPortTemplate 
     * @param {module:api/DcimApi~dcimRearPortTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPortTemplate}
     */
    dcimRearPortTemplatesUpdate(id, writableRearPortTemplate, callback) {
      let postBody = writableRearPortTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortTemplatesUpdate");
      }
      // verify the required parameter 'writableRearPortTemplate' is set
      if (writableRearPortTemplate === undefined || writableRearPortTemplate === null) {
        throw new Error("Missing the required parameter 'writableRearPortTemplate' when calling dcimRearPortTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPortTemplate;
      return this.apiClient.callApi(
        '/dcim/rear-port-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsCreate operation.
     * @callback module:api/DcimApi~dcimRearPortsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRearPort} writableRearPort 
     * @param {module:api/DcimApi~dcimRearPortsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPort}
     */
    dcimRearPortsCreate(writableRearPort, callback) {
      let postBody = writableRearPort;
      // verify the required parameter 'writableRearPort' is set
      if (writableRearPort === undefined || writableRearPort === null) {
        throw new Error("Missing the required parameter 'writableRearPort' when calling dcimRearPortsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPort;
      return this.apiClient.callApi(
        '/dcim/rear-ports/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsDelete operation.
     * @callback module:api/DcimApi~dcimRearPortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port.
     * @param {module:api/DcimApi~dcimRearPortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRearPortsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/rear-ports/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsList operation.
     * @callback module:api/DcimApi~dcimRearPortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRearPortsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [type] 
     * @param {String} [positions] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [deviceId] 
     * @param {String} [device] 
     * @param {String} [tag] 
     * @param {String} [cabled] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [typeN] 
     * @param {String} [positionsN] 
     * @param {String} [positionsLte] 
     * @param {String} [positionsLt] 
     * @param {String} [positionsGte] 
     * @param {String} [positionsGt] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [deviceIdN] 
     * @param {String} [deviceN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRearPortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRearPortsList200Response}
     */
    dcimRearPortsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'type': opts['type'],
        'positions': opts['positions'],
        'description': opts['description'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'device_id': opts['deviceId'],
        'device': opts['device'],
        'tag': opts['tag'],
        'cabled': opts['cabled'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'type__n': opts['typeN'],
        'positions__n': opts['positionsN'],
        'positions__lte': opts['positionsLte'],
        'positions__lt': opts['positionsLt'],
        'positions__gte': opts['positionsGte'],
        'positions__gt': opts['positionsGt'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'device_id__n': opts['deviceIdN'],
        'device__n': opts['deviceN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRearPortsList200Response;
      return this.apiClient.callApi(
        '/dcim/rear-ports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRearPortsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port.
     * @param {module:model/WritableRearPort} writableRearPort 
     * @param {module:api/DcimApi~dcimRearPortsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPort}
     */
    dcimRearPortsPartialUpdate(id, writableRearPort, callback) {
      let postBody = writableRearPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortsPartialUpdate");
      }
      // verify the required parameter 'writableRearPort' is set
      if (writableRearPort === undefined || writableRearPort === null) {
        throw new Error("Missing the required parameter 'writableRearPort' when calling dcimRearPortsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPort;
      return this.apiClient.callApi(
        '/dcim/rear-ports/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsRead operation.
     * @callback module:api/DcimApi~dcimRearPortsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this rear port.
     * @param {module:api/DcimApi~dcimRearPortsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPort}
     */
    dcimRearPortsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RearPort;
      return this.apiClient.callApi(
        '/dcim/rear-ports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsTrace operation.
     * @callback module:api/DcimApi~dcimRearPortsTraceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     * @param {Number} id A unique integer value identifying this rear port.
     * @param {module:api/DcimApi~dcimRearPortsTraceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPort}
     */
    dcimRearPortsTrace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortsTrace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RearPort;
      return this.apiClient.callApi(
        '/dcim/rear-ports/{id}/trace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRearPortsUpdate operation.
     * @callback module:api/DcimApi~dcimRearPortsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RearPort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this rear port.
     * @param {module:model/WritableRearPort} writableRearPort 
     * @param {module:api/DcimApi~dcimRearPortsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RearPort}
     */
    dcimRearPortsUpdate(id, writableRearPort, callback) {
      let postBody = writableRearPort;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRearPortsUpdate");
      }
      // verify the required parameter 'writableRearPort' is set
      if (writableRearPort === undefined || writableRearPort === null) {
        throw new Error("Missing the required parameter 'writableRearPort' when calling dcimRearPortsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RearPort;
      return this.apiClient.callApi(
        '/dcim/rear-ports/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsCreate operation.
     * @callback module:api/DcimApi~dcimRegionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsCreate(writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsDelete operation.
     * @callback module:api/DcimApi~dcimRegionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:api/DcimApi~dcimRegionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimRegionsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsList operation.
     * @callback module:api/DcimApi~dcimRegionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimRegionsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [description] 
     * @param {String} [q] 
     * @param {String} [parentId] 
     * @param {String} [parent] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [descriptionN] 
     * @param {String} [descriptionIc] 
     * @param {String} [descriptionNic] 
     * @param {String} [descriptionIew] 
     * @param {String} [descriptionNiew] 
     * @param {String} [descriptionIsw] 
     * @param {String} [descriptionNisw] 
     * @param {String} [descriptionIe] 
     * @param {String} [descriptionNie] 
     * @param {String} [parentIdN] 
     * @param {String} [parentN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimRegionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimRegionsList200Response}
     */
    dcimRegionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'description': opts['description'],
        'q': opts['q'],
        'parent_id': opts['parentId'],
        'parent': opts['parent'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'description__n': opts['descriptionN'],
        'description__ic': opts['descriptionIc'],
        'description__nic': opts['descriptionNic'],
        'description__iew': opts['descriptionIew'],
        'description__niew': opts['descriptionNiew'],
        'description__isw': opts['descriptionIsw'],
        'description__nisw': opts['descriptionNisw'],
        'description__ie': opts['descriptionIe'],
        'description__nie': opts['descriptionNie'],
        'parent_id__n': opts['parentIdN'],
        'parent__n': opts['parentN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimRegionsList200Response;
      return this.apiClient.callApi(
        '/dcim/regions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsPartialUpdate operation.
     * @callback module:api/DcimApi~dcimRegionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsPartialUpdate(id, writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsPartialUpdate");
      }
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsRead operation.
     * @callback module:api/DcimApi~dcimRegionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:api/DcimApi~dcimRegionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimRegionsUpdate operation.
     * @callback module:api/DcimApi~dcimRegionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Region} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this region.
     * @param {module:model/WritableRegion} writableRegion 
     * @param {module:api/DcimApi~dcimRegionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Region}
     */
    dcimRegionsUpdate(id, writableRegion, callback) {
      let postBody = writableRegion;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimRegionsUpdate");
      }
      // verify the required parameter 'writableRegion' is set
      if (writableRegion === undefined || writableRegion === null) {
        throw new Error("Missing the required parameter 'writableRegion' when calling dcimRegionsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Region;
      return this.apiClient.callApi(
        '/dcim/regions/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesCreate operation.
     * @callback module:api/DcimApi~dcimSitesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesCreate(writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesDelete operation.
     * @callback module:api/DcimApi~dcimSitesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimSitesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesGraphs operation.
     * @callback module:api/DcimApi~dcimSitesGraphsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A convenience method for rendering graphs for a particular site.
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesGraphsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesGraphs(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesGraphs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesList operation.
     * @callback module:api/DcimApi~dcimSitesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimSitesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [facility] 
     * @param {String} [asn] 
     * @param {String} [latitude] 
     * @param {String} [longitude] 
     * @param {String} [contactName] 
     * @param {String} [contactPhone] 
     * @param {String} [contactEmail] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [created] 
     * @param {String} [createdGte] 
     * @param {String} [createdLte] 
     * @param {String} [lastUpdated] 
     * @param {String} [lastUpdatedGte] 
     * @param {String} [lastUpdatedLte] 
     * @param {String} [q] 
     * @param {String} [status] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [facilityN] 
     * @param {String} [facilityIc] 
     * @param {String} [facilityNic] 
     * @param {String} [facilityIew] 
     * @param {String} [facilityNiew] 
     * @param {String} [facilityIsw] 
     * @param {String} [facilityNisw] 
     * @param {String} [facilityIe] 
     * @param {String} [facilityNie] 
     * @param {String} [asnN] 
     * @param {String} [asnLte] 
     * @param {String} [asnLt] 
     * @param {String} [asnGte] 
     * @param {String} [asnGt] 
     * @param {String} [latitudeN] 
     * @param {String} [latitudeLte] 
     * @param {String} [latitudeLt] 
     * @param {String} [latitudeGte] 
     * @param {String} [latitudeGt] 
     * @param {String} [longitudeN] 
     * @param {String} [longitudeLte] 
     * @param {String} [longitudeLt] 
     * @param {String} [longitudeGte] 
     * @param {String} [longitudeGt] 
     * @param {String} [contactNameN] 
     * @param {String} [contactNameIc] 
     * @param {String} [contactNameNic] 
     * @param {String} [contactNameIew] 
     * @param {String} [contactNameNiew] 
     * @param {String} [contactNameIsw] 
     * @param {String} [contactNameNisw] 
     * @param {String} [contactNameIe] 
     * @param {String} [contactNameNie] 
     * @param {String} [contactPhoneN] 
     * @param {String} [contactPhoneIc] 
     * @param {String} [contactPhoneNic] 
     * @param {String} [contactPhoneIew] 
     * @param {String} [contactPhoneNiew] 
     * @param {String} [contactPhoneIsw] 
     * @param {String} [contactPhoneNisw] 
     * @param {String} [contactPhoneIe] 
     * @param {String} [contactPhoneNie] 
     * @param {String} [contactEmailN] 
     * @param {String} [contactEmailIc] 
     * @param {String} [contactEmailNic] 
     * @param {String} [contactEmailIew] 
     * @param {String} [contactEmailNiew] 
     * @param {String} [contactEmailIsw] 
     * @param {String} [contactEmailNisw] 
     * @param {String} [contactEmailIe] 
     * @param {String} [contactEmailNie] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [statusN] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimSitesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimSitesList200Response}
     */
    dcimSitesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'facility': opts['facility'],
        'asn': opts['asn'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'contact_name': opts['contactName'],
        'contact_phone': opts['contactPhone'],
        'contact_email': opts['contactEmail'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'created': opts['created'],
        'created__gte': opts['createdGte'],
        'created__lte': opts['createdLte'],
        'last_updated': opts['lastUpdated'],
        'last_updated__gte': opts['lastUpdatedGte'],
        'last_updated__lte': opts['lastUpdatedLte'],
        'q': opts['q'],
        'status': opts['status'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'facility__n': opts['facilityN'],
        'facility__ic': opts['facilityIc'],
        'facility__nic': opts['facilityNic'],
        'facility__iew': opts['facilityIew'],
        'facility__niew': opts['facilityNiew'],
        'facility__isw': opts['facilityIsw'],
        'facility__nisw': opts['facilityNisw'],
        'facility__ie': opts['facilityIe'],
        'facility__nie': opts['facilityNie'],
        'asn__n': opts['asnN'],
        'asn__lte': opts['asnLte'],
        'asn__lt': opts['asnLt'],
        'asn__gte': opts['asnGte'],
        'asn__gt': opts['asnGt'],
        'latitude__n': opts['latitudeN'],
        'latitude__lte': opts['latitudeLte'],
        'latitude__lt': opts['latitudeLt'],
        'latitude__gte': opts['latitudeGte'],
        'latitude__gt': opts['latitudeGt'],
        'longitude__n': opts['longitudeN'],
        'longitude__lte': opts['longitudeLte'],
        'longitude__lt': opts['longitudeLt'],
        'longitude__gte': opts['longitudeGte'],
        'longitude__gt': opts['longitudeGt'],
        'contact_name__n': opts['contactNameN'],
        'contact_name__ic': opts['contactNameIc'],
        'contact_name__nic': opts['contactNameNic'],
        'contact_name__iew': opts['contactNameIew'],
        'contact_name__niew': opts['contactNameNiew'],
        'contact_name__isw': opts['contactNameIsw'],
        'contact_name__nisw': opts['contactNameNisw'],
        'contact_name__ie': opts['contactNameIe'],
        'contact_name__nie': opts['contactNameNie'],
        'contact_phone__n': opts['contactPhoneN'],
        'contact_phone__ic': opts['contactPhoneIc'],
        'contact_phone__nic': opts['contactPhoneNic'],
        'contact_phone__iew': opts['contactPhoneIew'],
        'contact_phone__niew': opts['contactPhoneNiew'],
        'contact_phone__isw': opts['contactPhoneIsw'],
        'contact_phone__nisw': opts['contactPhoneNisw'],
        'contact_phone__ie': opts['contactPhoneIe'],
        'contact_phone__nie': opts['contactPhoneNie'],
        'contact_email__n': opts['contactEmailN'],
        'contact_email__ic': opts['contactEmailIc'],
        'contact_email__nic': opts['contactEmailNic'],
        'contact_email__iew': opts['contactEmailIew'],
        'contact_email__niew': opts['contactEmailNiew'],
        'contact_email__isw': opts['contactEmailIsw'],
        'contact_email__nisw': opts['contactEmailNisw'],
        'contact_email__ie': opts['contactEmailIe'],
        'contact_email__nie': opts['contactEmailNie'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'status__n': opts['statusN'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimSitesList200Response;
      return this.apiClient.callApi(
        '/dcim/sites/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesPartialUpdate operation.
     * @callback module:api/DcimApi~dcimSitesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesPartialUpdate(id, writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesPartialUpdate");
      }
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesRead operation.
     * @callback module:api/DcimApi~dcimSitesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:api/DcimApi~dcimSitesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimSitesUpdate operation.
     * @callback module:api/DcimApi~dcimSitesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this site.
     * @param {module:model/WritableSite} writableSite 
     * @param {module:api/DcimApi~dcimSitesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    dcimSitesUpdate(id, writableSite, callback) {
      let postBody = writableSite;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimSitesUpdate");
      }
      // verify the required parameter 'writableSite' is set
      if (writableSite === undefined || writableSite === null) {
        throw new Error("Missing the required parameter 'writableSite' when calling dcimSitesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/dcim/sites/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisCreate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisCreate(writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisDelete operation.
     * @callback module:api/DcimApi~dcimVirtualChassisDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:api/DcimApi~dcimVirtualChassisDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dcimVirtualChassisDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisList operation.
     * @callback module:api/DcimApi~dcimVirtualChassisListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DcimVirtualChassisList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [domain] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [domainN] 
     * @param {String} [domainIc] 
     * @param {String} [domainNic] 
     * @param {String} [domainIew] 
     * @param {String} [domainNiew] 
     * @param {String} [domainIsw] 
     * @param {String} [domainNisw] 
     * @param {String} [domainIe] 
     * @param {String} [domainNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/DcimApi~dcimVirtualChassisListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DcimVirtualChassisList200Response}
     */
    dcimVirtualChassisList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'domain': opts['domain'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'domain__n': opts['domainN'],
        'domain__ic': opts['domainIc'],
        'domain__nic': opts['domainNic'],
        'domain__iew': opts['domainIew'],
        'domain__niew': opts['domainNiew'],
        'domain__isw': opts['domainIsw'],
        'domain__nisw': opts['domainNisw'],
        'domain__ie': opts['domainIe'],
        'domain__nie': opts['domainNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DcimVirtualChassisList200Response;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisPartialUpdate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisPartialUpdate(id, writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisPartialUpdate");
      }
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisRead operation.
     * @callback module:api/DcimApi~dcimVirtualChassisReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:api/DcimApi~dcimVirtualChassisReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dcimVirtualChassisUpdate operation.
     * @callback module:api/DcimApi~dcimVirtualChassisUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualChassis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this virtual chassis.
     * @param {module:model/WritableVirtualChassis} writableVirtualChassis 
     * @param {module:api/DcimApi~dcimVirtualChassisUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualChassis}
     */
    dcimVirtualChassisUpdate(id, writableVirtualChassis, callback) {
      let postBody = writableVirtualChassis;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dcimVirtualChassisUpdate");
      }
      // verify the required parameter 'writableVirtualChassis' is set
      if (writableVirtualChassis === undefined || writableVirtualChassis === null) {
        throw new Error("Missing the required parameter 'writableVirtualChassis' when calling dcimVirtualChassisUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualChassis;
      return this.apiClient.callApi(
        '/dcim/virtual-chassis/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
