/**
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 2.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigContext from '../model/ConfigContext';
import ExportTemplate from '../model/ExportTemplate';
import ExtrasConfigContextsList200Response from '../model/ExtrasConfigContextsList200Response';
import ExtrasExportTemplatesList200Response from '../model/ExtrasExportTemplatesList200Response';
import ExtrasGraphsList200Response from '../model/ExtrasGraphsList200Response';
import ExtrasImageAttachmentsList200Response from '../model/ExtrasImageAttachmentsList200Response';
import ExtrasObjectChangesList200Response from '../model/ExtrasObjectChangesList200Response';
import ExtrasTagsList200Response from '../model/ExtrasTagsList200Response';
import Graph from '../model/Graph';
import ImageAttachment from '../model/ImageAttachment';
import ObjectChange from '../model/ObjectChange';
import Tag from '../model/Tag';
import WritableConfigContext from '../model/WritableConfigContext';
import WritableExportTemplate from '../model/WritableExportTemplate';

/**
* Extras service.
* @module api/ExtrasApi
* @version 2.8
*/
export default class ExtrasApi {

    /**
    * Constructs a new ExtrasApi. 
    * @alias module:api/ExtrasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extrasConfigContextsCreate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsCreate(writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsDelete operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:api/ExtrasApi~extrasConfigContextsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasConfigContextsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsList operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasConfigContextsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [isActive] 
     * @param {String} [q] 
     * @param {String} [regionId] 
     * @param {String} [region] 
     * @param {String} [siteId] 
     * @param {String} [site] 
     * @param {String} [roleId] 
     * @param {String} [role] 
     * @param {String} [platformId] 
     * @param {String} [platform] 
     * @param {String} [clusterGroupId] 
     * @param {String} [clusterGroup] 
     * @param {String} [clusterId] 
     * @param {String} [tenantGroupId] 
     * @param {String} [tenantGroup] 
     * @param {String} [tenantId] 
     * @param {String} [tenant] 
     * @param {String} [tag] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [regionIdN] 
     * @param {String} [regionN] 
     * @param {String} [siteIdN] 
     * @param {String} [siteN] 
     * @param {String} [roleIdN] 
     * @param {String} [roleN] 
     * @param {String} [platformIdN] 
     * @param {String} [platformN] 
     * @param {String} [clusterGroupIdN] 
     * @param {String} [clusterGroupN] 
     * @param {String} [clusterIdN] 
     * @param {String} [tenantGroupIdN] 
     * @param {String} [tenantGroupN] 
     * @param {String} [tenantIdN] 
     * @param {String} [tenantN] 
     * @param {String} [tagN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasConfigContextsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasConfigContextsList200Response}
     */
    extrasConfigContextsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'is_active': opts['isActive'],
        'q': opts['q'],
        'region_id': opts['regionId'],
        'region': opts['region'],
        'site_id': opts['siteId'],
        'site': opts['site'],
        'role_id': opts['roleId'],
        'role': opts['role'],
        'platform_id': opts['platformId'],
        'platform': opts['platform'],
        'cluster_group_id': opts['clusterGroupId'],
        'cluster_group': opts['clusterGroup'],
        'cluster_id': opts['clusterId'],
        'tenant_group_id': opts['tenantGroupId'],
        'tenant_group': opts['tenantGroup'],
        'tenant_id': opts['tenantId'],
        'tenant': opts['tenant'],
        'tag': opts['tag'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'region_id__n': opts['regionIdN'],
        'region__n': opts['regionN'],
        'site_id__n': opts['siteIdN'],
        'site__n': opts['siteN'],
        'role_id__n': opts['roleIdN'],
        'role__n': opts['roleN'],
        'platform_id__n': opts['platformIdN'],
        'platform__n': opts['platformN'],
        'cluster_group_id__n': opts['clusterGroupIdN'],
        'cluster_group__n': opts['clusterGroupN'],
        'cluster_id__n': opts['clusterIdN'],
        'tenant_group_id__n': opts['tenantGroupIdN'],
        'tenant_group__n': opts['tenantGroupN'],
        'tenant_id__n': opts['tenantIdN'],
        'tenant__n': opts['tenantN'],
        'tag__n': opts['tagN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasConfigContextsList200Response;
      return this.apiClient.callApi(
        '/extras/config-contexts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsPartialUpdate(id, writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsPartialUpdate");
      }
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsRead operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:api/ExtrasApi~extrasConfigContextsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasConfigContextsUpdate operation.
     * @callback module:api/ExtrasApi~extrasConfigContextsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this config context.
     * @param {module:model/WritableConfigContext} writableConfigContext 
     * @param {module:api/ExtrasApi~extrasConfigContextsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigContext}
     */
    extrasConfigContextsUpdate(id, writableConfigContext, callback) {
      let postBody = writableConfigContext;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasConfigContextsUpdate");
      }
      // verify the required parameter 'writableConfigContext' is set
      if (writableConfigContext === undefined || writableConfigContext === null) {
        throw new Error("Missing the required parameter 'writableConfigContext' when calling extrasConfigContextsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigContext;
      return this.apiClient.callApi(
        '/extras/config-contexts/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasCustomFieldChoicesList operation.
     * @callback module:api/ExtrasApi~extrasCustomFieldChoicesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ExtrasApi~extrasCustomFieldChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasCustomFieldChoicesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/_custom_field_choices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasCustomFieldChoicesRead operation.
     * @callback module:api/ExtrasApi~extrasCustomFieldChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ExtrasApi~extrasCustomFieldChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasCustomFieldChoicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasCustomFieldChoicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/_custom_field_choices/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesCreate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/WritableExportTemplate} writableExportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesCreate(writableExportTemplate, callback) {
      let postBody = writableExportTemplate;
      // verify the required parameter 'writableExportTemplate' is set
      if (writableExportTemplate === undefined || writableExportTemplate === null) {
        throw new Error("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesDelete operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:api/ExtrasApi~extrasExportTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasExportTemplatesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesList operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasExportTemplatesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [contentType] 
     * @param {String} [name] 
     * @param {String} [templateLanguage] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [contentTypeN] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [templateLanguageN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasExportTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasExportTemplatesList200Response}
     */
    extrasExportTemplatesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'content_type': opts['contentType'],
        'name': opts['name'],
        'template_language': opts['templateLanguage'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'content_type__n': opts['contentTypeN'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'template_language__n': opts['templateLanguageN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasExportTemplatesList200Response;
      return this.apiClient.callApi(
        '/extras/export-templates/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:model/WritableExportTemplate} writableExportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesPartialUpdate(id, writableExportTemplate, callback) {
      let postBody = writableExportTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesPartialUpdate");
      }
      // verify the required parameter 'writableExportTemplate' is set
      if (writableExportTemplate === undefined || writableExportTemplate === null) {
        throw new Error("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesRead operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:api/ExtrasApi~extrasExportTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasExportTemplatesUpdate operation.
     * @callback module:api/ExtrasApi~extrasExportTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this export template.
     * @param {module:model/WritableExportTemplate} writableExportTemplate 
     * @param {module:api/ExtrasApi~extrasExportTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportTemplate}
     */
    extrasExportTemplatesUpdate(id, writableExportTemplate, callback) {
      let postBody = writableExportTemplate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasExportTemplatesUpdate");
      }
      // verify the required parameter 'writableExportTemplate' is set
      if (writableExportTemplate === undefined || writableExportTemplate === null) {
        throw new Error("Missing the required parameter 'writableExportTemplate' when calling extrasExportTemplatesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportTemplate;
      return this.apiClient.callApi(
        '/extras/export-templates/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsCreate operation.
     * @callback module:api/ExtrasApi~extrasGraphsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Graph} graph 
     * @param {module:api/ExtrasApi~extrasGraphsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsCreate(graph, callback) {
      let postBody = graph;
      // verify the required parameter 'graph' is set
      if (graph === undefined || graph === null) {
        throw new Error("Missing the required parameter 'graph' when calling extrasGraphsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsDelete operation.
     * @callback module:api/ExtrasApi~extrasGraphsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:api/ExtrasApi~extrasGraphsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasGraphsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsList operation.
     * @callback module:api/ExtrasApi~extrasGraphsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasGraphsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [type] 
     * @param {String} [name] 
     * @param {String} [templateLanguage] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [typeN] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [templateLanguageN] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasGraphsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasGraphsList200Response}
     */
    extrasGraphsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'type': opts['type'],
        'name': opts['name'],
        'template_language': opts['templateLanguage'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'type__n': opts['typeN'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'template_language__n': opts['templateLanguageN'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasGraphsList200Response;
      return this.apiClient.callApi(
        '/extras/graphs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasGraphsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:model/Graph} graph 
     * @param {module:api/ExtrasApi~extrasGraphsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsPartialUpdate(id, graph, callback) {
      let postBody = graph;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsPartialUpdate");
      }
      // verify the required parameter 'graph' is set
      if (graph === undefined || graph === null) {
        throw new Error("Missing the required parameter 'graph' when calling extrasGraphsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsRead operation.
     * @callback module:api/ExtrasApi~extrasGraphsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:api/ExtrasApi~extrasGraphsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasGraphsUpdate operation.
     * @callback module:api/ExtrasApi~extrasGraphsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Graph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this graph.
     * @param {module:model/Graph} graph 
     * @param {module:api/ExtrasApi~extrasGraphsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Graph}
     */
    extrasGraphsUpdate(id, graph, callback) {
      let postBody = graph;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasGraphsUpdate");
      }
      // verify the required parameter 'graph' is set
      if (graph === undefined || graph === null) {
        throw new Error("Missing the required parameter 'graph' when calling extrasGraphsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Graph;
      return this.apiClient.callApi(
        '/extras/graphs/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsCreate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsCreate(imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsDelete operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasImageAttachmentsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsList operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasImageAttachmentsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasImageAttachmentsList200Response}
     */
    extrasImageAttachmentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasImageAttachmentsList200Response;
      return this.apiClient.callApi(
        '/extras/image-attachments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsPartialUpdate(id, imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsPartialUpdate");
      }
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsRead operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:api/ExtrasApi~extrasImageAttachmentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasImageAttachmentsUpdate operation.
     * @callback module:api/ExtrasApi~extrasImageAttachmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this image attachment.
     * @param {module:model/ImageAttachment} imageAttachment 
     * @param {module:api/ExtrasApi~extrasImageAttachmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageAttachment}
     */
    extrasImageAttachmentsUpdate(id, imageAttachment, callback) {
      let postBody = imageAttachment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasImageAttachmentsUpdate");
      }
      // verify the required parameter 'imageAttachment' is set
      if (imageAttachment === undefined || imageAttachment === null) {
        throw new Error("Missing the required parameter 'imageAttachment' when calling extrasImageAttachmentsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageAttachment;
      return this.apiClient.callApi(
        '/extras/image-attachments/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasObjectChangesList operation.
     * @callback module:api/ExtrasApi~extrasObjectChangesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasObjectChangesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of recent changes.
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [user] 
     * @param {String} [userName] 
     * @param {String} [requestId] 
     * @param {String} [action] 
     * @param {String} [changedObjectType] 
     * @param {String} [changedObjectId] 
     * @param {String} [objectRepr] 
     * @param {String} [q] 
     * @param {String} [time] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [userN] 
     * @param {String} [userNameN] 
     * @param {String} [userNameIc] 
     * @param {String} [userNameNic] 
     * @param {String} [userNameIew] 
     * @param {String} [userNameNiew] 
     * @param {String} [userNameIsw] 
     * @param {String} [userNameNisw] 
     * @param {String} [userNameIe] 
     * @param {String} [userNameNie] 
     * @param {String} [actionN] 
     * @param {String} [changedObjectTypeN] 
     * @param {String} [changedObjectIdN] 
     * @param {String} [changedObjectIdLte] 
     * @param {String} [changedObjectIdLt] 
     * @param {String} [changedObjectIdGte] 
     * @param {String} [changedObjectIdGt] 
     * @param {String} [objectReprN] 
     * @param {String} [objectReprIc] 
     * @param {String} [objectReprNic] 
     * @param {String} [objectReprIew] 
     * @param {String} [objectReprNiew] 
     * @param {String} [objectReprIsw] 
     * @param {String} [objectReprNisw] 
     * @param {String} [objectReprIe] 
     * @param {String} [objectReprNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasObjectChangesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasObjectChangesList200Response}
     */
    extrasObjectChangesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'user': opts['user'],
        'user_name': opts['userName'],
        'request_id': opts['requestId'],
        'action': opts['action'],
        'changed_object_type': opts['changedObjectType'],
        'changed_object_id': opts['changedObjectId'],
        'object_repr': opts['objectRepr'],
        'q': opts['q'],
        'time': opts['time'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'user__n': opts['userN'],
        'user_name__n': opts['userNameN'],
        'user_name__ic': opts['userNameIc'],
        'user_name__nic': opts['userNameNic'],
        'user_name__iew': opts['userNameIew'],
        'user_name__niew': opts['userNameNiew'],
        'user_name__isw': opts['userNameIsw'],
        'user_name__nisw': opts['userNameNisw'],
        'user_name__ie': opts['userNameIe'],
        'user_name__nie': opts['userNameNie'],
        'action__n': opts['actionN'],
        'changed_object_type__n': opts['changedObjectTypeN'],
        'changed_object_id__n': opts['changedObjectIdN'],
        'changed_object_id__lte': opts['changedObjectIdLte'],
        'changed_object_id__lt': opts['changedObjectIdLt'],
        'changed_object_id__gte': opts['changedObjectIdGte'],
        'changed_object_id__gt': opts['changedObjectIdGt'],
        'object_repr__n': opts['objectReprN'],
        'object_repr__ic': opts['objectReprIc'],
        'object_repr__nic': opts['objectReprNic'],
        'object_repr__iew': opts['objectReprIew'],
        'object_repr__niew': opts['objectReprNiew'],
        'object_repr__isw': opts['objectReprIsw'],
        'object_repr__nisw': opts['objectReprNisw'],
        'object_repr__ie': opts['objectReprIe'],
        'object_repr__nie': opts['objectReprNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasObjectChangesList200Response;
      return this.apiClient.callApi(
        '/extras/object-changes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasObjectChangesRead operation.
     * @callback module:api/ExtrasApi~extrasObjectChangesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of recent changes.
     * @param {Number} id A unique integer value identifying this object change.
     * @param {module:api/ExtrasApi~extrasObjectChangesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectChange}
     */
    extrasObjectChangesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasObjectChangesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectChange;
      return this.apiClient.callApi(
        '/extras/object-changes/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasReportsList operation.
     * @callback module:api/ExtrasApi~extrasReportsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     * @param {module:api/ExtrasApi~extrasReportsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasReportsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/reports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasReportsRead operation.
     * @callback module:api/ExtrasApi~extrasReportsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single Report identified as \"<module>.<report>\".
     * @param {String} id 
     * @param {module:api/ExtrasApi~extrasReportsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasReportsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasReportsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/reports/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasReportsRun operation.
     * @callback module:api/ExtrasApi~extrasReportsRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     * @param {String} id 
     * @param {module:api/ExtrasApi~extrasReportsRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasReportsRun(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasReportsRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/reports/{id}/run/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasScriptsList operation.
     * @callback module:api/ExtrasApi~extrasScriptsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ExtrasApi~extrasScriptsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasScriptsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/scripts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasScriptsRead operation.
     * @callback module:api/ExtrasApi~extrasScriptsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ExtrasApi~extrasScriptsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasScriptsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasScriptsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/scripts/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsCreate operation.
     * @callback module:api/ExtrasApi~extrasTagsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsCreate(tag, callback) {
      let postBody = tag;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsDelete operation.
     * @callback module:api/ExtrasApi~extrasTagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tag.
     * @param {module:api/ExtrasApi~extrasTagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extrasTagsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsList operation.
     * @callback module:api/ExtrasApi~extrasTagsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtrasTagsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {String} [slug] 
     * @param {String} [color] 
     * @param {String} [q] 
     * @param {String} [idN] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [nameN] 
     * @param {String} [nameIc] 
     * @param {String} [nameNic] 
     * @param {String} [nameIew] 
     * @param {String} [nameNiew] 
     * @param {String} [nameIsw] 
     * @param {String} [nameNisw] 
     * @param {String} [nameIe] 
     * @param {String} [nameNie] 
     * @param {String} [slugN] 
     * @param {String} [slugIc] 
     * @param {String} [slugNic] 
     * @param {String} [slugIew] 
     * @param {String} [slugNiew] 
     * @param {String} [slugIsw] 
     * @param {String} [slugNisw] 
     * @param {String} [slugIe] 
     * @param {String} [slugNie] 
     * @param {String} [colorN] 
     * @param {String} [colorIc] 
     * @param {String} [colorNic] 
     * @param {String} [colorIew] 
     * @param {String} [colorNiew] 
     * @param {String} [colorIsw] 
     * @param {String} [colorNisw] 
     * @param {String} [colorIe] 
     * @param {String} [colorNie] 
     * @param {Number} [limit] Number of results to return per page.
     * @param {Number} [offset] The initial index from which to return the results.
     * @param {module:api/ExtrasApi~extrasTagsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtrasTagsList200Response}
     */
    extrasTagsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'name': opts['name'],
        'slug': opts['slug'],
        'color': opts['color'],
        'q': opts['q'],
        'id__n': opts['idN'],
        'id__lte': opts['idLte'],
        'id__lt': opts['idLt'],
        'id__gte': opts['idGte'],
        'id__gt': opts['idGt'],
        'name__n': opts['nameN'],
        'name__ic': opts['nameIc'],
        'name__nic': opts['nameNic'],
        'name__iew': opts['nameIew'],
        'name__niew': opts['nameNiew'],
        'name__isw': opts['nameIsw'],
        'name__nisw': opts['nameNisw'],
        'name__ie': opts['nameIe'],
        'name__nie': opts['nameNie'],
        'slug__n': opts['slugN'],
        'slug__ic': opts['slugIc'],
        'slug__nic': opts['slugNic'],
        'slug__iew': opts['slugIew'],
        'slug__niew': opts['slugNiew'],
        'slug__isw': opts['slugIsw'],
        'slug__nisw': opts['slugNisw'],
        'slug__ie': opts['slugIe'],
        'slug__nie': opts['slugNie'],
        'color__n': opts['colorN'],
        'color__ic': opts['colorIc'],
        'color__nic': opts['colorNic'],
        'color__iew': opts['colorIew'],
        'color__niew': opts['colorNiew'],
        'color__isw': opts['colorIsw'],
        'color__nisw': opts['colorNisw'],
        'color__ie': opts['colorIe'],
        'color__nie': opts['colorNie'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtrasTagsList200Response;
      return this.apiClient.callApi(
        '/extras/tags/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsPartialUpdate operation.
     * @callback module:api/ExtrasApi~extrasTagsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tag.
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsPartialUpdate(id, tag, callback) {
      let postBody = tag;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsPartialUpdate");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsRead operation.
     * @callback module:api/ExtrasApi~extrasTagsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Call to super to allow for caching
     * @param {Number} id A unique integer value identifying this tag.
     * @param {module:api/ExtrasApi~extrasTagsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extrasTagsUpdate operation.
     * @callback module:api/ExtrasApi~extrasTagsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this tag.
     * @param {module:model/Tag} tag 
     * @param {module:api/ExtrasApi~extrasTagsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    extrasTagsUpdate(id, tag, callback) {
      let postBody = tag;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling extrasTagsUpdate");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling extrasTagsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/extras/tags/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
