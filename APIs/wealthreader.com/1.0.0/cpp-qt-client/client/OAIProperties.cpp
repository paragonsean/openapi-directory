/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperties::OAIProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperties::OAIProperties() {
    this->initializeModel();
}

OAIProperties::~OAIProperties() {}

void OAIProperties::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_historic_prices_isSet = false;
    m_historic_prices_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_trading_price_isSet = false;
    m_trading_price_isValid = false;

    m_trading_year_isSet = false;
    m_trading_year_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperties::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_historic_prices_isValid = ::OpenAPI::fromJsonValue(m_historic_prices, json[QString("historic_prices")]);
    m_historic_prices_isSet = !json[QString("historic_prices")].isNull() && m_historic_prices_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_trading_price_isValid = ::OpenAPI::fromJsonValue(m_trading_price, json[QString("trading_price")]);
    m_trading_price_isSet = !json[QString("trading_price")].isNull() && m_trading_price_isValid;

    m_trading_year_isValid = ::OpenAPI::fromJsonValue(m_trading_year, json[QString("trading_year")]);
    m_trading_year_isSet = !json[QString("trading_year")].isNull() && m_trading_year_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_historic_prices.size() > 0) {
        obj.insert(QString("historic_prices"), ::OpenAPI::toJsonValue(m_historic_prices));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_trading_price_isSet) {
        obj.insert(QString("trading_price"), ::OpenAPI::toJsonValue(m_trading_price));
    }
    if (m_trading_year_isSet) {
        obj.insert(QString("trading_year"), ::OpenAPI::toJsonValue(m_trading_year));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIProperties::getCode() const {
    return m_code;
}
void OAIProperties::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProperties::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProperties::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIProperties::getCurrency() const {
    return m_currency;
}
void OAIProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIProperties::getDescription() const {
    return m_description;
}
void OAIProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProperties::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIProperties_historic_prices_inner> OAIProperties::getHistoricPrices() const {
    return m_historic_prices;
}
void OAIProperties::setHistoricPrices(const QList<OAIProperties_historic_prices_inner> &historic_prices) {
    m_historic_prices = historic_prices;
    m_historic_prices_isSet = true;
}

bool OAIProperties::is_historic_prices_Set() const{
    return m_historic_prices_isSet;
}

bool OAIProperties::is_historic_prices_Valid() const{
    return m_historic_prices_isValid;
}

QString OAIProperties::getPurpose() const {
    return m_purpose;
}
void OAIProperties::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIProperties::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIProperties::is_purpose_Valid() const{
    return m_purpose_isValid;
}

double OAIProperties::getTradingPrice() const {
    return m_trading_price;
}
void OAIProperties::setTradingPrice(const double &trading_price) {
    m_trading_price = trading_price;
    m_trading_price_isSet = true;
}

bool OAIProperties::is_trading_price_Set() const{
    return m_trading_price_isSet;
}

bool OAIProperties::is_trading_price_Valid() const{
    return m_trading_price_isValid;
}

double OAIProperties::getTradingYear() const {
    return m_trading_year;
}
void OAIProperties::setTradingYear(const double &trading_year) {
    m_trading_year = trading_year;
    m_trading_year_isSet = true;
}

bool OAIProperties::is_trading_year_Set() const{
    return m_trading_year_isSet;
}

bool OAIProperties::is_trading_year_Valid() const{
    return m_trading_year_isValid;
}

QString OAIProperties::getUuid() const {
    return m_uuid;
}
void OAIProperties::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIProperties::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIProperties::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_historic_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_currency_isValid && m_historic_prices_isValid && m_trading_price_isValid && m_trading_year_isValid && m_uuid_isValid && true;
}

} // namespace OpenAPI
