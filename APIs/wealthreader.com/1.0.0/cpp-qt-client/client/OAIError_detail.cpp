/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_detail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_detail::OAIError_detail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_detail::OAIError_detail() {
    this->initializeModel();
}

OAIError_detail::~OAIError_detail() {}

void OAIError_detail::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_contracts_isSet = false;
    m_contracts_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIError_detail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_detail::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_contracts_isValid = ::OpenAPI::fromJsonValue(m_contracts, json[QString("contracts")]);
    m_contracts_isSet = !json[QString("contracts")].isNull() && m_contracts_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIError_detail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_detail::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_contracts.size() > 0) {
        obj.insert(QString("contracts"), ::OpenAPI::toJsonValue(m_contracts));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAIError_detail::getCode() const {
    return m_code;
}
void OAIError_detail::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError_detail::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError_detail::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIObject> OAIError_detail::getContracts() const {
    return m_contracts;
}
void OAIError_detail::setContracts(const QList<OAIObject> &contracts) {
    m_contracts = contracts;
    m_contracts_isSet = true;
}

bool OAIError_detail::is_contracts_Set() const{
    return m_contracts_isSet;
}

bool OAIError_detail::is_contracts_Valid() const{
    return m_contracts_isValid;
}

QString OAIError_detail::getMessage() const {
    return m_message;
}
void OAIError_detail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError_detail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError_detail::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIError_detail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contracts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_detail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
