/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_information.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_information::OAIUser_information(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_information::OAIUser_information() {
    this->initializeModel();
}

OAIUser_information::~OAIUser_information() {}

void OAIUser_information::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_birth_place_isSet = false;
    m_birth_place_isValid = false;

    m_cell_phone_isSet = false;
    m_cell_phone_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_marital_status_isSet = false;
    m_marital_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIUser_information::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_information::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birth_date")]);
    m_birth_date_isSet = !json[QString("birth_date")].isNull() && m_birth_date_isValid;

    m_birth_place_isValid = ::OpenAPI::fromJsonValue(m_birth_place, json[QString("birth_place")]);
    m_birth_place_isSet = !json[QString("birth_place")].isNull() && m_birth_place_isValid;

    m_cell_phone_isValid = ::OpenAPI::fromJsonValue(m_cell_phone, json[QString("cell_phone")]);
    m_cell_phone_isSet = !json[QString("cell_phone")].isNull() && m_cell_phone_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_marital_status_isValid = ::OpenAPI::fromJsonValue(m_marital_status, json[QString("marital_status")]);
    m_marital_status_isSet = !json[QString("marital_status")].isNull() && m_marital_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;
}

QString OAIUser_information::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_information::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("birth_date"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_birth_place_isSet) {
        obj.insert(QString("birth_place"), ::OpenAPI::toJsonValue(m_birth_place));
    }
    if (m_cell_phone_isSet) {
        obj.insert(QString("cell_phone"), ::OpenAPI::toJsonValue(m_cell_phone));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_job_isSet) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_marital_status_isSet) {
        obj.insert(QString("marital_status"), ::OpenAPI::toJsonValue(m_marital_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIUser_information::getId() const {
    return m_id;
}
void OAIUser_information::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser_information::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser_information::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser_information::getAddress() const {
    return m_address;
}
void OAIUser_information::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUser_information::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUser_information::is_address_Valid() const{
    return m_address_isValid;
}

QDate OAIUser_information::getBirthDate() const {
    return m_birth_date;
}
void OAIUser_information::setBirthDate(const QDate &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIUser_information::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIUser_information::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIUser_information::getBirthPlace() const {
    return m_birth_place;
}
void OAIUser_information::setBirthPlace(const QString &birth_place) {
    m_birth_place = birth_place;
    m_birth_place_isSet = true;
}

bool OAIUser_information::is_birth_place_Set() const{
    return m_birth_place_isSet;
}

bool OAIUser_information::is_birth_place_Valid() const{
    return m_birth_place_isValid;
}

QString OAIUser_information::getCellPhone() const {
    return m_cell_phone;
}
void OAIUser_information::setCellPhone(const QString &cell_phone) {
    m_cell_phone = cell_phone;
    m_cell_phone_isSet = true;
}

bool OAIUser_information::is_cell_phone_Set() const{
    return m_cell_phone_isSet;
}

bool OAIUser_information::is_cell_phone_Valid() const{
    return m_cell_phone_isValid;
}

QString OAIUser_information::getCity() const {
    return m_city;
}
void OAIUser_information::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUser_information::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUser_information::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUser_information::getCountry() const {
    return m_country;
}
void OAIUser_information::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUser_information::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUser_information::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIUser_information::getEmail() const {
    return m_email;
}
void OAIUser_information::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser_information::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser_information::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser_information::getGender() const {
    return m_gender;
}
void OAIUser_information::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIUser_information::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIUser_information::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIUser_information::getJob() const {
    return m_job;
}
void OAIUser_information::setJob(const QString &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIUser_information::is_job_Set() const{
    return m_job_isSet;
}

bool OAIUser_information::is_job_Valid() const{
    return m_job_isValid;
}

QString OAIUser_information::getMaritalStatus() const {
    return m_marital_status;
}
void OAIUser_information::setMaritalStatus(const QString &marital_status) {
    m_marital_status = marital_status;
    m_marital_status_isSet = true;
}

bool OAIUser_information::is_marital_status_Set() const{
    return m_marital_status_isSet;
}

bool OAIUser_information::is_marital_status_Valid() const{
    return m_marital_status_isValid;
}

QString OAIUser_information::getName() const {
    return m_name;
}
void OAIUser_information::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser_information::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser_information::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser_information::getPostalCode() const {
    return m_postal_code;
}
void OAIUser_information::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIUser_information::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIUser_information::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIUser_information::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marital_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_information::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
