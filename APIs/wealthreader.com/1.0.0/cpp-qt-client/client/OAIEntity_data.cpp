/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity_data::OAIEntity_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity_data::OAIEntity_data() {
    this->initializeModel();
}

OAIEntity_data::~OAIEntity_data() {}

void OAIEntity_data::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_portfolios_isSet = false;
    m_portfolios_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_cards_isSet = false;
    m_cards_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIEntity_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity_data::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_portfolios_isValid = ::OpenAPI::fromJsonValue(m_portfolios, json[QString("portfolios")]);
    m_portfolios_isSet = !json[QString("portfolios")].isNull() && m_portfolios_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIEntity_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity_data::asJsonObject() const {
    QJsonObject obj;
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_portfolios.size() > 0) {
        obj.insert(QString("portfolios"), ::OpenAPI::toJsonValue(m_portfolios));
    }
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_cards.size() > 0) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIObject OAIEntity_data::getPayload() const {
    return m_payload;
}
void OAIEntity_data::setPayload(const OAIObject &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIEntity_data::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIEntity_data::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIStatistics OAIEntity_data::getStatistics() const {
    return m_statistics;
}
void OAIEntity_data::setStatistics(const OAIStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIEntity_data::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIEntity_data::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIEntity_data::isSuccess() const {
    return m_success;
}
void OAIEntity_data::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIEntity_data::is_success_Set() const{
    return m_success_isSet;
}

bool OAIEntity_data::is_success_Valid() const{
    return m_success_isValid;
}

QList<OAIObject> OAIEntity_data::getPortfolios() const {
    return m_portfolios;
}
void OAIEntity_data::setPortfolios(const QList<OAIObject> &portfolios) {
    m_portfolios = portfolios;
    m_portfolios_isSet = true;
}

bool OAIEntity_data::is_portfolios_Set() const{
    return m_portfolios_isSet;
}

bool OAIEntity_data::is_portfolios_Valid() const{
    return m_portfolios_isValid;
}

QList<OAIObject> OAIEntity_data::getAccounts() const {
    return m_accounts;
}
void OAIEntity_data::setAccounts(const QList<OAIObject> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIEntity_data::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIEntity_data::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QList<OAIObject> OAIEntity_data::getCards() const {
    return m_cards;
}
void OAIEntity_data::setCards(const QList<OAIObject> &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAIEntity_data::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAIEntity_data::is_cards_Valid() const{
    return m_cards_isValid;
}

QList<OAIObject> OAIEntity_data::getProperties() const {
    return m_properties;
}
void OAIEntity_data::setProperties(const QList<OAIObject> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIEntity_data::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIEntity_data::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIEntity_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_statistics_isValid && m_success_isValid && true;
}

} // namespace OpenAPI
