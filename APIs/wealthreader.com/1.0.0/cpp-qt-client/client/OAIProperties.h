/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProperties.h
 *
 * Activos inmobiliarios
 */

#ifndef OAIProperties_H
#define OAIProperties_H

#include <QJsonObject>

#include "OAIProperties_historic_prices_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProperties_historic_prices_inner;

class OAIProperties : public OAIObject {
public:
    OAIProperties();
    OAIProperties(QString json);
    ~OAIProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIProperties_historic_prices_inner> getHistoricPrices() const;
    void setHistoricPrices(const QList<OAIProperties_historic_prices_inner> &historic_prices);
    bool is_historic_prices_Set() const;
    bool is_historic_prices_Valid() const;

    QString getPurpose() const;
    void setPurpose(const QString &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    double getTradingPrice() const;
    void setTradingPrice(const double &trading_price);
    bool is_trading_price_Set() const;
    bool is_trading_price_Valid() const;

    double getTradingYear() const;
    void setTradingYear(const double &trading_year);
    bool is_trading_year_Set() const;
    bool is_trading_year_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIProperties_historic_prices_inner> m_historic_prices;
    bool m_historic_prices_isSet;
    bool m_historic_prices_isValid;

    QString m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    double m_trading_price;
    bool m_trading_price_isSet;
    bool m_trading_price_isValid;

    double m_trading_year;
    bool m_trading_year_isSet;
    bool m_trading_year_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProperties)

#endif // OAIProperties_H
