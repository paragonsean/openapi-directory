/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser_information.h
 *
 * Información relativa a la persona que hace login
 */

#ifndef OAIUser_information_H
#define OAIUser_information_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser_information : public OAIObject {
public:
    OAIUser_information();
    OAIUser_information(QString json);
    ~OAIUser_information() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QDate getBirthDate() const;
    void setBirthDate(const QDate &birth_date);
    bool is_birth_date_Set() const;
    bool is_birth_date_Valid() const;

    QString getBirthPlace() const;
    void setBirthPlace(const QString &birth_place);
    bool is_birth_place_Set() const;
    bool is_birth_place_Valid() const;

    QString getCellPhone() const;
    void setCellPhone(const QString &cell_phone);
    bool is_cell_phone_Set() const;
    bool is_cell_phone_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getGender() const;
    void setGender(const QString &gender);
    bool is_gender_Set() const;
    bool is_gender_Valid() const;

    QString getJob() const;
    void setJob(const QString &job);
    bool is_job_Set() const;
    bool is_job_Valid() const;

    QString getMaritalStatus() const;
    void setMaritalStatus(const QString &marital_status);
    bool is_marital_status_Set() const;
    bool is_marital_status_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QDate m_birth_date;
    bool m_birth_date_isSet;
    bool m_birth_date_isValid;

    QString m_birth_place;
    bool m_birth_place_isSet;
    bool m_birth_place_isValid;

    QString m_cell_phone;
    bool m_cell_phone_isSet;
    bool m_cell_phone_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_gender;
    bool m_gender_isSet;
    bool m_gender_isValid;

    QString m_job;
    bool m_job_isSet;
    bool m_job_isValid;

    QString m_marital_status;
    bool m_marital_status_isSet;
    bool m_marital_status_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser_information)

#endif // OAIUser_information_H
