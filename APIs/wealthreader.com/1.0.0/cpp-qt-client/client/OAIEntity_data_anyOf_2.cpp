/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity_data_anyOf_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity_data_anyOf_2::OAIEntity_data_anyOf_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity_data_anyOf_2::OAIEntity_data_anyOf_2() {
    this->initializeModel();
}

OAIEntity_data_anyOf_2::~OAIEntity_data_anyOf_2() {}

void OAIEntity_data_anyOf_2::initializeModel() {

    m_cards_isSet = false;
    m_cards_isValid = false;
}

void OAIEntity_data_anyOf_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity_data_anyOf_2::fromJsonObject(QJsonObject json) {

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;
}

QString OAIEntity_data_anyOf_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity_data_anyOf_2::asJsonObject() const {
    QJsonObject obj;
    if (m_cards.size() > 0) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    return obj;
}

QList<QJsonValue> OAIEntity_data_anyOf_2::getCards() const {
    return m_cards;
}
void OAIEntity_data_anyOf_2::setCards(const QList<QJsonValue> &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAIEntity_data_anyOf_2::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAIEntity_data_anyOf_2::is_cards_Valid() const{
    return m_cards_isValid;
}

bool OAIEntity_data_anyOf_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity_data_anyOf_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
