/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperties_historic_prices_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperties_historic_prices_inner::OAIProperties_historic_prices_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperties_historic_prices_inner::OAIProperties_historic_prices_inner() {
    this->initializeModel();
}

OAIProperties_historic_prices_inner::~OAIProperties_historic_prices_inner() {}

void OAIProperties_historic_prices_inner::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAIProperties_historic_prices_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperties_historic_prices_inner::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAIProperties_historic_prices_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperties_historic_prices_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

QDate OAIProperties_historic_prices_inner::getDate() const {
    return m_date;
}
void OAIProperties_historic_prices_inner::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIProperties_historic_prices_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAIProperties_historic_prices_inner::is_date_Valid() const{
    return m_date_isValid;
}

double OAIProperties_historic_prices_inner::getPrice() const {
    return m_price;
}
void OAIProperties_historic_prices_inner::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProperties_historic_prices_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProperties_historic_prices_inner::is_price_Valid() const{
    return m_price_isValid;
}

bool OAIProperties_historic_prices_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperties_historic_prices_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
