/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntity_data.h
 *
 * 
 */

#ifndef OAIEntity_data_H
#define OAIEntity_data_H

#include <QJsonObject>

#include "OAIEntity_data_anyOf.h"
#include "OAIEntity_data_anyOf_1.h"
#include "OAIEntity_data_anyOf_2.h"
#include "OAIEntity_data_anyOf_3.h"
#include "OAIObject.h"
#include "OAIProperties.h"
#include "OAIStatistics.h"
#include "OAIUser_information.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatistics;

class OAIEntity_data : public OAIObject {
public:
    OAIEntity_data();
    OAIEntity_data(QString json);
    ~OAIEntity_data() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getPayload() const;
    void setPayload(const OAIObject &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    OAIStatistics getStatistics() const;
    void setStatistics(const OAIStatistics &statistics);
    bool is_statistics_Set() const;
    bool is_statistics_Valid() const;

    bool isSuccess() const;
    void setSuccess(const bool &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    QList<OAIObject> getPortfolios() const;
    void setPortfolios(const QList<OAIObject> &portfolios);
    bool is_portfolios_Set() const;
    bool is_portfolios_Valid() const;

    QList<OAIObject> getAccounts() const;
    void setAccounts(const QList<OAIObject> &accounts);
    bool is_accounts_Set() const;
    bool is_accounts_Valid() const;

    QList<OAIObject> getCards() const;
    void setCards(const QList<OAIObject> &cards);
    bool is_cards_Set() const;
    bool is_cards_Valid() const;

    QList<OAIObject> getProperties() const;
    void setProperties(const QList<OAIObject> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;

    OAIStatistics m_statistics;
    bool m_statistics_isSet;
    bool m_statistics_isValid;

    bool m_success;
    bool m_success_isSet;
    bool m_success_isValid;

    QList<OAIObject> m_portfolios;
    bool m_portfolios_isSet;
    bool m_portfolios_isValid;

    QList<OAIObject> m_accounts;
    bool m_accounts_isSet;
    bool m_accounts_isValid;

    QList<OAIObject> m_cards;
    bool m_cards_isSet;
    bool m_cards_isValid;

    QList<OAIObject> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntity_data)

#endif // OAIEntity_data_H
