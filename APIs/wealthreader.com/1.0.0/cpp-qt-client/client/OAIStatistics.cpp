/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_session_isSet = false;
    m_session_isValid = false;

    m_execution_time_isSet = false;
    m_execution_time_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("SESSION")]);
    m_session_isSet = !json[QString("SESSION")].isNull() && m_session_isValid;

    m_execution_time_isValid = ::OpenAPI::fromJsonValue(m_execution_time, json[QString("execution_time")]);
    m_execution_time_isSet = !json[QString("execution_time")].isNull() && m_execution_time_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operation_id")]);
    m_operation_id_isSet = !json[QString("operation_id")].isNull() && m_operation_id_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_session_isSet) {
        obj.insert(QString("SESSION"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_execution_time_isSet) {
        obj.insert(QString("execution_time"), ::OpenAPI::toJsonValue(m_execution_time));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operation_id"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIStatistics::getSession() const {
    return m_session;
}
void OAIStatistics::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIStatistics::is_session_Set() const{
    return m_session_isSet;
}

bool OAIStatistics::is_session_Valid() const{
    return m_session_isValid;
}

double OAIStatistics::getExecutionTime() const {
    return m_execution_time;
}
void OAIStatistics::setExecutionTime(const double &execution_time) {
    m_execution_time = execution_time;
    m_execution_time_isSet = true;
}

bool OAIStatistics::is_execution_time_Set() const{
    return m_execution_time_isSet;
}

bool OAIStatistics::is_execution_time_Valid() const{
    return m_execution_time_isValid;
}

QString OAIStatistics::getOperationId() const {
    return m_operation_id;
}
void OAIStatistics::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIStatistics::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIStatistics::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIStatistics::getToken() const {
    return m_token;
}
void OAIStatistics::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIStatistics::is_token_Set() const{
    return m_token_isSet;
}

bool OAIStatistics::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_session_isValid && m_execution_time_isValid && true;
}

} // namespace OpenAPI
