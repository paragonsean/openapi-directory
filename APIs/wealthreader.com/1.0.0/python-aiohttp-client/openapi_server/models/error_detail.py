# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, contracts: List[object]=None, message: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param code: The code of this ErrorDetail.
        :param contracts: The contracts of this ErrorDetail.
        :param message: The message of this ErrorDetail.
        """
        self.openapi_types = {
            'code': int,
            'contracts': List[object],
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'contracts': 'contracts',
            'message': 'message'
        }

        self._code = code
        self._contracts = contracts
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error-detail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorDetail.

        El código indica la familia del error. Por ejemplo, de 2000 a 2999 indican problemas en el login. Cada código de error debe tratarse de forma diferente. Por ejemplo, si el código indica \"Login incorrecto\", no se debe reintentar la llamada; si el código indica \"entidad en mantenimiento\" sí se puede reintentar más tarde. Puedes obtener el listado completo en el método error-codes.

        :return: The code of this ErrorDetail.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorDetail.

        El código indica la familia del error. Por ejemplo, de 2000 a 2999 indican problemas en el login. Cada código de error debe tratarse de forma diferente. Por ejemplo, si el código indica \"Login incorrecto\", no se debe reintentar la llamada; si el código indica \"entidad en mantenimiento\" sí se puede reintentar más tarde. Puedes obtener el listado completo en el método error-codes.

        :param code: The code of this ErrorDetail.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def contracts(self):
        """Gets the contracts of this ErrorDetail.

        Solamente estará informado cuando el valor de code sea 2020 (usuario multicontrato)

        :return: The contracts of this ErrorDetail.
        :rtype: List[object]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this ErrorDetail.

        Solamente estará informado cuando el valor de code sea 2020 (usuario multicontrato)

        :param contracts: The contracts of this ErrorDetail.
        :type contracts: List[object]
        """

        self._contracts = contracts

    @property
    def message(self):
        """Gets the message of this ErrorDetail.

        Texto en el idioma de la entidad. Es seguro mostrárselo al usuario y en muchos casos le ayudará a corregir el error

        :return: The message of this ErrorDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorDetail.

        Texto en el idioma de la entidad. Es seguro mostrárselo al usuario y en muchos casos le ayudará a corregir el error

        :param message: The message of this ErrorDetail.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
