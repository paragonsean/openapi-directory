# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_data_any_of import EntityDataAnyOf
from openapi_server.models.entity_data_any_of1 import EntityDataAnyOf1
from openapi_server.models.entity_data_any_of2 import EntityDataAnyOf2
from openapi_server.models.entity_data_any_of3 import EntityDataAnyOf3
from openapi_server.models.properties import Properties
from openapi_server.models.statistics import Statistics
from openapi_server.models.user_information import UserInformation
from openapi_server import util


class EntityData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload: object=None, statistics: Statistics=None, success: bool=None, portfolios: List[object]=None, accounts: List[object]=None, cards: List[object]=None, properties: List[object]=None):
        """EntityData - a model defined in OpenAPI

        :param payload: The payload of this EntityData.
        :param statistics: The statistics of this EntityData.
        :param success: The success of this EntityData.
        :param portfolios: The portfolios of this EntityData.
        :param accounts: The accounts of this EntityData.
        :param cards: The cards of this EntityData.
        :param properties: The properties of this EntityData.
        """
        self.openapi_types = {
            'payload': object,
            'statistics': Statistics,
            'success': bool,
            'portfolios': List[object],
            'accounts': List[object],
            'cards': List[object],
            'properties': List[object]
        }

        self.attribute_map = {
            'payload': 'payload',
            'statistics': 'statistics',
            'success': 'success',
            'portfolios': 'portfolios',
            'accounts': 'accounts',
            'cards': 'cards',
            'properties': 'properties'
        }

        self._payload = payload
        self._statistics = statistics
        self._success = success
        self._portfolios = portfolios
        self._accounts = accounts
        self._cards = cards
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The entity-data of this EntityData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self):
        """Gets the payload of this EntityData.


        :return: The payload of this EntityData.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this EntityData.


        :param payload: The payload of this EntityData.
        :type payload: object
        """

        self._payload = payload

    @property
    def statistics(self):
        """Gets the statistics of this EntityData.


        :return: The statistics of this EntityData.
        :rtype: Statistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this EntityData.


        :param statistics: The statistics of this EntityData.
        :type statistics: Statistics
        """
        if statistics is None:
            raise ValueError("Invalid value for `statistics`, must not be `None`")

        self._statistics = statistics

    @property
    def success(self):
        """Gets the success of this EntityData.


        :return: The success of this EntityData.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EntityData.


        :param success: The success of this EntityData.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def portfolios(self):
        """Gets the portfolios of this EntityData.


        :return: The portfolios of this EntityData.
        :rtype: List[object]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this EntityData.


        :param portfolios: The portfolios of this EntityData.
        :type portfolios: List[object]
        """

        self._portfolios = portfolios

    @property
    def accounts(self):
        """Gets the accounts of this EntityData.


        :return: The accounts of this EntityData.
        :rtype: List[object]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this EntityData.


        :param accounts: The accounts of this EntityData.
        :type accounts: List[object]
        """

        self._accounts = accounts

    @property
    def cards(self):
        """Gets the cards of this EntityData.


        :return: The cards of this EntityData.
        :rtype: List[object]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this EntityData.


        :param cards: The cards of this EntityData.
        :type cards: List[object]
        """

        self._cards = cards

    @property
    def properties(self):
        """Gets the properties of this EntityData.


        :return: The properties of this EntityData.
        :rtype: List[object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EntityData.


        :param properties: The properties of this EntityData.
        :type properties: List[object]
        """

        self._properties = properties
