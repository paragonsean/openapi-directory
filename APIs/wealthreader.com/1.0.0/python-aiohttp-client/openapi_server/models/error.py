# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server.models.statistics import Statistics
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: ErrorDetail=None, statistics: Statistics=None, success: bool=None):
        """Error - a model defined in OpenAPI

        :param error: The error of this Error.
        :param statistics: The statistics of this Error.
        :param success: The success of this Error.
        """
        self.openapi_types = {
            'error': ErrorDetail,
            'statistics': Statistics,
            'success': bool
        }

        self.attribute_map = {
            'error': 'error',
            'statistics': 'statistics',
            'success': 'success'
        }

        self._error = error
        self._statistics = statistics
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this Error.


        :return: The error of this Error.
        :rtype: ErrorDetail
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Error.


        :param error: The error of this Error.
        :type error: ErrorDetail
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def statistics(self):
        """Gets the statistics of this Error.


        :return: The statistics of this Error.
        :rtype: Statistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Error.


        :param statistics: The statistics of this Error.
        :type statistics: Statistics
        """
        if statistics is None:
            raise ValueError("Invalid value for `statistics`, must not be `None`")

        self._statistics = statistics

    @property
    def success(self):
        """Gets the success of this Error.


        :return: The success of this Error.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Error.


        :param success: The success of this Error.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
