# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Statistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session: str=None, execution_time: float=None, operation_id: str=None, token: str=None):
        """Statistics - a model defined in OpenAPI

        :param session: The session of this Statistics.
        :param execution_time: The execution_time of this Statistics.
        :param operation_id: The operation_id of this Statistics.
        :param token: The token of this Statistics.
        """
        self.openapi_types = {
            'session': str,
            'execution_time': float,
            'operation_id': str,
            'token': str
        }

        self.attribute_map = {
            'session': 'SESSION',
            'execution_time': 'execution_time',
            'operation_id': 'operation_id',
            'token': 'token'
        }

        self._session = session
        self._execution_time = execution_time
        self._operation_id = operation_id
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The statistics of this Statistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session(self):
        """Gets the session of this Statistics.

        Guarda siempre este valor, tanto si la conexión es correcta como si no. Es necesario para obtener soporte

        :return: The session of this Statistics.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Statistics.

        Guarda siempre este valor, tanto si la conexión es correcta como si no. Es necesario para obtener soporte

        :param session: The session of this Statistics.
        :type session: str
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")

        self._session = session

    @property
    def execution_time(self):
        """Gets the execution_time of this Statistics.

        Duración de la ejecución

        :return: The execution_time of this Statistics.
        :rtype: float
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this Statistics.

        Duración de la ejecución

        :param execution_time: The execution_time of this Statistics.
        :type execution_time: float
        """
        if execution_time is None:
            raise ValueError("Invalid value for `execution_time`, must not be `None`")

        self._execution_time = execution_time

    @property
    def operation_id(self):
        """Gets the operation_id of this Statistics.

        El valor vendrá indicado cuando se haya invocado a la API a través del Widget que proporciona Wealth Reader. Para saber más sobre este tipo de integración, visita: https://docs-es.wealthreader.com/

        :return: The operation_id of this Statistics.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this Statistics.

        El valor vendrá indicado cuando se haya invocado a la API a través del Widget que proporciona Wealth Reader. Para saber más sobre este tipo de integración, visita: https://docs-es.wealthreader.com/

        :param operation_id: The operation_id of this Statistics.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def token(self):
        """Gets the token of this Statistics.

        El valor vendrá indicado cuando se ha pedido la custodia de credenciales con la opción tokenize=true

        :return: The token of this Statistics.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Statistics.

        El valor vendrá indicado cuando se ha pedido la custodia de credenciales con la opción tokenize=true

        :param token: The token of this Statistics.
        :type token: str
        """

        self._token = token
