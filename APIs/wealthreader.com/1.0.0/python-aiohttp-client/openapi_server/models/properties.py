# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.properties_historic_prices_inner import PropertiesHistoricPricesInner
from openapi_server import util


class Properties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, currency: str=None, description: str=None, historic_prices: List[PropertiesHistoricPricesInner]=None, purpose: str=None, trading_price: float=None, trading_year: float=None, uuid: str=None):
        """Properties - a model defined in OpenAPI

        :param code: The code of this Properties.
        :param currency: The currency of this Properties.
        :param description: The description of this Properties.
        :param historic_prices: The historic_prices of this Properties.
        :param purpose: The purpose of this Properties.
        :param trading_price: The trading_price of this Properties.
        :param trading_year: The trading_year of this Properties.
        :param uuid: The uuid of this Properties.
        """
        self.openapi_types = {
            'code': str,
            'currency': str,
            'description': str,
            'historic_prices': List[PropertiesHistoricPricesInner],
            'purpose': str,
            'trading_price': float,
            'trading_year': float,
            'uuid': str
        }

        self.attribute_map = {
            'code': 'code',
            'currency': 'currency',
            'description': 'description',
            'historic_prices': 'historic_prices',
            'purpose': 'purpose',
            'trading_price': 'trading_price',
            'trading_year': 'trading_year',
            'uuid': 'uuid'
        }

        self._code = code
        self._currency = currency
        self._description = description
        self._historic_prices = historic_prices
        self._purpose = purpose
        self._trading_price = trading_price
        self._trading_year = trading_year
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Properties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The properties of this Properties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Properties.

        Referencia catastral

        :return: The code of this Properties.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Properties.

        Referencia catastral

        :param code: The code of this Properties.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def currency(self):
        """Gets the currency of this Properties.


        :return: The currency of this Properties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Properties.


        :param currency: The currency of this Properties.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Properties.


        :return: The description of this Properties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Properties.


        :param description: The description of this Properties.
        :type description: str
        """

        self._description = description

    @property
    def historic_prices(self):
        """Gets the historic_prices of this Properties.


        :return: The historic_prices of this Properties.
        :rtype: List[PropertiesHistoricPricesInner]
        """
        return self._historic_prices

    @historic_prices.setter
    def historic_prices(self, historic_prices):
        """Sets the historic_prices of this Properties.


        :param historic_prices: The historic_prices of this Properties.
        :type historic_prices: List[PropertiesHistoricPricesInner]
        """
        if historic_prices is None:
            raise ValueError("Invalid value for `historic_prices`, must not be `None`")

        self._historic_prices = historic_prices

    @property
    def purpose(self):
        """Gets the purpose of this Properties.


        :return: The purpose of this Properties.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Properties.


        :param purpose: The purpose of this Properties.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def trading_price(self):
        """Gets the trading_price of this Properties.


        :return: The trading_price of this Properties.
        :rtype: float
        """
        return self._trading_price

    @trading_price.setter
    def trading_price(self, trading_price):
        """Sets the trading_price of this Properties.


        :param trading_price: The trading_price of this Properties.
        :type trading_price: float
        """
        if trading_price is None:
            raise ValueError("Invalid value for `trading_price`, must not be `None`")

        self._trading_price = trading_price

    @property
    def trading_year(self):
        """Gets the trading_year of this Properties.


        :return: The trading_year of this Properties.
        :rtype: float
        """
        return self._trading_year

    @trading_year.setter
    def trading_year(self, trading_year):
        """Sets the trading_year of this Properties.


        :param trading_year: The trading_year of this Properties.
        :type trading_year: float
        """
        if trading_year is None:
            raise ValueError("Invalid value for `trading_year`, must not be `None`")

        self._trading_year = trading_year

    @property
    def uuid(self):
        """Gets the uuid of this Properties.


        :return: The uuid of this Properties.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Properties.


        :param uuid: The uuid of this Properties.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
