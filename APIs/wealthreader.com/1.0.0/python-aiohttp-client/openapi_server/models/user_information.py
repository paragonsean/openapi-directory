# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, address: str=None, birth_date: date=None, birth_place: str=None, cell_phone: str=None, city: str=None, country: str=None, email: str=None, gender: str=None, job: str=None, marital_status: str=None, name: str=None, postal_code: str=None):
        """UserInformation - a model defined in OpenAPI

        :param id: The id of this UserInformation.
        :param address: The address of this UserInformation.
        :param birth_date: The birth_date of this UserInformation.
        :param birth_place: The birth_place of this UserInformation.
        :param cell_phone: The cell_phone of this UserInformation.
        :param city: The city of this UserInformation.
        :param country: The country of this UserInformation.
        :param email: The email of this UserInformation.
        :param gender: The gender of this UserInformation.
        :param job: The job of this UserInformation.
        :param marital_status: The marital_status of this UserInformation.
        :param name: The name of this UserInformation.
        :param postal_code: The postal_code of this UserInformation.
        """
        self.openapi_types = {
            'id': str,
            'address': str,
            'birth_date': date,
            'birth_place': str,
            'cell_phone': str,
            'city': str,
            'country': str,
            'email': str,
            'gender': str,
            'job': str,
            'marital_status': str,
            'name': str,
            'postal_code': str
        }

        self.attribute_map = {
            'id': 'ID',
            'address': 'address',
            'birth_date': 'birth_date',
            'birth_place': 'birth_place',
            'cell_phone': 'cell_phone',
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'gender': 'gender',
            'job': 'job',
            'marital_status': 'marital_status',
            'name': 'name',
            'postal_code': 'postal_code'
        }

        self._id = id
        self._address = address
        self._birth_date = birth_date
        self._birth_place = birth_place
        self._cell_phone = cell_phone
        self._city = city
        self._country = country
        self._email = email
        self._gender = gender
        self._job = job
        self._marital_status = marital_status
        self._name = name
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_information of this UserInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserInformation.


        :return: The id of this UserInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInformation.


        :param id: The id of this UserInformation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def address(self):
        """Gets the address of this UserInformation.


        :return: The address of this UserInformation.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserInformation.


        :param address: The address of this UserInformation.
        :type address: str
        """

        self._address = address

    @property
    def birth_date(self):
        """Gets the birth_date of this UserInformation.


        :return: The birth_date of this UserInformation.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this UserInformation.


        :param birth_date: The birth_date of this UserInformation.
        :type birth_date: date
        """

        self._birth_date = birth_date

    @property
    def birth_place(self):
        """Gets the birth_place of this UserInformation.


        :return: The birth_place of this UserInformation.
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this UserInformation.


        :param birth_place: The birth_place of this UserInformation.
        :type birth_place: str
        """

        self._birth_place = birth_place

    @property
    def cell_phone(self):
        """Gets the cell_phone of this UserInformation.

        Número de teléfono con el prefijo internacional, sin espacios

        :return: The cell_phone of this UserInformation.
        :rtype: str
        """
        return self._cell_phone

    @cell_phone.setter
    def cell_phone(self, cell_phone):
        """Sets the cell_phone of this UserInformation.

        Número de teléfono con el prefijo internacional, sin espacios

        :param cell_phone: The cell_phone of this UserInformation.
        :type cell_phone: str
        """

        self._cell_phone = cell_phone

    @property
    def city(self):
        """Gets the city of this UserInformation.


        :return: The city of this UserInformation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserInformation.


        :param city: The city of this UserInformation.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this UserInformation.


        :return: The country of this UserInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserInformation.


        :param country: The country of this UserInformation.
        :type country: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this UserInformation.


        :return: The email of this UserInformation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInformation.


        :param email: The email of this UserInformation.
        :type email: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this UserInformation.


        :return: The gender of this UserInformation.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserInformation.


        :param gender: The gender of this UserInformation.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def job(self):
        """Gets the job of this UserInformation.

        El valor aquí es muy variable de una entidad a otra: de indicar solamente si es cuenta propia o cuenta ajena a indicar el tipo de profesión

        :return: The job of this UserInformation.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this UserInformation.

        El valor aquí es muy variable de una entidad a otra: de indicar solamente si es cuenta propia o cuenta ajena a indicar el tipo de profesión

        :param job: The job of this UserInformation.
        :type job: str
        """

        self._job = job

    @property
    def marital_status(self):
        """Gets the marital_status of this UserInformation.


        :return: The marital_status of this UserInformation.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this UserInformation.


        :param marital_status: The marital_status of this UserInformation.
        :type marital_status: str
        """
        allowed_values = ["single", "married"]  # noqa: E501
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def name(self):
        """Gets the name of this UserInformation.


        :return: The name of this UserInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInformation.


        :param name: The name of this UserInformation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this UserInformation.


        :return: The postal_code of this UserInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this UserInformation.


        :param postal_code: The postal_code of this UserInformation.
        :type postal_code: str
        """

        self._postal_code = postal_code
