/**
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityData from '../model/EntityData';
import Error from '../model/Error';

/**
* EntityData service.
* @module api/EntityDataApi
* @version 1.0.0
*/
export default class EntityDataApi {

    /**
    * Constructs a new EntityDataApi. 
    * @alias module:api/EntityDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the entitiesGet operation.
     * @callback module:api/EntityDataApi~entitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtiene el listado de entidades soportadas
     * Obtiene el listado de entidades soportadas y la información necesaria para dibujar el formulario de login de la entidad. 
     * @param {module:api/EntityDataApi~entitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    entitiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitiesPost operation.
     * @callback module:api/EntityDataApi~entitiesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtiene los activos financieros y el detalle de su composición
     * Obtiene los activos financieros y el detalle de su composición de carteras de inversión compuestas por acciones o fondos, tarjetas de crédito, seguros y préstamos. Incluye información de titularidad de cada uno de los activos así como identificadores únicos que facilitan el tratamiento del dato. Es posible obtener datos Mock. Consulte con el equipo técnico cómo hacerlo. 
     * @param {Object} opts Optional parameters
     * @param {String} [OTP] Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación, si el tipo de desafío es OTP. Requiere la clave que la entidad le ha enviado al usario final
     * @param {String} [SESSION] Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación. Requiere el valor de SESSION obtenido en la primera petición
     * @param {String} [apiKey] Identifica al cliente en el servicio
     * @param {String} [code] Nombre de la entidad. El listado completo está disponible con GET
     * @param {String} [contractCode] Solo necesario cuando el usuario puede acceder a más de un contrato. El listado de contratos disponibles se obtiene al realizar una conexión con un usuario con opción a trabajar con varios contratos en su entidad (que al hacer login en su banca online ve como primera opción una pantalla de selección de contratos) y cuya llamada a la API no se le ha especificado un valor a contract_code
     * @param {module:model/String} [documentType] Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición.
     * @param {String} [password] Contraseña
     * @param {String} [secondPassword] Segunda contraseña, requerida según la entidad.
     * @param {String} [token] Valor para credenciales custodiadas, tokenizadas previamente mediante una llamada a este método con el valor de tokenize=true. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
     * @param {Boolean} [tokenize = false)] Indica si Wealth Reader debe custodiar los credenciales, de tal manera que incluído en el body de respuesta estará un token que permite conectar con la entidad sin necesidad de conocer los credenciales: document_type, user, password, second_password, contract_code
     * @param {String} [user] Usuario. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login
     * @param {module:api/EntityDataApi~entitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityData>}
     */
    entitiesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'OTP': opts['OTP'],
        'SESSION': opts['SESSION'],
        'api_key': opts['apiKey'],
        'code': opts['code'],
        'contract_code': opts['contractCode'],
        'document_type': opts['documentType'],
        'password': opts['password'],
        'second_password': opts['secondPassword'],
        'token': opts['token'],
        'tokenize': opts['tokenize'],
        'user': opts['user']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [EntityData];
      return this.apiClient.callApi(
        '/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorCodesGet operation.
     * @callback module:api/EntityDataApi~errorCodesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listado de códigos de error
     * Listado de códigos de error. Presta especial atención a que no todos los códigos de error deben recibir el mismo tratamiento por parte de tu aplicación. Ante un error de password incorrecto no debes reintentar la llamada con los mismos parámetros, pero ante un error que te indique que la entidad está en mantenimiento sí puedes reintentarlo. Pide una sesión técnica con nuestro equipo para resolver cualquier duda sobre la gestión de errores. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [lang = 'es')] Idioma de la respuesta
     * @param {module:api/EntityDataApi~errorCodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    errorCodesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/error-codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
