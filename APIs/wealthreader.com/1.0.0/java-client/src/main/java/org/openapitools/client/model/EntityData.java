/*
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityDataAnyOf;
import org.openapitools.client.model.EntityDataAnyOf1;
import org.openapitools.client.model.EntityDataAnyOf2;
import org.openapitools.client.model.EntityDataAnyOf3;
import org.openapitools.client.model.Properties;
import org.openapitools.client.model.Statistics;
import org.openapitools.client.model.UserInformation;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:05.707781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EntityData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EntityData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EntityData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EntityDataAnyOf> adapterEntityDataAnyOf = gson.getDelegateAdapter(this, TypeToken.get(EntityDataAnyOf.class));
            final TypeAdapter<EntityDataAnyOf1> adapterEntityDataAnyOf1 = gson.getDelegateAdapter(this, TypeToken.get(EntityDataAnyOf1.class));
            final TypeAdapter<EntityDataAnyOf2> adapterEntityDataAnyOf2 = gson.getDelegateAdapter(this, TypeToken.get(EntityDataAnyOf2.class));
            final TypeAdapter<EntityDataAnyOf3> adapterEntityDataAnyOf3 = gson.getDelegateAdapter(this, TypeToken.get(EntityDataAnyOf3.class));

            return (TypeAdapter<T>) new TypeAdapter<EntityData>() {
                @Override
                public void write(JsonWriter out, EntityData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EntityDataAnyOf`
                    if (value.getActualInstance() instanceof EntityDataAnyOf) {
                        JsonElement element = adapterEntityDataAnyOf.toJsonTree((EntityDataAnyOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntityDataAnyOf1`
                    if (value.getActualInstance() instanceof EntityDataAnyOf1) {
                        JsonElement element = adapterEntityDataAnyOf1.toJsonTree((EntityDataAnyOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntityDataAnyOf2`
                    if (value.getActualInstance() instanceof EntityDataAnyOf2) {
                        JsonElement element = adapterEntityDataAnyOf2.toJsonTree((EntityDataAnyOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntityDataAnyOf3`
                    if (value.getActualInstance() instanceof EntityDataAnyOf3) {
                        JsonElement element = adapterEntityDataAnyOf3.toJsonTree((EntityDataAnyOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3");
                }

                @Override
                public EntityData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EntityDataAnyOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntityDataAnyOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntityDataAnyOf;
                        EntityData ret = new EntityData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntityDataAnyOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntityDataAnyOf'", e);
                    }
                    // deserialize EntityDataAnyOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntityDataAnyOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntityDataAnyOf1;
                        EntityData ret = new EntityData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntityDataAnyOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntityDataAnyOf1'", e);
                    }
                    // deserialize EntityDataAnyOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntityDataAnyOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntityDataAnyOf2;
                        EntityData ret = new EntityData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntityDataAnyOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntityDataAnyOf2'", e);
                    }
                    // deserialize EntityDataAnyOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntityDataAnyOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntityDataAnyOf3;
                        EntityData ret = new EntityData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntityDataAnyOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntityDataAnyOf3'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for EntityData: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public EntityData() {
        super("anyOf", Boolean.FALSE);
    }

    public EntityData(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EntityDataAnyOf", EntityDataAnyOf.class);
        schemas.put("EntityDataAnyOf1", EntityDataAnyOf1.class);
        schemas.put("EntityDataAnyOf2", EntityDataAnyOf2.class);
        schemas.put("EntityDataAnyOf3", EntityDataAnyOf3.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return EntityData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EntityDataAnyOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntityDataAnyOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntityDataAnyOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntityDataAnyOf3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3
     *
     * @return The actual instance (EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EntityDataAnyOf`. If the actual instance is not `EntityDataAnyOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntityDataAnyOf`
     * @throws ClassCastException if the instance is not `EntityDataAnyOf`
     */
    public EntityDataAnyOf getEntityDataAnyOf() throws ClassCastException {
        return (EntityDataAnyOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EntityDataAnyOf1`. If the actual instance is not `EntityDataAnyOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntityDataAnyOf1`
     * @throws ClassCastException if the instance is not `EntityDataAnyOf1`
     */
    public EntityDataAnyOf1 getEntityDataAnyOf1() throws ClassCastException {
        return (EntityDataAnyOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EntityDataAnyOf2`. If the actual instance is not `EntityDataAnyOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntityDataAnyOf2`
     * @throws ClassCastException if the instance is not `EntityDataAnyOf2`
     */
    public EntityDataAnyOf2 getEntityDataAnyOf2() throws ClassCastException {
        return (EntityDataAnyOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EntityDataAnyOf3`. If the actual instance is not `EntityDataAnyOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntityDataAnyOf3`
     * @throws ClassCastException if the instance is not `EntityDataAnyOf3`
     */
    public EntityDataAnyOf3 getEntityDataAnyOf3() throws ClassCastException {
        return (EntityDataAnyOf3)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EntityData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with EntityDataAnyOf
        try {
            EntityDataAnyOf.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntityDataAnyOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntityDataAnyOf1
        try {
            EntityDataAnyOf1.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntityDataAnyOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntityDataAnyOf2
        try {
            EntityDataAnyOf2.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntityDataAnyOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntityDataAnyOf3
        try {
            EntityDataAnyOf3.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntityDataAnyOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for EntityData with anyOf schemas: EntityDataAnyOf, EntityDataAnyOf1, EntityDataAnyOf2, EntityDataAnyOf3. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of EntityData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EntityData
     * @throws IOException if the JSON string is invalid with respect to EntityData
     */
    public static EntityData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EntityData.class);
    }

    /**
     * Convert an instance of EntityData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

