/*
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PropertiesHistoricPricesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activos inmobiliarios
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:05.707781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Properties {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HISTORIC_PRICES = "historic_prices";
  @SerializedName(SERIALIZED_NAME_HISTORIC_PRICES)
  private List<PropertiesHistoricPricesInner> historicPrices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_TRADING_PRICE = "trading_price";
  @SerializedName(SERIALIZED_NAME_TRADING_PRICE)
  private BigDecimal tradingPrice;

  public static final String SERIALIZED_NAME_TRADING_YEAR = "trading_year";
  @SerializedName(SERIALIZED_NAME_TRADING_YEAR)
  private BigDecimal tradingYear;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public Properties() {
  }

  public Properties code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Referencia catastral
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Properties currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Properties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Properties historicPrices(List<PropertiesHistoricPricesInner> historicPrices) {
    this.historicPrices = historicPrices;
    return this;
  }

  public Properties addHistoricPricesItem(PropertiesHistoricPricesInner historicPricesItem) {
    if (this.historicPrices == null) {
      this.historicPrices = new ArrayList<>();
    }
    this.historicPrices.add(historicPricesItem);
    return this;
  }

  /**
   * Get historicPrices
   * @return historicPrices
   */
  @javax.annotation.Nonnull
  public List<PropertiesHistoricPricesInner> getHistoricPrices() {
    return historicPrices;
  }

  public void setHistoricPrices(List<PropertiesHistoricPricesInner> historicPrices) {
    this.historicPrices = historicPrices;
  }


  public Properties purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public Properties tradingPrice(BigDecimal tradingPrice) {
    this.tradingPrice = tradingPrice;
    return this;
  }

  /**
   * Get tradingPrice
   * @return tradingPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getTradingPrice() {
    return tradingPrice;
  }

  public void setTradingPrice(BigDecimal tradingPrice) {
    this.tradingPrice = tradingPrice;
  }


  public Properties tradingYear(BigDecimal tradingYear) {
    this.tradingYear = tradingYear;
    return this;
  }

  /**
   * Get tradingYear
   * @return tradingYear
   */
  @javax.annotation.Nonnull
  public BigDecimal getTradingYear() {
    return tradingYear;
  }

  public void setTradingYear(BigDecimal tradingYear) {
    this.tradingYear = tradingYear;
  }


  public Properties uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nonnull
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Properties properties = (Properties) o;
    return Objects.equals(this.code, properties.code) &&
        Objects.equals(this.currency, properties.currency) &&
        Objects.equals(this.description, properties.description) &&
        Objects.equals(this.historicPrices, properties.historicPrices) &&
        Objects.equals(this.purpose, properties.purpose) &&
        Objects.equals(this.tradingPrice, properties.tradingPrice) &&
        Objects.equals(this.tradingYear, properties.tradingYear) &&
        Objects.equals(this.uuid, properties.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, currency, description, historicPrices, purpose, tradingPrice, tradingYear, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Properties {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    historicPrices: ").append(toIndentedString(historicPrices)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    tradingPrice: ").append(toIndentedString(tradingPrice)).append("\n");
    sb.append("    tradingYear: ").append(toIndentedString(tradingYear)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("historic_prices");
    openapiFields.add("purpose");
    openapiFields.add("trading_price");
    openapiFields.add("trading_year");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("historic_prices");
    openapiRequiredFields.add("trading_price");
    openapiRequiredFields.add("trading_year");
    openapiRequiredFields.add("uuid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Properties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Properties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Properties is not found in the empty JSON string", Properties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Properties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Properties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Properties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("historic_prices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `historic_prices` to be an array in the JSON string but got `%s`", jsonObj.get("historic_prices").toString()));
      }

      JsonArray jsonArrayhistoricPrices = jsonObj.getAsJsonArray("historic_prices");
      // validate the required field `historic_prices` (array)
      for (int i = 0; i < jsonArrayhistoricPrices.size(); i++) {
        PropertiesHistoricPricesInner.validateJsonElement(jsonArrayhistoricPrices.get(i));
      };
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Properties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Properties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Properties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Properties.class));

       return (TypeAdapter<T>) new TypeAdapter<Properties>() {
           @Override
           public void write(JsonWriter out, Properties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Properties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Properties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Properties
   * @throws IOException if the JSON string is invalid with respect to Properties
   */
  public static Properties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Properties.class);
  }

  /**
   * Convert an instance of Properties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

