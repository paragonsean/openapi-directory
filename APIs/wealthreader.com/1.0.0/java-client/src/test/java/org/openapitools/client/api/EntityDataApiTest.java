/*
 * Wealth Reader API
 * Las APIs regulatorias basadas en PSD2 proporcionan acceso a cierta información financiera como saldos de cuentas bancarias y transacciones. Sin embargo, hay otras fuentes de información patrimonial que no son accesibles por estas APIs. La API de Wealth Reader amplía la información ofrecida por las APIs regulatorias proporcionando acceso en tiempo real a las fuentes patrimoniales adicionales en cualquier entidad del mundo. Existen otros dos documentos relacionados que te ayudarán a integrar la API de Wealth Reader. Uno es la guía de integración del widget Javascript: https://docs-es.wealthreader.com/, y el  otro una colección Postman basada en esta documentación.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@wealthreader.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EntityData;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntityDataApi
 */
@Disabled
public class EntityDataApiTest {

    private final EntityDataApi api = new EntityDataApi();

    /**
     * Obtiene el listado de entidades soportadas
     *
     * Obtiene el listado de entidades soportadas y la información necesaria para dibujar el formulario de login de la entidad. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesGetTest() throws ApiException {
        List<List<Object>> response = api.entitiesGet();
        // TODO: test validations
    }

    /**
     * Obtiene los activos financieros y el detalle de su composición
     *
     * Obtiene los activos financieros y el detalle de su composición de carteras de inversión compuestas por acciones o fondos, tarjetas de crédito, seguros y préstamos. Incluye información de titularidad de cada uno de los activos así como identificadores únicos que facilitan el tratamiento del dato. Es posible obtener datos Mock. Consulte con el equipo técnico cómo hacerlo. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesPostTest() throws ApiException {
        String OTP = null;
        String SESSION = null;
        String apiKey = null;
        String code = null;
        String contractCode = null;
        String documentType = null;
        String password = null;
        String secondPassword = null;
        String token = null;
        Boolean tokenize = null;
        String user = null;
        List<EntityData> response = api.entitiesPost(OTP, SESSION, apiKey, code, contractCode, documentType, password, secondPassword, token, tokenize, user);
        // TODO: test validations
    }

    /**
     * Listado de códigos de error
     *
     * Listado de códigos de error. Presta especial atención a que no todos los códigos de error deben recibir el mismo tratamiento por parte de tu aplicación. Ante un error de password incorrecto no debes reintentar la llamada con los mismos parámetros, pero ante un error que te indique que la entidad está en mantenimiento sí puedes reintentarlo. Pide una sesión técnica con nuestro equipo para resolver cualquier duda sobre la gestión de errores. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void errorCodesGetTest() throws ApiException {
        String lang = null;
        List<List<List<Object>>> response = api.errorCodesGet(lang);
        // TODO: test validations
    }

}
