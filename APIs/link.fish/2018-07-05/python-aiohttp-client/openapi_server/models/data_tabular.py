# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_tabular_data import DataTabularData
from openapi_server import util


class DataTabular(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: DataTabularData=None, status_code: str=None, url: str=None):
        """DataTabular - a model defined in OpenAPI

        :param data: The data of this DataTabular.
        :param status_code: The status_code of this DataTabular.
        :param url: The url of this DataTabular.
        """
        self.openapi_types = {
            'data': DataTabularData,
            'status_code': str,
            'url': str
        }

        self.attribute_map = {
            'data': 'data',
            'status_code': 'statusCode',
            'url': 'url'
        }

        self._data = data
        self._status_code = status_code
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataTabular':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataTabular of this DataTabular.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this DataTabular.


        :return: The data of this DataTabular.
        :rtype: DataTabularData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DataTabular.


        :param data: The data of this DataTabular.
        :type data: DataTabularData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def status_code(self):
        """Gets the status_code of this DataTabular.

        The HTTP status code the URL returned

        :return: The status_code of this DataTabular.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this DataTabular.

        The HTTP status code the URL returned

        :param status_code: The status_code of this DataTabular.
        :type status_code: str
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def url(self):
        """Gets the url of this DataTabular.

        The url of the website. Can be different to requested one if there were redirects

        :return: The url of this DataTabular.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataTabular.

        The url of the website. Can be different to requested one if there were redirects

        :param url: The url of this DataTabular.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
