# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SocialMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facebook_page: str=None, github_user: str=None, linked_in_company: str=None, twitter: str=None, url: str=None):
        """SocialMedia - a model defined in OpenAPI

        :param facebook_page: The facebook_page of this SocialMedia.
        :param github_user: The github_user of this SocialMedia.
        :param linked_in_company: The linked_in_company of this SocialMedia.
        :param twitter: The twitter of this SocialMedia.
        :param url: The url of this SocialMedia.
        """
        self.openapi_types = {
            'facebook_page': str,
            'github_user': str,
            'linked_in_company': str,
            'twitter': str,
            'url': str
        }

        self.attribute_map = {
            'facebook_page': 'facebookPage',
            'github_user': 'githubUser',
            'linked_in_company': 'linkedInCompany',
            'twitter': 'twitter',
            'url': 'url'
        }

        self._facebook_page = facebook_page
        self._github_user = github_user
        self._linked_in_company = linked_in_company
        self._twitter = twitter
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SocialMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SocialMedia of this SocialMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facebook_page(self):
        """Gets the facebook_page of this SocialMedia.

        The facebook page name

        :return: The facebook_page of this SocialMedia.
        :rtype: str
        """
        return self._facebook_page

    @facebook_page.setter
    def facebook_page(self, facebook_page):
        """Sets the facebook_page of this SocialMedia.

        The facebook page name

        :param facebook_page: The facebook_page of this SocialMedia.
        :type facebook_page: str
        """
        if facebook_page is None:
            raise ValueError("Invalid value for `facebook_page`, must not be `None`")

        self._facebook_page = facebook_page

    @property
    def github_user(self):
        """Gets the github_user of this SocialMedia.

        The Github user name

        :return: The github_user of this SocialMedia.
        :rtype: str
        """
        return self._github_user

    @github_user.setter
    def github_user(self, github_user):
        """Sets the github_user of this SocialMedia.

        The Github user name

        :param github_user: The github_user of this SocialMedia.
        :type github_user: str
        """
        if github_user is None:
            raise ValueError("Invalid value for `github_user`, must not be `None`")

        self._github_user = github_user

    @property
    def linked_in_company(self):
        """Gets the linked_in_company of this SocialMedia.

        The LinkedIn page name

        :return: The linked_in_company of this SocialMedia.
        :rtype: str
        """
        return self._linked_in_company

    @linked_in_company.setter
    def linked_in_company(self, linked_in_company):
        """Sets the linked_in_company of this SocialMedia.

        The LinkedIn page name

        :param linked_in_company: The linked_in_company of this SocialMedia.
        :type linked_in_company: str
        """
        if linked_in_company is None:
            raise ValueError("Invalid value for `linked_in_company`, must not be `None`")

        self._linked_in_company = linked_in_company

    @property
    def twitter(self):
        """Gets the twitter of this SocialMedia.

        The Twitter handle

        :return: The twitter of this SocialMedia.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this SocialMedia.

        The Twitter handle

        :param twitter: The twitter of this SocialMedia.
        :type twitter: str
        """
        if twitter is None:
            raise ValueError("Invalid value for `twitter`, must not be `None`")

        self._twitter = twitter

    @property
    def url(self):
        """Gets the url of this SocialMedia.

        The url of the website. Can be different to requested one if there were redirects

        :return: The url of this SocialMedia.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SocialMedia.

        The url of the website. Can be different to requested one if there were redirects

        :param url: The url of this SocialMedia.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
