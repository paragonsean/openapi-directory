# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Apps(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android: str=None, ios: str=None, url: str=None):
        """Apps - a model defined in OpenAPI

        :param android: The android of this Apps.
        :param ios: The ios of this Apps.
        :param url: The url of this Apps.
        """
        self.openapi_types = {
            'android': str,
            'ios': str,
            'url': str
        }

        self.attribute_map = {
            'android': 'android',
            'ios': 'ios',
            'url': 'url'
        }

        self._android = android
        self._ios = ios
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Apps':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Apps of this Apps.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android(self):
        """Gets the android of this Apps.

        Android app

        :return: The android of this Apps.
        :rtype: str
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this Apps.

        Android app

        :param android: The android of this Apps.
        :type android: str
        """
        if android is None:
            raise ValueError("Invalid value for `android`, must not be `None`")

        self._android = android

    @property
    def ios(self):
        """Gets the ios of this Apps.

        iOS app

        :return: The ios of this Apps.
        :rtype: str
        """
        return self._ios

    @ios.setter
    def ios(self, ios):
        """Sets the ios of this Apps.

        iOS app

        :param ios: The ios of this Apps.
        :type ios: str
        """
        if ios is None:
            raise ValueError("Invalid value for `ios`, must not be `None`")

        self._ios = ios

    @property
    def url(self):
        """Gets the url of this Apps.

        The url of the website. Can be different to requested one if there were redirects

        :return: The url of this Apps.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Apps.

        The url of the website. Can be different to requested one if there were redirects

        :param url: The url of this Apps.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
