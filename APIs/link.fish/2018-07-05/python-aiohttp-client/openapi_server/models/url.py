# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url_additional_data import UrlAdditionalData
from openapi_server.models.url_items_inner import UrlItemsInner
from openapi_server import util


class Url(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: UrlAdditionalData=None, favicon: str=None, items: List[UrlItemsInner]=None, status_code: str=None, title: str=None, url: str=None):
        """Url - a model defined in OpenAPI

        :param additional_data: The additional_data of this Url.
        :param favicon: The favicon of this Url.
        :param items: The items of this Url.
        :param status_code: The status_code of this Url.
        :param title: The title of this Url.
        :param url: The url of this Url.
        """
        self.openapi_types = {
            'additional_data': UrlAdditionalData,
            'favicon': str,
            'items': List[UrlItemsInner],
            'status_code': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'favicon': 'favicon',
            'items': 'items',
            'status_code': 'statusCode',
            'title': 'title',
            'url': 'url'
        }

        self._additional_data = additional_data
        self._favicon = favicon
        self._items = items
        self._status_code = status_code
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Url':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Url of this Url.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this Url.


        :return: The additional_data of this Url.
        :rtype: UrlAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this Url.


        :param additional_data: The additional_data of this Url.
        :type additional_data: UrlAdditionalData
        """
        if additional_data is None:
            raise ValueError("Invalid value for `additional_data`, must not be `None`")

        self._additional_data = additional_data

    @property
    def favicon(self):
        """Gets the favicon of this Url.

        Url of website favicon

        :return: The favicon of this Url.
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this Url.

        Url of website favicon

        :param favicon: The favicon of this Url.
        :type favicon: str
        """

        self._favicon = favicon

    @property
    def items(self):
        """Gets the items of this Url.

        The found data items on the website.

        :return: The items of this Url.
        :rtype: List[UrlItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Url.

        The found data items on the website.

        :param items: The items of this Url.
        :type items: List[UrlItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def status_code(self):
        """Gets the status_code of this Url.

        The HTTP status code the URL returned

        :return: The status_code of this Url.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Url.

        The HTTP status code the URL returned

        :param status_code: The status_code of this Url.
        :type status_code: str
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def title(self):
        """Gets the title of this Url.

        The title of the page

        :return: The title of this Url.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Url.

        The title of the page

        :param title: The title of this Url.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this Url.

        The url of the website. Can be different to requested one if there were redirects

        :return: The url of this Url.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Url.

        The url of the website. Can be different to requested one if there were redirects

        :param url: The url of this Url.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
