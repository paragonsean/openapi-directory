openapi: 3.0.1
info:
  contact:
    email: api@link.fish
    name: link.fish
    url: https://link.fish/api
  description: |
    API to easily extract data from websites.


    # Base URL


    All URLs referenced in the documentation have the following base:


    ```
    https://api.link.fish
    ```


    The REST API is only served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.


    # Authentication
    HTTP requests to the REST API are protected with [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). You will use the email address of your link.fish account as the username and your API access token as the password for HTTP Basic authentication.

    If you do not have an account yet, go to [https://link.fish/api](https://link.fish/api) and create one first.

    You will receive the API access token automatically via email after you signed up. To generate a new token and invalidate the current one log into your link.fish  account at [https://app.link.fish](https://app.link.fish) and go to: "Plugins" -> "API Dashboard"

    There you can also see how many credits you used already.


    # Errors
    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:
    ```
    {

      "status": {HTTP STATUS CODE}
      "message": "{ERROR MESSAGE}"
    }
    ```
    Like for example when the authorization is not provided or wrong:
    ```
    {

      "status": 401
      "message": "Unauthorized"
    }
    ```

    # Request IDs

    Each API request has an associated request identifier. You can find it in the response headers, under X-LF-Request-Id. In case you have problems please provide this identifier that we can help you as good and fast as possible.


    Example:
    ```
    X-LF-Request-Id: f7f0036f-5277-421a-b143-f7a151571d18
    ```


    # Item format

    The data is by default deeply nested. So if it should be checked if there is an offer with a price, the whole tree has to be checked. To make that simpler, it is also possible to return the data "flat". If selected it will flatten the tree by copying all the data to the main level under a property with the name of its type and link the data internally.

    Information: We created a node module which allows converting between the two formats. It did not get open sourced yet. If you are in need, simply contact us via api@link.fish.


    # Response Content Type
    By default, all data gets returned as JSON. If the data should be returned as XML add the following header:

    ```
    Accept: application/xml
    ```

    # Credits

    Depending on the request made a different amount of credits get charged. How many which request costs can be found on the [API pricing page](http://link.fish/api/#pricing). Additionally, does a  header named "X-LF-Credits-Charged" get added to each successful response with information about the credits.

    Example:
    ```
    X-LF-Credits-Charged: 1 # Credits used for current requests
    X-LF-Credits-Subscription-Max: 1000 # Total credits available in subscription
    X-LF-Credits-Subscription-Used: 512 # Credits still left in current month
    ```
    You can check anytime how many credits you did use already by logging into your link.fish  account at [https://app.link.fish](https://app.link.fish) and checking under:  "Plugins" -> "API Dashboard"


    If you have problems, questions or improvement advice please send us an email to api@link.fish
  termsOfService: https://link.fish/terms-of-service/
  title: link.fish API
  version: 2018-07-05
  x-apisguru-categories:
  - developer_tools
  x-logo:
    backgroundColor: '#fafafa'
    url: https://twitter.com/linkfish_/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://api.link.fish/swagger.yaml
    version: "2.0"
  x-providerName: link.fish
servers:
- url: https://api.link.fish/
tags:
- description: All the currently available link.fish REST endpoints.
  name: REST-Endpoints
paths:
  /Urls/apps:
    get:
      description: |
        Visits the URL and checks if there are mobile apps on them and returns the found ones.

        Will by default return the app identifiers and not the full URL to the apps. To return URLs instead set the parameter "return_urls" to true.

        The URLs can also be created manually like this:

        | Property | URL                                                |
        | -------- | -------------------------------------------------- |
        | android  | https://play.google.com/store/apps/details?id={ID} |
        | ios      | https://itunes.apple.com/us/app/app-name/id{ID}    |

        Properties only get set when a value for it has been found. That means that if no app has been found only the property "url" will be set.
      operationId: urls_apps_get
      parameters:
      - description: The URL of the website to query
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: Returns app URLs instead of the identifiers
        in: query
        name: return_urls
        schema:
          default: false
          type: boolean
      - description: If the page should be fully rendered with a browser to extract
          data. The request will then cost 5 credits instead of 1!
        in: query
        name: browser_render
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Apps'
            application/xml:
              schema:
                $ref: '#/components/schemas/Apps'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Get mobile apps
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com'
            },
            uri: 'https://api.link.fish/Urls/apps',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/apps \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-explorer-description: Visits the URL and checks if there are mobile apps on
        them and returns the found ones.
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/browser-data:
    get:
      description: Visits the URL with a full browser and extracts the data. This
        request costs 5 credits.
      operationId: urls_browser_data_get
      parameters:
      - description: The URL of the website to query
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: If the items should be return "normal" with multiple levels or
          "flat" with just one level and linked instead.
        in: query
        name: item_format
        schema:
          default: normal
          enum:
          - normal
          - flat
          type: string
      - description: Some types like "PropertyValue" do save key and value in separate
          properties which makes the data harder to process. If this option gets set
          it converts them automatically into the regular key -> value format.
        in: query
        name: simplify_special_types
        schema:
          default: false
          type: boolean
      - description: Returns additionally also the raw HTML as property "rawHtml".
        in: query
        name: include_raw_html
        schema:
          default: false
          type: boolean
      - description: If and what kind of screenshot should be returned. Do only request
          screenshot generation when really needed because it will increase the response
          time significantly.
        in: query
        name: screenshot
        schema:
          default: none
          enum:
          - none
          - normal
          - full
          type: string
      - description: The widh of the screenshot in pixel.
        in: query
        name: screenshot_width
        schema:
          default: 640
          maximum: 1280
          minimum: 50
          type: integer
      - description: The file format of the screenshot
        in: query
        name: screenshot_file_format
        schema:
          default: png
          enum:
          - png
          - jpg
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlBrowser'
            application/xml:
              schema:
                $ref: '#/components/schemas/UrlBrowser'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Extract data (browser)
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com',
              screenshot: 'normal',
              screenshot_width: 100
            },
            uri: 'https://api.link.fish/Urls/browser-data',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
              fs.writeFile('screenshot.png', data.screenshot, 'base64', function (err) {});
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/browser-data \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/browser-screenshot:
    get:
      description: Visits the URL with full browser and creates a screenshot. This
        request costs 5 credits.
      operationId: urls_browser_screenshot_get
      parameters:
      - description: The URL of the website to create screenshot of
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: What kind of screenshot should be returned. If it should be a
          regular 16:9 screenshot or one with the full page height
        in: query
        name: type
        schema:
          default: normal
          enum:
          - normal
          - full
          type: string
      - description: The file format of the screenshot
        in: query
        name: file_format
        schema:
          default: png
          enum:
          - png
          - jpg
          type: string
      - description: The widh of the screenshot in pixel.
        in: query
        name: width
        schema:
          default: 640
          maximum: 1280
          minimum: 50
          type: integer
      responses:
        "200":
          content: {}
          description: OK - Successful Request
        "400":
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            image/png:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            image/jpeg:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Generate screenshot (browser)
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var request = require('request');
          var fs = require('fs');

          const options = {
            method: 'GET',
            qs: {
              url: 'https://example.com'
            },
            encoding: 'binary',
            uri: 'https://api.link.fish/Urls/browser-screenshot',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
          };

          request.get(options, function(err, response, body) {
            if (!err) {
              fs.writeFile('screenshot.png', body, 'binary', function (err) {});
            }
          });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/browser-screenshot \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com" \
            > screenshot.png
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/data:
    get:
      description: Visits the URL and extracts the data.
      operationId: urls_data_get
      parameters:
      - description: The URL of the website to query
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: If the items should be return "normal" with multiple levels or
          "flat" with just one level and linked instead.
        in: query
        name: item_format
        schema:
          default: normal
          enum:
          - normal
          - flat
          type: string
      - description: Some types like "PropertyValue" do save key and value in separate
          properties which makes the data harder to process. If this option gets set
          it converts them automatically into the regular key -> value format.
        in: query
        name: simplify_special_types
        schema:
          default: false
          type: boolean
      - description: Returns additionally also the raw HTML as property "rawHtml".
        in: query
        name: include_raw_html
        schema:
          default: false
          type: boolean
      - description: If the page should be fully rendered with a browser to extract
          data. The request will then cost 5 credits instead of 1!
        in: query
        name: browser_render
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
            application/xml:
              schema:
                $ref: '#/components/schemas/Url'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Extract data
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com'
            },
            uri: 'https://api.link.fish/Urls/data',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/data \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/data-raw:
    get:
      description: Visits the URL and extracts the data.
      operationId: urls_data_raw_get
      parameters:
      - description: The URL to get the data of
        in: query
        name: url
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRaw'
            application/xml:
              schema:
                $ref: '#/components/schemas/DataRaw'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Return data of JSON/XML
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com/data.xml'
            },
            uri: 'https://api.link.fish/Urls/data-raw',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/data-raw \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/data-tabular:
    get:
      description: Visits the URL and extracts tabular data.
      operationId: urls_data_tabular_get
      parameters:
      - description: The URL to get the data of
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: CSS selector to define tabular data which should get returned
        in: query
        name: selector
        schema:
          type: string
      - description: If the page should be fully rendered with a browser to extract
          data. The request will then cost 5 credits instead of 1!
        in: query
        name: browser_render
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTabular'
            application/xml:
              schema:
                $ref: '#/components/schemas/DataTabular'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Return tabular data
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com'
            },
            uri: 'https://api.link.fish/Urls/data-tabular',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/data-tabular \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/geo-coordinates:
    get:
      description: |-
        Visits the URL and checks if there are Geo Coordinates on them and returns the found ones.

        Properties only get set when a value for both latitude and longitude have been found. That means that if no geo coordinates have been found only the property "url" will be set.
      operationId: urls_geo_coordinates_get
      parameters:
      - description: The URL of the website to query
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: If the page should be fully rendered with a browser to extract
          data. The request will then cost 5 credits instead of 1!
        in: query
        name: browser_render
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoCoordinates'
            application/xml:
              schema:
                $ref: '#/components/schemas/GeoCoordinates'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Get geo coordinates
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com'
            },
            uri: 'https://api.link.fish/Urls/geo-coordinates',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/geo-coordinates \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-explorer-description: Visits the URL and checks if there are Geo Coordinates
        on them and returns the found ones.
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
  /Urls/social-media:
    get:
      description: |
        Visits the URL and checks if there are any social media accounts and returns the found ones.

        Will by default return the account identifiers and not the full URL to the profiles. To return URLs instead set the parameter "return_urls" to true.

        The URLs can also be created manually like this:

        | Property        | URL                                    |
        | --------------- | -------------------------------------- |
        | facebookPage    | https://facebook.com/{ID}              |
        | githubUser      | https://github.com/{ID}                |
        | googlePlus      | https://plus.google.com/+{ID}          |
        | instagram       | https://instagram.com/{ID}             |
        | linkedInCompany | https://linkedin.com/company/{ID}      |
        | pinterest       | https://pinterest.com/{ID}             |
        | twitter         | https://twitter.com/{ID}               |
        | youTubeUser     | https://youtube.com/user/{ID}          |

        Properties only get set when a value for it has been found. That means that if no social media account has been found only the property "url" will be set.
      operationId: urls_social_media_get
      parameters:
      - description: The URL of the website to query
        in: query
        name: url
        required: true
        schema:
          type: string
      - description: Returns profile URLs instead of the profile names/ids
        in: query
        name: return_urls
        schema:
          default: false
          type: boolean
      - description: If the page should be fully rendered with a browser to extract
          data. The request will then cost 5 credits instead of 1!
        in: query
        name: browser_render
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
            application/xml:
              schema:
                $ref: '#/components/schemas/SocialMedia'
          description: OK - Successful Request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Bad Request - Request was unacceptable. Normally because of
            missing required parameters or invalid data.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Unauthorized - Authentication missing or failed.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Request failed - All parameters were correct but the request
            failed.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Not Found - The requested resource does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponsError'
          description: Internal Server Error - Something went wrong on our side.
      security:
      - basicAuth: []
      summary: Get social media accounts
      tags:
      - REST-Endpoints
      x-code-samples:
      - lang: Node.js
        source: |-
          var rp = require('request-promise');

          var options = {
            method: 'GET',
            body: {
              url: 'https://example.com'
            },
            uri: 'https://api.link.fish/Urls/social-media',
            auth: {
              user: '{EMAIL}',
              pass: '{API-TOKEN}'
            },
            json: true
          };

          rp(options)
            .then(function (data) {
              // Request succeeded
              console.log(JSON.stringify(data,null,2));
            })
            .catch(function (err) {
              // Request failed
              console.log(err.statusCode + ': ' + err.error);
            });
      - lang: Curl
        source: |-
          curl https://api.link.fish/Urls/social-media \
            -X GET \
            -u "{EMAIL}:{API-TOKEN}" \
            -d url="https://example.com"
      x-explorer-description: l Visits the URL and checks if there are any social
        media accounts and returns the found ones.
      x-openapi-router-controller: openapi_server.controllers.rest_endpoints_controller
components:
  schemas:
    ApiResponsError:
      discriminator:
        propertyName: type
      example:
        message: message
        status: status
      properties:
        message:
          description: The error message.
          title: message
          type: string
        status:
          description: The HTTP status code for the error.
          title: status
          type: string
      required:
      - message
      - status
      title: ApiResponsError
      type: object
    Apps:
      example:
        android: com.example
        ios: "1234567890"
        url: http://example.com/product_1.html
      properties:
        android:
          description: Android app
          example: com.example
          title: android
          type: string
        ios:
          description: iOS app
          example: "1234567890"
          title: ios
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/product_1.html
          title: url
          type: string
      required:
      - android
      - ios
      - url
      title: Apps
      type: object
    DataRaw:
      example:
        data: "{}"
        sourceFormat: json
        url: http://example.com/data.xml
        statusCode: "200"
      properties:
        data:
          description: The found data (can be an object or array)
          properties: {}
          title: data
          type: object
        sourceFormat:
          description: The format the source data was in. (json/xml)
          example: json
          title: sourceFormat
          type: string
        statusCode:
          description: The HTTP status code the URL returned
          example: "200"
          title: statusCode
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/data.xml
          title: url
          type: string
      required:
      - data
      - statusCode
      - url
      title: DataRaw
      type: object
    DataTabular:
      example:
        data:
          metadata: "{}"
          data:
          - - - data
              - data
            - - data
              - data
          - - - data
              - data
            - - data
              - data
        url: http://example.com
        statusCode: "200"
      properties:
        data:
          $ref: '#/components/schemas/DataTabular_data'
        statusCode:
          description: The HTTP status code the URL returned
          example: "200"
          title: statusCode
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com
          title: url
          type: string
      required:
      - data
      - statusCode
      - url
      title: DataTabular
      type: object
    GeoCoordinates:
      example:
        latitude: 52.5333
        url: http://example.com/product_1.html
        longitude: 13.38
      properties:
        latitude:
          description: The latitude
          example: 52.5333
          title: latitude
          type: number
        longitude:
          description: The longitude
          example: 13.38
          title: longitude
          type: number
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/product_1.html
          title: url
          type: string
      required:
      - latitude
      - longitude
      - url
      title: GeoCoordinates
      type: object
    SocialMedia:
      example:
        twitter: linkfish_
        facebookPage: link.fish
        linkedInCompany: link-fish
        githubUser: link-fish
        url: http://example.com/product_1.html
      properties:
        facebookPage:
          description: The facebook page name
          example: link.fish
          title: facebookPage
          type: string
        githubUser:
          description: The Github user name
          example: link-fish
          title: githubUser
          type: string
        linkedInCompany:
          description: The LinkedIn page name
          example: link-fish
          title: linkedInCompany
          type: string
        twitter:
          description: The Twitter handle
          example: linkfish_
          title: twitter
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/product_1.html
          title: url
          type: string
      required:
      - facebookPage
      - githubUser
      - linkedInCompany
      - twitter
      - url
      title: SocialMedia
      type: object
    Url:
      example:
        favicon: http://example.com/favicon.ico
        additionalData:
          locality:
            country: US
            language: en
        title: Product 1 - Online Shop - example.com
        items:
        - '@type': WebPage
        - '@type': WebPage
        url: http://example.com/product_1.html
        statusCode: "200"
      properties:
        additionalData:
          $ref: '#/components/schemas/Url_additionalData'
        favicon:
          description: Url of website favicon
          example: http://example.com/favicon.ico
          title: favicon
          type: string
        items:
          description: The found data items on the website.
          items:
            $ref: '#/components/schemas/Url_items_inner'
          title: items
          type: array
        statusCode:
          description: The HTTP status code the URL returned
          example: "200"
          title: statusCode
          type: string
        title:
          description: The title of the page
          example: Product 1 - Online Shop - example.com
          title: title
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/product_1.html
          title: url
          type: string
      required:
      - additionalData
      - items
      - statusCode
      - title
      - url
      title: Url
      type: object
    UrlBrowser:
      example:
        favicon: http://example.com/favicon.ico
        additionalData:
          locality:
            country: US
            language: en
        screenshot: AvDjs4...SjfRf
        title: Product 1 - Online Shop - example.com
        items:
        - '@type': WebPage
        - '@type': WebPage
        url: http://example.com/product_1.html
        statusCode: "200"
      properties:
        additionalData:
          $ref: '#/components/schemas/Url_additionalData'
        favicon:
          description: Url of website favicon
          example: http://example.com/favicon.ico
          title: favicon
          type: string
        items:
          description: The found data items on the website.
          items:
            $ref: '#/components/schemas/Url_items_inner'
          title: items
          type: array
        screenshot:
          description: Base64 encoded PNG screenshot of website (if generation got
            requested)
          example: AvDjs4...SjfRf
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          title: screenshot
          type: string
        statusCode:
          description: The HTTP status code the URL returned
          example: "200"
          title: statusCode
          type: string
        title:
          description: The title of the page
          example: Product 1 - Online Shop - example.com
          title: title
          type: string
        url:
          description: The url of the website. Can be different to requested one if
            there were redirects
          example: http://example.com/product_1.html
          title: url
          type: string
      required:
      - additionalData
      - items
      - statusCode
      - title
      - url
      title: UrlBrowser
      type: object
    DataTabular_data:
      example:
        metadata: "{}"
        data:
        - - - data
            - data
          - - data
            - data
        - - - data
            - data
          - - data
            - data
      properties:
        data:
          description: The found tabular data on the website.
          items:
            items:
              items:
                type: string
              type: array
            type: array
          title: data
          type: array
        metadata:
          properties: {}
          title: metadata
          type: object
      title: DataTabular_data
      type: object
    Url_additionalData_locality:
      example:
        country: US
        language: en
      properties:
        country:
          description: The recognized country of the website determined by TLD.
          example: US
          title: country
          type: string
        language:
          description: The language of website. Recognized by header information if
            supplied or text analysis.
          example: en
          title: language
          type: string
      title: Url_additionalData_locality
      type: object
    Url_additionalData:
      example:
        locality:
          country: US
          language: en
      properties:
        locality:
          $ref: '#/components/schemas/Url_additionalData_locality'
      title: Url_additionalData
      type: object
    Url_items_inner:
      description: The properties depend on the type of the item. The field "@type"
        exists for all.
      example:
        '@type': WebPage
      properties:
        '@type':
          description: The item type
          example: WebPage
          title: '@type'
          type: string
      title: Url_items_inner
      type: object
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_basicAuth
x-original-swagger-version: "2.0"
