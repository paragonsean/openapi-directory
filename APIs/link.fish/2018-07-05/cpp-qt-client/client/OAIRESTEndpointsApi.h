/**
 * link.fish API
 * API to easily extract data from websites.   # Base URL   All URLs referenced in the documentation have the following base:   ``` https://api.link.fish ```   The REST API is only served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.   # Authentication HTTP requests to the REST API are protected with [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). You will use the email address of your link.fish account as the username and your API access token as the password for HTTP Basic authentication.  If you do not have an account yet, go to [https://link.fish/api](https://link.fish/api) and create one first.  You will receive the API access token automatically via email after you signed up. To generate a new token and invalidate the current one log into your link.fish  account at [https://app.link.fish](https://app.link.fish) and go to: \"Plugins\" -> \"API Dashboard\"  There you can also see how many credits you used already.   # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {    \"status\": {HTTP STATUS CODE}   \"message\": \"{ERROR MESSAGE}\" } ``` Like for example when the authorization is not provided or wrong: ``` {    \"status\": 401   \"message\": \"Unauthorized\" } ```  # Request IDs  Each API request has an associated request identifier. You can find it in the response headers, under X-LF-Request-Id. In case you have problems please provide this identifier that we can help you as good and fast as possible.   Example: ``` X-LF-Request-Id: f7f0036f-5277-421a-b143-f7a151571d18 ```   # Item format  The data is by default deeply nested. So if it should be checked if there is an offer with a price, the whole tree has to be checked. To make that simpler, it is also possible to return the data \"flat\". If selected it will flatten the tree by copying all the data to the main level under a property with the name of its type and link the data internally.  Information: We created a node module which allows converting between the two formats. It did not get open sourced yet. If you are in need, simply contact us via api@link.fish.   # Response Content Type By default, all data gets returned as JSON. If the data should be returned as XML add the following header:  ``` Accept: application/xml ```  # Credits  Depending on the request made a different amount of credits get charged. How many which request costs can be found on the [API pricing page](http://link.fish/api/#pricing). Additionally, does a  header named \"X-LF-Credits-Charged\" get added to each successful response with information about the credits.  Example: ``` X-LF-Credits-Charged: 1 # Credits used for current requests X-LF-Credits-Subscription-Max: 1000 # Total credits available in subscription X-LF-Credits-Subscription-Used: 512 # Credits still left in current month ``` You can check anytime how many credits you did use already by logging into your link.fish  account at [https://app.link.fish](https://app.link.fish) and checking under:  \"Plugins\" -> \"API Dashboard\"   If you have problems, questions or improvement advice please send us an email to api@link.fish 
 *
 * The version of the OpenAPI document: 2018-07-05
 * Contact: api@link.fish
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRESTEndpointsApi_H
#define OAI_OAIRESTEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiResponsError.h"
#include "OAIApps.h"
#include "OAIDataRaw.h"
#include "OAIDataTabular.h"
#include "OAIGeoCoordinates.h"
#include "OAISocialMedia.h"
#include "OAIUrl.h"
#include "OAIUrlBrowser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRESTEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAIRESTEndpointsApi(const int timeOut = 0);
    ~OAIRESTEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  return_urls bool [optional]
    * @param[in]  browser_render bool [optional]
    */
    virtual void urlsAppsGet(const QString &url, const ::OpenAPI::OptionalParam<bool> &return_urls = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &browser_render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  item_format QString [optional]
    * @param[in]  simplify_special_types bool [optional]
    * @param[in]  include_raw_html bool [optional]
    * @param[in]  screenshot QString [optional]
    * @param[in]  screenshot_width qint32 [optional]
    * @param[in]  screenshot_file_format QString [optional]
    */
    virtual void urlsBrowserDataGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &item_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &simplify_special_types = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_raw_html = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &screenshot = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &screenshot_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &screenshot_file_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  file_format QString [optional]
    * @param[in]  width qint32 [optional]
    */
    virtual void urlsBrowserScreenshotGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  item_format QString [optional]
    * @param[in]  simplify_special_types bool [optional]
    * @param[in]  include_raw_html bool [optional]
    * @param[in]  browser_render bool [optional]
    */
    virtual void urlsDataGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &item_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &simplify_special_types = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_raw_html = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &browser_render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  url QString [required]
    */
    virtual void urlsDataRawGet(const QString &url);

    /**
    * @param[in]  url QString [required]
    * @param[in]  selector QString [optional]
    * @param[in]  browser_render bool [optional]
    */
    virtual void urlsDataTabularGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &selector = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &browser_render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  browser_render bool [optional]
    */
    virtual void urlsGeoCoordinatesGet(const QString &url, const ::OpenAPI::OptionalParam<bool> &browser_render = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  return_urls bool [optional]
    * @param[in]  browser_render bool [optional]
    */
    virtual void urlsSocialMediaGet(const QString &url, const ::OpenAPI::OptionalParam<bool> &return_urls = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &browser_render = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void urlsAppsGetCallback(OAIHttpRequestWorker *worker);
    void urlsBrowserDataGetCallback(OAIHttpRequestWorker *worker);
    void urlsBrowserScreenshotGetCallback(OAIHttpRequestWorker *worker);
    void urlsDataGetCallback(OAIHttpRequestWorker *worker);
    void urlsDataRawGetCallback(OAIHttpRequestWorker *worker);
    void urlsDataTabularGetCallback(OAIHttpRequestWorker *worker);
    void urlsGeoCoordinatesGetCallback(OAIHttpRequestWorker *worker);
    void urlsSocialMediaGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void urlsAppsGetSignal(OAIApps summary);
    void urlsBrowserDataGetSignal(OAIUrlBrowser summary);
    void urlsBrowserScreenshotGetSignal();
    void urlsDataGetSignal(OAIUrl summary);
    void urlsDataRawGetSignal(OAIDataRaw summary);
    void urlsDataTabularGetSignal(OAIDataTabular summary);
    void urlsGeoCoordinatesGetSignal(OAIGeoCoordinates summary);
    void urlsSocialMediaGetSignal(OAISocialMedia summary);


    void urlsAppsGetSignalFull(OAIHttpRequestWorker *worker, OAIApps summary);
    void urlsBrowserDataGetSignalFull(OAIHttpRequestWorker *worker, OAIUrlBrowser summary);
    void urlsBrowserScreenshotGetSignalFull(OAIHttpRequestWorker *worker);
    void urlsDataGetSignalFull(OAIHttpRequestWorker *worker, OAIUrl summary);
    void urlsDataRawGetSignalFull(OAIHttpRequestWorker *worker, OAIDataRaw summary);
    void urlsDataTabularGetSignalFull(OAIHttpRequestWorker *worker, OAIDataTabular summary);
    void urlsGeoCoordinatesGetSignalFull(OAIHttpRequestWorker *worker, OAIGeoCoordinates summary);
    void urlsSocialMediaGetSignalFull(OAIHttpRequestWorker *worker, OAISocialMedia summary);

    Q_DECL_DEPRECATED_X("Use urlsAppsGetSignalError() instead")
    void urlsAppsGetSignalE(OAIApps summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsAppsGetSignalError(OAIApps summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsBrowserDataGetSignalError() instead")
    void urlsBrowserDataGetSignalE(OAIUrlBrowser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsBrowserDataGetSignalError(OAIUrlBrowser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsBrowserScreenshotGetSignalError() instead")
    void urlsBrowserScreenshotGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void urlsBrowserScreenshotGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataGetSignalError() instead")
    void urlsDataGetSignalE(OAIUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataGetSignalError(OAIUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataRawGetSignalError() instead")
    void urlsDataRawGetSignalE(OAIDataRaw summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataRawGetSignalError(OAIDataRaw summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataTabularGetSignalError() instead")
    void urlsDataTabularGetSignalE(OAIDataTabular summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataTabularGetSignalError(OAIDataTabular summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsGeoCoordinatesGetSignalError() instead")
    void urlsGeoCoordinatesGetSignalE(OAIGeoCoordinates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsGeoCoordinatesGetSignalError(OAIGeoCoordinates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsSocialMediaGetSignalError() instead")
    void urlsSocialMediaGetSignalE(OAISocialMedia summary, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsSocialMediaGetSignalError(OAISocialMedia summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use urlsAppsGetSignalErrorFull() instead")
    void urlsAppsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsAppsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsBrowserDataGetSignalErrorFull() instead")
    void urlsBrowserDataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsBrowserDataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsBrowserScreenshotGetSignalErrorFull() instead")
    void urlsBrowserScreenshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsBrowserScreenshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataGetSignalErrorFull() instead")
    void urlsDataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataRawGetSignalErrorFull() instead")
    void urlsDataRawGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataRawGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsDataTabularGetSignalErrorFull() instead")
    void urlsDataTabularGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsDataTabularGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsGeoCoordinatesGetSignalErrorFull() instead")
    void urlsGeoCoordinatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsGeoCoordinatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use urlsSocialMediaGetSignalErrorFull() instead")
    void urlsSocialMediaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void urlsSocialMediaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
