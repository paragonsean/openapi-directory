/*
 * link.fish API
 * API to easily extract data from websites.   # Base URL   All URLs referenced in the documentation have the following base:   ``` https://api.link.fish ```   The REST API is only served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.   # Authentication HTTP requests to the REST API are protected with [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). You will use the email address of your link.fish account as the username and your API access token as the password for HTTP Basic authentication.  If you do not have an account yet, go to [https://link.fish/api](https://link.fish/api) and create one first.  You will receive the API access token automatically via email after you signed up. To generate a new token and invalidate the current one log into your link.fish  account at [https://app.link.fish](https://app.link.fish) and go to: \"Plugins\" -> \"API Dashboard\"  There you can also see how many credits you used already.   # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {    \"status\": {HTTP STATUS CODE}   \"message\": \"{ERROR MESSAGE}\" } ``` Like for example when the authorization is not provided or wrong: ``` {    \"status\": 401   \"message\": \"Unauthorized\" } ```  # Request IDs  Each API request has an associated request identifier. You can find it in the response headers, under X-LF-Request-Id. In case you have problems please provide this identifier that we can help you as good and fast as possible.   Example: ``` X-LF-Request-Id: f7f0036f-5277-421a-b143-f7a151571d18 ```   # Item format  The data is by default deeply nested. So if it should be checked if there is an offer with a price, the whole tree has to be checked. To make that simpler, it is also possible to return the data \"flat\". If selected it will flatten the tree by copying all the data to the main level under a property with the name of its type and link the data internally.  Information: We created a node module which allows converting between the two formats. It did not get open sourced yet. If you are in need, simply contact us via api@link.fish.   # Response Content Type By default, all data gets returned as JSON. If the data should be returned as XML add the following header:  ``` Accept: application/xml ```  # Credits  Depending on the request made a different amount of credits get charged. How many which request costs can be found on the [API pricing page](http://link.fish/api/#pricing). Additionally, does a  header named \"X-LF-Credits-Charged\" get added to each successful response with information about the credits.  Example: ``` X-LF-Credits-Charged: 1 # Credits used for current requests X-LF-Credits-Subscription-Max: 1000 # Total credits available in subscription X-LF-Credits-Subscription-Used: 512 # Credits still left in current month ``` You can check anytime how many credits you did use already by logging into your link.fish  account at [https://app.link.fish](https://app.link.fish) and checking under:  \"Plugins\" -> \"API Dashboard\"   If you have problems, questions or improvement advice please send us an email to api@link.fish 
 *
 * The version of the OpenAPI document: 2018-07-05
 * Contact: api@link.fish
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiResponsError;
import org.openapitools.client.model.Apps;
import org.openapitools.client.model.DataRaw;
import org.openapitools.client.model.DataTabular;
import org.openapitools.client.model.GeoCoordinates;
import org.openapitools.client.model.SocialMedia;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.UrlBrowser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RestEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for urlsAppsGet
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns app URLs instead of the identifiers (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsAppsGetCall(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (returnUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_urls", returnUrls));
        }

        if (browserRender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_render", browserRender));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsAppsGetValidateBeforeCall(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsAppsGet(Async)");
        }

        return urlsAppsGetCall(url, returnUrls, browserRender, _callback);

    }

    /**
     * Get mobile apps
     * Visits the URL and checks if there are mobile apps on them and returns the found ones.  Will by default return the app identifiers and not the full URL to the apps. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property | URL                                                | | -------- | -------------------------------------------------- | | android  | https://play.google.com/store/apps/details?id&#x3D;{ID} | | ios      | https://itunes.apple.com/us/app/app-name/id{ID}    |  Properties only get set when a value for it has been found. That means that if no app has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns app URLs instead of the identifiers (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return Apps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public Apps urlsAppsGet(String url, Boolean returnUrls, Boolean browserRender) throws ApiException {
        ApiResponse<Apps> localVarResp = urlsAppsGetWithHttpInfo(url, returnUrls, browserRender);
        return localVarResp.getData();
    }

    /**
     * Get mobile apps
     * Visits the URL and checks if there are mobile apps on them and returns the found ones.  Will by default return the app identifiers and not the full URL to the apps. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property | URL                                                | | -------- | -------------------------------------------------- | | android  | https://play.google.com/store/apps/details?id&#x3D;{ID} | | ios      | https://itunes.apple.com/us/app/app-name/id{ID}    |  Properties only get set when a value for it has been found. That means that if no app has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns app URLs instead of the identifiers (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return ApiResponse&lt;Apps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Apps> urlsAppsGetWithHttpInfo(String url, Boolean returnUrls, Boolean browserRender) throws ApiException {
        okhttp3.Call localVarCall = urlsAppsGetValidateBeforeCall(url, returnUrls, browserRender, null);
        Type localVarReturnType = new TypeToken<Apps>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mobile apps (asynchronously)
     * Visits the URL and checks if there are mobile apps on them and returns the found ones.  Will by default return the app identifiers and not the full URL to the apps. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property | URL                                                | | -------- | -------------------------------------------------- | | android  | https://play.google.com/store/apps/details?id&#x3D;{ID} | | ios      | https://itunes.apple.com/us/app/app-name/id{ID}    |  Properties only get set when a value for it has been found. That means that if no app has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns app URLs instead of the identifiers (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsAppsGetAsync(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback<Apps> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsAppsGetValidateBeforeCall(url, returnUrls, browserRender, _callback);
        Type localVarReturnType = new TypeToken<Apps>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsBrowserDataGet
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param screenshot If and what kind of screenshot should be returned. Do only request screenshot generation when really needed because it will increase the response time significantly. (optional, default to none)
     * @param screenshotWidth The widh of the screenshot in pixel. (optional, default to 640)
     * @param screenshotFileFormat The file format of the screenshot (optional, default to png)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsBrowserDataGetCall(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, String screenshot, Integer screenshotWidth, String screenshotFileFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/browser-data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (itemFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_format", itemFormat));
        }

        if (simplifySpecialTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simplify_special_types", simplifySpecialTypes));
        }

        if (includeRawHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_raw_html", includeRawHtml));
        }

        if (screenshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screenshot", screenshot));
        }

        if (screenshotWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screenshot_width", screenshotWidth));
        }

        if (screenshotFileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screenshot_file_format", screenshotFileFormat));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsBrowserDataGetValidateBeforeCall(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, String screenshot, Integer screenshotWidth, String screenshotFileFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsBrowserDataGet(Async)");
        }

        return urlsBrowserDataGetCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, screenshot, screenshotWidth, screenshotFileFormat, _callback);

    }

    /**
     * Extract data (browser)
     * Visits the URL with a full browser and extracts the data. This request costs 5 credits.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param screenshot If and what kind of screenshot should be returned. Do only request screenshot generation when really needed because it will increase the response time significantly. (optional, default to none)
     * @param screenshotWidth The widh of the screenshot in pixel. (optional, default to 640)
     * @param screenshotFileFormat The file format of the screenshot (optional, default to png)
     * @return UrlBrowser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public UrlBrowser urlsBrowserDataGet(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, String screenshot, Integer screenshotWidth, String screenshotFileFormat) throws ApiException {
        ApiResponse<UrlBrowser> localVarResp = urlsBrowserDataGetWithHttpInfo(url, itemFormat, simplifySpecialTypes, includeRawHtml, screenshot, screenshotWidth, screenshotFileFormat);
        return localVarResp.getData();
    }

    /**
     * Extract data (browser)
     * Visits the URL with a full browser and extracts the data. This request costs 5 credits.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param screenshot If and what kind of screenshot should be returned. Do only request screenshot generation when really needed because it will increase the response time significantly. (optional, default to none)
     * @param screenshotWidth The widh of the screenshot in pixel. (optional, default to 640)
     * @param screenshotFileFormat The file format of the screenshot (optional, default to png)
     * @return ApiResponse&lt;UrlBrowser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlBrowser> urlsBrowserDataGetWithHttpInfo(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, String screenshot, Integer screenshotWidth, String screenshotFileFormat) throws ApiException {
        okhttp3.Call localVarCall = urlsBrowserDataGetValidateBeforeCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, screenshot, screenshotWidth, screenshotFileFormat, null);
        Type localVarReturnType = new TypeToken<UrlBrowser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract data (browser) (asynchronously)
     * Visits the URL with a full browser and extracts the data. This request costs 5 credits.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param screenshot If and what kind of screenshot should be returned. Do only request screenshot generation when really needed because it will increase the response time significantly. (optional, default to none)
     * @param screenshotWidth The widh of the screenshot in pixel. (optional, default to 640)
     * @param screenshotFileFormat The file format of the screenshot (optional, default to png)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsBrowserDataGetAsync(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, String screenshot, Integer screenshotWidth, String screenshotFileFormat, final ApiCallback<UrlBrowser> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsBrowserDataGetValidateBeforeCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, screenshot, screenshotWidth, screenshotFileFormat, _callback);
        Type localVarReturnType = new TypeToken<UrlBrowser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsBrowserScreenshotGet
     * @param url The URL of the website to create screenshot of (required)
     * @param type What kind of screenshot should be returned. If it should be a regular 16:9 screenshot or one with the full page height (optional, default to normal)
     * @param fileFormat The file format of the screenshot (optional, default to png)
     * @param width The widh of the screenshot in pixel. (optional, default to 640)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsBrowserScreenshotGetCall(String url, String type, String fileFormat, Integer width, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/browser-screenshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_format", fileFormat));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        final String[] localVarAccepts = {
            "image/png",
            "image/jpeg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsBrowserScreenshotGetValidateBeforeCall(String url, String type, String fileFormat, Integer width, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsBrowserScreenshotGet(Async)");
        }

        return urlsBrowserScreenshotGetCall(url, type, fileFormat, width, _callback);

    }

    /**
     * Generate screenshot (browser)
     * Visits the URL with full browser and creates a screenshot. This request costs 5 credits.
     * @param url The URL of the website to create screenshot of (required)
     * @param type What kind of screenshot should be returned. If it should be a regular 16:9 screenshot or one with the full page height (optional, default to normal)
     * @param fileFormat The file format of the screenshot (optional, default to png)
     * @param width The widh of the screenshot in pixel. (optional, default to 640)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public void urlsBrowserScreenshotGet(String url, String type, String fileFormat, Integer width) throws ApiException {
        urlsBrowserScreenshotGetWithHttpInfo(url, type, fileFormat, width);
    }

    /**
     * Generate screenshot (browser)
     * Visits the URL with full browser and creates a screenshot. This request costs 5 credits.
     * @param url The URL of the website to create screenshot of (required)
     * @param type What kind of screenshot should be returned. If it should be a regular 16:9 screenshot or one with the full page height (optional, default to normal)
     * @param fileFormat The file format of the screenshot (optional, default to png)
     * @param width The widh of the screenshot in pixel. (optional, default to 640)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> urlsBrowserScreenshotGetWithHttpInfo(String url, String type, String fileFormat, Integer width) throws ApiException {
        okhttp3.Call localVarCall = urlsBrowserScreenshotGetValidateBeforeCall(url, type, fileFormat, width, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate screenshot (browser) (asynchronously)
     * Visits the URL with full browser and creates a screenshot. This request costs 5 credits.
     * @param url The URL of the website to create screenshot of (required)
     * @param type What kind of screenshot should be returned. If it should be a regular 16:9 screenshot or one with the full page height (optional, default to normal)
     * @param fileFormat The file format of the screenshot (optional, default to png)
     * @param width The widh of the screenshot in pixel. (optional, default to 640)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsBrowserScreenshotGetAsync(String url, String type, String fileFormat, Integer width, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsBrowserScreenshotGetValidateBeforeCall(url, type, fileFormat, width, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsDataGet
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataGetCall(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (itemFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_format", itemFormat));
        }

        if (simplifySpecialTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simplify_special_types", simplifySpecialTypes));
        }

        if (includeRawHtml != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_raw_html", includeRawHtml));
        }

        if (browserRender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_render", browserRender));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsDataGetValidateBeforeCall(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsDataGet(Async)");
        }

        return urlsDataGetCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, browserRender, _callback);

    }

    /**
     * Extract data
     * Visits the URL and extracts the data.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public Url urlsDataGet(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, Boolean browserRender) throws ApiException {
        ApiResponse<Url> localVarResp = urlsDataGetWithHttpInfo(url, itemFormat, simplifySpecialTypes, includeRawHtml, browserRender);
        return localVarResp.getData();
    }

    /**
     * Extract data
     * Visits the URL and extracts the data.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return ApiResponse&lt;Url&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Url> urlsDataGetWithHttpInfo(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, Boolean browserRender) throws ApiException {
        okhttp3.Call localVarCall = urlsDataGetValidateBeforeCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, browserRender, null);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract data (asynchronously)
     * Visits the URL and extracts the data.
     * @param url The URL of the website to query (required)
     * @param itemFormat If the items should be return \&quot;normal\&quot; with multiple levels or \&quot;flat\&quot; with just one level and linked instead. (optional, default to normal)
     * @param simplifySpecialTypes Some types like \&quot;PropertyValue\&quot; do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -&gt; value format. (optional, default to false)
     * @param includeRawHtml Returns additionally also the raw HTML as property \&quot;rawHtml\&quot;. (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataGetAsync(String url, String itemFormat, Boolean simplifySpecialTypes, Boolean includeRawHtml, Boolean browserRender, final ApiCallback<Url> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsDataGetValidateBeforeCall(url, itemFormat, simplifySpecialTypes, includeRawHtml, browserRender, _callback);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsDataRawGet
     * @param url The URL to get the data of (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataRawGetCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/data-raw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsDataRawGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsDataRawGet(Async)");
        }

        return urlsDataRawGetCall(url, _callback);

    }

    /**
     * Return data of JSON/XML
     * Visits the URL and extracts the data.
     * @param url The URL to get the data of (required)
     * @return DataRaw
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public DataRaw urlsDataRawGet(String url) throws ApiException {
        ApiResponse<DataRaw> localVarResp = urlsDataRawGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * Return data of JSON/XML
     * Visits the URL and extracts the data.
     * @param url The URL to get the data of (required)
     * @return ApiResponse&lt;DataRaw&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataRaw> urlsDataRawGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = urlsDataRawGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<DataRaw>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return data of JSON/XML (asynchronously)
     * Visits the URL and extracts the data.
     * @param url The URL to get the data of (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataRawGetAsync(String url, final ApiCallback<DataRaw> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsDataRawGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<DataRaw>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsDataTabularGet
     * @param url The URL to get the data of (required)
     * @param selector CSS selector to define tabular data which should get returned (optional)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataTabularGetCall(String url, String selector, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/data-tabular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (selector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selector", selector));
        }

        if (browserRender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_render", browserRender));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsDataTabularGetValidateBeforeCall(String url, String selector, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsDataTabularGet(Async)");
        }

        return urlsDataTabularGetCall(url, selector, browserRender, _callback);

    }

    /**
     * Return tabular data
     * Visits the URL and extracts tabular data.
     * @param url The URL to get the data of (required)
     * @param selector CSS selector to define tabular data which should get returned (optional)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return DataTabular
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public DataTabular urlsDataTabularGet(String url, String selector, Boolean browserRender) throws ApiException {
        ApiResponse<DataTabular> localVarResp = urlsDataTabularGetWithHttpInfo(url, selector, browserRender);
        return localVarResp.getData();
    }

    /**
     * Return tabular data
     * Visits the URL and extracts tabular data.
     * @param url The URL to get the data of (required)
     * @param selector CSS selector to define tabular data which should get returned (optional)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return ApiResponse&lt;DataTabular&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataTabular> urlsDataTabularGetWithHttpInfo(String url, String selector, Boolean browserRender) throws ApiException {
        okhttp3.Call localVarCall = urlsDataTabularGetValidateBeforeCall(url, selector, browserRender, null);
        Type localVarReturnType = new TypeToken<DataTabular>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return tabular data (asynchronously)
     * Visits the URL and extracts tabular data.
     * @param url The URL to get the data of (required)
     * @param selector CSS selector to define tabular data which should get returned (optional)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsDataTabularGetAsync(String url, String selector, Boolean browserRender, final ApiCallback<DataTabular> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsDataTabularGetValidateBeforeCall(url, selector, browserRender, _callback);
        Type localVarReturnType = new TypeToken<DataTabular>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsGeoCoordinatesGet
     * @param url The URL of the website to query (required)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsGeoCoordinatesGetCall(String url, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/geo-coordinates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (browserRender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_render", browserRender));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsGeoCoordinatesGetValidateBeforeCall(String url, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsGeoCoordinatesGet(Async)");
        }

        return urlsGeoCoordinatesGetCall(url, browserRender, _callback);

    }

    /**
     * Get geo coordinates
     * Visits the URL and checks if there are Geo Coordinates on them and returns the found ones.  Properties only get set when a value for both latitude and longitude have been found. That means that if no geo coordinates have been found only the property \&quot;url\&quot; will be set.
     * @param url The URL of the website to query (required)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return GeoCoordinates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public GeoCoordinates urlsGeoCoordinatesGet(String url, Boolean browserRender) throws ApiException {
        ApiResponse<GeoCoordinates> localVarResp = urlsGeoCoordinatesGetWithHttpInfo(url, browserRender);
        return localVarResp.getData();
    }

    /**
     * Get geo coordinates
     * Visits the URL and checks if there are Geo Coordinates on them and returns the found ones.  Properties only get set when a value for both latitude and longitude have been found. That means that if no geo coordinates have been found only the property \&quot;url\&quot; will be set.
     * @param url The URL of the website to query (required)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return ApiResponse&lt;GeoCoordinates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoCoordinates> urlsGeoCoordinatesGetWithHttpInfo(String url, Boolean browserRender) throws ApiException {
        okhttp3.Call localVarCall = urlsGeoCoordinatesGetValidateBeforeCall(url, browserRender, null);
        Type localVarReturnType = new TypeToken<GeoCoordinates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get geo coordinates (asynchronously)
     * Visits the URL and checks if there are Geo Coordinates on them and returns the found ones.  Properties only get set when a value for both latitude and longitude have been found. That means that if no geo coordinates have been found only the property \&quot;url\&quot; will be set.
     * @param url The URL of the website to query (required)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsGeoCoordinatesGetAsync(String url, Boolean browserRender, final ApiCallback<GeoCoordinates> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsGeoCoordinatesGetValidateBeforeCall(url, browserRender, _callback);
        Type localVarReturnType = new TypeToken<GeoCoordinates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlsSocialMediaGet
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns profile URLs instead of the profile names/ids (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsSocialMediaGetCall(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Urls/social-media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (returnUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_urls", returnUrls));
        }

        if (browserRender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_render", browserRender));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlsSocialMediaGetValidateBeforeCall(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling urlsSocialMediaGet(Async)");
        }

        return urlsSocialMediaGetCall(url, returnUrls, browserRender, _callback);

    }

    /**
     * Get social media accounts
     * Visits the URL and checks if there are any social media accounts and returns the found ones.  Will by default return the account identifiers and not the full URL to the profiles. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property        | URL                                    | | --------------- | -------------------------------------- | | facebookPage    | https://facebook.com/{ID}              | | githubUser      | https://github.com/{ID}                | | googlePlus      | https://plus.google.com/+{ID}          | | instagram       | https://instagram.com/{ID}             | | linkedInCompany | https://linkedin.com/company/{ID}      | | pinterest       | https://pinterest.com/{ID}             | | twitter         | https://twitter.com/{ID}               | | youTubeUser     | https://youtube.com/user/{ID}          |  Properties only get set when a value for it has been found. That means that if no social media account has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns profile URLs instead of the profile names/ids (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return SocialMedia
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public SocialMedia urlsSocialMediaGet(String url, Boolean returnUrls, Boolean browserRender) throws ApiException {
        ApiResponse<SocialMedia> localVarResp = urlsSocialMediaGetWithHttpInfo(url, returnUrls, browserRender);
        return localVarResp.getData();
    }

    /**
     * Get social media accounts
     * Visits the URL and checks if there are any social media accounts and returns the found ones.  Will by default return the account identifiers and not the full URL to the profiles. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property        | URL                                    | | --------------- | -------------------------------------- | | facebookPage    | https://facebook.com/{ID}              | | githubUser      | https://github.com/{ID}                | | googlePlus      | https://plus.google.com/+{ID}          | | instagram       | https://instagram.com/{ID}             | | linkedInCompany | https://linkedin.com/company/{ID}      | | pinterest       | https://pinterest.com/{ID}             | | twitter         | https://twitter.com/{ID}               | | youTubeUser     | https://youtube.com/user/{ID}          |  Properties only get set when a value for it has been found. That means that if no social media account has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns profile URLs instead of the profile names/ids (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @return ApiResponse&lt;SocialMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SocialMedia> urlsSocialMediaGetWithHttpInfo(String url, Boolean returnUrls, Boolean browserRender) throws ApiException {
        okhttp3.Call localVarCall = urlsSocialMediaGetValidateBeforeCall(url, returnUrls, browserRender, null);
        Type localVarReturnType = new TypeToken<SocialMedia>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get social media accounts (asynchronously)
     * Visits the URL and checks if there are any social media accounts and returns the found ones.  Will by default return the account identifiers and not the full URL to the profiles. To return URLs instead set the parameter \&quot;return_urls\&quot; to true.  The URLs can also be created manually like this:  | Property        | URL                                    | | --------------- | -------------------------------------- | | facebookPage    | https://facebook.com/{ID}              | | githubUser      | https://github.com/{ID}                | | googlePlus      | https://plus.google.com/+{ID}          | | instagram       | https://instagram.com/{ID}             | | linkedInCompany | https://linkedin.com/company/{ID}      | | pinterest       | https://pinterest.com/{ID}             | | twitter         | https://twitter.com/{ID}               | | youTubeUser     | https://youtube.com/user/{ID}          |  Properties only get set when a value for it has been found. That means that if no social media account has been found only the property \&quot;url\&quot; will be set. 
     * @param url The URL of the website to query (required)
     * @param returnUrls Returns profile URLs instead of the profile names/ids (optional, default to false)
     * @param browserRender If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1! (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Successful Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Request was unacceptable. Normally because of missing required parameters or invalid data. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - Authentication missing or failed. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request failed - All parameters were correct but the request failed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - The requested resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - Something went wrong on our side. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlsSocialMediaGetAsync(String url, Boolean returnUrls, Boolean browserRender, final ApiCallback<SocialMedia> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlsSocialMediaGetValidateBeforeCall(url, returnUrls, browserRender, _callback);
        Type localVarReturnType = new TypeToken<SocialMedia>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
