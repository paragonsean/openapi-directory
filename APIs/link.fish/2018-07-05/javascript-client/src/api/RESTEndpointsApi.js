/**
 * link.fish API
 * API to easily extract data from websites.   # Base URL   All URLs referenced in the documentation have the following base:   ``` https://api.link.fish ```   The REST API is only served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.   # Authentication HTTP requests to the REST API are protected with [HTTP Basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). You will use the email address of your link.fish account as the username and your API access token as the password for HTTP Basic authentication.  If you do not have an account yet, go to [https://link.fish/api](https://link.fish/api) and create one first.  You will receive the API access token automatically via email after you signed up. To generate a new token and invalidate the current one log into your link.fish  account at [https://app.link.fish](https://app.link.fish) and go to: \"Plugins\" -> \"API Dashboard\"  There you can also see how many credits you used already.   # Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format: ``` {    \"status\": {HTTP STATUS CODE}   \"message\": \"{ERROR MESSAGE}\" } ``` Like for example when the authorization is not provided or wrong: ``` {    \"status\": 401   \"message\": \"Unauthorized\" } ```  # Request IDs  Each API request has an associated request identifier. You can find it in the response headers, under X-LF-Request-Id. In case you have problems please provide this identifier that we can help you as good and fast as possible.   Example: ``` X-LF-Request-Id: f7f0036f-5277-421a-b143-f7a151571d18 ```   # Item format  The data is by default deeply nested. So if it should be checked if there is an offer with a price, the whole tree has to be checked. To make that simpler, it is also possible to return the data \"flat\". If selected it will flatten the tree by copying all the data to the main level under a property with the name of its type and link the data internally.  Information: We created a node module which allows converting between the two formats. It did not get open sourced yet. If you are in need, simply contact us via api@link.fish.   # Response Content Type By default, all data gets returned as JSON. If the data should be returned as XML add the following header:  ``` Accept: application/xml ```  # Credits  Depending on the request made a different amount of credits get charged. How many which request costs can be found on the [API pricing page](http://link.fish/api/#pricing). Additionally, does a  header named \"X-LF-Credits-Charged\" get added to each successful response with information about the credits.  Example: ``` X-LF-Credits-Charged: 1 # Credits used for current requests X-LF-Credits-Subscription-Max: 1000 # Total credits available in subscription X-LF-Credits-Subscription-Used: 512 # Credits still left in current month ``` You can check anytime how many credits you did use already by logging into your link.fish  account at [https://app.link.fish](https://app.link.fish) and checking under:  \"Plugins\" -> \"API Dashboard\"   If you have problems, questions or improvement advice please send us an email to api@link.fish 
 *
 * The version of the OpenAPI document: 2018-07-05
 * Contact: api@link.fish
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponsError from '../model/ApiResponsError';
import Apps from '../model/Apps';
import DataRaw from '../model/DataRaw';
import DataTabular from '../model/DataTabular';
import GeoCoordinates from '../model/GeoCoordinates';
import SocialMedia from '../model/SocialMedia';
import Url from '../model/Url';
import UrlBrowser from '../model/UrlBrowser';

/**
* RESTEndpoints service.
* @module api/RESTEndpointsApi
* @version 2018-07-05
*/
export default class RESTEndpointsApi {

    /**
    * Constructs a new RESTEndpointsApi. 
    * @alias module:api/RESTEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the urlsAppsGet operation.
     * @callback module:api/RESTEndpointsApi~urlsAppsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Apps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mobile apps
     * Visits the URL and checks if there are mobile apps on them and returns the found ones.  Will by default return the app identifiers and not the full URL to the apps. To return URLs instead set the parameter \"return_urls\" to true.  The URLs can also be created manually like this:  | Property | URL                                                | | -------- | -------------------------------------------------- | | android  | https://play.google.com/store/apps/details?id={ID} | | ios      | https://itunes.apple.com/us/app/app-name/id{ID}    |  Properties only get set when a value for it has been found. That means that if no app has been found only the property \"url\" will be set. 
     * @param {String} url The URL of the website to query
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnUrls = false)] Returns app URLs instead of the identifiers
     * @param {Boolean} [browserRender = false)] If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1!
     * @param {module:api/RESTEndpointsApi~urlsAppsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Apps}
     */
    urlsAppsGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsAppsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'return_urls': opts['returnUrls'],
        'browser_render': opts['browserRender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Apps;
      return this.apiClient.callApi(
        '/Urls/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsBrowserDataGet operation.
     * @callback module:api/RESTEndpointsApi~urlsBrowserDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlBrowser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract data (browser)
     * Visits the URL with a full browser and extracts the data. This request costs 5 credits.
     * @param {String} url The URL of the website to query
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [itemFormat = 'normal')] If the items should be return \"normal\" with multiple levels or \"flat\" with just one level and linked instead.
     * @param {Boolean} [simplifySpecialTypes = false)] Some types like \"PropertyValue\" do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -> value format.
     * @param {Boolean} [includeRawHtml = false)] Returns additionally also the raw HTML as property \"rawHtml\".
     * @param {module:model/String} [screenshot = 'none')] If and what kind of screenshot should be returned. Do only request screenshot generation when really needed because it will increase the response time significantly.
     * @param {Number} [screenshotWidth = 640)] The widh of the screenshot in pixel.
     * @param {module:model/String} [screenshotFileFormat = 'png')] The file format of the screenshot
     * @param {module:api/RESTEndpointsApi~urlsBrowserDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlBrowser}
     */
    urlsBrowserDataGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsBrowserDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'item_format': opts['itemFormat'],
        'simplify_special_types': opts['simplifySpecialTypes'],
        'include_raw_html': opts['includeRawHtml'],
        'screenshot': opts['screenshot'],
        'screenshot_width': opts['screenshotWidth'],
        'screenshot_file_format': opts['screenshotFileFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = UrlBrowser;
      return this.apiClient.callApi(
        '/Urls/browser-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsBrowserScreenshotGet operation.
     * @callback module:api/RESTEndpointsApi~urlsBrowserScreenshotGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate screenshot (browser)
     * Visits the URL with full browser and creates a screenshot. This request costs 5 credits.
     * @param {String} url The URL of the website to create screenshot of
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'normal')] What kind of screenshot should be returned. If it should be a regular 16:9 screenshot or one with the full page height
     * @param {module:model/String} [fileFormat = 'png')] The file format of the screenshot
     * @param {Number} [width = 640)] The widh of the screenshot in pixel.
     * @param {module:api/RESTEndpointsApi~urlsBrowserScreenshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    urlsBrowserScreenshotGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsBrowserScreenshotGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'type': opts['type'],
        'file_format': opts['fileFormat'],
        'width': opts['width']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['image/png', 'image/jpeg'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Urls/browser-screenshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsDataGet operation.
     * @callback module:api/RESTEndpointsApi~urlsDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Url} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract data
     * Visits the URL and extracts the data.
     * @param {String} url The URL of the website to query
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [itemFormat = 'normal')] If the items should be return \"normal\" with multiple levels or \"flat\" with just one level and linked instead.
     * @param {Boolean} [simplifySpecialTypes = false)] Some types like \"PropertyValue\" do save key and value in separate properties which makes the data harder to process. If this option gets set it converts them automatically into the regular key -> value format.
     * @param {Boolean} [includeRawHtml = false)] Returns additionally also the raw HTML as property \"rawHtml\".
     * @param {Boolean} [browserRender = false)] If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1!
     * @param {module:api/RESTEndpointsApi~urlsDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Url}
     */
    urlsDataGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'item_format': opts['itemFormat'],
        'simplify_special_types': opts['simplifySpecialTypes'],
        'include_raw_html': opts['includeRawHtml'],
        'browser_render': opts['browserRender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Url;
      return this.apiClient.callApi(
        '/Urls/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsDataRawGet operation.
     * @callback module:api/RESTEndpointsApi~urlsDataRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataRaw} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return data of JSON/XML
     * Visits the URL and extracts the data.
     * @param {String} url The URL to get the data of
     * @param {module:api/RESTEndpointsApi~urlsDataRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataRaw}
     */
    urlsDataRawGet(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsDataRawGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DataRaw;
      return this.apiClient.callApi(
        '/Urls/data-raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsDataTabularGet operation.
     * @callback module:api/RESTEndpointsApi~urlsDataTabularGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTabular} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return tabular data
     * Visits the URL and extracts tabular data.
     * @param {String} url The URL to get the data of
     * @param {Object} opts Optional parameters
     * @param {String} [selector] CSS selector to define tabular data which should get returned
     * @param {Boolean} [browserRender = false)] If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1!
     * @param {module:api/RESTEndpointsApi~urlsDataTabularGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTabular}
     */
    urlsDataTabularGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsDataTabularGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'selector': opts['selector'],
        'browser_render': opts['browserRender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DataTabular;
      return this.apiClient.callApi(
        '/Urls/data-tabular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsGeoCoordinatesGet operation.
     * @callback module:api/RESTEndpointsApi~urlsGeoCoordinatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoCoordinates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get geo coordinates
     * Visits the URL and checks if there are Geo Coordinates on them and returns the found ones.  Properties only get set when a value for both latitude and longitude have been found. That means that if no geo coordinates have been found only the property \"url\" will be set.
     * @param {String} url The URL of the website to query
     * @param {Object} opts Optional parameters
     * @param {Boolean} [browserRender = false)] If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1!
     * @param {module:api/RESTEndpointsApi~urlsGeoCoordinatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoCoordinates}
     */
    urlsGeoCoordinatesGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsGeoCoordinatesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'browser_render': opts['browserRender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GeoCoordinates;
      return this.apiClient.callApi(
        '/Urls/geo-coordinates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the urlsSocialMediaGet operation.
     * @callback module:api/RESTEndpointsApi~urlsSocialMediaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SocialMedia} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get social media accounts
     * Visits the URL and checks if there are any social media accounts and returns the found ones.  Will by default return the account identifiers and not the full URL to the profiles. To return URLs instead set the parameter \"return_urls\" to true.  The URLs can also be created manually like this:  | Property        | URL                                    | | --------------- | -------------------------------------- | | facebookPage    | https://facebook.com/{ID}              | | githubUser      | https://github.com/{ID}                | | googlePlus      | https://plus.google.com/+{ID}          | | instagram       | https://instagram.com/{ID}             | | linkedInCompany | https://linkedin.com/company/{ID}      | | pinterest       | https://pinterest.com/{ID}             | | twitter         | https://twitter.com/{ID}               | | youTubeUser     | https://youtube.com/user/{ID}          |  Properties only get set when a value for it has been found. That means that if no social media account has been found only the property \"url\" will be set. 
     * @param {String} url The URL of the website to query
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnUrls = false)] Returns profile URLs instead of the profile names/ids
     * @param {Boolean} [browserRender = false)] If the page should be fully rendered with a browser to extract data. The request will then cost 5 credits instead of 1!
     * @param {module:api/RESTEndpointsApi~urlsSocialMediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SocialMedia}
     */
    urlsSocialMediaGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling urlsSocialMediaGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'return_urls': opts['returnUrls'],
        'browser_render': opts['browserRender']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SocialMedia;
      return this.apiClient.callApi(
        '/Urls/social-media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
