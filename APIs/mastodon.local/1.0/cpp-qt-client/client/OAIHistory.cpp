/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistory::OAIHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistory::OAIHistory() {
    this->initializeModel();
}

OAIHistory::~OAIHistory() {}

void OAIHistory::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_uses_isSet = false;
    m_uses_isValid = false;
}

void OAIHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistory::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_uses_isValid = ::OpenAPI::fromJsonValue(m_uses, json[QString("uses")]);
    m_uses_isSet = !json[QString("uses")].isNull() && m_uses_isValid;
}

QString OAIHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts_isSet) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_uses_isSet) {
        obj.insert(QString("uses"), ::OpenAPI::toJsonValue(m_uses));
    }
    return obj;
}

QString OAIHistory::getAccounts() const {
    return m_accounts;
}
void OAIHistory::setAccounts(const QString &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIHistory::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIHistory::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIHistory::getDay() const {
    return m_day;
}
void OAIHistory::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIHistory::is_day_Set() const{
    return m_day_isSet;
}

bool OAIHistory::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIHistory::getUses() const {
    return m_uses;
}
void OAIHistory::setUses(const QString &uses) {
    m_uses = uses;
    m_uses_isSet = true;
}

bool OAIHistory::is_uses_Set() const{
    return m_uses_isSet;
}

bool OAIHistory::is_uses_Valid() const{
    return m_uses_isValid;
}

bool OAIHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounts_isValid && m_day_isValid && m_uses_isValid && true;
}

} // namespace OpenAPI
