/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRelationship.h
 *
 * Represents the relationship between accounts, such as following / blocking / muting / etc.
 */

#ifndef OAIRelationship_H
#define OAIRelationship_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRelationship : public OAIObject {
public:
    OAIRelationship();
    OAIRelationship(QString json);
    ~OAIRelationship() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBlockedBy() const;
    void setBlockedBy(const bool &blocked_by);
    bool is_blocked_by_Set() const;
    bool is_blocked_by_Valid() const;

    bool isBlocking() const;
    void setBlocking(const bool &blocking);
    bool is_blocking_Set() const;
    bool is_blocking_Valid() const;

    bool isDomainBlocking() const;
    void setDomainBlocking(const bool &domain_blocking);
    bool is_domain_blocking_Set() const;
    bool is_domain_blocking_Valid() const;

    bool isEndorsed() const;
    void setEndorsed(const bool &endorsed);
    bool is_endorsed_Set() const;
    bool is_endorsed_Valid() const;

    bool isFollowedBy() const;
    void setFollowedBy(const bool &followed_by);
    bool is_followed_by_Set() const;
    bool is_followed_by_Valid() const;

    bool isFollowing() const;
    void setFollowing(const bool &following);
    bool is_following_Set() const;
    bool is_following_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isMuting() const;
    void setMuting(const bool &muting);
    bool is_muting_Set() const;
    bool is_muting_Valid() const;

    bool isMutingNotifications() const;
    void setMutingNotifications(const bool &muting_notifications);
    bool is_muting_notifications_Set() const;
    bool is_muting_notifications_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    bool isNotifying() const;
    void setNotifying(const bool &notifying);
    bool is_notifying_Set() const;
    bool is_notifying_Valid() const;

    bool isRequested() const;
    void setRequested(const bool &requested);
    bool is_requested_Set() const;
    bool is_requested_Valid() const;

    bool isShowingReblogs() const;
    void setShowingReblogs(const bool &showing_reblogs);
    bool is_showing_reblogs_Set() const;
    bool is_showing_reblogs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_blocked_by;
    bool m_blocked_by_isSet;
    bool m_blocked_by_isValid;

    bool m_blocking;
    bool m_blocking_isSet;
    bool m_blocking_isValid;

    bool m_domain_blocking;
    bool m_domain_blocking_isSet;
    bool m_domain_blocking_isValid;

    bool m_endorsed;
    bool m_endorsed_isSet;
    bool m_endorsed_isValid;

    bool m_followed_by;
    bool m_followed_by_isSet;
    bool m_followed_by_isValid;

    bool m_following;
    bool m_following_isSet;
    bool m_following_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_muting;
    bool m_muting_isSet;
    bool m_muting_isValid;

    bool m_muting_notifications;
    bool m_muting_notifications_isSet;
    bool m_muting_notifications_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    bool m_notifying;
    bool m_notifying_isSet;
    bool m_notifying_isValid;

    bool m_requested;
    bool m_requested_isSet;
    bool m_requested_isValid;

    bool m_showing_reblogs;
    bool m_showing_reblogs_isSet;
    bool m_showing_reblogs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRelationship)

#endif // OAIRelationship_H
