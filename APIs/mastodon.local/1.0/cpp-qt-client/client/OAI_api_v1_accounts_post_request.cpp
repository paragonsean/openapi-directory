/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_accounts_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_accounts_post_request::OAI_api_v1_accounts_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_accounts_post_request::OAI_api_v1_accounts_post_request() {
    this->initializeModel();
}

OAI_api_v1_accounts_post_request::~OAI_api_v1_accounts_post_request() {}

void OAI_api_v1_accounts_post_request::initializeModel() {

    m_agreement_isSet = false;
    m_agreement_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAI_api_v1_accounts_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_accounts_post_request::fromJsonObject(QJsonObject json) {

    m_agreement_isValid = ::OpenAPI::fromJsonValue(m_agreement, json[QString("agreement")]);
    m_agreement_isSet = !json[QString("agreement")].isNull() && m_agreement_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAI_api_v1_accounts_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_accounts_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_isSet) {
        obj.insert(QString("agreement"), ::OpenAPI::toJsonValue(m_agreement));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAI_api_v1_accounts_post_request::isAgreement() const {
    return m_agreement;
}
void OAI_api_v1_accounts_post_request::setAgreement(const bool &agreement) {
    m_agreement = agreement;
    m_agreement_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_agreement_Set() const{
    return m_agreement_isSet;
}

bool OAI_api_v1_accounts_post_request::is_agreement_Valid() const{
    return m_agreement_isValid;
}

QString OAI_api_v1_accounts_post_request::getEmail() const {
    return m_email;
}
void OAI_api_v1_accounts_post_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAI_api_v1_accounts_post_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAI_api_v1_accounts_post_request::getLocale() const {
    return m_locale;
}
void OAI_api_v1_accounts_post_request::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAI_api_v1_accounts_post_request::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAI_api_v1_accounts_post_request::getPassword() const {
    return m_password;
}
void OAI_api_v1_accounts_post_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAI_api_v1_accounts_post_request::is_password_Valid() const{
    return m_password_isValid;
}

QString OAI_api_v1_accounts_post_request::getReason() const {
    return m_reason;
}
void OAI_api_v1_accounts_post_request::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAI_api_v1_accounts_post_request::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAI_api_v1_accounts_post_request::getUsername() const {
    return m_username;
}
void OAI_api_v1_accounts_post_request::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAI_api_v1_accounts_post_request::is_username_Set() const{
    return m_username_isSet;
}

bool OAI_api_v1_accounts_post_request::is_username_Valid() const{
    return m_username_isValid;
}

bool OAI_api_v1_accounts_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_accounts_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agreement_isValid && m_email_isValid && m_locale_isValid && m_password_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
