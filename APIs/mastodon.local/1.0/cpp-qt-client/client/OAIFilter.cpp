/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_irreversible_isSet = false;
    m_irreversible_isValid = false;

    m_phrase_isSet = false;
    m_phrase_isValid = false;

    m_whole_word_isSet = false;
    m_whole_word_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_irreversible_isValid = ::OpenAPI::fromJsonValue(m_irreversible, json[QString("irreversible")]);
    m_irreversible_isSet = !json[QString("irreversible")].isNull() && m_irreversible_isValid;

    m_phrase_isValid = ::OpenAPI::fromJsonValue(m_phrase, json[QString("phrase")]);
    m_phrase_isSet = !json[QString("phrase")].isNull() && m_phrase_isValid;

    m_whole_word_isValid = ::OpenAPI::fromJsonValue(m_whole_word, json[QString("whole_word")]);
    m_whole_word_isSet = !json[QString("whole_word")].isNull() && m_whole_word_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_irreversible_isSet) {
        obj.insert(QString("irreversible"), ::OpenAPI::toJsonValue(m_irreversible));
    }
    if (m_phrase_isSet) {
        obj.insert(QString("phrase"), ::OpenAPI::toJsonValue(m_phrase));
    }
    if (m_whole_word_isSet) {
        obj.insert(QString("whole_word"), ::OpenAPI::toJsonValue(m_whole_word));
    }
    return obj;
}

QList<QString> OAIFilter::getContext() const {
    return m_context;
}
void OAIFilter::setContext(const QList<QString> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIFilter::is_context_Set() const{
    return m_context_isSet;
}

bool OAIFilter::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIFilter::getExpiresAt() const {
    return m_expires_at;
}
void OAIFilter::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIFilter::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIFilter::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIFilter::getId() const {
    return m_id;
}
void OAIFilter::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFilter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFilter::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIFilter::isIrreversible() const {
    return m_irreversible;
}
void OAIFilter::setIrreversible(const bool &irreversible) {
    m_irreversible = irreversible;
    m_irreversible_isSet = true;
}

bool OAIFilter::is_irreversible_Set() const{
    return m_irreversible_isSet;
}

bool OAIFilter::is_irreversible_Valid() const{
    return m_irreversible_isValid;
}

QString OAIFilter::getPhrase() const {
    return m_phrase;
}
void OAIFilter::setPhrase(const QString &phrase) {
    m_phrase = phrase;
    m_phrase_isSet = true;
}

bool OAIFilter::is_phrase_Set() const{
    return m_phrase_isSet;
}

bool OAIFilter::is_phrase_Valid() const{
    return m_phrase_isValid;
}

bool OAIFilter::isWholeWord() const {
    return m_whole_word;
}
void OAIFilter::setWholeWord(const bool &whole_word) {
    m_whole_word = whole_word;
    m_whole_word_isSet = true;
}

bool OAIFilter::is_whole_word_Set() const{
    return m_whole_word_isSet;
}

bool OAIFilter::is_whole_word_Valid() const{
    return m_whole_word_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_irreversible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whole_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
