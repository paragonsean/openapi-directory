/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoll.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoll::OAIPoll(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoll::OAIPoll() {
    this->initializeModel();
}

OAIPoll::~OAIPoll() {}

void OAIPoll::initializeModel() {

    m_emojis_isSet = false;
    m_emojis_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multiple_isSet = false;
    m_multiple_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_own_votes_isSet = false;
    m_own_votes_isValid = false;

    m_voted_isSet = false;
    m_voted_isValid = false;

    m_voters_count_isSet = false;
    m_voters_count_isValid = false;

    m_votes_count_isSet = false;
    m_votes_count_isValid = false;
}

void OAIPoll::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoll::fromJsonObject(QJsonObject json) {

    m_emojis_isValid = ::OpenAPI::fromJsonValue(m_emojis, json[QString("emojis")]);
    m_emojis_isSet = !json[QString("emojis")].isNull() && m_emojis_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multiple_isValid = ::OpenAPI::fromJsonValue(m_multiple, json[QString("multiple")]);
    m_multiple_isSet = !json[QString("multiple")].isNull() && m_multiple_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_own_votes_isValid = ::OpenAPI::fromJsonValue(m_own_votes, json[QString("own_votes")]);
    m_own_votes_isSet = !json[QString("own_votes")].isNull() && m_own_votes_isValid;

    m_voted_isValid = ::OpenAPI::fromJsonValue(m_voted, json[QString("voted")]);
    m_voted_isSet = !json[QString("voted")].isNull() && m_voted_isValid;

    m_voters_count_isValid = ::OpenAPI::fromJsonValue(m_voters_count, json[QString("voters_count")]);
    m_voters_count_isSet = !json[QString("voters_count")].isNull() && m_voters_count_isValid;

    m_votes_count_isValid = ::OpenAPI::fromJsonValue(m_votes_count, json[QString("votes_count")]);
    m_votes_count_isSet = !json[QString("votes_count")].isNull() && m_votes_count_isValid;
}

QString OAIPoll::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoll::asJsonObject() const {
    QJsonObject obj;
    if (m_emojis.size() > 0) {
        obj.insert(QString("emojis"), ::OpenAPI::toJsonValue(m_emojis));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multiple_isSet) {
        obj.insert(QString("multiple"), ::OpenAPI::toJsonValue(m_multiple));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_own_votes.size() > 0) {
        obj.insert(QString("own_votes"), ::OpenAPI::toJsonValue(m_own_votes));
    }
    if (m_voted_isSet) {
        obj.insert(QString("voted"), ::OpenAPI::toJsonValue(m_voted));
    }
    if (m_voters_count_isSet) {
        obj.insert(QString("voters_count"), ::OpenAPI::toJsonValue(m_voters_count));
    }
    if (m_votes_count_isSet) {
        obj.insert(QString("votes_count"), ::OpenAPI::toJsonValue(m_votes_count));
    }
    return obj;
}

QList<OAIEmoji> OAIPoll::getEmojis() const {
    return m_emojis;
}
void OAIPoll::setEmojis(const QList<OAIEmoji> &emojis) {
    m_emojis = emojis;
    m_emojis_isSet = true;
}

bool OAIPoll::is_emojis_Set() const{
    return m_emojis_isSet;
}

bool OAIPoll::is_emojis_Valid() const{
    return m_emojis_isValid;
}

bool OAIPoll::isExpired() const {
    return m_expired;
}
void OAIPoll::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIPoll::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIPoll::is_expired_Valid() const{
    return m_expired_isValid;
}

QDateTime OAIPoll::getExpiresAt() const {
    return m_expires_at;
}
void OAIPoll::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIPoll::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIPoll::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIPoll::getId() const {
    return m_id;
}
void OAIPoll::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPoll::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPoll::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPoll::isMultiple() const {
    return m_multiple;
}
void OAIPoll::setMultiple(const bool &multiple) {
    m_multiple = multiple;
    m_multiple_isSet = true;
}

bool OAIPoll::is_multiple_Set() const{
    return m_multiple_isSet;
}

bool OAIPoll::is_multiple_Valid() const{
    return m_multiple_isValid;
}

QList<QJsonValue> OAIPoll::getOptions() const {
    return m_options;
}
void OAIPoll::setOptions(const QList<QJsonValue> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIPoll::is_options_Set() const{
    return m_options_isSet;
}

bool OAIPoll::is_options_Valid() const{
    return m_options_isValid;
}

QList<qint32> OAIPoll::getOwnVotes() const {
    return m_own_votes;
}
void OAIPoll::setOwnVotes(const QList<qint32> &own_votes) {
    m_own_votes = own_votes;
    m_own_votes_isSet = true;
}

bool OAIPoll::is_own_votes_Set() const{
    return m_own_votes_isSet;
}

bool OAIPoll::is_own_votes_Valid() const{
    return m_own_votes_isValid;
}

bool OAIPoll::isVoted() const {
    return m_voted;
}
void OAIPoll::setVoted(const bool &voted) {
    m_voted = voted;
    m_voted_isSet = true;
}

bool OAIPoll::is_voted_Set() const{
    return m_voted_isSet;
}

bool OAIPoll::is_voted_Valid() const{
    return m_voted_isValid;
}

qint32 OAIPoll::getVotersCount() const {
    return m_voters_count;
}
void OAIPoll::setVotersCount(const qint32 &voters_count) {
    m_voters_count = voters_count;
    m_voters_count_isSet = true;
}

bool OAIPoll::is_voters_count_Set() const{
    return m_voters_count_isSet;
}

bool OAIPoll::is_voters_count_Valid() const{
    return m_voters_count_isValid;
}

qint32 OAIPoll::getVotesCount() const {
    return m_votes_count;
}
void OAIPoll::setVotesCount(const qint32 &votes_count) {
    m_votes_count = votes_count;
    m_votes_count_isSet = true;
}

bool OAIPoll::is_votes_count_Set() const{
    return m_votes_count_isSet;
}

bool OAIPoll::is_votes_count_Valid() const{
    return m_votes_count_isValid;
}

bool OAIPoll::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emojis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_votes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voters_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoll::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
