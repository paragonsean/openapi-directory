/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccount.h
 *
 * Represents a user of Mastodon and their associated profile.
 */

#ifndef OAIAccount_H
#define OAIAccount_H

#include <QJsonObject>

#include "OAIEmoji.h"
#include "OAIField.h"
#include "OAISource.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEmoji;
class OAIField;
class OAISource;

class OAIAccount : public OAIObject {
public:
    OAIAccount();
    OAIAccount(QString json);
    ~OAIAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcct() const;
    void setAcct(const QString &acct);
    bool is_acct_Set() const;
    bool is_acct_Valid() const;

    QString getAvatar() const;
    void setAvatar(const QString &avatar);
    bool is_avatar_Set() const;
    bool is_avatar_Valid() const;

    QString getAvatarStatic() const;
    void setAvatarStatic(const QString &avatar_static);
    bool is_avatar_static_Set() const;
    bool is_avatar_static_Valid() const;

    bool isBot() const;
    void setBot(const bool &bot);
    bool is_bot_Set() const;
    bool is_bot_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    bool isDiscoverable() const;
    void setDiscoverable(const bool &discoverable);
    bool is_discoverable_Set() const;
    bool is_discoverable_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<OAIEmoji> getEmojis() const;
    void setEmojis(const QList<OAIEmoji> &emojis);
    bool is_emojis_Set() const;
    bool is_emojis_Valid() const;

    QList<OAIField> getFields() const;
    void setFields(const QList<OAIField> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    qint32 getFollowersCount() const;
    void setFollowersCount(const qint32 &followers_count);
    bool is_followers_count_Set() const;
    bool is_followers_count_Valid() const;

    qint32 getFollowingCount() const;
    void setFollowingCount(const qint32 &following_count);
    bool is_following_count_Set() const;
    bool is_following_count_Valid() const;

    QString getHeader() const;
    void setHeader(const QString &header);
    bool is_header_Set() const;
    bool is_header_Valid() const;

    QString getHeaderStatic() const;
    void setHeaderStatic(const QString &header_static);
    bool is_header_static_Set() const;
    bool is_header_static_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastStatusAt() const;
    void setLastStatusAt(const QDateTime &last_status_at);
    bool is_last_status_at_Set() const;
    bool is_last_status_at_Valid() const;

    bool isLocked() const;
    void setLocked(const bool &locked);
    bool is_locked_Set() const;
    bool is_locked_Valid() const;

    OAIAccount getMoved() const;
    void setMoved(const OAIAccount &moved);
    bool is_moved_Set() const;
    bool is_moved_Valid() const;

    QDateTime getMuteExpiresAt() const;
    void setMuteExpiresAt(const QDateTime &mute_expires_at);
    bool is_mute_expires_at_Set() const;
    bool is_mute_expires_at_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    OAISource getSource() const;
    void setSource(const OAISource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    qint32 getStatusesCount() const;
    void setStatusesCount(const qint32 &statuses_count);
    bool is_statuses_count_Set() const;
    bool is_statuses_count_Valid() const;

    bool isSuspended() const;
    void setSuspended(const bool &suspended);
    bool is_suspended_Set() const;
    bool is_suspended_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acct;
    bool m_acct_isSet;
    bool m_acct_isValid;

    QString m_avatar;
    bool m_avatar_isSet;
    bool m_avatar_isValid;

    QString m_avatar_static;
    bool m_avatar_static_isSet;
    bool m_avatar_static_isValid;

    bool m_bot;
    bool m_bot_isSet;
    bool m_bot_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    bool m_discoverable;
    bool m_discoverable_isSet;
    bool m_discoverable_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<OAIEmoji> m_emojis;
    bool m_emojis_isSet;
    bool m_emojis_isValid;

    QList<OAIField> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    qint32 m_followers_count;
    bool m_followers_count_isSet;
    bool m_followers_count_isValid;

    qint32 m_following_count;
    bool m_following_count_isSet;
    bool m_following_count_isValid;

    QString m_header;
    bool m_header_isSet;
    bool m_header_isValid;

    QString m_header_static;
    bool m_header_static_isSet;
    bool m_header_static_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_status_at;
    bool m_last_status_at_isSet;
    bool m_last_status_at_isValid;

    bool m_locked;
    bool m_locked_isSet;
    bool m_locked_isValid;

    OAIAccount m_moved;
    bool m_moved_isSet;
    bool m_moved_isValid;

    QDateTime m_mute_expires_at;
    bool m_mute_expires_at_isSet;
    bool m_mute_expires_at_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    OAISource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    qint32 m_statuses_count;
    bool m_statuses_count_isSet;
    bool m_statuses_count_isValid;

    bool m_suspended;
    bool m_suspended_isSet;
    bool m_suspended_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccount)

#endif // OAIAccount_H
