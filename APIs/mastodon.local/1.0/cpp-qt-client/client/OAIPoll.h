/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPoll.h
 *
 * Represents a poll attached to a status.
 */

#ifndef OAIPoll_H
#define OAIPoll_H

#include <QJsonObject>

#include "OAIEmoji.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEmoji;

class OAIPoll : public OAIObject {
public:
    OAIPoll();
    OAIPoll(QString json);
    ~OAIPoll() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIEmoji> getEmojis() const;
    void setEmojis(const QList<OAIEmoji> &emojis);
    bool is_emojis_Set() const;
    bool is_emojis_Valid() const;

    bool isExpired() const;
    void setExpired(const bool &expired);
    bool is_expired_Set() const;
    bool is_expired_Valid() const;

    QDateTime getExpiresAt() const;
    void setExpiresAt(const QDateTime &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isMultiple() const;
    void setMultiple(const bool &multiple);
    bool is_multiple_Set() const;
    bool is_multiple_Valid() const;

    QList<QJsonValue> getOptions() const;
    void setOptions(const QList<QJsonValue> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    QList<qint32> getOwnVotes() const;
    void setOwnVotes(const QList<qint32> &own_votes);
    bool is_own_votes_Set() const;
    bool is_own_votes_Valid() const;

    bool isVoted() const;
    void setVoted(const bool &voted);
    bool is_voted_Set() const;
    bool is_voted_Valid() const;

    qint32 getVotersCount() const;
    void setVotersCount(const qint32 &voters_count);
    bool is_voters_count_Set() const;
    bool is_voters_count_Valid() const;

    qint32 getVotesCount() const;
    void setVotesCount(const qint32 &votes_count);
    bool is_votes_count_Set() const;
    bool is_votes_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIEmoji> m_emojis;
    bool m_emojis_isSet;
    bool m_emojis_isValid;

    bool m_expired;
    bool m_expired_isSet;
    bool m_expired_isValid;

    QDateTime m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_multiple;
    bool m_multiple_isSet;
    bool m_multiple_isValid;

    QList<QJsonValue> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    QList<qint32> m_own_votes;
    bool m_own_votes_isSet;
    bool m_own_votes_isValid;

    bool m_voted;
    bool m_voted_isSet;
    bool m_voted_isValid;

    qint32 m_voters_count;
    bool m_voters_count_isSet;
    bool m_voters_count_isValid;

    qint32 m_votes_count;
    bool m_votes_count_isSet;
    bool m_votes_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPoll)

#endif // OAIPoll_H
