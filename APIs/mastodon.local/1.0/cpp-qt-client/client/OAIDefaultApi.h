/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIActivity.h"
#include "OAIAdminAccount.h"
#include "OAIAdminReport.h"
#include "OAIAnnouncement.h"
#include "OAIAttachment.h"
#include "OAICard.h"
#include "OAIContext.h"
#include "OAIConversation.h"
#include "OAIEmoji.h"
#include "OAIError.h"
#include "OAIFeaturedTag.h"
#include "OAIFilter.h"
#include "OAIIdentityProof.h"
#include "OAIInstance.h"
#include "OAIList.h"
#include "OAINotification.h"
#include "OAIObject.h"
#include "OAIPoll.h"
#include "OAIPreferences.h"
#include "OAIPushSubscription.h"
#include "OAIRelationship.h"
#include "OAIReport.h"
#include "OAIScheduledStatus.h"
#include "OAIStatus.h"
#include "OAITag.h"
#include "OAI_api_v1_admin_accounts__id__action_post_request.h"
#include "OAI_api_v1_domain_blocks_post_request.h"
#include "OAI_api_v1_featured_tags_post_request.h"
#include "OAI_api_v1_filters_post_request.h"
#include "OAI_api_v1_lists__id__accounts_post_request.h"
#include "OAI_api_v1_lists_post_request.h"
#include "OAI_api_v1_lists_put_request.h"
#include "OAI_api_v1_media_post_request.h"
#include "OAI_api_v1_polls__id__post_request.h"
#include "OAI_api_v1_push_subscription_post_request.h"
#include "OAI_api_v1_push_subscription_put_request.h"
#include "OAI_api_v1_reports_post_request.h"
#include "OAI_api_v1_scheduled_statuses__id__put_request.h"
#include "OAI_api_v1_statuses__id__reblog_post_request.h"
#include "OAI_api_v1_statuses_post_200_response.h"
#include "OAI_api_v1_statuses_post_request_inner.h"
#include "OAI_api_v2_search_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [optional]
    * @param[in]  maxwidth qint32 [optional]
    * @param[in]  maxheight qint32 [optional]
    */
    virtual void apiOembedGet(const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxwidth = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &maxheight = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  provider QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void apiProofsGet(const ::OpenAPI::OptionalParam<QString> &provider = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  local bool [optional]
    * @param[in]  remote bool [optional]
    * @param[in]  by_domain QString [optional]
    * @param[in]  active bool [optional]
    * @param[in]  pending bool [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  silenced bool [optional]
    * @param[in]  suspended bool [optional]
    * @param[in]  staff bool [optional]
    * @param[in]  username QString [optional]
    * @param[in]  display_name QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ip QString [optional]
    */
    virtual void apiV1AdminAccountsGet(const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &remote = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &by_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &silenced = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &suspended = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &staff = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_admin_accounts__id__action_post_request OAI_api_v1_admin_accounts__id__action_post_request [optional]
    */
    virtual void apiV1AdminAccountsIdActionPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_admin_accounts__id__action_post_request> &oai_api_v1_admin_accounts__id__action_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_admin_accounts__id__action_post_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdApprovePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdEnablePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdRejectPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdUnsilencePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminAccountsIdUnsuspendPost(const QString &id);

    /**
    * @param[in]  resolved bool [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  target_account_id QString [optional]
    */
    virtual void apiV1AdminReportsGet(const ::OpenAPI::OptionalParam<bool> &resolved = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminReportsIdAssignToSelfPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminReportsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminReportsIdReopenPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminReportsIdResolvePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AdminReportsIdUnassignPost(const QString &id);

    /**
    * @param[in]  with_dismissed bool [optional]
    */
    virtual void apiV1AnnouncementsGet(const ::OpenAPI::OptionalParam<bool> &with_dismissed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AnnouncementsIdDismissPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void apiV1AnnouncementsIdReactionsNameDelete(const QString &id, const QString &name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void apiV1AnnouncementsIdReactionsNamePut(const QString &id, const QString &name);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    */
    virtual void apiV1BlocksGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1BookmarksGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1ConversationsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1ConversationsIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1ConversationsIdReadPost(const QString &id);


    virtual void apiV1CustomEmojisGet();

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  local bool [optional]
    */
    virtual void apiV1DirectoryGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain QString [required]
    */
    virtual void apiV1DomainBlocksDelete(const QString &domain);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    */
    virtual void apiV1DomainBlocksGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_api_v1_domain_blocks_post_request OAI_api_v1_domain_blocks_post_request [optional]
    */
    virtual void apiV1DomainBlocksPost(const ::OpenAPI::OptionalParam<OAI_api_v1_domain_blocks_post_request> &oai_api_v1_domain_blocks_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_domain_blocks_post_request>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    */
    virtual void apiV1EndorsementsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1FavouritesGet(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());


    virtual void apiV1FeaturedTagsGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1FeaturedTagsIdDelete(const QString &id);

    /**
    * @param[in]  oai_api_v1_featured_tags_post_request OAI_api_v1_featured_tags_post_request [optional]
    */
    virtual void apiV1FeaturedTagsPost(const ::OpenAPI::OptionalParam<OAI_api_v1_featured_tags_post_request> &oai_api_v1_featured_tags_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_featured_tags_post_request>());


    virtual void apiV1FeaturedTagsSuggestionsGet();


    virtual void apiV1FiltersGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1FiltersIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1FiltersIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_filters_post_request OAI_api_v1_filters_post_request [optional]
    */
    virtual void apiV1FiltersIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_filters_post_request> &oai_api_v1_filters_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_filters_post_request>());

    /**
    * @param[in]  oai_api_v1_filters_post_request OAI_api_v1_filters_post_request [optional]
    */
    virtual void apiV1FiltersPost(const ::OpenAPI::OptionalParam<OAI_api_v1_filters_post_request> &oai_api_v1_filters_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_filters_post_request>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV1FollowRequestsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1FollowRequestsIdAuthorizePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1FollowRequestsIdRejectPost(const QString &id);


    virtual void apiV1InstanceActivityGet();


    virtual void apiV1InstanceGet();


    virtual void apiV1InstancePeersGet();


    virtual void apiV1ListsDelete();


    virtual void apiV1ListsGet();

    /**
    * @param[in]  id QString [required]
    * @param[in]  account_ids QList<QString> [required]
    */
    virtual void apiV1ListsIdAccountsDelete(const QString &id, const QList<QString> &account_ids);

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    */
    virtual void apiV1ListsIdAccountsGet(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_lists__id__accounts_post_request OAI_api_v1_lists__id__accounts_post_request [optional]
    */
    virtual void apiV1ListsIdAccountsPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_lists__id__accounts_post_request> &oai_api_v1_lists__id__accounts_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_lists__id__accounts_post_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1ListsIdGet(const QString &id);

    /**
    * @param[in]  oai_api_v1_lists_post_request OAI_api_v1_lists_post_request [optional]
    */
    virtual void apiV1ListsPost(const ::OpenAPI::OptionalParam<OAI_api_v1_lists_post_request> &oai_api_v1_lists_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_lists_post_request>());

    /**
    * @param[in]  oai_api_v1_lists_put_request OAI_api_v1_lists_put_request [optional]
    */
    virtual void apiV1ListsPut(const ::OpenAPI::OptionalParam<OAI_api_v1_lists_put_request> &oai_api_v1_lists_put_request = ::OpenAPI::OptionalParam<OAI_api_v1_lists_put_request>());

    /**
    * @param[in]  timeline QList<OAIObject> [required]
    */
    virtual void apiV1MarkersGet(const QList<OAIObject> &timeline);

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void apiV1MarkersPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1MediaIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_media_post_request OAI_api_v1_media_post_request [optional]
    */
    virtual void apiV1MediaIdPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_media_post_request> &oai_api_v1_media_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_media_post_request>());

    /**
    * @param[in]  oai_api_v1_media_post_request OAI_api_v1_media_post_request [optional]
    */
    virtual void apiV1MediaPost(const ::OpenAPI::OptionalParam<OAI_api_v1_media_post_request> &oai_api_v1_media_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_media_post_request>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    */
    virtual void apiV1MutesGet(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>());


    virtual void apiV1NotificationsClearPost();

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    * @param[in]  exclude_types QList<QString> [optional]
    * @param[in]  account_id QString [optional]
    */
    virtual void apiV1NotificationsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1NotificationsIdDismissPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1NotificationsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1PollsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_polls__id__post_request OAI_api_v1_polls__id__post_request [optional]
    */
    virtual void apiV1PollsIdPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_polls__id__post_request> &oai_api_v1_polls__id__post_request = ::OpenAPI::OptionalParam<OAI_api_v1_polls__id__post_request>());


    virtual void apiV1PreferencesGet();


    virtual void apiV1PushSubscriptionDelete();


    virtual void apiV1PushSubscriptionGet();

    /**
    * @param[in]  oai_api_v1_push_subscription_post_request OAI_api_v1_push_subscription_post_request [optional]
    */
    virtual void apiV1PushSubscriptionPost(const ::OpenAPI::OptionalParam<OAI_api_v1_push_subscription_post_request> &oai_api_v1_push_subscription_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_push_subscription_post_request>());

    /**
    * @param[in]  oai_api_v1_push_subscription_put_request OAI_api_v1_push_subscription_put_request [optional]
    */
    virtual void apiV1PushSubscriptionPut(const ::OpenAPI::OptionalParam<OAI_api_v1_push_subscription_put_request> &oai_api_v1_push_subscription_put_request = ::OpenAPI::OptionalParam<OAI_api_v1_push_subscription_put_request>());

    /**
    * @param[in]  oai_api_v1_reports_post_request OAI_api_v1_reports_post_request [optional]
    */
    virtual void apiV1ReportsPost(const ::OpenAPI::OptionalParam<OAI_api_v1_reports_post_request> &oai_api_v1_reports_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_reports_post_request>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1ScheduledStatusesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1ScheduledStatusesIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1ScheduledStatusesIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_scheduled_statuses__id__put_request OAI_api_v1_scheduled_statuses__id__put_request [optional]
    */
    virtual void apiV1ScheduledStatusesIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_scheduled_statuses__id__put_request> &oai_api_v1_scheduled_statuses__id__put_request = ::OpenAPI::OptionalParam<OAI_api_v1_scheduled_statuses__id__put_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdBookmarkPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdContextGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdFavouritePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdFavouritedByGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdMutePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdPinPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_statuses__id__reblog_post_request OAI_api_v1_statuses__id__reblog_post_request [optional]
    */
    virtual void apiV1StatusesIdReblogPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_statuses__id__reblog_post_request> &oai_api_v1_statuses__id__reblog_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_statuses__id__reblog_post_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdRebloggedByGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdUnbookmarkPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdUnfavouritePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdUnmutePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdUnpinPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1StatusesIdUnreblogPost(const QString &id);

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_api_v1_statuses_post_request_inner QList<OAI_api_v1_statuses_post_request_inner> [optional]
    */
    virtual void apiV1StatusesPost(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAI_api_v1_statuses_post_request_inner>> &oai_api_v1_statuses_post_request_inner = ::OpenAPI::OptionalParam<QList<OAI_api_v1_statuses_post_request_inner>>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV1SuggestionsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1SuggestionsIdDelete(const QString &id);

    /**
    * @param[in]  local bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1TimelinesHomeGet(const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1TimelinesListListIdGet(const QString &list_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  local bool [optional]
    * @param[in]  remote bool [optional]
    * @param[in]  only_media bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1TimelinesPublicGet(const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &remote = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hashtag QString [required]
    * @param[in]  local bool [optional]
    * @param[in]  remote bool [optional]
    * @param[in]  only_media bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  min_id QString [optional]
    */
    virtual void apiV1TimelinesTagHashtagGet(const QString &hashtag, const ::OpenAPI::OptionalParam<bool> &local = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &remote = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &only_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV1TrendsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  resolve QString [optional]
    * @param[in]  following bool [optional]
    * @param[in]  account_id QString [optional]
    * @param[in]  max_id QString [optional]
    * @param[in]  min_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  exclude_unreviewed bool [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void apiV2SearchGet(const QString &q, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &resolve = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &following = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_unreviewed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiOembedGetCallback(OAIHttpRequestWorker *worker);
    void apiProofsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdActionPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdApprovePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdEnablePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdRejectPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdUnsilencePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdUnsuspendPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsIdAssignToSelfPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsIdReopenPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsIdResolvePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsIdUnassignPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AnnouncementsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AnnouncementsIdDismissPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AnnouncementsIdReactionsNameDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1AnnouncementsIdReactionsNamePutCallback(OAIHttpRequestWorker *worker);
    void apiV1BlocksGetCallback(OAIHttpRequestWorker *worker);
    void apiV1BookmarksGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ConversationsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ConversationsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1ConversationsIdReadPostCallback(OAIHttpRequestWorker *worker);
    void apiV1CustomEmojisGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DirectoryGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DomainBlocksDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1DomainBlocksGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DomainBlocksPostCallback(OAIHttpRequestWorker *worker);
    void apiV1EndorsementsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FavouritesGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FeaturedTagsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FeaturedTagsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1FeaturedTagsPostCallback(OAIHttpRequestWorker *worker);
    void apiV1FeaturedTagsSuggestionsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FiltersGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FiltersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1FiltersIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FiltersIdPutCallback(OAIHttpRequestWorker *worker);
    void apiV1FiltersPostCallback(OAIHttpRequestWorker *worker);
    void apiV1FollowRequestsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1FollowRequestsIdAuthorizePostCallback(OAIHttpRequestWorker *worker);
    void apiV1FollowRequestsIdRejectPostCallback(OAIHttpRequestWorker *worker);
    void apiV1InstanceActivityGetCallback(OAIHttpRequestWorker *worker);
    void apiV1InstanceGetCallback(OAIHttpRequestWorker *worker);
    void apiV1InstancePeersGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsIdAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsIdAccountsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsIdAccountsPostCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsPostCallback(OAIHttpRequestWorker *worker);
    void apiV1ListsPutCallback(OAIHttpRequestWorker *worker);
    void apiV1MarkersGetCallback(OAIHttpRequestWorker *worker);
    void apiV1MarkersPostCallback(OAIHttpRequestWorker *worker);
    void apiV1MediaIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1MediaIdPostCallback(OAIHttpRequestWorker *worker);
    void apiV1MediaPostCallback(OAIHttpRequestWorker *worker);
    void apiV1MutesGetCallback(OAIHttpRequestWorker *worker);
    void apiV1NotificationsClearPostCallback(OAIHttpRequestWorker *worker);
    void apiV1NotificationsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1NotificationsIdDismissPostCallback(OAIHttpRequestWorker *worker);
    void apiV1NotificationsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1PollsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1PollsIdPostCallback(OAIHttpRequestWorker *worker);
    void apiV1PreferencesGetCallback(OAIHttpRequestWorker *worker);
    void apiV1PushSubscriptionDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1PushSubscriptionGetCallback(OAIHttpRequestWorker *worker);
    void apiV1PushSubscriptionPostCallback(OAIHttpRequestWorker *worker);
    void apiV1PushSubscriptionPutCallback(OAIHttpRequestWorker *worker);
    void apiV1ReportsPostCallback(OAIHttpRequestWorker *worker);
    void apiV1ScheduledStatusesGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ScheduledStatusesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1ScheduledStatusesIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1ScheduledStatusesIdPutCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdBookmarkPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdContextGetCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdFavouritePostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdFavouritedByGetCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdMutePostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdPinPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdReblogPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdRebloggedByGetCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdUnbookmarkPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdUnfavouritePostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdUnmutePostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdUnpinPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesIdUnreblogPostCallback(OAIHttpRequestWorker *worker);
    void apiV1StatusesPostCallback(OAIHttpRequestWorker *worker);
    void apiV1SuggestionsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1SuggestionsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiV1TimelinesHomeGetCallback(OAIHttpRequestWorker *worker);
    void apiV1TimelinesListListIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1TimelinesPublicGetCallback(OAIHttpRequestWorker *worker);
    void apiV1TimelinesTagHashtagGetCallback(OAIHttpRequestWorker *worker);
    void apiV1TrendsGetCallback(OAIHttpRequestWorker *worker);
    void apiV2SearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiOembedGetSignal(OAICard summary);
    void apiProofsGetSignal(OAIIdentityProof summary);
    void apiV1AdminAccountsGetSignal(QList<OAIAdminAccount> summary);
    void apiV1AdminAccountsIdActionPostSignal();
    void apiV1AdminAccountsIdApprovePostSignal();
    void apiV1AdminAccountsIdEnablePostSignal();
    void apiV1AdminAccountsIdGetSignal(OAIAdminAccount summary);
    void apiV1AdminAccountsIdRejectPostSignal();
    void apiV1AdminAccountsIdUnsilencePostSignal();
    void apiV1AdminAccountsIdUnsuspendPostSignal();
    void apiV1AdminReportsGetSignal(QList<OAIAdminReport> summary);
    void apiV1AdminReportsIdAssignToSelfPostSignal(OAIAdminReport summary);
    void apiV1AdminReportsIdGetSignal(OAIAdminReport summary);
    void apiV1AdminReportsIdReopenPostSignal(OAIAdminReport summary);
    void apiV1AdminReportsIdResolvePostSignal(OAIAdminReport summary);
    void apiV1AdminReportsIdUnassignPostSignal(OAIAdminReport summary);
    void apiV1AnnouncementsGetSignal(QList<OAIAnnouncement> summary);
    void apiV1AnnouncementsIdDismissPostSignal(OAIObject summary);
    void apiV1AnnouncementsIdReactionsNameDeleteSignal(OAIObject summary);
    void apiV1AnnouncementsIdReactionsNamePutSignal(OAIObject summary);
    void apiV1BlocksGetSignal(QList<OAIAccount> summary);
    void apiV1BookmarksGetSignal(QList<OAIStatus> summary);
    void apiV1ConversationsGetSignal(QList<OAIConversation> summary);
    void apiV1ConversationsIdDeleteSignal(OAIObject summary);
    void apiV1ConversationsIdReadPostSignal(OAIConversation summary);
    void apiV1CustomEmojisGetSignal(QList<OAIEmoji> summary);
    void apiV1DirectoryGetSignal(QList<OAIAccount> summary);
    void apiV1DomainBlocksDeleteSignal(OAIObject summary);
    void apiV1DomainBlocksGetSignal(QList<QString> summary);
    void apiV1DomainBlocksPostSignal(OAIObject summary);
    void apiV1EndorsementsGetSignal(QList<OAIAccount> summary);
    void apiV1FavouritesGetSignal(QList<OAIStatus> summary);
    void apiV1FeaturedTagsGetSignal(QList<OAIFeaturedTag> summary);
    void apiV1FeaturedTagsIdDeleteSignal(OAIObject summary);
    void apiV1FeaturedTagsPostSignal(OAIFeaturedTag summary);
    void apiV1FeaturedTagsSuggestionsGetSignal(QList<OAIFeaturedTag> summary);
    void apiV1FiltersGetSignal(QList<OAIFilter> summary);
    void apiV1FiltersIdDeleteSignal();
    void apiV1FiltersIdGetSignal(OAIFilter summary);
    void apiV1FiltersIdPutSignal(OAIFilter summary);
    void apiV1FiltersPostSignal(OAIFilter summary);
    void apiV1FollowRequestsGetSignal(QList<OAIAccount> summary);
    void apiV1FollowRequestsIdAuthorizePostSignal(OAIRelationship summary);
    void apiV1FollowRequestsIdRejectPostSignal(OAIRelationship summary);
    void apiV1InstanceActivityGetSignal(QList<OAIActivity> summary);
    void apiV1InstanceGetSignal(OAIInstance summary);
    void apiV1InstancePeersGetSignal(QList<QString> summary);
    void apiV1ListsDeleteSignal(OAIObject summary);
    void apiV1ListsGetSignal(QList<OAIList> summary);
    void apiV1ListsIdAccountsDeleteSignal(OAIObject summary);
    void apiV1ListsIdAccountsGetSignal(QList<OAIAccount> summary);
    void apiV1ListsIdAccountsPostSignal(OAIObject summary);
    void apiV1ListsIdGetSignal(OAIList summary);
    void apiV1ListsPostSignal(OAIList summary);
    void apiV1ListsPutSignal(OAIList summary);
    void apiV1MarkersGetSignal(OAIObject summary);
    void apiV1MarkersPostSignal(OAIObject summary);
    void apiV1MediaIdGetSignal(OAIAttachment summary);
    void apiV1MediaIdPostSignal(OAIAttachment summary);
    void apiV1MediaPostSignal(OAIAttachment summary);
    void apiV1MutesGetSignal(QList<OAIAccount> summary);
    void apiV1NotificationsClearPostSignal(OAIObject summary);
    void apiV1NotificationsGetSignal(QList<OAINotification> summary);
    void apiV1NotificationsIdDismissPostSignal(OAINotification summary);
    void apiV1NotificationsIdGetSignal(OAINotification summary);
    void apiV1PollsIdGetSignal(OAIPoll summary);
    void apiV1PollsIdPostSignal(OAIPoll summary);
    void apiV1PreferencesGetSignal(OAIPreferences summary);
    void apiV1PushSubscriptionDeleteSignal(OAIObject summary);
    void apiV1PushSubscriptionGetSignal(OAIPushSubscription summary);
    void apiV1PushSubscriptionPostSignal(OAIPushSubscription summary);
    void apiV1PushSubscriptionPutSignal(OAIPushSubscription summary);
    void apiV1ReportsPostSignal(OAIReport summary);
    void apiV1ScheduledStatusesGetSignal(QList<OAIScheduledStatus> summary);
    void apiV1ScheduledStatusesIdDeleteSignal(OAIObject summary);
    void apiV1ScheduledStatusesIdGetSignal(OAIScheduledStatus summary);
    void apiV1ScheduledStatusesIdPutSignal(OAIScheduledStatus summary);
    void apiV1StatusesIdBookmarkPostSignal(OAIStatus summary);
    void apiV1StatusesIdContextGetSignal(OAIContext summary);
    void apiV1StatusesIdDeleteSignal(OAIStatus summary);
    void apiV1StatusesIdFavouritePostSignal(OAIStatus summary);
    void apiV1StatusesIdFavouritedByGetSignal(OAIAccount summary);
    void apiV1StatusesIdGetSignal(OAIStatus summary);
    void apiV1StatusesIdMutePostSignal(OAIStatus summary);
    void apiV1StatusesIdPinPostSignal(OAIStatus summary);
    void apiV1StatusesIdReblogPostSignal(OAIStatus summary);
    void apiV1StatusesIdRebloggedByGetSignal(OAIAccount summary);
    void apiV1StatusesIdUnbookmarkPostSignal(OAIStatus summary);
    void apiV1StatusesIdUnfavouritePostSignal(OAIStatus summary);
    void apiV1StatusesIdUnmutePostSignal(OAIStatus summary);
    void apiV1StatusesIdUnpinPostSignal(OAIStatus summary);
    void apiV1StatusesIdUnreblogPostSignal(OAIStatus summary);
    void apiV1StatusesPostSignal(OAI_api_v1_statuses_post_200_response summary);
    void apiV1SuggestionsGetSignal(OAIAccount summary);
    void apiV1SuggestionsIdDeleteSignal(OAIObject summary);
    void apiV1TimelinesHomeGetSignal(QList<OAIStatus> summary);
    void apiV1TimelinesListListIdGetSignal(QList<OAIStatus> summary);
    void apiV1TimelinesPublicGetSignal(QList<OAIStatus> summary);
    void apiV1TimelinesTagHashtagGetSignal(QList<OAIStatus> summary);
    void apiV1TrendsGetSignal(QList<OAITag> summary);
    void apiV2SearchGetSignal(OAI_api_v2_search_get_200_response summary);


    void apiOembedGetSignalFull(OAIHttpRequestWorker *worker, OAICard summary);
    void apiProofsGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityProof summary);
    void apiV1AdminAccountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdminAccount> summary);
    void apiV1AdminAccountsIdActionPostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdApprovePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdEnablePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAdminAccount summary);
    void apiV1AdminAccountsIdRejectPostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdUnsilencePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminAccountsIdUnsuspendPostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AdminReportsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdminReport> summary);
    void apiV1AdminReportsIdAssignToSelfPostSignalFull(OAIHttpRequestWorker *worker, OAIAdminReport summary);
    void apiV1AdminReportsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAdminReport summary);
    void apiV1AdminReportsIdReopenPostSignalFull(OAIHttpRequestWorker *worker, OAIAdminReport summary);
    void apiV1AdminReportsIdResolvePostSignalFull(OAIHttpRequestWorker *worker, OAIAdminReport summary);
    void apiV1AdminReportsIdUnassignPostSignalFull(OAIHttpRequestWorker *worker, OAIAdminReport summary);
    void apiV1AnnouncementsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnnouncement> summary);
    void apiV1AnnouncementsIdDismissPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1AnnouncementsIdReactionsNameDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1AnnouncementsIdReactionsNamePutSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1BlocksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1BookmarksGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1ConversationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversation> summary);
    void apiV1ConversationsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1ConversationsIdReadPostSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void apiV1CustomEmojisGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmoji> summary);
    void apiV1DirectoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1DomainBlocksDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1DomainBlocksGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiV1DomainBlocksPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1EndorsementsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1FavouritesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1FeaturedTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeaturedTag> summary);
    void apiV1FeaturedTagsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1FeaturedTagsPostSignalFull(OAIHttpRequestWorker *worker, OAIFeaturedTag summary);
    void apiV1FeaturedTagsSuggestionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeaturedTag> summary);
    void apiV1FiltersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFilter> summary);
    void apiV1FiltersIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiV1FiltersIdGetSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void apiV1FiltersIdPutSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void apiV1FiltersPostSignalFull(OAIHttpRequestWorker *worker, OAIFilter summary);
    void apiV1FollowRequestsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1FollowRequestsIdAuthorizePostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1FollowRequestsIdRejectPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1InstanceActivityGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIActivity> summary);
    void apiV1InstanceGetSignalFull(OAIHttpRequestWorker *worker, OAIInstance summary);
    void apiV1InstancePeersGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void apiV1ListsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1ListsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIList> summary);
    void apiV1ListsIdAccountsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1ListsIdAccountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1ListsIdAccountsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1ListsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void apiV1ListsPostSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void apiV1ListsPutSignalFull(OAIHttpRequestWorker *worker, OAIList summary);
    void apiV1MarkersGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1MarkersPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1MediaIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void apiV1MediaIdPostSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void apiV1MediaPostSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void apiV1MutesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1NotificationsClearPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1NotificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotification> summary);
    void apiV1NotificationsIdDismissPostSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void apiV1NotificationsIdGetSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void apiV1PollsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPoll summary);
    void apiV1PollsIdPostSignalFull(OAIHttpRequestWorker *worker, OAIPoll summary);
    void apiV1PreferencesGetSignalFull(OAIHttpRequestWorker *worker, OAIPreferences summary);
    void apiV1PushSubscriptionDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1PushSubscriptionGetSignalFull(OAIHttpRequestWorker *worker, OAIPushSubscription summary);
    void apiV1PushSubscriptionPostSignalFull(OAIHttpRequestWorker *worker, OAIPushSubscription summary);
    void apiV1PushSubscriptionPutSignalFull(OAIHttpRequestWorker *worker, OAIPushSubscription summary);
    void apiV1ReportsPostSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void apiV1ScheduledStatusesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIScheduledStatus> summary);
    void apiV1ScheduledStatusesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1ScheduledStatusesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIScheduledStatus summary);
    void apiV1ScheduledStatusesIdPutSignalFull(OAIHttpRequestWorker *worker, OAIScheduledStatus summary);
    void apiV1StatusesIdBookmarkPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdContextGetSignalFull(OAIHttpRequestWorker *worker, OAIContext summary);
    void apiV1StatusesIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdFavouritePostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdFavouritedByGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void apiV1StatusesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdMutePostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdPinPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdReblogPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdRebloggedByGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void apiV1StatusesIdUnbookmarkPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdUnfavouritePostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdUnmutePostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdUnpinPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesIdUnreblogPostSignalFull(OAIHttpRequestWorker *worker, OAIStatus summary);
    void apiV1StatusesPostSignalFull(OAIHttpRequestWorker *worker, OAI_api_v1_statuses_post_200_response summary);
    void apiV1SuggestionsGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void apiV1SuggestionsIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apiV1TimelinesHomeGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1TimelinesListListIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1TimelinesPublicGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1TimelinesTagHashtagGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1TrendsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag> summary);
    void apiV2SearchGetSignalFull(OAIHttpRequestWorker *worker, OAI_api_v2_search_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiOembedGetSignalError() instead")
    void apiOembedGetSignalE(OAICard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOembedGetSignalError(OAICard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiProofsGetSignalError() instead")
    void apiProofsGetSignalE(OAIIdentityProof summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiProofsGetSignalError(OAIIdentityProof summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsGetSignalError() instead")
    void apiV1AdminAccountsGetSignalE(QList<OAIAdminAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsGetSignalError(QList<OAIAdminAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdActionPostSignalError() instead")
    void apiV1AdminAccountsIdActionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdActionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdApprovePostSignalError() instead")
    void apiV1AdminAccountsIdApprovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdApprovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdEnablePostSignalError() instead")
    void apiV1AdminAccountsIdEnablePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdEnablePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdGetSignalError() instead")
    void apiV1AdminAccountsIdGetSignalE(OAIAdminAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdGetSignalError(OAIAdminAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdRejectPostSignalError() instead")
    void apiV1AdminAccountsIdRejectPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdRejectPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdUnsilencePostSignalError() instead")
    void apiV1AdminAccountsIdUnsilencePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdUnsilencePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdUnsuspendPostSignalError() instead")
    void apiV1AdminAccountsIdUnsuspendPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdUnsuspendPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsGetSignalError() instead")
    void apiV1AdminReportsGetSignalE(QList<OAIAdminReport> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsGetSignalError(QList<OAIAdminReport> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdAssignToSelfPostSignalError() instead")
    void apiV1AdminReportsIdAssignToSelfPostSignalE(OAIAdminReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdAssignToSelfPostSignalError(OAIAdminReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdGetSignalError() instead")
    void apiV1AdminReportsIdGetSignalE(OAIAdminReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdGetSignalError(OAIAdminReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdReopenPostSignalError() instead")
    void apiV1AdminReportsIdReopenPostSignalE(OAIAdminReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdReopenPostSignalError(OAIAdminReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdResolvePostSignalError() instead")
    void apiV1AdminReportsIdResolvePostSignalE(OAIAdminReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdResolvePostSignalError(OAIAdminReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdUnassignPostSignalError() instead")
    void apiV1AdminReportsIdUnassignPostSignalE(OAIAdminReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdUnassignPostSignalError(OAIAdminReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsGetSignalError() instead")
    void apiV1AnnouncementsGetSignalE(QList<OAIAnnouncement> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsGetSignalError(QList<OAIAnnouncement> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdDismissPostSignalError() instead")
    void apiV1AnnouncementsIdDismissPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdDismissPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdReactionsNameDeleteSignalError() instead")
    void apiV1AnnouncementsIdReactionsNameDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdReactionsNameDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdReactionsNamePutSignalError() instead")
    void apiV1AnnouncementsIdReactionsNamePutSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdReactionsNamePutSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1BlocksGetSignalError() instead")
    void apiV1BlocksGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BlocksGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1BookmarksGetSignalError() instead")
    void apiV1BookmarksGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BookmarksGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsGetSignalError() instead")
    void apiV1ConversationsGetSignalE(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsGetSignalError(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsIdDeleteSignalError() instead")
    void apiV1ConversationsIdDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsIdDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsIdReadPostSignalError() instead")
    void apiV1ConversationsIdReadPostSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsIdReadPostSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1CustomEmojisGetSignalError() instead")
    void apiV1CustomEmojisGetSignalE(QList<OAIEmoji> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1CustomEmojisGetSignalError(QList<OAIEmoji> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DirectoryGetSignalError() instead")
    void apiV1DirectoryGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DirectoryGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksDeleteSignalError() instead")
    void apiV1DomainBlocksDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksGetSignalError() instead")
    void apiV1DomainBlocksGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksPostSignalError() instead")
    void apiV1DomainBlocksPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1EndorsementsGetSignalError() instead")
    void apiV1EndorsementsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1EndorsementsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FavouritesGetSignalError() instead")
    void apiV1FavouritesGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FavouritesGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsGetSignalError() instead")
    void apiV1FeaturedTagsGetSignalE(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsGetSignalError(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsIdDeleteSignalError() instead")
    void apiV1FeaturedTagsIdDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsIdDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsPostSignalError() instead")
    void apiV1FeaturedTagsPostSignalE(OAIFeaturedTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsPostSignalError(OAIFeaturedTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsSuggestionsGetSignalError() instead")
    void apiV1FeaturedTagsSuggestionsGetSignalE(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsSuggestionsGetSignalError(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersGetSignalError() instead")
    void apiV1FiltersGetSignalE(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersGetSignalError(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdDeleteSignalError() instead")
    void apiV1FiltersIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdGetSignalError() instead")
    void apiV1FiltersIdGetSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdGetSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdPutSignalError() instead")
    void apiV1FiltersIdPutSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdPutSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersPostSignalError() instead")
    void apiV1FiltersPostSignalE(OAIFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersPostSignalError(OAIFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsGetSignalError() instead")
    void apiV1FollowRequestsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsIdAuthorizePostSignalError() instead")
    void apiV1FollowRequestsIdAuthorizePostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsIdAuthorizePostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsIdRejectPostSignalError() instead")
    void apiV1FollowRequestsIdRejectPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsIdRejectPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstanceActivityGetSignalError() instead")
    void apiV1InstanceActivityGetSignalE(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstanceActivityGetSignalError(QList<OAIActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstanceGetSignalError() instead")
    void apiV1InstanceGetSignalE(OAIInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstanceGetSignalError(OAIInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstancePeersGetSignalError() instead")
    void apiV1InstancePeersGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstancePeersGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsDeleteSignalError() instead")
    void apiV1ListsDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsGetSignalError() instead")
    void apiV1ListsGetSignalE(QList<OAIList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsGetSignalError(QList<OAIList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsDeleteSignalError() instead")
    void apiV1ListsIdAccountsDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsGetSignalError() instead")
    void apiV1ListsIdAccountsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsPostSignalError() instead")
    void apiV1ListsIdAccountsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdGetSignalError() instead")
    void apiV1ListsIdGetSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdGetSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsPostSignalError() instead")
    void apiV1ListsPostSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsPostSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsPutSignalError() instead")
    void apiV1ListsPutSignalE(OAIList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsPutSignalError(OAIList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MarkersGetSignalError() instead")
    void apiV1MarkersGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MarkersGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MarkersPostSignalError() instead")
    void apiV1MarkersPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MarkersPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaIdGetSignalError() instead")
    void apiV1MediaIdGetSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaIdGetSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaIdPostSignalError() instead")
    void apiV1MediaIdPostSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaIdPostSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaPostSignalError() instead")
    void apiV1MediaPostSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaPostSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MutesGetSignalError() instead")
    void apiV1MutesGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MutesGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsClearPostSignalError() instead")
    void apiV1NotificationsClearPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsClearPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsGetSignalError() instead")
    void apiV1NotificationsGetSignalE(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsGetSignalError(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsIdDismissPostSignalError() instead")
    void apiV1NotificationsIdDismissPostSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsIdDismissPostSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsIdGetSignalError() instead")
    void apiV1NotificationsIdGetSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsIdGetSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PollsIdGetSignalError() instead")
    void apiV1PollsIdGetSignalE(OAIPoll summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PollsIdGetSignalError(OAIPoll summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PollsIdPostSignalError() instead")
    void apiV1PollsIdPostSignalE(OAIPoll summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PollsIdPostSignalError(OAIPoll summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PreferencesGetSignalError() instead")
    void apiV1PreferencesGetSignalE(OAIPreferences summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PreferencesGetSignalError(OAIPreferences summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionDeleteSignalError() instead")
    void apiV1PushSubscriptionDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionGetSignalError() instead")
    void apiV1PushSubscriptionGetSignalE(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionGetSignalError(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionPostSignalError() instead")
    void apiV1PushSubscriptionPostSignalE(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionPostSignalError(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionPutSignalError() instead")
    void apiV1PushSubscriptionPutSignalE(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionPutSignalError(OAIPushSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ReportsPostSignalError() instead")
    void apiV1ReportsPostSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ReportsPostSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesGetSignalError() instead")
    void apiV1ScheduledStatusesGetSignalE(QList<OAIScheduledStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesGetSignalError(QList<OAIScheduledStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdDeleteSignalError() instead")
    void apiV1ScheduledStatusesIdDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdGetSignalError() instead")
    void apiV1ScheduledStatusesIdGetSignalE(OAIScheduledStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdGetSignalError(OAIScheduledStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdPutSignalError() instead")
    void apiV1ScheduledStatusesIdPutSignalE(OAIScheduledStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdPutSignalError(OAIScheduledStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdBookmarkPostSignalError() instead")
    void apiV1StatusesIdBookmarkPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdBookmarkPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdContextGetSignalError() instead")
    void apiV1StatusesIdContextGetSignalE(OAIContext summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdContextGetSignalError(OAIContext summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdDeleteSignalError() instead")
    void apiV1StatusesIdDeleteSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdDeleteSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdFavouritePostSignalError() instead")
    void apiV1StatusesIdFavouritePostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdFavouritePostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdFavouritedByGetSignalError() instead")
    void apiV1StatusesIdFavouritedByGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdFavouritedByGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdGetSignalError() instead")
    void apiV1StatusesIdGetSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdGetSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdMutePostSignalError() instead")
    void apiV1StatusesIdMutePostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdMutePostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdPinPostSignalError() instead")
    void apiV1StatusesIdPinPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdPinPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdReblogPostSignalError() instead")
    void apiV1StatusesIdReblogPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdReblogPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdRebloggedByGetSignalError() instead")
    void apiV1StatusesIdRebloggedByGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdRebloggedByGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnbookmarkPostSignalError() instead")
    void apiV1StatusesIdUnbookmarkPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnbookmarkPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnfavouritePostSignalError() instead")
    void apiV1StatusesIdUnfavouritePostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnfavouritePostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnmutePostSignalError() instead")
    void apiV1StatusesIdUnmutePostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnmutePostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnpinPostSignalError() instead")
    void apiV1StatusesIdUnpinPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnpinPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnreblogPostSignalError() instead")
    void apiV1StatusesIdUnreblogPostSignalE(OAIStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnreblogPostSignalError(OAIStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesPostSignalError() instead")
    void apiV1StatusesPostSignalE(OAI_api_v1_statuses_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesPostSignalError(OAI_api_v1_statuses_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1SuggestionsGetSignalError() instead")
    void apiV1SuggestionsGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1SuggestionsGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1SuggestionsIdDeleteSignalError() instead")
    void apiV1SuggestionsIdDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1SuggestionsIdDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesHomeGetSignalError() instead")
    void apiV1TimelinesHomeGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesHomeGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesListListIdGetSignalError() instead")
    void apiV1TimelinesListListIdGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesListListIdGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesPublicGetSignalError() instead")
    void apiV1TimelinesPublicGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesPublicGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesTagHashtagGetSignalError() instead")
    void apiV1TimelinesTagHashtagGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesTagHashtagGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TrendsGetSignalError() instead")
    void apiV1TrendsGetSignalE(QList<OAITag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TrendsGetSignalError(QList<OAITag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2SearchGetSignalError() instead")
    void apiV2SearchGetSignalE(OAI_api_v2_search_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2SearchGetSignalError(OAI_api_v2_search_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiOembedGetSignalErrorFull() instead")
    void apiOembedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOembedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiProofsGetSignalErrorFull() instead")
    void apiProofsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiProofsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsGetSignalErrorFull() instead")
    void apiV1AdminAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdActionPostSignalErrorFull() instead")
    void apiV1AdminAccountsIdActionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdActionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdApprovePostSignalErrorFull() instead")
    void apiV1AdminAccountsIdApprovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdApprovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdEnablePostSignalErrorFull() instead")
    void apiV1AdminAccountsIdEnablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdEnablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdGetSignalErrorFull() instead")
    void apiV1AdminAccountsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdRejectPostSignalErrorFull() instead")
    void apiV1AdminAccountsIdRejectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdRejectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdUnsilencePostSignalErrorFull() instead")
    void apiV1AdminAccountsIdUnsilencePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdUnsilencePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminAccountsIdUnsuspendPostSignalErrorFull() instead")
    void apiV1AdminAccountsIdUnsuspendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminAccountsIdUnsuspendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsGetSignalErrorFull() instead")
    void apiV1AdminReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdAssignToSelfPostSignalErrorFull() instead")
    void apiV1AdminReportsIdAssignToSelfPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdAssignToSelfPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdGetSignalErrorFull() instead")
    void apiV1AdminReportsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdReopenPostSignalErrorFull() instead")
    void apiV1AdminReportsIdReopenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdReopenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdResolvePostSignalErrorFull() instead")
    void apiV1AdminReportsIdResolvePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdResolvePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AdminReportsIdUnassignPostSignalErrorFull() instead")
    void apiV1AdminReportsIdUnassignPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AdminReportsIdUnassignPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsGetSignalErrorFull() instead")
    void apiV1AnnouncementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdDismissPostSignalErrorFull() instead")
    void apiV1AnnouncementsIdDismissPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdDismissPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdReactionsNameDeleteSignalErrorFull() instead")
    void apiV1AnnouncementsIdReactionsNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdReactionsNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AnnouncementsIdReactionsNamePutSignalErrorFull() instead")
    void apiV1AnnouncementsIdReactionsNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AnnouncementsIdReactionsNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1BlocksGetSignalErrorFull() instead")
    void apiV1BlocksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BlocksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1BookmarksGetSignalErrorFull() instead")
    void apiV1BookmarksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1BookmarksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsGetSignalErrorFull() instead")
    void apiV1ConversationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsIdDeleteSignalErrorFull() instead")
    void apiV1ConversationsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ConversationsIdReadPostSignalErrorFull() instead")
    void apiV1ConversationsIdReadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ConversationsIdReadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1CustomEmojisGetSignalErrorFull() instead")
    void apiV1CustomEmojisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1CustomEmojisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DirectoryGetSignalErrorFull() instead")
    void apiV1DirectoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DirectoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksDeleteSignalErrorFull() instead")
    void apiV1DomainBlocksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksGetSignalErrorFull() instead")
    void apiV1DomainBlocksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DomainBlocksPostSignalErrorFull() instead")
    void apiV1DomainBlocksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DomainBlocksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1EndorsementsGetSignalErrorFull() instead")
    void apiV1EndorsementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1EndorsementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FavouritesGetSignalErrorFull() instead")
    void apiV1FavouritesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FavouritesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsGetSignalErrorFull() instead")
    void apiV1FeaturedTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsIdDeleteSignalErrorFull() instead")
    void apiV1FeaturedTagsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsPostSignalErrorFull() instead")
    void apiV1FeaturedTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FeaturedTagsSuggestionsGetSignalErrorFull() instead")
    void apiV1FeaturedTagsSuggestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FeaturedTagsSuggestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersGetSignalErrorFull() instead")
    void apiV1FiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdDeleteSignalErrorFull() instead")
    void apiV1FiltersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdGetSignalErrorFull() instead")
    void apiV1FiltersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersIdPutSignalErrorFull() instead")
    void apiV1FiltersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FiltersPostSignalErrorFull() instead")
    void apiV1FiltersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FiltersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsGetSignalErrorFull() instead")
    void apiV1FollowRequestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsIdAuthorizePostSignalErrorFull() instead")
    void apiV1FollowRequestsIdAuthorizePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsIdAuthorizePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1FollowRequestsIdRejectPostSignalErrorFull() instead")
    void apiV1FollowRequestsIdRejectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1FollowRequestsIdRejectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstanceActivityGetSignalErrorFull() instead")
    void apiV1InstanceActivityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstanceActivityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstanceGetSignalErrorFull() instead")
    void apiV1InstanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1InstancePeersGetSignalErrorFull() instead")
    void apiV1InstancePeersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1InstancePeersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsDeleteSignalErrorFull() instead")
    void apiV1ListsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsGetSignalErrorFull() instead")
    void apiV1ListsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsDeleteSignalErrorFull() instead")
    void apiV1ListsIdAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsGetSignalErrorFull() instead")
    void apiV1ListsIdAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdAccountsPostSignalErrorFull() instead")
    void apiV1ListsIdAccountsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdAccountsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsIdGetSignalErrorFull() instead")
    void apiV1ListsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsPostSignalErrorFull() instead")
    void apiV1ListsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ListsPutSignalErrorFull() instead")
    void apiV1ListsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ListsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MarkersGetSignalErrorFull() instead")
    void apiV1MarkersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MarkersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MarkersPostSignalErrorFull() instead")
    void apiV1MarkersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MarkersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaIdGetSignalErrorFull() instead")
    void apiV1MediaIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaIdPostSignalErrorFull() instead")
    void apiV1MediaIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MediaPostSignalErrorFull() instead")
    void apiV1MediaPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MediaPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1MutesGetSignalErrorFull() instead")
    void apiV1MutesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1MutesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsClearPostSignalErrorFull() instead")
    void apiV1NotificationsClearPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsClearPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsGetSignalErrorFull() instead")
    void apiV1NotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsIdDismissPostSignalErrorFull() instead")
    void apiV1NotificationsIdDismissPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsIdDismissPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NotificationsIdGetSignalErrorFull() instead")
    void apiV1NotificationsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NotificationsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PollsIdGetSignalErrorFull() instead")
    void apiV1PollsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PollsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PollsIdPostSignalErrorFull() instead")
    void apiV1PollsIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PollsIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PreferencesGetSignalErrorFull() instead")
    void apiV1PreferencesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PreferencesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionDeleteSignalErrorFull() instead")
    void apiV1PushSubscriptionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionGetSignalErrorFull() instead")
    void apiV1PushSubscriptionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionPostSignalErrorFull() instead")
    void apiV1PushSubscriptionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1PushSubscriptionPutSignalErrorFull() instead")
    void apiV1PushSubscriptionPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1PushSubscriptionPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ReportsPostSignalErrorFull() instead")
    void apiV1ReportsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ReportsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesGetSignalErrorFull() instead")
    void apiV1ScheduledStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdDeleteSignalErrorFull() instead")
    void apiV1ScheduledStatusesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdGetSignalErrorFull() instead")
    void apiV1ScheduledStatusesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1ScheduledStatusesIdPutSignalErrorFull() instead")
    void apiV1ScheduledStatusesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1ScheduledStatusesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdBookmarkPostSignalErrorFull() instead")
    void apiV1StatusesIdBookmarkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdBookmarkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdContextGetSignalErrorFull() instead")
    void apiV1StatusesIdContextGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdContextGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdDeleteSignalErrorFull() instead")
    void apiV1StatusesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdFavouritePostSignalErrorFull() instead")
    void apiV1StatusesIdFavouritePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdFavouritePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdFavouritedByGetSignalErrorFull() instead")
    void apiV1StatusesIdFavouritedByGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdFavouritedByGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdGetSignalErrorFull() instead")
    void apiV1StatusesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdMutePostSignalErrorFull() instead")
    void apiV1StatusesIdMutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdMutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdPinPostSignalErrorFull() instead")
    void apiV1StatusesIdPinPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdPinPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdReblogPostSignalErrorFull() instead")
    void apiV1StatusesIdReblogPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdReblogPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdRebloggedByGetSignalErrorFull() instead")
    void apiV1StatusesIdRebloggedByGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdRebloggedByGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnbookmarkPostSignalErrorFull() instead")
    void apiV1StatusesIdUnbookmarkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnbookmarkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnfavouritePostSignalErrorFull() instead")
    void apiV1StatusesIdUnfavouritePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnfavouritePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnmutePostSignalErrorFull() instead")
    void apiV1StatusesIdUnmutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnmutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnpinPostSignalErrorFull() instead")
    void apiV1StatusesIdUnpinPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnpinPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesIdUnreblogPostSignalErrorFull() instead")
    void apiV1StatusesIdUnreblogPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesIdUnreblogPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1StatusesPostSignalErrorFull() instead")
    void apiV1StatusesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1StatusesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1SuggestionsGetSignalErrorFull() instead")
    void apiV1SuggestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1SuggestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1SuggestionsIdDeleteSignalErrorFull() instead")
    void apiV1SuggestionsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1SuggestionsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesHomeGetSignalErrorFull() instead")
    void apiV1TimelinesHomeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesHomeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesListListIdGetSignalErrorFull() instead")
    void apiV1TimelinesListListIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesListListIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesPublicGetSignalErrorFull() instead")
    void apiV1TimelinesPublicGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesPublicGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TimelinesTagHashtagGetSignalErrorFull() instead")
    void apiV1TimelinesTagHashtagGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TimelinesTagHashtagGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1TrendsGetSignalErrorFull() instead")
    void apiV1TrendsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1TrendsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV2SearchGetSignalErrorFull() instead")
    void apiV2SearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV2SearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
