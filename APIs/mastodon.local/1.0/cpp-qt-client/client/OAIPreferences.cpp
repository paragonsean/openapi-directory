/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreferences::OAIPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreferences::OAIPreferences() {
    this->initializeModel();
}

OAIPreferences::~OAIPreferences() {}

void OAIPreferences::initializeModel() {

    m_postingdefaultlanguage_isSet = false;
    m_postingdefaultlanguage_isValid = false;

    m_postingdefaultsensitive_isSet = false;
    m_postingdefaultsensitive_isValid = false;

    m_postingdefaultvisibility_isSet = false;
    m_postingdefaultvisibility_isValid = false;

    m_readingexpandmedia_isSet = false;
    m_readingexpandmedia_isValid = false;

    m_readingexpandspoilers_isSet = false;
    m_readingexpandspoilers_isValid = false;
}

void OAIPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreferences::fromJsonObject(QJsonObject json) {

    m_postingdefaultlanguage_isValid = ::OpenAPI::fromJsonValue(m_postingdefaultlanguage, json[QString("posting:default:language")]);
    m_postingdefaultlanguage_isSet = !json[QString("posting:default:language")].isNull() && m_postingdefaultlanguage_isValid;

    m_postingdefaultsensitive_isValid = ::OpenAPI::fromJsonValue(m_postingdefaultsensitive, json[QString("posting:default:sensitive")]);
    m_postingdefaultsensitive_isSet = !json[QString("posting:default:sensitive")].isNull() && m_postingdefaultsensitive_isValid;

    m_postingdefaultvisibility_isValid = ::OpenAPI::fromJsonValue(m_postingdefaultvisibility, json[QString("posting:default:visibility")]);
    m_postingdefaultvisibility_isSet = !json[QString("posting:default:visibility")].isNull() && m_postingdefaultvisibility_isValid;

    m_readingexpandmedia_isValid = ::OpenAPI::fromJsonValue(m_readingexpandmedia, json[QString("reading:expand:media")]);
    m_readingexpandmedia_isSet = !json[QString("reading:expand:media")].isNull() && m_readingexpandmedia_isValid;

    m_readingexpandspoilers_isValid = ::OpenAPI::fromJsonValue(m_readingexpandspoilers, json[QString("reading:expand:spoilers")]);
    m_readingexpandspoilers_isSet = !json[QString("reading:expand:spoilers")].isNull() && m_readingexpandspoilers_isValid;
}

QString OAIPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_postingdefaultlanguage_isSet) {
        obj.insert(QString("posting:default:language"), ::OpenAPI::toJsonValue(m_postingdefaultlanguage));
    }
    if (m_postingdefaultsensitive_isSet) {
        obj.insert(QString("posting:default:sensitive"), ::OpenAPI::toJsonValue(m_postingdefaultsensitive));
    }
    if (m_postingdefaultvisibility_isSet) {
        obj.insert(QString("posting:default:visibility"), ::OpenAPI::toJsonValue(m_postingdefaultvisibility));
    }
    if (m_readingexpandmedia_isSet) {
        obj.insert(QString("reading:expand:media"), ::OpenAPI::toJsonValue(m_readingexpandmedia));
    }
    if (m_readingexpandspoilers_isSet) {
        obj.insert(QString("reading:expand:spoilers"), ::OpenAPI::toJsonValue(m_readingexpandspoilers));
    }
    return obj;
}

QString OAIPreferences::getPostingdefaultlanguage() const {
    return m_postingdefaultlanguage;
}
void OAIPreferences::setPostingdefaultlanguage(const QString &postingdefaultlanguage) {
    m_postingdefaultlanguage = postingdefaultlanguage;
    m_postingdefaultlanguage_isSet = true;
}

bool OAIPreferences::is_postingdefaultlanguage_Set() const{
    return m_postingdefaultlanguage_isSet;
}

bool OAIPreferences::is_postingdefaultlanguage_Valid() const{
    return m_postingdefaultlanguage_isValid;
}

bool OAIPreferences::isPostingdefaultsensitive() const {
    return m_postingdefaultsensitive;
}
void OAIPreferences::setPostingdefaultsensitive(const bool &postingdefaultsensitive) {
    m_postingdefaultsensitive = postingdefaultsensitive;
    m_postingdefaultsensitive_isSet = true;
}

bool OAIPreferences::is_postingdefaultsensitive_Set() const{
    return m_postingdefaultsensitive_isSet;
}

bool OAIPreferences::is_postingdefaultsensitive_Valid() const{
    return m_postingdefaultsensitive_isValid;
}

QString OAIPreferences::getPostingdefaultvisibility() const {
    return m_postingdefaultvisibility;
}
void OAIPreferences::setPostingdefaultvisibility(const QString &postingdefaultvisibility) {
    m_postingdefaultvisibility = postingdefaultvisibility;
    m_postingdefaultvisibility_isSet = true;
}

bool OAIPreferences::is_postingdefaultvisibility_Set() const{
    return m_postingdefaultvisibility_isSet;
}

bool OAIPreferences::is_postingdefaultvisibility_Valid() const{
    return m_postingdefaultvisibility_isValid;
}

QString OAIPreferences::getReadingexpandmedia() const {
    return m_readingexpandmedia;
}
void OAIPreferences::setReadingexpandmedia(const QString &readingexpandmedia) {
    m_readingexpandmedia = readingexpandmedia;
    m_readingexpandmedia_isSet = true;
}

bool OAIPreferences::is_readingexpandmedia_Set() const{
    return m_readingexpandmedia_isSet;
}

bool OAIPreferences::is_readingexpandmedia_Valid() const{
    return m_readingexpandmedia_isValid;
}

bool OAIPreferences::isReadingexpandspoilers() const {
    return m_readingexpandspoilers;
}
void OAIPreferences::setReadingexpandspoilers(const bool &readingexpandspoilers) {
    m_readingexpandspoilers = readingexpandspoilers;
    m_readingexpandspoilers_isSet = true;
}

bool OAIPreferences::is_readingexpandspoilers_Set() const{
    return m_readingexpandspoilers_isSet;
}

bool OAIPreferences::is_readingexpandspoilers_Valid() const{
    return m_readingexpandspoilers_isValid;
}

bool OAIPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_postingdefaultlanguage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postingdefaultsensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postingdefaultvisibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readingexpandmedia_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readingexpandspoilers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
