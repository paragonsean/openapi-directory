/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_acct_isSet = false;
    m_acct_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_avatar_static_isSet = false;
    m_avatar_static_isValid = false;

    m_bot_isSet = false;
    m_bot_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_emojis_isSet = false;
    m_emojis_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_followers_count_isSet = false;
    m_followers_count_isValid = false;

    m_following_count_isSet = false;
    m_following_count_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_header_static_isSet = false;
    m_header_static_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_status_at_isSet = false;
    m_last_status_at_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_moved_isSet = false;
    m_moved_isValid = false;

    m_mute_expires_at_isSet = false;
    m_mute_expires_at_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_statuses_count_isSet = false;
    m_statuses_count_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_acct_isValid = ::OpenAPI::fromJsonValue(m_acct, json[QString("acct")]);
    m_acct_isSet = !json[QString("acct")].isNull() && m_acct_isValid;

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_avatar_static_isValid = ::OpenAPI::fromJsonValue(m_avatar_static, json[QString("avatar_static")]);
    m_avatar_static_isSet = !json[QString("avatar_static")].isNull() && m_avatar_static_isValid;

    m_bot_isValid = ::OpenAPI::fromJsonValue(m_bot, json[QString("bot")]);
    m_bot_isSet = !json[QString("bot")].isNull() && m_bot_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_emojis_isValid = ::OpenAPI::fromJsonValue(m_emojis, json[QString("emojis")]);
    m_emojis_isSet = !json[QString("emojis")].isNull() && m_emojis_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_followers_count_isValid = ::OpenAPI::fromJsonValue(m_followers_count, json[QString("followers_count")]);
    m_followers_count_isSet = !json[QString("followers_count")].isNull() && m_followers_count_isValid;

    m_following_count_isValid = ::OpenAPI::fromJsonValue(m_following_count, json[QString("following_count")]);
    m_following_count_isSet = !json[QString("following_count")].isNull() && m_following_count_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_header_static_isValid = ::OpenAPI::fromJsonValue(m_header_static, json[QString("header_static")]);
    m_header_static_isSet = !json[QString("header_static")].isNull() && m_header_static_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_status_at_isValid = ::OpenAPI::fromJsonValue(m_last_status_at, json[QString("last_status_at")]);
    m_last_status_at_isSet = !json[QString("last_status_at")].isNull() && m_last_status_at_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_moved_isValid = ::OpenAPI::fromJsonValue(m_moved, json[QString("moved")]);
    m_moved_isSet = !json[QString("moved")].isNull() && m_moved_isValid;

    m_mute_expires_at_isValid = ::OpenAPI::fromJsonValue(m_mute_expires_at, json[QString("mute_expires_at")]);
    m_mute_expires_at_isSet = !json[QString("mute_expires_at")].isNull() && m_mute_expires_at_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_statuses_count_isValid = ::OpenAPI::fromJsonValue(m_statuses_count, json[QString("statuses_count")]);
    m_statuses_count_isSet = !json[QString("statuses_count")].isNull() && m_statuses_count_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_acct_isSet) {
        obj.insert(QString("acct"), ::OpenAPI::toJsonValue(m_acct));
    }
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_avatar_static_isSet) {
        obj.insert(QString("avatar_static"), ::OpenAPI::toJsonValue(m_avatar_static));
    }
    if (m_bot_isSet) {
        obj.insert(QString("bot"), ::OpenAPI::toJsonValue(m_bot));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_discoverable_isSet) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_emojis.size() > 0) {
        obj.insert(QString("emojis"), ::OpenAPI::toJsonValue(m_emojis));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_followers_count_isSet) {
        obj.insert(QString("followers_count"), ::OpenAPI::toJsonValue(m_followers_count));
    }
    if (m_following_count_isSet) {
        obj.insert(QString("following_count"), ::OpenAPI::toJsonValue(m_following_count));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_header_static_isSet) {
        obj.insert(QString("header_static"), ::OpenAPI::toJsonValue(m_header_static));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_status_at_isSet) {
        obj.insert(QString("last_status_at"), ::OpenAPI::toJsonValue(m_last_status_at));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_moved.isSet()) {
        obj.insert(QString("moved"), ::OpenAPI::toJsonValue(m_moved));
    }
    if (m_mute_expires_at_isSet) {
        obj.insert(QString("mute_expires_at"), ::OpenAPI::toJsonValue(m_mute_expires_at));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_statuses_count_isSet) {
        obj.insert(QString("statuses_count"), ::OpenAPI::toJsonValue(m_statuses_count));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIAccount::getAcct() const {
    return m_acct;
}
void OAIAccount::setAcct(const QString &acct) {
    m_acct = acct;
    m_acct_isSet = true;
}

bool OAIAccount::is_acct_Set() const{
    return m_acct_isSet;
}

bool OAIAccount::is_acct_Valid() const{
    return m_acct_isValid;
}

QString OAIAccount::getAvatar() const {
    return m_avatar;
}
void OAIAccount::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIAccount::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIAccount::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIAccount::getAvatarStatic() const {
    return m_avatar_static;
}
void OAIAccount::setAvatarStatic(const QString &avatar_static) {
    m_avatar_static = avatar_static;
    m_avatar_static_isSet = true;
}

bool OAIAccount::is_avatar_static_Set() const{
    return m_avatar_static_isSet;
}

bool OAIAccount::is_avatar_static_Valid() const{
    return m_avatar_static_isValid;
}

bool OAIAccount::isBot() const {
    return m_bot;
}
void OAIAccount::setBot(const bool &bot) {
    m_bot = bot;
    m_bot_isSet = true;
}

bool OAIAccount::is_bot_Set() const{
    return m_bot_isSet;
}

bool OAIAccount::is_bot_Valid() const{
    return m_bot_isValid;
}

QDateTime OAIAccount::getCreatedAt() const {
    return m_created_at;
}
void OAIAccount::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIAccount::isDiscoverable() const {
    return m_discoverable;
}
void OAIAccount::setDiscoverable(const bool &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIAccount::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIAccount::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

QString OAIAccount::getDisplayName() const {
    return m_display_name;
}
void OAIAccount::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAccount::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAccount::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIEmoji> OAIAccount::getEmojis() const {
    return m_emojis;
}
void OAIAccount::setEmojis(const QList<OAIEmoji> &emojis) {
    m_emojis = emojis;
    m_emojis_isSet = true;
}

bool OAIAccount::is_emojis_Set() const{
    return m_emojis_isSet;
}

bool OAIAccount::is_emojis_Valid() const{
    return m_emojis_isValid;
}

QList<OAIField> OAIAccount::getFields() const {
    return m_fields;
}
void OAIAccount::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIAccount::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIAccount::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAIAccount::getFollowersCount() const {
    return m_followers_count;
}
void OAIAccount::setFollowersCount(const qint32 &followers_count) {
    m_followers_count = followers_count;
    m_followers_count_isSet = true;
}

bool OAIAccount::is_followers_count_Set() const{
    return m_followers_count_isSet;
}

bool OAIAccount::is_followers_count_Valid() const{
    return m_followers_count_isValid;
}

qint32 OAIAccount::getFollowingCount() const {
    return m_following_count;
}
void OAIAccount::setFollowingCount(const qint32 &following_count) {
    m_following_count = following_count;
    m_following_count_isSet = true;
}

bool OAIAccount::is_following_count_Set() const{
    return m_following_count_isSet;
}

bool OAIAccount::is_following_count_Valid() const{
    return m_following_count_isValid;
}

QString OAIAccount::getHeader() const {
    return m_header;
}
void OAIAccount::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIAccount::is_header_Set() const{
    return m_header_isSet;
}

bool OAIAccount::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIAccount::getHeaderStatic() const {
    return m_header_static;
}
void OAIAccount::setHeaderStatic(const QString &header_static) {
    m_header_static = header_static;
    m_header_static_isSet = true;
}

bool OAIAccount::is_header_static_Set() const{
    return m_header_static_isSet;
}

bool OAIAccount::is_header_static_Valid() const{
    return m_header_static_isValid;
}

QString OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAccount::getLastStatusAt() const {
    return m_last_status_at;
}
void OAIAccount::setLastStatusAt(const QDateTime &last_status_at) {
    m_last_status_at = last_status_at;
    m_last_status_at_isSet = true;
}

bool OAIAccount::is_last_status_at_Set() const{
    return m_last_status_at_isSet;
}

bool OAIAccount::is_last_status_at_Valid() const{
    return m_last_status_at_isValid;
}

bool OAIAccount::isLocked() const {
    return m_locked;
}
void OAIAccount::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIAccount::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIAccount::is_locked_Valid() const{
    return m_locked_isValid;
}

OAIAccount OAIAccount::getMoved() const {
    return m_moved;
}
void OAIAccount::setMoved(const OAIAccount &moved) {
    m_moved = moved;
    m_moved_isSet = true;
}

bool OAIAccount::is_moved_Set() const{
    return m_moved_isSet;
}

bool OAIAccount::is_moved_Valid() const{
    return m_moved_isValid;
}

QDateTime OAIAccount::getMuteExpiresAt() const {
    return m_mute_expires_at;
}
void OAIAccount::setMuteExpiresAt(const QDateTime &mute_expires_at) {
    m_mute_expires_at = mute_expires_at;
    m_mute_expires_at_isSet = true;
}

bool OAIAccount::is_mute_expires_at_Set() const{
    return m_mute_expires_at_isSet;
}

bool OAIAccount::is_mute_expires_at_Valid() const{
    return m_mute_expires_at_isValid;
}

QString OAIAccount::getNote() const {
    return m_note;
}
void OAIAccount::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIAccount::is_note_Set() const{
    return m_note_isSet;
}

bool OAIAccount::is_note_Valid() const{
    return m_note_isValid;
}

OAISource OAIAccount::getSource() const {
    return m_source;
}
void OAIAccount::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAccount::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAccount::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIAccount::getStatusesCount() const {
    return m_statuses_count;
}
void OAIAccount::setStatusesCount(const qint32 &statuses_count) {
    m_statuses_count = statuses_count;
    m_statuses_count_isSet = true;
}

bool OAIAccount::is_statuses_count_Set() const{
    return m_statuses_count_isSet;
}

bool OAIAccount::is_statuses_count_Valid() const{
    return m_statuses_count_isValid;
}

bool OAIAccount::isSuspended() const {
    return m_suspended;
}
void OAIAccount::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIAccount::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIAccount::is_suspended_Valid() const{
    return m_suspended_isValid;
}

QString OAIAccount::getUrl() const {
    return m_url;
}
void OAIAccount::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAccount::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAccount::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAccount::getUsername() const {
    return m_username;
}
void OAIAccount::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAccount::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAccount::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_static_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emojis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_static_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moved.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mute_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
