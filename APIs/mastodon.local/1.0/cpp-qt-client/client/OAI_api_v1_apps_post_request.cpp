/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_apps_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_apps_post_request::OAI_api_v1_apps_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_apps_post_request::OAI_api_v1_apps_post_request() {
    this->initializeModel();
}

OAI_api_v1_apps_post_request::~OAI_api_v1_apps_post_request() {}

void OAI_api_v1_apps_post_request::initializeModel() {

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAI_api_v1_apps_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_apps_post_request::fromJsonObject(QJsonObject json) {

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("client_name")]);
    m_client_name_isSet = !json[QString("client_name")].isNull() && m_client_name_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirect_uris")]);
    m_redirect_uris_isSet = !json[QString("redirect_uris")].isNull() && m_redirect_uris_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAI_api_v1_apps_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_apps_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_name_isSet) {
        obj.insert(QString("client_name"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_redirect_uris_isSet) {
        obj.insert(QString("redirect_uris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    if (m_scopes_isSet) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAI_api_v1_apps_post_request::getClientName() const {
    return m_client_name;
}
void OAI_api_v1_apps_post_request::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAI_api_v1_apps_post_request::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAI_api_v1_apps_post_request::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAI_api_v1_apps_post_request::getRedirectUris() const {
    return m_redirect_uris;
}
void OAI_api_v1_apps_post_request::setRedirectUris(const QString &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAI_api_v1_apps_post_request::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAI_api_v1_apps_post_request::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

QString OAI_api_v1_apps_post_request::getScopes() const {
    return m_scopes;
}
void OAI_api_v1_apps_post_request::setScopes(const QString &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAI_api_v1_apps_post_request::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAI_api_v1_apps_post_request::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAI_api_v1_apps_post_request::getWebsite() const {
    return m_website;
}
void OAI_api_v1_apps_post_request::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAI_api_v1_apps_post_request::is_website_Set() const{
    return m_website_isSet;
}

bool OAI_api_v1_apps_post_request::is_website_Valid() const{
    return m_website_isValid;
}

bool OAI_api_v1_apps_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_apps_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_name_isValid && m_redirect_uris_isValid && true;
}

} // namespace OpenAPI
