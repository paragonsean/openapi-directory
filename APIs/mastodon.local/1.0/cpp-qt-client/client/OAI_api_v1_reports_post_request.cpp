/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_reports_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_reports_post_request::OAI_api_v1_reports_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_reports_post_request::OAI_api_v1_reports_post_request() {
    this->initializeModel();
}

OAI_api_v1_reports_post_request::~OAI_api_v1_reports_post_request() {}

void OAI_api_v1_reports_post_request::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_forward_isSet = false;
    m_forward_isValid = false;

    m_status_ids_isSet = false;
    m_status_ids_isValid = false;
}

void OAI_api_v1_reports_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_reports_post_request::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_forward_isValid = ::OpenAPI::fromJsonValue(m_forward, json[QString("forward")]);
    m_forward_isSet = !json[QString("forward")].isNull() && m_forward_isValid;

    m_status_ids_isValid = ::OpenAPI::fromJsonValue(m_status_ids, json[QString("status_ids")]);
    m_status_ids_isSet = !json[QString("status_ids")].isNull() && m_status_ids_isValid;
}

QString OAI_api_v1_reports_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_reports_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_forward_isSet) {
        obj.insert(QString("forward"), ::OpenAPI::toJsonValue(m_forward));
    }
    if (m_status_ids.size() > 0) {
        obj.insert(QString("status_ids"), ::OpenAPI::toJsonValue(m_status_ids));
    }
    return obj;
}

QString OAI_api_v1_reports_post_request::getAccountId() const {
    return m_account_id;
}
void OAI_api_v1_reports_post_request::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAI_api_v1_reports_post_request::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAI_api_v1_reports_post_request::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAI_api_v1_reports_post_request::getComment() const {
    return m_comment;
}
void OAI_api_v1_reports_post_request::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAI_api_v1_reports_post_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAI_api_v1_reports_post_request::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAI_api_v1_reports_post_request::isForward() const {
    return m_forward;
}
void OAI_api_v1_reports_post_request::setForward(const bool &forward) {
    m_forward = forward;
    m_forward_isSet = true;
}

bool OAI_api_v1_reports_post_request::is_forward_Set() const{
    return m_forward_isSet;
}

bool OAI_api_v1_reports_post_request::is_forward_Valid() const{
    return m_forward_isValid;
}

QList<QString> OAI_api_v1_reports_post_request::getStatusIds() const {
    return m_status_ids;
}
void OAI_api_v1_reports_post_request::setStatusIds(const QList<QString> &status_ids) {
    m_status_ids = status_ids;
    m_status_ids_isSet = true;
}

bool OAI_api_v1_reports_post_request::is_status_ids_Set() const{
    return m_status_ids_isSet;
}

bool OAI_api_v1_reports_post_request::is_status_ids_Valid() const{
    return m_status_ids_isValid;
}

bool OAI_api_v1_reports_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_reports_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && true;
}

} // namespace OpenAPI
