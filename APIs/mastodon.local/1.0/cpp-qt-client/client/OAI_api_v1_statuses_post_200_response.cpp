/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_statuses_post_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_statuses_post_200_response::OAI_api_v1_statuses_post_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_statuses_post_200_response::OAI_api_v1_statuses_post_200_response() {
    this->initializeModel();
}

OAI_api_v1_statuses_post_200_response::~OAI_api_v1_statuses_post_200_response() {}

void OAI_api_v1_statuses_post_200_response::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_application_isSet = false;
    m_application_isValid = false;

    m_bookmarked_isSet = false;
    m_bookmarked_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_emojis_isSet = false;
    m_emojis_isValid = false;

    m_favourited_isSet = false;
    m_favourited_isValid = false;

    m_favourites_count_isSet = false;
    m_favourites_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_reply_to_account_id_isSet = false;
    m_in_reply_to_account_id_isValid = false;

    m_in_reply_to_id_isSet = false;
    m_in_reply_to_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_media_attachments_isSet = false;
    m_media_attachments_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_reblog_isSet = false;
    m_reblog_isValid = false;

    m_reblogged_isSet = false;
    m_reblogged_isValid = false;

    m_reblogs_count_isSet = false;
    m_reblogs_count_isValid = false;

    m_replies_count_isSet = false;
    m_replies_count_isValid = false;

    m_sensitive_isSet = false;
    m_sensitive_isValid = false;

    m_spoiler_text_isSet = false;
    m_spoiler_text_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;
}

void OAI_api_v1_statuses_post_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_statuses_post_200_response::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_bookmarked_isValid = ::OpenAPI::fromJsonValue(m_bookmarked, json[QString("bookmarked")]);
    m_bookmarked_isSet = !json[QString("bookmarked")].isNull() && m_bookmarked_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_emojis_isValid = ::OpenAPI::fromJsonValue(m_emojis, json[QString("emojis")]);
    m_emojis_isSet = !json[QString("emojis")].isNull() && m_emojis_isValid;

    m_favourited_isValid = ::OpenAPI::fromJsonValue(m_favourited, json[QString("favourited")]);
    m_favourited_isSet = !json[QString("favourited")].isNull() && m_favourited_isValid;

    m_favourites_count_isValid = ::OpenAPI::fromJsonValue(m_favourites_count, json[QString("favourites_count")]);
    m_favourites_count_isSet = !json[QString("favourites_count")].isNull() && m_favourites_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_reply_to_account_id_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to_account_id, json[QString("in_reply_to_account_id")]);
    m_in_reply_to_account_id_isSet = !json[QString("in_reply_to_account_id")].isNull() && m_in_reply_to_account_id_isValid;

    m_in_reply_to_id_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to_id, json[QString("in_reply_to_id")]);
    m_in_reply_to_id_isSet = !json[QString("in_reply_to_id")].isNull() && m_in_reply_to_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_media_attachments_isValid = ::OpenAPI::fromJsonValue(m_media_attachments, json[QString("media_attachments")]);
    m_media_attachments_isSet = !json[QString("media_attachments")].isNull() && m_media_attachments_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_reblog_isValid = ::OpenAPI::fromJsonValue(m_reblog, json[QString("reblog")]);
    m_reblog_isSet = !json[QString("reblog")].isNull() && m_reblog_isValid;

    m_reblogged_isValid = ::OpenAPI::fromJsonValue(m_reblogged, json[QString("reblogged")]);
    m_reblogged_isSet = !json[QString("reblogged")].isNull() && m_reblogged_isValid;

    m_reblogs_count_isValid = ::OpenAPI::fromJsonValue(m_reblogs_count, json[QString("reblogs_count")]);
    m_reblogs_count_isSet = !json[QString("reblogs_count")].isNull() && m_reblogs_count_isValid;

    m_replies_count_isValid = ::OpenAPI::fromJsonValue(m_replies_count, json[QString("replies_count")]);
    m_replies_count_isSet = !json[QString("replies_count")].isNull() && m_replies_count_isValid;

    m_sensitive_isValid = ::OpenAPI::fromJsonValue(m_sensitive, json[QString("sensitive")]);
    m_sensitive_isSet = !json[QString("sensitive")].isNull() && m_sensitive_isValid;

    m_spoiler_text_isValid = ::OpenAPI::fromJsonValue(m_spoiler_text, json[QString("spoiler_text")]);
    m_spoiler_text_isSet = !json[QString("spoiler_text")].isNull() && m_spoiler_text_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduled_at")]);
    m_scheduled_at_isSet = !json[QString("scheduled_at")].isNull() && m_scheduled_at_isValid;
}

QString OAI_api_v1_statuses_post_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_statuses_post_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_bookmarked_isSet) {
        obj.insert(QString("bookmarked"), ::OpenAPI::toJsonValue(m_bookmarked));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_emojis.size() > 0) {
        obj.insert(QString("emojis"), ::OpenAPI::toJsonValue(m_emojis));
    }
    if (m_favourited_isSet) {
        obj.insert(QString("favourited"), ::OpenAPI::toJsonValue(m_favourited));
    }
    if (m_favourites_count_isSet) {
        obj.insert(QString("favourites_count"), ::OpenAPI::toJsonValue(m_favourites_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_reply_to_account_id_isSet) {
        obj.insert(QString("in_reply_to_account_id"), ::OpenAPI::toJsonValue(m_in_reply_to_account_id));
    }
    if (m_in_reply_to_id_isSet) {
        obj.insert(QString("in_reply_to_id"), ::OpenAPI::toJsonValue(m_in_reply_to_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_media_attachments.size() > 0) {
        obj.insert(QString("media_attachments"), ::OpenAPI::toJsonValue(m_media_attachments));
    }
    if (m_mentions.size() > 0) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_poll.isSet()) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_reblog.isSet()) {
        obj.insert(QString("reblog"), ::OpenAPI::toJsonValue(m_reblog));
    }
    if (m_reblogged_isSet) {
        obj.insert(QString("reblogged"), ::OpenAPI::toJsonValue(m_reblogged));
    }
    if (m_reblogs_count_isSet) {
        obj.insert(QString("reblogs_count"), ::OpenAPI::toJsonValue(m_reblogs_count));
    }
    if (m_replies_count_isSet) {
        obj.insert(QString("replies_count"), ::OpenAPI::toJsonValue(m_replies_count));
    }
    if (m_sensitive_isSet) {
        obj.insert(QString("sensitive"), ::OpenAPI::toJsonValue(m_sensitive));
    }
    if (m_spoiler_text_isSet) {
        obj.insert(QString("spoiler_text"), ::OpenAPI::toJsonValue(m_spoiler_text));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduled_at"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    return obj;
}

OAIAccount OAI_api_v1_statuses_post_200_response::getAccount() const {
    return m_account;
}
void OAI_api_v1_statuses_post_200_response::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_account_Set() const{
    return m_account_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_account_Valid() const{
    return m_account_isValid;
}

OAIApplication OAI_api_v1_statuses_post_200_response::getApplication() const {
    return m_application;
}
void OAI_api_v1_statuses_post_200_response::setApplication(const OAIApplication &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_application_Set() const{
    return m_application_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_application_Valid() const{
    return m_application_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isBookmarked() const {
    return m_bookmarked;
}
void OAI_api_v1_statuses_post_200_response::setBookmarked(const bool &bookmarked) {
    m_bookmarked = bookmarked;
    m_bookmarked_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_bookmarked_Set() const{
    return m_bookmarked_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_bookmarked_Valid() const{
    return m_bookmarked_isValid;
}

OAICard OAI_api_v1_statuses_post_200_response::getCard() const {
    return m_card;
}
void OAI_api_v1_statuses_post_200_response::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_card_Set() const{
    return m_card_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_card_Valid() const{
    return m_card_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getContent() const {
    return m_content;
}
void OAI_api_v1_statuses_post_200_response::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_content_Set() const{
    return m_content_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAI_api_v1_statuses_post_200_response::getCreatedAt() const {
    return m_created_at;
}
void OAI_api_v1_statuses_post_200_response::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIEmoji> OAI_api_v1_statuses_post_200_response::getEmojis() const {
    return m_emojis;
}
void OAI_api_v1_statuses_post_200_response::setEmojis(const QList<OAIEmoji> &emojis) {
    m_emojis = emojis;
    m_emojis_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_emojis_Set() const{
    return m_emojis_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_emojis_Valid() const{
    return m_emojis_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isFavourited() const {
    return m_favourited;
}
void OAI_api_v1_statuses_post_200_response::setFavourited(const bool &favourited) {
    m_favourited = favourited;
    m_favourited_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_favourited_Set() const{
    return m_favourited_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_favourited_Valid() const{
    return m_favourited_isValid;
}

qint32 OAI_api_v1_statuses_post_200_response::getFavouritesCount() const {
    return m_favourites_count;
}
void OAI_api_v1_statuses_post_200_response::setFavouritesCount(const qint32 &favourites_count) {
    m_favourites_count = favourites_count;
    m_favourites_count_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_favourites_count_Set() const{
    return m_favourites_count_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_favourites_count_Valid() const{
    return m_favourites_count_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getId() const {
    return m_id;
}
void OAI_api_v1_statuses_post_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getInReplyToAccountId() const {
    return m_in_reply_to_account_id;
}
void OAI_api_v1_statuses_post_200_response::setInReplyToAccountId(const QString &in_reply_to_account_id) {
    m_in_reply_to_account_id = in_reply_to_account_id;
    m_in_reply_to_account_id_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_in_reply_to_account_id_Set() const{
    return m_in_reply_to_account_id_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_in_reply_to_account_id_Valid() const{
    return m_in_reply_to_account_id_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getInReplyToId() const {
    return m_in_reply_to_id;
}
void OAI_api_v1_statuses_post_200_response::setInReplyToId(const QString &in_reply_to_id) {
    m_in_reply_to_id = in_reply_to_id;
    m_in_reply_to_id_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_in_reply_to_id_Set() const{
    return m_in_reply_to_id_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_in_reply_to_id_Valid() const{
    return m_in_reply_to_id_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getLanguage() const {
    return m_language;
}
void OAI_api_v1_statuses_post_200_response::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_language_Set() const{
    return m_language_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAIAttachment> OAI_api_v1_statuses_post_200_response::getMediaAttachments() const {
    return m_media_attachments;
}
void OAI_api_v1_statuses_post_200_response::setMediaAttachments(const QList<OAIAttachment> &media_attachments) {
    m_media_attachments = media_attachments;
    m_media_attachments_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_media_attachments_Set() const{
    return m_media_attachments_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_media_attachments_Valid() const{
    return m_media_attachments_isValid;
}

QList<OAIMention> OAI_api_v1_statuses_post_200_response::getMentions() const {
    return m_mentions;
}
void OAI_api_v1_statuses_post_200_response::setMentions(const QList<OAIMention> &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_mentions_Valid() const{
    return m_mentions_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isMuted() const {
    return m_muted;
}
void OAI_api_v1_statuses_post_200_response::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_muted_Valid() const{
    return m_muted_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isPinned() const {
    return m_pinned;
}
void OAI_api_v1_statuses_post_200_response::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_pinned_Valid() const{
    return m_pinned_isValid;
}

OAIPoll OAI_api_v1_statuses_post_200_response::getPoll() const {
    return m_poll;
}
void OAI_api_v1_statuses_post_200_response::setPoll(const OAIPoll &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_poll_Valid() const{
    return m_poll_isValid;
}

OAIStatus OAI_api_v1_statuses_post_200_response::getReblog() const {
    return m_reblog;
}
void OAI_api_v1_statuses_post_200_response::setReblog(const OAIStatus &reblog) {
    m_reblog = reblog;
    m_reblog_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_reblog_Set() const{
    return m_reblog_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_reblog_Valid() const{
    return m_reblog_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isReblogged() const {
    return m_reblogged;
}
void OAI_api_v1_statuses_post_200_response::setReblogged(const bool &reblogged) {
    m_reblogged = reblogged;
    m_reblogged_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_reblogged_Set() const{
    return m_reblogged_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_reblogged_Valid() const{
    return m_reblogged_isValid;
}

qint32 OAI_api_v1_statuses_post_200_response::getReblogsCount() const {
    return m_reblogs_count;
}
void OAI_api_v1_statuses_post_200_response::setReblogsCount(const qint32 &reblogs_count) {
    m_reblogs_count = reblogs_count;
    m_reblogs_count_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_reblogs_count_Set() const{
    return m_reblogs_count_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_reblogs_count_Valid() const{
    return m_reblogs_count_isValid;
}

qint32 OAI_api_v1_statuses_post_200_response::getRepliesCount() const {
    return m_replies_count;
}
void OAI_api_v1_statuses_post_200_response::setRepliesCount(const qint32 &replies_count) {
    m_replies_count = replies_count;
    m_replies_count_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_replies_count_Set() const{
    return m_replies_count_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_replies_count_Valid() const{
    return m_replies_count_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isSensitive() const {
    return m_sensitive;
}
void OAI_api_v1_statuses_post_200_response::setSensitive(const bool &sensitive) {
    m_sensitive = sensitive;
    m_sensitive_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_sensitive_Set() const{
    return m_sensitive_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_sensitive_Valid() const{
    return m_sensitive_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getSpoilerText() const {
    return m_spoiler_text;
}
void OAI_api_v1_statuses_post_200_response::setSpoilerText(const QString &spoiler_text) {
    m_spoiler_text = spoiler_text;
    m_spoiler_text_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_spoiler_text_Set() const{
    return m_spoiler_text_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_spoiler_text_Valid() const{
    return m_spoiler_text_isValid;
}

QList<OAITag> OAI_api_v1_statuses_post_200_response::getTags() const {
    return m_tags;
}
void OAI_api_v1_statuses_post_200_response::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getText() const {
    return m_text;
}
void OAI_api_v1_statuses_post_200_response::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_text_Set() const{
    return m_text_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_text_Valid() const{
    return m_text_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getUri() const {
    return m_uri;
}
void OAI_api_v1_statuses_post_200_response::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getUrl() const {
    return m_url;
}
void OAI_api_v1_statuses_post_200_response::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_url_Set() const{
    return m_url_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_url_Valid() const{
    return m_url_isValid;
}

QString OAI_api_v1_statuses_post_200_response::getVisibility() const {
    return m_visibility;
}
void OAI_api_v1_statuses_post_200_response::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIStatusParams OAI_api_v1_statuses_post_200_response::getParams() const {
    return m_params;
}
void OAI_api_v1_statuses_post_200_response::setParams(const OAIStatusParams &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_params_Set() const{
    return m_params_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_params_Valid() const{
    return m_params_isValid;
}

QDateTime OAI_api_v1_statuses_post_200_response::getScheduledAt() const {
    return m_scheduled_at;
}
void OAI_api_v1_statuses_post_200_response::setScheduledAt(const QDateTime &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAI_api_v1_statuses_post_200_response::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAI_api_v1_statuses_post_200_response::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

bool OAI_api_v1_statuses_post_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bookmarked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emojis.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourites_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reblog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reblogged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reblogs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoiler_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_statuses_post_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_media_attachments_isValid && m_params_isValid && m_scheduled_at_isValid && true;
}

} // namespace OpenAPI
