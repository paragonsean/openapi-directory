/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_follow_requests_count_isSet = false;
    m_follow_requests_count_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_sensitive_isSet = false;
    m_sensitive_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_follow_requests_count_isValid = ::OpenAPI::fromJsonValue(m_follow_requests_count, json[QString("follow_requests_count")]);
    m_follow_requests_count_isSet = !json[QString("follow_requests_count")].isNull() && m_follow_requests_count_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_sensitive_isValid = ::OpenAPI::fromJsonValue(m_sensitive, json[QString("sensitive")]);
    m_sensitive_isSet = !json[QString("sensitive")].isNull() && m_sensitive_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_follow_requests_count_isSet) {
        obj.insert(QString("follow_requests_count"), ::OpenAPI::toJsonValue(m_follow_requests_count));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_sensitive_isSet) {
        obj.insert(QString("sensitive"), ::OpenAPI::toJsonValue(m_sensitive));
    }
    return obj;
}

QList<OAIField> OAISource::getFields() const {
    return m_fields;
}
void OAISource::setFields(const QList<OAIField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISource::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISource::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAISource::getFollowRequestsCount() const {
    return m_follow_requests_count;
}
void OAISource::setFollowRequestsCount(const qint32 &follow_requests_count) {
    m_follow_requests_count = follow_requests_count;
    m_follow_requests_count_isSet = true;
}

bool OAISource::is_follow_requests_count_Set() const{
    return m_follow_requests_count_isSet;
}

bool OAISource::is_follow_requests_count_Valid() const{
    return m_follow_requests_count_isValid;
}

QString OAISource::getLanguage() const {
    return m_language;
}
void OAISource::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISource::is_language_Set() const{
    return m_language_isSet;
}

bool OAISource::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISource::getNote() const {
    return m_note;
}
void OAISource::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISource::is_note_Set() const{
    return m_note_isSet;
}

bool OAISource::is_note_Valid() const{
    return m_note_isValid;
}

QString OAISource::getPrivacy() const {
    return m_privacy;
}
void OAISource::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAISource::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAISource::is_privacy_Valid() const{
    return m_privacy_isValid;
}

bool OAISource::isSensitive() const {
    return m_sensitive;
}
void OAISource::setSensitive(const bool &sensitive) {
    m_sensitive = sensitive;
    m_sensitive_isSet = true;
}

bool OAISource::is_sensitive_Set() const{
    return m_sensitive_isSet;
}

bool OAISource::is_sensitive_Valid() const{
    return m_sensitive_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_requests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
