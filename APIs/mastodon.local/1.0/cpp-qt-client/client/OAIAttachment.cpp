/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_blurhash_isSet = false;
    m_blurhash_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_preview_url_isSet = false;
    m_preview_url_isValid = false;

    m_remote_url_isSet = false;
    m_remote_url_isValid = false;

    m_text_url_isSet = false;
    m_text_url_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_blurhash_isValid = ::OpenAPI::fromJsonValue(m_blurhash, json[QString("blurhash")]);
    m_blurhash_isSet = !json[QString("blurhash")].isNull() && m_blurhash_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_preview_url_isValid = ::OpenAPI::fromJsonValue(m_preview_url, json[QString("preview_url")]);
    m_preview_url_isSet = !json[QString("preview_url")].isNull() && m_preview_url_isValid;

    m_remote_url_isValid = ::OpenAPI::fromJsonValue(m_remote_url, json[QString("remote_url")]);
    m_remote_url_isSet = !json[QString("remote_url")].isNull() && m_remote_url_isValid;

    m_text_url_isValid = ::OpenAPI::fromJsonValue(m_text_url, json[QString("text_url")]);
    m_text_url_isSet = !json[QString("text_url")].isNull() && m_text_url_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_blurhash_isSet) {
        obj.insert(QString("blurhash"), ::OpenAPI::toJsonValue(m_blurhash));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_preview_url_isSet) {
        obj.insert(QString("preview_url"), ::OpenAPI::toJsonValue(m_preview_url));
    }
    if (m_remote_url_isSet) {
        obj.insert(QString("remote_url"), ::OpenAPI::toJsonValue(m_remote_url));
    }
    if (m_text_url_isSet) {
        obj.insert(QString("text_url"), ::OpenAPI::toJsonValue(m_text_url));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAttachment::getBlurhash() const {
    return m_blurhash;
}
void OAIAttachment::setBlurhash(const QString &blurhash) {
    m_blurhash = blurhash;
    m_blurhash_isSet = true;
}

bool OAIAttachment::is_blurhash_Set() const{
    return m_blurhash_isSet;
}

bool OAIAttachment::is_blurhash_Valid() const{
    return m_blurhash_isValid;
}

QString OAIAttachment::getDescription() const {
    return m_description;
}
void OAIAttachment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttachment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttachment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAttachment::getId() const {
    return m_id;
}
void OAIAttachment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachment::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIAttachment::getMeta() const {
    return m_meta;
}
void OAIAttachment::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIAttachment::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIAttachment::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIAttachment::getPreviewUrl() const {
    return m_preview_url;
}
void OAIAttachment::setPreviewUrl(const QString &preview_url) {
    m_preview_url = preview_url;
    m_preview_url_isSet = true;
}

bool OAIAttachment::is_preview_url_Set() const{
    return m_preview_url_isSet;
}

bool OAIAttachment::is_preview_url_Valid() const{
    return m_preview_url_isValid;
}

QString OAIAttachment::getRemoteUrl() const {
    return m_remote_url;
}
void OAIAttachment::setRemoteUrl(const QString &remote_url) {
    m_remote_url = remote_url;
    m_remote_url_isSet = true;
}

bool OAIAttachment::is_remote_url_Set() const{
    return m_remote_url_isSet;
}

bool OAIAttachment::is_remote_url_Valid() const{
    return m_remote_url_isValid;
}

QString OAIAttachment::getTextUrl() const {
    return m_text_url;
}
void OAIAttachment::setTextUrl(const QString &text_url) {
    m_text_url = text_url;
    m_text_url_isSet = true;
}

bool OAIAttachment::is_text_url_Set() const{
    return m_text_url_isSet;
}

bool OAIAttachment::is_text_url_Valid() const{
    return m_text_url_isValid;
}

QString OAIAttachment::getType() const {
    return m_type;
}
void OAIAttachment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttachment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttachment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAttachment::getUrl() const {
    return m_url;
}
void OAIAttachment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAttachment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAttachment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blurhash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_preview_url_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
