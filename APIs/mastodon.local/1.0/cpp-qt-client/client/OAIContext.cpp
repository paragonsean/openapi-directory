/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContext::OAIContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContext::OAIContext() {
    this->initializeModel();
}

OAIContext::~OAIContext() {}

void OAIContext::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_descendants_isSet = false;
    m_descendants_isValid = false;
}

void OAIContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContext::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_descendants_isValid = ::OpenAPI::fromJsonValue(m_descendants, json[QString("descendants")]);
    m_descendants_isSet = !json[QString("descendants")].isNull() && m_descendants_isValid;
}

QString OAIContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContext::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_descendants.size() > 0) {
        obj.insert(QString("descendants"), ::OpenAPI::toJsonValue(m_descendants));
    }
    return obj;
}

QList<OAIStatus> OAIContext::getAncestors() const {
    return m_ancestors;
}
void OAIContext::setAncestors(const QList<OAIStatus> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIContext::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIContext::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QList<OAIStatus> OAIContext::getDescendants() const {
    return m_descendants;
}
void OAIContext::setDescendants(const QList<OAIStatus> &descendants) {
    m_descendants = descendants;
    m_descendants_isSet = true;
}

bool OAIContext::is_descendants_Set() const{
    return m_descendants_isSet;
}

bool OAIContext::is_descendants_Valid() const{
    return m_descendants_isValid;
}

bool OAIContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_descendants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ancestors_isValid && m_descendants_isValid && true;
}

} // namespace OpenAPI
