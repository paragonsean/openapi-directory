/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_action_taken_isSet = false;
    m_action_taken_isValid = false;

    m_action_taken_at_isSet = false;
    m_action_taken_at_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_forwarded_isSet = false;
    m_forwarded_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rule_ids_isSet = false;
    m_rule_ids_isValid = false;

    m_status_ids_isSet = false;
    m_status_ids_isValid = false;

    m_target_account_isSet = false;
    m_target_account_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_action_taken_isValid = ::OpenAPI::fromJsonValue(m_action_taken, json[QString("action_taken")]);
    m_action_taken_isSet = !json[QString("action_taken")].isNull() && m_action_taken_isValid;

    m_action_taken_at_isValid = ::OpenAPI::fromJsonValue(m_action_taken_at, json[QString("action_taken_at")]);
    m_action_taken_at_isSet = !json[QString("action_taken_at")].isNull() && m_action_taken_at_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_forwarded_isValid = ::OpenAPI::fromJsonValue(m_forwarded, json[QString("forwarded")]);
    m_forwarded_isSet = !json[QString("forwarded")].isNull() && m_forwarded_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rule_ids_isValid = ::OpenAPI::fromJsonValue(m_rule_ids, json[QString("rule_ids")]);
    m_rule_ids_isSet = !json[QString("rule_ids")].isNull() && m_rule_ids_isValid;

    m_status_ids_isValid = ::OpenAPI::fromJsonValue(m_status_ids, json[QString("status_ids")]);
    m_status_ids_isSet = !json[QString("status_ids")].isNull() && m_status_ids_isValid;

    m_target_account_isValid = ::OpenAPI::fromJsonValue(m_target_account, json[QString("target_account")]);
    m_target_account_isSet = !json[QString("target_account")].isNull() && m_target_account_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_action_taken_isSet) {
        obj.insert(QString("action_taken"), ::OpenAPI::toJsonValue(m_action_taken));
    }
    if (m_action_taken_at_isSet) {
        obj.insert(QString("action_taken_at"), ::OpenAPI::toJsonValue(m_action_taken_at));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_forwarded_isSet) {
        obj.insert(QString("forwarded"), ::OpenAPI::toJsonValue(m_forwarded));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rule_ids.size() > 0) {
        obj.insert(QString("rule_ids"), ::OpenAPI::toJsonValue(m_rule_ids));
    }
    if (m_status_ids.size() > 0) {
        obj.insert(QString("status_ids"), ::OpenAPI::toJsonValue(m_status_ids));
    }
    if (m_target_account.isSet()) {
        obj.insert(QString("target_account"), ::OpenAPI::toJsonValue(m_target_account));
    }
    return obj;
}

bool OAIReport::isActionTaken() const {
    return m_action_taken;
}
void OAIReport::setActionTaken(const bool &action_taken) {
    m_action_taken = action_taken;
    m_action_taken_isSet = true;
}

bool OAIReport::is_action_taken_Set() const{
    return m_action_taken_isSet;
}

bool OAIReport::is_action_taken_Valid() const{
    return m_action_taken_isValid;
}

QDateTime OAIReport::getActionTakenAt() const {
    return m_action_taken_at;
}
void OAIReport::setActionTakenAt(const QDateTime &action_taken_at) {
    m_action_taken_at = action_taken_at;
    m_action_taken_at_isSet = true;
}

bool OAIReport::is_action_taken_at_Set() const{
    return m_action_taken_at_isSet;
}

bool OAIReport::is_action_taken_at_Valid() const{
    return m_action_taken_at_isValid;
}

QString OAIReport::getCategory() const {
    return m_category;
}
void OAIReport::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIReport::is_category_Set() const{
    return m_category_isSet;
}

bool OAIReport::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIReport::getComment() const {
    return m_comment;
}
void OAIReport::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReport::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReport::is_comment_Valid() const{
    return m_comment_isValid;
}

QDateTime OAIReport::getCreatedAt() const {
    return m_created_at;
}
void OAIReport::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIReport::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIReport::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIReport::isForwarded() const {
    return m_forwarded;
}
void OAIReport::setForwarded(const bool &forwarded) {
    m_forwarded = forwarded;
    m_forwarded_isSet = true;
}

bool OAIReport::is_forwarded_Set() const{
    return m_forwarded_isSet;
}

bool OAIReport::is_forwarded_Valid() const{
    return m_forwarded_isValid;
}

QString OAIReport::getId() const {
    return m_id;
}
void OAIReport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReport::is_id_Valid() const{
    return m_id_isValid;
}

QList<qint32> OAIReport::getRuleIds() const {
    return m_rule_ids;
}
void OAIReport::setRuleIds(const QList<qint32> &rule_ids) {
    m_rule_ids = rule_ids;
    m_rule_ids_isSet = true;
}

bool OAIReport::is_rule_ids_Set() const{
    return m_rule_ids_isSet;
}

bool OAIReport::is_rule_ids_Valid() const{
    return m_rule_ids_isValid;
}

QList<qint32> OAIReport::getStatusIds() const {
    return m_status_ids;
}
void OAIReport::setStatusIds(const QList<qint32> &status_ids) {
    m_status_ids = status_ids;
    m_status_ids_isSet = true;
}

bool OAIReport::is_status_ids_Set() const{
    return m_status_ids_isSet;
}

bool OAIReport::is_status_ids_Valid() const{
    return m_status_ids_isValid;
}

OAIAccount OAIReport::getTargetAccount() const {
    return m_target_account;
}
void OAIReport::setTargetAccount(const OAIAccount &target_account) {
    m_target_account = target_account;
    m_target_account_isSet = true;
}

bool OAIReport::is_target_account_Set() const{
    return m_target_account_isSet;
}

bool OAIReport::is_target_account_Valid() const{
    return m_target_account_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_taken_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
