/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_media_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_media_post_request::OAI_api_v1_media_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_media_post_request::OAI_api_v1_media_post_request() {
    this->initializeModel();
}

OAI_api_v1_media_post_request::~OAI_api_v1_media_post_request() {}

void OAI_api_v1_media_post_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_focus_isSet = false;
    m_focus_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAI_api_v1_media_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_media_post_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_focus_isValid = ::OpenAPI::fromJsonValue(m_focus, json[QString("focus")]);
    m_focus_isSet = !json[QString("focus")].isNull() && m_focus_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAI_api_v1_media_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_media_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_focus_isSet) {
        obj.insert(QString("focus"), ::OpenAPI::toJsonValue(m_focus));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

QString OAI_api_v1_media_post_request::getDescription() const {
    return m_description;
}
void OAI_api_v1_media_post_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAI_api_v1_media_post_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAI_api_v1_media_post_request::is_description_Valid() const{
    return m_description_isValid;
}

OAIHttpFileElement OAI_api_v1_media_post_request::getFile() const {
    return m_file;
}
void OAI_api_v1_media_post_request::setFile(const OAIHttpFileElement &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAI_api_v1_media_post_request::is_file_Set() const{
    return m_file_isSet;
}

bool OAI_api_v1_media_post_request::is_file_Valid() const{
    return m_file_isValid;
}

QString OAI_api_v1_media_post_request::getFocus() const {
    return m_focus;
}
void OAI_api_v1_media_post_request::setFocus(const QString &focus) {
    m_focus = focus;
    m_focus_isSet = true;
}

bool OAI_api_v1_media_post_request::is_focus_Set() const{
    return m_focus_isSet;
}

bool OAI_api_v1_media_post_request::is_focus_Valid() const{
    return m_focus_isValid;
}

OAIHttpFileElement OAI_api_v1_media_post_request::getThumbnail() const {
    return m_thumbnail;
}
void OAI_api_v1_media_post_request::setThumbnail(const OAIHttpFileElement &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAI_api_v1_media_post_request::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAI_api_v1_media_post_request::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAI_api_v1_media_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_focus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_media_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_isValid && true;
}

} // namespace OpenAPI
