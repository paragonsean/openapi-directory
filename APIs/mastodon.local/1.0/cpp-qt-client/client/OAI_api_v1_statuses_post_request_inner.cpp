/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_v1_statuses_post_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_v1_statuses_post_request_inner::OAI_api_v1_statuses_post_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_v1_statuses_post_request_inner::OAI_api_v1_statuses_post_request_inner() {
    this->initializeModel();
}

OAI_api_v1_statuses_post_request_inner::~OAI_api_v1_statuses_post_request_inner() {}

void OAI_api_v1_statuses_post_request_inner::initializeModel() {

    m_in_reply_to_id_isSet = false;
    m_in_reply_to_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_media_ids_isSet = false;
    m_media_ids_isValid = false;

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_sensitive_isSet = false;
    m_sensitive_isValid = false;

    m_spoiler_text_isSet = false;
    m_spoiler_text_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAI_api_v1_statuses_post_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_v1_statuses_post_request_inner::fromJsonObject(QJsonObject json) {

    m_in_reply_to_id_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to_id, json[QString("in_reply_to_id")]);
    m_in_reply_to_id_isSet = !json[QString("in_reply_to_id")].isNull() && m_in_reply_to_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_media_ids_isValid = ::OpenAPI::fromJsonValue(m_media_ids, json[QString("media_ids")]);
    m_media_ids_isSet = !json[QString("media_ids")].isNull() && m_media_ids_isValid;

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduled_at")]);
    m_scheduled_at_isSet = !json[QString("scheduled_at")].isNull() && m_scheduled_at_isValid;

    m_sensitive_isValid = ::OpenAPI::fromJsonValue(m_sensitive, json[QString("sensitive")]);
    m_sensitive_isSet = !json[QString("sensitive")].isNull() && m_sensitive_isValid;

    m_spoiler_text_isValid = ::OpenAPI::fromJsonValue(m_spoiler_text, json[QString("spoiler_text")]);
    m_spoiler_text_isSet = !json[QString("spoiler_text")].isNull() && m_spoiler_text_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_v1_statuses_post_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_in_reply_to_id_isSet) {
        obj.insert(QString("in_reply_to_id"), ::OpenAPI::toJsonValue(m_in_reply_to_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_media_ids.size() > 0) {
        obj.insert(QString("media_ids"), ::OpenAPI::toJsonValue(m_media_ids));
    }
    if (m_poll.size() > 0) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduled_at"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_sensitive_isSet) {
        obj.insert(QString("sensitive"), ::OpenAPI::toJsonValue(m_sensitive));
    }
    if (m_spoiler_text_isSet) {
        obj.insert(QString("spoiler_text"), ::OpenAPI::toJsonValue(m_spoiler_text));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAI_api_v1_statuses_post_request_inner::getInReplyToId() const {
    return m_in_reply_to_id;
}
void OAI_api_v1_statuses_post_request_inner::setInReplyToId(const QString &in_reply_to_id) {
    m_in_reply_to_id = in_reply_to_id;
    m_in_reply_to_id_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_in_reply_to_id_Set() const{
    return m_in_reply_to_id_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_in_reply_to_id_Valid() const{
    return m_in_reply_to_id_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::getLanguage() const {
    return m_language;
}
void OAI_api_v1_statuses_post_request_inner::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_language_Set() const{
    return m_language_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAI_api_v1_statuses_post_request_inner::getMediaIds() const {
    return m_media_ids;
}
void OAI_api_v1_statuses_post_request_inner::setMediaIds(const QList<QString> &media_ids) {
    m_media_ids = media_ids;
    m_media_ids_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_media_ids_Set() const{
    return m_media_ids_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_media_ids_Valid() const{
    return m_media_ids_isValid;
}

QMap<OAIObject> OAI_api_v1_statuses_post_request_inner::getPoll() const {
    return m_poll;
}
void OAI_api_v1_statuses_post_request_inner::setPoll(const QMap<OAIObject> &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_poll_Valid() const{
    return m_poll_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::getScheduledAt() const {
    return m_scheduled_at;
}
void OAI_api_v1_statuses_post_request_inner::setScheduledAt(const QString &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

bool OAI_api_v1_statuses_post_request_inner::isSensitive() const {
    return m_sensitive;
}
void OAI_api_v1_statuses_post_request_inner::setSensitive(const bool &sensitive) {
    m_sensitive = sensitive;
    m_sensitive_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_sensitive_Set() const{
    return m_sensitive_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_sensitive_Valid() const{
    return m_sensitive_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::getSpoilerText() const {
    return m_spoiler_text;
}
void OAI_api_v1_statuses_post_request_inner::setSpoilerText(const QString &spoiler_text) {
    m_spoiler_text = spoiler_text;
    m_spoiler_text_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_spoiler_text_Set() const{
    return m_spoiler_text_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_spoiler_text_Valid() const{
    return m_spoiler_text_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::getStatus() const {
    return m_status;
}
void OAI_api_v1_statuses_post_request_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_api_v1_statuses_post_request_inner::getVisibility() const {
    return m_visibility;
}
void OAI_api_v1_statuses_post_request_inner::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAI_api_v1_statuses_post_request_inner::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAI_api_v1_statuses_post_request_inner::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAI_api_v1_statuses_post_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_reply_to_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoiler_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_v1_statuses_post_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
