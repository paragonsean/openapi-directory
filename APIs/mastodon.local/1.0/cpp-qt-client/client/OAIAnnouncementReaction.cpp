/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnouncementReaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnouncementReaction::OAIAnnouncementReaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnouncementReaction::OAIAnnouncementReaction() {
    this->initializeModel();
}

OAIAnnouncementReaction::~OAIAnnouncementReaction() {}

void OAIAnnouncementReaction::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_me_isSet = false;
    m_me_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_static_url_isSet = false;
    m_static_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAnnouncementReaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnouncementReaction::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_me_isValid = ::OpenAPI::fromJsonValue(m_me, json[QString("me")]);
    m_me_isSet = !json[QString("me")].isNull() && m_me_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_static_url_isValid = ::OpenAPI::fromJsonValue(m_static_url, json[QString("static_url")]);
    m_static_url_isSet = !json[QString("static_url")].isNull() && m_static_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAnnouncementReaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnouncementReaction::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_me_isSet) {
        obj.insert(QString("me"), ::OpenAPI::toJsonValue(m_me));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_static_url_isSet) {
        obj.insert(QString("static_url"), ::OpenAPI::toJsonValue(m_static_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIAnnouncementReaction::getCount() const {
    return m_count;
}
void OAIAnnouncementReaction::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAnnouncementReaction::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAnnouncementReaction::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIAnnouncementReaction::isMe() const {
    return m_me;
}
void OAIAnnouncementReaction::setMe(const bool &me) {
    m_me = me;
    m_me_isSet = true;
}

bool OAIAnnouncementReaction::is_me_Set() const{
    return m_me_isSet;
}

bool OAIAnnouncementReaction::is_me_Valid() const{
    return m_me_isValid;
}

QString OAIAnnouncementReaction::getName() const {
    return m_name;
}
void OAIAnnouncementReaction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnnouncementReaction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnnouncementReaction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnnouncementReaction::getStaticUrl() const {
    return m_static_url;
}
void OAIAnnouncementReaction::setStaticUrl(const QString &static_url) {
    m_static_url = static_url;
    m_static_url_isSet = true;
}

bool OAIAnnouncementReaction::is_static_url_Set() const{
    return m_static_url_isSet;
}

bool OAIAnnouncementReaction::is_static_url_Valid() const{
    return m_static_url_isValid;
}

QString OAIAnnouncementReaction::getUrl() const {
    return m_url;
}
void OAIAnnouncementReaction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAnnouncementReaction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAnnouncementReaction::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAnnouncementReaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnouncementReaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
