/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledStatus::OAIScheduledStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledStatus::OAIScheduledStatus() {
    this->initializeModel();
}

OAIScheduledStatus::~OAIScheduledStatus() {}

void OAIScheduledStatus::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_attachments_isSet = false;
    m_media_attachments_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;
}

void OAIScheduledStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledStatus::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_attachments_isValid = ::OpenAPI::fromJsonValue(m_media_attachments, json[QString("media_attachments")]);
    m_media_attachments_isSet = !json[QString("media_attachments")].isNull() && m_media_attachments_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduled_at")]);
    m_scheduled_at_isSet = !json[QString("scheduled_at")].isNull() && m_scheduled_at_isValid;
}

QString OAIScheduledStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_attachments.size() > 0) {
        obj.insert(QString("media_attachments"), ::OpenAPI::toJsonValue(m_media_attachments));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduled_at"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    return obj;
}

QString OAIScheduledStatus::getId() const {
    return m_id;
}
void OAIScheduledStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduledStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduledStatus::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIAttachment> OAIScheduledStatus::getMediaAttachments() const {
    return m_media_attachments;
}
void OAIScheduledStatus::setMediaAttachments(const QList<OAIAttachment> &media_attachments) {
    m_media_attachments = media_attachments;
    m_media_attachments_isSet = true;
}

bool OAIScheduledStatus::is_media_attachments_Set() const{
    return m_media_attachments_isSet;
}

bool OAIScheduledStatus::is_media_attachments_Valid() const{
    return m_media_attachments_isValid;
}

OAIStatusParams OAIScheduledStatus::getParams() const {
    return m_params;
}
void OAIScheduledStatus::setParams(const OAIStatusParams &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIScheduledStatus::is_params_Set() const{
    return m_params_isSet;
}

bool OAIScheduledStatus::is_params_Valid() const{
    return m_params_isValid;
}

QDateTime OAIScheduledStatus::getScheduledAt() const {
    return m_scheduled_at;
}
void OAIScheduledStatus::setScheduledAt(const QDateTime &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAIScheduledStatus::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAIScheduledStatus::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

bool OAIScheduledStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_media_attachments_isValid && m_params_isValid && m_scheduled_at_isValid && true;
}

} // namespace OpenAPI
