/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushSubscription::OAIPushSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushSubscription::OAIPushSubscription() {
    this->initializeModel();
}

OAIPushSubscription::~OAIPushSubscription() {}

void OAIPushSubscription::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_server_key_isSet = false;
    m_server_key_isValid = false;
}

void OAIPushSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushSubscription::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_server_key_isValid = ::OpenAPI::fromJsonValue(m_server_key, json[QString("server_key")]);
    m_server_key_isSet = !json[QString("server_key")].isNull() && m_server_key_isValid;
}

QString OAIPushSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts_isSet) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_server_key_isSet) {
        obj.insert(QString("server_key"), ::OpenAPI::toJsonValue(m_server_key));
    }
    return obj;
}

OAIObject OAIPushSubscription::getAlerts() const {
    return m_alerts;
}
void OAIPushSubscription::setAlerts(const OAIObject &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIPushSubscription::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIPushSubscription::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QString OAIPushSubscription::getEndpoint() const {
    return m_endpoint;
}
void OAIPushSubscription::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIPushSubscription::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIPushSubscription::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIPushSubscription::getId() const {
    return m_id;
}
void OAIPushSubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPushSubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPushSubscription::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPushSubscription::getServerKey() const {
    return m_server_key;
}
void OAIPushSubscription::setServerKey(const QString &server_key) {
    m_server_key = server_key;
    m_server_key_isSet = true;
}

bool OAIPushSubscription::is_server_key_Set() const{
    return m_server_key_isSet;
}

bool OAIPushSubscription::is_server_key_Valid() const{
    return m_server_key_isValid;
}

bool OAIPushSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alerts_isValid && m_endpoint_isValid && m_id_isValid && m_server_key_isValid && true;
}

} // namespace OpenAPI
