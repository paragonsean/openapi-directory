/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_author_url_isSet = false;
    m_author_url_isValid = false;

    m_blurhash_isSet = false;
    m_blurhash_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_provider_url_isSet = false;
    m_provider_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("author_name")]);
    m_author_name_isSet = !json[QString("author_name")].isNull() && m_author_name_isValid;

    m_author_url_isValid = ::OpenAPI::fromJsonValue(m_author_url, json[QString("author_url")]);
    m_author_url_isSet = !json[QString("author_url")].isNull() && m_author_url_isValid;

    m_blurhash_isValid = ::OpenAPI::fromJsonValue(m_blurhash, json[QString("blurhash")]);
    m_blurhash_isSet = !json[QString("blurhash")].isNull() && m_blurhash_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("provider_name")]);
    m_provider_name_isSet = !json[QString("provider_name")].isNull() && m_provider_name_isValid;

    m_provider_url_isValid = ::OpenAPI::fromJsonValue(m_provider_url, json[QString("provider_url")]);
    m_provider_url_isSet = !json[QString("provider_url")].isNull() && m_provider_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_author_name_isSet) {
        obj.insert(QString("author_name"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_author_url_isSet) {
        obj.insert(QString("author_url"), ::OpenAPI::toJsonValue(m_author_url));
    }
    if (m_blurhash_isSet) {
        obj.insert(QString("blurhash"), ::OpenAPI::toJsonValue(m_blurhash));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("provider_name"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_provider_url_isSet) {
        obj.insert(QString("provider_url"), ::OpenAPI::toJsonValue(m_provider_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICard::getAuthorName() const {
    return m_author_name;
}
void OAICard::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAICard::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAICard::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAICard::getAuthorUrl() const {
    return m_author_url;
}
void OAICard::setAuthorUrl(const QString &author_url) {
    m_author_url = author_url;
    m_author_url_isSet = true;
}

bool OAICard::is_author_url_Set() const{
    return m_author_url_isSet;
}

bool OAICard::is_author_url_Valid() const{
    return m_author_url_isValid;
}

QString OAICard::getBlurhash() const {
    return m_blurhash;
}
void OAICard::setBlurhash(const QString &blurhash) {
    m_blurhash = blurhash;
    m_blurhash_isSet = true;
}

bool OAICard::is_blurhash_Set() const{
    return m_blurhash_isSet;
}

bool OAICard::is_blurhash_Valid() const{
    return m_blurhash_isValid;
}

QString OAICard::getDescription() const {
    return m_description;
}
void OAICard::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICard::is_description_Set() const{
    return m_description_isSet;
}

bool OAICard::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICard::getHeight() const {
    return m_height;
}
void OAICard::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICard::is_height_Set() const{
    return m_height_isSet;
}

bool OAICard::is_height_Valid() const{
    return m_height_isValid;
}

QString OAICard::getHtml() const {
    return m_html;
}
void OAICard::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAICard::is_html_Set() const{
    return m_html_isSet;
}

bool OAICard::is_html_Valid() const{
    return m_html_isValid;
}

QString OAICard::getImage() const {
    return m_image;
}
void OAICard::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICard::is_image_Set() const{
    return m_image_isSet;
}

bool OAICard::is_image_Valid() const{
    return m_image_isValid;
}

QString OAICard::getProviderName() const {
    return m_provider_name;
}
void OAICard::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAICard::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAICard::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QString OAICard::getProviderUrl() const {
    return m_provider_url;
}
void OAICard::setProviderUrl(const QString &provider_url) {
    m_provider_url = provider_url;
    m_provider_url_isSet = true;
}

bool OAICard::is_provider_url_Set() const{
    return m_provider_url_isSet;
}

bool OAICard::is_provider_url_Valid() const{
    return m_provider_url_isValid;
}

QString OAICard::getTitle() const {
    return m_title;
}
void OAICard::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICard::is_title_Set() const{
    return m_title_isSet;
}

bool OAICard::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICard::getType() const {
    return m_type;
}
void OAICard::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICard::is_type_Set() const{
    return m_type_isSet;
}

bool OAICard::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICard::getUrl() const {
    return m_url;
}
void OAICard::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICard::is_url_Set() const{
    return m_url_isSet;
}

bool OAICard::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAICard::getWidth() const {
    return m_width;
}
void OAICard::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICard::is_width_Set() const{
    return m_width_isSet;
}

bool OAICard::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blurhash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_title_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
