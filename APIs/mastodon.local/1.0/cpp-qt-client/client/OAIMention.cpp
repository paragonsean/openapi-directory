/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMention::OAIMention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMention::OAIMention() {
    this->initializeModel();
}

OAIMention::~OAIMention() {}

void OAIMention::initializeModel() {

    m_acct_isSet = false;
    m_acct_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIMention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMention::fromJsonObject(QJsonObject json) {

    m_acct_isValid = ::OpenAPI::fromJsonValue(m_acct, json[QString("acct")]);
    m_acct_isSet = !json[QString("acct")].isNull() && m_acct_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIMention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMention::asJsonObject() const {
    QJsonObject obj;
    if (m_acct_isSet) {
        obj.insert(QString("acct"), ::OpenAPI::toJsonValue(m_acct));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIMention::getAcct() const {
    return m_acct;
}
void OAIMention::setAcct(const QString &acct) {
    m_acct = acct;
    m_acct_isSet = true;
}

bool OAIMention::is_acct_Set() const{
    return m_acct_isSet;
}

bool OAIMention::is_acct_Valid() const{
    return m_acct_isValid;
}

QString OAIMention::getId() const {
    return m_id;
}
void OAIMention::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMention::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMention::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMention::getUrl() const {
    return m_url;
}
void OAIMention::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMention::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMention::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIMention::getUsername() const {
    return m_username;
}
void OAIMention::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIMention::is_username_Set() const{
    return m_username_isSet;
}

bool OAIMention::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIMention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMention::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acct_isValid && m_id_isValid && m_url_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
