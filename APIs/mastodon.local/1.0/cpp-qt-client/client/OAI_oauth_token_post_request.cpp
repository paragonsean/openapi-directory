/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_oauth_token_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_oauth_token_post_request::OAI_oauth_token_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_oauth_token_post_request::OAI_oauth_token_post_request() {
    this->initializeModel();
}

OAI_oauth_token_post_request::~OAI_oauth_token_post_request() {}

void OAI_oauth_token_post_request::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAI_oauth_token_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_oauth_token_post_request::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAI_oauth_token_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_oauth_token_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_scopes_isSet) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAI_oauth_token_post_request::getClientId() const {
    return m_client_id;
}
void OAI_oauth_token_post_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAI_oauth_token_post_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAI_oauth_token_post_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAI_oauth_token_post_request::getClientSecret() const {
    return m_client_secret;
}
void OAI_oauth_token_post_request::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAI_oauth_token_post_request::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAI_oauth_token_post_request::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAI_oauth_token_post_request::getCode() const {
    return m_code;
}
void OAI_oauth_token_post_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAI_oauth_token_post_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAI_oauth_token_post_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAI_oauth_token_post_request::getGrantType() const {
    return m_grant_type;
}
void OAI_oauth_token_post_request::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAI_oauth_token_post_request::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAI_oauth_token_post_request::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAI_oauth_token_post_request::getRedirectUri() const {
    return m_redirect_uri;
}
void OAI_oauth_token_post_request::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAI_oauth_token_post_request::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAI_oauth_token_post_request::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAI_oauth_token_post_request::getScopes() const {
    return m_scopes;
}
void OAI_oauth_token_post_request::setScopes(const QString &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAI_oauth_token_post_request::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAI_oauth_token_post_request::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAI_oauth_token_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_oauth_token_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_grant_type_isValid && m_redirect_uri_isValid && true;
}

} // namespace OpenAPI
