/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminAccount::OAIAdminAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminAccount::OAIAdminAccount() {
    this->initializeModel();
}

OAIAdminAccount::~OAIAdminAccount() {}

void OAIAdminAccount::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_application_id_isSet = false;
    m_created_by_application_id_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invite_request_isSet = false;
    m_invite_request_isValid = false;

    m_invited_by_account_id_isSet = false;
    m_invited_by_account_id_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_silenced_isSet = false;
    m_silenced_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAdminAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminAccount::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("confirmed")]);
    m_confirmed_isSet = !json[QString("confirmed")].isNull() && m_confirmed_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_application_id_isValid = ::OpenAPI::fromJsonValue(m_created_by_application_id, json[QString("created_by_application_id")]);
    m_created_by_application_id_isSet = !json[QString("created_by_application_id")].isNull() && m_created_by_application_id_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invite_request_isValid = ::OpenAPI::fromJsonValue(m_invite_request, json[QString("invite_request")]);
    m_invite_request_isSet = !json[QString("invite_request")].isNull() && m_invite_request_isValid;

    m_invited_by_account_id_isValid = ::OpenAPI::fromJsonValue(m_invited_by_account_id, json[QString("invited_by_account_id")]);
    m_invited_by_account_id_isSet = !json[QString("invited_by_account_id")].isNull() && m_invited_by_account_id_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_silenced_isValid = ::OpenAPI::fromJsonValue(m_silenced, json[QString("silenced")]);
    m_silenced_isSet = !json[QString("silenced")].isNull() && m_silenced_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIAdminAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_confirmed_isSet) {
        obj.insert(QString("confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_application_id_isSet) {
        obj.insert(QString("created_by_application_id"), ::OpenAPI::toJsonValue(m_created_by_application_id));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invite_request_isSet) {
        obj.insert(QString("invite_request"), ::OpenAPI::toJsonValue(m_invite_request));
    }
    if (m_invited_by_account_id_isSet) {
        obj.insert(QString("invited_by_account_id"), ::OpenAPI::toJsonValue(m_invited_by_account_id));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_silenced_isSet) {
        obj.insert(QString("silenced"), ::OpenAPI::toJsonValue(m_silenced));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIAccount OAIAdminAccount::getAccount() const {
    return m_account;
}
void OAIAdminAccount::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAdminAccount::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAdminAccount::is_account_Valid() const{
    return m_account_isValid;
}

bool OAIAdminAccount::isApproved() const {
    return m_approved;
}
void OAIAdminAccount::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIAdminAccount::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIAdminAccount::is_approved_Valid() const{
    return m_approved_isValid;
}

bool OAIAdminAccount::isConfirmed() const {
    return m_confirmed;
}
void OAIAdminAccount::setConfirmed(const bool &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAIAdminAccount::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAIAdminAccount::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

QDateTime OAIAdminAccount::getCreatedAt() const {
    return m_created_at;
}
void OAIAdminAccount::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAdminAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAdminAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAdminAccount::getCreatedByApplicationId() const {
    return m_created_by_application_id;
}
void OAIAdminAccount::setCreatedByApplicationId(const QString &created_by_application_id) {
    m_created_by_application_id = created_by_application_id;
    m_created_by_application_id_isSet = true;
}

bool OAIAdminAccount::is_created_by_application_id_Set() const{
    return m_created_by_application_id_isSet;
}

bool OAIAdminAccount::is_created_by_application_id_Valid() const{
    return m_created_by_application_id_isValid;
}

bool OAIAdminAccount::isDisabled() const {
    return m_disabled;
}
void OAIAdminAccount::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAdminAccount::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAdminAccount::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIAdminAccount::getEmail() const {
    return m_email;
}
void OAIAdminAccount::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAdminAccount::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAdminAccount::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAdminAccount::getId() const {
    return m_id;
}
void OAIAdminAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdminAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdminAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdminAccount::getInviteRequest() const {
    return m_invite_request;
}
void OAIAdminAccount::setInviteRequest(const QString &invite_request) {
    m_invite_request = invite_request;
    m_invite_request_isSet = true;
}

bool OAIAdminAccount::is_invite_request_Set() const{
    return m_invite_request_isSet;
}

bool OAIAdminAccount::is_invite_request_Valid() const{
    return m_invite_request_isValid;
}

QString OAIAdminAccount::getInvitedByAccountId() const {
    return m_invited_by_account_id;
}
void OAIAdminAccount::setInvitedByAccountId(const QString &invited_by_account_id) {
    m_invited_by_account_id = invited_by_account_id;
    m_invited_by_account_id_isSet = true;
}

bool OAIAdminAccount::is_invited_by_account_id_Set() const{
    return m_invited_by_account_id_isSet;
}

bool OAIAdminAccount::is_invited_by_account_id_Valid() const{
    return m_invited_by_account_id_isValid;
}

QString OAIAdminAccount::getIp() const {
    return m_ip;
}
void OAIAdminAccount::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIAdminAccount::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIAdminAccount::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIAdminAccount::getLocale() const {
    return m_locale;
}
void OAIAdminAccount::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAdminAccount::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAdminAccount::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAdminAccount::getRole() const {
    return m_role;
}
void OAIAdminAccount::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAdminAccount::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAdminAccount::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIAdminAccount::isSilenced() const {
    return m_silenced;
}
void OAIAdminAccount::setSilenced(const bool &silenced) {
    m_silenced = silenced;
    m_silenced_isSet = true;
}

bool OAIAdminAccount::is_silenced_Set() const{
    return m_silenced_isSet;
}

bool OAIAdminAccount::is_silenced_Valid() const{
    return m_silenced_isValid;
}

bool OAIAdminAccount::isSuspended() const {
    return m_suspended;
}
void OAIAdminAccount::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIAdminAccount::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIAdminAccount::is_suspended_Valid() const{
    return m_suspended_isValid;
}

QString OAIAdminAccount::getUsername() const {
    return m_username;
}
void OAIAdminAccount::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAdminAccount::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAdminAccount::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAdminAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silenced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
