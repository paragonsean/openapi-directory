/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityProof.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityProof::OAIIdentityProof(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityProof::OAIIdentityProof() {
    this->initializeModel();
}

OAIIdentityProof::~OAIIdentityProof() {}

void OAIIdentityProof::initializeModel() {

    m_profile_url_isSet = false;
    m_profile_url_isValid = false;

    m_proof_url_isSet = false;
    m_proof_url_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_username_isSet = false;
    m_provider_username_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIIdentityProof::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityProof::fromJsonObject(QJsonObject json) {

    m_profile_url_isValid = ::OpenAPI::fromJsonValue(m_profile_url, json[QString("profile_url")]);
    m_profile_url_isSet = !json[QString("profile_url")].isNull() && m_profile_url_isValid;

    m_proof_url_isValid = ::OpenAPI::fromJsonValue(m_proof_url, json[QString("proof_url")]);
    m_proof_url_isSet = !json[QString("proof_url")].isNull() && m_proof_url_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_username_isValid = ::OpenAPI::fromJsonValue(m_provider_username, json[QString("provider_username")]);
    m_provider_username_isSet = !json[QString("provider_username")].isNull() && m_provider_username_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIIdentityProof::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityProof::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_url_isSet) {
        obj.insert(QString("profile_url"), ::OpenAPI::toJsonValue(m_profile_url));
    }
    if (m_proof_url_isSet) {
        obj.insert(QString("proof_url"), ::OpenAPI::toJsonValue(m_proof_url));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_username_isSet) {
        obj.insert(QString("provider_username"), ::OpenAPI::toJsonValue(m_provider_username));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIIdentityProof::getProfileUrl() const {
    return m_profile_url;
}
void OAIIdentityProof::setProfileUrl(const QString &profile_url) {
    m_profile_url = profile_url;
    m_profile_url_isSet = true;
}

bool OAIIdentityProof::is_profile_url_Set() const{
    return m_profile_url_isSet;
}

bool OAIIdentityProof::is_profile_url_Valid() const{
    return m_profile_url_isValid;
}

QString OAIIdentityProof::getProofUrl() const {
    return m_proof_url;
}
void OAIIdentityProof::setProofUrl(const QString &proof_url) {
    m_proof_url = proof_url;
    m_proof_url_isSet = true;
}

bool OAIIdentityProof::is_proof_url_Set() const{
    return m_proof_url_isSet;
}

bool OAIIdentityProof::is_proof_url_Valid() const{
    return m_proof_url_isValid;
}

QString OAIIdentityProof::getProvider() const {
    return m_provider;
}
void OAIIdentityProof::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIIdentityProof::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIdentityProof::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIIdentityProof::getProviderUsername() const {
    return m_provider_username;
}
void OAIIdentityProof::setProviderUsername(const QString &provider_username) {
    m_provider_username = provider_username;
    m_provider_username_isSet = true;
}

bool OAIIdentityProof::is_provider_username_Set() const{
    return m_provider_username_isSet;
}

bool OAIIdentityProof::is_provider_username_Valid() const{
    return m_provider_username_isValid;
}

QString OAIIdentityProof::getUpdatedAt() const {
    return m_updated_at;
}
void OAIIdentityProof::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIIdentityProof::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIIdentityProof::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIIdentityProof::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proof_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityProof::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
