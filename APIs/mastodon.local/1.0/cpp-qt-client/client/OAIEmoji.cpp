/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmoji.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmoji::OAIEmoji(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmoji::OAIEmoji() {
    this->initializeModel();
}

OAIEmoji::~OAIEmoji() {}

void OAIEmoji::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_shortcode_isSet = false;
    m_shortcode_isValid = false;

    m_static_url_isSet = false;
    m_static_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_visible_in_picker_isSet = false;
    m_visible_in_picker_isValid = false;
}

void OAIEmoji::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmoji::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_shortcode_isValid = ::OpenAPI::fromJsonValue(m_shortcode, json[QString("shortcode")]);
    m_shortcode_isSet = !json[QString("shortcode")].isNull() && m_shortcode_isValid;

    m_static_url_isValid = ::OpenAPI::fromJsonValue(m_static_url, json[QString("static_url")]);
    m_static_url_isSet = !json[QString("static_url")].isNull() && m_static_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visible_in_picker_isValid = ::OpenAPI::fromJsonValue(m_visible_in_picker, json[QString("visible_in_picker")]);
    m_visible_in_picker_isSet = !json[QString("visible_in_picker")].isNull() && m_visible_in_picker_isValid;
}

QString OAIEmoji::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmoji::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_shortcode_isSet) {
        obj.insert(QString("shortcode"), ::OpenAPI::toJsonValue(m_shortcode));
    }
    if (m_static_url_isSet) {
        obj.insert(QString("static_url"), ::OpenAPI::toJsonValue(m_static_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visible_in_picker_isSet) {
        obj.insert(QString("visible_in_picker"), ::OpenAPI::toJsonValue(m_visible_in_picker));
    }
    return obj;
}

QString OAIEmoji::getCategory() const {
    return m_category;
}
void OAIEmoji::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEmoji::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEmoji::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIEmoji::getShortcode() const {
    return m_shortcode;
}
void OAIEmoji::setShortcode(const QString &shortcode) {
    m_shortcode = shortcode;
    m_shortcode_isSet = true;
}

bool OAIEmoji::is_shortcode_Set() const{
    return m_shortcode_isSet;
}

bool OAIEmoji::is_shortcode_Valid() const{
    return m_shortcode_isValid;
}

QString OAIEmoji::getStaticUrl() const {
    return m_static_url;
}
void OAIEmoji::setStaticUrl(const QString &static_url) {
    m_static_url = static_url;
    m_static_url_isSet = true;
}

bool OAIEmoji::is_static_url_Set() const{
    return m_static_url_isSet;
}

bool OAIEmoji::is_static_url_Valid() const{
    return m_static_url_isValid;
}

QString OAIEmoji::getUrl() const {
    return m_url;
}
void OAIEmoji::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEmoji::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEmoji::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEmoji::isVisibleInPicker() const {
    return m_visible_in_picker;
}
void OAIEmoji::setVisibleInPicker(const bool &visible_in_picker) {
    m_visible_in_picker = visible_in_picker;
    m_visible_in_picker_isSet = true;
}

bool OAIEmoji::is_visible_in_picker_Set() const{
    return m_visible_in_picker_isSet;
}

bool OAIEmoji::is_visible_in_picker_Valid() const{
    return m_visible_in_picker_isValid;
}

bool OAIEmoji::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shortcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_in_picker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmoji::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shortcode_isValid && m_static_url_isValid && m_url_isValid && m_visible_in_picker_isValid && true;
}

} // namespace OpenAPI
