/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_api_v1_statuses_post_request_inner.h
 *
 * 
 */

#ifndef OAI_api_v1_statuses_post_request_inner_H
#define OAI_api_v1_statuses_post_request_inner_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_api_v1_statuses_post_request_inner : public OAIObject {
public:
    OAI_api_v1_statuses_post_request_inner();
    OAI_api_v1_statuses_post_request_inner(QString json);
    ~OAI_api_v1_statuses_post_request_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInReplyToId() const;
    void setInReplyToId(const QString &in_reply_to_id);
    bool is_in_reply_to_id_Set() const;
    bool is_in_reply_to_id_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<QString> getMediaIds() const;
    void setMediaIds(const QList<QString> &media_ids);
    bool is_media_ids_Set() const;
    bool is_media_ids_Valid() const;

    QMap<OAIObject> getPoll() const;
    void setPoll(const QMap<OAIObject> &poll);
    bool is_poll_Set() const;
    bool is_poll_Valid() const;

    QString getScheduledAt() const;
    void setScheduledAt(const QString &scheduled_at);
    bool is_scheduled_at_Set() const;
    bool is_scheduled_at_Valid() const;

    bool isSensitive() const;
    void setSensitive(const bool &sensitive);
    bool is_sensitive_Set() const;
    bool is_sensitive_Valid() const;

    QString getSpoilerText() const;
    void setSpoilerText(const QString &spoiler_text);
    bool is_spoiler_text_Set() const;
    bool is_spoiler_text_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_in_reply_to_id;
    bool m_in_reply_to_id_isSet;
    bool m_in_reply_to_id_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<QString> m_media_ids;
    bool m_media_ids_isSet;
    bool m_media_ids_isValid;

    QMap<OAIObject> m_poll;
    bool m_poll_isSet;
    bool m_poll_isValid;

    QString m_scheduled_at;
    bool m_scheduled_at_isSet;
    bool m_scheduled_at_isValid;

    bool m_sensitive;
    bool m_sensitive_isSet;
    bool m_sensitive_isValid;

    QString m_spoiler_text;
    bool m_spoiler_text_isSet;
    bool m_spoiler_text_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_api_v1_statuses_post_request_inner)

#endif // OAI_api_v1_statuses_post_request_inner_H
