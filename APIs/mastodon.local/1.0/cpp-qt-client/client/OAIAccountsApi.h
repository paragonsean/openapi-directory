/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIError.h"
#include "OAIFeaturedTag.h"
#include "OAIIdentityProof.h"
#include "OAIList.h"
#include "OAIRelationship.h"
#include "OAIStatus.h"
#include "OAI_api_v1_accounts__id__follow_post_request.h"
#include "OAI_api_v1_accounts__id__mute_post_request.h"
#include "OAI_api_v1_accounts__id__note_post_request.h"
#include "OAI_api_v1_accounts_post_request.h"
#include "OAI_api_v1_accounts_update_credentials_patch_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdBlockPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdFeaturedTagsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_accounts__id__follow_post_request OAI_api_v1_accounts__id__follow_post_request [optional]
    */
    virtual void apiV1AccountsIdFollowPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__follow_post_request> &oai_api_v1_accounts__id__follow_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__follow_post_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV1AccountsIdFollowersGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  max_id QString [optional]
    * @param[in]  since_id QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void apiV1AccountsIdFollowingGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &max_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdIdentityProofsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdListsGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_accounts__id__mute_post_request OAI_api_v1_accounts__id__mute_post_request [optional]
    */
    virtual void apiV1AccountsIdMutePost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__mute_post_request> &oai_api_v1_accounts__id__mute_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__mute_post_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_api_v1_accounts__id__note_post_request OAI_api_v1_accounts__id__note_post_request [optional]
    */
    virtual void apiV1AccountsIdNotePost(const QString &id, const ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__note_post_request> &oai_api_v1_accounts__id__note_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_accounts__id__note_post_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdPinPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdStatusesGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdUnblockPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdUnfollowPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdUnmutePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1AccountsIdUnpinPost(const QString &id);

    /**
    * @param[in]  oai_api_v1_accounts_post_request OAI_api_v1_accounts_post_request [optional]
    */
    virtual void apiV1AccountsPost(const ::OpenAPI::OptionalParam<OAI_api_v1_accounts_post_request> &oai_api_v1_accounts_post_request = ::OpenAPI::OptionalParam<OAI_api_v1_accounts_post_request>());

    /**
    * @param[in]  id QList<QString> [required]
    */
    virtual void apiV1AccountsRelationshipsGet(const QList<QString> &id);

    /**
    * @param[in]  q QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  resolve QString [optional]
    * @param[in]  following bool [optional]
    */
    virtual void apiV1AccountsSearchGet(const QString &q, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &resolve = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &following = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_api_v1_accounts_update_credentials_patch_request OAI_api_v1_accounts_update_credentials_patch_request [optional]
    */
    virtual void apiV1AccountsUpdateCredentialsPatch(const ::OpenAPI::OptionalParam<OAI_api_v1_accounts_update_credentials_patch_request> &oai_api_v1_accounts_update_credentials_patch_request = ::OpenAPI::OptionalParam<OAI_api_v1_accounts_update_credentials_patch_request>());


    virtual void apiV1AccountsVerifyCredentialsGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV1AccountsIdBlockPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdFeaturedTagsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdFollowPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdFollowersGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdFollowingGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdIdentityProofsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdListsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdMutePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdNotePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdPinPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdStatusesGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdUnblockPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdUnfollowPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdUnmutePostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsIdUnpinPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsPostCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsRelationshipsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsSearchGetCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsUpdateCredentialsPatchCallback(OAIHttpRequestWorker *worker);
    void apiV1AccountsVerifyCredentialsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV1AccountsIdBlockPostSignal(OAIRelationship summary);
    void apiV1AccountsIdFeaturedTagsGetSignal(QList<OAIFeaturedTag> summary);
    void apiV1AccountsIdFollowPostSignal(OAIRelationship summary);
    void apiV1AccountsIdFollowersGetSignal(QList<OAIAccount> summary);
    void apiV1AccountsIdFollowingGetSignal(QList<OAIAccount> summary);
    void apiV1AccountsIdGetSignal(OAIAccount summary);
    void apiV1AccountsIdIdentityProofsGetSignal(QList<OAIIdentityProof> summary);
    void apiV1AccountsIdListsGetSignal(QList<OAIList> summary);
    void apiV1AccountsIdMutePostSignal(OAIRelationship summary);
    void apiV1AccountsIdNotePostSignal(OAIRelationship summary);
    void apiV1AccountsIdPinPostSignal(OAIRelationship summary);
    void apiV1AccountsIdStatusesGetSignal(QList<OAIStatus> summary);
    void apiV1AccountsIdUnblockPostSignal(OAIRelationship summary);
    void apiV1AccountsIdUnfollowPostSignal(OAIRelationship summary);
    void apiV1AccountsIdUnmutePostSignal(OAIRelationship summary);
    void apiV1AccountsIdUnpinPostSignal(OAIRelationship summary);
    void apiV1AccountsPostSignal();
    void apiV1AccountsRelationshipsGetSignal(QList<OAIRelationship> summary);
    void apiV1AccountsSearchGetSignal(QList<OAIAccount> summary);
    void apiV1AccountsUpdateCredentialsPatchSignal(OAIAccount summary);
    void apiV1AccountsVerifyCredentialsGetSignal(OAIAccount summary);


    void apiV1AccountsIdBlockPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdFeaturedTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeaturedTag> summary);
    void apiV1AccountsIdFollowPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdFollowersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1AccountsIdFollowingGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1AccountsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void apiV1AccountsIdIdentityProofsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIIdentityProof> summary);
    void apiV1AccountsIdListsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIList> summary);
    void apiV1AccountsIdMutePostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdNotePostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdPinPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdStatusesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStatus> summary);
    void apiV1AccountsIdUnblockPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdUnfollowPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdUnmutePostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsIdUnpinPostSignalFull(OAIHttpRequestWorker *worker, OAIRelationship summary);
    void apiV1AccountsPostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1AccountsRelationshipsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRelationship> summary);
    void apiV1AccountsSearchGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void apiV1AccountsUpdateCredentialsPatchSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void apiV1AccountsVerifyCredentialsGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);

    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdBlockPostSignalError() instead")
    void apiV1AccountsIdBlockPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdBlockPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFeaturedTagsGetSignalError() instead")
    void apiV1AccountsIdFeaturedTagsGetSignalE(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFeaturedTagsGetSignalError(QList<OAIFeaturedTag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowPostSignalError() instead")
    void apiV1AccountsIdFollowPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowersGetSignalError() instead")
    void apiV1AccountsIdFollowersGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowersGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowingGetSignalError() instead")
    void apiV1AccountsIdFollowingGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowingGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdGetSignalError() instead")
    void apiV1AccountsIdGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdIdentityProofsGetSignalError() instead")
    void apiV1AccountsIdIdentityProofsGetSignalE(QList<OAIIdentityProof> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdIdentityProofsGetSignalError(QList<OAIIdentityProof> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdListsGetSignalError() instead")
    void apiV1AccountsIdListsGetSignalE(QList<OAIList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdListsGetSignalError(QList<OAIList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdMutePostSignalError() instead")
    void apiV1AccountsIdMutePostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdMutePostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdNotePostSignalError() instead")
    void apiV1AccountsIdNotePostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdNotePostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdPinPostSignalError() instead")
    void apiV1AccountsIdPinPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdPinPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdStatusesGetSignalError() instead")
    void apiV1AccountsIdStatusesGetSignalE(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdStatusesGetSignalError(QList<OAIStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnblockPostSignalError() instead")
    void apiV1AccountsIdUnblockPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnblockPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnfollowPostSignalError() instead")
    void apiV1AccountsIdUnfollowPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnfollowPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnmutePostSignalError() instead")
    void apiV1AccountsIdUnmutePostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnmutePostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnpinPostSignalError() instead")
    void apiV1AccountsIdUnpinPostSignalE(OAIRelationship summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnpinPostSignalError(OAIRelationship summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsPostSignalError() instead")
    void apiV1AccountsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsRelationshipsGetSignalError() instead")
    void apiV1AccountsRelationshipsGetSignalE(QList<OAIRelationship> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsRelationshipsGetSignalError(QList<OAIRelationship> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsSearchGetSignalError() instead")
    void apiV1AccountsSearchGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsSearchGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsUpdateCredentialsPatchSignalError() instead")
    void apiV1AccountsUpdateCredentialsPatchSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsUpdateCredentialsPatchSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsVerifyCredentialsGetSignalError() instead")
    void apiV1AccountsVerifyCredentialsGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsVerifyCredentialsGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdBlockPostSignalErrorFull() instead")
    void apiV1AccountsIdBlockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdBlockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFeaturedTagsGetSignalErrorFull() instead")
    void apiV1AccountsIdFeaturedTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFeaturedTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowPostSignalErrorFull() instead")
    void apiV1AccountsIdFollowPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowersGetSignalErrorFull() instead")
    void apiV1AccountsIdFollowersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdFollowingGetSignalErrorFull() instead")
    void apiV1AccountsIdFollowingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdFollowingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdGetSignalErrorFull() instead")
    void apiV1AccountsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdIdentityProofsGetSignalErrorFull() instead")
    void apiV1AccountsIdIdentityProofsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdIdentityProofsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdListsGetSignalErrorFull() instead")
    void apiV1AccountsIdListsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdListsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdMutePostSignalErrorFull() instead")
    void apiV1AccountsIdMutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdMutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdNotePostSignalErrorFull() instead")
    void apiV1AccountsIdNotePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdNotePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdPinPostSignalErrorFull() instead")
    void apiV1AccountsIdPinPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdPinPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdStatusesGetSignalErrorFull() instead")
    void apiV1AccountsIdStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnblockPostSignalErrorFull() instead")
    void apiV1AccountsIdUnblockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnblockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnfollowPostSignalErrorFull() instead")
    void apiV1AccountsIdUnfollowPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnfollowPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnmutePostSignalErrorFull() instead")
    void apiV1AccountsIdUnmutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnmutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsIdUnpinPostSignalErrorFull() instead")
    void apiV1AccountsIdUnpinPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsIdUnpinPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsPostSignalErrorFull() instead")
    void apiV1AccountsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsRelationshipsGetSignalErrorFull() instead")
    void apiV1AccountsRelationshipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsRelationshipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsSearchGetSignalErrorFull() instead")
    void apiV1AccountsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsUpdateCredentialsPatchSignalErrorFull() instead")
    void apiV1AccountsUpdateCredentialsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsUpdateCredentialsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1AccountsVerifyCredentialsGetSignalErrorFull() instead")
    void apiV1AccountsVerifyCredentialsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1AccountsVerifyCredentialsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
