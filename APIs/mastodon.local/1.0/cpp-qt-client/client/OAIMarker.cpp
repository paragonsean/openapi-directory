/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarker::OAIMarker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarker::OAIMarker() {
    this->initializeModel();
}

OAIMarker::~OAIMarker() {}

void OAIMarker::initializeModel() {

    m_home_isSet = false;
    m_home_isValid = false;

    m_last_read_id_isSet = false;
    m_last_read_id_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMarker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarker::fromJsonObject(QJsonObject json) {

    m_home_isValid = ::OpenAPI::fromJsonValue(m_home, json[QString("home")]);
    m_home_isSet = !json[QString("home")].isNull() && m_home_isValid;

    m_last_read_id_isValid = ::OpenAPI::fromJsonValue(m_last_read_id, json[QString("last_read_id")]);
    m_last_read_id_isSet = !json[QString("last_read_id")].isNull() && m_last_read_id_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMarker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarker::asJsonObject() const {
    QJsonObject obj;
    if (m_home_isSet) {
        obj.insert(QString("home"), ::OpenAPI::toJsonValue(m_home));
    }
    if (m_last_read_id_isSet) {
        obj.insert(QString("last_read_id"), ::OpenAPI::toJsonValue(m_last_read_id));
    }
    if (m_notifications_isSet) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIObject OAIMarker::getHome() const {
    return m_home;
}
void OAIMarker::setHome(const OAIObject &home) {
    m_home = home;
    m_home_isSet = true;
}

bool OAIMarker::is_home_Set() const{
    return m_home_isSet;
}

bool OAIMarker::is_home_Valid() const{
    return m_home_isValid;
}

QString OAIMarker::getLastReadId() const {
    return m_last_read_id;
}
void OAIMarker::setLastReadId(const QString &last_read_id) {
    m_last_read_id = last_read_id;
    m_last_read_id_isSet = true;
}

bool OAIMarker::is_last_read_id_Set() const{
    return m_last_read_id_isSet;
}

bool OAIMarker::is_last_read_id_Valid() const{
    return m_last_read_id_isValid;
}

OAIObject OAIMarker::getNotifications() const {
    return m_notifications;
}
void OAIMarker::setNotifications(const OAIObject &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIMarker::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIMarker::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QDateTime OAIMarker::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMarker::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMarker::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMarker::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIMarker::getVersion() const {
    return m_version;
}
void OAIMarker::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMarker::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMarker::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMarker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
