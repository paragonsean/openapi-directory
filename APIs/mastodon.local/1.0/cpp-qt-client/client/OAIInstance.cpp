/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_approval_required_isSet = false;
    m_approval_required_isValid = false;

    m_contact_account_isSet = false;
    m_contact_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_invites_enabled_isSet = false;
    m_invites_enabled_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_registrations_isSet = false;
    m_registrations_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_approval_required_isValid = ::OpenAPI::fromJsonValue(m_approval_required, json[QString("approval_required")]);
    m_approval_required_isSet = !json[QString("approval_required")].isNull() && m_approval_required_isValid;

    m_contact_account_isValid = ::OpenAPI::fromJsonValue(m_contact_account, json[QString("contact_account")]);
    m_contact_account_isSet = !json[QString("contact_account")].isNull() && m_contact_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_invites_enabled_isValid = ::OpenAPI::fromJsonValue(m_invites_enabled, json[QString("invites_enabled")]);
    m_invites_enabled_isSet = !json[QString("invites_enabled")].isNull() && m_invites_enabled_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_registrations_isValid = ::OpenAPI::fromJsonValue(m_registrations, json[QString("registrations")]);
    m_registrations_isSet = !json[QString("registrations")].isNull() && m_registrations_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_required_isSet) {
        obj.insert(QString("approval_required"), ::OpenAPI::toJsonValue(m_approval_required));
    }
    if (m_contact_account.isSet()) {
        obj.insert(QString("contact_account"), ::OpenAPI::toJsonValue(m_contact_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_invites_enabled_isSet) {
        obj.insert(QString("invites_enabled"), ::OpenAPI::toJsonValue(m_invites_enabled));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_registrations_isSet) {
        obj.insert(QString("registrations"), ::OpenAPI::toJsonValue(m_registrations));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_stats_isSet) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_urls_isSet) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIInstance::isApprovalRequired() const {
    return m_approval_required;
}
void OAIInstance::setApprovalRequired(const bool &approval_required) {
    m_approval_required = approval_required;
    m_approval_required_isSet = true;
}

bool OAIInstance::is_approval_required_Set() const{
    return m_approval_required_isSet;
}

bool OAIInstance::is_approval_required_Valid() const{
    return m_approval_required_isValid;
}

OAIAccount OAIInstance::getContactAccount() const {
    return m_contact_account;
}
void OAIInstance::setContactAccount(const OAIAccount &contact_account) {
    m_contact_account = contact_account;
    m_contact_account_isSet = true;
}

bool OAIInstance::is_contact_account_Set() const{
    return m_contact_account_isSet;
}

bool OAIInstance::is_contact_account_Valid() const{
    return m_contact_account_isValid;
}

QString OAIInstance::getDescription() const {
    return m_description;
}
void OAIInstance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInstance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInstance::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInstance::getEmail() const {
    return m_email;
}
void OAIInstance::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIInstance::is_email_Set() const{
    return m_email_isSet;
}

bool OAIInstance::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIInstance::isInvitesEnabled() const {
    return m_invites_enabled;
}
void OAIInstance::setInvitesEnabled(const bool &invites_enabled) {
    m_invites_enabled = invites_enabled;
    m_invites_enabled_isSet = true;
}

bool OAIInstance::is_invites_enabled_Set() const{
    return m_invites_enabled_isSet;
}

bool OAIInstance::is_invites_enabled_Valid() const{
    return m_invites_enabled_isValid;
}

QList<QString> OAIInstance::getLanguages() const {
    return m_languages;
}
void OAIInstance::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIInstance::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIInstance::is_languages_Valid() const{
    return m_languages_isValid;
}

bool OAIInstance::isRegistrations() const {
    return m_registrations;
}
void OAIInstance::setRegistrations(const bool &registrations) {
    m_registrations = registrations;
    m_registrations_isSet = true;
}

bool OAIInstance::is_registrations_Set() const{
    return m_registrations_isSet;
}

bool OAIInstance::is_registrations_Valid() const{
    return m_registrations_isValid;
}

QString OAIInstance::getShortDescription() const {
    return m_short_description;
}
void OAIInstance::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIInstance::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIInstance::is_short_description_Valid() const{
    return m_short_description_isValid;
}

OAIObject OAIInstance::getStats() const {
    return m_stats;
}
void OAIInstance::setStats(const OAIObject &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIInstance::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIInstance::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIInstance::getThumbnail() const {
    return m_thumbnail;
}
void OAIInstance::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIInstance::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIInstance::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIInstance::getTitle() const {
    return m_title;
}
void OAIInstance::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInstance::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInstance::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIInstance::getUri() const {
    return m_uri;
}
void OAIInstance::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIInstance::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIInstance::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIObject OAIInstance::getUrls() const {
    return m_urls;
}
void OAIInstance::setUrls(const OAIObject &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIInstance::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIInstance::is_urls_Valid() const{
    return m_urls_isValid;
}

QString OAIInstance::getVersion() const {
    return m_version;
}
void OAIInstance::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInstance::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInstance::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invites_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_approval_required_isValid && m_description_isValid && m_email_isValid && m_invites_enabled_isValid && m_languages_isValid && m_registrations_isValid && m_short_description_isValid && m_stats_isValid && m_title_isValid && m_uri_isValid && m_urls_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
