/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnouncement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnouncement::OAIAnnouncement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnouncement::OAIAnnouncement() {
    this->initializeModel();
}

OAIAnnouncement::~OAIAnnouncement() {}

void OAIAnnouncement::initializeModel() {

    m_all_day_isSet = false;
    m_all_day_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIAnnouncement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnouncement::fromJsonObject(QJsonObject json) {

    m_all_day_isValid = ::OpenAPI::fromJsonValue(m_all_day, json[QString("all_day")]);
    m_all_day_isSet = !json[QString("all_day")].isNull() && m_all_day_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("ends_at")]);
    m_ends_at_isSet = !json[QString("ends_at")].isNull() && m_ends_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduled_at")]);
    m_scheduled_at_isSet = !json[QString("scheduled_at")].isNull() && m_scheduled_at_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("starts_at")]);
    m_starts_at_isSet = !json[QString("starts_at")].isNull() && m_starts_at_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIAnnouncement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnouncement::asJsonObject() const {
    QJsonObject obj;
    if (m_all_day_isSet) {
        obj.insert(QString("all_day"), ::OpenAPI::toJsonValue(m_all_day));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_ends_at_isSet) {
        obj.insert(QString("ends_at"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduled_at"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("starts_at"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIAnnouncement::isAllDay() const {
    return m_all_day;
}
void OAIAnnouncement::setAllDay(const bool &all_day) {
    m_all_day = all_day;
    m_all_day_isSet = true;
}

bool OAIAnnouncement::is_all_day_Set() const{
    return m_all_day_isSet;
}

bool OAIAnnouncement::is_all_day_Valid() const{
    return m_all_day_isValid;
}

QString OAIAnnouncement::getCreatedAt() const {
    return m_created_at;
}
void OAIAnnouncement::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnnouncement::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnnouncement::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAnnouncement::getEndsAt() const {
    return m_ends_at;
}
void OAIAnnouncement::setEndsAt(const QString &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAIAnnouncement::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAIAnnouncement::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

QString OAIAnnouncement::getId() const {
    return m_id;
}
void OAIAnnouncement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnnouncement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnnouncement::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAnnouncement::isPublished() const {
    return m_published;
}
void OAIAnnouncement::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIAnnouncement::is_published_Set() const{
    return m_published_isSet;
}

bool OAIAnnouncement::is_published_Valid() const{
    return m_published_isValid;
}

bool OAIAnnouncement::isRead() const {
    return m_read;
}
void OAIAnnouncement::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIAnnouncement::is_read_Set() const{
    return m_read_isSet;
}

bool OAIAnnouncement::is_read_Valid() const{
    return m_read_isValid;
}

QString OAIAnnouncement::getScheduledAt() const {
    return m_scheduled_at;
}
void OAIAnnouncement::setScheduledAt(const QString &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAIAnnouncement::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAIAnnouncement::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

QString OAIAnnouncement::getStartsAt() const {
    return m_starts_at;
}
void OAIAnnouncement::setStartsAt(const QString &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAIAnnouncement::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAIAnnouncement::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

QString OAIAnnouncement::getText() const {
    return m_text;
}
void OAIAnnouncement::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAnnouncement::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAnnouncement::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAnnouncement::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAnnouncement::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAnnouncement::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAnnouncement::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIAnnouncement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnouncement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_day_isValid && m_created_at_isValid && m_id_isValid && m_published_isValid && m_read_isValid && m_text_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
