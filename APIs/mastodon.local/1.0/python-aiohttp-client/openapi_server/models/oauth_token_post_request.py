# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OauthTokenPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, code: str=None, grant_type: str=None, redirect_uri: str=None, scopes: str=None):
        """OauthTokenPostRequest - a model defined in OpenAPI

        :param client_id: The client_id of this OauthTokenPostRequest.
        :param client_secret: The client_secret of this OauthTokenPostRequest.
        :param code: The code of this OauthTokenPostRequest.
        :param grant_type: The grant_type of this OauthTokenPostRequest.
        :param redirect_uri: The redirect_uri of this OauthTokenPostRequest.
        :param scopes: The scopes of this OauthTokenPostRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'code': str,
            'grant_type': str,
            'redirect_uri': str,
            'scopes': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'code': 'code',
            'grant_type': 'grant_type',
            'redirect_uri': 'redirect_uri',
            'scopes': 'scopes'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._code = code
        self._grant_type = grant_type
        self._redirect_uri = redirect_uri
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OauthTokenPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _oauth_token_post_request of this OauthTokenPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OauthTokenPostRequest.

        Client ID, obtained during app registration

        :return: The client_id of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OauthTokenPostRequest.

        Client ID, obtained during app registration

        :param client_id: The client_id of this OauthTokenPostRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OauthTokenPostRequest.

        Client secret, obtained during app registration

        :return: The client_secret of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OauthTokenPostRequest.

        Client secret, obtained during app registration

        :param client_secret: The client_secret of this OauthTokenPostRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this OauthTokenPostRequest.

        A user authorization code, obtained via /oauth/authorize

        :return: The code of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OauthTokenPostRequest.

        A user authorization code, obtained via /oauth/authorize

        :param code: The code of this OauthTokenPostRequest.
        :type code: str
        """

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this OauthTokenPostRequest.

        Set equal to authorization_code if code is provided in order to gain user-level access. Otherwise, set equal to client_credentials to obtain app-level access only.

        :return: The grant_type of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this OauthTokenPostRequest.

        Set equal to authorization_code if code is provided in order to gain user-level access. Otherwise, set equal to client_credentials to obtain app-level access only.

        :param grant_type: The grant_type of this OauthTokenPostRequest.
        :type grant_type: str
        """
        if grant_type is None:
            raise ValueError("Invalid value for `grant_type`, must not be `None`")

        self._grant_type = grant_type

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this OauthTokenPostRequest.

        Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the redirect URIs declared during app registration.

        :return: The redirect_uri of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this OauthTokenPostRequest.

        Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the redirect URIs declared during app registration.

        :param redirect_uri: The redirect_uri of this OauthTokenPostRequest.
        :type redirect_uri: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")

        self._redirect_uri = redirect_uri

    @property
    def scopes(self):
        """Gets the scopes of this OauthTokenPostRequest.

        List of requested OAuth scopes, separated by spaces. Must be a subset of scopes declared during app registration. If not provided, defaults to read.

        :return: The scopes of this OauthTokenPostRequest.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this OauthTokenPostRequest.

        List of requested OAuth scopes, separated by spaces. Must be a subset of scopes declared during app registration. If not provided, defaults to read.

        :param scopes: The scopes of this OauthTokenPostRequest.
        :type scopes: str
        """

        self._scopes = scopes
