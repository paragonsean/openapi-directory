# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_taken: bool=None, action_taken_at: datetime=None, category: str=None, comment: str=None, created_at: datetime=None, forwarded: bool=None, id: str=None, rule_ids: List[int]=None, status_ids: List[int]=None, target_account: Account=None):
        """Report - a model defined in OpenAPI

        :param action_taken: The action_taken of this Report.
        :param action_taken_at: The action_taken_at of this Report.
        :param category: The category of this Report.
        :param comment: The comment of this Report.
        :param created_at: The created_at of this Report.
        :param forwarded: The forwarded of this Report.
        :param id: The id of this Report.
        :param rule_ids: The rule_ids of this Report.
        :param status_ids: The status_ids of this Report.
        :param target_account: The target_account of this Report.
        """
        self.openapi_types = {
            'action_taken': bool,
            'action_taken_at': datetime,
            'category': str,
            'comment': str,
            'created_at': datetime,
            'forwarded': bool,
            'id': str,
            'rule_ids': List[int],
            'status_ids': List[int],
            'target_account': Account
        }

        self.attribute_map = {
            'action_taken': 'action_taken',
            'action_taken_at': 'action_taken_at',
            'category': 'category',
            'comment': 'comment',
            'created_at': 'created_at',
            'forwarded': 'forwarded',
            'id': 'id',
            'rule_ids': 'rule_ids',
            'status_ids': 'status_ids',
            'target_account': 'target_account'
        }

        self._action_taken = action_taken
        self._action_taken_at = action_taken_at
        self._category = category
        self._comment = comment
        self._created_at = created_at
        self._forwarded = forwarded
        self._id = id
        self._rule_ids = rule_ids
        self._status_ids = status_ids
        self._target_account = target_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_taken(self):
        """Gets the action_taken of this Report.


        :return: The action_taken of this Report.
        :rtype: bool
        """
        return self._action_taken

    @action_taken.setter
    def action_taken(self, action_taken):
        """Sets the action_taken of this Report.


        :param action_taken: The action_taken of this Report.
        :type action_taken: bool
        """

        self._action_taken = action_taken

    @property
    def action_taken_at(self):
        """Gets the action_taken_at of this Report.


        :return: The action_taken_at of this Report.
        :rtype: datetime
        """
        return self._action_taken_at

    @action_taken_at.setter
    def action_taken_at(self, action_taken_at):
        """Sets the action_taken_at of this Report.


        :param action_taken_at: The action_taken_at of this Report.
        :type action_taken_at: datetime
        """

        self._action_taken_at = action_taken_at

    @property
    def category(self):
        """Gets the category of this Report.


        :return: The category of this Report.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Report.


        :param category: The category of this Report.
        :type category: str
        """
        allowed_values = ["other", "spam", "violation"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def comment(self):
        """Gets the comment of this Report.


        :return: The comment of this Report.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Report.


        :param comment: The comment of this Report.
        :type comment: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this Report.


        :return: The created_at of this Report.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Report.


        :param created_at: The created_at of this Report.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def forwarded(self):
        """Gets the forwarded of this Report.


        :return: The forwarded of this Report.
        :rtype: bool
        """
        return self._forwarded

    @forwarded.setter
    def forwarded(self, forwarded):
        """Sets the forwarded of this Report.


        :param forwarded: The forwarded of this Report.
        :type forwarded: bool
        """

        self._forwarded = forwarded

    @property
    def id(self):
        """Gets the id of this Report.


        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.


        :param id: The id of this Report.
        :type id: str
        """

        self._id = id

    @property
    def rule_ids(self):
        """Gets the rule_ids of this Report.


        :return: The rule_ids of this Report.
        :rtype: List[int]
        """
        return self._rule_ids

    @rule_ids.setter
    def rule_ids(self, rule_ids):
        """Sets the rule_ids of this Report.


        :param rule_ids: The rule_ids of this Report.
        :type rule_ids: List[int]
        """

        self._rule_ids = rule_ids

    @property
    def status_ids(self):
        """Gets the status_ids of this Report.


        :return: The status_ids of this Report.
        :rtype: List[int]
        """
        return self._status_ids

    @status_ids.setter
    def status_ids(self, status_ids):
        """Sets the status_ids of this Report.


        :param status_ids: The status_ids of this Report.
        :type status_ids: List[int]
        """

        self._status_ids = status_ids

    @property
    def target_account(self):
        """Gets the target_account of this Report.


        :return: The target_account of this Report.
        :rtype: Account
        """
        return self._target_account

    @target_account.setter
    def target_account(self, target_account):
        """Sets the target_account of this Report.


        :param target_account: The target_account of this Report.
        :type target_account: Account
        """

        self._target_account = target_account
