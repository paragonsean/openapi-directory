# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.status import Status
from openapi_server import util


class AdminReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, action_taken: str=None, assigned_account: Account=None, comment: str=None, created_at: datetime=None, id: str=None, statuses: List[Status]=None, target_account: Account=None, updated_at: datetime=None):
        """AdminReport - a model defined in OpenAPI

        :param account: The account of this AdminReport.
        :param action_taken: The action_taken of this AdminReport.
        :param assigned_account: The assigned_account of this AdminReport.
        :param comment: The comment of this AdminReport.
        :param created_at: The created_at of this AdminReport.
        :param id: The id of this AdminReport.
        :param statuses: The statuses of this AdminReport.
        :param target_account: The target_account of this AdminReport.
        :param updated_at: The updated_at of this AdminReport.
        """
        self.openapi_types = {
            'account': Account,
            'action_taken': str,
            'assigned_account': Account,
            'comment': str,
            'created_at': datetime,
            'id': str,
            'statuses': List[Status],
            'target_account': Account,
            'updated_at': datetime
        }

        self.attribute_map = {
            'account': 'account',
            'action_taken': 'action_taken',
            'assigned_account': 'assigned_account',
            'comment': 'comment',
            'created_at': 'created_at',
            'id': 'id',
            'statuses': 'statuses',
            'target_account': 'target_account',
            'updated_at': 'updated_at'
        }

        self._account = account
        self._action_taken = action_taken
        self._assigned_account = assigned_account
        self._comment = comment
        self._created_at = created_at
        self._id = id
        self._statuses = statuses
        self._target_account = target_account
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminReport of this AdminReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this AdminReport.


        :return: The account of this AdminReport.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AdminReport.


        :param account: The account of this AdminReport.
        :type account: Account
        """

        self._account = account

    @property
    def action_taken(self):
        """Gets the action_taken of this AdminReport.

        The action taken to resolve this report. Enumerable oneOf.

        :return: The action_taken of this AdminReport.
        :rtype: str
        """
        return self._action_taken

    @action_taken.setter
    def action_taken(self, action_taken):
        """Sets the action_taken of this AdminReport.

        The action taken to resolve this report. Enumerable oneOf.

        :param action_taken: The action_taken of this AdminReport.
        :type action_taken: str
        """

        self._action_taken = action_taken

    @property
    def assigned_account(self):
        """Gets the assigned_account of this AdminReport.


        :return: The assigned_account of this AdminReport.
        :rtype: Account
        """
        return self._assigned_account

    @assigned_account.setter
    def assigned_account(self, assigned_account):
        """Sets the assigned_account of this AdminReport.


        :param assigned_account: The assigned_account of this AdminReport.
        :type assigned_account: Account
        """

        self._assigned_account = assigned_account

    @property
    def comment(self):
        """Gets the comment of this AdminReport.

        An optional reason for reporting.

        :return: The comment of this AdminReport.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AdminReport.

        An optional reason for reporting.

        :param comment: The comment of this AdminReport.
        :type comment: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this AdminReport.

        The time the report was filed.

        :return: The created_at of this AdminReport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AdminReport.

        The time the report was filed.

        :param created_at: The created_at of this AdminReport.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this AdminReport.

        The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.

        :return: The id of this AdminReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminReport.

        The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.

        :param id: The id of this AdminReport.
        :type id: str
        """

        self._id = id

    @property
    def statuses(self):
        """Gets the statuses of this AdminReport.

        Statuses attached to the report, for context.

        :return: The statuses of this AdminReport.
        :rtype: List[Status]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this AdminReport.

        Statuses attached to the report, for context.

        :param statuses: The statuses of this AdminReport.
        :type statuses: List[Status]
        """

        self._statuses = statuses

    @property
    def target_account(self):
        """Gets the target_account of this AdminReport.


        :return: The target_account of this AdminReport.
        :rtype: Account
        """
        return self._target_account

    @target_account.setter
    def target_account(self, target_account):
        """Sets the target_account of this AdminReport.


        :param target_account: The target_account of this AdminReport.
        :type target_account: Account
        """

        self._target_account = target_account

    @property
    def updated_at(self):
        """Gets the updated_at of this AdminReport.

        The time of last action on this report.

        :return: The updated_at of this AdminReport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AdminReport.

        The time of last action on this report.

        :param updated_at: The updated_at of this AdminReport.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
