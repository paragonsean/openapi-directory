# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class History(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: str=None, day: str=None, uses: str=None):
        """History - a model defined in OpenAPI

        :param accounts: The accounts of this History.
        :param day: The day of this History.
        :param uses: The uses of this History.
        """
        self.openapi_types = {
            'accounts': str,
            'day': str,
            'uses': str
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'day': 'day',
            'uses': 'uses'
        }

        self._accounts = accounts
        self._day = day
        self._uses = uses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'History':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The History of this History.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this History.

        the total of accounts using the tag within that day. Cast from an integer.

        :return: The accounts of this History.
        :rtype: str
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this History.

        the total of accounts using the tag within that day. Cast from an integer.

        :param accounts: The accounts of this History.
        :type accounts: str
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")

        self._accounts = accounts

    @property
    def day(self):
        """Gets the day of this History.

        UNIX timestamp on midnight of the given day.

        :return: The day of this History.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this History.

        UNIX timestamp on midnight of the given day.

        :param day: The day of this History.
        :type day: str
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day

    @property
    def uses(self):
        """Gets the uses of this History.

        the counted usage of the tag within that day. Cast from an integer.

        :return: The uses of this History.
        :rtype: str
        """
        return self._uses

    @uses.setter
    def uses(self, uses):
        """Sets the uses of this History.

        the counted usage of the tag within that day. Cast from an integer.

        :param uses: The uses of this History.
        :type uses: str
        """
        if uses is None:
            raise ValueError("Invalid value for `uses`, must not be `None`")

        self._uses = uses
