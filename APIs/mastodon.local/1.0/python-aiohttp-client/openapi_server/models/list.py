# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, replies_policy: str=None, title: str=None):
        """List - a model defined in OpenAPI

        :param id: The id of this List.
        :param replies_policy: The replies_policy of this List.
        :param title: The title of this List.
        """
        self.openapi_types = {
            'id': str,
            'replies_policy': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'replies_policy': 'replies_policy',
            'title': 'title'
        }

        self._id = id
        self._replies_policy = replies_policy
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The List of this List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this List.

        The internal database ID of the list. Cast from an integer, but not guaranteed to be a number.

        :return: The id of this List.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this List.

        The internal database ID of the list. Cast from an integer, but not guaranteed to be a number.

        :param id: The id of this List.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def replies_policy(self):
        """Gets the replies_policy of this List.

        The user-defined title of the list.

        :return: The replies_policy of this List.
        :rtype: str
        """
        return self._replies_policy

    @replies_policy.setter
    def replies_policy(self, replies_policy):
        """Sets the replies_policy of this List.

        The user-defined title of the list.

        :param replies_policy: The replies_policy of this List.
        :type replies_policy: str
        """
        allowed_values = ["followed", "list", "none"]  # noqa: E501
        if replies_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `replies_policy` ({0}), must be one of {1}"
                .format(replies_policy, allowed_values)
            )

        self._replies_policy = replies_policy

    @property
    def title(self):
        """Gets the title of this List.

        The user-defined title of the list.

        :return: The title of this List.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this List.

        The user-defined title of the list.

        :param title: The title of this List.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
