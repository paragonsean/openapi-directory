# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Announcement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_day: bool=None, created_at: str=None, ends_at: str=None, id: str=None, published: bool=None, read: bool=None, scheduled_at: str=None, starts_at: str=None, text: str=None, updated_at: str=None):
        """Announcement - a model defined in OpenAPI

        :param all_day: The all_day of this Announcement.
        :param created_at: The created_at of this Announcement.
        :param ends_at: The ends_at of this Announcement.
        :param id: The id of this Announcement.
        :param published: The published of this Announcement.
        :param read: The read of this Announcement.
        :param scheduled_at: The scheduled_at of this Announcement.
        :param starts_at: The starts_at of this Announcement.
        :param text: The text of this Announcement.
        :param updated_at: The updated_at of this Announcement.
        """
        self.openapi_types = {
            'all_day': bool,
            'created_at': str,
            'ends_at': str,
            'id': str,
            'published': bool,
            'read': bool,
            'scheduled_at': str,
            'starts_at': str,
            'text': str,
            'updated_at': str
        }

        self.attribute_map = {
            'all_day': 'all_day',
            'created_at': 'created_at',
            'ends_at': 'ends_at',
            'id': 'id',
            'published': 'published',
            'read': 'read',
            'scheduled_at': 'scheduled_at',
            'starts_at': 'starts_at',
            'text': 'text',
            'updated_at': 'updated_at'
        }

        self._all_day = all_day
        self._created_at = created_at
        self._ends_at = ends_at
        self._id = id
        self._published = published
        self._read = read
        self._scheduled_at = scheduled_at
        self._starts_at = starts_at
        self._text = text
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Announcement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Announcement of this Announcement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_day(self):
        """Gets the all_day of this Announcement.

        Whether the announcement has a start/end time.

        :return: The all_day of this Announcement.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this Announcement.

        Whether the announcement has a start/end time.

        :param all_day: The all_day of this Announcement.
        :type all_day: bool
        """
        if all_day is None:
            raise ValueError("Invalid value for `all_day`, must not be `None`")

        self._all_day = all_day

    @property
    def created_at(self):
        """Gets the created_at of this Announcement.

        When the announcement was created.

        :return: The created_at of this Announcement.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Announcement.

        When the announcement was created.

        :param created_at: The created_at of this Announcement.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def ends_at(self):
        """Gets the ends_at of this Announcement.

        When the future announcement will end. ISO 8601 Datetime.

        :return: The ends_at of this Announcement.
        :rtype: str
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Announcement.

        When the future announcement will end. ISO 8601 Datetime.

        :param ends_at: The ends_at of this Announcement.
        :type ends_at: str
        """

        self._ends_at = ends_at

    @property
    def id(self):
        """Gets the id of this Announcement.

        The announcement id. Cast from an integer, but not guaranteed to be a number.

        :return: The id of this Announcement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Announcement.

        The announcement id. Cast from an integer, but not guaranteed to be a number.

        :param id: The id of this Announcement.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published(self):
        """Gets the published of this Announcement.

        Whether the announcement is currently active.

        :return: The published of this Announcement.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Announcement.

        Whether the announcement is currently active.

        :param published: The published of this Announcement.
        :type published: bool
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def read(self):
        """Gets the read of this Announcement.

        Whether the announcement has been read by the user.

        :return: The read of this Announcement.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Announcement.

        Whether the announcement has been read by the user.

        :param read: The read of this Announcement.
        :type read: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Announcement.

        When the future announcement was scheduled. ISO 8601 Datetime.

        :return: The scheduled_at of this Announcement.
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Announcement.

        When the future announcement was scheduled. ISO 8601 Datetime.

        :param scheduled_at: The scheduled_at of this Announcement.
        :type scheduled_at: str
        """

        self._scheduled_at = scheduled_at

    @property
    def starts_at(self):
        """Gets the starts_at of this Announcement.

        When the future announcement will start. ISO 8601 Datetime.

        :return: The starts_at of this Announcement.
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Announcement.

        When the future announcement will start. ISO 8601 Datetime.

        :param starts_at: The starts_at of this Announcement.
        :type starts_at: str
        """

        self._starts_at = starts_at

    @property
    def text(self):
        """Gets the text of this Announcement.

        The content of the announcement.

        :return: The text of this Announcement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Announcement.

        The content of the announcement.

        :param text: The text of this Announcement.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def updated_at(self):
        """Gets the updated_at of this Announcement.

        When the announcement was last updated. ISO 8601 Datetime.

        :return: The updated_at of this Announcement.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Announcement.

        When the announcement was last updated. ISO 8601 Datetime.

        :param updated_at: The updated_at of this Announcement.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
