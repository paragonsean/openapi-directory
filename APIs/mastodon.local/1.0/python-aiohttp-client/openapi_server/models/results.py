# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.status import Status
from openapi_server.models.tag import Tag
from openapi_server import util


class Results(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[Account]=None, hashtags: List[Tag]=None, statuses: List[Status]=None):
        """Results - a model defined in OpenAPI

        :param accounts: The accounts of this Results.
        :param hashtags: The hashtags of this Results.
        :param statuses: The statuses of this Results.
        """
        self.openapi_types = {
            'accounts': List[Account],
            'hashtags': List[Tag],
            'statuses': List[Status]
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'hashtags': 'hashtags',
            'statuses': 'statuses'
        }

        self._accounts = accounts
        self._hashtags = hashtags
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Results of this Results.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this Results.

        Accounts which match the given query.

        :return: The accounts of this Results.
        :rtype: List[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Results.

        Accounts which match the given query.

        :param accounts: The accounts of this Results.
        :type accounts: List[Account]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")

        self._accounts = accounts

    @property
    def hashtags(self):
        """Gets the hashtags of this Results.

        Hashtags which match the given query.

        :return: The hashtags of this Results.
        :rtype: List[Tag]
        """
        return self._hashtags

    @hashtags.setter
    def hashtags(self, hashtags):
        """Sets the hashtags of this Results.

        Hashtags which match the given query.

        :param hashtags: The hashtags of this Results.
        :type hashtags: List[Tag]
        """
        if hashtags is None:
            raise ValueError("Invalid value for `hashtags`, must not be `None`")

        self._hashtags = hashtags

    @property
    def statuses(self):
        """Gets the statuses of this Results.

        Statuses which match the given query.

        :return: The statuses of this Results.
        :rtype: List[Status]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this Results.

        Statuses which match the given query.

        :param statuses: The statuses of this Results.
        :type statuses: List[Status]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses
