# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Marker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, home: object=None, last_read_id: str=None, notifications: object=None, updated_at: datetime=None, version: int=None):
        """Marker - a model defined in OpenAPI

        :param home: The home of this Marker.
        :param last_read_id: The last_read_id of this Marker.
        :param notifications: The notifications of this Marker.
        :param updated_at: The updated_at of this Marker.
        :param version: The version of this Marker.
        """
        self.openapi_types = {
            'home': object,
            'last_read_id': str,
            'notifications': object,
            'updated_at': datetime,
            'version': int
        }

        self.attribute_map = {
            'home': 'home',
            'last_read_id': 'last_read_id',
            'notifications': 'notifications',
            'updated_at': 'updated_at',
            'version': 'version'
        }

        self._home = home
        self._last_read_id = last_read_id
        self._notifications = notifications
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Marker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Marker of this Marker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def home(self):
        """Gets the home of this Marker.

        Information about the user's position in the home timeline.

        :return: The home of this Marker.
        :rtype: object
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this Marker.

        Information about the user's position in the home timeline.

        :param home: The home of this Marker.
        :type home: object
        """

        self._home = home

    @property
    def last_read_id(self):
        """Gets the last_read_id of this Marker.

        The ID of the most recently viewed entity. Cast from integer but not guaranteed to be a number

        :return: The last_read_id of this Marker.
        :rtype: str
        """
        return self._last_read_id

    @last_read_id.setter
    def last_read_id(self, last_read_id):
        """Sets the last_read_id of this Marker.

        The ID of the most recently viewed entity. Cast from integer but not guaranteed to be a number

        :param last_read_id: The last_read_id of this Marker.
        :type last_read_id: str
        """

        self._last_read_id = last_read_id

    @property
    def notifications(self):
        """Gets the notifications of this Marker.

        Information about the user's position in their notifications.

        :return: The notifications of this Marker.
        :rtype: object
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Marker.

        Information about the user's position in their notifications.

        :param notifications: The notifications of this Marker.
        :type notifications: object
        """

        self._notifications = notifications

    @property
    def updated_at(self):
        """Gets the updated_at of this Marker.

        The timestamp of when the marker was set. ISO 8601 Datetime.

        :return: The updated_at of this Marker.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Marker.

        The timestamp of when the marker was set. ISO 8601 Datetime.

        :param updated_at: The updated_at of this Marker.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Marker.

        Used for locking to prevent write conflicts.

        :return: The version of this Marker.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Marker.

        Used for locking to prevent write conflicts.

        :param version: The version of this Marker.
        :type version: int
        """

        self._version = version
