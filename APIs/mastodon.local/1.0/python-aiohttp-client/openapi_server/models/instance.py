# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_required: bool=None, contact_account: Account=None, description: str=None, email: str=None, invites_enabled: bool=None, languages: List[str]=None, registrations: bool=None, short_description: str=None, stats: object=None, thumbnail: str=None, title: str=None, uri: str=None, urls: object=None, version: str=None):
        """Instance - a model defined in OpenAPI

        :param approval_required: The approval_required of this Instance.
        :param contact_account: The contact_account of this Instance.
        :param description: The description of this Instance.
        :param email: The email of this Instance.
        :param invites_enabled: The invites_enabled of this Instance.
        :param languages: The languages of this Instance.
        :param registrations: The registrations of this Instance.
        :param short_description: The short_description of this Instance.
        :param stats: The stats of this Instance.
        :param thumbnail: The thumbnail of this Instance.
        :param title: The title of this Instance.
        :param uri: The uri of this Instance.
        :param urls: The urls of this Instance.
        :param version: The version of this Instance.
        """
        self.openapi_types = {
            'approval_required': bool,
            'contact_account': Account,
            'description': str,
            'email': str,
            'invites_enabled': bool,
            'languages': List[str],
            'registrations': bool,
            'short_description': str,
            'stats': object,
            'thumbnail': str,
            'title': str,
            'uri': str,
            'urls': object,
            'version': str
        }

        self.attribute_map = {
            'approval_required': 'approval_required',
            'contact_account': 'contact_account',
            'description': 'description',
            'email': 'email',
            'invites_enabled': 'invites_enabled',
            'languages': 'languages',
            'registrations': 'registrations',
            'short_description': 'short_description',
            'stats': 'stats',
            'thumbnail': 'thumbnail',
            'title': 'title',
            'uri': 'uri',
            'urls': 'urls',
            'version': 'version'
        }

        self._approval_required = approval_required
        self._contact_account = contact_account
        self._description = description
        self._email = email
        self._invites_enabled = invites_enabled
        self._languages = languages
        self._registrations = registrations
        self._short_description = short_description
        self._stats = stats
        self._thumbnail = thumbnail
        self._title = title
        self._uri = uri
        self._urls = urls
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_required(self):
        """Gets the approval_required of this Instance.

        Whether registrations require moderator approval.

        :return: The approval_required of this Instance.
        :rtype: bool
        """
        return self._approval_required

    @approval_required.setter
    def approval_required(self, approval_required):
        """Sets the approval_required of this Instance.

        Whether registrations require moderator approval.

        :param approval_required: The approval_required of this Instance.
        :type approval_required: bool
        """
        if approval_required is None:
            raise ValueError("Invalid value for `approval_required`, must not be `None`")

        self._approval_required = approval_required

    @property
    def contact_account(self):
        """Gets the contact_account of this Instance.


        :return: The contact_account of this Instance.
        :rtype: Account
        """
        return self._contact_account

    @contact_account.setter
    def contact_account(self, contact_account):
        """Sets the contact_account of this Instance.


        :param contact_account: The contact_account of this Instance.
        :type contact_account: Account
        """

        self._contact_account = contact_account

    @property
    def description(self):
        """Gets the description of this Instance.

        Admin-defined description of the Mastodon site.

        :return: The description of this Instance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instance.

        Admin-defined description of the Mastodon site.

        :param description: The description of this Instance.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this Instance.

        An email that may be contacted for any inquiries.

        :return: The email of this Instance.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Instance.

        An email that may be contacted for any inquiries.

        :param email: The email of this Instance.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def invites_enabled(self):
        """Gets the invites_enabled of this Instance.

        Whether invites are enabled.

        :return: The invites_enabled of this Instance.
        :rtype: bool
        """
        return self._invites_enabled

    @invites_enabled.setter
    def invites_enabled(self, invites_enabled):
        """Sets the invites_enabled of this Instance.

        Whether invites are enabled.

        :param invites_enabled: The invites_enabled of this Instance.
        :type invites_enabled: bool
        """
        if invites_enabled is None:
            raise ValueError("Invalid value for `invites_enabled`, must not be `None`")

        self._invites_enabled = invites_enabled

    @property
    def languages(self):
        """Gets the languages of this Instance.

        Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.

        :return: The languages of this Instance.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Instance.

        Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.

        :param languages: The languages of this Instance.
        :type languages: List[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")

        self._languages = languages

    @property
    def registrations(self):
        """Gets the registrations of this Instance.

        Whether registrations are enabled.

        :return: The registrations of this Instance.
        :rtype: bool
        """
        return self._registrations

    @registrations.setter
    def registrations(self, registrations):
        """Sets the registrations of this Instance.

        Whether registrations are enabled.

        :param registrations: The registrations of this Instance.
        :type registrations: bool
        """
        if registrations is None:
            raise ValueError("Invalid value for `registrations`, must not be `None`")

        self._registrations = registrations

    @property
    def short_description(self):
        """Gets the short_description of this Instance.

        A shorter description defined by the admin.

        :return: The short_description of this Instance.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Instance.

        A shorter description defined by the admin.

        :param short_description: The short_description of this Instance.
        :type short_description: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")

        self._short_description = short_description

    @property
    def stats(self):
        """Gets the stats of this Instance.

        Statistics about how much information the instance contains.

        :return: The stats of this Instance.
        :rtype: object
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Instance.

        Statistics about how much information the instance contains.

        :param stats: The stats of this Instance.
        :type stats: object
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Instance.

        Banner image for the website.

        :return: The thumbnail of this Instance.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Instance.

        Banner image for the website.

        :param thumbnail: The thumbnail of this Instance.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this Instance.

        The title of the website.

        :return: The title of this Instance.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Instance.

        The title of the website.

        :param title: The title of this Instance.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this Instance.

        The domain name of the instance.

        :return: The uri of this Instance.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Instance.

        The domain name of the instance.

        :param uri: The uri of this Instance.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def urls(self):
        """Gets the urls of this Instance.

        URLs of interest for clients apps.

        :return: The urls of this Instance.
        :rtype: object
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Instance.

        URLs of interest for clients apps.

        :param urls: The urls of this Instance.
        :type urls: object
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")

        self._urls = urls

    @property
    def version(self):
        """Gets the version of this Instance.

        The version of Mastodon installed on the instance.

        :return: The version of this Instance.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Instance.

        The version of Mastodon installed on the instance.

        :param version: The version of this Instance.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
