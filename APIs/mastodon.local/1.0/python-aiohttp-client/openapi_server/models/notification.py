# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.status import Status
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: Account=None, created_at: datetime=None, id: str=None, status: Status=None, type: str=None):
        """Notification - a model defined in OpenAPI

        :param account: The account of this Notification.
        :param created_at: The created_at of this Notification.
        :param id: The id of this Notification.
        :param status: The status of this Notification.
        :param type: The type of this Notification.
        """
        self.openapi_types = {
            'account': Account,
            'created_at': datetime,
            'id': str,
            'status': Status,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'created_at': 'created_at',
            'id': 'id',
            'status': 'status',
            'type': 'type'
        }

        self._account = account
        self._created_at = created_at
        self._id = id
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Notification.


        :return: The account of this Notification.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Notification.


        :param account: The account of this Notification.
        :type account: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def created_at(self):
        """Gets the created_at of this Notification.

        The timestamp of the notification. ISO 8601 Datetime.

        :return: The created_at of this Notification.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.

        The timestamp of the notification. ISO 8601 Datetime.

        :param created_at: The created_at of this Notification.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Notification.

        The id of the notification in the database. Cast from an integer, but not guaranteed to be a number.

        :return: The id of this Notification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.

        The id of the notification in the database. Cast from an integer, but not guaranteed to be a number.

        :param id: The id of this Notification.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this Notification.


        :return: The status of this Notification.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Notification.


        :param status: The status of this Notification.
        :type status: Status
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Notification.

        The type of event that resulted in the notification.

        :return: The type of this Notification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.

        The type of event that resulted in the notification.

        :param type: The type of this Notification.
        :type type: str
        """
        allowed_values = ["follow", "follow_request", "mention", "reblog", "favourite", "poll", "status"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
