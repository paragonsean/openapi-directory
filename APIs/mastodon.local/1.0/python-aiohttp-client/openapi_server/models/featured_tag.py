# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeaturedTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, last_status_at: datetime=None, name: str=None, statuses_count: int=None, url: str=None):
        """FeaturedTag - a model defined in OpenAPI

        :param id: The id of this FeaturedTag.
        :param last_status_at: The last_status_at of this FeaturedTag.
        :param name: The name of this FeaturedTag.
        :param statuses_count: The statuses_count of this FeaturedTag.
        :param url: The url of this FeaturedTag.
        """
        self.openapi_types = {
            'id': str,
            'last_status_at': datetime,
            'name': str,
            'statuses_count': int,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'last_status_at': 'last_status_at',
            'name': 'name',
            'statuses_count': 'statuses_count',
            'url': 'url'
        }

        self._id = id
        self._last_status_at = last_status_at
        self._name = name
        self._statuses_count = statuses_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeaturedTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeaturedTag of this FeaturedTag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FeaturedTag.

        The internal ID of the featured tag in the database. Cast from integer but not guaranteed to be a number

        :return: The id of this FeaturedTag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeaturedTag.

        The internal ID of the featured tag in the database. Cast from integer but not guaranteed to be a number

        :param id: The id of this FeaturedTag.
        :type id: str
        """

        self._id = id

    @property
    def last_status_at(self):
        """Gets the last_status_at of this FeaturedTag.

        The timestamp of the last authored status containing this hashtag. ISO 8601 Datetime.

        :return: The last_status_at of this FeaturedTag.
        :rtype: datetime
        """
        return self._last_status_at

    @last_status_at.setter
    def last_status_at(self, last_status_at):
        """Sets the last_status_at of this FeaturedTag.

        The timestamp of the last authored status containing this hashtag. ISO 8601 Datetime.

        :param last_status_at: The last_status_at of this FeaturedTag.
        :type last_status_at: datetime
        """

        self._last_status_at = last_status_at

    @property
    def name(self):
        """Gets the name of this FeaturedTag.

        The name of the hashtag being featured.

        :return: The name of this FeaturedTag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeaturedTag.

        The name of the hashtag being featured.

        :param name: The name of this FeaturedTag.
        :type name: str
        """

        self._name = name

    @property
    def statuses_count(self):
        """Gets the statuses_count of this FeaturedTag.

        The number of authored statuses containing this hashtag.

        :return: The statuses_count of this FeaturedTag.
        :rtype: int
        """
        return self._statuses_count

    @statuses_count.setter
    def statuses_count(self, statuses_count):
        """Sets the statuses_count of this FeaturedTag.

        The number of authored statuses containing this hashtag.

        :param statuses_count: The statuses_count of this FeaturedTag.
        :type statuses_count: int
        """

        self._statuses_count = statuses_count

    @property
    def url(self):
        """Gets the url of this FeaturedTag.

        A link to all statuses by a user that contain this hashtag.

        :return: The url of this FeaturedTag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FeaturedTag.

        A link to all statuses by a user that contain this hashtag.

        :param url: The url of this FeaturedTag.
        :type url: str
        """

        self._url = url
