# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnouncementReaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, me: bool=None, name: str=None, static_url: str=None, url: str=None):
        """AnnouncementReaction - a model defined in OpenAPI

        :param count: The count of this AnnouncementReaction.
        :param me: The me of this AnnouncementReaction.
        :param name: The name of this AnnouncementReaction.
        :param static_url: The static_url of this AnnouncementReaction.
        :param url: The url of this AnnouncementReaction.
        """
        self.openapi_types = {
            'count': int,
            'me': bool,
            'name': str,
            'static_url': str,
            'url': str
        }

        self.attribute_map = {
            'count': 'count',
            'me': 'me',
            'name': 'name',
            'static_url': 'static_url',
            'url': 'url'
        }

        self._count = count
        self._me = me
        self._name = name
        self._static_url = static_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnouncementReaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnouncementReaction of this AnnouncementReaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AnnouncementReaction.

        The total number of users who have added this reaction.

        :return: The count of this AnnouncementReaction.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AnnouncementReaction.

        The total number of users who have added this reaction.

        :param count: The count of this AnnouncementReaction.
        :type count: int
        """

        self._count = count

    @property
    def me(self):
        """Gets the me of this AnnouncementReaction.

        Whether the authorized user has added this reaction to the announcement.

        :return: The me of this AnnouncementReaction.
        :rtype: bool
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this AnnouncementReaction.

        Whether the authorized user has added this reaction to the announcement.

        :param me: The me of this AnnouncementReaction.
        :type me: bool
        """

        self._me = me

    @property
    def name(self):
        """Gets the name of this AnnouncementReaction.

        The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.

        :return: The name of this AnnouncementReaction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnnouncementReaction.

        The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.

        :param name: The name of this AnnouncementReaction.
        :type name: str
        """

        self._name = name

    @property
    def static_url(self):
        """Gets the static_url of this AnnouncementReaction.

        A link to a non-animated version of the custom emoji (URL).

        :return: The static_url of this AnnouncementReaction.
        :rtype: str
        """
        return self._static_url

    @static_url.setter
    def static_url(self, static_url):
        """Sets the static_url of this AnnouncementReaction.

        A link to a non-animated version of the custom emoji (URL).

        :param static_url: The static_url of this AnnouncementReaction.
        :type static_url: str
        """

        self._static_url = static_url

    @property
    def url(self):
        """Gets the url of this AnnouncementReaction.

        A link to the custom emoji (URL).

        :return: The url of this AnnouncementReaction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AnnouncementReaction.

        A link to the custom emoji (URL).

        :param url: The url of this AnnouncementReaction.
        :type url: str
        """

        self._url = url
