# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.status import Status
from openapi_server import util


class Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[Account]=None, id: str=None, last_status: Status=None, unread: bool=None):
        """Conversation - a model defined in OpenAPI

        :param accounts: The accounts of this Conversation.
        :param id: The id of this Conversation.
        :param last_status: The last_status of this Conversation.
        :param unread: The unread of this Conversation.
        """
        self.openapi_types = {
            'accounts': List[Account],
            'id': str,
            'last_status': Status,
            'unread': bool
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'id': 'id',
            'last_status': 'last_status',
            'unread': 'unread'
        }

        self._accounts = accounts
        self._id = id
        self._last_status = last_status
        self._unread = unread

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation of this Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this Conversation.

        Participants in the conversation.

        :return: The accounts of this Conversation.
        :rtype: List[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Conversation.

        Participants in the conversation.

        :param accounts: The accounts of this Conversation.
        :type accounts: List[Account]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")

        self._accounts = accounts

    @property
    def id(self):
        """Gets the id of this Conversation.

        Local database ID of the conversation. Cast from an integer, but not guaranteed to be a number

        :return: The id of this Conversation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        Local database ID of the conversation. Cast from an integer, but not guaranteed to be a number

        :param id: The id of this Conversation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_status(self):
        """Gets the last_status of this Conversation.


        :return: The last_status of this Conversation.
        :rtype: Status
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this Conversation.


        :param last_status: The last_status of this Conversation.
        :type last_status: Status
        """

        self._last_status = last_status

    @property
    def unread(self):
        """Gets the unread of this Conversation.

        Is the conversation currently marked as unread?

        :return: The unread of this Conversation.
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Conversation.

        Is the conversation currently marked as unread?

        :param unread: The unread of this Conversation.
        :type unread: bool
        """
        if unread is None:
            raise ValueError("Invalid value for `unread`, must not be `None`")

        self._unread = unread
