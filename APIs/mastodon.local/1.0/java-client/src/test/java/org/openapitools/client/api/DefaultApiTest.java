/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Activity;
import org.openapitools.client.model.AdminAccount;
import org.openapitools.client.model.AdminReport;
import org.openapitools.client.model.Announcement;
import org.openapitools.client.model.ApiV1AdminAccountsIdActionPostRequest;
import org.openapitools.client.model.ApiV1DomainBlocksPostRequest;
import org.openapitools.client.model.ApiV1FeaturedTagsPostRequest;
import org.openapitools.client.model.ApiV1FiltersPostRequest;
import org.openapitools.client.model.ApiV1ListsIdAccountsPostRequest;
import org.openapitools.client.model.ApiV1ListsPostRequest;
import org.openapitools.client.model.ApiV1ListsPutRequest;
import org.openapitools.client.model.ApiV1MediaPostRequest;
import org.openapitools.client.model.ApiV1PollsIdPostRequest;
import org.openapitools.client.model.ApiV1PushSubscriptionPostRequest;
import org.openapitools.client.model.ApiV1PushSubscriptionPutRequest;
import org.openapitools.client.model.ApiV1ReportsPostRequest;
import org.openapitools.client.model.ApiV1ScheduledStatusesIdPutRequest;
import org.openapitools.client.model.ApiV1StatusesIdReblogPostRequest;
import org.openapitools.client.model.ApiV1StatusesPost200Response;
import org.openapitools.client.model.ApiV1StatusesPostRequestInner;
import org.openapitools.client.model.ApiV2SearchGet200Response;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.Context;
import org.openapitools.client.model.Conversation;
import org.openapitools.client.model.Emoji;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeaturedTag;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.IdentityProof;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.ModelList;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.Poll;
import org.openapitools.client.model.Preferences;
import org.openapitools.client.model.PushSubscription;
import org.openapitools.client.model.Relationship;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ScheduledStatus;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * OEmbed as JSON
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiOembedGetTest() throws ApiException {
        String url = null;
        Integer maxwidth = null;
        Integer maxheight = null;
        Card response = api.apiOembedGet(url, maxwidth, maxheight);
        // TODO: test validations
    }

    /**
     * View identity proof
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiProofsGetTest() throws ApiException {
        String provider = null;
        String username = null;
        IdentityProof response = api.apiProofsGet(provider, username);
        // TODO: test validations
    }

    /**
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsGetTest() throws ApiException {
        Boolean local = null;
        Boolean remote = null;
        String byDomain = null;
        Boolean active = null;
        Boolean pending = null;
        Boolean disabled = null;
        Boolean silenced = null;
        Boolean suspended = null;
        Boolean staff = null;
        String username = null;
        String displayName = null;
        String email = null;
        String ip = null;
        List<AdminAccount> response = api.apiV1AdminAccountsGet(local, remote, byDomain, active, pending, disabled, silenced, suspended, staff, username, displayName, email, ip);
        // TODO: test validations
    }

    /**
     * Perform an action against an account and log this action in the moderation history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdActionPostTest() throws ApiException {
        String id = null;
        ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest = null;
        api.apiV1AdminAccountsIdActionPost(id, apiV1AdminAccountsIdActionPostRequest);
        // TODO: test validations
    }

    /**
     * Approve the given local account if it is currently pending approval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdApprovePostTest() throws ApiException {
        String id = null;
        api.apiV1AdminAccountsIdApprovePost(id);
        // TODO: test validations
    }

    /**
     * Re-enable a local account whose login is currently disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdEnablePostTest() throws ApiException {
        String id = null;
        api.apiV1AdminAccountsIdEnablePost(id);
        // TODO: test validations
    }

    /**
     * View admin-level information about the given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdGetTest() throws ApiException {
        String id = null;
        AdminAccount response = api.apiV1AdminAccountsIdGet(id);
        // TODO: test validations
    }

    /**
     * Reject the given local account if it is currently pending approval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdRejectPostTest() throws ApiException {
        String id = null;
        api.apiV1AdminAccountsIdRejectPost(id);
        // TODO: test validations
    }

    /**
     * Unsilence a currently silenced account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdUnsilencePostTest() throws ApiException {
        String id = null;
        api.apiV1AdminAccountsIdUnsilencePost(id);
        // TODO: test validations
    }

    /**
     * Unsuspend a currently suspended account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminAccountsIdUnsuspendPostTest() throws ApiException {
        String id = null;
        api.apiV1AdminAccountsIdUnsuspendPost(id);
        // TODO: test validations
    }

    /**
     * View all reports. Pagination may be done with HTTP Link header in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsGetTest() throws ApiException {
        Boolean resolved = null;
        String accountId = null;
        String targetAccountId = null;
        List<AdminReport> response = api.apiV1AdminReportsGet(resolved, accountId, targetAccountId);
        // TODO: test validations
    }

    /**
     * Claim the handling of this report to yourself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsIdAssignToSelfPostTest() throws ApiException {
        String id = null;
        AdminReport response = api.apiV1AdminReportsIdAssignToSelfPost(id);
        // TODO: test validations
    }

    /**
     * View information about the report with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsIdGetTest() throws ApiException {
        String id = null;
        AdminReport response = api.apiV1AdminReportsIdGet(id);
        // TODO: test validations
    }

    /**
     * Mark a report as resolved with no further action taken.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsIdReopenPostTest() throws ApiException {
        String id = null;
        AdminReport response = api.apiV1AdminReportsIdReopenPost(id);
        // TODO: test validations
    }

    /**
     * Mark a report as resolved with no further action taken.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsIdResolvePostTest() throws ApiException {
        String id = null;
        AdminReport response = api.apiV1AdminReportsIdResolvePost(id);
        // TODO: test validations
    }

    /**
     * Unassign a report so that someone else can claim it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AdminReportsIdUnassignPostTest() throws ApiException {
        String id = null;
        AdminReport response = api.apiV1AdminReportsIdUnassignPost(id);
        // TODO: test validations
    }

    /**
     * See all currently active announcements set by admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AnnouncementsGetTest() throws ApiException {
        Boolean withDismissed = null;
        List<Announcement> response = api.apiV1AnnouncementsGet(withDismissed);
        // TODO: test validations
    }

    /**
     * Allows a user to mark the announcement as read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AnnouncementsIdDismissPostTest() throws ApiException {
        String id = null;
        Object response = api.apiV1AnnouncementsIdDismissPost(id);
        // TODO: test validations
    }

    /**
     * Undo a react emoji to an announcement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AnnouncementsIdReactionsNameDeleteTest() throws ApiException {
        String id = null;
        String name = null;
        Object response = api.apiV1AnnouncementsIdReactionsNameDelete(id, name);
        // TODO: test validations
    }

    /**
     * Allows a user to mark the announcement as read.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1AnnouncementsIdReactionsNamePutTest() throws ApiException {
        String id = null;
        String name = null;
        Object response = api.apiV1AnnouncementsIdReactionsNamePut(id, name);
        // TODO: test validations
    }

    /**
     * Get blocked users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1BlocksGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        List<Account> response = api.apiV1BlocksGet(limit, maxId, sinceId);
        // TODO: test validations
    }

    /**
     * Statuses the user has bookmarked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1BookmarksGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Status> response = api.apiV1BookmarksGet(limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * Show conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ConversationsGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Conversation> response = api.apiV1ConversationsGet(limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * Remove converstation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ConversationsIdDeleteTest() throws ApiException {
        String id = null;
        Object response = api.apiV1ConversationsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Remove converstation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ConversationsIdReadPostTest() throws ApiException {
        String id = null;
        Conversation response = api.apiV1ConversationsIdReadPost(id);
        // TODO: test validations
    }

    /**
     * Returns custom emojis that are available on the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1CustomEmojisGetTest() throws ApiException {
        List<Emoji> response = api.apiV1CustomEmojisGet();
        // TODO: test validations
    }

    /**
     * List accounts visible in the directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1DirectoryGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String order = null;
        Boolean local = null;
        List<Account> response = api.apiV1DirectoryGet(limit, offset, order, local);
        // TODO: test validations
    }

    /**
     * Remove a domain block, if it exists in the user&#39;s array of blocked domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1DomainBlocksDeleteTest() throws ApiException {
        String domain = null;
        Object response = api.apiV1DomainBlocksDelete(domain);
        // TODO: test validations
    }

    /**
     * View domains the user has blocked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1DomainBlocksGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        List<String> response = api.apiV1DomainBlocksGet(limit, maxId, sinceId);
        // TODO: test validations
    }

    /**
     * \&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1DomainBlocksPostTest() throws ApiException {
        ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest = null;
        Object response = api.apiV1DomainBlocksPost(apiV1DomainBlocksPostRequest);
        // TODO: test validations
    }

    /**
     * Accounts that the user is currently featuring on their profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1EndorsementsGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        List<Account> response = api.apiV1EndorsementsGet(limit, maxId, sinceId);
        // TODO: test validations
    }

    /**
     * Statuses the user has favourited.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FavouritesGetTest() throws ApiException {
        String limit = null;
        String maxId = null;
        String minId = null;
        List<Status> response = api.apiV1FavouritesGet(limit, maxId, minId);
        // TODO: test validations
    }

    /**
     * View your featured tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FeaturedTagsGetTest() throws ApiException {
        List<FeaturedTag> response = api.apiV1FeaturedTagsGet();
        // TODO: test validations
    }

    /**
     * Unfeature a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FeaturedTagsIdDeleteTest() throws ApiException {
        String id = null;
        Object response = api.apiV1FeaturedTagsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Create a feature a tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FeaturedTagsPostTest() throws ApiException {
        ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest = null;
        FeaturedTag response = api.apiV1FeaturedTagsPost(apiV1FeaturedTagsPostRequest);
        // TODO: test validations
    }

    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FeaturedTagsSuggestionsGetTest() throws ApiException {
        List<FeaturedTag> response = api.apiV1FeaturedTagsSuggestionsGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FiltersGetTest() throws ApiException {
        List<Filter> response = api.apiV1FiltersGet();
        // TODO: test validations
    }

    /**
     * Delete a filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FiltersIdDeleteTest() throws ApiException {
        String id = null;
        api.apiV1FiltersIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get one filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FiltersIdGetTest() throws ApiException {
        String id = null;
        Filter response = api.apiV1FiltersIdGet(id);
        // TODO: test validations
    }

    /**
     * Update a filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FiltersIdPutTest() throws ApiException {
        String id = null;
        ApiV1FiltersPostRequest apiV1FiltersPostRequest = null;
        Filter response = api.apiV1FiltersIdPut(id, apiV1FiltersPostRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FiltersPostTest() throws ApiException {
        ApiV1FiltersPostRequest apiV1FiltersPostRequest = null;
        Filter response = api.apiV1FiltersPost(apiV1FiltersPostRequest);
        // TODO: test validations
    }

    /**
     * Pending Follows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FollowRequestsGetTest() throws ApiException {
        Integer limit = null;
        List<Account> response = api.apiV1FollowRequestsGet(limit);
        // TODO: test validations
    }

    /**
     * Accept Follow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FollowRequestsIdAuthorizePostTest() throws ApiException {
        String id = null;
        Relationship response = api.apiV1FollowRequestsIdAuthorizePost(id);
        // TODO: test validations
    }

    /**
     * Accept Follow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1FollowRequestsIdRejectPostTest() throws ApiException {
        String id = null;
        Relationship response = api.apiV1FollowRequestsIdRejectPost(id);
        // TODO: test validations
    }

    /**
     * Instance activity over the last 3 months, binned weekly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1InstanceActivityGetTest() throws ApiException {
        List<Activity> response = api.apiV1InstanceActivityGet();
        // TODO: test validations
    }

    /**
     * Information about the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1InstanceGetTest() throws ApiException {
        Instance response = api.apiV1InstanceGet();
        // TODO: test validations
    }

    /**
     * Information about the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1InstancePeersGetTest() throws ApiException {
        List<String> response = api.apiV1InstancePeersGet();
        // TODO: test validations
    }

    /**
     * Delete a list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsDeleteTest() throws ApiException {
        Object response = api.apiV1ListsDelete();
        // TODO: test validations
    }

    /**
     * Fetch all lists that the user owns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsGetTest() throws ApiException {
        List<ModelList> response = api.apiV1ListsGet();
        // TODO: test validations
    }

    /**
     * Remove accounts from the given list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsIdAccountsDeleteTest() throws ApiException {
        String id = null;
        List<String> accountIds = null;
        Object response = api.apiV1ListsIdAccountsDelete(id, accountIds);
        // TODO: test validations
    }

    /**
     * View accounts in List
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsIdAccountsGetTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        List<Account> response = api.apiV1ListsIdAccountsGet(id, limit, maxId, sinceId);
        // TODO: test validations
    }

    /**
     * Add accounts to the given list. Note that the user must be following these accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsIdAccountsPostTest() throws ApiException {
        String id = null;
        ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest = null;
        Object response = api.apiV1ListsIdAccountsPost(id, apiV1ListsIdAccountsPostRequest);
        // TODO: test validations
    }

    /**
     * Remove converstation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsIdGetTest() throws ApiException {
        String id = null;
        ModelList response = api.apiV1ListsIdGet(id);
        // TODO: test validations
    }

    /**
     * Create a new list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsPostTest() throws ApiException {
        ApiV1ListsPostRequest apiV1ListsPostRequest = null;
        ModelList response = api.apiV1ListsPost(apiV1ListsPostRequest);
        // TODO: test validations
    }

    /**
     * Change the title of a list, or which replies to show.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ListsPutTest() throws ApiException {
        ApiV1ListsPutRequest apiV1ListsPutRequest = null;
        ModelList response = api.apiV1ListsPut(apiV1ListsPutRequest);
        // TODO: test validations
    }

    /**
     * Get saved timeline position
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MarkersGetTest() throws ApiException {
        List<Object> timeline = null;
        Object response = api.apiV1MarkersGet(timeline);
        // TODO: test validations
    }

    /**
     * Get saved timeline position
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MarkersPostTest() throws ApiException {
        Object body = null;
        Object response = api.apiV1MarkersPost(body);
        // TODO: test validations
    }

    /**
     * Get an attachement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MediaIdGetTest() throws ApiException {
        String id = null;
        Attachment response = api.apiV1MediaIdGet(id);
        // TODO: test validations
    }

    /**
     * Update an Attachment, before it is attached to a status and posted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MediaIdPostTest() throws ApiException {
        String id = null;
        ApiV1MediaPostRequest apiV1MediaPostRequest = null;
        Attachment response = api.apiV1MediaIdPost(id, apiV1MediaPostRequest);
        // TODO: test validations
    }

    /**
     * Creates an attachment to be used with a new status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MediaPostTest() throws ApiException {
        ApiV1MediaPostRequest apiV1MediaPostRequest = null;
        Attachment response = api.apiV1MediaPost(apiV1MediaPostRequest);
        // TODO: test validations
    }

    /**
     * Accounts the user has muted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1MutesGetTest() throws ApiException {
        String limit = null;
        String maxId = null;
        String sinceId = null;
        List<Account> response = api.apiV1MutesGet(limit, maxId, sinceId);
        // TODO: test validations
    }

    /**
     * Clear all notifications from the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationsClearPostTest() throws ApiException {
        Object response = api.apiV1NotificationsClearPost();
        // TODO: test validations
    }

    /**
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationsGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<String> excludeTypes = null;
        String accountId = null;
        List<Notification> response = api.apiV1NotificationsGet(limit, maxId, sinceId, minId, excludeTypes, accountId);
        // TODO: test validations
    }

    /**
     * Clear a single notification from the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationsIdDismissPostTest() throws ApiException {
        String id = null;
        Notification response = api.apiV1NotificationsIdDismissPost(id);
        // TODO: test validations
    }

    /**
     * View information about a notification with a given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1NotificationsIdGetTest() throws ApiException {
        String id = null;
        Notification response = api.apiV1NotificationsIdGet(id);
        // TODO: test validations
    }

    /**
     * View a poll.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PollsIdGetTest() throws ApiException {
        String id = null;
        Poll response = api.apiV1PollsIdGet(id);
        // TODO: test validations
    }

    /**
     * Vote on a poll.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PollsIdPostTest() throws ApiException {
        String id = null;
        ApiV1PollsIdPostRequest apiV1PollsIdPostRequest = null;
        Poll response = api.apiV1PollsIdPost(id, apiV1PollsIdPostRequest);
        // TODO: test validations
    }

    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PreferencesGetTest() throws ApiException {
        Preferences response = api.apiV1PreferencesGet();
        // TODO: test validations
    }

    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PushSubscriptionDeleteTest() throws ApiException {
        Object response = api.apiV1PushSubscriptionDelete();
        // TODO: test validations
    }

    /**
     * View the PushSubscription currently associated with this access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PushSubscriptionGetTest() throws ApiException {
        PushSubscription response = api.apiV1PushSubscriptionGet();
        // TODO: test validations
    }

    /**
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PushSubscriptionPostTest() throws ApiException {
        ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest = null;
        PushSubscription response = api.apiV1PushSubscriptionPost(apiV1PushSubscriptionPostRequest);
        // TODO: test validations
    }

    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1PushSubscriptionPutTest() throws ApiException {
        ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest = null;
        PushSubscription response = api.apiV1PushSubscriptionPut(apiV1PushSubscriptionPutRequest);
        // TODO: test validations
    }

    /**
     * File a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ReportsPostTest() throws ApiException {
        ApiV1ReportsPostRequest apiV1ReportsPostRequest = null;
        Report response = api.apiV1ReportsPost(apiV1ReportsPostRequest);
        // TODO: test validations
    }

    /**
     * View scheduled statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ScheduledStatusesGetTest() throws ApiException {
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<ScheduledStatus> response = api.apiV1ScheduledStatusesGet(limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * Cancel a scheduled status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ScheduledStatusesIdDeleteTest() throws ApiException {
        String id = null;
        Object response = api.apiV1ScheduledStatusesIdDelete(id);
        // TODO: test validations
    }

    /**
     * View a single scheduled status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ScheduledStatusesIdGetTest() throws ApiException {
        String id = null;
        ScheduledStatus response = api.apiV1ScheduledStatusesIdGet(id);
        // TODO: test validations
    }

    /**
     * View a single scheduled status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ScheduledStatusesIdPutTest() throws ApiException {
        String id = null;
        ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest = null;
        ScheduledStatus response = api.apiV1ScheduledStatusesIdPut(id, apiV1ScheduledStatusesIdPutRequest);
        // TODO: test validations
    }

    /**
     * Privately bookmark a status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdBookmarkPostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdBookmarkPost(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdContextGetTest() throws ApiException {
        String id = null;
        Context response = api.apiV1StatusesIdContextGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdDeleteTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdDelete(id);
        // TODO: test validations
    }

    /**
     * Add a status to your favourites list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdFavouritePostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdFavouritePost(id);
        // TODO: test validations
    }

    /**
     * View who favourited a given status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdFavouritedByGetTest() throws ApiException {
        String id = null;
        Account response = api.apiV1StatusesIdFavouritedByGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdGetTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdGet(id);
        // TODO: test validations
    }

    /**
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdMutePostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdMutePost(id);
        // TODO: test validations
    }

    /**
     * Feature one of your own public statuses at the top of your profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdPinPostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdPinPost(id);
        // TODO: test validations
    }

    /**
     * Reshare a status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdReblogPostTest() throws ApiException {
        String id = null;
        ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest = null;
        Status response = api.apiV1StatusesIdReblogPost(id, apiV1StatusesIdReblogPostRequest);
        // TODO: test validations
    }

    /**
     * View who boosted a given status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdRebloggedByGetTest() throws ApiException {
        String id = null;
        Account response = api.apiV1StatusesIdRebloggedByGet(id);
        // TODO: test validations
    }

    /**
     * Remove a status from your private bookmarks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdUnbookmarkPostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdUnbookmarkPost(id);
        // TODO: test validations
    }

    /**
     * Remove a status from your favourites list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdUnfavouritePostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdUnfavouritePost(id);
        // TODO: test validations
    }

    /**
     * Status&#39;s conversation unmuted, or was already unmuted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdUnmutePostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdUnmutePost(id);
        // TODO: test validations
    }

    /**
     * Unfeature a status from the top of your profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdUnpinPostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdUnpinPost(id);
        // TODO: test validations
    }

    /**
     * Undo a reshare of a status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesIdUnreblogPostTest() throws ApiException {
        String id = null;
        Status response = api.apiV1StatusesIdUnreblogPost(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1StatusesPostTest() throws ApiException {
        String idempotencyKey = null;
        List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner = null;
        ApiV1StatusesPost200Response response = api.apiV1StatusesPost(idempotencyKey, apiV1StatusesPostRequestInner);
        // TODO: test validations
    }

    /**
     * Accounts the user has had past positive interactions with, but is not yet following.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1SuggestionsGetTest() throws ApiException {
        Integer limit = null;
        Account response = api.apiV1SuggestionsGet(limit);
        // TODO: test validations
    }

    /**
     * Delete user suggestion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1SuggestionsIdDeleteTest() throws ApiException {
        String id = null;
        Object response = api.apiV1SuggestionsIdDelete(id);
        // TODO: test validations
    }

    /**
     * View statuses from followed users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1TimelinesHomeGetTest() throws ApiException {
        Boolean local = null;
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Status> response = api.apiV1TimelinesHomeGet(local, limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * View statuses in the given list timeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1TimelinesListListIdGetTest() throws ApiException {
        String listId = null;
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Status> response = api.apiV1TimelinesListListIdGet(listId, limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * Public timeline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1TimelinesPublicGetTest() throws ApiException {
        Boolean local = null;
        Boolean remote = null;
        Boolean onlyMedia = null;
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Status> response = api.apiV1TimelinesPublicGet(local, remote, onlyMedia, limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * View public statuses containing the given hashtag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1TimelinesTagHashtagGetTest() throws ApiException {
        String hashtag = null;
        Boolean local = null;
        Boolean remote = null;
        Boolean onlyMedia = null;
        Integer limit = null;
        String maxId = null;
        String sinceId = null;
        String minId = null;
        List<Status> response = api.apiV1TimelinesTagHashtagGet(hashtag, local, remote, onlyMedia, limit, maxId, sinceId, minId);
        // TODO: test validations
    }

    /**
     * Tags that are being used more frequently within the past week.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1TrendsGetTest() throws ApiException {
        Integer limit = null;
        List<Tag> response = api.apiV1TrendsGet(limit);
        // TODO: test validations
    }

    /**
     * Search results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SearchGetTest() throws ApiException {
        String q = null;
        Integer limit = null;
        String resolve = null;
        Boolean following = null;
        String accountId = null;
        String maxId = null;
        String minId = null;
        String type = null;
        Boolean excludeUnreviewed = null;
        Integer offset = null;
        ApiV2SearchGet200Response response = api.apiV2SearchGet(q, limit, resolve, following, accountId, maxId, minId, type, excludeUnreviewed, offset);
        // TODO: test validations
    }

}
