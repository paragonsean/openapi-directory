/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.OauthRevokePostRequest;
import org.openapitools.client.model.OauthTokenPost200Response;
import org.openapitools.client.model.OauthTokenPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OauthApi
 */
@Disabled
public class OauthApiTest {

    private final OauthApi api = new OauthApi();

    /**
     * Displays an authorization form to the user. If approved, it will create and return an authorization code, then redirect to the desired redirect_uri, or show the authorization code if urn:ietf:wg:oauth:2.0:oob was requested. The authorization code can be used while requesting a token to obtain access to user-level methods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthAuthorizeGetTest() throws ApiException {
        String responseType = null;
        String clientId = null;
        String redirectUri = null;
        String scope = null;
        Boolean forceLogin = null;
        api.oauthAuthorizeGet(responseType, clientId, redirectUri, scope, forceLogin);
        // TODO: test validations
    }

    /**
     * Revoke an access token to make it no longer valid for use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthRevokePostTest() throws ApiException {
        OauthRevokePostRequest oauthRevokePostRequest = null;
        api.oauthRevokePost(oauthRevokePostRequest);
        // TODO: test validations
    }

    /**
     * Returns an access token, to be used during API calls that are not public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthTokenPostTest() throws ApiException {
        OauthTokenPostRequest oauthTokenPostRequest = null;
        OauthTokenPost200Response response = api.oauthTokenPost(oauthTokenPostRequest);
        // TODO: test validations
    }

}
