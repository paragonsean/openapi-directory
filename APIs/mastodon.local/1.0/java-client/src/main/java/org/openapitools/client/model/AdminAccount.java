/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Account;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Admin-level information about a given account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminAccount {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY_APPLICATION_ID = "created_by_application_id";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_APPLICATION_ID)
  private String createdByApplicationId;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVITE_REQUEST = "invite_request";
  @SerializedName(SERIALIZED_NAME_INVITE_REQUEST)
  private String inviteRequest;

  public static final String SERIALIZED_NAME_INVITED_BY_ACCOUNT_ID = "invited_by_account_id";
  @SerializedName(SERIALIZED_NAME_INVITED_BY_ACCOUNT_ID)
  private String invitedByAccountId;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SILENCED = "silenced";
  @SerializedName(SERIALIZED_NAME_SILENCED)
  private Boolean silenced;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public AdminAccount() {
  }

  public AdminAccount account(Account account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }

  public void setAccount(Account account) {
    this.account = account;
  }


  public AdminAccount approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Whether the account is currently approved.
   * @return approved
   */
  @javax.annotation.Nullable
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public AdminAccount confirmed(Boolean confirmed) {
    this.confirmed = confirmed;
    return this;
  }

  /**
   * Whether the account has confirmed their email address.
   * @return confirmed
   */
  @javax.annotation.Nullable
  public Boolean getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public AdminAccount createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the account was first discovered.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AdminAccount createdByApplicationId(String createdByApplicationId) {
    this.createdByApplicationId = createdByApplicationId;
    return this;
  }

  /**
   * The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.
   * @return createdByApplicationId
   */
  @javax.annotation.Nullable
  public String getCreatedByApplicationId() {
    return createdByApplicationId;
  }

  public void setCreatedByApplicationId(String createdByApplicationId) {
    this.createdByApplicationId = createdByApplicationId;
  }


  public AdminAccount disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the account is currently disabled.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public AdminAccount email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address associated with the account.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AdminAccount id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AdminAccount inviteRequest(String inviteRequest) {
    this.inviteRequest = inviteRequest;
    return this;
  }

  /**
   * Invite request text ???
   * @return inviteRequest
   */
  @javax.annotation.Nullable
  public String getInviteRequest() {
    return inviteRequest;
  }

  public void setInviteRequest(String inviteRequest) {
    this.inviteRequest = inviteRequest;
  }


  public AdminAccount invitedByAccountId(String invitedByAccountId) {
    this.invitedByAccountId = invitedByAccountId;
    return this;
  }

  /**
   * The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.
   * @return invitedByAccountId
   */
  @javax.annotation.Nullable
  public String getInvitedByAccountId() {
    return invitedByAccountId;
  }

  public void setInvitedByAccountId(String invitedByAccountId) {
    this.invitedByAccountId = invitedByAccountId;
  }


  public AdminAccount ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The IP address last used to login to this account.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public AdminAccount locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The locale of the account. ISO 639 Part 1 two-letter language code.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AdminAccount role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The current role of the account. Enumerable oneOf.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public AdminAccount silenced(Boolean silenced) {
    this.silenced = silenced;
    return this;
  }

  /**
   * Whether the account is currently silenced.
   * @return silenced
   */
  @javax.annotation.Nullable
  public Boolean getSilenced() {
    return silenced;
  }

  public void setSilenced(Boolean silenced) {
    this.silenced = silenced;
  }


  public AdminAccount suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Whether the account is currently suspended.
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public AdminAccount username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of the account.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminAccount adminAccount = (AdminAccount) o;
    return Objects.equals(this.account, adminAccount.account) &&
        Objects.equals(this.approved, adminAccount.approved) &&
        Objects.equals(this.confirmed, adminAccount.confirmed) &&
        Objects.equals(this.createdAt, adminAccount.createdAt) &&
        Objects.equals(this.createdByApplicationId, adminAccount.createdByApplicationId) &&
        Objects.equals(this.disabled, adminAccount.disabled) &&
        Objects.equals(this.email, adminAccount.email) &&
        Objects.equals(this.id, adminAccount.id) &&
        Objects.equals(this.inviteRequest, adminAccount.inviteRequest) &&
        Objects.equals(this.invitedByAccountId, adminAccount.invitedByAccountId) &&
        Objects.equals(this.ip, adminAccount.ip) &&
        Objects.equals(this.locale, adminAccount.locale) &&
        Objects.equals(this.role, adminAccount.role) &&
        Objects.equals(this.silenced, adminAccount.silenced) &&
        Objects.equals(this.suspended, adminAccount.suspended) &&
        Objects.equals(this.username, adminAccount.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, approved, confirmed, createdAt, createdByApplicationId, disabled, email, id, inviteRequest, invitedByAccountId, ip, locale, role, silenced, suspended, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminAccount {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdByApplicationId: ").append(toIndentedString(createdByApplicationId)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteRequest: ").append(toIndentedString(inviteRequest)).append("\n");
    sb.append("    invitedByAccountId: ").append(toIndentedString(invitedByAccountId)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    silenced: ").append(toIndentedString(silenced)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("approved");
    openapiFields.add("confirmed");
    openapiFields.add("created_at");
    openapiFields.add("created_by_application_id");
    openapiFields.add("disabled");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("invite_request");
    openapiFields.add("invited_by_account_id");
    openapiFields.add("ip");
    openapiFields.add("locale");
    openapiFields.add("role");
    openapiFields.add("silenced");
    openapiFields.add("suspended");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminAccount is not found in the empty JSON string", AdminAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("created_by_application_id") != null && !jsonObj.get("created_by_application_id").isJsonNull()) && !jsonObj.get("created_by_application_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by_application_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by_application_id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invite_request") != null && !jsonObj.get("invite_request").isJsonNull()) && !jsonObj.get("invite_request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_request").toString()));
      }
      if ((jsonObj.get("invited_by_account_id") != null && !jsonObj.get("invited_by_account_id").isJsonNull()) && !jsonObj.get("invited_by_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invited_by_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invited_by_account_id").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminAccount>() {
           @Override
           public void write(JsonWriter out, AdminAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminAccount
   * @throws IOException if the JSON string is invalid with respect to AdminAccount
   */
  public static AdminAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminAccount.class);
  }

  /**
   * Convert an instance of AdminAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

