/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a custom emoji.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Emoji {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_SHORTCODE = "shortcode";
  @SerializedName(SERIALIZED_NAME_SHORTCODE)
  private String shortcode;

  public static final String SERIALIZED_NAME_STATIC_URL = "static_url";
  @SerializedName(SERIALIZED_NAME_STATIC_URL)
  private String staticUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VISIBLE_IN_PICKER = "visible_in_picker";
  @SerializedName(SERIALIZED_NAME_VISIBLE_IN_PICKER)
  private Boolean visibleInPicker;

  public Emoji() {
  }

  public Emoji category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Used for sorting custom emoji in the picker.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Emoji shortcode(String shortcode) {
    this.shortcode = shortcode;
    return this;
  }

  /**
   * The name of the custom emoji.
   * @return shortcode
   */
  @javax.annotation.Nonnull
  public String getShortcode() {
    return shortcode;
  }

  public void setShortcode(String shortcode) {
    this.shortcode = shortcode;
  }


  public Emoji staticUrl(String staticUrl) {
    this.staticUrl = staticUrl;
    return this;
  }

  /**
   * A link to a static copy of the custom emoji. The format is URL.
   * @return staticUrl
   */
  @javax.annotation.Nonnull
  public String getStaticUrl() {
    return staticUrl;
  }

  public void setStaticUrl(String staticUrl) {
    this.staticUrl = staticUrl;
  }


  public Emoji url(String url) {
    this.url = url;
    return this;
  }

  /**
   * A link to the custom emoji. The format is URL.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Emoji visibleInPicker(Boolean visibleInPicker) {
    this.visibleInPicker = visibleInPicker;
    return this;
  }

  /**
   * Whether this Emoji should be visible in the picker or unlisted.
   * @return visibleInPicker
   */
  @javax.annotation.Nonnull
  public Boolean getVisibleInPicker() {
    return visibleInPicker;
  }

  public void setVisibleInPicker(Boolean visibleInPicker) {
    this.visibleInPicker = visibleInPicker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emoji emoji = (Emoji) o;
    return Objects.equals(this.category, emoji.category) &&
        Objects.equals(this.shortcode, emoji.shortcode) &&
        Objects.equals(this.staticUrl, emoji.staticUrl) &&
        Objects.equals(this.url, emoji.url) &&
        Objects.equals(this.visibleInPicker, emoji.visibleInPicker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, shortcode, staticUrl, url, visibleInPicker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emoji {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    shortcode: ").append(toIndentedString(shortcode)).append("\n");
    sb.append("    staticUrl: ").append(toIndentedString(staticUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    visibleInPicker: ").append(toIndentedString(visibleInPicker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("shortcode");
    openapiFields.add("static_url");
    openapiFields.add("url");
    openapiFields.add("visible_in_picker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shortcode");
    openapiRequiredFields.add("static_url");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("visible_in_picker");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Emoji
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Emoji.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Emoji is not found in the empty JSON string", Emoji.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Emoji.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Emoji` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Emoji.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("shortcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortcode").toString()));
      }
      if (!jsonObj.get("static_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `static_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("static_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Emoji.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Emoji' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Emoji> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Emoji.class));

       return (TypeAdapter<T>) new TypeAdapter<Emoji>() {
           @Override
           public void write(JsonWriter out, Emoji value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Emoji read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Emoji given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Emoji
   * @throws IOException if the JSON string is invalid with respect to Emoji
   */
  public static Emoji fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Emoji.class);
  }

  /**
   * Convert an instance of Emoji to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

