/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiV1StatusesPostRequestInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiV1StatusesPostRequestInner {
  public static final String SERIALIZED_NAME_IN_REPLY_TO_ID = "in_reply_to_id";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO_ID)
  private String inReplyToId;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MEDIA_IDS = "media_ids";
  @SerializedName(SERIALIZED_NAME_MEDIA_IDS)
  private List<String> mediaIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLL = "poll";
  @SerializedName(SERIALIZED_NAME_POLL)
  private Map<Object> poll = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_AT = "scheduled_at";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_AT)
  private String scheduledAt;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private Boolean sensitive;

  public static final String SERIALIZED_NAME_SPOILER_TEXT = "spoiler_text";
  @SerializedName(SERIALIZED_NAME_SPOILER_TEXT)
  private String spoilerText;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  /**
   * Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("public"),
    
    UNLISTED("unlisted"),
    
    PRIVATE("private"),
    
    DIRECT("direct");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public ApiV1StatusesPostRequestInner() {
  }

  public ApiV1StatusesPostRequestInner inReplyToId(String inReplyToId) {
    this.inReplyToId = inReplyToId;
    return this;
  }

  /**
   * ID of the status being replied to, if status is a reply
   * @return inReplyToId
   */
  @javax.annotation.Nullable
  public String getInReplyToId() {
    return inReplyToId;
  }

  public void setInReplyToId(String inReplyToId) {
    this.inReplyToId = inReplyToId;
  }


  public ApiV1StatusesPostRequestInner language(String language) {
    this.language = language;
    return this;
  }

  /**
   * ISO 639 language code for this status.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public ApiV1StatusesPostRequestInner mediaIds(List<String> mediaIds) {
    this.mediaIds = mediaIds;
    return this;
  }

  public ApiV1StatusesPostRequestInner addMediaIdsItem(String mediaIdsItem) {
    if (this.mediaIds == null) {
      this.mediaIds = new ArrayList<>();
    }
    this.mediaIds.add(mediaIdsItem);
    return this;
  }

  /**
   * Array of Attachment ids to be attached as media. If provided, &#x60;status&#x60; becomes optional, and &#x60;poll&#x60; cannot be used.
   * @return mediaIds
   */
  @javax.annotation.Nullable
  public List<String> getMediaIds() {
    return mediaIds;
  }

  public void setMediaIds(List<String> mediaIds) {
    this.mediaIds = mediaIds;
  }


  public ApiV1StatusesPostRequestInner poll(Map<Object> poll) {
    this.poll = poll;
    return this;
  }

  public ApiV1StatusesPostRequestInner addPollItem(Object pollItem) {
    if (this.poll == null) {
      this.poll = new ArrayList<>();
    }
    this.poll.add(pollItem);
    return this;
  }

  /**
   * Get poll
   * @return poll
   */
  @javax.annotation.Nullable
  public Map<Object> getPoll() {
    return poll;
  }

  public void setPoll(Map<Object> poll) {
    this.poll = poll;
  }


  public ApiV1StatusesPostRequestInner scheduledAt(String scheduledAt) {
    this.scheduledAt = scheduledAt;
    return this;
  }

  /**
   * ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.
   * @return scheduledAt
   */
  @javax.annotation.Nullable
  public String getScheduledAt() {
    return scheduledAt;
  }

  public void setScheduledAt(String scheduledAt) {
    this.scheduledAt = scheduledAt;
  }


  public ApiV1StatusesPostRequestInner sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  /**
   * Mark status and attached media as sensitive?
   * @return sensitive
   */
  @javax.annotation.Nullable
  public Boolean getSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }


  public ApiV1StatusesPostRequestInner spoilerText(String spoilerText) {
    this.spoilerText = spoilerText;
    return this;
  }

  /**
   * Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.
   * @return spoilerText
   */
  @javax.annotation.Nullable
  public String getSpoilerText() {
    return spoilerText;
  }

  public void setSpoilerText(String spoilerText) {
    this.spoilerText = spoilerText;
  }


  public ApiV1StatusesPostRequestInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Text content of the status. If &#x60;media_ids&#x60; is provided, this becomes optional. Attaching a &#x60;poll&#x60; is optional while &#x60;status&#x60; is provided.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ApiV1StatusesPostRequestInner visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiV1StatusesPostRequestInner apiV1StatusesPostRequestInner = (ApiV1StatusesPostRequestInner) o;
    return Objects.equals(this.inReplyToId, apiV1StatusesPostRequestInner.inReplyToId) &&
        Objects.equals(this.language, apiV1StatusesPostRequestInner.language) &&
        Objects.equals(this.mediaIds, apiV1StatusesPostRequestInner.mediaIds) &&
        Objects.equals(this.poll, apiV1StatusesPostRequestInner.poll) &&
        Objects.equals(this.scheduledAt, apiV1StatusesPostRequestInner.scheduledAt) &&
        Objects.equals(this.sensitive, apiV1StatusesPostRequestInner.sensitive) &&
        Objects.equals(this.spoilerText, apiV1StatusesPostRequestInner.spoilerText) &&
        Objects.equals(this.status, apiV1StatusesPostRequestInner.status) &&
        Objects.equals(this.visibility, apiV1StatusesPostRequestInner.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inReplyToId, language, mediaIds, poll, scheduledAt, sensitive, spoilerText, status, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiV1StatusesPostRequestInner {\n");
    sb.append("    inReplyToId: ").append(toIndentedString(inReplyToId)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    mediaIds: ").append(toIndentedString(mediaIds)).append("\n");
    sb.append("    poll: ").append(toIndentedString(poll)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    spoilerText: ").append(toIndentedString(spoilerText)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in_reply_to_id");
    openapiFields.add("language");
    openapiFields.add("media_ids");
    openapiFields.add("poll");
    openapiFields.add("scheduled_at");
    openapiFields.add("sensitive");
    openapiFields.add("spoiler_text");
    openapiFields.add("status");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiV1StatusesPostRequestInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiV1StatusesPostRequestInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiV1StatusesPostRequestInner is not found in the empty JSON string", ApiV1StatusesPostRequestInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiV1StatusesPostRequestInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiV1StatusesPostRequestInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("in_reply_to_id") != null && !jsonObj.get("in_reply_to_id").isJsonNull()) && !jsonObj.get("in_reply_to_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_reply_to_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_reply_to_id").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("media_ids") != null && !jsonObj.get("media_ids").isJsonNull() && !jsonObj.get("media_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_ids` to be an array in the JSON string but got `%s`", jsonObj.get("media_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("poll") != null && !jsonObj.get("poll").isJsonNull() && !jsonObj.get("poll").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `poll` to be an array in the JSON string but got `%s`", jsonObj.get("poll").toString()));
      }
      if ((jsonObj.get("scheduled_at") != null && !jsonObj.get("scheduled_at").isJsonNull()) && !jsonObj.get("scheduled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_at").toString()));
      }
      if ((jsonObj.get("spoiler_text") != null && !jsonObj.get("spoiler_text").isJsonNull()) && !jsonObj.get("spoiler_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoiler_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spoiler_text").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiV1StatusesPostRequestInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiV1StatusesPostRequestInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiV1StatusesPostRequestInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiV1StatusesPostRequestInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiV1StatusesPostRequestInner>() {
           @Override
           public void write(JsonWriter out, ApiV1StatusesPostRequestInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiV1StatusesPostRequestInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiV1StatusesPostRequestInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiV1StatusesPostRequestInner
   * @throws IOException if the JSON string is invalid with respect to ApiV1StatusesPostRequestInner
   */
  public static ApiV1StatusesPostRequestInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiV1StatusesPostRequestInner.class);
  }

  /**
   * Convert an instance of ApiV1StatusesPostRequestInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

