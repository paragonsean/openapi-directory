/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.ApiV1AccountsIdFollowPostRequest;
import org.openapitools.client.model.ApiV1AccountsIdMutePostRequest;
import org.openapitools.client.model.ApiV1AccountsIdNotePostRequest;
import org.openapitools.client.model.ApiV1AccountsPostRequest;
import org.openapitools.client.model.ApiV1AccountsUpdateCredentialsPatchRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeaturedTag;
import org.openapitools.client.model.IdentityProof;
import org.openapitools.client.model.ModelList;
import org.openapitools.client.model.Relationship;
import org.openapitools.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1AccountsIdBlockPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully blocked, or account was already blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdBlockPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdBlockPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdBlockPost(Async)");
        }

        return apiV1AccountsIdBlockPostCall(id, _callback);

    }

    /**
     * 
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully blocked, or account was already blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdBlockPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdBlockPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully blocked, or account was already blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdBlockPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdBlockPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully blocked, or account was already blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdBlockPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdBlockPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdFeaturedTagsGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFeaturedTagsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/featured_tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdFeaturedTagsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdFeaturedTagsGet(Async)");
        }

        return apiV1AccountsIdFeaturedTagsGetCall(id, _callback);

    }

    /**
     * 
     * Tags featured by this account.
     * @param id The id of the account in the database (required)
     * @return List&lt;FeaturedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
     </table>
     */
    public List<FeaturedTag> apiV1AccountsIdFeaturedTagsGet(String id) throws ApiException {
        ApiResponse<List<FeaturedTag>> localVarResp = apiV1AccountsIdFeaturedTagsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Tags featured by this account.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;List&lt;FeaturedTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeaturedTag>> apiV1AccountsIdFeaturedTagsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdFeaturedTagsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tags featured by this account.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFeaturedTagsGetAsync(String id, final ApiCallback<List<FeaturedTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdFeaturedTagsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdFollowPost
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdFollowPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully followed, or account was already followed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Trying to follow someone that you block or that blocks you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowPostCall(String id, ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AccountsIdFollowPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/follow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdFollowPostValidateBeforeCall(String id, ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdFollowPost(Async)");
        }

        return apiV1AccountsIdFollowPostCall(id, apiV1AccountsIdFollowPostRequest, _callback);

    }

    /**
     * 
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdFollowPostRequest  (optional)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully followed, or account was already followed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Trying to follow someone that you block or that blocks you </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdFollowPost(String id, ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdFollowPostWithHttpInfo(id, apiV1AccountsIdFollowPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdFollowPostRequest  (optional)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully followed, or account was already followed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Trying to follow someone that you block or that blocks you </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdFollowPostWithHttpInfo(String id, ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdFollowPostValidateBeforeCall(id, apiV1AccountsIdFollowPostRequest, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdFollowPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully followed, or account was already followed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Trying to follow someone that you block or that blocks you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowPostAsync(String id, ApiV1AccountsIdFollowPostRequest apiV1AccountsIdFollowPostRequest, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdFollowPostValidateBeforeCall(id, apiV1AccountsIdFollowPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdFollowersGet
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowersGetCall(String id, String maxId, String sinceId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/followers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdFollowersGetValidateBeforeCall(String id, String maxId, String sinceId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdFollowersGet(Async)");
        }

        return apiV1AccountsIdFollowersGetCall(id, maxId, sinceId, limit, _callback);

    }

    /**
     * 
     * Accounts which follow the given account, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1AccountsIdFollowersGet(String id, String maxId, String sinceId, Integer limit) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1AccountsIdFollowersGetWithHttpInfo(id, maxId, sinceId, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Accounts which follow the given account, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1AccountsIdFollowersGetWithHttpInfo(String id, String maxId, String sinceId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdFollowersGetValidateBeforeCall(id, maxId, sinceId, limit, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accounts which follow the given account, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowersGetAsync(String id, String maxId, String sinceId, Integer limit, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdFollowersGetValidateBeforeCall(id, maxId, sinceId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdFollowingGet
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowingGetCall(String id, String maxId, String sinceId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/following"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdFollowingGetValidateBeforeCall(String id, String maxId, String sinceId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdFollowingGet(Async)");
        }

        return apiV1AccountsIdFollowingGetCall(id, maxId, sinceId, limit, _callback);

    }

    /**
     * 
     * Accounts which the given account is following, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1AccountsIdFollowingGet(String id, String maxId, String sinceId, Integer limit) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1AccountsIdFollowingGetWithHttpInfo(id, maxId, sinceId, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Accounts which the given account is following, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1AccountsIdFollowingGetWithHttpInfo(String id, String maxId, String sinceId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdFollowingGetValidateBeforeCall(id, maxId, sinceId, limit, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accounts which the given account is following, if network is not hidden by the account owner.
     * @param id The id of the account in the database (required)
     * @param maxId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param sinceId Internal parameter. Use HTTP &#x60;Link&#x60; header for pagination. (optional)
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdFollowingGetAsync(String id, String maxId, String sinceId, Integer limit, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdFollowingGetValidateBeforeCall(id, maxId, sinceId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the instance is in whitelist mode and the Authorization header is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdGet(Async)");
        }

        return apiV1AccountsIdGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id The id of the account in the database (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the instance is in whitelist mode and the Authorization header is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1AccountsIdGet(String id) throws ApiException {
        ApiResponse<Account> localVarResp = apiV1AccountsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the instance is in whitelist mode and the Authorization header is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1AccountsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account record will be returned. Note that &#x60;acct&#x60; of local users does not include the domain name. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the instance is in whitelist mode and the Authorization header is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdGetAsync(String id, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdIdentityProofsGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account with given id is suspended </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdIdentityProofsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/identity_proofs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdIdentityProofsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdIdentityProofsGet(Async)");
        }

        return apiV1AccountsIdIdentityProofsGetCall(id, _callback);

    }

    /**
     * 
     * Array of IdentityProof
     * @param id The id of the account in the database (required)
     * @return List&lt;IdentityProof&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account with given id is suspended </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentityProof> apiV1AccountsIdIdentityProofsGet(String id) throws ApiException {
        ApiResponse<List<IdentityProof>> localVarResp = apiV1AccountsIdIdentityProofsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Array of IdentityProof
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;List&lt;IdentityProof&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account with given id is suspended </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentityProof>> apiV1AccountsIdIdentityProofsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdIdentityProofsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<IdentityProof>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Array of IdentityProof
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account with given id is suspended </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdIdentityProofsGetAsync(String id, final ApiCallback<List<IdentityProof>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdIdentityProofsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<IdentityProof>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdListsGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdListsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/lists"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdListsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdListsGet(Async)");
        }

        return apiV1AccountsIdListsGetCall(id, _callback);

    }

    /**
     * 
     * User lists that you have added this account to.
     * @param id The id of the account in the database (required)
     * @return List&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelList> apiV1AccountsIdListsGet(String id) throws ApiException {
        ApiResponse<List<ModelList>> localVarResp = apiV1AccountsIdListsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * User lists that you have added this account to.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;List&lt;ModelList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelList>> apiV1AccountsIdListsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdListsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<ModelList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * User lists that you have added this account to.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header, or instance is in whitelist mode and your token is not authorized with a user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdListsGetAsync(String id, final ApiCallback<List<ModelList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdListsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<ModelList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdMutePost
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdMutePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdMutePostCall(String id, ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AccountsIdMutePostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/mute"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdMutePostValidateBeforeCall(String id, ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdMutePost(Async)");
        }

        return apiV1AccountsIdMutePostCall(id, apiV1AccountsIdMutePostRequest, _callback);

    }

    /**
     * 
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdMutePostRequest  (optional)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdMutePost(String id, ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdMutePostWithHttpInfo(id, apiV1AccountsIdMutePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdMutePostRequest  (optional)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdMutePostWithHttpInfo(String id, ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdMutePostValidateBeforeCall(id, apiV1AccountsIdMutePostRequest, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdMutePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully muted, or account was already muted. Note that you can call this API method again with notifications&#x3D;false to update the relationship so that only statuses are muted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdMutePostAsync(String id, ApiV1AccountsIdMutePostRequest apiV1AccountsIdMutePostRequest, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdMutePostValidateBeforeCall(id, apiV1AccountsIdMutePostRequest, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdNotePost
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdNotePostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdNotePostCall(String id, ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AccountsIdNotePostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/note"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdNotePostValidateBeforeCall(String id, ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdNotePost(Async)");
        }

        return apiV1AccountsIdNotePostCall(id, apiV1AccountsIdNotePostRequest, _callback);

    }

    /**
     * 
     * Sets a private note on a user.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdNotePostRequest  (optional)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdNotePost(String id, ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdNotePostWithHttpInfo(id, apiV1AccountsIdNotePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets a private note on a user.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdNotePostRequest  (optional)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdNotePostWithHttpInfo(String id, ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdNotePostValidateBeforeCall(id, apiV1AccountsIdNotePostRequest, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets a private note on a user.
     * @param id The id of the account in the database (required)
     * @param apiV1AccountsIdNotePostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdNotePostAsync(String id, ApiV1AccountsIdNotePostRequest apiV1AccountsIdNotePostRequest, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdNotePostValidateBeforeCall(id, apiV1AccountsIdNotePostRequest, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdPinPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token is not authorized with a valid user or is missing a required scope </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You are not following this account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Account already endorsed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdPinPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/pin"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdPinPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdPinPost(Async)");
        }

        return apiV1AccountsIdPinPostCall(id, _callback);

    }

    /**
     * 
     * Add the given account to the user&#39;s featured profiles. (Featured profiles are currently shown on the user&#39;s own public profile.)
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token is not authorized with a valid user or is missing a required scope </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You are not following this account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Account already endorsed </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdPinPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdPinPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Add the given account to the user&#39;s featured profiles. (Featured profiles are currently shown on the user&#39;s own public profile.)
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token is not authorized with a valid user or is missing a required scope </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You are not following this account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Account already endorsed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdPinPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdPinPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add the given account to the user&#39;s featured profiles. (Featured profiles are currently shown on the user&#39;s own public profile.)
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Token is not authorized with a valid user or is missing a required scope </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You are not following this account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Account already endorsed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdPinPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdPinPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdStatusesGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdStatusesGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/statuses"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdStatusesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdStatusesGet(Async)");
        }

        return apiV1AccountsIdStatusesGetCall(id, _callback);

    }

    /**
     * 
     * Statuses posted to the given account.
     * @param id The id of the account in the database (required)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1AccountsIdStatusesGet(String id) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1AccountsIdStatusesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Statuses posted to the given account.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1AccountsIdStatusesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdStatusesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Statuses posted to the given account.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses posted to the given account. Public (for public statuses only), or user token + read:statuses (for private statuses the user is authorized to see) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Instance is in whitelist mode or running a version of Mastodon older than 2.7.0, and the Authorization header is invalid or missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account is deleted or does not exist </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Account is suspended </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdStatusesGetAsync(String id, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdStatusesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdUnblockPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unblocked, or account was already not blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnblockPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/unblock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdUnblockPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdUnblockPost(Async)");
        }

        return apiV1AccountsIdUnblockPostCall(id, _callback);

    }

    /**
     * 
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unblocked, or account was already not blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdUnblockPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdUnblockPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unblocked, or account was already not blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdUnblockPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdUnblockPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unblocked, or account was already not blocked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnblockPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdUnblockPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdUnfollowPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unfollowed, or account was already not followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnfollowPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/unfollow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdUnfollowPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdUnfollowPost(Async)");
        }

        return apiV1AccountsIdUnfollowPostCall(id, _callback);

    }

    /**
     * 
     * Unfollow the given account.
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unfollowed, or account was already not followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdUnfollowPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdUnfollowPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Unfollow the given account.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unfollowed, or account was already not followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdUnfollowPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdUnfollowPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unfollow the given account.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unfollowed, or account was already not followed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnfollowPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdUnfollowPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdUnmutePost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnmutePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/unmute"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdUnmutePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdUnmutePost(Async)");
        }

        return apiV1AccountsIdUnmutePostCall(id, _callback);

    }

    /**
     * 
     * Unmute the given account.
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdUnmutePost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdUnmutePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Unmute the given account.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdUnmutePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdUnmutePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unmute the given account.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnmutePostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdUnmutePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsIdUnpinPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnpinPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/{id}/unpin"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsIdUnpinPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsIdUnpinPost(Async)");
        }

        return apiV1AccountsIdUnpinPostCall(id, _callback);

    }

    /**
     * 
     * Remove the given account from the user&#39;s featured profiles.
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1AccountsIdUnpinPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1AccountsIdUnpinPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove the given account from the user&#39;s featured profiles.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1AccountsIdUnpinPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsIdUnpinPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove the given account from the user&#39;s featured profiles.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully unmuted, or account was already unmuted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsIdUnpinPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsIdUnpinPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsPost_0
     * @param apiV1AccountsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsPost_0Call(ApiV1AccountsPostRequest apiV1AccountsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AccountsPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsPost_0ValidateBeforeCall(ApiV1AccountsPostRequest apiV1AccountsPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1AccountsPost_0Call(apiV1AccountsPostRequest, _callback);

    }

    /**
     * 
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     * @param apiV1AccountsPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AccountsPost_0(ApiV1AccountsPostRequest apiV1AccountsPostRequest) throws ApiException {
        apiV1AccountsPost_0WithHttpInfo(apiV1AccountsPostRequest);
    }

    /**
     * 
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     * @param apiV1AccountsPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AccountsPost_0WithHttpInfo(ApiV1AccountsPostRequest apiV1AccountsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsPost_0ValidateBeforeCall(apiV1AccountsPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     * @param apiV1AccountsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsPost_0Async(ApiV1AccountsPostRequest apiV1AccountsPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsPost_0ValidateBeforeCall(apiV1AccountsPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsRelationshipsGet
     * @param id Array of account IDs to check (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsRelationshipsGetCall(List<String> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/relationships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsRelationshipsGetValidateBeforeCall(List<String> id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AccountsRelationshipsGet(Async)");
        }

        return apiV1AccountsRelationshipsGetCall(id, _callback);

    }

    /**
     * 
     * Sets a private note on a user.
     * @param id Array of account IDs to check (required)
     * @return List&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public List<Relationship> apiV1AccountsRelationshipsGet(List<String> id) throws ApiException {
        ApiResponse<List<Relationship>> localVarResp = apiV1AccountsRelationshipsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets a private note on a user.
     * @param id Array of account IDs to check (required)
     * @return ApiResponse&lt;List&lt;Relationship&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Relationship>> apiV1AccountsRelationshipsGetWithHttpInfo(List<String> id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsRelationshipsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Relationship>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets a private note on a user.
     * @param id Array of account IDs to check (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsRelationshipsGetAsync(List<String> id, final ApiCallback<List<Relationship>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsRelationshipsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Relationship>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsSearchGet
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 40)
     * @param resolve Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts matching &#x60;q&#x60; in username or display name </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsSearchGetCall(String q, Integer limit, String resolve, Boolean following, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (resolve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolve", resolve));
        }

        if (following != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("following", following));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsSearchGetValidateBeforeCall(String q, Integer limit, String resolve, Boolean following, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling apiV1AccountsSearchGet(Async)");
        }

        return apiV1AccountsSearchGetCall(q, limit, resolve, following, _callback);

    }

    /**
     * 
     * Search for matching accounts by username or display name.
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 40)
     * @param resolve Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts matching &#x60;q&#x60; in username or display name </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1AccountsSearchGet(String q, Integer limit, String resolve, Boolean following) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1AccountsSearchGetWithHttpInfo(q, limit, resolve, following);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for matching accounts by username or display name.
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 40)
     * @param resolve Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts matching &#x60;q&#x60; in username or display name </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1AccountsSearchGetWithHttpInfo(String q, Integer limit, String resolve, Boolean following) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsSearchGetValidateBeforeCall(q, limit, resolve, following, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for matching accounts by username or display name.
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 40)
     * @param resolve Attempt WebFinger lookup. Defaults to false. Use this when &#x60;q&#x60; is an exact address. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts matching &#x60;q&#x60; in username or display name </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> resolve&#x3D;true, but the domain part of the user@domain address is not a currently live website </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsSearchGetAsync(String q, Integer limit, String resolve, Boolean following, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsSearchGetValidateBeforeCall(q, limit, resolve, following, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsUpdateCredentialsPatch
     * @param apiV1AccountsUpdateCredentialsPatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsUpdateCredentialsPatchCall(ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AccountsUpdateCredentialsPatchRequest;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/update_credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsUpdateCredentialsPatchValidateBeforeCall(ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest, final ApiCallback _callback) throws ApiException {
        return apiV1AccountsUpdateCredentialsPatchCall(apiV1AccountsUpdateCredentialsPatchRequest, _callback);

    }

    /**
     * 
     * Update the user&#39;s display and preferences.
     * @param apiV1AccountsUpdateCredentialsPatchRequest  (optional)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1AccountsUpdateCredentialsPatch(ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest) throws ApiException {
        ApiResponse<Account> localVarResp = apiV1AccountsUpdateCredentialsPatchWithHttpInfo(apiV1AccountsUpdateCredentialsPatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the user&#39;s display and preferences.
     * @param apiV1AccountsUpdateCredentialsPatchRequest  (optional)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1AccountsUpdateCredentialsPatchWithHttpInfo(ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsUpdateCredentialsPatchValidateBeforeCall(apiV1AccountsUpdateCredentialsPatchRequest, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the user&#39;s display and preferences.
     * @param apiV1AccountsUpdateCredentialsPatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You should use &#x60;accounts/verify_credentials&#x60; to first obtain plaintext representations from within the &#x60;source&#x60; parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsUpdateCredentialsPatchAsync(ApiV1AccountsUpdateCredentialsPatchRequest apiV1AccountsUpdateCredentialsPatchRequest, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsUpdateCredentialsPatchValidateBeforeCall(apiV1AccountsUpdateCredentialsPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AccountsVerifyCredentialsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your credential verification will fail if the token is invalid or incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your user account is currently disabled, missing a confirmed email address, or pending approval. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsVerifyCredentialsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/accounts/verify_credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AccountsVerifyCredentialsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1AccountsVerifyCredentialsGetCall(_callback);

    }

    /**
     * 
     * Test to make sure that the user token works.
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your credential verification will fail if the token is invalid or incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your user account is currently disabled, missing a confirmed email address, or pending approval. </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1AccountsVerifyCredentialsGet() throws ApiException {
        ApiResponse<Account> localVarResp = apiV1AccountsVerifyCredentialsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Test to make sure that the user token works.
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your credential verification will fail if the token is invalid or incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your user account is currently disabled, missing a confirmed email address, or pending approval. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1AccountsVerifyCredentialsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1AccountsVerifyCredentialsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Test to make sure that the user token works.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Note the extra &#x60;source&#x60; property, which is not visible on accounts other than your own. Also note that plain-text is used within &#x60;source&#x60; and HTML is used for their corresponding properties such as &#x60;note&#x60; and &#x60;fields&#x60;. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your credential verification will fail if the token is invalid or incorrect. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Your user account is currently disabled, missing a confirmed email address, or pending approval. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AccountsVerifyCredentialsGetAsync(final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AccountsVerifyCredentialsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
