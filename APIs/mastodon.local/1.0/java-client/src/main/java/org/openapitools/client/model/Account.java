/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Emoji;
import org.openapitools.client.model.Field;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a user of Mastodon and their associated profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCT = "acct";
  @SerializedName(SERIALIZED_NAME_ACCT)
  private String acct;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_AVATAR_STATIC = "avatar_static";
  @SerializedName(SERIALIZED_NAME_AVATAR_STATIC)
  private String avatarStatic;

  public static final String SERIALIZED_NAME_BOT = "bot";
  @SerializedName(SERIALIZED_NAME_BOT)
  private Boolean bot;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISCOVERABLE = "discoverable";
  @SerializedName(SERIALIZED_NAME_DISCOVERABLE)
  private Boolean discoverable;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMOJIS = "emojis";
  @SerializedName(SERIALIZED_NAME_EMOJIS)
  private List<Emoji> emojis = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<Field> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOLLOWERS_COUNT = "followers_count";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS_COUNT)
  private Integer followersCount;

  public static final String SERIALIZED_NAME_FOLLOWING_COUNT = "following_count";
  @SerializedName(SERIALIZED_NAME_FOLLOWING_COUNT)
  private Integer followingCount;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_HEADER_STATIC = "header_static";
  @SerializedName(SERIALIZED_NAME_HEADER_STATIC)
  private String headerStatic;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_STATUS_AT = "last_status_at";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_AT)
  private OffsetDateTime lastStatusAt;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MOVED = "moved";
  @SerializedName(SERIALIZED_NAME_MOVED)
  private Account moved;

  public static final String SERIALIZED_NAME_MUTE_EXPIRES_AT = "mute_expires_at";
  @SerializedName(SERIALIZED_NAME_MUTE_EXPIRES_AT)
  private OffsetDateTime muteExpiresAt;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_STATUSES_COUNT = "statuses_count";
  @SerializedName(SERIALIZED_NAME_STATUSES_COUNT)
  private Integer statusesCount;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public Account() {
  }

  public Account acct(String acct) {
    this.acct = acct;
    return this;
  }

  /**
   * The Webfinger account URI. Equal to &#x60;username&#x60; for local users, or &#x60;username@domain&#x60; for
   * @return acct
   */
  @javax.annotation.Nullable
  public String getAcct() {
    return acct;
  }

  public void setAcct(String acct) {
    this.acct = acct;
  }


  public Account avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * An image icon that is shown next to statuses and in the profile. The format is URL.
   * @return avatar
   */
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public Account avatarStatic(String avatarStatic) {
    this.avatarStatic = avatarStatic;
    return this;
  }

  /**
   * A static version of the avatar. Equal to &#x60;avatar&#x60; if its value is a static image; different if &#x60;avatar&#x60; is an animated GIF. The format is URL.
   * @return avatarStatic
   */
  @javax.annotation.Nullable
  public String getAvatarStatic() {
    return avatarStatic;
  }

  public void setAvatarStatic(String avatarStatic) {
    this.avatarStatic = avatarStatic;
  }


  public Account bot(Boolean bot) {
    this.bot = bot;
    return this;
  }

  /**
   * A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
   * @return bot
   */
  @javax.annotation.Nullable
  public Boolean getBot() {
    return bot;
  }

  public void setBot(Boolean bot) {
    this.bot = bot;
  }


  public Account createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the account was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Account discoverable(Boolean discoverable) {
    this.discoverable = discoverable;
    return this;
  }

  /**
   * Whether the account has opted into discovery features such as the profile directory.
   * @return discoverable
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverable() {
    return discoverable;
  }

  public void setDiscoverable(Boolean discoverable) {
    this.discoverable = discoverable;
  }


  public Account displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The profile&#39;s display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Account emojis(List<Emoji> emojis) {
    this.emojis = emojis;
    return this;
  }

  public Account addEmojisItem(Emoji emojisItem) {
    if (this.emojis == null) {
      this.emojis = new ArrayList<>();
    }
    this.emojis.add(emojisItem);
    return this;
  }

  /**
   * Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.
   * @return emojis
   */
  @javax.annotation.Nullable
  public List<Emoji> getEmojis() {
    return emojis;
  }

  public void setEmojis(List<Emoji> emojis) {
    this.emojis = emojis;
  }


  public Account fields(List<Field> fields) {
    this.fields = fields;
    return this;
  }

  public Account addFieldsItem(Field fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Additional metadata attached to a profile as name-value pairs.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<Field> getFields() {
    return fields;
  }

  public void setFields(List<Field> fields) {
    this.fields = fields;
  }


  public Account followersCount(Integer followersCount) {
    this.followersCount = followersCount;
    return this;
  }

  /**
   * The reported followers of this profile.
   * @return followersCount
   */
  @javax.annotation.Nullable
  public Integer getFollowersCount() {
    return followersCount;
  }

  public void setFollowersCount(Integer followersCount) {
    this.followersCount = followersCount;
  }


  public Account followingCount(Integer followingCount) {
    this.followingCount = followingCount;
    return this;
  }

  /**
   * The reported follows of this profile.
   * @return followingCount
   */
  @javax.annotation.Nullable
  public Integer getFollowingCount() {
    return followingCount;
  }

  public void setFollowingCount(Integer followingCount) {
    this.followingCount = followingCount;
  }


  public Account header(String header) {
    this.header = header;
    return this;
  }

  /**
   * An image banner that is shown above the profile and in profile cards. The format is URL.
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public Account headerStatic(String headerStatic) {
    this.headerStatic = headerStatic;
    return this;
  }

  /**
   * A static version of the header. Equal to &#x60;header&#x60; if its value is a static image; different if &#x60;header&#x60; is an animated GIF. The format is URL.
   * @return headerStatic
   */
  @javax.annotation.Nullable
  public String getHeaderStatic() {
    return headerStatic;
  }

  public void setHeaderStatic(String headerStatic) {
    this.headerStatic = headerStatic;
  }


  public Account id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The account id &#x60;header&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Account lastStatusAt(OffsetDateTime lastStatusAt) {
    this.lastStatusAt = lastStatusAt;
    return this;
  }

  /**
   * When the most recent status was posted.
   * @return lastStatusAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusAt() {
    return lastStatusAt;
  }

  public void setLastStatusAt(OffsetDateTime lastStatusAt) {
    this.lastStatusAt = lastStatusAt;
  }


  public Account locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Whether the account manually approves follow requests.
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Account moved(Account moved) {
    this.moved = moved;
    return this;
  }

  /**
   * Get moved
   * @return moved
   */
  @javax.annotation.Nullable
  public Account getMoved() {
    return moved;
  }

  public void setMoved(Account moved) {
    this.moved = moved;
  }


  public Account muteExpiresAt(OffsetDateTime muteExpiresAt) {
    this.muteExpiresAt = muteExpiresAt;
    return this;
  }

  /**
   * When a timed mute will expire, if applicable. ISO 8601 Datetime.
   * @return muteExpiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMuteExpiresAt() {
    return muteExpiresAt;
  }

  public void setMuteExpiresAt(OffsetDateTime muteExpiresAt) {
    this.muteExpiresAt = muteExpiresAt;
  }


  public Account note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The profile&#39;s bio / description.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Account source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public Account statusesCount(Integer statusesCount) {
    this.statusesCount = statusesCount;
    return this;
  }

  /**
   * How many statuses are attached to this account.
   * @return statusesCount
   */
  @javax.annotation.Nullable
  public Integer getStatusesCount() {
    return statusesCount;
  }

  public void setStatusesCount(Integer statusesCount) {
    this.statusesCount = statusesCount;
  }


  public Account suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * An extra entity returned when an account is suspended.
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public Account url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The location of the user&#39;s profile page. (HTTPS URL)
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Account username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of the account, not including domain.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.acct, account.acct) &&
        Objects.equals(this.avatar, account.avatar) &&
        Objects.equals(this.avatarStatic, account.avatarStatic) &&
        Objects.equals(this.bot, account.bot) &&
        Objects.equals(this.createdAt, account.createdAt) &&
        Objects.equals(this.discoverable, account.discoverable) &&
        Objects.equals(this.displayName, account.displayName) &&
        Objects.equals(this.emojis, account.emojis) &&
        Objects.equals(this.fields, account.fields) &&
        Objects.equals(this.followersCount, account.followersCount) &&
        Objects.equals(this.followingCount, account.followingCount) &&
        Objects.equals(this.header, account.header) &&
        Objects.equals(this.headerStatic, account.headerStatic) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.lastStatusAt, account.lastStatusAt) &&
        Objects.equals(this.locked, account.locked) &&
        Objects.equals(this.moved, account.moved) &&
        Objects.equals(this.muteExpiresAt, account.muteExpiresAt) &&
        Objects.equals(this.note, account.note) &&
        Objects.equals(this.source, account.source) &&
        Objects.equals(this.statusesCount, account.statusesCount) &&
        Objects.equals(this.suspended, account.suspended) &&
        Objects.equals(this.url, account.url) &&
        Objects.equals(this.username, account.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acct, avatar, avatarStatic, bot, createdAt, discoverable, displayName, emojis, fields, followersCount, followingCount, header, headerStatic, id, lastStatusAt, locked, moved, muteExpiresAt, note, source, statusesCount, suspended, url, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    acct: ").append(toIndentedString(acct)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    avatarStatic: ").append(toIndentedString(avatarStatic)).append("\n");
    sb.append("    bot: ").append(toIndentedString(bot)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    discoverable: ").append(toIndentedString(discoverable)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    emojis: ").append(toIndentedString(emojis)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    followersCount: ").append(toIndentedString(followersCount)).append("\n");
    sb.append("    followingCount: ").append(toIndentedString(followingCount)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    headerStatic: ").append(toIndentedString(headerStatic)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastStatusAt: ").append(toIndentedString(lastStatusAt)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    moved: ").append(toIndentedString(moved)).append("\n");
    sb.append("    muteExpiresAt: ").append(toIndentedString(muteExpiresAt)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    statusesCount: ").append(toIndentedString(statusesCount)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acct");
    openapiFields.add("avatar");
    openapiFields.add("avatar_static");
    openapiFields.add("bot");
    openapiFields.add("created_at");
    openapiFields.add("discoverable");
    openapiFields.add("display_name");
    openapiFields.add("emojis");
    openapiFields.add("fields");
    openapiFields.add("followers_count");
    openapiFields.add("following_count");
    openapiFields.add("header");
    openapiFields.add("header_static");
    openapiFields.add("id");
    openapiFields.add("last_status_at");
    openapiFields.add("locked");
    openapiFields.add("moved");
    openapiFields.add("mute_expires_at");
    openapiFields.add("note");
    openapiFields.add("source");
    openapiFields.add("statuses_count");
    openapiFields.add("suspended");
    openapiFields.add("url");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acct") != null && !jsonObj.get("acct").isJsonNull()) && !jsonObj.get("acct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acct").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("avatar_static") != null && !jsonObj.get("avatar_static").isJsonNull()) && !jsonObj.get("avatar_static").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_static` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_static").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (jsonObj.get("emojis") != null && !jsonObj.get("emojis").isJsonNull()) {
        JsonArray jsonArrayemojis = jsonObj.getAsJsonArray("emojis");
        if (jsonArrayemojis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emojis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emojis` to be an array in the JSON string but got `%s`", jsonObj.get("emojis").toString()));
          }

          // validate the optional field `emojis` (array)
          for (int i = 0; i < jsonArrayemojis.size(); i++) {
            Emoji.validateJsonElement(jsonArrayemojis.get(i));
          };
        }
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            Field.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if ((jsonObj.get("header_static") != null && !jsonObj.get("header_static").isJsonNull()) && !jsonObj.get("header_static").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_static` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_static").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `moved`
      if (jsonObj.get("moved") != null && !jsonObj.get("moved").isJsonNull()) {
        Account.validateJsonElement(jsonObj.get("moved"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

