/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.Activity;
import org.openapitools.client.model.AdminAccount;
import org.openapitools.client.model.AdminReport;
import org.openapitools.client.model.Announcement;
import org.openapitools.client.model.ApiV1AdminAccountsIdActionPostRequest;
import org.openapitools.client.model.ApiV1DomainBlocksPostRequest;
import org.openapitools.client.model.ApiV1FeaturedTagsPostRequest;
import org.openapitools.client.model.ApiV1FiltersPostRequest;
import org.openapitools.client.model.ApiV1ListsIdAccountsPostRequest;
import org.openapitools.client.model.ApiV1ListsPostRequest;
import org.openapitools.client.model.ApiV1ListsPutRequest;
import org.openapitools.client.model.ApiV1MediaPostRequest;
import org.openapitools.client.model.ApiV1PollsIdPostRequest;
import org.openapitools.client.model.ApiV1PushSubscriptionPostRequest;
import org.openapitools.client.model.ApiV1PushSubscriptionPutRequest;
import org.openapitools.client.model.ApiV1ReportsPostRequest;
import org.openapitools.client.model.ApiV1ScheduledStatusesIdPutRequest;
import org.openapitools.client.model.ApiV1StatusesIdReblogPostRequest;
import org.openapitools.client.model.ApiV1StatusesPost200Response;
import org.openapitools.client.model.ApiV1StatusesPostRequestInner;
import org.openapitools.client.model.ApiV2SearchGet200Response;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.Context;
import org.openapitools.client.model.Conversation;
import org.openapitools.client.model.Emoji;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.FeaturedTag;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.IdentityProof;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.ModelList;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.Poll;
import org.openapitools.client.model.Preferences;
import org.openapitools.client.model.PushSubscription;
import org.openapitools.client.model.Relationship;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ScheduledStatus;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiOembedGet
     * @param url URL of a status (optional)
     * @param maxwidth width of the iframe. Defaults to 400 (optional, default to 400)
     * @param maxheight height of the iframe. Defaults to null (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOembedGetCall(String url, Integer maxwidth, Integer maxheight, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oembed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (maxwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxwidth", maxwidth));
        }

        if (maxheight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxheight", maxheight));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOembedGetValidateBeforeCall(String url, Integer maxwidth, Integer maxheight, final ApiCallback _callback) throws ApiException {
        return apiOembedGetCall(url, maxwidth, maxheight, _callback);

    }

    /**
     * 
     * OEmbed as JSON
     * @param url URL of a status (optional)
     * @param maxwidth width of the iframe. Defaults to 400 (optional, default to 400)
     * @param maxheight height of the iframe. Defaults to null (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Card apiOembedGet(String url, Integer maxwidth, Integer maxheight) throws ApiException {
        ApiResponse<Card> localVarResp = apiOembedGetWithHttpInfo(url, maxwidth, maxheight);
        return localVarResp.getData();
    }

    /**
     * 
     * OEmbed as JSON
     * @param url URL of a status (optional)
     * @param maxwidth width of the iframe. Defaults to 400 (optional, default to 400)
     * @param maxheight height of the iframe. Defaults to null (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> apiOembedGetWithHttpInfo(String url, Integer maxwidth, Integer maxheight) throws ApiException {
        okhttp3.Call localVarCall = apiOembedGetValidateBeforeCall(url, maxwidth, maxheight, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OEmbed as JSON
     * @param url URL of a status (optional)
     * @param maxwidth width of the iframe. Defaults to 400 (optional, default to 400)
     * @param maxheight height of the iframe. Defaults to null (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOembedGetAsync(String url, Integer maxwidth, Integer maxheight, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOembedGetValidateBeforeCall(url, maxwidth, maxheight, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProofsGet
     * @param provider The identity provider to be looked up. Currently only supports keybase (case-sensitive) (optional)
     * @param username The username on the selected identity provider (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProofsGetCall(String provider, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/proofs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProofsGetValidateBeforeCall(String provider, String username, final ApiCallback _callback) throws ApiException {
        return apiProofsGetCall(provider, username, _callback);

    }

    /**
     * 
     * View identity proof
     * @param provider The identity provider to be looked up. Currently only supports keybase (case-sensitive) (optional)
     * @param username The username on the selected identity provider (optional)
     * @return IdentityProof
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public IdentityProof apiProofsGet(String provider, String username) throws ApiException {
        ApiResponse<IdentityProof> localVarResp = apiProofsGetWithHttpInfo(provider, username);
        return localVarResp.getData();
    }

    /**
     * 
     * View identity proof
     * @param provider The identity provider to be looked up. Currently only supports keybase (case-sensitive) (optional)
     * @param username The username on the selected identity provider (optional)
     * @return ApiResponse&lt;IdentityProof&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentityProof> apiProofsGetWithHttpInfo(String provider, String username) throws ApiException {
        okhttp3.Call localVarCall = apiProofsGetValidateBeforeCall(provider, username, null);
        Type localVarReturnType = new TypeToken<IdentityProof>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View identity proof
     * @param provider The identity provider to be looked up. Currently only supports keybase (case-sensitive) (optional)
     * @param username The username on the selected identity provider (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProofsGetAsync(String provider, String username, final ApiCallback<IdentityProof> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProofsGetValidateBeforeCall(provider, username, _callback);
        Type localVarReturnType = new TypeToken<IdentityProof>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsGet
     * @param local Filter for local accounts? (optional)
     * @param remote Filter for remote accounts? (optional)
     * @param byDomain Filter by the given domain (optional)
     * @param active Filter for currently active accounts? (optional)
     * @param pending Filter for currently pending accounts? (optional)
     * @param disabled Filter for currently disabled accounts? (optional)
     * @param silenced Filter for currently silenced accounts? (optional)
     * @param suspended Filter for currently suspended accounts? (optional)
     * @param staff Filter for staff accounts? (optional)
     * @param username Username to search for (optional)
     * @param displayName Display name to search for (optional)
     * @param email Lookup a user with this email (optional)
     * @param ip Lookup a user with this IP (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsGetCall(Boolean local, Boolean remote, String byDomain, Boolean active, Boolean pending, Boolean disabled, Boolean silenced, Boolean suspended, Boolean staff, String username, String displayName, String email, String ip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (remote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remote", remote));
        }

        if (byDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("by_domain", byDomain));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (pending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pending", pending));
        }

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disabled", disabled));
        }

        if (silenced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("silenced", silenced));
        }

        if (suspended != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suspended", suspended));
        }

        if (staff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("staff", staff));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display_name", displayName));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsGetValidateBeforeCall(Boolean local, Boolean remote, String byDomain, Boolean active, Boolean pending, Boolean disabled, Boolean silenced, Boolean suspended, Boolean staff, String username, String displayName, String email, String ip, final ApiCallback _callback) throws ApiException {
        return apiV1AdminAccountsGetCall(local, remote, byDomain, active, pending, disabled, silenced, suspended, staff, username, displayName, email, ip, _callback);

    }

    /**
     * 
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     * @param local Filter for local accounts? (optional)
     * @param remote Filter for remote accounts? (optional)
     * @param byDomain Filter by the given domain (optional)
     * @param active Filter for currently active accounts? (optional)
     * @param pending Filter for currently pending accounts? (optional)
     * @param disabled Filter for currently disabled accounts? (optional)
     * @param silenced Filter for currently silenced accounts? (optional)
     * @param suspended Filter for currently suspended accounts? (optional)
     * @param staff Filter for staff accounts? (optional)
     * @param username Username to search for (optional)
     * @param displayName Display name to search for (optional)
     * @param email Lookup a user with this email (optional)
     * @param ip Lookup a user with this IP (optional)
     * @return List&lt;AdminAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AdminAccount> apiV1AdminAccountsGet(Boolean local, Boolean remote, String byDomain, Boolean active, Boolean pending, Boolean disabled, Boolean silenced, Boolean suspended, Boolean staff, String username, String displayName, String email, String ip) throws ApiException {
        ApiResponse<List<AdminAccount>> localVarResp = apiV1AdminAccountsGetWithHttpInfo(local, remote, byDomain, active, pending, disabled, silenced, suspended, staff, username, displayName, email, ip);
        return localVarResp.getData();
    }

    /**
     * 
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     * @param local Filter for local accounts? (optional)
     * @param remote Filter for remote accounts? (optional)
     * @param byDomain Filter by the given domain (optional)
     * @param active Filter for currently active accounts? (optional)
     * @param pending Filter for currently pending accounts? (optional)
     * @param disabled Filter for currently disabled accounts? (optional)
     * @param silenced Filter for currently silenced accounts? (optional)
     * @param suspended Filter for currently suspended accounts? (optional)
     * @param staff Filter for staff accounts? (optional)
     * @param username Username to search for (optional)
     * @param displayName Display name to search for (optional)
     * @param email Lookup a user with this email (optional)
     * @param ip Lookup a user with this IP (optional)
     * @return ApiResponse&lt;List&lt;AdminAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdminAccount>> apiV1AdminAccountsGetWithHttpInfo(Boolean local, Boolean remote, String byDomain, Boolean active, Boolean pending, Boolean disabled, Boolean silenced, Boolean suspended, Boolean staff, String username, String displayName, String email, String ip) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsGetValidateBeforeCall(local, remote, byDomain, active, pending, disabled, silenced, suspended, staff, username, displayName, email, ip, null);
        Type localVarReturnType = new TypeToken<List<AdminAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     * @param local Filter for local accounts? (optional)
     * @param remote Filter for remote accounts? (optional)
     * @param byDomain Filter by the given domain (optional)
     * @param active Filter for currently active accounts? (optional)
     * @param pending Filter for currently pending accounts? (optional)
     * @param disabled Filter for currently disabled accounts? (optional)
     * @param silenced Filter for currently silenced accounts? (optional)
     * @param suspended Filter for currently suspended accounts? (optional)
     * @param staff Filter for staff accounts? (optional)
     * @param username Username to search for (optional)
     * @param displayName Display name to search for (optional)
     * @param email Lookup a user with this email (optional)
     * @param ip Lookup a user with this IP (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsGetAsync(Boolean local, Boolean remote, String byDomain, Boolean active, Boolean pending, Boolean disabled, Boolean silenced, Boolean suspended, Boolean staff, String username, String displayName, String email, String ip, final ApiCallback<List<AdminAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsGetValidateBeforeCall(local, remote, byDomain, active, pending, disabled, silenced, suspended, staff, username, displayName, email, ip, _callback);
        Type localVarReturnType = new TypeToken<List<AdminAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdActionPost
     * @param id ID of the account (required)
     * @param apiV1AdminAccountsIdActionPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdActionPostCall(String id, ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1AdminAccountsIdActionPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/action"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdActionPostValidateBeforeCall(String id, ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdActionPost(Async)");
        }

        return apiV1AdminAccountsIdActionPostCall(id, apiV1AdminAccountsIdActionPostRequest, _callback);

    }

    /**
     * 
     * Perform an action against an account and log this action in the moderation history.
     * @param id ID of the account (required)
     * @param apiV1AdminAccountsIdActionPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdActionPost(String id, ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest) throws ApiException {
        apiV1AdminAccountsIdActionPostWithHttpInfo(id, apiV1AdminAccountsIdActionPostRequest);
    }

    /**
     * 
     * Perform an action against an account and log this action in the moderation history.
     * @param id ID of the account (required)
     * @param apiV1AdminAccountsIdActionPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdActionPostWithHttpInfo(String id, ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdActionPostValidateBeforeCall(id, apiV1AdminAccountsIdActionPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Perform an action against an account and log this action in the moderation history.
     * @param id ID of the account (required)
     * @param apiV1AdminAccountsIdActionPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdActionPostAsync(String id, ApiV1AdminAccountsIdActionPostRequest apiV1AdminAccountsIdActionPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdActionPostValidateBeforeCall(id, apiV1AdminAccountsIdActionPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdApprovePost
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdApprovePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdApprovePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdApprovePost(Async)");
        }

        return apiV1AdminAccountsIdApprovePostCall(id, _callback);

    }

    /**
     * 
     * Approve the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdApprovePost(String id) throws ApiException {
        apiV1AdminAccountsIdApprovePostWithHttpInfo(id);
    }

    /**
     * 
     * Approve the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdApprovePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdApprovePostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Approve the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdApprovePostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdApprovePostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdEnablePost
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdEnablePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/enable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdEnablePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdEnablePost(Async)");
        }

        return apiV1AdminAccountsIdEnablePostCall(id, _callback);

    }

    /**
     * 
     * Re-enable a local account whose login is currently disabled.
     * @param id ID of the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdEnablePost(String id) throws ApiException {
        apiV1AdminAccountsIdEnablePostWithHttpInfo(id);
    }

    /**
     * 
     * Re-enable a local account whose login is currently disabled.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdEnablePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdEnablePostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Re-enable a local account whose login is currently disabled.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdEnablePostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdEnablePostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdGet
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdGet(Async)");
        }

        return apiV1AdminAccountsIdGetCall(id, _callback);

    }

    /**
     * 
     * View admin-level information about the given account.
     * @param id ID of the account (required)
     * @return AdminAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminAccount apiV1AdminAccountsIdGet(String id) throws ApiException {
        ApiResponse<AdminAccount> localVarResp = apiV1AdminAccountsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View admin-level information about the given account.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;AdminAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminAccount> apiV1AdminAccountsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View admin-level information about the given account.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdGetAsync(String id, final ApiCallback<AdminAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdRejectPost
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdRejectPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/reject"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdRejectPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdRejectPost(Async)");
        }

        return apiV1AdminAccountsIdRejectPostCall(id, _callback);

    }

    /**
     * 
     * Reject the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdRejectPost(String id) throws ApiException {
        apiV1AdminAccountsIdRejectPostWithHttpInfo(id);
    }

    /**
     * 
     * Reject the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdRejectPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdRejectPostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Reject the given local account if it is currently pending approval.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdRejectPostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdRejectPostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdUnsilencePost
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdUnsilencePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/unsilence"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdUnsilencePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdUnsilencePost(Async)");
        }

        return apiV1AdminAccountsIdUnsilencePostCall(id, _callback);

    }

    /**
     * 
     * Unsilence a currently silenced account.
     * @param id ID of the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdUnsilencePost(String id) throws ApiException {
        apiV1AdminAccountsIdUnsilencePostWithHttpInfo(id);
    }

    /**
     * 
     * Unsilence a currently silenced account.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdUnsilencePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdUnsilencePostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Unsilence a currently silenced account.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdUnsilencePostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdUnsilencePostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminAccountsIdUnsuspendPost
     * @param id ID of the account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdUnsuspendPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/accounts/{id}/unsuspend"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminAccountsIdUnsuspendPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminAccountsIdUnsuspendPost(Async)");
        }

        return apiV1AdminAccountsIdUnsuspendPostCall(id, _callback);

    }

    /**
     * 
     * Unsuspend a currently suspended account.
     * @param id ID of the account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1AdminAccountsIdUnsuspendPost(String id) throws ApiException {
        apiV1AdminAccountsIdUnsuspendPostWithHttpInfo(id);
    }

    /**
     * 
     * Unsuspend a currently suspended account.
     * @param id ID of the account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1AdminAccountsIdUnsuspendPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminAccountsIdUnsuspendPostValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Unsuspend a currently suspended account.
     * @param id ID of the account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminAccountsIdUnsuspendPostAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminAccountsIdUnsuspendPostValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsGet
     * @param resolved  (optional)
     * @param accountId  (optional)
     * @param targetAccountId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsGetCall(Boolean resolved, String accountId, String targetAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resolved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved", resolved));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (targetAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target_account_id", targetAccountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsGetValidateBeforeCall(Boolean resolved, String accountId, String targetAccountId, final ApiCallback _callback) throws ApiException {
        return apiV1AdminReportsGetCall(resolved, accountId, targetAccountId, _callback);

    }

    /**
     * 
     * View all reports. Pagination may be done with HTTP Link header in the response.
     * @param resolved  (optional)
     * @param accountId  (optional)
     * @param targetAccountId  (optional)
     * @return List&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AdminReport> apiV1AdminReportsGet(Boolean resolved, String accountId, String targetAccountId) throws ApiException {
        ApiResponse<List<AdminReport>> localVarResp = apiV1AdminReportsGetWithHttpInfo(resolved, accountId, targetAccountId);
        return localVarResp.getData();
    }

    /**
     * 
     * View all reports. Pagination may be done with HTTP Link header in the response.
     * @param resolved  (optional)
     * @param accountId  (optional)
     * @param targetAccountId  (optional)
     * @return ApiResponse&lt;List&lt;AdminReport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdminReport>> apiV1AdminReportsGetWithHttpInfo(Boolean resolved, String accountId, String targetAccountId) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsGetValidateBeforeCall(resolved, accountId, targetAccountId, null);
        Type localVarReturnType = new TypeToken<List<AdminReport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View all reports. Pagination may be done with HTTP Link header in the response.
     * @param resolved  (optional)
     * @param accountId  (optional)
     * @param targetAccountId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsGetAsync(Boolean resolved, String accountId, String targetAccountId, final ApiCallback<List<AdminReport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsGetValidateBeforeCall(resolved, accountId, targetAccountId, _callback);
        Type localVarReturnType = new TypeToken<List<AdminReport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsIdAssignToSelfPost
     * @param id ID of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdAssignToSelfPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports/{id}/assign_to_self"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsIdAssignToSelfPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminReportsIdAssignToSelfPost(Async)");
        }

        return apiV1AdminReportsIdAssignToSelfPostCall(id, _callback);

    }

    /**
     * 
     * Claim the handling of this report to yourself.
     * @param id ID of the report (required)
     * @return AdminReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminReport apiV1AdminReportsIdAssignToSelfPost(String id) throws ApiException {
        ApiResponse<AdminReport> localVarResp = apiV1AdminReportsIdAssignToSelfPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Claim the handling of this report to yourself.
     * @param id ID of the report (required)
     * @return ApiResponse&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminReport> apiV1AdminReportsIdAssignToSelfPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsIdAssignToSelfPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Claim the handling of this report to yourself.
     * @param id ID of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdAssignToSelfPostAsync(String id, final ApiCallback<AdminReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsIdAssignToSelfPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsIdGet
     * @param id ID of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminReportsIdGet(Async)");
        }

        return apiV1AdminReportsIdGetCall(id, _callback);

    }

    /**
     * 
     * View information about the report with the given ID.
     * @param id ID of the report (required)
     * @return AdminReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminReport apiV1AdminReportsIdGet(String id) throws ApiException {
        ApiResponse<AdminReport> localVarResp = apiV1AdminReportsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View information about the report with the given ID.
     * @param id ID of the report (required)
     * @return ApiResponse&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminReport> apiV1AdminReportsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View information about the report with the given ID.
     * @param id ID of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdGetAsync(String id, final ApiCallback<AdminReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsIdReopenPost
     * @param id ID of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdReopenPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports/{id}/reopen"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsIdReopenPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminReportsIdReopenPost(Async)");
        }

        return apiV1AdminReportsIdReopenPostCall(id, _callback);

    }

    /**
     * 
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @return AdminReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminReport apiV1AdminReportsIdReopenPost(String id) throws ApiException {
        ApiResponse<AdminReport> localVarResp = apiV1AdminReportsIdReopenPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @return ApiResponse&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminReport> apiV1AdminReportsIdReopenPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsIdReopenPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdReopenPostAsync(String id, final ApiCallback<AdminReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsIdReopenPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsIdResolvePost
     * @param id ID of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdResolvePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports/{id}/resolve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsIdResolvePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminReportsIdResolvePost(Async)");
        }

        return apiV1AdminReportsIdResolvePostCall(id, _callback);

    }

    /**
     * 
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @return AdminReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminReport apiV1AdminReportsIdResolvePost(String id) throws ApiException {
        ApiResponse<AdminReport> localVarResp = apiV1AdminReportsIdResolvePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @return ApiResponse&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminReport> apiV1AdminReportsIdResolvePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsIdResolvePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Mark a report as resolved with no further action taken.
     * @param id ID of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdResolvePostAsync(String id, final ApiCallback<AdminReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsIdResolvePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AdminReportsIdUnassignPost
     * @param id ID of the report (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdUnassignPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/admin/reports/{id}/unassign"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AdminReportsIdUnassignPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AdminReportsIdUnassignPost(Async)");
        }

        return apiV1AdminReportsIdUnassignPostCall(id, _callback);

    }

    /**
     * 
     * Unassign a report so that someone else can claim it.
     * @param id ID of the report (required)
     * @return AdminReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdminReport apiV1AdminReportsIdUnassignPost(String id) throws ApiException {
        ApiResponse<AdminReport> localVarResp = apiV1AdminReportsIdUnassignPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Unassign a report so that someone else can claim it.
     * @param id ID of the report (required)
     * @return ApiResponse&lt;AdminReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminReport> apiV1AdminReportsIdUnassignPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AdminReportsIdUnassignPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unassign a report so that someone else can claim it.
     * @param id ID of the report (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AdminReportsIdUnassignPostAsync(String id, final ApiCallback<AdminReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AdminReportsIdUnassignPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AdminReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AnnouncementsGet
     * @param withDismissed If true, response will include announcements dismissed by the user. Defaults to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsGetCall(Boolean withDismissed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/announcements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withDismissed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_dismissed", withDismissed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AnnouncementsGetValidateBeforeCall(Boolean withDismissed, final ApiCallback _callback) throws ApiException {
        return apiV1AnnouncementsGetCall(withDismissed, _callback);

    }

    /**
     * 
     * See all currently active announcements set by admins.
     * @param withDismissed If true, response will include announcements dismissed by the user. Defaults to false. (optional)
     * @return List&lt;Announcement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Announcement> apiV1AnnouncementsGet(Boolean withDismissed) throws ApiException {
        ApiResponse<List<Announcement>> localVarResp = apiV1AnnouncementsGetWithHttpInfo(withDismissed);
        return localVarResp.getData();
    }

    /**
     * 
     * See all currently active announcements set by admins.
     * @param withDismissed If true, response will include announcements dismissed by the user. Defaults to false. (optional)
     * @return ApiResponse&lt;List&lt;Announcement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Announcement>> apiV1AnnouncementsGetWithHttpInfo(Boolean withDismissed) throws ApiException {
        okhttp3.Call localVarCall = apiV1AnnouncementsGetValidateBeforeCall(withDismissed, null);
        Type localVarReturnType = new TypeToken<List<Announcement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * See all currently active announcements set by admins.
     * @param withDismissed If true, response will include announcements dismissed by the user. Defaults to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsGetAsync(Boolean withDismissed, final ApiCallback<List<Announcement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AnnouncementsGetValidateBeforeCall(withDismissed, _callback);
        Type localVarReturnType = new TypeToken<List<Announcement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AnnouncementsIdDismissPost
     * @param id Local ID of an announcement in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdDismissPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/announcements/{id}/dismiss"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AnnouncementsIdDismissPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AnnouncementsIdDismissPost(Async)");
        }

        return apiV1AnnouncementsIdDismissPostCall(id, _callback);

    }

    /**
     * 
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1AnnouncementsIdDismissPost(String id) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1AnnouncementsIdDismissPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1AnnouncementsIdDismissPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1AnnouncementsIdDismissPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdDismissPostAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AnnouncementsIdDismissPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AnnouncementsIdReactionsNameDelete
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdReactionsNameDeleteCall(String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/announcements/{id}/reactions/{name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AnnouncementsIdReactionsNameDeleteValidateBeforeCall(String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AnnouncementsIdReactionsNameDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiV1AnnouncementsIdReactionsNameDelete(Async)");
        }

        return apiV1AnnouncementsIdReactionsNameDeleteCall(id, name, _callback);

    }

    /**
     * 
     * Undo a react emoji to an announcement.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1AnnouncementsIdReactionsNameDelete(String id, String name) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1AnnouncementsIdReactionsNameDeleteWithHttpInfo(id, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Undo a react emoji to an announcement.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1AnnouncementsIdReactionsNameDeleteWithHttpInfo(String id, String name) throws ApiException {
        okhttp3.Call localVarCall = apiV1AnnouncementsIdReactionsNameDeleteValidateBeforeCall(id, name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Undo a react emoji to an announcement.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdReactionsNameDeleteAsync(String id, String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AnnouncementsIdReactionsNameDeleteValidateBeforeCall(id, name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1AnnouncementsIdReactionsNamePut
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdReactionsNamePutCall(String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/announcements/{id}/reactions/{name}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1AnnouncementsIdReactionsNamePutValidateBeforeCall(String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1AnnouncementsIdReactionsNamePut(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiV1AnnouncementsIdReactionsNamePut(Async)");
        }

        return apiV1AnnouncementsIdReactionsNamePutCall(id, name, _callback);

    }

    /**
     * 
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1AnnouncementsIdReactionsNamePut(String id, String name) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1AnnouncementsIdReactionsNamePutWithHttpInfo(id, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1AnnouncementsIdReactionsNamePutWithHttpInfo(String id, String name) throws ApiException {
        okhttp3.Call localVarCall = apiV1AnnouncementsIdReactionsNamePutValidateBeforeCall(id, name, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows a user to mark the announcement as read.
     * @param id Local ID of an announcement in the database. (required)
     * @param name Unicode emoji, or shortcode of custom emoji (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1AnnouncementsIdReactionsNamePutAsync(String id, String name, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1AnnouncementsIdReactionsNamePutValidateBeforeCall(id, name, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1BlocksGet
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BlocksGetCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1BlocksGetValidateBeforeCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        return apiV1BlocksGetCall(limit, maxId, sinceId, _callback);

    }

    /**
     * 
     * Get blocked users.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1BlocksGet(Integer limit, String maxId, String sinceId) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1BlocksGetWithHttpInfo(limit, maxId, sinceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get blocked users.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1BlocksGetWithHttpInfo(Integer limit, String maxId, String sinceId) throws ApiException {
        okhttp3.Call localVarCall = apiV1BlocksGetValidateBeforeCall(limit, maxId, sinceId, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get blocked users.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BlocksGetAsync(Integer limit, String maxId, String sinceId, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1BlocksGetValidateBeforeCall(limit, maxId, sinceId, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1BookmarksGet
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param minId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BookmarksGetCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bookmarks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1BookmarksGetValidateBeforeCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1BookmarksGetCall(limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * Statuses the user has bookmarked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param minId  (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1BookmarksGet(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1BookmarksGetWithHttpInfo(limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * Statuses the user has bookmarked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param minId  (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1BookmarksGetWithHttpInfo(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1BookmarksGetValidateBeforeCall(limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Statuses the user has bookmarked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param minId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1BookmarksGetAsync(Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1BookmarksGetValidateBeforeCall(limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ConversationsGet
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsGetCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ConversationsGetValidateBeforeCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1ConversationsGetCall(limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * Show conversation.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Conversation> apiV1ConversationsGet(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Conversation>> localVarResp = apiV1ConversationsGetWithHttpInfo(limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * Show conversation.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Conversation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Conversation>> apiV1ConversationsGetWithHttpInfo(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1ConversationsGetValidateBeforeCall(limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Show conversation.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsGetAsync(Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Conversation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ConversationsGetValidateBeforeCall(limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ConversationsIdDelete
     * @param id ID of the conversation in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/conversations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ConversationsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ConversationsIdDelete(Async)");
        }

        return apiV1ConversationsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1ConversationsIdDelete(String id) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1ConversationsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1ConversationsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ConversationsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsIdDeleteAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ConversationsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ConversationsIdReadPost
     * @param id ID of the conversation in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsIdReadPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/conversations/{id}/read"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ConversationsIdReadPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ConversationsIdReadPost(Async)");
        }

        return apiV1ConversationsIdReadPostCall(id, _callback);

    }

    /**
     * 
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Conversation apiV1ConversationsIdReadPost(String id) throws ApiException {
        ApiResponse<Conversation> localVarResp = apiV1ConversationsIdReadPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> apiV1ConversationsIdReadPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ConversationsIdReadPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove converstation
     * @param id ID of the conversation in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ConversationsIdReadPostAsync(String id, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ConversationsIdReadPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1CustomEmojisGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Emojis </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1CustomEmojisGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/custom_emojis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1CustomEmojisGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1CustomEmojisGetCall(_callback);

    }

    /**
     * 
     * Returns custom emojis that are available on the server.
     * @return List&lt;Emoji&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Emojis </td><td>  -  </td></tr>
     </table>
     */
    public List<Emoji> apiV1CustomEmojisGet() throws ApiException {
        ApiResponse<List<Emoji>> localVarResp = apiV1CustomEmojisGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns custom emojis that are available on the server.
     * @return ApiResponse&lt;List&lt;Emoji&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Emojis </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Emoji>> apiV1CustomEmojisGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1CustomEmojisGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Emoji>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns custom emojis that are available on the server.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Emojis </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1CustomEmojisGetAsync(final ApiCallback<List<Emoji>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1CustomEmojisGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Emoji>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DirectoryGet
     * @param limit How many accounts to load. Default 40. (optional, default to 40)
     * @param offset How many accounts to skip before returning results. Default 0. (optional, default to 0)
     * @param order the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles. (optional, default to active)
     * @param local Only return local accounts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DirectoryGetCall(Integer limit, Integer offset, String order, Boolean local, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/directory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DirectoryGetValidateBeforeCall(Integer limit, Integer offset, String order, Boolean local, final ApiCallback _callback) throws ApiException {
        return apiV1DirectoryGetCall(limit, offset, order, local, _callback);

    }

    /**
     * 
     * List accounts visible in the directory.
     * @param limit How many accounts to load. Default 40. (optional, default to 40)
     * @param offset How many accounts to skip before returning results. Default 0. (optional, default to 0)
     * @param order the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles. (optional, default to active)
     * @param local Only return local accounts. (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1DirectoryGet(Integer limit, Integer offset, String order, Boolean local) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1DirectoryGetWithHttpInfo(limit, offset, order, local);
        return localVarResp.getData();
    }

    /**
     * 
     * List accounts visible in the directory.
     * @param limit How many accounts to load. Default 40. (optional, default to 40)
     * @param offset How many accounts to skip before returning results. Default 0. (optional, default to 0)
     * @param order the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles. (optional, default to active)
     * @param local Only return local accounts. (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1DirectoryGetWithHttpInfo(Integer limit, Integer offset, String order, Boolean local) throws ApiException {
        okhttp3.Call localVarCall = apiV1DirectoryGetValidateBeforeCall(limit, offset, order, local, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List accounts visible in the directory.
     * @param limit How many accounts to load. Default 40. (optional, default to 40)
     * @param offset How many accounts to skip before returning results. Default 0. (optional, default to 0)
     * @param order the &#x60;active&#x60; to sort by most recently posted statuses (default) or &#x60;new&#x60; to sort by most recently created profiles. (optional, default to active)
     * @param local Only return local accounts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DirectoryGetAsync(Integer limit, Integer offset, String order, Boolean local, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DirectoryGetValidateBeforeCall(limit, offset, order, local, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DomainBlocksDelete
     * @param domain Domain to unblock. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksDeleteCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domain_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DomainBlocksDeleteValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling apiV1DomainBlocksDelete(Async)");
        }

        return apiV1DomainBlocksDeleteCall(domain, _callback);

    }

    /**
     * 
     * Remove a domain block, if it exists in the user&#39;s array of blocked domains.
     * @param domain Domain to unblock. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1DomainBlocksDelete(String domain) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1DomainBlocksDeleteWithHttpInfo(domain);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a domain block, if it exists in the user&#39;s array of blocked domains.
     * @param domain Domain to unblock. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1DomainBlocksDeleteWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = apiV1DomainBlocksDeleteValidateBeforeCall(domain, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a domain block, if it exists in the user&#39;s array of blocked domains.
     * @param domain Domain to unblock. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksDeleteAsync(String domain, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DomainBlocksDeleteValidateBeforeCall(domain, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DomainBlocksGet
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksGetCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/domain_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DomainBlocksGetValidateBeforeCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        return apiV1DomainBlocksGetCall(limit, maxId, sinceId, _callback);

    }

    /**
     * 
     * View domains the user has blocked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<String> apiV1DomainBlocksGet(Integer limit, String maxId, String sinceId) throws ApiException {
        ApiResponse<List<String>> localVarResp = apiV1DomainBlocksGetWithHttpInfo(limit, maxId, sinceId);
        return localVarResp.getData();
    }

    /**
     * 
     * View domains the user has blocked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> apiV1DomainBlocksGetWithHttpInfo(Integer limit, String maxId, String sinceId) throws ApiException {
        okhttp3.Call localVarCall = apiV1DomainBlocksGetValidateBeforeCall(limit, maxId, sinceId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View domains the user has blocked.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksGetAsync(Integer limit, String maxId, String sinceId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DomainBlocksGetValidateBeforeCall(limit, maxId, sinceId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DomainBlocksPost
     * @param apiV1DomainBlocksPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksPostCall(ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1DomainBlocksPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/domain_blocks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DomainBlocksPostValidateBeforeCall(ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1DomainBlocksPostCall(apiV1DomainBlocksPostRequest, _callback);

    }

    /**
     * 
     * \&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; 
     * @param apiV1DomainBlocksPostRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1DomainBlocksPost(ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1DomainBlocksPostWithHttpInfo(apiV1DomainBlocksPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * \&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; 
     * @param apiV1DomainBlocksPostRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1DomainBlocksPostWithHttpInfo(ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1DomainBlocksPostValidateBeforeCall(apiV1DomainBlocksPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * \&quot;Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\&quot; 
     * @param apiV1DomainBlocksPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If &#x60;domain&#x60; is not provided or contains spaces, the request will fail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DomainBlocksPostAsync(ApiV1DomainBlocksPostRequest apiV1DomainBlocksPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DomainBlocksPostValidateBeforeCall(apiV1DomainBlocksPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1EndorsementsGet
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param maxId Internal parameter. Use HTTP Link header from response for pagination (optional)
     * @param sinceId Internal parameter. Use HTTP Link header from response for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1EndorsementsGetCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/endorsements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1EndorsementsGetValidateBeforeCall(Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        return apiV1EndorsementsGetCall(limit, maxId, sinceId, _callback);

    }

    /**
     * 
     * Accounts that the user is currently featuring on their profile.
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param maxId Internal parameter. Use HTTP Link header from response for pagination (optional)
     * @param sinceId Internal parameter. Use HTTP Link header from response for pagination. (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1EndorsementsGet(Integer limit, String maxId, String sinceId) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1EndorsementsGetWithHttpInfo(limit, maxId, sinceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Accounts that the user is currently featuring on their profile.
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param maxId Internal parameter. Use HTTP Link header from response for pagination (optional)
     * @param sinceId Internal parameter. Use HTTP Link header from response for pagination. (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1EndorsementsGetWithHttpInfo(Integer limit, String maxId, String sinceId) throws ApiException {
        okhttp3.Call localVarCall = apiV1EndorsementsGetValidateBeforeCall(limit, maxId, sinceId, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accounts that the user is currently featuring on their profile.
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param maxId Internal parameter. Use HTTP Link header from response for pagination (optional)
     * @param sinceId Internal parameter. Use HTTP Link header from response for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Because endorsement ids are private, you must parse the HTTP Link header to find next and previous pages. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1EndorsementsGetAsync(Integer limit, String maxId, String sinceId, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1EndorsementsGetValidateBeforeCall(limit, maxId, sinceId, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FavouritesGet
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param minId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FavouritesGetCall(String limit, String maxId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FavouritesGetValidateBeforeCall(String limit, String maxId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1FavouritesGetCall(limit, maxId, minId, _callback);

    }

    /**
     * 
     * Statuses the user has favourited.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param minId  (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1FavouritesGet(String limit, String maxId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1FavouritesGetWithHttpInfo(limit, maxId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * Statuses the user has favourited.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param minId  (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1FavouritesGetWithHttpInfo(String limit, String maxId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1FavouritesGetValidateBeforeCall(limit, maxId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Statuses the user has favourited.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param minId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FavouritesGetAsync(String limit, String maxId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FavouritesGetValidateBeforeCall(limit, maxId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FeaturedTagsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/featured_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FeaturedTagsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1FeaturedTagsGetCall(_callback);

    }

    /**
     * 
     * View your featured tags.
     * @return List&lt;FeaturedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<FeaturedTag> apiV1FeaturedTagsGet() throws ApiException {
        ApiResponse<List<FeaturedTag>> localVarResp = apiV1FeaturedTagsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * View your featured tags.
     * @return ApiResponse&lt;List&lt;FeaturedTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeaturedTag>> apiV1FeaturedTagsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1FeaturedTagsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View your featured tags.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsGetAsync(final ApiCallback<List<FeaturedTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FeaturedTagsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FeaturedTagsIdDelete
     * @param id The id of the FeaturedTag to be unfeatured. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An empty object will be returned if the featured tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the ID does not exist or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/featured_tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FeaturedTagsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FeaturedTagsIdDelete(Async)");
        }

        return apiV1FeaturedTagsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Unfeature a tag
     * @param id The id of the FeaturedTag to be unfeatured. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An empty object will be returned if the featured tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the ID does not exist or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1FeaturedTagsIdDelete(String id) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1FeaturedTagsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Unfeature a tag
     * @param id The id of the FeaturedTag to be unfeatured. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An empty object will be returned if the featured tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the ID does not exist or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1FeaturedTagsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1FeaturedTagsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unfeature a tag
     * @param id The id of the FeaturedTag to be unfeatured. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An empty object will be returned if the featured tag was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the ID does not exist or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsIdDeleteAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FeaturedTagsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FeaturedTagsPost
     * @param apiV1FeaturedTagsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If name is not a valid hashtag, e.g. contains illegal characters or only numbers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsPostCall(ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1FeaturedTagsPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/featured_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FeaturedTagsPostValidateBeforeCall(ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1FeaturedTagsPostCall(apiV1FeaturedTagsPostRequest, _callback);

    }

    /**
     * 
     * Create a feature a tag.
     * @param apiV1FeaturedTagsPostRequest  (optional)
     * @return FeaturedTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If name is not a valid hashtag, e.g. contains illegal characters or only numbers </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedTag apiV1FeaturedTagsPost(ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest) throws ApiException {
        ApiResponse<FeaturedTag> localVarResp = apiV1FeaturedTagsPostWithHttpInfo(apiV1FeaturedTagsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a feature a tag.
     * @param apiV1FeaturedTagsPostRequest  (optional)
     * @return ApiResponse&lt;FeaturedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If name is not a valid hashtag, e.g. contains illegal characters or only numbers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturedTag> apiV1FeaturedTagsPostWithHttpInfo(ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1FeaturedTagsPostValidateBeforeCall(apiV1FeaturedTagsPostRequest, null);
        Type localVarReturnType = new TypeToken<FeaturedTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a feature a tag.
     * @param apiV1FeaturedTagsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If name is not a valid hashtag, e.g. contains illegal characters or only numbers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsPostAsync(ApiV1FeaturedTagsPostRequest apiV1FeaturedTagsPostRequest, final ApiCallback<FeaturedTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FeaturedTagsPostValidateBeforeCall(apiV1FeaturedTagsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<FeaturedTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FeaturedTagsSuggestionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsSuggestionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/featured_tags/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FeaturedTagsSuggestionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1FeaturedTagsSuggestionsGetCall(_callback);

    }

    /**
     * 
     * Shows your 10 most-used tags, with usage history for the past week.
     * @return List&lt;FeaturedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<FeaturedTag> apiV1FeaturedTagsSuggestionsGet() throws ApiException {
        ApiResponse<List<FeaturedTag>> localVarResp = apiV1FeaturedTagsSuggestionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Shows your 10 most-used tags, with usage history for the past week.
     * @return ApiResponse&lt;List&lt;FeaturedTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeaturedTag>> apiV1FeaturedTagsSuggestionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1FeaturedTagsSuggestionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Shows your 10 most-used tags, with usage history for the past week.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FeaturedTagsSuggestionsGetAsync(final ApiCallback<List<FeaturedTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FeaturedTagsSuggestionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<FeaturedTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FiltersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excerpts of various filters in different contexts. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FiltersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1FiltersGetCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excerpts of various filters in different contexts. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Filter> apiV1FiltersGet() throws ApiException {
        ApiResponse<List<Filter>> localVarResp = apiV1FiltersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Filter&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excerpts of various filters in different contexts. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Filter>> apiV1FiltersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1FiltersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Excerpts of various filters in different contexts. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersGetAsync(final ApiCallback<List<Filter>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FiltersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Filter>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FiltersIdDelete
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The filter has been deleted successfully, so an empty object will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FiltersIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FiltersIdDelete(Async)");
        }

        return apiV1FiltersIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete a filter.
     * @param id The id of the account in the database (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The filter has been deleted successfully, so an empty object will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1FiltersIdDelete(String id) throws ApiException {
        apiV1FiltersIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete a filter.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The filter has been deleted successfully, so an empty object will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1FiltersIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1FiltersIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a filter.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The filter has been deleted successfully, so an empty object will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FiltersIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FiltersIdGet
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FiltersIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FiltersIdGet(Async)");
        }

        return apiV1FiltersIdGetCall(id, _callback);

    }

    /**
     * 
     * Get one filter.
     * @param id The id of the account in the database (required)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public Filter apiV1FiltersIdGet(String id) throws ApiException {
        ApiResponse<Filter> localVarResp = apiV1FiltersIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get one filter.
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> apiV1FiltersIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1FiltersIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get one filter.
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter returned successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdGetAsync(String id, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FiltersIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FiltersIdPut
     * @param id The id of the account in the database (required)
     * @param apiV1FiltersPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdPutCall(String id, ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1FiltersPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/filters/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FiltersIdPutValidateBeforeCall(String id, ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FiltersIdPut(Async)");
        }

        return apiV1FiltersIdPutCall(id, apiV1FiltersPostRequest, _callback);

    }

    /**
     * 
     * Update a filter.
     * @param id The id of the account in the database (required)
     * @param apiV1FiltersPostRequest  (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public Filter apiV1FiltersIdPut(String id, ApiV1FiltersPostRequest apiV1FiltersPostRequest) throws ApiException {
        ApiResponse<Filter> localVarResp = apiV1FiltersIdPutWithHttpInfo(id, apiV1FiltersPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a filter.
     * @param id The id of the account in the database (required)
     * @param apiV1FiltersPostRequest  (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> apiV1FiltersIdPutWithHttpInfo(String id, ApiV1FiltersPostRequest apiV1FiltersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1FiltersIdPutValidateBeforeCall(id, apiV1FiltersPostRequest, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a filter.
     * @param id The id of the account in the database (required)
     * @param apiV1FiltersPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filter updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Filter ID does not exist, or is not owned by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersIdPutAsync(String id, ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FiltersIdPutValidateBeforeCall(id, apiV1FiltersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FiltersPost
     * @param apiV1FiltersPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly-created filter will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersPostCall(ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1FiltersPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FiltersPostValidateBeforeCall(ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1FiltersPostCall(apiV1FiltersPostRequest, _callback);

    }

    /**
     * 
     * 
     * @param apiV1FiltersPostRequest  (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly-created filter will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public Filter apiV1FiltersPost(ApiV1FiltersPostRequest apiV1FiltersPostRequest) throws ApiException {
        ApiResponse<Filter> localVarResp = apiV1FiltersPostWithHttpInfo(apiV1FiltersPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param apiV1FiltersPostRequest  (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly-created filter will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> apiV1FiltersPostWithHttpInfo(ApiV1FiltersPostRequest apiV1FiltersPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1FiltersPostValidateBeforeCall(apiV1FiltersPostRequest, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param apiV1FiltersPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly-created filter will be returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> If phrase or context are not provided properly </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FiltersPostAsync(ApiV1FiltersPostRequest apiV1FiltersPostRequest, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FiltersPostValidateBeforeCall(apiV1FiltersPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FollowRequestsGet
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts that are requesting a follow. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsGetCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/follow_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FollowRequestsGetValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return apiV1FollowRequestsGetCall(limit, _callback);

    }

    /**
     * 
     * Pending Follows
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts that are requesting a follow. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1FollowRequestsGet(Integer limit) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1FollowRequestsGetWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Pending Follows
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts that are requesting a follow. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1FollowRequestsGetWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV1FollowRequestsGetValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Pending Follows
     * @param limit Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header. (optional, default to 40)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accounts that are requesting a follow. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsGetAsync(Integer limit, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FollowRequestsGetValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FollowRequestsIdAuthorizePost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this account should be updated so that you are followed_by this account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsIdAuthorizePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/follow_requests/{id}/authorize"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FollowRequestsIdAuthorizePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FollowRequestsIdAuthorizePost(Async)");
        }

        return apiV1FollowRequestsIdAuthorizePostCall(id, _callback);

    }

    /**
     * 
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this account should be updated so that you are followed_by this account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1FollowRequestsIdAuthorizePost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1FollowRequestsIdAuthorizePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this account should be updated so that you are followed_by this account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1FollowRequestsIdAuthorizePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1FollowRequestsIdAuthorizePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this account should be updated so that you are followed_by this account. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsIdAuthorizePostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FollowRequestsIdAuthorizePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1FollowRequestsIdRejectPost
     * @param id The id of the account in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this Account should be unchanged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsIdRejectPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/follow_requests/{id}/reject"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1FollowRequestsIdRejectPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1FollowRequestsIdRejectPost(Async)");
        }

        return apiV1FollowRequestsIdRejectPostCall(id, _callback);

    }

    /**
     * 
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @return Relationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this Account should be unchanged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public Relationship apiV1FollowRequestsIdRejectPost(String id) throws ApiException {
        ApiResponse<Relationship> localVarResp = apiV1FollowRequestsIdRejectPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @return ApiResponse&lt;Relationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this Account should be unchanged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Relationship> apiV1FollowRequestsIdRejectPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1FollowRequestsIdRejectPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accept Follow
     * @param id The id of the account in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Your Relationship with this Account should be unchanged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No pending follow request from that user ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1FollowRequestsIdRejectPostAsync(String id, final ApiCallback<Relationship> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1FollowRequestsIdRejectPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Relationship>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1InstanceActivityGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstanceActivityGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instance/activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1InstanceActivityGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1InstanceActivityGetCall(_callback);

    }

    /**
     * 
     * Instance activity over the last 3 months, binned weekly.
     * @return List&lt;Activity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public List<Activity> apiV1InstanceActivityGet() throws ApiException {
        ApiResponse<List<Activity>> localVarResp = apiV1InstanceActivityGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Instance activity over the last 3 months, binned weekly.
     * @return ApiResponse&lt;List&lt;Activity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Activity>> apiV1InstanceActivityGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1InstanceActivityGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Instance activity over the last 3 months, binned weekly.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstanceActivityGetAsync(final ApiCallback<List<Activity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1InstanceActivityGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Activity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1InstanceGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstanceGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1InstanceGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1InstanceGetCall(_callback);

    }

    /**
     * 
     * Information about the server.
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public Instance apiV1InstanceGet() throws ApiException {
        ApiResponse<Instance> localVarResp = apiV1InstanceGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Information about the server.
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> apiV1InstanceGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1InstanceGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about the server.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstanceGetAsync(final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1InstanceGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1InstancePeersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstancePeersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instance/peers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1InstancePeersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1InstancePeersGetCall(_callback);

    }

    /**
     * 
     * Information about the server.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> apiV1InstancePeersGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = apiV1InstancePeersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Information about the server.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> apiV1InstancePeersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1InstancePeersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about the server.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1InstancePeersGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1InstancePeersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1ListsDeleteCall(_callback);

    }

    /**
     * 
     * Delete a list
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1ListsDelete() throws ApiException {
        ApiResponse<Object> localVarResp = apiV1ListsDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a list
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1ListsDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was deleted successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsDeleteAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use id as a parameter for related API calls. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1ListsGetCall(_callback);

    }

    /**
     * 
     * Fetch all lists that the user owns.
     * @return List&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use id as a parameter for related API calls. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelList> apiV1ListsGet() throws ApiException {
        ApiResponse<List<ModelList>> localVarResp = apiV1ListsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch all lists that the user owns.
     * @return ApiResponse&lt;List&lt;ModelList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use id as a parameter for related API calls. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelList>> apiV1ListsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch all lists that the user owns.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Use id as a parameter for related API calls. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsGetAsync(final ApiCallback<List<ModelList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsIdAccountsDelete
     * @param id ID of the list in the database (required)
     * @param accountIds Array of account IDs to add to the list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsDeleteCall(String id, List<String> accountIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lists/{id}/accounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "account_ids", accountIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsIdAccountsDeleteValidateBeforeCall(String id, List<String> accountIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ListsIdAccountsDelete(Async)");
        }

        // verify the required parameter 'accountIds' is set
        if (accountIds == null) {
            throw new ApiException("Missing the required parameter 'accountIds' when calling apiV1ListsIdAccountsDelete(Async)");
        }

        return apiV1ListsIdAccountsDeleteCall(id, accountIds, _callback);

    }

    /**
     * 
     * Remove accounts from the given list.
     * @param id ID of the list in the database (required)
     * @param accountIds Array of account IDs to add to the list. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1ListsIdAccountsDelete(String id, List<String> accountIds) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1ListsIdAccountsDeleteWithHttpInfo(id, accountIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove accounts from the given list.
     * @param id ID of the list in the database (required)
     * @param accountIds Array of account IDs to add to the list. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1ListsIdAccountsDeleteWithHttpInfo(String id, List<String> accountIds) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsIdAccountsDeleteValidateBeforeCall(id, accountIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove accounts from the given list.
     * @param id ID of the list in the database (required)
     * @param accountIds Array of account IDs to add to the list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsDeleteAsync(String id, List<String> accountIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsIdAccountsDeleteValidateBeforeCall(id, accountIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsIdAccountsGet
     * @param id ID of the list in the database (required)
     * @param limit Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header. (optional, default to 40)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsGetCall(String id, Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lists/{id}/accounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsIdAccountsGetValidateBeforeCall(String id, Integer limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ListsIdAccountsGet(Async)");
        }

        return apiV1ListsIdAccountsGetCall(id, limit, maxId, sinceId, _callback);

    }

    /**
     * 
     * View accounts in List
     * @param id ID of the list in the database (required)
     * @param limit Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header. (optional, default to 40)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1ListsIdAccountsGet(String id, Integer limit, String maxId, String sinceId) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1ListsIdAccountsGetWithHttpInfo(id, limit, maxId, sinceId);
        return localVarResp.getData();
    }

    /**
     * 
     * View accounts in List
     * @param id ID of the list in the database (required)
     * @param limit Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header. (optional, default to 40)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1ListsIdAccountsGetWithHttpInfo(String id, Integer limit, String maxId, String sinceId) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsIdAccountsGetValidateBeforeCall(id, limit, maxId, sinceId, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View accounts in List
     * @param id ID of the list in the database (required)
     * @param limit Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header. (optional, default to 40)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsGetAsync(String id, Integer limit, String maxId, String sinceId, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsIdAccountsGetValidateBeforeCall(id, limit, maxId, sinceId, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsIdAccountsPost
     * @param id ID of the list in the database (required)
     * @param apiV1ListsIdAccountsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsPostCall(String id, ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1ListsIdAccountsPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/lists/{id}/accounts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsIdAccountsPostValidateBeforeCall(String id, ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ListsIdAccountsPost(Async)");
        }

        return apiV1ListsIdAccountsPostCall(id, apiV1ListsIdAccountsPostRequest, _callback);

    }

    /**
     * 
     * Add accounts to the given list. Note that the user must be following these accounts.
     * @param id ID of the list in the database (required)
     * @param apiV1ListsIdAccountsPostRequest  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1ListsIdAccountsPost(String id, ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1ListsIdAccountsPostWithHttpInfo(id, apiV1ListsIdAccountsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add accounts to the given list. Note that the user must be following these accounts.
     * @param id ID of the list in the database (required)
     * @param apiV1ListsIdAccountsPostRequest  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1ListsIdAccountsPostWithHttpInfo(String id, ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsIdAccountsPostValidateBeforeCall(id, apiV1ListsIdAccountsPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add accounts to the given list. Note that the user must be following these accounts.
     * @param id ID of the list in the database (required)
     * @param apiV1ListsIdAccountsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdAccountsPostAsync(String id, ApiV1ListsIdAccountsPostRequest apiV1ListsIdAccountsPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsIdAccountsPostValidateBeforeCall(id, apiV1ListsIdAccountsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsIdGet
     * @param id ID of the list in the database (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/lists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ListsIdGet(Async)");
        }

        return apiV1ListsIdGetCall(id, _callback);

    }

    /**
     * 
     * Remove converstation
     * @param id ID of the list in the database (required)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ModelList apiV1ListsIdGet(String id) throws ApiException {
        ApiResponse<ModelList> localVarResp = apiV1ListsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove converstation
     * @param id ID of the list in the database (required)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> apiV1ListsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove converstation
     * @param id ID of the list in the database (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of unread has been changed to false.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsIdGetAsync(String id, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsPost
     * @param apiV1ListsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was created successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsPostCall(ApiV1ListsPostRequest apiV1ListsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1ListsPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsPostValidateBeforeCall(ApiV1ListsPostRequest apiV1ListsPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1ListsPostCall(apiV1ListsPostRequest, _callback);

    }

    /**
     * 
     * Create a new list.
     * @param apiV1ListsPostRequest  (optional)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was created successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ModelList apiV1ListsPost(ApiV1ListsPostRequest apiV1ListsPostRequest) throws ApiException {
        ApiResponse<ModelList> localVarResp = apiV1ListsPostWithHttpInfo(apiV1ListsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new list.
     * @param apiV1ListsPostRequest  (optional)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was created successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> apiV1ListsPostWithHttpInfo(ApiV1ListsPostRequest apiV1ListsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsPostValidateBeforeCall(apiV1ListsPostRequest, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new list.
     * @param apiV1ListsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was created successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsPostAsync(ApiV1ListsPostRequest apiV1ListsPostRequest, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsPostValidateBeforeCall(apiV1ListsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ListsPut
     * @param apiV1ListsPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsPutCall(ApiV1ListsPutRequest apiV1ListsPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1ListsPutRequest;

        // create path and map variables
        String localVarPath = "/api/v1/lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ListsPutValidateBeforeCall(ApiV1ListsPutRequest apiV1ListsPutRequest, final ApiCallback _callback) throws ApiException {
        return apiV1ListsPutCall(apiV1ListsPutRequest, _callback);

    }

    /**
     * 
     * Change the title of a list, or which replies to show.
     * @param apiV1ListsPutRequest  (optional)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ModelList apiV1ListsPut(ApiV1ListsPutRequest apiV1ListsPutRequest) throws ApiException {
        ApiResponse<ModelList> localVarResp = apiV1ListsPutWithHttpInfo(apiV1ListsPutRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the title of a list, or which replies to show.
     * @param apiV1ListsPutRequest  (optional)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> apiV1ListsPutWithHttpInfo(ApiV1ListsPutRequest apiV1ListsPutRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1ListsPutValidateBeforeCall(apiV1ListsPutRequest, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the title of a list, or which replies to show.
     * @param apiV1ListsPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list was updated successfully </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ListsPutAsync(ApiV1ListsPutRequest apiV1ListsPutRequest, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ListsPutValidateBeforeCall(apiV1ListsPutRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MarkersGet
     * @param timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MarkersGetCall(List<Object> timeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeline != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "timeline", timeline));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MarkersGetValidateBeforeCall(List<Object> timeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeline' is set
        if (timeline == null) {
            throw new ApiException("Missing the required parameter 'timeline' when calling apiV1MarkersGet(Async)");
        }

        return apiV1MarkersGetCall(timeline, _callback);

    }

    /**
     * 
     * Get saved timeline position
     * @param timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1MarkersGet(List<Object> timeline) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1MarkersGetWithHttpInfo(timeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Get saved timeline position
     * @param timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1MarkersGetWithHttpInfo(List<Object> timeline) throws ApiException {
        okhttp3.Call localVarCall = apiV1MarkersGetValidateBeforeCall(timeline, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get saved timeline position
     * @param timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MarkersGetAsync(List<Object> timeline, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MarkersGetValidateBeforeCall(timeline, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MarkersPost
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, If object is stale while being updated, an error will occur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MarkersPostCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/markers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MarkersPostValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return apiV1MarkersPostCall(body, _callback);

    }

    /**
     * 
     * Get saved timeline position
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, If object is stale while being updated, an error will occur. </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1MarkersPost(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1MarkersPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Get saved timeline position
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, If object is stale while being updated, an error will occur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1MarkersPostWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = apiV1MarkersPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get saved timeline position
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account was successfully removed from the list, or it was already not in the list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict, If object is stale while being updated, an error will occur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MarkersPostAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MarkersPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MediaIdGet
     * @param id The id of the Attachment entity to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Attachment is not yet ready. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/media/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MediaIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1MediaIdGet(Async)");
        }

        return apiV1MediaIdGetCall(id, _callback);

    }

    /**
     * 
     * Get an attachement.
     * @param id The id of the Attachment entity to be updated. (required)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Attachment is not yet ready. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public Attachment apiV1MediaIdGet(String id) throws ApiException {
        ApiResponse<Attachment> localVarResp = apiV1MediaIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an attachement.
     * @param id The id of the Attachment entity to be updated. (required)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Attachment is not yet ready. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> apiV1MediaIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1MediaIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an attachement.
     * @param id The id of the Attachment entity to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Attachment is not yet ready. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaIdGetAsync(String id, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MediaIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MediaIdPost
     * @param id The id of the Attachment entity to be updated. (required)
     * @param apiV1MediaPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaIdPostCall(String id, ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1MediaPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/media/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MediaIdPostValidateBeforeCall(String id, ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1MediaIdPost(Async)");
        }

        return apiV1MediaIdPostCall(id, apiV1MediaPostRequest, _callback);

    }

    /**
     * 
     * Update an Attachment, before it is attached to a status and posted.
     * @param id The id of the Attachment entity to be updated. (required)
     * @param apiV1MediaPostRequest  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public Attachment apiV1MediaIdPost(String id, ApiV1MediaPostRequest apiV1MediaPostRequest) throws ApiException {
        ApiResponse<Attachment> localVarResp = apiV1MediaIdPostWithHttpInfo(id, apiV1MediaPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Attachment, before it is attached to a status and posted.
     * @param id The id of the Attachment entity to be updated. (required)
     * @param apiV1MediaPostRequest  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> apiV1MediaIdPostWithHttpInfo(String id, ApiV1MediaPostRequest apiV1MediaPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1MediaIdPostValidateBeforeCall(id, apiV1MediaPostRequest, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Attachment, before it is attached to a status and posted.
     * @param id The id of the Attachment entity to be updated. (required)
     * @param apiV1MediaPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment updated successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attachment does not exist, is deleted, or was not created by you </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaIdPostAsync(String id, ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MediaIdPostValidateBeforeCall(id, apiV1MediaPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MediaPost
     * @param apiV1MediaPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaPostCall(ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1MediaPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MediaPostValidateBeforeCall(ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1MediaPostCall(apiV1MediaPostRequest, _callback);

    }

    /**
     * 
     * Creates an attachment to be used with a new status.
     * @param apiV1MediaPostRequest  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public Attachment apiV1MediaPost(ApiV1MediaPostRequest apiV1MediaPostRequest) throws ApiException {
        ApiResponse<Attachment> localVarResp = apiV1MediaPostWithHttpInfo(apiV1MediaPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an attachment to be used with a new status.
     * @param apiV1MediaPostRequest  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> apiV1MediaPostWithHttpInfo(ApiV1MediaPostRequest apiV1MediaPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1MediaPostValidateBeforeCall(apiV1MediaPostRequest, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an attachment to be used with a new status.
     * @param apiV1MediaPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment created successfully. Note that the Attachment will be created even if the file is not understood correctly. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> File or file type is unsupported or invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MediaPostAsync(ApiV1MediaPostRequest apiV1MediaPostRequest, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MediaPostValidateBeforeCall(apiV1MediaPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1MutesGet
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MutesGetCall(String limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/mutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1MutesGetValidateBeforeCall(String limit, String maxId, String sinceId, final ApiCallback _callback) throws ApiException {
        return apiV1MutesGetCall(limit, maxId, sinceId, _callback);

    }

    /**
     * 
     * Accounts the user has muted.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return List&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Account> apiV1MutesGet(String limit, String maxId, String sinceId) throws ApiException {
        ApiResponse<List<Account>> localVarResp = apiV1MutesGetWithHttpInfo(limit, maxId, sinceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Accounts the user has muted.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @return ApiResponse&lt;List&lt;Account&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Account>> apiV1MutesGetWithHttpInfo(String limit, String maxId, String sinceId) throws ApiException {
        okhttp3.Call localVarCall = apiV1MutesGetValidateBeforeCall(limit, maxId, sinceId, null);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accounts the user has muted.
     * @param limit  (optional)
     * @param maxId  (optional)
     * @param sinceId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1MutesGetAsync(String limit, String maxId, String sinceId, final ApiCallback<List<Account>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1MutesGetValidateBeforeCall(limit, maxId, sinceId, _callback);
        Type localVarReturnType = new TypeToken<List<Account>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsClearPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsClearPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notifications/clear";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsClearPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1NotificationsClearPostCall(_callback);

    }

    /**
     * 
     * Clear all notifications from the server.
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1NotificationsClearPost() throws ApiException {
        ApiResponse<Object> localVarResp = apiV1NotificationsClearPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Clear all notifications from the server.
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1NotificationsClearPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsClearPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clear all notifications from the server.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsClearPostAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsClearPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsGet
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param excludeTypes Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request) (optional)
     * @param accountId Return only notifications received from this account (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsGetCall(Integer limit, String maxId, String sinceId, String minId, List<String> excludeTypes, String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        if (excludeTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude_types", excludeTypes));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsGetValidateBeforeCall(Integer limit, String maxId, String sinceId, String minId, List<String> excludeTypes, String accountId, final ApiCallback _callback) throws ApiException {
        return apiV1NotificationsGetCall(limit, maxId, sinceId, minId, excludeTypes, accountId, _callback);

    }

    /**
     * 
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param excludeTypes Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request) (optional)
     * @param accountId Return only notifications received from this account (optional)
     * @return List&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Notification> apiV1NotificationsGet(Integer limit, String maxId, String sinceId, String minId, List<String> excludeTypes, String accountId) throws ApiException {
        ApiResponse<List<Notification>> localVarResp = apiV1NotificationsGetWithHttpInfo(limit, maxId, sinceId, minId, excludeTypes, accountId);
        return localVarResp.getData();
    }

    /**
     * 
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param excludeTypes Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request) (optional)
     * @param accountId Return only notifications received from this account (optional)
     * @return ApiResponse&lt;List&lt;Notification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Notification>> apiV1NotificationsGetWithHttpInfo(Integer limit, String maxId, String sinceId, String minId, List<String> excludeTypes, String accountId) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsGetValidateBeforeCall(limit, maxId, sinceId, minId, excludeTypes, accountId, null);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param excludeTypes Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request) (optional)
     * @param accountId Return only notifications received from this account (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsGetAsync(Integer limit, String maxId, String sinceId, String minId, List<String> excludeTypes, String accountId, final ApiCallback<List<Notification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsGetValidateBeforeCall(limit, maxId, sinceId, minId, excludeTypes, accountId, _callback);
        Type localVarReturnType = new TypeToken<List<Notification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsIdDismissPost
     * @param id ID of the notification in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification with given ID successfully dismissed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsIdDismissPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notifications/{id}/dismiss"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsIdDismissPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1NotificationsIdDismissPost(Async)");
        }

        return apiV1NotificationsIdDismissPostCall(id, _callback);

    }

    /**
     * 
     * Clear a single notification from the server.
     * @param id ID of the notification in the database. (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification with given ID successfully dismissed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Notification apiV1NotificationsIdDismissPost(String id) throws ApiException {
        ApiResponse<Notification> localVarResp = apiV1NotificationsIdDismissPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Clear a single notification from the server.
     * @param id ID of the notification in the database. (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification with given ID successfully dismissed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> apiV1NotificationsIdDismissPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsIdDismissPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clear a single notification from the server.
     * @param id ID of the notification in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification with given ID successfully dismissed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsIdDismissPostAsync(String id, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsIdDismissPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NotificationsIdGet
     * @param id ID of the notification in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/notifications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NotificationsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1NotificationsIdGet(Async)");
        }

        return apiV1NotificationsIdGetCall(id, _callback);

    }

    /**
     * 
     * View information about a notification with a given ID.
     * @param id ID of the notification in the database. (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Notification apiV1NotificationsIdGet(String id) throws ApiException {
        ApiResponse<Notification> localVarResp = apiV1NotificationsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View information about a notification with a given ID.
     * @param id ID of the notification in the database. (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> apiV1NotificationsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1NotificationsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View information about a notification with a given ID.
     * @param id ID of the notification in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NotificationsIdGetAsync(String id, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NotificationsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PollsIdGet
     * @param id ID of the poll in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PollsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/polls/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PollsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PollsIdGet(Async)");
        }

        return apiV1PollsIdGetCall(id, _callback);

    }

    /**
     * 
     * View a poll.
     * @param id ID of the poll in the database. (required)
     * @return Poll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private </td><td>  -  </td></tr>
     </table>
     */
    public Poll apiV1PollsIdGet(String id) throws ApiException {
        ApiResponse<Poll> localVarResp = apiV1PollsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View a poll.
     * @param id ID of the poll in the database. (required)
     * @return ApiResponse&lt;Poll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Poll> apiV1PollsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1PollsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Poll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a poll.
     * @param id ID of the poll in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PollsIdGetAsync(String id, final ApiCallback<Poll> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PollsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Poll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PollsIdPost
     * @param id ID of the poll in the database. (required)
     * @param apiV1PollsIdPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Already voted or poll is expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PollsIdPostCall(String id, ApiV1PollsIdPostRequest apiV1PollsIdPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1PollsIdPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/polls/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PollsIdPostValidateBeforeCall(String id, ApiV1PollsIdPostRequest apiV1PollsIdPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PollsIdPost(Async)");
        }

        return apiV1PollsIdPostCall(id, apiV1PollsIdPostRequest, _callback);

    }

    /**
     * 
     * Vote on a poll.
     * @param id ID of the poll in the database. (required)
     * @param apiV1PollsIdPostRequest  (optional)
     * @return Poll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Already voted or poll is expired. </td><td>  -  </td></tr>
     </table>
     */
    public Poll apiV1PollsIdPost(String id, ApiV1PollsIdPostRequest apiV1PollsIdPostRequest) throws ApiException {
        ApiResponse<Poll> localVarResp = apiV1PollsIdPostWithHttpInfo(id, apiV1PollsIdPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Vote on a poll.
     * @param id ID of the poll in the database. (required)
     * @param apiV1PollsIdPostRequest  (optional)
     * @return ApiResponse&lt;Poll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Already voted or poll is expired. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Poll> apiV1PollsIdPostWithHttpInfo(String id, ApiV1PollsIdPostRequest apiV1PollsIdPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1PollsIdPostValidateBeforeCall(id, apiV1PollsIdPostRequest, null);
        Type localVarReturnType = new TypeToken<Poll>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Vote on a poll.
     * @param id ID of the poll in the database. (required)
     * @param apiV1PollsIdPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one poll. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Poll does not exist, or poll&#39;s parent status is private. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Already voted or poll is expired. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PollsIdPostAsync(String id, ApiV1PollsIdPostRequest apiV1PollsIdPostRequest, final ApiCallback<Poll> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PollsIdPostValidateBeforeCall(id, apiV1PollsIdPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Poll>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PreferencesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PreferencesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PreferencesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1PreferencesGetCall(_callback);

    }

    /**
     * 
     * Shows your 10 most-used tags, with usage history for the past week.
     * @return Preferences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Preferences apiV1PreferencesGet() throws ApiException {
        ApiResponse<Preferences> localVarResp = apiV1PreferencesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Shows your 10 most-used tags, with usage history for the past week.
     * @return ApiResponse&lt;Preferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Preferences> apiV1PreferencesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1PreferencesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Preferences>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Shows your 10 most-used tags, with usage history for the past week.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PreferencesGetAsync(final ApiCallback<Preferences> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PreferencesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Preferences>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PushSubscriptionDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/push/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PushSubscriptionDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1PushSubscriptionDeleteCall(_callback);

    }

    /**
     * 
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1PushSubscriptionDelete() throws ApiException {
        ApiResponse<Object> localVarResp = apiV1PushSubscriptionDeleteWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1PushSubscriptionDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1PushSubscriptionDeleteValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionDeleteAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PushSubscriptionDeleteValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PushSubscriptionGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one PushSubscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/push/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PushSubscriptionGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiV1PushSubscriptionGetCall(_callback);

    }

    /**
     * 
     * View the PushSubscription currently associated with this access token.
     * @return PushSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one PushSubscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PushSubscription apiV1PushSubscriptionGet() throws ApiException {
        ApiResponse<PushSubscription> localVarResp = apiV1PushSubscriptionGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * View the PushSubscription currently associated with this access token.
     * @return ApiResponse&lt;PushSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one PushSubscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushSubscription> apiV1PushSubscriptionGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV1PushSubscriptionGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View the PushSubscription currently associated with this access token.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get one PushSubscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionGetAsync(final ApiCallback<PushSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PushSubscriptionGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PushSubscriptionPost
     * @param apiV1PushSubscriptionPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushSubscription created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionPostCall(ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1PushSubscriptionPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/push/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PushSubscriptionPostValidateBeforeCall(ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1PushSubscriptionPostCall(apiV1PushSubscriptionPostRequest, _callback);

    }

    /**
     * 
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     * @param apiV1PushSubscriptionPostRequest  (optional)
     * @return PushSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushSubscription created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public PushSubscription apiV1PushSubscriptionPost(ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest) throws ApiException {
        ApiResponse<PushSubscription> localVarResp = apiV1PushSubscriptionPostWithHttpInfo(apiV1PushSubscriptionPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     * @param apiV1PushSubscriptionPostRequest  (optional)
     * @return ApiResponse&lt;PushSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushSubscription created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushSubscription> apiV1PushSubscriptionPostWithHttpInfo(ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1PushSubscriptionPostValidateBeforeCall(apiV1PushSubscriptionPostRequest, null);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     * @param apiV1PushSubscriptionPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PushSubscription created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionPostAsync(ApiV1PushSubscriptionPostRequest apiV1PushSubscriptionPostRequest, final ApiCallback<PushSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PushSubscriptionPostValidateBeforeCall(apiV1PushSubscriptionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1PushSubscriptionPut
     * @param apiV1PushSubscriptionPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionPutCall(ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1PushSubscriptionPutRequest;

        // create path and map variables
        String localVarPath = "/api/v1/push/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1PushSubscriptionPutValidateBeforeCall(ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest, final ApiCallback _callback) throws ApiException {
        return apiV1PushSubscriptionPutCall(apiV1PushSubscriptionPutRequest, _callback);

    }

    /**
     * 
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param apiV1PushSubscriptionPutRequest  (optional)
     * @return PushSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PushSubscription apiV1PushSubscriptionPut(ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest) throws ApiException {
        ApiResponse<PushSubscription> localVarResp = apiV1PushSubscriptionPutWithHttpInfo(apiV1PushSubscriptionPutRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param apiV1PushSubscriptionPutRequest  (optional)
     * @return ApiResponse&lt;PushSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushSubscription> apiV1PushSubscriptionPutWithHttpInfo(ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1PushSubscriptionPutValidateBeforeCall(apiV1PushSubscriptionPutRequest, null);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param apiV1PushSubscriptionPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updating a PushSubscription to only receive mention alerts </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1PushSubscriptionPutAsync(ApiV1PushSubscriptionPutRequest apiV1PushSubscriptionPutRequest, final ApiCallback<PushSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1PushSubscriptionPutValidateBeforeCall(apiV1PushSubscriptionPutRequest, _callback);
        Type localVarReturnType = new TypeToken<PushSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ReportsPost
     * @param apiV1ReportsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reported. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ReportsPostCall(ApiV1ReportsPostRequest apiV1ReportsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1ReportsPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ReportsPostValidateBeforeCall(ApiV1ReportsPostRequest apiV1ReportsPostRequest, final ApiCallback _callback) throws ApiException {
        return apiV1ReportsPostCall(apiV1ReportsPostRequest, _callback);

    }

    /**
     * 
     * File a report.
     * @param apiV1ReportsPostRequest  (optional)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reported. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Report apiV1ReportsPost(ApiV1ReportsPostRequest apiV1ReportsPostRequest) throws ApiException {
        ApiResponse<Report> localVarResp = apiV1ReportsPostWithHttpInfo(apiV1ReportsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * File a report.
     * @param apiV1ReportsPostRequest  (optional)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reported. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Report> apiV1ReportsPostWithHttpInfo(ApiV1ReportsPostRequest apiV1ReportsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1ReportsPostValidateBeforeCall(apiV1ReportsPostRequest, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * File a report.
     * @param apiV1ReportsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reported. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ReportsPostAsync(ApiV1ReportsPostRequest apiV1ReportsPostRequest, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ReportsPostValidateBeforeCall(apiV1ReportsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ScheduledStatusesGet
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get scheduled statuses. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesGetCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scheduled_statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ScheduledStatusesGetValidateBeforeCall(Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1ScheduledStatusesGetCall(limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * View scheduled statuses
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;ScheduledStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get scheduled statuses. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<ScheduledStatus> apiV1ScheduledStatusesGet(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<ScheduledStatus>> localVarResp = apiV1ScheduledStatusesGetWithHttpInfo(limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * View scheduled statuses
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;ScheduledStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get scheduled statuses. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScheduledStatus>> apiV1ScheduledStatusesGetWithHttpInfo(Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1ScheduledStatusesGetValidateBeforeCall(limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<ScheduledStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View scheduled statuses
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get scheduled statuses. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesGetAsync(Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<ScheduledStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ScheduledStatusesGetValidateBeforeCall(limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<ScheduledStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ScheduledStatusesIdDelete
     * @param id ID of the scheduled status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scheduled_statuses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ScheduledStatusesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdDelete(Async)");
        }

        return apiV1ScheduledStatusesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Cancel a scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1ScheduledStatusesIdDelete(String id) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1ScheduledStatusesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel a scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1ScheduledStatusesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel a scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdDeleteAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ScheduledStatusesIdGet
     * @param id ID of the scheduled status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/scheduled_statuses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ScheduledStatusesIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdGet(Async)");
        }

        return apiV1ScheduledStatusesIdGetCall(id, _callback);

    }

    /**
     * 
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @return ScheduledStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledStatus apiV1ScheduledStatusesIdGet(String id) throws ApiException {
        ApiResponse<ScheduledStatus> localVarResp = apiV1ScheduledStatusesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @return ApiResponse&lt;ScheduledStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledStatus> apiV1ScheduledStatusesIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ScheduledStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdGetAsync(String id, final ApiCallback<ScheduledStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ScheduledStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ScheduledStatusesIdPut
     * @param id ID of the scheduled status in the database. (required)
     * @param apiV1ScheduledStatusesIdPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdPutCall(String id, ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1ScheduledStatusesIdPutRequest;

        // create path and map variables
        String localVarPath = "/api/v1/scheduled_statuses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ScheduledStatusesIdPutValidateBeforeCall(String id, ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdPut(Async)");
        }

        return apiV1ScheduledStatusesIdPutCall(id, apiV1ScheduledStatusesIdPutRequest, _callback);

    }

    /**
     * 
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @param apiV1ScheduledStatusesIdPutRequest  (optional)
     * @return ScheduledStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledStatus apiV1ScheduledStatusesIdPut(String id, ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest) throws ApiException {
        ApiResponse<ScheduledStatus> localVarResp = apiV1ScheduledStatusesIdPutWithHttpInfo(id, apiV1ScheduledStatusesIdPutRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @param apiV1ScheduledStatusesIdPutRequest  (optional)
     * @return ApiResponse&lt;ScheduledStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledStatus> apiV1ScheduledStatusesIdPutWithHttpInfo(String id, ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdPutValidateBeforeCall(id, apiV1ScheduledStatusesIdPutRequest, null);
        Type localVarReturnType = new TypeToken<ScheduledStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single scheduled status
     * @param id ID of the scheduled status in the database. (required)
     * @param apiV1ScheduledStatusesIdPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ScheduledStatusesIdPutAsync(String id, ApiV1ScheduledStatusesIdPutRequest apiV1ScheduledStatusesIdPutRequest, final ApiCallback<ScheduledStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ScheduledStatusesIdPutValidateBeforeCall(id, apiV1ScheduledStatusesIdPutRequest, _callback);
        Type localVarReturnType = new TypeToken<ScheduledStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdBookmarkPost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status bookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdBookmarkPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/bookmark"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdBookmarkPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdBookmarkPost(Async)");
        }

        return apiV1StatusesIdBookmarkPostCall(id, _callback);

    }

    /**
     * 
     * Privately bookmark a status.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status bookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdBookmarkPost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdBookmarkPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Privately bookmark a status.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status bookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdBookmarkPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdBookmarkPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Privately bookmark a status.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status bookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdBookmarkPostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdBookmarkPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdContextGet
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdContextGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/context"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdContextGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdContextGet(Async)");
        }

        return apiV1StatusesIdContextGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return Context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Context apiV1StatusesIdContextGet(String id) throws ApiException {
        ApiResponse<Context> localVarResp = apiV1StatusesIdContextGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Context&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Context> apiV1StatusesIdContextGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdContextGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdContextGetAsync(String id, final ApiCallback<Context> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdContextGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdDelete
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdDelete(Async)");
        }

        return apiV1StatusesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdDelete(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdDeleteAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdFavouritePost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdFavouritePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdFavouritePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdFavouritePost(Async)");
        }

        return apiV1StatusesIdFavouritePostCall(id, _callback);

    }

    /**
     * 
     * Add a status to your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdFavouritePost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdFavouritePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a status to your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdFavouritePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdFavouritePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a status to your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdFavouritePostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdFavouritePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdFavouritedByGet
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdFavouritedByGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/favourited_by"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdFavouritedByGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdFavouritedByGet(Async)");
        }

        return apiV1StatusesIdFavouritedByGetCall(id, _callback);

    }

    /**
     * 
     * View who favourited a given status.
     * @param id Local ID of a status in the database. (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1StatusesIdFavouritedByGet(String id) throws ApiException {
        ApiResponse<Account> localVarResp = apiV1StatusesIdFavouritedByGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View who favourited a given status.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1StatusesIdFavouritedByGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdFavouritedByGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View who favourited a given status.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdFavouritedByGetAsync(String id, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdFavouritedByGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdGet
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdGet(Async)");
        }

        return apiV1StatusesIdGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdGet(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdGetAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdMutePost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdMutePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/mute"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdMutePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdMutePost(Async)");
        }

        return apiV1StatusesIdMutePostCall(id, _callback);

    }

    /**
     * 
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdMutePost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdMutePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdMutePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdMutePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdMutePostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdMutePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdPinPost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status pinned. Note the status is not a reblog and its authoring account is your own. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdPinPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/pin"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdPinPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdPinPost(Async)");
        }

        return apiV1StatusesIdPinPostCall(id, _callback);

    }

    /**
     * 
     * Feature one of your own public statuses at the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status pinned. Note the status is not a reblog and its authoring account is your own. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered. </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdPinPost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdPinPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Feature one of your own public statuses at the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status pinned. Note the status is not a reblog and its authoring account is your own. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdPinPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdPinPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Feature one of your own public statuses at the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status pinned. Note the status is not a reblog and its authoring account is your own. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Status is not owned by you, or is not public. You cannot pin one of your private statuses because private statuses cannot be fetched from remote sites, and must be delivered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdPinPostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdPinPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdReblogPost
     * @param id Local ID of a status in the database. (required)
     * @param apiV1StatusesIdReblogPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdReblogPostCall(String id, ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1StatusesIdReblogPostRequest;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/reblog"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdReblogPostValidateBeforeCall(String id, ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdReblogPost(Async)");
        }

        return apiV1StatusesIdReblogPostCall(id, apiV1StatusesIdReblogPostRequest, _callback);

    }

    /**
     * 
     * Reshare a status.
     * @param id Local ID of a status in the database. (required)
     * @param apiV1StatusesIdReblogPostRequest  (optional)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdReblogPost(String id, ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdReblogPostWithHttpInfo(id, apiV1StatusesIdReblogPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reshare a status.
     * @param id Local ID of a status in the database. (required)
     * @param apiV1StatusesIdReblogPostRequest  (optional)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdReblogPostWithHttpInfo(String id, ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdReblogPostValidateBeforeCall(id, apiV1StatusesIdReblogPostRequest, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reshare a status.
     * @param id Local ID of a status in the database. (required)
     * @param apiV1StatusesIdReblogPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status has been reblogged. Note that the top-level id has changed. The id of the boosted status is now inside the reblog property. The top-level id is the id of the reblog itself. Also note that reblogs cannot be pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdReblogPostAsync(String id, ApiV1StatusesIdReblogPostRequest apiV1StatusesIdReblogPostRequest, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdReblogPostValidateBeforeCall(id, apiV1StatusesIdReblogPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdRebloggedByGet
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdRebloggedByGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/reblogged_by"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdRebloggedByGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdRebloggedByGet(Async)");
        }

        return apiV1StatusesIdRebloggedByGetCall(id, _callback);

    }

    /**
     * 
     * View who boosted a given status.
     * @param id Local ID of a status in the database. (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1StatusesIdRebloggedByGet(String id) throws ApiException {
        ApiResponse<Account> localVarResp = apiV1StatusesIdRebloggedByGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * View who boosted a given status.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1StatusesIdRebloggedByGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdRebloggedByGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View who boosted a given status.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdRebloggedByGetAsync(String id, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdRebloggedByGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdUnbookmarkPost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unbookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnbookmarkPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/unbookmark"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdUnbookmarkPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdUnbookmarkPost(Async)");
        }

        return apiV1StatusesIdUnbookmarkPostCall(id, _callback);

    }

    /**
     * 
     * Remove a status from your private bookmarks.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unbookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdUnbookmarkPost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdUnbookmarkPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a status from your private bookmarks.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unbookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdUnbookmarkPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdUnbookmarkPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a status from your private bookmarks.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unbookmarked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnbookmarkPostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdUnbookmarkPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdUnfavouritePost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnfavouritePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/unfavourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdUnfavouritePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdUnfavouritePost(Async)");
        }

        return apiV1StatusesIdUnfavouritePostCall(id, _callback);

    }

    /**
     * 
     * Remove a status from your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdUnfavouritePost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdUnfavouritePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a status from your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdUnfavouritePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdUnfavouritePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a status from your favourites list.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnfavouritePostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdUnfavouritePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdUnmutePost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnmutePostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/unmute"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdUnmutePostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdUnmutePost(Async)");
        }

        return apiV1StatusesIdUnmutePostCall(id, _callback);

    }

    /**
     * 
     * Status&#39;s conversation unmuted, or was already unmuted
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdUnmutePost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdUnmutePostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Status&#39;s conversation unmuted, or was already unmuted
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdUnmutePostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdUnmutePostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Status&#39;s conversation unmuted, or was already unmuted
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status&#39;s conversation muted, or was already muted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnmutePostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdUnmutePostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdUnpinPost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unpinned, or was already not pinned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnpinPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/unpin"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdUnpinPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdUnpinPost(Async)");
        }

        return apiV1StatusesIdUnpinPostCall(id, _callback);

    }

    /**
     * 
     * Unfeature a status from the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unpinned, or was already not pinned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdUnpinPost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdUnpinPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Unfeature a status from the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unpinned, or was already not pinned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdUnpinPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdUnpinPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unfeature a status from the top of your profile.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status unpinned, or was already not pinned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnpinPostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdUnpinPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesIdUnreblogPost
     * @param id Local ID of a status in the database. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status no longer reblogged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnreblogPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/statuses/{id}/unreblog"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesIdUnreblogPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1StatusesIdUnreblogPost(Async)");
        }

        return apiV1StatusesIdUnreblogPostCall(id, _callback);

    }

    /**
     * 
     * Undo a reshare of a status.
     * @param id Local ID of a status in the database. (required)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status no longer reblogged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public Status apiV1StatusesIdUnreblogPost(String id) throws ApiException {
        ApiResponse<Status> localVarResp = apiV1StatusesIdUnreblogPostWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Undo a reshare of a status.
     * @param id Local ID of a status in the database. (required)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status no longer reblogged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> apiV1StatusesIdUnreblogPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesIdUnreblogPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Undo a reshare of a status.
     * @param id Local ID of a status in the database. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status no longer reblogged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Status does not exist, is deleted, or is private </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesIdUnreblogPostAsync(String id, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesIdUnreblogPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1StatusesPost
     * @param idempotencyKey Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side. (optional)
     * @param apiV1StatusesPostRequestInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesPostCall(String idempotencyKey, List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiV1StatusesPostRequestInner;

        // create path and map variables
        String localVarPath = "/api/v1/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1StatusesPostValidateBeforeCall(String idempotencyKey, List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner, final ApiCallback _callback) throws ApiException {
        return apiV1StatusesPostCall(idempotencyKey, apiV1StatusesPostRequestInner, _callback);

    }

    /**
     * 
     * 
     * @param idempotencyKey Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side. (optional)
     * @param apiV1StatusesPostRequestInner  (optional)
     * @return ApiV1StatusesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiV1StatusesPost200Response apiV1StatusesPost(String idempotencyKey, List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner) throws ApiException {
        ApiResponse<ApiV1StatusesPost200Response> localVarResp = apiV1StatusesPostWithHttpInfo(idempotencyKey, apiV1StatusesPostRequestInner);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param idempotencyKey Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side. (optional)
     * @param apiV1StatusesPostRequestInner  (optional)
     * @return ApiResponse&lt;ApiV1StatusesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV1StatusesPost200Response> apiV1StatusesPostWithHttpInfo(String idempotencyKey, List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner) throws ApiException {
        okhttp3.Call localVarCall = apiV1StatusesPostValidateBeforeCall(idempotencyKey, apiV1StatusesPostRequestInner, null);
        Type localVarReturnType = new TypeToken<ApiV1StatusesPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param idempotencyKey Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side. (optional)
     * @param apiV1StatusesPostRequestInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status will be posted with chosen parameters. If scheduled_at is provided, then a ScheduledStatus will be returned instead. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1StatusesPostAsync(String idempotencyKey, List<ApiV1StatusesPostRequestInner> apiV1StatusesPostRequestInner, final ApiCallback<ApiV1StatusesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1StatusesPostValidateBeforeCall(idempotencyKey, apiV1StatusesPostRequestInner, _callback);
        Type localVarReturnType = new TypeToken<ApiV1StatusesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1SuggestionsGet
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1SuggestionsGetCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1SuggestionsGetValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return apiV1SuggestionsGetCall(limit, _callback);

    }

    /**
     * 
     * Accounts the user has had past positive interactions with, but is not yet following.
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Account apiV1SuggestionsGet(Integer limit) throws ApiException {
        ApiResponse<Account> localVarResp = apiV1SuggestionsGetWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Accounts the user has had past positive interactions with, but is not yet following.
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> apiV1SuggestionsGetWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV1SuggestionsGetValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accounts the user has had past positive interactions with, but is not yet following.
     * @param limit Maximum number of results to return. Defaults to 40. (optional, default to 40)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1SuggestionsGetAsync(Integer limit, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1SuggestionsGetValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1SuggestionsIdDelete
     * @param id id of the account in the database to be removed from suggestions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1SuggestionsIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/suggestions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1SuggestionsIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1SuggestionsIdDelete(Async)");
        }

        return apiV1SuggestionsIdDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete user suggestion
     * @param id id of the account in the database to be removed from suggestions (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public Object apiV1SuggestionsIdDelete(String id) throws ApiException {
        ApiResponse<Object> localVarResp = apiV1SuggestionsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete user suggestion
     * @param id id of the account in the database to be removed from suggestions (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> apiV1SuggestionsIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1SuggestionsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete user suggestion
     * @param id id of the account in the database to be removed from suggestions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1SuggestionsIdDeleteAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1SuggestionsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TimelinesHomeGet
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses for home. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Home feed is regenerating </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesHomeGetCall(Boolean local, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/timelines/home";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TimelinesHomeGetValidateBeforeCall(Boolean local, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1TimelinesHomeGetCall(local, limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * View statuses from followed users.
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses for home. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Home feed is regenerating </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1TimelinesHomeGet(Boolean local, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1TimelinesHomeGetWithHttpInfo(local, limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * View statuses from followed users.
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses for home. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Home feed is regenerating </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1TimelinesHomeGetWithHttpInfo(Boolean local, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1TimelinesHomeGetValidateBeforeCall(local, limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View statuses from followed users.
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses for home. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Home feed is regenerating </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesHomeGetAsync(Boolean local, Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TimelinesHomeGetValidateBeforeCall(local, limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TimelinesListListIdGet
     * @param listId Local ID of the list in the database. (required)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses in this list will be returned.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesListListIdGetCall(String listId, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/timelines/list/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TimelinesListListIdGetValidateBeforeCall(String listId, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling apiV1TimelinesListListIdGet(Async)");
        }

        return apiV1TimelinesListListIdGetCall(listId, limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * View statuses in the given list timeline.
     * @param listId Local ID of the list in the database. (required)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses in this list will be returned.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1TimelinesListListIdGet(String listId, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1TimelinesListListIdGetWithHttpInfo(listId, limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * View statuses in the given list timeline.
     * @param listId Local ID of the list in the database. (required)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses in this list will be returned.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1TimelinesListListIdGetWithHttpInfo(String listId, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1TimelinesListListIdGetValidateBeforeCall(listId, limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View statuses in the given list timeline.
     * @param listId Local ID of the list in the database. (required)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Statuses in this list will be returned.. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesListListIdGetAsync(String listId, Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TimelinesListListIdGetValidateBeforeCall(listId, limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TimelinesPublicGet
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesPublicGetCall(Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/timelines/public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (remote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remote", remote));
        }

        if (onlyMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_media", onlyMedia));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TimelinesPublicGetValidateBeforeCall(Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        return apiV1TimelinesPublicGetCall(local, remote, onlyMedia, limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * Public timeline
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1TimelinesPublicGet(Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1TimelinesPublicGetWithHttpInfo(local, remote, onlyMedia, limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * Public timeline
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1TimelinesPublicGetWithHttpInfo(Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1TimelinesPublicGetValidateBeforeCall(local, remote, onlyMedia, limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Public timeline
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesPublicGetAsync(Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TimelinesPublicGetValidateBeforeCall(local, remote, onlyMedia, limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TimelinesTagHashtagGet
     * @param hashtag Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol.. (required)
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesTagHashtagGetCall(String hashtag, Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/timelines/tag/{hashtag}"
            .replace("{" + "hashtag" + "}", localVarApiClient.escapeString(hashtag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (local != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local", local));
        }

        if (remote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remote", remote));
        }

        if (onlyMedia != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_media", onlyMedia));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TimelinesTagHashtagGetValidateBeforeCall(String hashtag, Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hashtag' is set
        if (hashtag == null) {
            throw new ApiException("Missing the required parameter 'hashtag' when calling apiV1TimelinesTagHashtagGet(Async)");
        }

        return apiV1TimelinesTagHashtagGetCall(hashtag, local, remote, onlyMedia, limit, maxId, sinceId, minId, _callback);

    }

    /**
     * 
     * View public statuses containing the given hashtag.
     * @param hashtag Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol.. (required)
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return List&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public List<Status> apiV1TimelinesTagHashtagGet(String hashtag, Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        ApiResponse<List<Status>> localVarResp = apiV1TimelinesTagHashtagGetWithHttpInfo(hashtag, local, remote, onlyMedia, limit, maxId, sinceId, minId);
        return localVarResp.getData();
    }

    /**
     * 
     * View public statuses containing the given hashtag.
     * @param hashtag Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol.. (required)
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @return ApiResponse&lt;List&lt;Status&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Status>> apiV1TimelinesTagHashtagGetWithHttpInfo(String hashtag, Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId) throws ApiException {
        okhttp3.Call localVarCall = apiV1TimelinesTagHashtagGetValidateBeforeCall(hashtag, local, remote, onlyMedia, limit, maxId, sinceId, minId, null);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View public statuses containing the given hashtag.
     * @param hashtag Content of a &#x60;#hashtag&#x60;&#x60;, not including &#x60;#&#x60; symbol.. (required)
     * @param local Show only local statuses? Defaults to false. (optional, default to false)
     * @param remote Show only local statuses? Defaults to false. (optional, default to false)
     * @param onlyMedia Show only statuses with media attached? Defaults to false.. (optional, default to false)
     * @param limit Max number of results to return. Defaults to 20. (optional, default to 20)
     * @param maxId Return results older than ID (optional)
     * @param sinceId Return results newer than ID (optional)
     * @param minId Return results immediately newer than ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TimelinesTagHashtagGetAsync(String hashtag, Boolean local, Boolean remote, Boolean onlyMedia, Integer limit, String maxId, String sinceId, String minId, final ApiCallback<List<Status>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TimelinesTagHashtagGetValidateBeforeCall(hashtag, local, remote, onlyMedia, limit, maxId, sinceId, minId, _callback);
        Type localVarReturnType = new TypeToken<List<Status>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1TrendsGet
     * @param limit Max number of results to return. Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TrendsGetCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/trends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1TrendsGetValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return apiV1TrendsGetCall(limit, _callback);

    }

    /**
     * 
     * Tags that are being used more frequently within the past week.
     * @param limit Max number of results to return. Defaults to 10. (optional, default to 10)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> apiV1TrendsGet(Integer limit) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = apiV1TrendsGetWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Tags that are being used more frequently within the past week.
     * @param limit Max number of results to return. Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> apiV1TrendsGetWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = apiV1TrendsGetValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tags that are being used more frequently within the past week.
     * @param limit Max number of results to return. Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domains that this instance is aware of. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1TrendsGetAsync(Integer limit, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1TrendsGetValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SearchGet
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 20)
     * @param resolve Attempt WebFinger lookup. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param accountId If provided, statuses returned will be authored only by this account (optional)
     * @param maxId Return results older than this id (optional)
     * @param minId Return results immediately newer than this id (optional)
     * @param type Enum(accounts, hashtags, statuses) (optional)
     * @param excludeUnreviewed Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags. (optional)
     * @param offset Offset in search results. Used for pagination. Defaults to 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SearchGetCall(String q, Integer limit, String resolve, Boolean following, String accountId, String maxId, String minId, String type, Boolean excludeUnreviewed, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (resolve != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolve", resolve));
        }

        if (following != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("following", following));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        if (minId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_id", minId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (excludeUnreviewed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_unreviewed", excludeUnreviewed));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SearchGetValidateBeforeCall(String q, Integer limit, String resolve, Boolean following, String accountId, String maxId, String minId, String type, Boolean excludeUnreviewed, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling apiV2SearchGet(Async)");
        }

        return apiV2SearchGetCall(q, limit, resolve, following, accountId, maxId, minId, type, excludeUnreviewed, offset, _callback);

    }

    /**
     * 
     * Search results
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 20)
     * @param resolve Attempt WebFinger lookup. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param accountId If provided, statuses returned will be authored only by this account (optional)
     * @param maxId Return results older than this id (optional)
     * @param minId Return results immediately newer than this id (optional)
     * @param type Enum(accounts, hashtags, statuses) (optional)
     * @param excludeUnreviewed Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags. (optional)
     * @param offset Offset in search results. Used for pagination. Defaults to 0. (optional)
     * @return ApiV2SearchGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiV2SearchGet200Response apiV2SearchGet(String q, Integer limit, String resolve, Boolean following, String accountId, String maxId, String minId, String type, Boolean excludeUnreviewed, Integer offset) throws ApiException {
        ApiResponse<ApiV2SearchGet200Response> localVarResp = apiV2SearchGetWithHttpInfo(q, limit, resolve, following, accountId, maxId, minId, type, excludeUnreviewed, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Search results
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 20)
     * @param resolve Attempt WebFinger lookup. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param accountId If provided, statuses returned will be authored only by this account (optional)
     * @param maxId Return results older than this id (optional)
     * @param minId Return results immediately newer than this id (optional)
     * @param type Enum(accounts, hashtags, statuses) (optional)
     * @param excludeUnreviewed Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags. (optional)
     * @param offset Offset in search results. Used for pagination. Defaults to 0. (optional)
     * @return ApiResponse&lt;ApiV2SearchGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiV2SearchGet200Response> apiV2SearchGetWithHttpInfo(String q, Integer limit, String resolve, Boolean following, String accountId, String maxId, String minId, String type, Boolean excludeUnreviewed, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2SearchGetValidateBeforeCall(q, limit, resolve, following, accountId, maxId, minId, type, excludeUnreviewed, offset, null);
        Type localVarReturnType = new TypeToken<ApiV2SearchGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search results
     * @param q What to search for (required)
     * @param limit Maximum number of results. Defaults to 40. (optional, default to 20)
     * @param resolve Attempt WebFinger lookup. (optional)
     * @param following Only who the user is following. Defaults to false. (optional)
     * @param accountId If provided, statuses returned will be authored only by this account (optional)
     * @param maxId Return results older than this id (optional)
     * @param minId Return results immediately newer than this id (optional)
     * @param type Enum(accounts, hashtags, statuses) (optional)
     * @param excludeUnreviewed Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags. (optional)
     * @param offset Offset in search results. Used for pagination. Defaults to 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid or missing Authorization header </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SearchGetAsync(String q, Integer limit, String resolve, Boolean following, String accountId, String maxId, String minId, String type, Boolean excludeUnreviewed, Integer offset, final ApiCallback<ApiV2SearchGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SearchGetValidateBeforeCall(q, limit, resolve, following, accountId, maxId, minId, type, excludeUnreviewed, offset, _callback);
        Type localVarReturnType = new TypeToken<ApiV2SearchGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
