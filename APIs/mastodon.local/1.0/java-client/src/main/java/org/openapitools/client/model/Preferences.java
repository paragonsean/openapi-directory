/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a user&#39;s preferences.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Preferences {
  public static final String SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_LANGUAGE = "posting:default:language";
  @SerializedName(SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_LANGUAGE)
  private String postingColonDefaultColonLanguage;

  public static final String SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_SENSITIVE = "posting:default:sensitive";
  @SerializedName(SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_SENSITIVE)
  private Boolean postingColonDefaultColonSensitive;

  /**
   * Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).
   */
  @JsonAdapter(PostingColonDefaultColonVisibilityEnum.Adapter.class)
  public enum PostingColonDefaultColonVisibilityEnum {
    PUBLIC("public"),
    
    UNLISTED("unlisted"),
    
    PRIVATE("private"),
    
    DIRECT("direct");

    private String value;

    PostingColonDefaultColonVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PostingColonDefaultColonVisibilityEnum fromValue(String value) {
      for (PostingColonDefaultColonVisibilityEnum b : PostingColonDefaultColonVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PostingColonDefaultColonVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PostingColonDefaultColonVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PostingColonDefaultColonVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PostingColonDefaultColonVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PostingColonDefaultColonVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_VISIBILITY = "posting:default:visibility";
  @SerializedName(SERIALIZED_NAME_POSTING_COLON_DEFAULT_COLON_VISIBILITY)
  private PostingColonDefaultColonVisibilityEnum postingColonDefaultColonVisibility;

  /**
   * Whether media attachments should be automatically displayed or blurred/hidden.
   */
  @JsonAdapter(ReadingColonExpandColonMediaEnum.Adapter.class)
  public enum ReadingColonExpandColonMediaEnum {
    DEFAULT("default"),
    
    SHOW_ALL("show_all"),
    
    HIDE_ALL("hide_all");

    private String value;

    ReadingColonExpandColonMediaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReadingColonExpandColonMediaEnum fromValue(String value) {
      for (ReadingColonExpandColonMediaEnum b : ReadingColonExpandColonMediaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReadingColonExpandColonMediaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReadingColonExpandColonMediaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReadingColonExpandColonMediaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReadingColonExpandColonMediaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReadingColonExpandColonMediaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_READING_COLON_EXPAND_COLON_MEDIA = "reading:expand:media";
  @SerializedName(SERIALIZED_NAME_READING_COLON_EXPAND_COLON_MEDIA)
  private ReadingColonExpandColonMediaEnum readingColonExpandColonMedia;

  public static final String SERIALIZED_NAME_READING_COLON_EXPAND_COLON_SPOILERS = "reading:expand:spoilers";
  @SerializedName(SERIALIZED_NAME_READING_COLON_EXPAND_COLON_SPOILERS)
  private Boolean readingColonExpandColonSpoilers;

  public Preferences() {
  }

  public Preferences postingColonDefaultColonLanguage(String postingColonDefaultColonLanguage) {
    this.postingColonDefaultColonLanguage = postingColonDefaultColonLanguage;
    return this;
  }

  /**
   * Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null
   * @return postingColonDefaultColonLanguage
   */
  @javax.annotation.Nullable
  public String getPostingColonDefaultColonLanguage() {
    return postingColonDefaultColonLanguage;
  }

  public void setPostingColonDefaultColonLanguage(String postingColonDefaultColonLanguage) {
    this.postingColonDefaultColonLanguage = postingColonDefaultColonLanguage;
  }


  public Preferences postingColonDefaultColonSensitive(Boolean postingColonDefaultColonSensitive) {
    this.postingColonDefaultColonSensitive = postingColonDefaultColonSensitive;
    return this;
  }

  /**
   * Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).
   * @return postingColonDefaultColonSensitive
   */
  @javax.annotation.Nullable
  public Boolean getPostingColonDefaultColonSensitive() {
    return postingColonDefaultColonSensitive;
  }

  public void setPostingColonDefaultColonSensitive(Boolean postingColonDefaultColonSensitive) {
    this.postingColonDefaultColonSensitive = postingColonDefaultColonSensitive;
  }


  public Preferences postingColonDefaultColonVisibility(PostingColonDefaultColonVisibilityEnum postingColonDefaultColonVisibility) {
    this.postingColonDefaultColonVisibility = postingColonDefaultColonVisibility;
    return this;
  }

  /**
   * Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).
   * @return postingColonDefaultColonVisibility
   */
  @javax.annotation.Nullable
  public PostingColonDefaultColonVisibilityEnum getPostingColonDefaultColonVisibility() {
    return postingColonDefaultColonVisibility;
  }

  public void setPostingColonDefaultColonVisibility(PostingColonDefaultColonVisibilityEnum postingColonDefaultColonVisibility) {
    this.postingColonDefaultColonVisibility = postingColonDefaultColonVisibility;
  }


  public Preferences readingColonExpandColonMedia(ReadingColonExpandColonMediaEnum readingColonExpandColonMedia) {
    this.readingColonExpandColonMedia = readingColonExpandColonMedia;
    return this;
  }

  /**
   * Whether media attachments should be automatically displayed or blurred/hidden.
   * @return readingColonExpandColonMedia
   */
  @javax.annotation.Nullable
  public ReadingColonExpandColonMediaEnum getReadingColonExpandColonMedia() {
    return readingColonExpandColonMedia;
  }

  public void setReadingColonExpandColonMedia(ReadingColonExpandColonMediaEnum readingColonExpandColonMedia) {
    this.readingColonExpandColonMedia = readingColonExpandColonMedia;
  }


  public Preferences readingColonExpandColonSpoilers(Boolean readingColonExpandColonSpoilers) {
    this.readingColonExpandColonSpoilers = readingColonExpandColonSpoilers;
    return this;
  }

  /**
   * Whether CWs should be expanded by default.
   * @return readingColonExpandColonSpoilers
   */
  @javax.annotation.Nullable
  public Boolean getReadingColonExpandColonSpoilers() {
    return readingColonExpandColonSpoilers;
  }

  public void setReadingColonExpandColonSpoilers(Boolean readingColonExpandColonSpoilers) {
    this.readingColonExpandColonSpoilers = readingColonExpandColonSpoilers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Preferences preferences = (Preferences) o;
    return Objects.equals(this.postingColonDefaultColonLanguage, preferences.postingColonDefaultColonLanguage) &&
        Objects.equals(this.postingColonDefaultColonSensitive, preferences.postingColonDefaultColonSensitive) &&
        Objects.equals(this.postingColonDefaultColonVisibility, preferences.postingColonDefaultColonVisibility) &&
        Objects.equals(this.readingColonExpandColonMedia, preferences.readingColonExpandColonMedia) &&
        Objects.equals(this.readingColonExpandColonSpoilers, preferences.readingColonExpandColonSpoilers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postingColonDefaultColonLanguage, postingColonDefaultColonSensitive, postingColonDefaultColonVisibility, readingColonExpandColonMedia, readingColonExpandColonSpoilers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Preferences {\n");
    sb.append("    postingColonDefaultColonLanguage: ").append(toIndentedString(postingColonDefaultColonLanguage)).append("\n");
    sb.append("    postingColonDefaultColonSensitive: ").append(toIndentedString(postingColonDefaultColonSensitive)).append("\n");
    sb.append("    postingColonDefaultColonVisibility: ").append(toIndentedString(postingColonDefaultColonVisibility)).append("\n");
    sb.append("    readingColonExpandColonMedia: ").append(toIndentedString(readingColonExpandColonMedia)).append("\n");
    sb.append("    readingColonExpandColonSpoilers: ").append(toIndentedString(readingColonExpandColonSpoilers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("posting:default:language");
    openapiFields.add("posting:default:sensitive");
    openapiFields.add("posting:default:visibility");
    openapiFields.add("reading:expand:media");
    openapiFields.add("reading:expand:spoilers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Preferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Preferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Preferences is not found in the empty JSON string", Preferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Preferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Preferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("posting:default:language") != null && !jsonObj.get("posting:default:language").isJsonNull()) && !jsonObj.get("posting:default:language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posting:default:language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posting:default:language").toString()));
      }
      if ((jsonObj.get("posting:default:visibility") != null && !jsonObj.get("posting:default:visibility").isJsonNull()) && !jsonObj.get("posting:default:visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posting:default:visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posting:default:visibility").toString()));
      }
      // validate the optional field `posting:default:visibility`
      if (jsonObj.get("posting:default:visibility") != null && !jsonObj.get("posting:default:visibility").isJsonNull()) {
        PostingColonDefaultColonVisibilityEnum.validateJsonElement(jsonObj.get("posting:default:visibility"));
      }
      if ((jsonObj.get("reading:expand:media") != null && !jsonObj.get("reading:expand:media").isJsonNull()) && !jsonObj.get("reading:expand:media").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reading:expand:media` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reading:expand:media").toString()));
      }
      // validate the optional field `reading:expand:media`
      if (jsonObj.get("reading:expand:media") != null && !jsonObj.get("reading:expand:media").isJsonNull()) {
        ReadingColonExpandColonMediaEnum.validateJsonElement(jsonObj.get("reading:expand:media"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Preferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Preferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Preferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Preferences.class));

       return (TypeAdapter<T>) new TypeAdapter<Preferences>() {
           @Override
           public void write(JsonWriter out, Preferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Preferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Preferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Preferences
   * @throws IOException if the JSON string is invalid with respect to Preferences
   */
  public static Preferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Preferences.class);
  }

  /**
   * Convert an instance of Preferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

