/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the last read position within a user&#39;s timelines.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Marker {
  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private Object home;

  public static final String SERIALIZED_NAME_LAST_READ_ID = "last_read_id";
  @SerializedName(SERIALIZED_NAME_LAST_READ_ID)
  private String lastReadId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Object notifications;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Marker() {
  }

  public Marker home(Object home) {
    this.home = home;
    return this;
  }

  /**
   * Information about the user&#39;s position in the home timeline.
   * @return home
   */
  @javax.annotation.Nullable
  public Object getHome() {
    return home;
  }

  public void setHome(Object home) {
    this.home = home;
  }


  public Marker lastReadId(String lastReadId) {
    this.lastReadId = lastReadId;
    return this;
  }

  /**
   * The ID of the most recently viewed entity. Cast from integer but not guaranteed to be a number
   * @return lastReadId
   */
  @javax.annotation.Nullable
  public String getLastReadId() {
    return lastReadId;
  }

  public void setLastReadId(String lastReadId) {
    this.lastReadId = lastReadId;
  }


  public Marker notifications(Object notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * Information about the user&#39;s position in their notifications.
   * @return notifications
   */
  @javax.annotation.Nullable
  public Object getNotifications() {
    return notifications;
  }

  public void setNotifications(Object notifications) {
    this.notifications = notifications;
  }


  public Marker updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The timestamp of when the marker was set. ISO 8601 Datetime.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Marker version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Used for locking to prevent write conflicts.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Marker marker = (Marker) o;
    return Objects.equals(this.home, marker.home) &&
        Objects.equals(this.lastReadId, marker.lastReadId) &&
        Objects.equals(this.notifications, marker.notifications) &&
        Objects.equals(this.updatedAt, marker.updatedAt) &&
        Objects.equals(this.version, marker.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(home, lastReadId, notifications, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Marker {\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    lastReadId: ").append(toIndentedString(lastReadId)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("home");
    openapiFields.add("last_read_id");
    openapiFields.add("notifications");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Marker
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Marker.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Marker is not found in the empty JSON string", Marker.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Marker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Marker` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("last_read_id") != null && !jsonObj.get("last_read_id").isJsonNull()) && !jsonObj.get("last_read_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_read_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_read_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Marker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Marker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Marker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Marker.class));

       return (TypeAdapter<T>) new TypeAdapter<Marker>() {
           @Override
           public void write(JsonWriter out, Marker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Marker read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Marker given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Marker
   * @throws IOException if the JSON string is invalid with respect to Marker
   */
  public static Marker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Marker.class);
  }

  /**
   * Convert an instance of Marker to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

