/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a proof from an external identity provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:57.300255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityProof {
  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_PROOF_URL = "proof_url";
  @SerializedName(SERIALIZED_NAME_PROOF_URL)
  private String proofUrl;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PROVIDER_USERNAME = "provider_username";
  @SerializedName(SERIALIZED_NAME_PROVIDER_USERNAME)
  private String providerUsername;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public IdentityProof() {
  }

  public IdentityProof profileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
    return this;
  }

  /**
   * The account owner&#39;s profile URL on the identity provider.
   * @return profileUrl
   */
  @javax.annotation.Nullable
  public String getProfileUrl() {
    return profileUrl;
  }

  public void setProfileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
  }


  public IdentityProof proofUrl(String proofUrl) {
    this.proofUrl = proofUrl;
    return this;
  }

  /**
   * A link to a statement of identity proof, hosted by the identity provider.
   * @return proofUrl
   */
  @javax.annotation.Nullable
  public String getProofUrl() {
    return proofUrl;
  }

  public void setProofUrl(String proofUrl) {
    this.proofUrl = proofUrl;
  }


  public IdentityProof provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The name of the identity provider.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public IdentityProof providerUsername(String providerUsername) {
    this.providerUsername = providerUsername;
    return this;
  }

  /**
   * The account owner&#39;s username on the identity provider&#39;s service.
   * @return providerUsername
   */
  @javax.annotation.Nullable
  public String getProviderUsername() {
    return providerUsername;
  }

  public void setProviderUsername(String providerUsername) {
    this.providerUsername = providerUsername;
  }


  public IdentityProof updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the identity proof was last updated. ISO 8601 Datetime.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityProof identityProof = (IdentityProof) o;
    return Objects.equals(this.profileUrl, identityProof.profileUrl) &&
        Objects.equals(this.proofUrl, identityProof.proofUrl) &&
        Objects.equals(this.provider, identityProof.provider) &&
        Objects.equals(this.providerUsername, identityProof.providerUsername) &&
        Objects.equals(this.updatedAt, identityProof.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileUrl, proofUrl, provider, providerUsername, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityProof {\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    proofUrl: ").append(toIndentedString(proofUrl)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerUsername: ").append(toIndentedString(providerUsername)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profile_url");
    openapiFields.add("proof_url");
    openapiFields.add("provider");
    openapiFields.add("provider_username");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityProof
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityProof.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityProof is not found in the empty JSON string", IdentityProof.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityProof.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityProof` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonNull()) && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if ((jsonObj.get("proof_url") != null && !jsonObj.get("proof_url").isJsonNull()) && !jsonObj.get("proof_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proof_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proof_url").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("provider_username") != null && !jsonObj.get("provider_username").isJsonNull()) && !jsonObj.get("provider_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_username").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityProof.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityProof' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityProof> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityProof.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityProof>() {
           @Override
           public void write(JsonWriter out, IdentityProof value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityProof read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityProof given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityProof
   * @throws IOException if the JSON string is invalid with respect to IdentityProof
   */
  public static IdentityProof fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityProof.class);
  }

  /**
   * Convert an instance of IdentityProof to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

