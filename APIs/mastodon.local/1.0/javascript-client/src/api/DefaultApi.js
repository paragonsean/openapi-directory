/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Activity from '../model/Activity';
import AdminAccount from '../model/AdminAccount';
import AdminReport from '../model/AdminReport';
import Announcement from '../model/Announcement';
import ApiV1AdminAccountsIdActionPostRequest from '../model/ApiV1AdminAccountsIdActionPostRequest';
import ApiV1DomainBlocksPostRequest from '../model/ApiV1DomainBlocksPostRequest';
import ApiV1FeaturedTagsPostRequest from '../model/ApiV1FeaturedTagsPostRequest';
import ApiV1FiltersPostRequest from '../model/ApiV1FiltersPostRequest';
import ApiV1ListsIdAccountsPostRequest from '../model/ApiV1ListsIdAccountsPostRequest';
import ApiV1ListsPostRequest from '../model/ApiV1ListsPostRequest';
import ApiV1ListsPutRequest from '../model/ApiV1ListsPutRequest';
import ApiV1MediaPostRequest from '../model/ApiV1MediaPostRequest';
import ApiV1PollsIdPostRequest from '../model/ApiV1PollsIdPostRequest';
import ApiV1PushSubscriptionPostRequest from '../model/ApiV1PushSubscriptionPostRequest';
import ApiV1PushSubscriptionPutRequest from '../model/ApiV1PushSubscriptionPutRequest';
import ApiV1ReportsPostRequest from '../model/ApiV1ReportsPostRequest';
import ApiV1ScheduledStatusesIdPutRequest from '../model/ApiV1ScheduledStatusesIdPutRequest';
import ApiV1StatusesIdReblogPostRequest from '../model/ApiV1StatusesIdReblogPostRequest';
import ApiV1StatusesPost200Response from '../model/ApiV1StatusesPost200Response';
import ApiV1StatusesPostRequestInner from '../model/ApiV1StatusesPostRequestInner';
import ApiV2SearchGet200Response from '../model/ApiV2SearchGet200Response';
import Attachment from '../model/Attachment';
import Card from '../model/Card';
import Context from '../model/Context';
import Conversation from '../model/Conversation';
import Emoji from '../model/Emoji';
import Error from '../model/Error';
import FeaturedTag from '../model/FeaturedTag';
import Filter from '../model/Filter';
import IdentityProof from '../model/IdentityProof';
import Instance from '../model/Instance';
import Notification from '../model/Notification';
import Poll from '../model/Poll';
import Preferences from '../model/Preferences';
import PushSubscription from '../model/PushSubscription';
import Relationship from '../model/Relationship';
import Report from '../model/Report';
import ScheduledStatus from '../model/ScheduledStatus';
import Status from '../model/Status';
import Tag from '../model/Tag';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiOembedGet operation.
     * @callback module:api/DefaultApi~apiOembedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Card} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OEmbed as JSON
     * @param {Object} opts Optional parameters
     * @param {String} [url] URL of a status
     * @param {Number} [maxwidth = 400)] width of the iframe. Defaults to 400
     * @param {Number} [maxheight] height of the iframe. Defaults to null
     * @param {module:api/DefaultApi~apiOembedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Card}
     */
    apiOembedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'url': opts['url'],
        'maxwidth': opts['maxwidth'],
        'maxheight': opts['maxheight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Card;
      return this.apiClient.callApi(
        '/api/oembed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiProofsGet operation.
     * @callback module:api/DefaultApi~apiProofsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityProof} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View identity proof
     * @param {Object} opts Optional parameters
     * @param {String} [provider] The identity provider to be looked up. Currently only supports keybase (case-sensitive)
     * @param {String} [username] The username on the selected identity provider
     * @param {module:api/DefaultApi~apiProofsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityProof}
     */
    apiProofsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'provider': opts['provider'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityProof;
      return this.apiClient.callApi(
        '/api/proofs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [local] Filter for local accounts?
     * @param {Boolean} [remote] Filter for remote accounts?
     * @param {String} [byDomain] Filter by the given domain
     * @param {Boolean} [active] Filter for currently active accounts?
     * @param {Boolean} [pending] Filter for currently pending accounts?
     * @param {Boolean} [disabled] Filter for currently disabled accounts?
     * @param {Boolean} [silenced] Filter for currently silenced accounts?
     * @param {Boolean} [suspended] Filter for currently suspended accounts?
     * @param {Boolean} [staff] Filter for staff accounts?
     * @param {String} [username] Username to search for
     * @param {String} [displayName] Display name to search for
     * @param {String} [email] Lookup a user with this email
     * @param {String} [ip] Lookup a user with this IP
     * @param {module:api/DefaultApi~apiV1AdminAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminAccount>}
     */
    apiV1AdminAccountsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'local': opts['local'],
        'remote': opts['remote'],
        'by_domain': opts['byDomain'],
        'active': opts['active'],
        'pending': opts['pending'],
        'disabled': opts['disabled'],
        'silenced': opts['silenced'],
        'suspended': opts['suspended'],
        'staff': opts['staff'],
        'username': opts['username'],
        'display_name': opts['displayName'],
        'email': opts['email'],
        'ip': opts['ip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminAccount];
      return this.apiClient.callApi(
        '/api/v1/admin/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdActionPost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdActionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform an action against an account and log this action in the moderation history.
     * @param {String} id ID of the account
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AdminAccountsIdActionPostRequest} [apiV1AdminAccountsIdActionPostRequest] 
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdActionPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AdminAccountsIdActionPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdActionPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdApprovePost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdApprovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve the given local account if it is currently pending approval.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdApprovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdApprovePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdApprovePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdEnablePost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdEnablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-enable a local account whose login is currently disabled.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdEnablePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdEnablePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdGet operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View admin-level information about the given account.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminAccount}
     */
    apiV1AdminAccountsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminAccount;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdRejectPost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdRejectPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject the given local account if it is currently pending approval.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdRejectPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdRejectPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdRejectPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdUnsilencePost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdUnsilencePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsilence a currently silenced account.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdUnsilencePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdUnsilencePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdUnsilencePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/unsilence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminAccountsIdUnsuspendPost operation.
     * @callback module:api/DefaultApi~apiV1AdminAccountsIdUnsuspendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsuspend a currently suspended account.
     * @param {String} id ID of the account
     * @param {module:api/DefaultApi~apiV1AdminAccountsIdUnsuspendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AdminAccountsIdUnsuspendPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminAccountsIdUnsuspendPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/admin/accounts/{id}/unsuspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsGet operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all reports. Pagination may be done with HTTP Link header in the response.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [resolved] 
     * @param {String} [accountId] 
     * @param {String} [targetAccountId] 
     * @param {module:api/DefaultApi~apiV1AdminReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminReport>}
     */
    apiV1AdminReportsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'resolved': opts['resolved'],
        'account_id': opts['accountId'],
        'target_account_id': opts['targetAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminReport];
      return this.apiClient.callApi(
        '/api/v1/admin/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsIdAssignToSelfPost operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsIdAssignToSelfPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim the handling of this report to yourself.
     * @param {String} id ID of the report
     * @param {module:api/DefaultApi~apiV1AdminReportsIdAssignToSelfPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminReport}
     */
    apiV1AdminReportsIdAssignToSelfPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminReportsIdAssignToSelfPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminReport;
      return this.apiClient.callApi(
        '/api/v1/admin/reports/{id}/assign_to_self', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsIdGet operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View information about the report with the given ID.
     * @param {String} id ID of the report
     * @param {module:api/DefaultApi~apiV1AdminReportsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminReport}
     */
    apiV1AdminReportsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminReportsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminReport;
      return this.apiClient.callApi(
        '/api/v1/admin/reports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsIdReopenPost operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsIdReopenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a report as resolved with no further action taken.
     * @param {String} id ID of the report
     * @param {module:api/DefaultApi~apiV1AdminReportsIdReopenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminReport}
     */
    apiV1AdminReportsIdReopenPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminReportsIdReopenPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminReport;
      return this.apiClient.callApi(
        '/api/v1/admin/reports/{id}/reopen', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsIdResolvePost operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsIdResolvePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a report as resolved with no further action taken.
     * @param {String} id ID of the report
     * @param {module:api/DefaultApi~apiV1AdminReportsIdResolvePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminReport}
     */
    apiV1AdminReportsIdResolvePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminReportsIdResolvePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminReport;
      return this.apiClient.callApi(
        '/api/v1/admin/reports/{id}/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AdminReportsIdUnassignPost operation.
     * @callback module:api/DefaultApi~apiV1AdminReportsIdUnassignPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign a report so that someone else can claim it.
     * @param {String} id ID of the report
     * @param {module:api/DefaultApi~apiV1AdminReportsIdUnassignPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminReport}
     */
    apiV1AdminReportsIdUnassignPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AdminReportsIdUnassignPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminReport;
      return this.apiClient.callApi(
        '/api/v1/admin/reports/{id}/unassign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AnnouncementsGet operation.
     * @callback module:api/DefaultApi~apiV1AnnouncementsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Announcement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See all currently active announcements set by admins.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withDismissed] If true, response will include announcements dismissed by the user. Defaults to false.
     * @param {module:api/DefaultApi~apiV1AnnouncementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Announcement>}
     */
    apiV1AnnouncementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'with_dismissed': opts['withDismissed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Announcement];
      return this.apiClient.callApi(
        '/api/v1/announcements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AnnouncementsIdDismissPost operation.
     * @callback module:api/DefaultApi~apiV1AnnouncementsIdDismissPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a user to mark the announcement as read.
     * @param {String} id Local ID of an announcement in the database.
     * @param {module:api/DefaultApi~apiV1AnnouncementsIdDismissPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1AnnouncementsIdDismissPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AnnouncementsIdDismissPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/announcements/{id}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AnnouncementsIdReactionsNameDelete operation.
     * @callback module:api/DefaultApi~apiV1AnnouncementsIdReactionsNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo a react emoji to an announcement.
     * @param {String} id Local ID of an announcement in the database.
     * @param {String} name Unicode emoji, or shortcode of custom emoji
     * @param {module:api/DefaultApi~apiV1AnnouncementsIdReactionsNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1AnnouncementsIdReactionsNameDelete(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AnnouncementsIdReactionsNameDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1AnnouncementsIdReactionsNameDelete");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/announcements/{id}/reactions/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AnnouncementsIdReactionsNamePut operation.
     * @callback module:api/DefaultApi~apiV1AnnouncementsIdReactionsNamePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a user to mark the announcement as read.
     * @param {String} id Local ID of an announcement in the database.
     * @param {String} name Unicode emoji, or shortcode of custom emoji
     * @param {module:api/DefaultApi~apiV1AnnouncementsIdReactionsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1AnnouncementsIdReactionsNamePut(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AnnouncementsIdReactionsNamePut");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV1AnnouncementsIdReactionsNamePut");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/announcements/{id}/reactions/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BlocksGet operation.
     * @callback module:api/DefaultApi~apiV1BlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get blocked users.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [maxId] 
     * @param {String} [sinceId] 
     * @param {module:api/DefaultApi~apiV1BlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1BlocksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BookmarksGet operation.
     * @callback module:api/DefaultApi~apiV1BookmarksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Statuses the user has bookmarked.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [maxId] 
     * @param {String} [sinceId] 
     * @param {String} [minId] 
     * @param {module:api/DefaultApi~apiV1BookmarksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1BookmarksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/bookmarks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ConversationsGet operation.
     * @callback module:api/DefaultApi~apiV1ConversationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show conversation.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1ConversationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    apiV1ConversationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/api/v1/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ConversationsIdDelete operation.
     * @callback module:api/DefaultApi~apiV1ConversationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove converstation
     * @param {String} id ID of the conversation in the database
     * @param {module:api/DefaultApi~apiV1ConversationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1ConversationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ConversationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/conversations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ConversationsIdReadPost operation.
     * @callback module:api/DefaultApi~apiV1ConversationsIdReadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove converstation
     * @param {String} id ID of the conversation in the database
     * @param {module:api/DefaultApi~apiV1ConversationsIdReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    apiV1ConversationsIdReadPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ConversationsIdReadPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/api/v1/conversations/{id}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1CustomEmojisGet operation.
     * @callback module:api/DefaultApi~apiV1CustomEmojisGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Emoji>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns custom emojis that are available on the server.
     * @param {module:api/DefaultApi~apiV1CustomEmojisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Emoji>}
     */
    apiV1CustomEmojisGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Emoji];
      return this.apiClient.callApi(
        '/api/v1/custom_emojis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DirectoryGet operation.
     * @callback module:api/DefaultApi~apiV1DirectoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts visible in the directory.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] How many accounts to load. Default 40.
     * @param {Number} [offset = 0)] How many accounts to skip before returning results. Default 0.
     * @param {module:model/String} [order = 'active')] the `active` to sort by most recently posted statuses (default) or `new` to sort by most recently created profiles.
     * @param {Boolean} [local] Only return local accounts.
     * @param {module:api/DefaultApi~apiV1DirectoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1DirectoryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'local': opts['local']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/directory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DomainBlocksDelete operation.
     * @callback module:api/DefaultApi~apiV1DomainBlocksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a domain block, if it exists in the user's array of blocked domains.
     * @param {String} domain Domain to unblock.
     * @param {module:api/DefaultApi~apiV1DomainBlocksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1DomainBlocksDelete(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling apiV1DomainBlocksDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'domain': domain
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/domain_blocks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DomainBlocksGet operation.
     * @callback module:api/DefaultApi~apiV1DomainBlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View domains the user has blocked.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {String} [maxId] 
     * @param {String} [sinceId] 
     * @param {module:api/DefaultApi~apiV1DomainBlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1DomainBlocksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/domain_blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DomainBlocksPost operation.
     * @callback module:api/DefaultApi~apiV1DomainBlocksPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Block a domain to: - hide all public posts from it - hide all notifications from it - remove all followers from it - prevent following new users from it (but does not remove existing follows)\" 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1DomainBlocksPostRequest} [apiV1DomainBlocksPostRequest] 
     * @param {module:api/DefaultApi~apiV1DomainBlocksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1DomainBlocksPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1DomainBlocksPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/domain_blocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1EndorsementsGet operation.
     * @callback module:api/DefaultApi~apiV1EndorsementsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts that the user is currently featuring on their profile.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.
     * @param {String} [maxId] Internal parameter. Use HTTP Link header from response for pagination
     * @param {String} [sinceId] Internal parameter. Use HTTP Link header from response for pagination.
     * @param {module:api/DefaultApi~apiV1EndorsementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1EndorsementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/endorsements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FavouritesGet operation.
     * @callback module:api/DefaultApi~apiV1FavouritesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Statuses the user has favourited.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [maxId] 
     * @param {String} [minId] 
     * @param {module:api/DefaultApi~apiV1FavouritesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1FavouritesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/favourites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FeaturedTagsGet operation.
     * @callback module:api/DefaultApi~apiV1FeaturedTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeaturedTag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your featured tags.
     * @param {module:api/DefaultApi~apiV1FeaturedTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeaturedTag>}
     */
    apiV1FeaturedTagsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeaturedTag];
      return this.apiClient.callApi(
        '/api/v1/featured_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FeaturedTagsIdDelete operation.
     * @callback module:api/DefaultApi~apiV1FeaturedTagsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfeature a tag
     * @param {String} id The id of the FeaturedTag to be unfeatured.
     * @param {module:api/DefaultApi~apiV1FeaturedTagsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1FeaturedTagsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FeaturedTagsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/featured_tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FeaturedTagsPost operation.
     * @callback module:api/DefaultApi~apiV1FeaturedTagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturedTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a feature a tag.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1FeaturedTagsPostRequest} [apiV1FeaturedTagsPostRequest] 
     * @param {module:api/DefaultApi~apiV1FeaturedTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturedTag}
     */
    apiV1FeaturedTagsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1FeaturedTagsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FeaturedTag;
      return this.apiClient.callApi(
        '/api/v1/featured_tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FeaturedTagsSuggestionsGet operation.
     * @callback module:api/DefaultApi~apiV1FeaturedTagsSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeaturedTag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     * @param {module:api/DefaultApi~apiV1FeaturedTagsSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeaturedTag>}
     */
    apiV1FeaturedTagsSuggestionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeaturedTag];
      return this.apiClient.callApi(
        '/api/v1/featured_tags/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FiltersGet operation.
     * @callback module:api/DefaultApi~apiV1FiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Filter>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~apiV1FiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Filter>}
     */
    apiV1FiltersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Filter];
      return this.apiClient.callApi(
        '/api/v1/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FiltersIdDelete operation.
     * @callback module:api/DefaultApi~apiV1FiltersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a filter.
     * @param {String} id The id of the account in the database
     * @param {module:api/DefaultApi~apiV1FiltersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1FiltersIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FiltersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/filters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FiltersIdGet operation.
     * @callback module:api/DefaultApi~apiV1FiltersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Filter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one filter.
     * @param {String} id The id of the account in the database
     * @param {module:api/DefaultApi~apiV1FiltersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Filter}
     */
    apiV1FiltersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FiltersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Filter;
      return this.apiClient.callApi(
        '/api/v1/filters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FiltersIdPut operation.
     * @callback module:api/DefaultApi~apiV1FiltersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Filter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a filter.
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1FiltersPostRequest} [apiV1FiltersPostRequest] 
     * @param {module:api/DefaultApi~apiV1FiltersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Filter}
     */
    apiV1FiltersIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1FiltersPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FiltersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Filter;
      return this.apiClient.callApi(
        '/api/v1/filters/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FiltersPost operation.
     * @callback module:api/DefaultApi~apiV1FiltersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Filter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1FiltersPostRequest} [apiV1FiltersPostRequest] 
     * @param {module:api/DefaultApi~apiV1FiltersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Filter}
     */
    apiV1FiltersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1FiltersPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Filter;
      return this.apiClient.callApi(
        '/api/v1/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FollowRequestsGet operation.
     * @callback module:api/DefaultApi~apiV1FollowRequestsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pending Follows
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] Maximum number of results to return. Defaults to 40. Paginate using the HTTP Link header.
     * @param {module:api/DefaultApi~apiV1FollowRequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1FollowRequestsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/follow_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FollowRequestsIdAuthorizePost operation.
     * @callback module:api/DefaultApi~apiV1FollowRequestsIdAuthorizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Follow
     * @param {String} id The id of the account in the database
     * @param {module:api/DefaultApi~apiV1FollowRequestsIdAuthorizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1FollowRequestsIdAuthorizePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FollowRequestsIdAuthorizePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/follow_requests/{id}/authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1FollowRequestsIdRejectPost operation.
     * @callback module:api/DefaultApi~apiV1FollowRequestsIdRejectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Follow
     * @param {String} id The id of the account in the database
     * @param {module:api/DefaultApi~apiV1FollowRequestsIdRejectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1FollowRequestsIdRejectPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1FollowRequestsIdRejectPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/follow_requests/{id}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1InstanceActivityGet operation.
     * @callback module:api/DefaultApi~apiV1InstanceActivityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Instance activity over the last 3 months, binned weekly.
     * @param {module:api/DefaultApi~apiV1InstanceActivityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity>}
     */
    apiV1InstanceActivityGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Activity];
      return this.apiClient.callApi(
        '/api/v1/instance/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1InstanceGet operation.
     * @callback module:api/DefaultApi~apiV1InstanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about the server.
     * @param {module:api/DefaultApi~apiV1InstanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    apiV1InstanceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/api/v1/instance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1InstancePeersGet operation.
     * @callback module:api/DefaultApi~apiV1InstancePeersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about the server.
     * @param {module:api/DefaultApi~apiV1InstancePeersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV1InstancePeersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v1/instance/peers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsDelete operation.
     * @callback module:api/DefaultApi~apiV1ListsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a list
     * @param {module:api/DefaultApi~apiV1ListsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1ListsDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/lists', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsGet operation.
     * @callback module:api/DefaultApi~apiV1ListsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all lists that the user owns.
     * @param {module:api/DefaultApi~apiV1ListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    apiV1ListsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/api/v1/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsIdAccountsDelete operation.
     * @callback module:api/DefaultApi~apiV1ListsIdAccountsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove accounts from the given list.
     * @param {String} id ID of the list in the database
     * @param {Array.<String>} accountIds Array of account IDs to add to the list.
     * @param {module:api/DefaultApi~apiV1ListsIdAccountsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1ListsIdAccountsDelete(id, accountIds, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ListsIdAccountsDelete");
      }
      // verify the required parameter 'accountIds' is set
      if (accountIds === undefined || accountIds === null) {
        throw new Error("Missing the required parameter 'accountIds' when calling apiV1ListsIdAccountsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'account_ids': this.apiClient.buildCollectionParam(accountIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/lists/{id}/accounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsIdAccountsGet operation.
     * @callback module:api/DefaultApi~apiV1ListsIdAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View accounts in List
     * @param {String} id ID of the list in the database
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] Maximum number of results. Defaults to 40. Max 40. Set to 0 in order to get all accounts without pagination. Pagination is done with the HTTP Link header.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {module:api/DefaultApi~apiV1ListsIdAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1ListsIdAccountsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ListsIdAccountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/lists/{id}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsIdAccountsPost operation.
     * @callback module:api/DefaultApi~apiV1ListsIdAccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add accounts to the given list. Note that the user must be following these accounts.
     * @param {String} id ID of the list in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1ListsIdAccountsPostRequest} [apiV1ListsIdAccountsPostRequest] 
     * @param {module:api/DefaultApi~apiV1ListsIdAccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1ListsIdAccountsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1ListsIdAccountsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ListsIdAccountsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/lists/{id}/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsIdGet operation.
     * @callback module:api/DefaultApi~apiV1ListsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove converstation
     * @param {String} id ID of the list in the database
     * @param {module:api/DefaultApi~apiV1ListsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    apiV1ListsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ListsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/api/v1/lists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsPost operation.
     * @callback module:api/DefaultApi~apiV1ListsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new list.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1ListsPostRequest} [apiV1ListsPostRequest] 
     * @param {module:api/DefaultApi~apiV1ListsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    apiV1ListsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1ListsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/api/v1/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ListsPut operation.
     * @callback module:api/DefaultApi~apiV1ListsPutCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the title of a list, or which replies to show.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1ListsPutRequest} [apiV1ListsPutRequest] 
     * @param {module:api/DefaultApi~apiV1ListsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    apiV1ListsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1ListsPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/api/v1/lists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MarkersGet operation.
     * @callback module:api/DefaultApi~apiV1MarkersGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get saved timeline position
     * @param {Array.<Object>} timeline Array of markers to fetch. String enum anyOf home, notifications. If not provided, an empty object will be returned.
     * @param {module:api/DefaultApi~apiV1MarkersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1MarkersGet(timeline, callback) {
      let postBody = null;
      // verify the required parameter 'timeline' is set
      if (timeline === undefined || timeline === null) {
        throw new Error("Missing the required parameter 'timeline' when calling apiV1MarkersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeline': this.apiClient.buildCollectionParam(timeline, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/markers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MarkersPost operation.
     * @callback module:api/DefaultApi~apiV1MarkersPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get saved timeline position
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/DefaultApi~apiV1MarkersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1MarkersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/markers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MediaIdGet operation.
     * @callback module:api/DefaultApi~apiV1MediaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an attachement.
     * @param {String} id The id of the Attachment entity to be updated.
     * @param {module:api/DefaultApi~apiV1MediaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    apiV1MediaIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1MediaIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/api/v1/media/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MediaIdPost operation.
     * @callback module:api/DefaultApi~apiV1MediaIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Attachment, before it is attached to a status and posted.
     * @param {String} id The id of the Attachment entity to be updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1MediaPostRequest} [apiV1MediaPostRequest] 
     * @param {module:api/DefaultApi~apiV1MediaIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    apiV1MediaIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1MediaPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1MediaIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/api/v1/media/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MediaPost operation.
     * @callback module:api/DefaultApi~apiV1MediaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an attachment to be used with a new status.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1MediaPostRequest} [apiV1MediaPostRequest] 
     * @param {module:api/DefaultApi~apiV1MediaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    apiV1MediaPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1MediaPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/api/v1/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1MutesGet operation.
     * @callback module:api/DefaultApi~apiV1MutesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts the user has muted.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] 
     * @param {String} [maxId] 
     * @param {String} [sinceId] 
     * @param {module:api/DefaultApi~apiV1MutesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1MutesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/mutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NotificationsClearPost operation.
     * @callback module:api/DefaultApi~apiV1NotificationsClearPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear all notifications from the server.
     * @param {module:api/DefaultApi~apiV1NotificationsClearPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1NotificationsClearPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/notifications/clear', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NotificationsGet operation.
     * @callback module:api/DefaultApi~apiV1NotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {Array.<String>} [excludeTypes] Array of types to exclude (follow, favourite, reblog, mention, poll, follow_request)
     * @param {String} [accountId] Return only notifications received from this account
     * @param {module:api/DefaultApi~apiV1NotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Notification>}
     */
    apiV1NotificationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId'],
        'exclude_types': this.apiClient.buildCollectionParam(opts['excludeTypes'], 'multi'),
        'account_id': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Notification];
      return this.apiClient.callApi(
        '/api/v1/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NotificationsIdDismissPost operation.
     * @callback module:api/DefaultApi~apiV1NotificationsIdDismissPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear a single notification from the server.
     * @param {String} id ID of the notification in the database.
     * @param {module:api/DefaultApi~apiV1NotificationsIdDismissPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    apiV1NotificationsIdDismissPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1NotificationsIdDismissPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/v1/notifications/{id}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NotificationsIdGet operation.
     * @callback module:api/DefaultApi~apiV1NotificationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View information about a notification with a given ID.
     * @param {String} id ID of the notification in the database.
     * @param {module:api/DefaultApi~apiV1NotificationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    apiV1NotificationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1NotificationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/api/v1/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PollsIdGet operation.
     * @callback module:api/DefaultApi~apiV1PollsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a poll.
     * @param {String} id ID of the poll in the database.
     * @param {module:api/DefaultApi~apiV1PollsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poll}
     */
    apiV1PollsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1PollsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Poll;
      return this.apiClient.callApi(
        '/api/v1/polls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PollsIdPost operation.
     * @callback module:api/DefaultApi~apiV1PollsIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vote on a poll.
     * @param {String} id ID of the poll in the database.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1PollsIdPostRequest} [apiV1PollsIdPostRequest] 
     * @param {module:api/DefaultApi~apiV1PollsIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poll}
     */
    apiV1PollsIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1PollsIdPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1PollsIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Poll;
      return this.apiClient.callApi(
        '/api/v1/polls/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PreferencesGet operation.
     * @callback module:api/DefaultApi~apiV1PreferencesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Preferences} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     * @param {module:api/DefaultApi~apiV1PreferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Preferences}
     */
    apiV1PreferencesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Preferences;
      return this.apiClient.callApi(
        '/api/v1/preferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PushSubscriptionDelete operation.
     * @callback module:api/DefaultApi~apiV1PushSubscriptionDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param {module:api/DefaultApi~apiV1PushSubscriptionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1PushSubscriptionDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/push/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PushSubscriptionGet operation.
     * @callback module:api/DefaultApi~apiV1PushSubscriptionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the PushSubscription currently associated with this access token.
     * @param {module:api/DefaultApi~apiV1PushSubscriptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushSubscription}
     */
    apiV1PushSubscriptionGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PushSubscription;
      return this.apiClient.callApi(
        '/api/v1/push/subscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PushSubscriptionPost operation.
     * @callback module:api/DefaultApi~apiV1PushSubscriptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1PushSubscriptionPostRequest} [apiV1PushSubscriptionPostRequest] 
     * @param {module:api/DefaultApi~apiV1PushSubscriptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushSubscription}
     */
    apiV1PushSubscriptionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1PushSubscriptionPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PushSubscription;
      return this.apiClient.callApi(
        '/api/v1/push/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1PushSubscriptionPut operation.
     * @callback module:api/DefaultApi~apiV1PushSubscriptionPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1PushSubscriptionPutRequest} [apiV1PushSubscriptionPutRequest] 
     * @param {module:api/DefaultApi~apiV1PushSubscriptionPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushSubscription}
     */
    apiV1PushSubscriptionPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1PushSubscriptionPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PushSubscription;
      return this.apiClient.callApi(
        '/api/v1/push/subscription', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ReportsPost operation.
     * @callback module:api/DefaultApi~apiV1ReportsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Report} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * File a report.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1ReportsPostRequest} [apiV1ReportsPostRequest] 
     * @param {module:api/DefaultApi~apiV1ReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Report}
     */
    apiV1ReportsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1ReportsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Report;
      return this.apiClient.callApi(
        '/api/v1/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ScheduledStatusesGet operation.
     * @callback module:api/DefaultApi~apiV1ScheduledStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScheduledStatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View scheduled statuses
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1ScheduledStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScheduledStatus>}
     */
    apiV1ScheduledStatusesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScheduledStatus];
      return this.apiClient.callApi(
        '/api/v1/scheduled_statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ScheduledStatusesIdDelete operation.
     * @callback module:api/DefaultApi~apiV1ScheduledStatusesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a scheduled status
     * @param {String} id ID of the scheduled status in the database.
     * @param {module:api/DefaultApi~apiV1ScheduledStatusesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1ScheduledStatusesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/scheduled_statuses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ScheduledStatusesIdGet operation.
     * @callback module:api/DefaultApi~apiV1ScheduledStatusesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a single scheduled status
     * @param {String} id ID of the scheduled status in the database.
     * @param {module:api/DefaultApi~apiV1ScheduledStatusesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledStatus}
     */
    apiV1ScheduledStatusesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScheduledStatus;
      return this.apiClient.callApi(
        '/api/v1/scheduled_statuses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ScheduledStatusesIdPut operation.
     * @callback module:api/DefaultApi~apiV1ScheduledStatusesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View a single scheduled status
     * @param {String} id ID of the scheduled status in the database.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1ScheduledStatusesIdPutRequest} [apiV1ScheduledStatusesIdPutRequest] 
     * @param {module:api/DefaultApi~apiV1ScheduledStatusesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledStatus}
     */
    apiV1ScheduledStatusesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1ScheduledStatusesIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ScheduledStatusesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScheduledStatus;
      return this.apiClient.callApi(
        '/api/v1/scheduled_statuses/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdBookmarkPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdBookmarkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Privately bookmark a status.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdBookmarkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdBookmarkPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdBookmarkPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/bookmark', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdContextGet operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdContextGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Context} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdContextGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Context}
     */
    apiV1StatusesIdContextGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdContextGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Context;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/context', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdDelete operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdFavouritePost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdFavouritePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a status to your favourites list.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdFavouritePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdFavouritePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdFavouritePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/favourite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdFavouritedByGet operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdFavouritedByGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View who favourited a given status.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdFavouritedByGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1StatusesIdFavouritedByGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdFavouritedByGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/favourited_by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdGet operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdMutePost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdMutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdMutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdMutePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdMutePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdPinPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdPinPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Feature one of your own public statuses at the top of your profile.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdPinPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdPinPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdReblogPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdReblogPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reshare a status.
     * @param {String} id Local ID of a status in the database.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1StatusesIdReblogPostRequest} [apiV1StatusesIdReblogPostRequest] 
     * @param {module:api/DefaultApi~apiV1StatusesIdReblogPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdReblogPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1StatusesIdReblogPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdReblogPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/reblog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdRebloggedByGet operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdRebloggedByGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View who boosted a given status.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdRebloggedByGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1StatusesIdRebloggedByGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdRebloggedByGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/reblogged_by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdUnbookmarkPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdUnbookmarkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a status from your private bookmarks.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdUnbookmarkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdUnbookmarkPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdUnbookmarkPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/unbookmark', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdUnfavouritePost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdUnfavouritePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a status from your favourites list.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdUnfavouritePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdUnfavouritePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdUnfavouritePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/unfavourite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdUnmutePost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdUnmutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status's conversation unmuted, or was already unmuted
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdUnmutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdUnmutePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdUnmutePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/unmute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdUnpinPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdUnpinPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfeature a status from the top of your profile.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdUnpinPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdUnpinPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdUnpinPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/unpin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesIdUnreblogPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesIdUnreblogPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undo a reshare of a status.
     * @param {String} id Local ID of a status in the database.
     * @param {module:api/DefaultApi~apiV1StatusesIdUnreblogPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Status}
     */
    apiV1StatusesIdUnreblogPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1StatusesIdUnreblogPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Status;
      return this.apiClient.callApi(
        '/api/v1/statuses/{id}/unreblog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1StatusesPost operation.
     * @callback module:api/DefaultApi~apiV1StatusesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV1StatusesPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] Prevent duplicate submissions of the same status. Idempotency keys are stored for up to 1 hour, and can be any arbitrary string. Consider using a hash or UUID generated client-side.
     * @param {Array.<module:model/ApiV1StatusesPostRequestInner>} [apiV1StatusesPostRequestInner] 
     * @param {module:api/DefaultApi~apiV1StatusesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV1StatusesPost200Response}
     */
    apiV1StatusesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1StatusesPostRequestInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiV1StatusesPost200Response;
      return this.apiClient.callApi(
        '/api/v1/statuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuggestionsGet operation.
     * @callback module:api/DefaultApi~apiV1SuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts the user has had past positive interactions with, but is not yet following.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] Maximum number of results to return. Defaults to 40.
     * @param {module:api/DefaultApi~apiV1SuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1SuggestionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1SuggestionsIdDelete operation.
     * @callback module:api/DefaultApi~apiV1SuggestionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user suggestion
     * @param {String} id id of the account in the database to be removed from suggestions
     * @param {module:api/DefaultApi~apiV1SuggestionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    apiV1SuggestionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1SuggestionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/suggestions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TimelinesHomeGet operation.
     * @callback module:api/DefaultApi~apiV1TimelinesHomeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View statuses from followed users.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [local = false)] Show only local statuses? Defaults to false.
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1TimelinesHomeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1TimelinesHomeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'local': opts['local'],
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/timelines/home', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TimelinesListListIdGet operation.
     * @callback module:api/DefaultApi~apiV1TimelinesListListIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View statuses in the given list timeline.
     * @param {String} listId Local ID of the list in the database.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1TimelinesListListIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1TimelinesListListIdGet(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling apiV1TimelinesListListIdGet");
      }

      let pathParams = {
        'list_id': listId
      };
      let queryParams = {
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/timelines/list/{list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TimelinesPublicGet operation.
     * @callback module:api/DefaultApi~apiV1TimelinesPublicGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public timeline
     * @param {Object} opts Optional parameters
     * @param {Boolean} [local = false)] Show only local statuses? Defaults to false.
     * @param {Boolean} [remote = false)] Show only local statuses? Defaults to false.
     * @param {Boolean} [onlyMedia = false)] Show only statuses with media attached? Defaults to false..
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1TimelinesPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1TimelinesPublicGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'local': opts['local'],
        'remote': opts['remote'],
        'only_media': opts['onlyMedia'],
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/timelines/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TimelinesTagHashtagGet operation.
     * @callback module:api/DefaultApi~apiV1TimelinesTagHashtagGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View public statuses containing the given hashtag.
     * @param {String} hashtag Content of a `#hashtag``, not including `#` symbol..
     * @param {Object} opts Optional parameters
     * @param {Boolean} [local = false)] Show only local statuses? Defaults to false.
     * @param {Boolean} [remote = false)] Show only local statuses? Defaults to false.
     * @param {Boolean} [onlyMedia = false)] Show only statuses with media attached? Defaults to false..
     * @param {Number} [limit = 20)] Max number of results to return. Defaults to 20.
     * @param {String} [maxId] Return results older than ID
     * @param {String} [sinceId] Return results newer than ID
     * @param {String} [minId] Return results immediately newer than ID
     * @param {module:api/DefaultApi~apiV1TimelinesTagHashtagGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1TimelinesTagHashtagGet(hashtag, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hashtag' is set
      if (hashtag === undefined || hashtag === null) {
        throw new Error("Missing the required parameter 'hashtag' when calling apiV1TimelinesTagHashtagGet");
      }

      let pathParams = {
        'hashtag': hashtag
      };
      let queryParams = {
        'local': opts['local'],
        'remote': opts['remote'],
        'only_media': opts['onlyMedia'],
        'limit': opts['limit'],
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'min_id': opts['minId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/timelines/tag/{hashtag}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1TrendsGet operation.
     * @callback module:api/DefaultApi~apiV1TrendsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags that are being used more frequently within the past week.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Max number of results to return. Defaults to 10.
     * @param {module:api/DefaultApi~apiV1TrendsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    apiV1TrendsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/api/v1/trends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2SearchGet operation.
     * @callback module:api/DefaultApi~apiV2SearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiV2SearchGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search results
     * @param {String} q What to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 20)] Maximum number of results. Defaults to 40.
     * @param {String} [resolve] Attempt WebFinger lookup.
     * @param {Boolean} [following] Only who the user is following. Defaults to false.
     * @param {String} [accountId] If provided, statuses returned will be authored only by this account
     * @param {String} [maxId] Return results older than this id
     * @param {String} [minId] Return results immediately newer than this id
     * @param {module:model/String} [type] Enum(accounts, hashtags, statuses)
     * @param {Boolean} [excludeUnreviewed] Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.
     * @param {Number} [offset] Offset in search results. Used for pagination. Defaults to 0.
     * @param {module:api/DefaultApi~apiV2SearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiV2SearchGet200Response}
     */
    apiV2SearchGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling apiV2SearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'limit': opts['limit'],
        'resolve': opts['resolve'],
        'following': opts['following'],
        'account_id': opts['accountId'],
        'max_id': opts['maxId'],
        'min_id': opts['minId'],
        'type': opts['type'],
        'exclude_unreviewed': opts['excludeUnreviewed'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiV2SearchGet200Response;
      return this.apiClient.callApi(
        '/api/v2/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
