/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import ApiV1AccountsIdFollowPostRequest from '../model/ApiV1AccountsIdFollowPostRequest';
import ApiV1AccountsIdMutePostRequest from '../model/ApiV1AccountsIdMutePostRequest';
import ApiV1AccountsIdNotePostRequest from '../model/ApiV1AccountsIdNotePostRequest';
import ApiV1AccountsPostRequest from '../model/ApiV1AccountsPostRequest';
import ApiV1AccountsUpdateCredentialsPatchRequest from '../model/ApiV1AccountsUpdateCredentialsPatchRequest';
import Error from '../model/Error';
import FeaturedTag from '../model/FeaturedTag';
import IdentityProof from '../model/IdentityProof';
import Relationship from '../model/Relationship';
import Status from '../model/Status';

/**
* Accounts service.
* @module api/AccountsApi
* @version 1.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1AccountsIdBlockPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdBlockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdBlockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdBlockPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdBlockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdFeaturedTagsGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdFeaturedTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeaturedTag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags featured by this account.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdFeaturedTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeaturedTag>}
     */
    apiV1AccountsIdFeaturedTagsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdFeaturedTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeaturedTag];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/featured_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdFollowPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdFollowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow the given account. Can also be used to update whether to show reblogs or enable notifications.
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AccountsIdFollowPostRequest} [apiV1AccountsIdFollowPostRequest] 
     * @param {module:api/AccountsApi~apiV1AccountsIdFollowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdFollowPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AccountsIdFollowPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdFollowPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/follow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdFollowersGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdFollowersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts which follow the given account, if network is not hidden by the account owner.
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {String} [maxId] Internal parameter. Use HTTP `Link` header for pagination.
     * @param {String} [sinceId] Internal parameter. Use HTTP `Link` header for pagination.
     * @param {Number} [limit = 40)] Maximum number of results to return. Defaults to 40.
     * @param {module:api/AccountsApi~apiV1AccountsIdFollowersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1AccountsIdFollowersGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdFollowersGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdFollowingGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdFollowingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts which the given account is following, if network is not hidden by the account owner.
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {String} [maxId] Internal parameter. Use HTTP `Link` header for pagination.
     * @param {String} [sinceId] Internal parameter. Use HTTP `Link` header for pagination.
     * @param {Number} [limit = 40)] Maximum number of results to return. Defaults to 40.
     * @param {module:api/AccountsApi~apiV1AccountsIdFollowingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1AccountsIdFollowingGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdFollowingGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'max_id': opts['maxId'],
        'since_id': opts['sinceId'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1AccountsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdIdentityProofsGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdIdentityProofsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IdentityProof>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Array of IdentityProof
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdIdentityProofsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IdentityProof>}
     */
    apiV1AccountsIdIdentityProofsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdIdentityProofsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IdentityProof];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/identity_proofs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdListsGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdListsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User lists that you have added this account to.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    apiV1AccountsIdListsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdListsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdMutePost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdMutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute the given account. Clients should filter statuses and notifications from this account, if received (e.g. due to a boost in the Home timeline).
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AccountsIdMutePostRequest} [apiV1AccountsIdMutePostRequest] 
     * @param {module:api/AccountsApi~apiV1AccountsIdMutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdMutePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AccountsIdMutePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdMutePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdNotePost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdNotePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a private note on a user.
     * @param {String} id The id of the account in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AccountsIdNotePostRequest} [apiV1AccountsIdNotePostRequest] 
     * @param {module:api/AccountsApi~apiV1AccountsIdNotePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdNotePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AccountsIdNotePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdNotePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/note', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdPinPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdPinPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the given account to the user's featured profiles. (Featured profiles are currently shown on the user's own public profile.)
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdPinPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdPinPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdPinPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdStatusesGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Status>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Statuses posted to the given account.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Status>}
     */
    apiV1AccountsIdStatusesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdStatusesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Status];
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdUnblockPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdUnblockPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block the given account. Clients should filter statuses from this account if received (e.g. due to a boost in the Home timeline).
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdUnblockPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdUnblockPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdUnblockPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/unblock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdUnfollowPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdUnfollowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow the given account.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdUnfollowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdUnfollowPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdUnfollowPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/unfollow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdUnmutePost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdUnmutePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute the given account.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdUnmutePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdUnmutePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdUnmutePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/unmute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsIdUnpinPost operation.
     * @callback module:api/AccountsApi~apiV1AccountsIdUnpinPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Relationship} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the given account from the user's featured profiles.
     * @param {String} id The id of the account in the database
     * @param {module:api/AccountsApi~apiV1AccountsIdUnpinPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Relationship}
     */
    apiV1AccountsIdUnpinPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsIdUnpinPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Relationship;
      return this.apiClient.callApi(
        '/api/v1/accounts/{id}/unpin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsPost_0 operation.
     * @callback module:api/AccountsApi~apiV1AccountsPost_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user and account records. Returns an account access token for the app that initiated the request. The app should save this token for later, and should wait for the user to confirm their account by clicking a link in their email inbox.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AccountsPostRequest} [apiV1AccountsPostRequest] 
     * @param {module:api/AccountsApi~apiV1AccountsPost_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1AccountsPost_0(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AccountsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsRelationshipsGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsRelationshipsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Relationship>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a private note on a user.
     * @param {Array.<String>} id Array of account IDs to check
     * @param {module:api/AccountsApi~apiV1AccountsRelationshipsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Relationship>}
     */
    apiV1AccountsRelationshipsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1AccountsRelationshipsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Relationship];
      return this.apiClient.callApi(
        '/api/v1/accounts/relationships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsSearchGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for matching accounts by username or display name.
     * @param {String} q What to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 40)] Maximum number of results. Defaults to 40.
     * @param {String} [resolve] Attempt WebFinger lookup. Defaults to false. Use this when `q` is an exact address.
     * @param {Boolean} [following] Only who the user is following. Defaults to false.
     * @param {module:api/AccountsApi~apiV1AccountsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    apiV1AccountsSearchGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling apiV1AccountsSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'limit': opts['limit'],
        'resolve': opts['resolve'],
        'following': opts['following']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/api/v1/accounts/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsUpdateCredentialsPatch operation.
     * @callback module:api/AccountsApi~apiV1AccountsUpdateCredentialsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the user's display and preferences.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiV1AccountsUpdateCredentialsPatchRequest} [apiV1AccountsUpdateCredentialsPatchRequest] 
     * @param {module:api/AccountsApi~apiV1AccountsUpdateCredentialsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1AccountsUpdateCredentialsPatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiV1AccountsUpdateCredentialsPatchRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/form-data'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/accounts/update_credentials', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1AccountsVerifyCredentialsGet operation.
     * @callback module:api/AccountsApi~apiV1AccountsVerifyCredentialsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test to make sure that the user token works.
     * @param {module:api/AccountsApi~apiV1AccountsVerifyCredentialsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    apiV1AccountsVerifyCredentialsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/v1/accounts/verify_credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
