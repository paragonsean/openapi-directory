/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnouncementReaction model module.
 * @module model/AnnouncementReaction
 * @version 1.0
 */
class AnnouncementReaction {
    /**
     * Constructs a new <code>AnnouncementReaction</code>.
     * Represents an emoji reaction to an Announcement.
     * @alias module:model/AnnouncementReaction
     */
    constructor() { 
        
        AnnouncementReaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnouncementReaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnouncementReaction} obj Optional instance to populate.
     * @return {module:model/AnnouncementReaction} The populated <code>AnnouncementReaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnouncementReaction();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('me')) {
                obj['me'] = ApiClient.convertToType(data['me'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('static_url')) {
                obj['static_url'] = ApiClient.convertToType(data['static_url'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnouncementReaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnouncementReaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['static_url'] && !(typeof data['static_url'] === 'string' || data['static_url'] instanceof String)) {
            throw new Error("Expected the field `static_url` to be a primitive type in the JSON string but got " + data['static_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The total number of users who have added this reaction.
 * @member {Number} count
 */
AnnouncementReaction.prototype['count'] = undefined;

/**
 * Whether the authorized user has added this reaction to the announcement.
 * @member {Boolean} me
 */
AnnouncementReaction.prototype['me'] = undefined;

/**
 * The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.
 * @member {String} name
 */
AnnouncementReaction.prototype['name'] = undefined;

/**
 * A link to a non-animated version of the custom emoji (URL).
 * @member {String} static_url
 */
AnnouncementReaction.prototype['static_url'] = undefined;

/**
 * A link to the custom emoji (URL).
 * @member {String} url
 */
AnnouncementReaction.prototype['url'] = undefined;






export default AnnouncementReaction;

