/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The Report model module.
 * @module model/Report
 * @version 1.0
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * Reports filed against users and/or statuses, to be taken action on by moderators.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('action_taken')) {
                obj['action_taken'] = ApiClient.convertToType(data['action_taken'], 'Boolean');
            }
            if (data.hasOwnProperty('action_taken_at')) {
                obj['action_taken_at'] = ApiClient.convertToType(data['action_taken_at'], 'Date');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('forwarded')) {
                obj['forwarded'] = ApiClient.convertToType(data['forwarded'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rule_ids')) {
                obj['rule_ids'] = ApiClient.convertToType(data['rule_ids'], ['Number']);
            }
            if (data.hasOwnProperty('status_ids')) {
                obj['status_ids'] = ApiClient.convertToType(data['status_ids'], ['Number']);
            }
            if (data.hasOwnProperty('target_account')) {
                obj['target_account'] = Account.constructFromObject(data['target_account']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rule_ids'])) {
            throw new Error("Expected the field `rule_ids` to be an array in the JSON data but got " + data['rule_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status_ids'])) {
            throw new Error("Expected the field `status_ids` to be an array in the JSON data but got " + data['status_ids']);
        }
        // validate the optional field `target_account`
        if (data['target_account']) { // data not null
          Account.validateJSON(data['target_account']);
        }

        return true;
    }


}



/**
 * @member {Boolean} action_taken
 */
Report.prototype['action_taken'] = undefined;

/**
 * @member {Date} action_taken_at
 */
Report.prototype['action_taken_at'] = undefined;

/**
 * @member {module:model/Report.CategoryEnum} category
 */
Report.prototype['category'] = undefined;

/**
 * @member {String} comment
 */
Report.prototype['comment'] = undefined;

/**
 * @member {Date} created_at
 */
Report.prototype['created_at'] = undefined;

/**
 * @member {Boolean} forwarded
 */
Report.prototype['forwarded'] = undefined;

/**
 * @member {String} id
 */
Report.prototype['id'] = undefined;

/**
 * @member {Array.<Number>} rule_ids
 */
Report.prototype['rule_ids'] = undefined;

/**
 * @member {Array.<Number>} status_ids
 */
Report.prototype['status_ids'] = undefined;

/**
 * @member {module:model/Account} target_account
 */
Report.prototype['target_account'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Report['CategoryEnum'] = {

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "spam"
     * @const
     */
    "spam": "spam",

    /**
     * value: "violation"
     * @const
     */
    "violation": "violation"
};



export default Report;

