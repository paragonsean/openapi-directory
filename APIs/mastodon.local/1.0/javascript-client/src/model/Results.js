/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Status from './Status';
import Tag from './Tag';

/**
 * The Results model module.
 * @module model/Results
 * @version 1.0
 */
class Results {
    /**
     * Constructs a new <code>Results</code>.
     * Represents the results of a search.
     * @alias module:model/Results
     * @param accounts {Array.<module:model/Account>} Accounts which match the given query.
     * @param hashtags {Array.<module:model/Tag>} Hashtags which match the given query.
     * @param statuses {Array.<module:model/Status>} Statuses which match the given query.
     */
    constructor(accounts, hashtags, statuses) { 
        
        Results.initialize(this, accounts, hashtags, statuses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts, hashtags, statuses) { 
        obj['accounts'] = accounts;
        obj['hashtags'] = hashtags;
        obj['statuses'] = statuses;
    }

    /**
     * Constructs a <code>Results</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Results} obj Optional instance to populate.
     * @return {module:model/Results} The populated <code>Results</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Results();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [Account]);
            }
            if (data.hasOwnProperty('hashtags')) {
                obj['hashtags'] = ApiClient.convertToType(data['hashtags'], [Tag]);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [Status]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Results</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Results</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Results.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                Account.validateJSON(item);
            };
        }
        if (data['hashtags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hashtags'])) {
                throw new Error("Expected the field `hashtags` to be an array in the JSON data but got " + data['hashtags']);
            }
            // validate the optional field `hashtags` (array)
            for (const item of data['hashtags']) {
                Tag.validateJSON(item);
            };
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                Status.validateJSON(item);
            };
        }

        return true;
    }


}

Results.RequiredProperties = ["accounts", "hashtags", "statuses"];

/**
 * Accounts which match the given query.
 * @member {Array.<module:model/Account>} accounts
 */
Results.prototype['accounts'] = undefined;

/**
 * Hashtags which match the given query.
 * @member {Array.<module:model/Tag>} hashtags
 */
Results.prototype['hashtags'] = undefined;

/**
 * Statuses which match the given query.
 * @member {Array.<module:model/Status>} statuses
 */
Results.prototype['statuses'] = undefined;






export default Results;

