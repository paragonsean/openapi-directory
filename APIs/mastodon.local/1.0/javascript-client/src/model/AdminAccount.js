/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The AdminAccount model module.
 * @module model/AdminAccount
 * @version 1.0
 */
class AdminAccount {
    /**
     * Constructs a new <code>AdminAccount</code>.
     * Admin-level information about a given account.
     * @alias module:model/AdminAccount
     */
    constructor() { 
        
        AdminAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminAccount} obj Optional instance to populate.
     * @return {module:model/AdminAccount} The populated <code>AdminAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminAccount();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('approved')) {
                obj['approved'] = ApiClient.convertToType(data['approved'], 'Boolean');
            }
            if (data.hasOwnProperty('confirmed')) {
                obj['confirmed'] = ApiClient.convertToType(data['confirmed'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by_application_id')) {
                obj['created_by_application_id'] = ApiClient.convertToType(data['created_by_application_id'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invite_request')) {
                obj['invite_request'] = ApiClient.convertToType(data['invite_request'], 'String');
            }
            if (data.hasOwnProperty('invited_by_account_id')) {
                obj['invited_by_account_id'] = ApiClient.convertToType(data['invited_by_account_id'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('silenced')) {
                obj['silenced'] = ApiClient.convertToType(data['silenced'], 'Boolean');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminAccount</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['created_by_application_id'] && !(typeof data['created_by_application_id'] === 'string' || data['created_by_application_id'] instanceof String)) {
            throw new Error("Expected the field `created_by_application_id` to be a primitive type in the JSON string but got " + data['created_by_application_id']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['invite_request'] && !(typeof data['invite_request'] === 'string' || data['invite_request'] instanceof String)) {
            throw new Error("Expected the field `invite_request` to be a primitive type in the JSON string but got " + data['invite_request']);
        }
        // ensure the json data is a string
        if (data['invited_by_account_id'] && !(typeof data['invited_by_account_id'] === 'string' || data['invited_by_account_id'] instanceof String)) {
            throw new Error("Expected the field `invited_by_account_id` to be a primitive type in the JSON string but got " + data['invited_by_account_id']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
AdminAccount.prototype['account'] = undefined;

/**
 * Whether the account is currently approved.
 * @member {Boolean} approved
 */
AdminAccount.prototype['approved'] = undefined;

/**
 * Whether the account has confirmed their email address.
 * @member {Boolean} confirmed
 */
AdminAccount.prototype['confirmed'] = undefined;

/**
 * When the account was first discovered.
 * @member {Date} created_at
 */
AdminAccount.prototype['created_at'] = undefined;

/**
 * The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.
 * @member {String} created_by_application_id
 */
AdminAccount.prototype['created_by_application_id'] = undefined;

/**
 * Whether the account is currently disabled.
 * @member {Boolean} disabled
 */
AdminAccount.prototype['disabled'] = undefined;

/**
 * The email address associated with the account.
 * @member {String} email
 */
AdminAccount.prototype['email'] = undefined;

/**
 * The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.
 * @member {String} id
 */
AdminAccount.prototype['id'] = undefined;

/**
 * Invite request text ???
 * @member {String} invite_request
 */
AdminAccount.prototype['invite_request'] = undefined;

/**
 * The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.
 * @member {String} invited_by_account_id
 */
AdminAccount.prototype['invited_by_account_id'] = undefined;

/**
 * The IP address last used to login to this account.
 * @member {String} ip
 */
AdminAccount.prototype['ip'] = undefined;

/**
 * The locale of the account. ISO 639 Part 1 two-letter language code.
 * @member {String} locale
 */
AdminAccount.prototype['locale'] = undefined;

/**
 * The current role of the account. Enumerable oneOf.
 * @member {String} role
 */
AdminAccount.prototype['role'] = undefined;

/**
 * Whether the account is currently silenced.
 * @member {Boolean} silenced
 */
AdminAccount.prototype['silenced'] = undefined;

/**
 * Whether the account is currently suspended.
 * @member {Boolean} suspended
 */
AdminAccount.prototype['suspended'] = undefined;

/**
 * The username of the account.
 * @member {String} username
 */
AdminAccount.prototype['username'] = undefined;






export default AdminAccount;

