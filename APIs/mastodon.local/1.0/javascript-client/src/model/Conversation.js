/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Status from './Status';

/**
 * The Conversation model module.
 * @module model/Conversation
 * @version 1.0
 */
class Conversation {
    /**
     * Constructs a new <code>Conversation</code>.
     * Represents a conversation with \&quot;direct message\&quot; visibility.
     * @alias module:model/Conversation
     * @param accounts {Array.<module:model/Account>} Participants in the conversation.
     * @param id {String} Local database ID of the conversation. Cast from an integer, but not guaranteed to be a number
     * @param unread {Boolean} Is the conversation currently marked as unread?
     */
    constructor(accounts, id, unread) { 
        
        Conversation.initialize(this, accounts, id, unread);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts, id, unread) { 
        obj['accounts'] = accounts;
        obj['id'] = id;
        obj['unread'] = unread;
    }

    /**
     * Constructs a <code>Conversation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Conversation} obj Optional instance to populate.
     * @return {module:model/Conversation} The populated <code>Conversation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Conversation();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [Account]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_status')) {
                obj['last_status'] = Status.constructFromObject(data['last_status']);
            }
            if (data.hasOwnProperty('unread')) {
                obj['unread'] = ApiClient.convertToType(data['unread'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Conversation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Conversation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Conversation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                Account.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `last_status`
        if (data['last_status']) { // data not null
          Status.validateJSON(data['last_status']);
        }

        return true;
    }


}

Conversation.RequiredProperties = ["accounts", "id", "unread"];

/**
 * Participants in the conversation.
 * @member {Array.<module:model/Account>} accounts
 */
Conversation.prototype['accounts'] = undefined;

/**
 * Local database ID of the conversation. Cast from an integer, but not guaranteed to be a number
 * @member {String} id
 */
Conversation.prototype['id'] = undefined;

/**
 * @member {module:model/Status} last_status
 */
Conversation.prototype['last_status'] = undefined;

/**
 * Is the conversation currently marked as unread?
 * @member {Boolean} unread
 */
Conversation.prototype['unread'] = undefined;






export default Conversation;

