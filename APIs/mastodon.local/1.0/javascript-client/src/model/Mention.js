/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Mention model module.
 * @module model/Mention
 * @version 1.0
 */
class Mention {
    /**
     * Constructs a new <code>Mention</code>.
     * Represents a mention of a user within the content of a status.
     * @alias module:model/Mention
     * @param acct {String} The webfinger acct URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.
     * @param id {String} The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number
     * @param url {String} The location of the mentioned user's profile.
     * @param username {String} The username of the mentioned user.
     */
    constructor(acct, id, url, username) { 
        
        Mention.initialize(this, acct, id, url, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acct, id, url, username) { 
        obj['acct'] = acct;
        obj['id'] = id;
        obj['url'] = url;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>Mention</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mention} obj Optional instance to populate.
     * @return {module:model/Mention} The populated <code>Mention</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mention();

            if (data.hasOwnProperty('acct')) {
                obj['acct'] = ApiClient.convertToType(data['acct'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mention</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mention</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mention.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['acct'] && !(typeof data['acct'] === 'string' || data['acct'] instanceof String)) {
            throw new Error("Expected the field `acct` to be a primitive type in the JSON string but got " + data['acct']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

Mention.RequiredProperties = ["acct", "id", "url", "username"];

/**
 * The webfinger acct URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.
 * @member {String} acct
 */
Mention.prototype['acct'] = undefined;

/**
 * The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number
 * @member {String} id
 */
Mention.prototype['id'] = undefined;

/**
 * The location of the mentioned user's profile.
 * @member {String} url
 */
Mention.prototype['url'] = undefined;

/**
 * The username of the mentioned user.
 * @member {String} username
 */
Mention.prototype['username'] = undefined;






export default Mention;

