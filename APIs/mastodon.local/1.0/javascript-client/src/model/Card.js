/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 1.0
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * Represents a rich preview card that is generated using OpenGraph tags from a URL.
     * @alias module:model/Card
     * @param description {String} Description of preview.
     * @param title {String} Title of linked resource.
     * @param type {module:model/Card.TypeEnum} The type of the preview card. String (Enumerable, oneOf).
     * @param url {String} Location of linked resource.
     */
    constructor(description, title, type, url) { 
        
        Card.initialize(this, description, title, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, title, type, url) { 
        obj['description'] = description;
        obj['title'] = title;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('author_url')) {
                obj['author_url'] = ApiClient.convertToType(data['author_url'], 'String');
            }
            if (data.hasOwnProperty('blurhash')) {
                obj['blurhash'] = ApiClient.convertToType(data['blurhash'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('provider_name')) {
                obj['provider_name'] = ApiClient.convertToType(data['provider_name'], 'String');
            }
            if (data.hasOwnProperty('provider_url')) {
                obj['provider_url'] = ApiClient.convertToType(data['provider_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Card.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }
        // ensure the json data is a string
        if (data['author_url'] && !(typeof data['author_url'] === 'string' || data['author_url'] instanceof String)) {
            throw new Error("Expected the field `author_url` to be a primitive type in the JSON string but got " + data['author_url']);
        }
        // ensure the json data is a string
        if (data['blurhash'] && !(typeof data['blurhash'] === 'string' || data['blurhash'] instanceof String)) {
            throw new Error("Expected the field `blurhash` to be a primitive type in the JSON string but got " + data['blurhash']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['provider_name'] && !(typeof data['provider_name'] === 'string' || data['provider_name'] instanceof String)) {
            throw new Error("Expected the field `provider_name` to be a primitive type in the JSON string but got " + data['provider_name']);
        }
        // ensure the json data is a string
        if (data['provider_url'] && !(typeof data['provider_url'] === 'string' || data['provider_url'] instanceof String)) {
            throw new Error("Expected the field `provider_url` to be a primitive type in the JSON string but got " + data['provider_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Card.RequiredProperties = ["description", "title", "type", "url"];

/**
 * The author of the original resource.
 * @member {String} author_name
 */
Card.prototype['author_name'] = undefined;

/**
 * A link to the author of the original resource.
 * @member {String} author_url
 */
Card.prototype['author_url'] = undefined;

/**
 * A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
 * @member {String} blurhash
 */
Card.prototype['blurhash'] = undefined;

/**
 * Description of preview.
 * @member {String} description
 */
Card.prototype['description'] = undefined;

/**
 * Height of preview, in pixels.
 * @member {Number} height
 */
Card.prototype['height'] = undefined;

/**
 * HTML to be used for generating the preview card.
 * @member {String} html
 */
Card.prototype['html'] = undefined;

/**
 * Preview thumbnail (URL).
 * @member {String} image
 */
Card.prototype['image'] = undefined;

/**
 * The provider of the original resource.
 * @member {String} provider_name
 */
Card.prototype['provider_name'] = undefined;

/**
 * A link to the provider of the original resource.
 * @member {String} provider_url
 */
Card.prototype['provider_url'] = undefined;

/**
 * Title of linked resource.
 * @member {String} title
 */
Card.prototype['title'] = undefined;

/**
 * The type of the preview card. String (Enumerable, oneOf).
 * @member {module:model/Card.TypeEnum} type
 */
Card.prototype['type'] = undefined;

/**
 * Location of linked resource.
 * @member {String} url
 */
Card.prototype['url'] = undefined;

/**
 * Width of preview, in pixels.
 * @member {Number} width
 */
Card.prototype['width'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Card['TypeEnum'] = {

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "photo"
     * @const
     */
    "photo": "photo",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "rich"
     * @const
     */
    "rich": "rich"
};



export default Card;

