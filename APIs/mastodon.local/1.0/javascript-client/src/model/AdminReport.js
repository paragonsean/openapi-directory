/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Status from './Status';

/**
 * The AdminReport model module.
 * @module model/AdminReport
 * @version 1.0
 */
class AdminReport {
    /**
     * Constructs a new <code>AdminReport</code>.
     * Admin-level information about a filed report.
     * @alias module:model/AdminReport
     */
    constructor() { 
        
        AdminReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminReport} obj Optional instance to populate.
     * @return {module:model/AdminReport} The populated <code>AdminReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminReport();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('action_taken')) {
                obj['action_taken'] = ApiClient.convertToType(data['action_taken'], 'String');
            }
            if (data.hasOwnProperty('assigned_account')) {
                obj['assigned_account'] = Account.constructFromObject(data['assigned_account']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [Status]);
            }
            if (data.hasOwnProperty('target_account')) {
                obj['target_account'] = Account.constructFromObject(data['target_account']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminReport</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['action_taken'] && !(typeof data['action_taken'] === 'string' || data['action_taken'] instanceof String)) {
            throw new Error("Expected the field `action_taken` to be a primitive type in the JSON string but got " + data['action_taken']);
        }
        // validate the optional field `assigned_account`
        if (data['assigned_account']) { // data not null
          Account.validateJSON(data['assigned_account']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                Status.validateJSON(item);
            };
        }
        // validate the optional field `target_account`
        if (data['target_account']) { // data not null
          Account.validateJSON(data['target_account']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
AdminReport.prototype['account'] = undefined;

/**
 * The action taken to resolve this report. Enumerable oneOf.
 * @member {String} action_taken
 */
AdminReport.prototype['action_taken'] = undefined;

/**
 * @member {module:model/Account} assigned_account
 */
AdminReport.prototype['assigned_account'] = undefined;

/**
 * An optional reason for reporting.
 * @member {String} comment
 */
AdminReport.prototype['comment'] = undefined;

/**
 * The time the report was filed.
 * @member {Date} created_at
 */
AdminReport.prototype['created_at'] = undefined;

/**
 * The ID of the report in the database. Cast from an integer, but not guaranteed to be a number.
 * @member {String} id
 */
AdminReport.prototype['id'] = undefined;

/**
 * Statuses attached to the report, for context.
 * @member {Array.<module:model/Status>} statuses
 */
AdminReport.prototype['statuses'] = undefined;

/**
 * @member {module:model/Account} target_account
 */
AdminReport.prototype['target_account'] = undefined;

/**
 * The time of last action on this report.
 * @member {Date} updated_at
 */
AdminReport.prototype['updated_at'] = undefined;






export default AdminReport;

