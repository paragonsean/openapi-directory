/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 1.0
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * Represents the software instance of Mastodon running on this domain.
     * @alias module:model/Instance
     * @param approvalRequired {Boolean} Whether registrations require moderator approval.
     * @param description {String} Admin-defined description of the Mastodon site.
     * @param email {String} An email that may be contacted for any inquiries.
     * @param invitesEnabled {Boolean} Whether invites are enabled.
     * @param languages {Array.<String>} Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.
     * @param registrations {Boolean} Whether registrations are enabled.
     * @param shortDescription {String} A shorter description defined by the admin.
     * @param stats {Object} Statistics about how much information the instance contains.
     * @param title {String} The title of the website.
     * @param uri {String} The domain name of the instance.
     * @param urls {Object} URLs of interest for clients apps.
     * @param version {String} The version of Mastodon installed on the instance.
     */
    constructor(approvalRequired, description, email, invitesEnabled, languages, registrations, shortDescription, stats, title, uri, urls, version) { 
        
        Instance.initialize(this, approvalRequired, description, email, invitesEnabled, languages, registrations, shortDescription, stats, title, uri, urls, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, approvalRequired, description, email, invitesEnabled, languages, registrations, shortDescription, stats, title, uri, urls, version) { 
        obj['approval_required'] = approvalRequired;
        obj['description'] = description;
        obj['email'] = email;
        obj['invites_enabled'] = invitesEnabled;
        obj['languages'] = languages;
        obj['registrations'] = registrations;
        obj['short_description'] = shortDescription;
        obj['stats'] = stats;
        obj['title'] = title;
        obj['uri'] = uri;
        obj['urls'] = urls;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('approval_required')) {
                obj['approval_required'] = ApiClient.convertToType(data['approval_required'], 'Boolean');
            }
            if (data.hasOwnProperty('contact_account')) {
                obj['contact_account'] = Account.constructFromObject(data['contact_account']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('invites_enabled')) {
                obj['invites_enabled'] = ApiClient.convertToType(data['invites_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('registrations')) {
                obj['registrations'] = ApiClient.convertToType(data['registrations'], 'Boolean');
            }
            if (data.hasOwnProperty('short_description')) {
                obj['short_description'] = ApiClient.convertToType(data['short_description'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ApiClient.convertToType(data['stats'], Object);
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], Object);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Instance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contact_account`
        if (data['contact_account']) { // data not null
          Account.validateJSON(data['contact_account']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languages'])) {
            throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['short_description'] && !(typeof data['short_description'] === 'string' || data['short_description'] instanceof String)) {
            throw new Error("Expected the field `short_description` to be a primitive type in the JSON string but got " + data['short_description']);
        }
        // ensure the json data is a string
        if (data['thumbnail'] && !(typeof data['thumbnail'] === 'string' || data['thumbnail'] instanceof String)) {
            throw new Error("Expected the field `thumbnail` to be a primitive type in the JSON string but got " + data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Instance.RequiredProperties = ["approval_required", "description", "email", "invites_enabled", "languages", "registrations", "short_description", "stats", "title", "uri", "urls", "version"];

/**
 * Whether registrations require moderator approval.
 * @member {Boolean} approval_required
 */
Instance.prototype['approval_required'] = undefined;

/**
 * @member {module:model/Account} contact_account
 */
Instance.prototype['contact_account'] = undefined;

/**
 * Admin-defined description of the Mastodon site.
 * @member {String} description
 */
Instance.prototype['description'] = undefined;

/**
 * An email that may be contacted for any inquiries.
 * @member {String} email
 */
Instance.prototype['email'] = undefined;

/**
 * Whether invites are enabled.
 * @member {Boolean} invites_enabled
 */
Instance.prototype['invites_enabled'] = undefined;

/**
 * Primary languages of the website and its staff. ISO 639 Part 1-5 language codes.
 * @member {Array.<String>} languages
 */
Instance.prototype['languages'] = undefined;

/**
 * Whether registrations are enabled.
 * @member {Boolean} registrations
 */
Instance.prototype['registrations'] = undefined;

/**
 * A shorter description defined by the admin.
 * @member {String} short_description
 */
Instance.prototype['short_description'] = undefined;

/**
 * Statistics about how much information the instance contains.
 * @member {Object} stats
 */
Instance.prototype['stats'] = undefined;

/**
 * Banner image for the website.
 * @member {String} thumbnail
 */
Instance.prototype['thumbnail'] = undefined;

/**
 * The title of the website.
 * @member {String} title
 */
Instance.prototype['title'] = undefined;

/**
 * The domain name of the instance.
 * @member {String} uri
 */
Instance.prototype['uri'] = undefined;

/**
 * URLs of interest for clients apps.
 * @member {Object} urls
 */
Instance.prototype['urls'] = undefined;

/**
 * The version of Mastodon installed on the instance.
 * @member {String} version
 */
Instance.prototype['version'] = undefined;






export default Instance;

