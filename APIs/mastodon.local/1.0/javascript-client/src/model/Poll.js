/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Emoji from './Emoji';

/**
 * The Poll model module.
 * @module model/Poll
 * @version 1.0
 */
class Poll {
    /**
     * Constructs a new <code>Poll</code>.
     * Represents a poll attached to a status.
     * @alias module:model/Poll
     */
    constructor() { 
        
        Poll.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Poll</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Poll} obj Optional instance to populate.
     * @return {module:model/Poll} The populated <code>Poll</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Poll();

            if (data.hasOwnProperty('emojis')) {
                obj['emojis'] = ApiClient.convertToType(data['emojis'], [Emoji]);
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('multiple')) {
                obj['multiple'] = ApiClient.convertToType(data['multiple'], 'Boolean');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Object]);
            }
            if (data.hasOwnProperty('own_votes')) {
                obj['own_votes'] = ApiClient.convertToType(data['own_votes'], ['Number']);
            }
            if (data.hasOwnProperty('voted')) {
                obj['voted'] = ApiClient.convertToType(data['voted'], 'Boolean');
            }
            if (data.hasOwnProperty('voters_count')) {
                obj['voters_count'] = ApiClient.convertToType(data['voters_count'], 'Number');
            }
            if (data.hasOwnProperty('votes_count')) {
                obj['votes_count'] = ApiClient.convertToType(data['votes_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Poll</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Poll</code>.
     */
    static validateJSON(data) {
        if (data['emojis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emojis'])) {
                throw new Error("Expected the field `emojis` to be an array in the JSON data but got " + data['emojis']);
            }
            // validate the optional field `emojis` (array)
            for (const item of data['emojis']) {
                Emoji.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['own_votes'])) {
            throw new Error("Expected the field `own_votes` to be an array in the JSON data but got " + data['own_votes']);
        }

        return true;
    }


}



/**
 * Custom emoji to be used for rendering poll options.
 * @member {Array.<module:model/Emoji>} emojis
 */
Poll.prototype['emojis'] = undefined;

/**
 * Is the poll currently expired?
 * @member {Boolean} expired
 */
Poll.prototype['expired'] = undefined;

/**
 * When the poll ends. ISO 8601 Datetime, or null if the poll does not end.
 * @member {Date} expires_at
 */
Poll.prototype['expires_at'] = undefined;

/**
 * The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.
 * @member {String} id
 */
Poll.prototype['id'] = undefined;

/**
 * Does the poll allow multiple-choice answers?
 * @member {Boolean} multiple
 */
Poll.prototype['multiple'] = undefined;

/**
 * Possible answers for the poll.
 * @member {Array.<Object>} options
 */
Poll.prototype['options'] = undefined;

/**
 * When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user
 * @member {Array.<Number>} own_votes
 */
Poll.prototype['own_votes'] = undefined;

/**
 * When called with a user token, has the authorized user voted? Boolean, or null if no current user
 * @member {Boolean} voted
 */
Poll.prototype['voted'] = undefined;

/**
 * How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.
 * @member {Number} voters_count
 */
Poll.prototype['voters_count'] = undefined;

/**
 * How many votes have been received.
 * @member {Number} votes_count
 */
Poll.prototype['votes_count'] = undefined;






export default Poll;

