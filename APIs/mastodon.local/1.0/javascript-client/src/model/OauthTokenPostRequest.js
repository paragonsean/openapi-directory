/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OauthTokenPostRequest model module.
 * @module model/OauthTokenPostRequest
 * @version 1.0
 */
class OauthTokenPostRequest {
    /**
     * Constructs a new <code>OauthTokenPostRequest</code>.
     * @alias module:model/OauthTokenPostRequest
     * @param clientId {String} Client ID, obtained during app registration
     * @param clientSecret {String} Client secret, obtained during app registration
     * @param grantType {String} Set equal to authorization_code if code is provided in order to gain user-level access. Otherwise, set equal to client_credentials to obtain app-level access only.
     * @param redirectUri {String} Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the redirect URIs declared during app registration.
     */
    constructor(clientId, clientSecret, grantType, redirectUri) { 
        
        OauthTokenPostRequest.initialize(this, clientId, clientSecret, grantType, redirectUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, clientSecret, grantType, redirectUri) { 
        obj['client_id'] = clientId;
        obj['client_secret'] = clientSecret;
        obj['grant_type'] = grantType;
        obj['redirect_uri'] = redirectUri;
    }

    /**
     * Constructs a <code>OauthTokenPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OauthTokenPostRequest} obj Optional instance to populate.
     * @return {module:model/OauthTokenPostRequest} The populated <code>OauthTokenPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OauthTokenPostRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_secret')) {
                obj['client_secret'] = ApiClient.convertToType(data['client_secret'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OauthTokenPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OauthTokenPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OauthTokenPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_secret'] && !(typeof data['client_secret'] === 'string' || data['client_secret'] instanceof String)) {
            throw new Error("Expected the field `client_secret` to be a primitive type in the JSON string but got " + data['client_secret']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }
        // ensure the json data is a string
        if (data['redirect_uri'] && !(typeof data['redirect_uri'] === 'string' || data['redirect_uri'] instanceof String)) {
            throw new Error("Expected the field `redirect_uri` to be a primitive type in the JSON string but got " + data['redirect_uri']);
        }
        // ensure the json data is a string
        if (data['scopes'] && !(typeof data['scopes'] === 'string' || data['scopes'] instanceof String)) {
            throw new Error("Expected the field `scopes` to be a primitive type in the JSON string but got " + data['scopes']);
        }

        return true;
    }


}

OauthTokenPostRequest.RequiredProperties = ["client_id", "client_secret", "grant_type", "redirect_uri"];

/**
 * Client ID, obtained during app registration
 * @member {String} client_id
 */
OauthTokenPostRequest.prototype['client_id'] = undefined;

/**
 * Client secret, obtained during app registration
 * @member {String} client_secret
 */
OauthTokenPostRequest.prototype['client_secret'] = undefined;

/**
 * A user authorization code, obtained via /oauth/authorize
 * @member {String} code
 */
OauthTokenPostRequest.prototype['code'] = undefined;

/**
 * Set equal to authorization_code if code is provided in order to gain user-level access. Otherwise, set equal to client_credentials to obtain app-level access only.
 * @member {String} grant_type
 */
OauthTokenPostRequest.prototype['grant_type'] = undefined;

/**
 * Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the redirect URIs declared during app registration.
 * @member {String} redirect_uri
 */
OauthTokenPostRequest.prototype['redirect_uri'] = undefined;

/**
 * List of requested OAuth scopes, separated by spaces. Must be a subset of scopes declared during app registration. If not provided, defaults to read.
 * @member {String} scopes
 */
OauthTokenPostRequest.prototype['scopes'] = undefined;






export default OauthTokenPostRequest;

