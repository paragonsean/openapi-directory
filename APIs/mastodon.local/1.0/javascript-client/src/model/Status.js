/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Application from './Application';
import Attachment from './Attachment';
import Card from './Card';
import Emoji from './Emoji';
import Mention from './Mention';
import Poll from './Poll';
import Tag from './Tag';

/**
 * The Status model module.
 * @module model/Status
 * @version 1.0
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * Represents a status posted by an account.
     * @alias module:model/Status
     */
    constructor() { 
        
        Status.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = Application.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('bookmarked')) {
                obj['bookmarked'] = ApiClient.convertToType(data['bookmarked'], 'Boolean');
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('emojis')) {
                obj['emojis'] = ApiClient.convertToType(data['emojis'], [Emoji]);
            }
            if (data.hasOwnProperty('favourited')) {
                obj['favourited'] = ApiClient.convertToType(data['favourited'], 'Boolean');
            }
            if (data.hasOwnProperty('favourites_count')) {
                obj['favourites_count'] = ApiClient.convertToType(data['favourites_count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('in_reply_to_account_id')) {
                obj['in_reply_to_account_id'] = ApiClient.convertToType(data['in_reply_to_account_id'], 'String');
            }
            if (data.hasOwnProperty('in_reply_to_id')) {
                obj['in_reply_to_id'] = ApiClient.convertToType(data['in_reply_to_id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('media_attachments')) {
                obj['media_attachments'] = ApiClient.convertToType(data['media_attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('mentions')) {
                obj['mentions'] = ApiClient.convertToType(data['mentions'], [Mention]);
            }
            if (data.hasOwnProperty('muted')) {
                obj['muted'] = ApiClient.convertToType(data['muted'], 'Boolean');
            }
            if (data.hasOwnProperty('pinned')) {
                obj['pinned'] = ApiClient.convertToType(data['pinned'], 'Boolean');
            }
            if (data.hasOwnProperty('poll')) {
                obj['poll'] = Poll.constructFromObject(data['poll']);
            }
            if (data.hasOwnProperty('reblog')) {
                obj['reblog'] = Status.constructFromObject(data['reblog']);
            }
            if (data.hasOwnProperty('reblogged')) {
                obj['reblogged'] = ApiClient.convertToType(data['reblogged'], 'Boolean');
            }
            if (data.hasOwnProperty('reblogs_count')) {
                obj['reblogs_count'] = ApiClient.convertToType(data['reblogs_count'], 'Number');
            }
            if (data.hasOwnProperty('replies_count')) {
                obj['replies_count'] = ApiClient.convertToType(data['replies_count'], 'Number');
            }
            if (data.hasOwnProperty('sensitive')) {
                obj['sensitive'] = ApiClient.convertToType(data['sensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('spoiler_text')) {
                obj['spoiler_text'] = ApiClient.convertToType(data['spoiler_text'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        // validate the optional field `application`
        if (data['application']) { // data not null
          Application.validateJSON(data['application']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['emojis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emojis'])) {
                throw new Error("Expected the field `emojis` to be an array in the JSON data but got " + data['emojis']);
            }
            // validate the optional field `emojis` (array)
            for (const item of data['emojis']) {
                Emoji.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['in_reply_to_account_id'] && !(typeof data['in_reply_to_account_id'] === 'string' || data['in_reply_to_account_id'] instanceof String)) {
            throw new Error("Expected the field `in_reply_to_account_id` to be a primitive type in the JSON string but got " + data['in_reply_to_account_id']);
        }
        // ensure the json data is a string
        if (data['in_reply_to_id'] && !(typeof data['in_reply_to_id'] === 'string' || data['in_reply_to_id'] instanceof String)) {
            throw new Error("Expected the field `in_reply_to_id` to be a primitive type in the JSON string but got " + data['in_reply_to_id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        if (data['media_attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media_attachments'])) {
                throw new Error("Expected the field `media_attachments` to be an array in the JSON data but got " + data['media_attachments']);
            }
            // validate the optional field `media_attachments` (array)
            for (const item of data['media_attachments']) {
                Attachment.validateJSON(item);
            };
        }
        if (data['mentions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentions'])) {
                throw new Error("Expected the field `mentions` to be an array in the JSON data but got " + data['mentions']);
            }
            // validate the optional field `mentions` (array)
            for (const item of data['mentions']) {
                Mention.validateJSON(item);
            };
        }
        // validate the optional field `poll`
        if (data['poll']) { // data not null
          Poll.validateJSON(data['poll']);
        }
        // validate the optional field `reblog`
        if (data['reblog']) { // data not null
          Status.validateJSON(data['reblog']);
        }
        // ensure the json data is a string
        if (data['spoiler_text'] && !(typeof data['spoiler_text'] === 'string' || data['spoiler_text'] instanceof String)) {
            throw new Error("Expected the field `spoiler_text` to be a primitive type in the JSON string but got " + data['spoiler_text']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
Status.prototype['account'] = undefined;

/**
 * @member {module:model/Application} application
 */
Status.prototype['application'] = undefined;

/**
 * Have you bookmarked this status?
 * @member {Boolean} bookmarked
 */
Status.prototype['bookmarked'] = undefined;

/**
 * @member {module:model/Card} card
 */
Status.prototype['card'] = undefined;

/**
 * HTML-encoded status content.
 * @member {String} content
 */
Status.prototype['content'] = undefined;

/**
 * The date when this status was created.
 * @member {Date} created_at
 */
Status.prototype['created_at'] = undefined;

/**
 * Custom emoji to be used when rendering status content.
 * @member {Array.<module:model/Emoji>} emojis
 */
Status.prototype['emojis'] = undefined;

/**
 * Have you favourited this status?
 * @member {Boolean} favourited
 */
Status.prototype['favourited'] = undefined;

/**
 * How many favourites this status has received.
 * @member {Number} favourites_count
 */
Status.prototype['favourites_count'] = undefined;

/**
 * ID of the status in the database. Cast from an integer but not guaranteed to be a number.
 * @member {String} id
 */
Status.prototype['id'] = undefined;

/**
 * ID of the account being replied to.
 * @member {String} in_reply_to_account_id
 */
Status.prototype['in_reply_to_account_id'] = undefined;

/**
 * ID of the status being replied. Cast from an integer but not guaranteed to be a number.
 * @member {String} in_reply_to_id
 */
Status.prototype['in_reply_to_id'] = undefined;

/**
 * Primary language of this status. ISO 639 Part 1 two-letter language code.
 * @member {String} language
 */
Status.prototype['language'] = undefined;

/**
 * Media that is attached to this status.
 * @member {Array.<module:model/Attachment>} media_attachments
 */
Status.prototype['media_attachments'] = undefined;

/**
 * Mentions of users within the status content.
 * @member {Array.<module:model/Mention>} mentions
 */
Status.prototype['mentions'] = undefined;

/**
 * Have you muted notifications for this status's conversation?
 * @member {Boolean} muted
 */
Status.prototype['muted'] = undefined;

/**
 * Have you pinned this status? Only appears if the status is pinnable.
 * @member {Boolean} pinned
 */
Status.prototype['pinned'] = undefined;

/**
 * @member {module:model/Poll} poll
 */
Status.prototype['poll'] = undefined;

/**
 * @member {module:model/Status} reblog
 */
Status.prototype['reblog'] = undefined;

/**
 * Have you boosted this status?
 * @member {Boolean} reblogged
 */
Status.prototype['reblogged'] = undefined;

/**
 * How many boosts this status has received.
 * @member {Number} reblogs_count
 */
Status.prototype['reblogs_count'] = undefined;

/**
 * How many replies this status has received.
 * @member {Number} replies_count
 */
Status.prototype['replies_count'] = undefined;

/**
 * Is this status marked as sensitive content?
 * @member {Boolean} sensitive
 */
Status.prototype['sensitive'] = undefined;

/**
 * Subject or summary line, below which status content is collapsed until expanded.
 * @member {String} spoiler_text
 */
Status.prototype['spoiler_text'] = undefined;

/**
 * Hashtags used within the status content.
 * @member {Array.<module:model/Tag>} tags
 */
Status.prototype['tags'] = undefined;

/**
 * Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.
 * @member {String} text
 */
Status.prototype['text'] = undefined;

/**
 * URI of the status used for federation.
 * @member {String} uri
 */
Status.prototype['uri'] = undefined;

/**
 * A link to the status's HTML representation.
 * @member {String} url
 */
Status.prototype['url'] = undefined;

/**
 * Visibility of this status.
 * @member {module:model/Status.VisibilityEnum} visibility
 */
Status.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
Status['VisibilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "direct"
     * @const
     */
    "direct": "direct"
};



export default Status;

