/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Emoji model module.
 * @module model/Emoji
 * @version 1.0
 */
class Emoji {
    /**
     * Constructs a new <code>Emoji</code>.
     * Represents a custom emoji.
     * @alias module:model/Emoji
     * @param shortcode {String} The name of the custom emoji.
     * @param staticUrl {String} A link to a static copy of the custom emoji. The format is URL.
     * @param url {String} A link to the custom emoji. The format is URL.
     * @param visibleInPicker {Boolean} Whether this Emoji should be visible in the picker or unlisted.
     */
    constructor(shortcode, staticUrl, url, visibleInPicker) { 
        
        Emoji.initialize(this, shortcode, staticUrl, url, visibleInPicker);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shortcode, staticUrl, url, visibleInPicker) { 
        obj['shortcode'] = shortcode;
        obj['static_url'] = staticUrl;
        obj['url'] = url;
        obj['visible_in_picker'] = visibleInPicker;
    }

    /**
     * Constructs a <code>Emoji</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Emoji} obj Optional instance to populate.
     * @return {module:model/Emoji} The populated <code>Emoji</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Emoji();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('shortcode')) {
                obj['shortcode'] = ApiClient.convertToType(data['shortcode'], 'String');
            }
            if (data.hasOwnProperty('static_url')) {
                obj['static_url'] = ApiClient.convertToType(data['static_url'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('visible_in_picker')) {
                obj['visible_in_picker'] = ApiClient.convertToType(data['visible_in_picker'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Emoji</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Emoji</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Emoji.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['shortcode'] && !(typeof data['shortcode'] === 'string' || data['shortcode'] instanceof String)) {
            throw new Error("Expected the field `shortcode` to be a primitive type in the JSON string but got " + data['shortcode']);
        }
        // ensure the json data is a string
        if (data['static_url'] && !(typeof data['static_url'] === 'string' || data['static_url'] instanceof String)) {
            throw new Error("Expected the field `static_url` to be a primitive type in the JSON string but got " + data['static_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Emoji.RequiredProperties = ["shortcode", "static_url", "url", "visible_in_picker"];

/**
 * Used for sorting custom emoji in the picker.
 * @member {String} category
 */
Emoji.prototype['category'] = undefined;

/**
 * The name of the custom emoji.
 * @member {String} shortcode
 */
Emoji.prototype['shortcode'] = undefined;

/**
 * A link to a static copy of the custom emoji. The format is URL.
 * @member {String} static_url
 */
Emoji.prototype['static_url'] = undefined;

/**
 * A link to the custom emoji. The format is URL.
 * @member {String} url
 */
Emoji.prototype['url'] = undefined;

/**
 * Whether this Emoji should be visible in the picker or unlisted.
 * @member {Boolean} visible_in_picker
 */
Emoji.prototype['visible_in_picker'] = undefined;






export default Emoji;

