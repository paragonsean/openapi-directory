/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Announcement model module.
 * @module model/Announcement
 * @version 1.0
 */
class Announcement {
    /**
     * Constructs a new <code>Announcement</code>.
     * Represents an announcement set by an administrator.
     * @alias module:model/Announcement
     * @param allDay {Boolean} Whether the announcement has a start/end time.
     * @param createdAt {String} When the announcement was created.
     * @param id {String} The announcement id. Cast from an integer, but not guaranteed to be a number.
     * @param published {Boolean} Whether the announcement is currently active.
     * @param read {Boolean} Whether the announcement has been read by the user.
     * @param text {String} The content of the announcement.
     * @param updatedAt {String} When the announcement was last updated. ISO 8601 Datetime.
     */
    constructor(allDay, createdAt, id, published, read, text, updatedAt) { 
        
        Announcement.initialize(this, allDay, createdAt, id, published, read, text, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allDay, createdAt, id, published, read, text, updatedAt) { 
        obj['all_day'] = allDay;
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['published'] = published;
        obj['read'] = read;
        obj['text'] = text;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Announcement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Announcement} obj Optional instance to populate.
     * @return {module:model/Announcement} The populated <code>Announcement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Announcement();

            if (data.hasOwnProperty('all_day')) {
                obj['all_day'] = ApiClient.convertToType(data['all_day'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('ends_at')) {
                obj['ends_at'] = ApiClient.convertToType(data['ends_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('read')) {
                obj['read'] = ApiClient.convertToType(data['read'], 'Boolean');
            }
            if (data.hasOwnProperty('scheduled_at')) {
                obj['scheduled_at'] = ApiClient.convertToType(data['scheduled_at'], 'String');
            }
            if (data.hasOwnProperty('starts_at')) {
                obj['starts_at'] = ApiClient.convertToType(data['starts_at'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Announcement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Announcement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Announcement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['ends_at'] && !(typeof data['ends_at'] === 'string' || data['ends_at'] instanceof String)) {
            throw new Error("Expected the field `ends_at` to be a primitive type in the JSON string but got " + data['ends_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['scheduled_at'] && !(typeof data['scheduled_at'] === 'string' || data['scheduled_at'] instanceof String)) {
            throw new Error("Expected the field `scheduled_at` to be a primitive type in the JSON string but got " + data['scheduled_at']);
        }
        // ensure the json data is a string
        if (data['starts_at'] && !(typeof data['starts_at'] === 'string' || data['starts_at'] instanceof String)) {
            throw new Error("Expected the field `starts_at` to be a primitive type in the JSON string but got " + data['starts_at']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

Announcement.RequiredProperties = ["all_day", "created_at", "id", "published", "read", "text", "updated_at"];

/**
 * Whether the announcement has a start/end time.
 * @member {Boolean} all_day
 */
Announcement.prototype['all_day'] = undefined;

/**
 * When the announcement was created.
 * @member {String} created_at
 */
Announcement.prototype['created_at'] = undefined;

/**
 * When the future announcement will end. ISO 8601 Datetime.
 * @member {String} ends_at
 */
Announcement.prototype['ends_at'] = undefined;

/**
 * The announcement id. Cast from an integer, but not guaranteed to be a number.
 * @member {String} id
 */
Announcement.prototype['id'] = undefined;

/**
 * Whether the announcement is currently active.
 * @member {Boolean} published
 */
Announcement.prototype['published'] = undefined;

/**
 * Whether the announcement has been read by the user.
 * @member {Boolean} read
 */
Announcement.prototype['read'] = undefined;

/**
 * When the future announcement was scheduled. ISO 8601 Datetime.
 * @member {String} scheduled_at
 */
Announcement.prototype['scheduled_at'] = undefined;

/**
 * When the future announcement will start. ISO 8601 Datetime.
 * @member {String} starts_at
 */
Announcement.prototype['starts_at'] = undefined;

/**
 * The content of the announcement.
 * @member {String} text
 */
Announcement.prototype['text'] = undefined;

/**
 * When the announcement was last updated. ISO 8601 Datetime.
 * @member {String} updated_at
 */
Announcement.prototype['updated_at'] = undefined;






export default Announcement;

