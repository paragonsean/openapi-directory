/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Field from './Field';

/**
 * The Source model module.
 * @module model/Source
 * @version 1.0
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * Represents display or publishing preferences of user&#39;s own account. Returned as an additional entity when verifying and updated credentials, as an attribute of Account.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [Field]);
            }
            if (data.hasOwnProperty('follow_requests_count')) {
                obj['follow_requests_count'] = ApiClient.convertToType(data['follow_requests_count'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ApiClient.convertToType(data['privacy'], 'String');
            }
            if (data.hasOwnProperty('sensitive')) {
                obj['sensitive'] = ApiClient.convertToType(data['sensitive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                Field.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['privacy'] && !(typeof data['privacy'] === 'string' || data['privacy'] instanceof String)) {
            throw new Error("Expected the field `privacy` to be a primitive type in the JSON string but got " + data['privacy']);
        }

        return true;
    }


}



/**
 * Metadata about the account.
 * @member {Array.<module:model/Field>} fields
 */
Source.prototype['fields'] = undefined;

/**
 * The number of pending follow requests
 * @member {Number} follow_requests_count
 */
Source.prototype['follow_requests_count'] = undefined;

/**
 * The default posting language for new statuses, ISO 639-1 language two-letter code.
 * @member {String} language
 */
Source.prototype['language'] = undefined;

/**
 * Profile bio
 * @member {String} note
 */
Source.prototype['note'] = undefined;

/**
 * The default post privacy to be used for new statuses.
 * @member {module:model/Source.PrivacyEnum} privacy
 */
Source.prototype['privacy'] = undefined;

/**
 * Whether new statuses should be marked sensitive by default.
 * @member {Boolean} sensitive
 */
Source.prototype['sensitive'] = undefined;





/**
 * Allowed values for the <code>privacy</code> property.
 * @enum {String}
 * @readonly
 */
Source['PrivacyEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "direct"
     * @const
     */
    "direct": "direct"
};



export default Source;

