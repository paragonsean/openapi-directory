/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version 1.0
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * Represents a file or media attachment that can be added to a status.
     * @alias module:model/Attachment
     * @param id {String} The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number
     * @param previewUrl {String} The location of a scaled-down preview of the attachment.
     * @param type {module:model/Attachment.TypeEnum} The type of the attachment.
     * @param url {String} The location of the original full-size attachment.
     */
    constructor(id, previewUrl, type, url) { 
        
        Attachment.initialize(this, id, previewUrl, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, previewUrl, type, url) { 
        obj['id'] = id;
        obj['preview_url'] = previewUrl;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('blurhash')) {
                obj['blurhash'] = ApiClient.convertToType(data['blurhash'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Object);
            }
            if (data.hasOwnProperty('preview_url')) {
                obj['preview_url'] = ApiClient.convertToType(data['preview_url'], 'String');
            }
            if (data.hasOwnProperty('remote_url')) {
                obj['remote_url'] = ApiClient.convertToType(data['remote_url'], 'String');
            }
            if (data.hasOwnProperty('text_url')) {
                obj['text_url'] = ApiClient.convertToType(data['text_url'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Attachment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blurhash'] && !(typeof data['blurhash'] === 'string' || data['blurhash'] instanceof String)) {
            throw new Error("Expected the field `blurhash` to be a primitive type in the JSON string but got " + data['blurhash']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['preview_url'] && !(typeof data['preview_url'] === 'string' || data['preview_url'] instanceof String)) {
            throw new Error("Expected the field `preview_url` to be a primitive type in the JSON string but got " + data['preview_url']);
        }
        // ensure the json data is a string
        if (data['remote_url'] && !(typeof data['remote_url'] === 'string' || data['remote_url'] instanceof String)) {
            throw new Error("Expected the field `remote_url` to be a primitive type in the JSON string but got " + data['remote_url']);
        }
        // ensure the json data is a string
        if (data['text_url'] && !(typeof data['text_url'] === 'string' || data['text_url'] instanceof String)) {
            throw new Error("Expected the field `text_url` to be a primitive type in the JSON string but got " + data['text_url']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Attachment.RequiredProperties = ["id", "preview_url", "type", "url"];

/**
 * A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.
 * @member {String} blurhash
 */
Attachment.prototype['blurhash'] = undefined;

/**
 * Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.
 * @member {String} description
 */
Attachment.prototype['description'] = undefined;

/**
 * The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number
 * @member {String} id
 */
Attachment.prototype['id'] = undefined;

/**
 * Metadata returned by Paperclip.
 * @member {Object} meta
 */
Attachment.prototype['meta'] = undefined;

/**
 * The location of a scaled-down preview of the attachment.
 * @member {String} preview_url
 */
Attachment.prototype['preview_url'] = undefined;

/**
 * The location of the full-size original attachment on the remote website. String or null if the attachment is local.
 * @member {String} remote_url
 */
Attachment.prototype['remote_url'] = undefined;

/**
 * A shorter URL for the attachment.
 * @member {String} text_url
 */
Attachment.prototype['text_url'] = undefined;

/**
 * The type of the attachment.
 * @member {module:model/Attachment.TypeEnum} type
 */
Attachment.prototype['type'] = undefined;

/**
 * The location of the original full-size attachment.
 * @member {String} url
 */
Attachment.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Attachment['TypeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "gifv"
     * @const
     */
    "gifv": "gifv",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio"
};



export default Attachment;

