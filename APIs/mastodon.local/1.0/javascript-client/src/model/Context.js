/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The Context model module.
 * @module model/Context
 * @version 1.0
 */
class Context {
    /**
     * Constructs a new <code>Context</code>.
     * Represents the tree around a given status. Used for reconstructing threads of statuses.
     * @alias module:model/Context
     * @param ancestors {Array.<module:model/Status>} Parents in the thread.
     * @param descendants {Array.<module:model/Status>} Children in the thread.
     */
    constructor(ancestors, descendants) { 
        
        Context.initialize(this, ancestors, descendants);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ancestors, descendants) { 
        obj['ancestors'] = ancestors;
        obj['descendants'] = descendants;
    }

    /**
     * Constructs a <code>Context</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Context} obj Optional instance to populate.
     * @return {module:model/Context} The populated <code>Context</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Context();

            if (data.hasOwnProperty('ancestors')) {
                obj['ancestors'] = ApiClient.convertToType(data['ancestors'], [Status]);
            }
            if (data.hasOwnProperty('descendants')) {
                obj['descendants'] = ApiClient.convertToType(data['descendants'], [Status]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Context</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Context</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Context.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['ancestors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ancestors'])) {
                throw new Error("Expected the field `ancestors` to be an array in the JSON data but got " + data['ancestors']);
            }
            // validate the optional field `ancestors` (array)
            for (const item of data['ancestors']) {
                Status.validateJSON(item);
            };
        }
        if (data['descendants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['descendants'])) {
                throw new Error("Expected the field `descendants` to be an array in the JSON data but got " + data['descendants']);
            }
            // validate the optional field `descendants` (array)
            for (const item of data['descendants']) {
                Status.validateJSON(item);
            };
        }

        return true;
    }


}

Context.RequiredProperties = ["ancestors", "descendants"];

/**
 * Parents in the thread.
 * @member {Array.<module:model/Status>} ancestors
 */
Context.prototype['ancestors'] = undefined;

/**
 * Children in the thread.
 * @member {Array.<module:model/Status>} descendants
 */
Context.prototype['descendants'] = undefined;






export default Context;

