/**
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: sardo@hey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Preferences model module.
 * @module model/Preferences
 * @version 1.0
 */
class Preferences {
    /**
     * Constructs a new <code>Preferences</code>.
     * Represents a user&#39;s preferences.
     * @alias module:model/Preferences
     */
    constructor() { 
        
        Preferences.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Preferences</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Preferences} obj Optional instance to populate.
     * @return {module:model/Preferences} The populated <code>Preferences</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Preferences();

            if (data.hasOwnProperty('posting:default:language')) {
                obj['posting:default:language'] = ApiClient.convertToType(data['posting:default:language'], 'String');
            }
            if (data.hasOwnProperty('posting:default:sensitive')) {
                obj['posting:default:sensitive'] = ApiClient.convertToType(data['posting:default:sensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('posting:default:visibility')) {
                obj['posting:default:visibility'] = ApiClient.convertToType(data['posting:default:visibility'], 'String');
            }
            if (data.hasOwnProperty('reading:expand:media')) {
                obj['reading:expand:media'] = ApiClient.convertToType(data['reading:expand:media'], 'String');
            }
            if (data.hasOwnProperty('reading:expand:spoilers')) {
                obj['reading:expand:spoilers'] = ApiClient.convertToType(data['reading:expand:spoilers'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Preferences</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Preferences</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['posting:default:language'] && !(typeof data['posting:default:language'] === 'string' || data['posting:default:language'] instanceof String)) {
            throw new Error("Expected the field `posting:default:language` to be a primitive type in the JSON string but got " + data['posting:default:language']);
        }
        // ensure the json data is a string
        if (data['posting:default:visibility'] && !(typeof data['posting:default:visibility'] === 'string' || data['posting:default:visibility'] instanceof String)) {
            throw new Error("Expected the field `posting:default:visibility` to be a primitive type in the JSON string but got " + data['posting:default:visibility']);
        }
        // ensure the json data is a string
        if (data['reading:expand:media'] && !(typeof data['reading:expand:media'] === 'string' || data['reading:expand:media'] instanceof String)) {
            throw new Error("Expected the field `reading:expand:media` to be a primitive type in the JSON string but got " + data['reading:expand:media']);
        }

        return true;
    }


}



/**
 * Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null
 * @member {String} posting:default:language
 */
Preferences.prototype['posting:default:language'] = undefined;

/**
 * Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).
 * @member {Boolean} posting:default:sensitive
 */
Preferences.prototype['posting:default:sensitive'] = undefined;

/**
 * Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).
 * @member {module:model/Preferences.PostingdefaultvisibilityEnum} posting:default:visibility
 */
Preferences.prototype['posting:default:visibility'] = undefined;

/**
 * Whether media attachments should be automatically displayed or blurred/hidden.
 * @member {module:model/Preferences.ReadingexpandmediaEnum} reading:expand:media
 */
Preferences.prototype['reading:expand:media'] = undefined;

/**
 * Whether CWs should be expanded by default.
 * @member {Boolean} reading:expand:spoilers
 */
Preferences.prototype['reading:expand:spoilers'] = undefined;





/**
 * Allowed values for the <code>posting:default:visibility</code> property.
 * @enum {String}
 * @readonly
 */
Preferences['PostingdefaultvisibilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "direct"
     * @const
     */
    "direct": "direct"
};


/**
 * Allowed values for the <code>reading:expand:media</code> property.
 * @enum {String}
 * @readonly
 */
Preferences['ReadingexpandmediaEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "show_all"
     * @const
     */
    "show_all": "show_all",

    /**
     * value: "hide_all"
     * @const
     */
    "hide_all": "hide_all"
};



export default Preferences;

