/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchGroceryProductsByUPC_200_response_ingredients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchGroceryProductsByUPC_200_response_ingredients_inner::OAISearchGroceryProductsByUPC_200_response_ingredients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchGroceryProductsByUPC_200_response_ingredients_inner::OAISearchGroceryProductsByUPC_200_response_ingredients_inner() {
    this->initializeModel();
}

OAISearchGroceryProductsByUPC_200_response_ingredients_inner::~OAISearchGroceryProductsByUPC_200_response_ingredients_inner() {}

void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_safety_level_isSet = false;
    m_safety_level_isValid = false;
}

void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_safety_level_isValid = ::OpenAPI::fromJsonValue(m_safety_level, json[QString("safety_level")]);
    m_safety_level_isSet = !json[QString("safety_level")].isNull() && m_safety_level_isValid;
}

QString OAISearchGroceryProductsByUPC_200_response_ingredients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchGroceryProductsByUPC_200_response_ingredients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_safety_level_isSet) {
        obj.insert(QString("safety_level"), ::OpenAPI::toJsonValue(m_safety_level));
    }
    return obj;
}

QJsonValue OAISearchGroceryProductsByUPC_200_response_ingredients_inner::getDescription() const {
    return m_description;
}
void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::setDescription(const QJsonValue &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISearchGroceryProductsByUPC_200_response_ingredients_inner::getName() const {
    return m_name;
}
void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_name_Valid() const{
    return m_name_isValid;
}

QJsonValue OAISearchGroceryProductsByUPC_200_response_ingredients_inner::getSafetyLevel() const {
    return m_safety_level;
}
void OAISearchGroceryProductsByUPC_200_response_ingredients_inner::setSafetyLevel(const QJsonValue &safety_level) {
    m_safety_level = safety_level;
    m_safety_level_isSet = true;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_safety_level_Set() const{
    return m_safety_level_isSet;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::is_safety_level_Valid() const{
    return m_safety_level_isValid;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchGroceryProductsByUPC_200_response_ingredients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
