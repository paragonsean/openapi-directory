/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParseIngredients_200_response_inner_nutrition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParseIngredients_200_response_inner_nutrition::OAIParseIngredients_200_response_inner_nutrition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParseIngredients_200_response_inner_nutrition::OAIParseIngredients_200_response_inner_nutrition() {
    this->initializeModel();
}

OAIParseIngredients_200_response_inner_nutrition::~OAIParseIngredients_200_response_inner_nutrition() {}

void OAIParseIngredients_200_response_inner_nutrition::initializeModel() {

    m_caloric_breakdown_isSet = false;
    m_caloric_breakdown_isValid = false;

    m_flavonoids_isSet = false;
    m_flavonoids_isValid = false;

    m_nutrients_isSet = false;
    m_nutrients_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_weight_per_serving_isSet = false;
    m_weight_per_serving_isValid = false;
}

void OAIParseIngredients_200_response_inner_nutrition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParseIngredients_200_response_inner_nutrition::fromJsonObject(QJsonObject json) {

    m_caloric_breakdown_isValid = ::OpenAPI::fromJsonValue(m_caloric_breakdown, json[QString("caloricBreakdown")]);
    m_caloric_breakdown_isSet = !json[QString("caloricBreakdown")].isNull() && m_caloric_breakdown_isValid;

    m_flavonoids_isValid = ::OpenAPI::fromJsonValue(m_flavonoids, json[QString("flavonoids")]);
    m_flavonoids_isSet = !json[QString("flavonoids")].isNull() && m_flavonoids_isValid;

    m_nutrients_isValid = ::OpenAPI::fromJsonValue(m_nutrients, json[QString("nutrients")]);
    m_nutrients_isSet = !json[QString("nutrients")].isNull() && m_nutrients_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_weight_per_serving_isValid = ::OpenAPI::fromJsonValue(m_weight_per_serving, json[QString("weightPerServing")]);
    m_weight_per_serving_isSet = !json[QString("weightPerServing")].isNull() && m_weight_per_serving_isValid;
}

QString OAIParseIngredients_200_response_inner_nutrition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParseIngredients_200_response_inner_nutrition::asJsonObject() const {
    QJsonObject obj;
    if (m_caloric_breakdown.isSet()) {
        obj.insert(QString("caloricBreakdown"), ::OpenAPI::toJsonValue(m_caloric_breakdown));
    }
    if (m_flavonoids.size() > 0) {
        obj.insert(QString("flavonoids"), ::OpenAPI::toJsonValue(m_flavonoids));
    }
    if (m_nutrients.size() > 0) {
        obj.insert(QString("nutrients"), ::OpenAPI::toJsonValue(m_nutrients));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_weight_per_serving.isSet()) {
        obj.insert(QString("weightPerServing"), ::OpenAPI::toJsonValue(m_weight_per_serving));
    }
    return obj;
}

OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown OAIParseIngredients_200_response_inner_nutrition::getCaloricBreakdown() const {
    return m_caloric_breakdown;
}
void OAIParseIngredients_200_response_inner_nutrition::setCaloricBreakdown(const OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown &caloric_breakdown) {
    m_caloric_breakdown = caloric_breakdown;
    m_caloric_breakdown_isSet = true;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_caloric_breakdown_Set() const{
    return m_caloric_breakdown_isSet;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_caloric_breakdown_Valid() const{
    return m_caloric_breakdown_isValid;
}

QSet<OAIGetIngredientInformation_200_response_nutrition_properties_inner> OAIParseIngredients_200_response_inner_nutrition::getFlavonoids() const {
    return m_flavonoids;
}
void OAIParseIngredients_200_response_inner_nutrition::setFlavonoids(const QSet<OAIGetIngredientInformation_200_response_nutrition_properties_inner> &flavonoids) {
    m_flavonoids = flavonoids;
    m_flavonoids_isSet = true;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_flavonoids_Set() const{
    return m_flavonoids_isSet;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_flavonoids_Valid() const{
    return m_flavonoids_isValid;
}

QSet<OAIGetIngredientInformation_200_response_nutrition_nutrients_inner> OAIParseIngredients_200_response_inner_nutrition::getNutrients() const {
    return m_nutrients;
}
void OAIParseIngredients_200_response_inner_nutrition::setNutrients(const QSet<OAIGetIngredientInformation_200_response_nutrition_nutrients_inner> &nutrients) {
    m_nutrients = nutrients;
    m_nutrients_isSet = true;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_nutrients_Set() const{
    return m_nutrients_isSet;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_nutrients_Valid() const{
    return m_nutrients_isValid;
}

QSet<OAIGetIngredientInformation_200_response_nutrition_properties_inner> OAIParseIngredients_200_response_inner_nutrition::getProperties() const {
    return m_properties;
}
void OAIParseIngredients_200_response_inner_nutrition::setProperties(const QSet<OAIGetIngredientInformation_200_response_nutrition_properties_inner> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIGetIngredientInformation_200_response_nutrition_weightPerServing OAIParseIngredients_200_response_inner_nutrition::getWeightPerServing() const {
    return m_weight_per_serving;
}
void OAIParseIngredients_200_response_inner_nutrition::setWeightPerServing(const OAIGetIngredientInformation_200_response_nutrition_weightPerServing &weight_per_serving) {
    m_weight_per_serving = weight_per_serving;
    m_weight_per_serving_isSet = true;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_weight_per_serving_Set() const{
    return m_weight_per_serving_isSet;
}

bool OAIParseIngredients_200_response_inner_nutrition::is_weight_per_serving_Valid() const{
    return m_weight_per_serving_isValid;
}

bool OAIParseIngredients_200_response_inner_nutrition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caloric_breakdown.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flavonoids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_per_serving.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParseIngredients_200_response_inner_nutrition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caloric_breakdown_isValid && m_flavonoids_isValid && m_nutrients_isValid && m_properties_isValid && m_weight_per_serving_isValid && true;
}

} // namespace OpenAPI
