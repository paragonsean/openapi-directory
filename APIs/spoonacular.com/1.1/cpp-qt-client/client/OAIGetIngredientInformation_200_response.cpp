/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIngredientInformation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIngredientInformation_200_response::OAIGetIngredientInformation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIngredientInformation_200_response::OAIGetIngredientInformation_200_response() {
    this->initializeModel();
}

OAIGetIngredientInformation_200_response::~OAIGetIngredientInformation_200_response() {}

void OAIGetIngredientInformation_200_response::initializeModel() {

    m_aisle_isSet = false;
    m_aisle_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_path_isSet = false;
    m_category_path_isValid = false;

    m_consistency_isSet = false;
    m_consistency_isValid = false;

    m_estimated_cost_isSet = false;
    m_estimated_cost_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_clean_isSet = false;
    m_name_clean_isValid = false;

    m_nutrition_isSet = false;
    m_nutrition_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_original_name_isSet = false;
    m_original_name_isValid = false;

    m_possible_units_isSet = false;
    m_possible_units_isValid = false;

    m_shopping_list_units_isSet = false;
    m_shopping_list_units_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_unit_long_isSet = false;
    m_unit_long_isValid = false;

    m_unit_short_isSet = false;
    m_unit_short_isValid = false;
}

void OAIGetIngredientInformation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIngredientInformation_200_response::fromJsonObject(QJsonObject json) {

    m_aisle_isValid = ::OpenAPI::fromJsonValue(m_aisle, json[QString("aisle")]);
    m_aisle_isSet = !json[QString("aisle")].isNull() && m_aisle_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_path_isValid = ::OpenAPI::fromJsonValue(m_category_path, json[QString("categoryPath")]);
    m_category_path_isSet = !json[QString("categoryPath")].isNull() && m_category_path_isValid;

    m_consistency_isValid = ::OpenAPI::fromJsonValue(m_consistency, json[QString("consistency")]);
    m_consistency_isSet = !json[QString("consistency")].isNull() && m_consistency_isValid;

    m_estimated_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_cost, json[QString("estimatedCost")]);
    m_estimated_cost_isSet = !json[QString("estimatedCost")].isNull() && m_estimated_cost_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_clean_isValid = ::OpenAPI::fromJsonValue(m_name_clean, json[QString("nameClean")]);
    m_name_clean_isSet = !json[QString("nameClean")].isNull() && m_name_clean_isValid;

    m_nutrition_isValid = ::OpenAPI::fromJsonValue(m_nutrition, json[QString("nutrition")]);
    m_nutrition_isSet = !json[QString("nutrition")].isNull() && m_nutrition_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_original_name_isValid = ::OpenAPI::fromJsonValue(m_original_name, json[QString("originalName")]);
    m_original_name_isSet = !json[QString("originalName")].isNull() && m_original_name_isValid;

    m_possible_units_isValid = ::OpenAPI::fromJsonValue(m_possible_units, json[QString("possibleUnits")]);
    m_possible_units_isSet = !json[QString("possibleUnits")].isNull() && m_possible_units_isValid;

    m_shopping_list_units_isValid = ::OpenAPI::fromJsonValue(m_shopping_list_units, json[QString("shoppingListUnits")]);
    m_shopping_list_units_isSet = !json[QString("shoppingListUnits")].isNull() && m_shopping_list_units_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_unit_long_isValid = ::OpenAPI::fromJsonValue(m_unit_long, json[QString("unitLong")]);
    m_unit_long_isSet = !json[QString("unitLong")].isNull() && m_unit_long_isValid;

    m_unit_short_isValid = ::OpenAPI::fromJsonValue(m_unit_short, json[QString("unitShort")]);
    m_unit_short_isSet = !json[QString("unitShort")].isNull() && m_unit_short_isValid;
}

QString OAIGetIngredientInformation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIngredientInformation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_aisle_isSet) {
        obj.insert(QString("aisle"), ::OpenAPI::toJsonValue(m_aisle));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_path.size() > 0) {
        obj.insert(QString("categoryPath"), ::OpenAPI::toJsonValue(m_category_path));
    }
    if (m_consistency_isSet) {
        obj.insert(QString("consistency"), ::OpenAPI::toJsonValue(m_consistency));
    }
    if (m_estimated_cost.isSet()) {
        obj.insert(QString("estimatedCost"), ::OpenAPI::toJsonValue(m_estimated_cost));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_meta.size() > 0) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_clean_isSet) {
        obj.insert(QString("nameClean"), ::OpenAPI::toJsonValue(m_name_clean));
    }
    if (m_nutrition.isSet()) {
        obj.insert(QString("nutrition"), ::OpenAPI::toJsonValue(m_nutrition));
    }
    if (m_original_isSet) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_original_name_isSet) {
        obj.insert(QString("originalName"), ::OpenAPI::toJsonValue(m_original_name));
    }
    if (m_possible_units.size() > 0) {
        obj.insert(QString("possibleUnits"), ::OpenAPI::toJsonValue(m_possible_units));
    }
    if (m_shopping_list_units.size() > 0) {
        obj.insert(QString("shoppingListUnits"), ::OpenAPI::toJsonValue(m_shopping_list_units));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_unit_long_isSet) {
        obj.insert(QString("unitLong"), ::OpenAPI::toJsonValue(m_unit_long));
    }
    if (m_unit_short_isSet) {
        obj.insert(QString("unitShort"), ::OpenAPI::toJsonValue(m_unit_short));
    }
    return obj;
}

QString OAIGetIngredientInformation_200_response::getAisle() const {
    return m_aisle;
}
void OAIGetIngredientInformation_200_response::setAisle(const QString &aisle) {
    m_aisle = aisle;
    m_aisle_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_aisle_Set() const{
    return m_aisle_isSet;
}

bool OAIGetIngredientInformation_200_response::is_aisle_Valid() const{
    return m_aisle_isValid;
}

double OAIGetIngredientInformation_200_response::getAmount() const {
    return m_amount;
}
void OAIGetIngredientInformation_200_response::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIGetIngredientInformation_200_response::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<QString> OAIGetIngredientInformation_200_response::getCategoryPath() const {
    return m_category_path;
}
void OAIGetIngredientInformation_200_response::setCategoryPath(const QList<QString> &category_path) {
    m_category_path = category_path;
    m_category_path_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_category_path_Set() const{
    return m_category_path_isSet;
}

bool OAIGetIngredientInformation_200_response::is_category_path_Valid() const{
    return m_category_path_isValid;
}

QString OAIGetIngredientInformation_200_response::getConsistency() const {
    return m_consistency;
}
void OAIGetIngredientInformation_200_response::setConsistency(const QString &consistency) {
    m_consistency = consistency;
    m_consistency_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_consistency_Set() const{
    return m_consistency_isSet;
}

bool OAIGetIngredientInformation_200_response::is_consistency_Valid() const{
    return m_consistency_isValid;
}

OAIGetIngredientInformation_200_response_estimatedCost OAIGetIngredientInformation_200_response::getEstimatedCost() const {
    return m_estimated_cost;
}
void OAIGetIngredientInformation_200_response::setEstimatedCost(const OAIGetIngredientInformation_200_response_estimatedCost &estimated_cost) {
    m_estimated_cost = estimated_cost;
    m_estimated_cost_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_estimated_cost_Set() const{
    return m_estimated_cost_isSet;
}

bool OAIGetIngredientInformation_200_response::is_estimated_cost_Valid() const{
    return m_estimated_cost_isValid;
}

qint32 OAIGetIngredientInformation_200_response::getId() const {
    return m_id;
}
void OAIGetIngredientInformation_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetIngredientInformation_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetIngredientInformation_200_response::getImage() const {
    return m_image;
}
void OAIGetIngredientInformation_200_response::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGetIngredientInformation_200_response::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIObject> OAIGetIngredientInformation_200_response::getMeta() const {
    return m_meta;
}
void OAIGetIngredientInformation_200_response::setMeta(const QList<OAIObject> &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIGetIngredientInformation_200_response::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIGetIngredientInformation_200_response::getName() const {
    return m_name;
}
void OAIGetIngredientInformation_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetIngredientInformation_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetIngredientInformation_200_response::getNameClean() const {
    return m_name_clean;
}
void OAIGetIngredientInformation_200_response::setNameClean(const QString &name_clean) {
    m_name_clean = name_clean;
    m_name_clean_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_name_clean_Set() const{
    return m_name_clean_isSet;
}

bool OAIGetIngredientInformation_200_response::is_name_clean_Valid() const{
    return m_name_clean_isValid;
}

OAIGetIngredientInformation_200_response_nutrition OAIGetIngredientInformation_200_response::getNutrition() const {
    return m_nutrition;
}
void OAIGetIngredientInformation_200_response::setNutrition(const OAIGetIngredientInformation_200_response_nutrition &nutrition) {
    m_nutrition = nutrition;
    m_nutrition_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_nutrition_Set() const{
    return m_nutrition_isSet;
}

bool OAIGetIngredientInformation_200_response::is_nutrition_Valid() const{
    return m_nutrition_isValid;
}

QString OAIGetIngredientInformation_200_response::getOriginal() const {
    return m_original;
}
void OAIGetIngredientInformation_200_response::setOriginal(const QString &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_original_Set() const{
    return m_original_isSet;
}

bool OAIGetIngredientInformation_200_response::is_original_Valid() const{
    return m_original_isValid;
}

QString OAIGetIngredientInformation_200_response::getOriginalName() const {
    return m_original_name;
}
void OAIGetIngredientInformation_200_response::setOriginalName(const QString &original_name) {
    m_original_name = original_name;
    m_original_name_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_original_name_Set() const{
    return m_original_name_isSet;
}

bool OAIGetIngredientInformation_200_response::is_original_name_Valid() const{
    return m_original_name_isValid;
}

QList<QString> OAIGetIngredientInformation_200_response::getPossibleUnits() const {
    return m_possible_units;
}
void OAIGetIngredientInformation_200_response::setPossibleUnits(const QList<QString> &possible_units) {
    m_possible_units = possible_units;
    m_possible_units_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_possible_units_Set() const{
    return m_possible_units_isSet;
}

bool OAIGetIngredientInformation_200_response::is_possible_units_Valid() const{
    return m_possible_units_isValid;
}

QList<QString> OAIGetIngredientInformation_200_response::getShoppingListUnits() const {
    return m_shopping_list_units;
}
void OAIGetIngredientInformation_200_response::setShoppingListUnits(const QList<QString> &shopping_list_units) {
    m_shopping_list_units = shopping_list_units;
    m_shopping_list_units_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_shopping_list_units_Set() const{
    return m_shopping_list_units_isSet;
}

bool OAIGetIngredientInformation_200_response::is_shopping_list_units_Valid() const{
    return m_shopping_list_units_isValid;
}

QString OAIGetIngredientInformation_200_response::getUnit() const {
    return m_unit;
}
void OAIGetIngredientInformation_200_response::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGetIngredientInformation_200_response::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAIGetIngredientInformation_200_response::getUnitLong() const {
    return m_unit_long;
}
void OAIGetIngredientInformation_200_response::setUnitLong(const QString &unit_long) {
    m_unit_long = unit_long;
    m_unit_long_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_unit_long_Set() const{
    return m_unit_long_isSet;
}

bool OAIGetIngredientInformation_200_response::is_unit_long_Valid() const{
    return m_unit_long_isValid;
}

QString OAIGetIngredientInformation_200_response::getUnitShort() const {
    return m_unit_short;
}
void OAIGetIngredientInformation_200_response::setUnitShort(const QString &unit_short) {
    m_unit_short = unit_short;
    m_unit_short_isSet = true;
}

bool OAIGetIngredientInformation_200_response::is_unit_short_Set() const{
    return m_unit_short_isSet;
}

bool OAIGetIngredientInformation_200_response::is_unit_short_Valid() const{
    return m_unit_short_isValid;
}

bool OAIGetIngredientInformation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aisle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_path.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_clean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopping_list_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_short_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIngredientInformation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aisle_isValid && m_amount_isValid && m_category_path_isValid && m_consistency_isValid && m_estimated_cost_isValid && m_id_isValid && m_image_isValid && m_meta_isValid && m_name_isValid && m_name_clean_isValid && m_nutrition_isValid && m_original_isValid && m_original_name_isValid && m_possible_units_isValid && m_shopping_list_units_isValid && m_unit_isValid && m_unit_long_isValid && m_unit_short_isValid && true;
}

} // namespace OpenAPI
