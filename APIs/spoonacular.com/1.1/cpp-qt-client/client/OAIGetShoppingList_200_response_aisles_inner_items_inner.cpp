/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetShoppingList_200_response_aisles_inner_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetShoppingList_200_response_aisles_inner_items_inner::OAIGetShoppingList_200_response_aisles_inner_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetShoppingList_200_response_aisles_inner_items_inner::OAIGetShoppingList_200_response_aisles_inner_items_inner() {
    this->initializeModel();
}

OAIGetShoppingList_200_response_aisles_inner_items_inner::~OAIGetShoppingList_200_response_aisles_inner_items_inner() {}

void OAIGetShoppingList_200_response_aisles_inner_items_inner::initializeModel() {

    m_aisle_isSet = false;
    m_aisle_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ingredient_id_isSet = false;
    m_ingredient_id_isValid = false;

    m_measures_isSet = false;
    m_measures_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pantry_item_isSet = false;
    m_pantry_item_isValid = false;
}

void OAIGetShoppingList_200_response_aisles_inner_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetShoppingList_200_response_aisles_inner_items_inner::fromJsonObject(QJsonObject json) {

    m_aisle_isValid = ::OpenAPI::fromJsonValue(m_aisle, json[QString("aisle")]);
    m_aisle_isSet = !json[QString("aisle")].isNull() && m_aisle_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ingredient_id_isValid = ::OpenAPI::fromJsonValue(m_ingredient_id, json[QString("ingredientId")]);
    m_ingredient_id_isSet = !json[QString("ingredientId")].isNull() && m_ingredient_id_isValid;

    m_measures_isValid = ::OpenAPI::fromJsonValue(m_measures, json[QString("measures")]);
    m_measures_isSet = !json[QString("measures")].isNull() && m_measures_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pantry_item_isValid = ::OpenAPI::fromJsonValue(m_pantry_item, json[QString("pantryItem")]);
    m_pantry_item_isSet = !json[QString("pantryItem")].isNull() && m_pantry_item_isValid;
}

QString OAIGetShoppingList_200_response_aisles_inner_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetShoppingList_200_response_aisles_inner_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aisle_isSet) {
        obj.insert(QString("aisle"), ::OpenAPI::toJsonValue(m_aisle));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ingredient_id_isSet) {
        obj.insert(QString("ingredientId"), ::OpenAPI::toJsonValue(m_ingredient_id));
    }
    if (m_measures.isSet()) {
        obj.insert(QString("measures"), ::OpenAPI::toJsonValue(m_measures));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pantry_item_isSet) {
        obj.insert(QString("pantryItem"), ::OpenAPI::toJsonValue(m_pantry_item));
    }
    return obj;
}

QString OAIGetShoppingList_200_response_aisles_inner_items_inner::getAisle() const {
    return m_aisle;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setAisle(const QString &aisle) {
    m_aisle = aisle;
    m_aisle_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_aisle_Set() const{
    return m_aisle_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_aisle_Valid() const{
    return m_aisle_isValid;
}

double OAIGetShoppingList_200_response_aisles_inner_items_inner::getCost() const {
    return m_cost;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_cost_Valid() const{
    return m_cost_isValid;
}

qint32 OAIGetShoppingList_200_response_aisles_inner_items_inner::getId() const {
    return m_id;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGetShoppingList_200_response_aisles_inner_items_inner::getIngredientId() const {
    return m_ingredient_id;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setIngredientId(const qint32 &ingredient_id) {
    m_ingredient_id = ingredient_id;
    m_ingredient_id_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_ingredient_id_Set() const{
    return m_ingredient_id_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_ingredient_id_Valid() const{
    return m_ingredient_id_isValid;
}

OAIGetShoppingList_200_response_aisles_inner_items_inner_measures OAIGetShoppingList_200_response_aisles_inner_items_inner::getMeasures() const {
    return m_measures;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setMeasures(const OAIGetShoppingList_200_response_aisles_inner_items_inner_measures &measures) {
    m_measures = measures;
    m_measures_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_measures_Set() const{
    return m_measures_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_measures_Valid() const{
    return m_measures_isValid;
}

QString OAIGetShoppingList_200_response_aisles_inner_items_inner::getName() const {
    return m_name;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::isPantryItem() const {
    return m_pantry_item;
}
void OAIGetShoppingList_200_response_aisles_inner_items_inner::setPantryItem(const bool &pantry_item) {
    m_pantry_item = pantry_item;
    m_pantry_item_isSet = true;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_pantry_item_Set() const{
    return m_pantry_item_isSet;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::is_pantry_item_Valid() const{
    return m_pantry_item_isValid;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aisle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredient_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pantry_item_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetShoppingList_200_response_aisles_inner_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aisle_isValid && m_cost_isValid && m_id_isValid && m_ingredient_id_isValid && m_name_isValid && m_pantry_item_isValid && true;
}

} // namespace OpenAPI
