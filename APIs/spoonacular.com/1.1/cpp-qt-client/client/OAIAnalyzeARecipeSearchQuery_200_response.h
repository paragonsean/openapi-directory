/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalyzeARecipeSearchQuery_200_response.h
 *
 * 
 */

#ifndef OAIAnalyzeARecipeSearchQuery_200_response_H
#define OAIAnalyzeARecipeSearchQuery_200_response_H

#include <QJsonObject>

#include "OAIAnalyzeARecipeSearchQuery_200_response_dishes_inner.h"
#include "OAIAnalyzeARecipeSearchQuery_200_response_ingredients_inner.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnalyzeARecipeSearchQuery_200_response_dishes_inner;
class OAIAnalyzeARecipeSearchQuery_200_response_ingredients_inner;

class OAIAnalyzeARecipeSearchQuery_200_response : public OAIObject {
public:
    OAIAnalyzeARecipeSearchQuery_200_response();
    OAIAnalyzeARecipeSearchQuery_200_response(QString json);
    ~OAIAnalyzeARecipeSearchQuery_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCuisines() const;
    void setCuisines(const QList<QString> &cuisines);
    bool is_cuisines_Set() const;
    bool is_cuisines_Valid() const;

    QSet<OAIAnalyzeARecipeSearchQuery_200_response_dishes_inner> getDishes() const;
    void setDishes(const QSet<OAIAnalyzeARecipeSearchQuery_200_response_dishes_inner> &dishes);
    bool is_dishes_Set() const;
    bool is_dishes_Valid() const;

    QSet<OAIAnalyzeARecipeSearchQuery_200_response_ingredients_inner> getIngredients() const;
    void setIngredients(const QSet<OAIAnalyzeARecipeSearchQuery_200_response_ingredients_inner> &ingredients);
    bool is_ingredients_Set() const;
    bool is_ingredients_Valid() const;

    QList<QString> getModifiers() const;
    void setModifiers(const QList<QString> &modifiers);
    bool is_modifiers_Set() const;
    bool is_modifiers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cuisines;
    bool m_cuisines_isSet;
    bool m_cuisines_isValid;

    QSet<OAIAnalyzeARecipeSearchQuery_200_response_dishes_inner> m_dishes;
    bool m_dishes_isSet;
    bool m_dishes_isValid;

    QSet<OAIAnalyzeARecipeSearchQuery_200_response_ingredients_inner> m_ingredients;
    bool m_ingredients_isSet;
    bool m_ingredients_isValid;

    QList<QString> m_modifiers;
    bool m_modifiers_isSet;
    bool m_modifiers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalyzeARecipeSearchQuery_200_response)

#endif // OAIAnalyzeARecipeSearchQuery_200_response_H
