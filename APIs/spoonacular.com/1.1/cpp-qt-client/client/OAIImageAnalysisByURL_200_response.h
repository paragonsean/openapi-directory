/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageAnalysisByURL_200_response.h
 *
 * 
 */

#ifndef OAIImageAnalysisByURL_200_response_H
#define OAIImageAnalysisByURL_200_response_H

#include <QJsonObject>

#include "OAIImageAnalysisByURL_200_response_category.h"
#include "OAIImageAnalysisByURL_200_response_nutrition.h"
#include "OAIImageAnalysisByURL_200_response_recipes_inner.h"
#include <QSet>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageAnalysisByURL_200_response_category;
class OAIImageAnalysisByURL_200_response_nutrition;
class OAIImageAnalysisByURL_200_response_recipes_inner;

class OAIImageAnalysisByURL_200_response : public OAIObject {
public:
    OAIImageAnalysisByURL_200_response();
    OAIImageAnalysisByURL_200_response(QString json);
    ~OAIImageAnalysisByURL_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIImageAnalysisByURL_200_response_category getCategory() const;
    void setCategory(const OAIImageAnalysisByURL_200_response_category &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIImageAnalysisByURL_200_response_nutrition getNutrition() const;
    void setNutrition(const OAIImageAnalysisByURL_200_response_nutrition &nutrition);
    bool is_nutrition_Set() const;
    bool is_nutrition_Valid() const;

    QSet<OAIImageAnalysisByURL_200_response_recipes_inner> getRecipes() const;
    void setRecipes(const QSet<OAIImageAnalysisByURL_200_response_recipes_inner> &recipes);
    bool is_recipes_Set() const;
    bool is_recipes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIImageAnalysisByURL_200_response_category m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIImageAnalysisByURL_200_response_nutrition m_nutrition;
    bool m_nutrition_isSet;
    bool m_nutrition_isValid;

    QSet<OAIImageAnalysisByURL_200_response_recipes_inner> m_recipes;
    bool m_recipes_isSet;
    bool m_recipes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageAnalysisByURL_200_response)

#endif // OAIImageAnalysisByURL_200_response_H
