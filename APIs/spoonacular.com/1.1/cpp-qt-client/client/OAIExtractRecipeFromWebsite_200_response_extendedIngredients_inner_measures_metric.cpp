/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric() {
    this->initializeModel();
}

OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::~OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric() {}

void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_unit_long_isSet = false;
    m_unit_long_isValid = false;

    m_unit_short_isSet = false;
    m_unit_short_isValid = false;
}

void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_unit_long_isValid = ::OpenAPI::fromJsonValue(m_unit_long, json[QString("unitLong")]);
    m_unit_long_isSet = !json[QString("unitLong")].isNull() && m_unit_long_isValid;

    m_unit_short_isValid = ::OpenAPI::fromJsonValue(m_unit_short, json[QString("unitShort")]);
    m_unit_short_isSet = !json[QString("unitShort")].isNull() && m_unit_short_isValid;
}

QString OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_unit_long_isSet) {
        obj.insert(QString("unitLong"), ::OpenAPI::toJsonValue(m_unit_long));
    }
    if (m_unit_short_isSet) {
        obj.insert(QString("unitShort"), ::OpenAPI::toJsonValue(m_unit_short));
    }
    return obj;
}

double OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::getAmount() const {
    return m_amount;
}
void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::getUnitLong() const {
    return m_unit_long;
}
void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::setUnitLong(const QString &unit_long) {
    m_unit_long = unit_long;
    m_unit_long_isSet = true;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_unit_long_Set() const{
    return m_unit_long_isSet;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_unit_long_Valid() const{
    return m_unit_long_isValid;
}

QString OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::getUnitShort() const {
    return m_unit_short;
}
void OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::setUnitShort(const QString &unit_short) {
    m_unit_short = unit_short;
    m_unit_short_isSet = true;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_unit_short_Set() const{
    return m_unit_short_isSet;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::is_unit_short_Valid() const{
    return m_unit_short_isValid;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_short_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_unit_long_isValid && m_unit_short_isValid && true;
}

} // namespace OpenAPI
