/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateMealPlan_200_response_meals_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateMealPlan_200_response_meals_inner::OAIGenerateMealPlan_200_response_meals_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateMealPlan_200_response_meals_inner::OAIGenerateMealPlan_200_response_meals_inner() {
    this->initializeModel();
}

OAIGenerateMealPlan_200_response_meals_inner::~OAIGenerateMealPlan_200_response_meals_inner() {}

void OAIGenerateMealPlan_200_response_meals_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_ready_in_minutes_isSet = false;
    m_ready_in_minutes_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGenerateMealPlan_200_response_meals_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateMealPlan_200_response_meals_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_ready_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_ready_in_minutes, json[QString("readyInMinutes")]);
    m_ready_in_minutes_isSet = !json[QString("readyInMinutes")].isNull() && m_ready_in_minutes_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(m_servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGenerateMealPlan_200_response_meals_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateMealPlan_200_response_meals_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_ready_in_minutes_isSet) {
        obj.insert(QString("readyInMinutes"), ::OpenAPI::toJsonValue(m_ready_in_minutes));
    }
    if (m_servings_isSet) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(m_servings));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIGenerateMealPlan_200_response_meals_inner::getId() const {
    return m_id;
}
void OAIGenerateMealPlan_200_response_meals_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGenerateMealPlan_200_response_meals_inner::getImageType() const {
    return m_image_type;
}
void OAIGenerateMealPlan_200_response_meals_inner::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_image_type_Valid() const{
    return m_image_type_isValid;
}

qint32 OAIGenerateMealPlan_200_response_meals_inner::getReadyInMinutes() const {
    return m_ready_in_minutes;
}
void OAIGenerateMealPlan_200_response_meals_inner::setReadyInMinutes(const qint32 &ready_in_minutes) {
    m_ready_in_minutes = ready_in_minutes;
    m_ready_in_minutes_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_ready_in_minutes_Set() const{
    return m_ready_in_minutes_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_ready_in_minutes_Valid() const{
    return m_ready_in_minutes_isValid;
}

double OAIGenerateMealPlan_200_response_meals_inner::getServings() const {
    return m_servings;
}
void OAIGenerateMealPlan_200_response_meals_inner::setServings(const double &servings) {
    m_servings = servings;
    m_servings_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_servings_Valid() const{
    return m_servings_isValid;
}

QString OAIGenerateMealPlan_200_response_meals_inner::getSourceUrl() const {
    return m_source_url;
}
void OAIGenerateMealPlan_200_response_meals_inner::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIGenerateMealPlan_200_response_meals_inner::getTitle() const {
    return m_title;
}
void OAIGenerateMealPlan_200_response_meals_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGenerateMealPlan_200_response_meals_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGenerateMealPlan_200_response_meals_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateMealPlan_200_response_meals_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_image_type_isValid && m_ready_in_minutes_isValid && m_servings_isValid && m_source_url_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
