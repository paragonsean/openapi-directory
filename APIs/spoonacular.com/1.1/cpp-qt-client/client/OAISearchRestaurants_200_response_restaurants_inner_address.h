/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchRestaurants_200_response_restaurants_inner_address.h
 *
 * 
 */

#ifndef OAISearchRestaurants_200_response_restaurants_inner_address_H
#define OAISearchRestaurants_200_response_restaurants_inner_address_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearchRestaurants_200_response_restaurants_inner_address : public OAIObject {
public:
    OAISearchRestaurants_200_response_restaurants_inner_address();
    OAISearchRestaurants_200_response_restaurants_inner_address(QString json);
    ~OAISearchRestaurants_200_response_restaurants_inner_address() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLon() const;
    void setLon(const double &lon);
    bool is_lon_Set() const;
    bool is_lon_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStreetAddr() const;
    void setStreetAddr(const QString &street_addr);
    bool is_street_addr_Set() const;
    bool is_street_addr_Valid() const;

    QString getStreetAddr2() const;
    void setStreetAddr2(const QString &street_addr_2);
    bool is_street_addr_2_Set() const;
    bool is_street_addr_2_Valid() const;

    QString getZipcode() const;
    void setZipcode(const QString &zipcode);
    bool is_zipcode_Set() const;
    bool is_zipcode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_lon;
    bool m_lon_isSet;
    bool m_lon_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_street_addr;
    bool m_street_addr_isSet;
    bool m_street_addr_isValid;

    QString m_street_addr_2;
    bool m_street_addr_2_isSet;
    bool m_street_addr_2_isValid;

    QString m_zipcode;
    bool m_zipcode_isSet;
    bool m_zipcode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchRestaurants_200_response_restaurants_inner_address)

#endif // OAISearchRestaurants_200_response_restaurants_inner_address_H
