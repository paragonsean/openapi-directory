/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnalysisByURL_200_response_nutrition_calories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnalysisByURL_200_response_nutrition_calories::OAIImageAnalysisByURL_200_response_nutrition_calories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnalysisByURL_200_response_nutrition_calories::OAIImageAnalysisByURL_200_response_nutrition_calories() {
    this->initializeModel();
}

OAIImageAnalysisByURL_200_response_nutrition_calories::~OAIImageAnalysisByURL_200_response_nutrition_calories() {}

void OAIImageAnalysisByURL_200_response_nutrition_calories::initializeModel() {

    m_confidence_range95_percent_isSet = false;
    m_confidence_range95_percent_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIImageAnalysisByURL_200_response_nutrition_calories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAnalysisByURL_200_response_nutrition_calories::fromJsonObject(QJsonObject json) {

    m_confidence_range95_percent_isValid = ::OpenAPI::fromJsonValue(m_confidence_range95_percent, json[QString("confidenceRange95Percent")]);
    m_confidence_range95_percent_isSet = !json[QString("confidenceRange95Percent")].isNull() && m_confidence_range95_percent_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIImageAnalysisByURL_200_response_nutrition_calories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAnalysisByURL_200_response_nutrition_calories::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_range95_percent.isSet()) {
        obj.insert(QString("confidenceRange95Percent"), ::OpenAPI::toJsonValue(m_confidence_range95_percent));
    }
    if (m_standard_deviation_isSet) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIImageAnalysisByURL_200_response_nutrition_calories_confidenceRange95Percent OAIImageAnalysisByURL_200_response_nutrition_calories::getConfidenceRange95Percent() const {
    return m_confidence_range95_percent;
}
void OAIImageAnalysisByURL_200_response_nutrition_calories::setConfidenceRange95Percent(const OAIImageAnalysisByURL_200_response_nutrition_calories_confidenceRange95Percent &confidence_range95_percent) {
    m_confidence_range95_percent = confidence_range95_percent;
    m_confidence_range95_percent_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_confidence_range95_percent_Set() const{
    return m_confidence_range95_percent_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_confidence_range95_percent_Valid() const{
    return m_confidence_range95_percent_isValid;
}

double OAIImageAnalysisByURL_200_response_nutrition_calories::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIImageAnalysisByURL_200_response_nutrition_calories::setStandardDeviation(const double &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

QString OAIImageAnalysisByURL_200_response_nutrition_calories::getUnit() const {
    return m_unit;
}
void OAIImageAnalysisByURL_200_response_nutrition_calories::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIImageAnalysisByURL_200_response_nutrition_calories::getValue() const {
    return m_value;
}
void OAIImageAnalysisByURL_200_response_nutrition_calories::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_value_Set() const{
    return m_value_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_range95_percent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAnalysisByURL_200_response_nutrition_calories::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confidence_range95_percent_isValid && m_standard_deviation_isValid && m_unit_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
