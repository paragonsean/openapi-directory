/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateMealPlan_200_response_nutrients.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateMealPlan_200_response_nutrients::OAIGenerateMealPlan_200_response_nutrients(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateMealPlan_200_response_nutrients::OAIGenerateMealPlan_200_response_nutrients() {
    this->initializeModel();
}

OAIGenerateMealPlan_200_response_nutrients::~OAIGenerateMealPlan_200_response_nutrients() {}

void OAIGenerateMealPlan_200_response_nutrients::initializeModel() {

    m_calories_isSet = false;
    m_calories_isValid = false;

    m_carbohydrates_isSet = false;
    m_carbohydrates_isValid = false;

    m_fat_isSet = false;
    m_fat_isValid = false;

    m_protein_isSet = false;
    m_protein_isValid = false;
}

void OAIGenerateMealPlan_200_response_nutrients::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateMealPlan_200_response_nutrients::fromJsonObject(QJsonObject json) {

    m_calories_isValid = ::OpenAPI::fromJsonValue(m_calories, json[QString("calories")]);
    m_calories_isSet = !json[QString("calories")].isNull() && m_calories_isValid;

    m_carbohydrates_isValid = ::OpenAPI::fromJsonValue(m_carbohydrates, json[QString("carbohydrates")]);
    m_carbohydrates_isSet = !json[QString("carbohydrates")].isNull() && m_carbohydrates_isValid;

    m_fat_isValid = ::OpenAPI::fromJsonValue(m_fat, json[QString("fat")]);
    m_fat_isSet = !json[QString("fat")].isNull() && m_fat_isValid;

    m_protein_isValid = ::OpenAPI::fromJsonValue(m_protein, json[QString("protein")]);
    m_protein_isSet = !json[QString("protein")].isNull() && m_protein_isValid;
}

QString OAIGenerateMealPlan_200_response_nutrients::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateMealPlan_200_response_nutrients::asJsonObject() const {
    QJsonObject obj;
    if (m_calories_isSet) {
        obj.insert(QString("calories"), ::OpenAPI::toJsonValue(m_calories));
    }
    if (m_carbohydrates_isSet) {
        obj.insert(QString("carbohydrates"), ::OpenAPI::toJsonValue(m_carbohydrates));
    }
    if (m_fat_isSet) {
        obj.insert(QString("fat"), ::OpenAPI::toJsonValue(m_fat));
    }
    if (m_protein_isSet) {
        obj.insert(QString("protein"), ::OpenAPI::toJsonValue(m_protein));
    }
    return obj;
}

double OAIGenerateMealPlan_200_response_nutrients::getCalories() const {
    return m_calories;
}
void OAIGenerateMealPlan_200_response_nutrients::setCalories(const double &calories) {
    m_calories = calories;
    m_calories_isSet = true;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_calories_Set() const{
    return m_calories_isSet;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_calories_Valid() const{
    return m_calories_isValid;
}

double OAIGenerateMealPlan_200_response_nutrients::getCarbohydrates() const {
    return m_carbohydrates;
}
void OAIGenerateMealPlan_200_response_nutrients::setCarbohydrates(const double &carbohydrates) {
    m_carbohydrates = carbohydrates;
    m_carbohydrates_isSet = true;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_carbohydrates_Set() const{
    return m_carbohydrates_isSet;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_carbohydrates_Valid() const{
    return m_carbohydrates_isValid;
}

double OAIGenerateMealPlan_200_response_nutrients::getFat() const {
    return m_fat;
}
void OAIGenerateMealPlan_200_response_nutrients::setFat(const double &fat) {
    m_fat = fat;
    m_fat_isSet = true;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_fat_Set() const{
    return m_fat_isSet;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_fat_Valid() const{
    return m_fat_isValid;
}

double OAIGenerateMealPlan_200_response_nutrients::getProtein() const {
    return m_protein;
}
void OAIGenerateMealPlan_200_response_nutrients::setProtein(const double &protein) {
    m_protein = protein;
    m_protein_isSet = true;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_protein_Set() const{
    return m_protein_isSet;
}

bool OAIGenerateMealPlan_200_response_nutrients::is_protein_Valid() const{
    return m_protein_isValid;
}

bool OAIGenerateMealPlan_200_response_nutrients::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carbohydrates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protein_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateMealPlan_200_response_nutrients::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calories_isValid && m_carbohydrates_isValid && m_fat_isValid && m_protein_isValid && true;
}

} // namespace OpenAPI
