/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMealPlanWeek_200_response_days_inner_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMealPlanWeek_200_response_days_inner_items_inner::OAIGetMealPlanWeek_200_response_days_inner_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMealPlanWeek_200_response_days_inner_items_inner::OAIGetMealPlanWeek_200_response_days_inner_items_inner() {
    this->initializeModel();
}

OAIGetMealPlanWeek_200_response_days_inner_items_inner::~OAIGetMealPlanWeek_200_response_days_inner_items_inner() {}

void OAIGetMealPlanWeek_200_response_days_inner_items_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_slot_isSet = false;
    m_slot_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGetMealPlanWeek_200_response_days_inner_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMealPlanWeek_200_response_days_inner_items_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_slot_isValid = ::OpenAPI::fromJsonValue(m_slot, json[QString("slot")]);
    m_slot_isSet = !json[QString("slot")].isNull() && m_slot_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGetMealPlanWeek_200_response_days_inner_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMealPlanWeek_200_response_days_inner_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_slot_isSet) {
        obj.insert(QString("slot"), ::OpenAPI::toJsonValue(m_slot));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIGetMealPlanWeek_200_response_days_inner_items_inner::getId() const {
    return m_id;
}
void OAIGetMealPlanWeek_200_response_days_inner_items_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGetMealPlanWeek_200_response_days_inner_items_inner::getPosition() const {
    return m_position;
}
void OAIGetMealPlanWeek_200_response_days_inner_items_inner::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIGetMealPlanWeek_200_response_days_inner_items_inner::getSlot() const {
    return m_slot;
}
void OAIGetMealPlanWeek_200_response_days_inner_items_inner::setSlot(const qint32 &slot) {
    m_slot = slot;
    m_slot_isSet = true;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_slot_Set() const{
    return m_slot_isSet;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_slot_Valid() const{
    return m_slot_isValid;
}

QString OAIGetMealPlanWeek_200_response_days_inner_items_inner::getType() const {
    return m_type;
}
void OAIGetMealPlanWeek_200_response_days_inner_items_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_type_Valid() const{
    return m_type_isValid;
}

OAIGetMealPlanWeek_200_response_days_inner_items_inner_value OAIGetMealPlanWeek_200_response_days_inner_items_inner::getValue() const {
    return m_value;
}
void OAIGetMealPlanWeek_200_response_days_inner_items_inner::setValue(const OAIGetMealPlanWeek_200_response_days_inner_items_inner_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMealPlanWeek_200_response_days_inner_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_position_isValid && m_slot_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
