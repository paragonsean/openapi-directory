/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchRecipes_200_response_results_inner.h
 *
 * 
 */

#ifndef OAISearchRecipes_200_response_results_inner_H
#define OAISearchRecipes_200_response_results_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearchRecipes_200_response_results_inner : public OAIObject {
public:
    OAISearchRecipes_200_response_results_inner();
    OAISearchRecipes_200_response_results_inner(QString json);
    ~OAISearchRecipes_200_response_results_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCalories() const;
    void setCalories(const double &calories);
    bool is_calories_Set() const;
    bool is_calories_Valid() const;

    QString getCarbs() const;
    void setCarbs(const QString &carbs);
    bool is_carbs_Set() const;
    bool is_carbs_Valid() const;

    QString getFat() const;
    void setFat(const QString &fat);
    bool is_fat_Set() const;
    bool is_fat_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageType() const;
    void setImageType(const QString &image_type);
    bool is_image_type_Set() const;
    bool is_image_type_Valid() const;

    QString getProtein() const;
    void setProtein(const QString &protein);
    bool is_protein_Set() const;
    bool is_protein_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_calories;
    bool m_calories_isSet;
    bool m_calories_isValid;

    QString m_carbs;
    bool m_carbs_isSet;
    bool m_carbs_isValid;

    QString m_fat;
    bool m_fat_isSet;
    bool m_fat_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;

    QString m_protein;
    bool m_protein_isSet;
    bool m_protein_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchRecipes_200_response_results_inner)

#endif // OAISearchRecipes_200_response_results_inner_H
