/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnalysisByURL_200_response_nutrition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnalysisByURL_200_response_nutrition::OAIImageAnalysisByURL_200_response_nutrition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnalysisByURL_200_response_nutrition::OAIImageAnalysisByURL_200_response_nutrition() {
    this->initializeModel();
}

OAIImageAnalysisByURL_200_response_nutrition::~OAIImageAnalysisByURL_200_response_nutrition() {}

void OAIImageAnalysisByURL_200_response_nutrition::initializeModel() {

    m_calories_isSet = false;
    m_calories_isValid = false;

    m_carbs_isSet = false;
    m_carbs_isValid = false;

    m_fat_isSet = false;
    m_fat_isValid = false;

    m_protein_isSet = false;
    m_protein_isValid = false;

    m_recipes_used_isSet = false;
    m_recipes_used_isValid = false;
}

void OAIImageAnalysisByURL_200_response_nutrition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAnalysisByURL_200_response_nutrition::fromJsonObject(QJsonObject json) {

    m_calories_isValid = ::OpenAPI::fromJsonValue(m_calories, json[QString("calories")]);
    m_calories_isSet = !json[QString("calories")].isNull() && m_calories_isValid;

    m_carbs_isValid = ::OpenAPI::fromJsonValue(m_carbs, json[QString("carbs")]);
    m_carbs_isSet = !json[QString("carbs")].isNull() && m_carbs_isValid;

    m_fat_isValid = ::OpenAPI::fromJsonValue(m_fat, json[QString("fat")]);
    m_fat_isSet = !json[QString("fat")].isNull() && m_fat_isValid;

    m_protein_isValid = ::OpenAPI::fromJsonValue(m_protein, json[QString("protein")]);
    m_protein_isSet = !json[QString("protein")].isNull() && m_protein_isValid;

    m_recipes_used_isValid = ::OpenAPI::fromJsonValue(m_recipes_used, json[QString("recipesUsed")]);
    m_recipes_used_isSet = !json[QString("recipesUsed")].isNull() && m_recipes_used_isValid;
}

QString OAIImageAnalysisByURL_200_response_nutrition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAnalysisByURL_200_response_nutrition::asJsonObject() const {
    QJsonObject obj;
    if (m_calories.isSet()) {
        obj.insert(QString("calories"), ::OpenAPI::toJsonValue(m_calories));
    }
    if (m_carbs.isSet()) {
        obj.insert(QString("carbs"), ::OpenAPI::toJsonValue(m_carbs));
    }
    if (m_fat.isSet()) {
        obj.insert(QString("fat"), ::OpenAPI::toJsonValue(m_fat));
    }
    if (m_protein.isSet()) {
        obj.insert(QString("protein"), ::OpenAPI::toJsonValue(m_protein));
    }
    if (m_recipes_used_isSet) {
        obj.insert(QString("recipesUsed"), ::OpenAPI::toJsonValue(m_recipes_used));
    }
    return obj;
}

OAIImageAnalysisByURL_200_response_nutrition_calories OAIImageAnalysisByURL_200_response_nutrition::getCalories() const {
    return m_calories;
}
void OAIImageAnalysisByURL_200_response_nutrition::setCalories(const OAIImageAnalysisByURL_200_response_nutrition_calories &calories) {
    m_calories = calories;
    m_calories_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_calories_Set() const{
    return m_calories_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_calories_Valid() const{
    return m_calories_isValid;
}

OAIImageAnalysisByURL_200_response_nutrition_calories OAIImageAnalysisByURL_200_response_nutrition::getCarbs() const {
    return m_carbs;
}
void OAIImageAnalysisByURL_200_response_nutrition::setCarbs(const OAIImageAnalysisByURL_200_response_nutrition_calories &carbs) {
    m_carbs = carbs;
    m_carbs_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_carbs_Set() const{
    return m_carbs_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_carbs_Valid() const{
    return m_carbs_isValid;
}

OAIImageAnalysisByURL_200_response_nutrition_calories OAIImageAnalysisByURL_200_response_nutrition::getFat() const {
    return m_fat;
}
void OAIImageAnalysisByURL_200_response_nutrition::setFat(const OAIImageAnalysisByURL_200_response_nutrition_calories &fat) {
    m_fat = fat;
    m_fat_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_fat_Set() const{
    return m_fat_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_fat_Valid() const{
    return m_fat_isValid;
}

OAIImageAnalysisByURL_200_response_nutrition_calories OAIImageAnalysisByURL_200_response_nutrition::getProtein() const {
    return m_protein;
}
void OAIImageAnalysisByURL_200_response_nutrition::setProtein(const OAIImageAnalysisByURL_200_response_nutrition_calories &protein) {
    m_protein = protein;
    m_protein_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_protein_Set() const{
    return m_protein_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_protein_Valid() const{
    return m_protein_isValid;
}

qint32 OAIImageAnalysisByURL_200_response_nutrition::getRecipesUsed() const {
    return m_recipes_used;
}
void OAIImageAnalysisByURL_200_response_nutrition::setRecipesUsed(const qint32 &recipes_used) {
    m_recipes_used = recipes_used;
    m_recipes_used_isSet = true;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_recipes_used_Set() const{
    return m_recipes_used_isSet;
}

bool OAIImageAnalysisByURL_200_response_nutrition::is_recipes_used_Valid() const{
    return m_recipes_used_isValid;
}

bool OAIImageAnalysisByURL_200_response_nutrition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carbs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protein.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipes_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAnalysisByURL_200_response_nutrition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calories_isValid && m_carbs_isValid && m_fat_isValid && m_protein_isValid && m_recipes_used_isValid && true;
}

} // namespace OpenAPI
