/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRestaurants_200_response_restaurants_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRestaurants_200_response_restaurants_inner::OAISearchRestaurants_200_response_restaurants_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRestaurants_200_response_restaurants_inner::OAISearchRestaurants_200_response_restaurants_inner() {
    this->initializeModel();
}

OAISearchRestaurants_200_response_restaurants_inner::~OAISearchRestaurants_200_response_restaurants_inner() {}

void OAISearchRestaurants_200_response_restaurants_inner::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_aggregated_rating_count_isSet = false;
    m_aggregated_rating_count_isValid = false;

    m_cuisines_isSet = false;
    m_cuisines_isValid = false;

    m_delivery_enabled_isSet = false;
    m_delivery_enabled_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dollar_signs_isSet = false;
    m_dollar_signs_isValid = false;

    m_food_photos_isSet = false;
    m_food_photos_isValid = false;

    m_is_open_isSet = false;
    m_is_open_isValid = false;

    m_local_hours_isSet = false;
    m_local_hours_isValid = false;

    m_logo_photos_isSet = false;
    m_logo_photos_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offers_first_party_delivery_isSet = false;
    m_offers_first_party_delivery_isValid = false;

    m_offers_third_party_delivery_isSet = false;
    m_offers_third_party_delivery_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_pickup_enabled_isSet = false;
    m_pickup_enabled_isValid = false;

    m_store_photos_isSet = false;
    m_store_photos_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_weighted_rating_value_isSet = false;
    m_weighted_rating_value_isValid = false;
}

void OAISearchRestaurants_200_response_restaurants_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRestaurants_200_response_restaurants_inner::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_aggregated_rating_count_isValid = ::OpenAPI::fromJsonValue(m_aggregated_rating_count, json[QString("aggregated_rating_count")]);
    m_aggregated_rating_count_isSet = !json[QString("aggregated_rating_count")].isNull() && m_aggregated_rating_count_isValid;

    m_cuisines_isValid = ::OpenAPI::fromJsonValue(m_cuisines, json[QString("cuisines")]);
    m_cuisines_isSet = !json[QString("cuisines")].isNull() && m_cuisines_isValid;

    m_delivery_enabled_isValid = ::OpenAPI::fromJsonValue(m_delivery_enabled, json[QString("delivery_enabled")]);
    m_delivery_enabled_isSet = !json[QString("delivery_enabled")].isNull() && m_delivery_enabled_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dollar_signs_isValid = ::OpenAPI::fromJsonValue(m_dollar_signs, json[QString("dollar_signs")]);
    m_dollar_signs_isSet = !json[QString("dollar_signs")].isNull() && m_dollar_signs_isValid;

    m_food_photos_isValid = ::OpenAPI::fromJsonValue(m_food_photos, json[QString("food_photos")]);
    m_food_photos_isSet = !json[QString("food_photos")].isNull() && m_food_photos_isValid;

    m_is_open_isValid = ::OpenAPI::fromJsonValue(m_is_open, json[QString("is_open")]);
    m_is_open_isSet = !json[QString("is_open")].isNull() && m_is_open_isValid;

    m_local_hours_isValid = ::OpenAPI::fromJsonValue(m_local_hours, json[QString("local_hours")]);
    m_local_hours_isSet = !json[QString("local_hours")].isNull() && m_local_hours_isValid;

    m_logo_photos_isValid = ::OpenAPI::fromJsonValue(m_logo_photos, json[QString("logo_photos")]);
    m_logo_photos_isSet = !json[QString("logo_photos")].isNull() && m_logo_photos_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offers_first_party_delivery_isValid = ::OpenAPI::fromJsonValue(m_offers_first_party_delivery, json[QString("offers_first_party_delivery")]);
    m_offers_first_party_delivery_isSet = !json[QString("offers_first_party_delivery")].isNull() && m_offers_first_party_delivery_isValid;

    m_offers_third_party_delivery_isValid = ::OpenAPI::fromJsonValue(m_offers_third_party_delivery, json[QString("offers_third_party_delivery")]);
    m_offers_third_party_delivery_isSet = !json[QString("offers_third_party_delivery")].isNull() && m_offers_third_party_delivery_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_pickup_enabled_isValid = ::OpenAPI::fromJsonValue(m_pickup_enabled, json[QString("pickup_enabled")]);
    m_pickup_enabled_isSet = !json[QString("pickup_enabled")].isNull() && m_pickup_enabled_isValid;

    m_store_photos_isValid = ::OpenAPI::fromJsonValue(m_store_photos, json[QString("store_photos")]);
    m_store_photos_isSet = !json[QString("store_photos")].isNull() && m_store_photos_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_weighted_rating_value_isValid = ::OpenAPI::fromJsonValue(m_weighted_rating_value, json[QString("weighted_rating_value")]);
    m_weighted_rating_value_isSet = !json[QString("weighted_rating_value")].isNull() && m_weighted_rating_value_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRestaurants_200_response_restaurants_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_aggregated_rating_count_isSet) {
        obj.insert(QString("aggregated_rating_count"), ::OpenAPI::toJsonValue(m_aggregated_rating_count));
    }
    if (m_cuisines.size() > 0) {
        obj.insert(QString("cuisines"), ::OpenAPI::toJsonValue(m_cuisines));
    }
    if (m_delivery_enabled_isSet) {
        obj.insert(QString("delivery_enabled"), ::OpenAPI::toJsonValue(m_delivery_enabled));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dollar_signs_isSet) {
        obj.insert(QString("dollar_signs"), ::OpenAPI::toJsonValue(m_dollar_signs));
    }
    if (m_food_photos.size() > 0) {
        obj.insert(QString("food_photos"), ::OpenAPI::toJsonValue(m_food_photos));
    }
    if (m_is_open_isSet) {
        obj.insert(QString("is_open"), ::OpenAPI::toJsonValue(m_is_open));
    }
    if (m_local_hours.isSet()) {
        obj.insert(QString("local_hours"), ::OpenAPI::toJsonValue(m_local_hours));
    }
    if (m_logo_photos.size() > 0) {
        obj.insert(QString("logo_photos"), ::OpenAPI::toJsonValue(m_logo_photos));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offers_first_party_delivery_isSet) {
        obj.insert(QString("offers_first_party_delivery"), ::OpenAPI::toJsonValue(m_offers_first_party_delivery));
    }
    if (m_offers_third_party_delivery_isSet) {
        obj.insert(QString("offers_third_party_delivery"), ::OpenAPI::toJsonValue(m_offers_third_party_delivery));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_pickup_enabled_isSet) {
        obj.insert(QString("pickup_enabled"), ::OpenAPI::toJsonValue(m_pickup_enabled));
    }
    if (m_store_photos.size() > 0) {
        obj.insert(QString("store_photos"), ::OpenAPI::toJsonValue(m_store_photos));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_weighted_rating_value_isSet) {
        obj.insert(QString("weighted_rating_value"), ::OpenAPI::toJsonValue(m_weighted_rating_value));
    }
    return obj;
}

QString OAISearchRestaurants_200_response_restaurants_inner::getId() const {
    return m__id;
}
void OAISearchRestaurants_200_response_restaurants_inner::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is__id_Set() const{
    return m__id_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is__id_Valid() const{
    return m__id_isValid;
}

OAISearchRestaurants_200_response_restaurants_inner_address OAISearchRestaurants_200_response_restaurants_inner::getAddress() const {
    return m_address;
}
void OAISearchRestaurants_200_response_restaurants_inner::setAddress(const OAISearchRestaurants_200_response_restaurants_inner_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAISearchRestaurants_200_response_restaurants_inner::getAggregatedRatingCount() const {
    return m_aggregated_rating_count;
}
void OAISearchRestaurants_200_response_restaurants_inner::setAggregatedRatingCount(const qint32 &aggregated_rating_count) {
    m_aggregated_rating_count = aggregated_rating_count;
    m_aggregated_rating_count_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_aggregated_rating_count_Set() const{
    return m_aggregated_rating_count_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_aggregated_rating_count_Valid() const{
    return m_aggregated_rating_count_isValid;
}

QList<QString> OAISearchRestaurants_200_response_restaurants_inner::getCuisines() const {
    return m_cuisines;
}
void OAISearchRestaurants_200_response_restaurants_inner::setCuisines(const QList<QString> &cuisines) {
    m_cuisines = cuisines;
    m_cuisines_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_cuisines_Set() const{
    return m_cuisines_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_cuisines_Valid() const{
    return m_cuisines_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isDeliveryEnabled() const {
    return m_delivery_enabled;
}
void OAISearchRestaurants_200_response_restaurants_inner::setDeliveryEnabled(const bool &delivery_enabled) {
    m_delivery_enabled = delivery_enabled;
    m_delivery_enabled_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_delivery_enabled_Set() const{
    return m_delivery_enabled_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_delivery_enabled_Valid() const{
    return m_delivery_enabled_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner::getDescription() const {
    return m_description;
}
void OAISearchRestaurants_200_response_restaurants_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISearchRestaurants_200_response_restaurants_inner::getDollarSigns() const {
    return m_dollar_signs;
}
void OAISearchRestaurants_200_response_restaurants_inner::setDollarSigns(const qint32 &dollar_signs) {
    m_dollar_signs = dollar_signs;
    m_dollar_signs_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_dollar_signs_Set() const{
    return m_dollar_signs_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_dollar_signs_Valid() const{
    return m_dollar_signs_isValid;
}

QList<QString> OAISearchRestaurants_200_response_restaurants_inner::getFoodPhotos() const {
    return m_food_photos;
}
void OAISearchRestaurants_200_response_restaurants_inner::setFoodPhotos(const QList<QString> &food_photos) {
    m_food_photos = food_photos;
    m_food_photos_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_food_photos_Set() const{
    return m_food_photos_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_food_photos_Valid() const{
    return m_food_photos_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isIsOpen() const {
    return m_is_open;
}
void OAISearchRestaurants_200_response_restaurants_inner::setIsOpen(const bool &is_open) {
    m_is_open = is_open;
    m_is_open_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_is_open_Set() const{
    return m_is_open_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_is_open_Valid() const{
    return m_is_open_isValid;
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours OAISearchRestaurants_200_response_restaurants_inner::getLocalHours() const {
    return m_local_hours;
}
void OAISearchRestaurants_200_response_restaurants_inner::setLocalHours(const OAISearchRestaurants_200_response_restaurants_inner_local_hours &local_hours) {
    m_local_hours = local_hours;
    m_local_hours_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_local_hours_Set() const{
    return m_local_hours_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_local_hours_Valid() const{
    return m_local_hours_isValid;
}

QList<QString> OAISearchRestaurants_200_response_restaurants_inner::getLogoPhotos() const {
    return m_logo_photos;
}
void OAISearchRestaurants_200_response_restaurants_inner::setLogoPhotos(const QList<QString> &logo_photos) {
    m_logo_photos = logo_photos;
    m_logo_photos_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_logo_photos_Set() const{
    return m_logo_photos_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_logo_photos_Valid() const{
    return m_logo_photos_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner::getMiles() const {
    return m_miles;
}
void OAISearchRestaurants_200_response_restaurants_inner::setMiles(const double &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_miles_Valid() const{
    return m_miles_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner::getName() const {
    return m_name;
}
void OAISearchRestaurants_200_response_restaurants_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isOffersFirstPartyDelivery() const {
    return m_offers_first_party_delivery;
}
void OAISearchRestaurants_200_response_restaurants_inner::setOffersFirstPartyDelivery(const bool &offers_first_party_delivery) {
    m_offers_first_party_delivery = offers_first_party_delivery;
    m_offers_first_party_delivery_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_offers_first_party_delivery_Set() const{
    return m_offers_first_party_delivery_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_offers_first_party_delivery_Valid() const{
    return m_offers_first_party_delivery_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isOffersThirdPartyDelivery() const {
    return m_offers_third_party_delivery;
}
void OAISearchRestaurants_200_response_restaurants_inner::setOffersThirdPartyDelivery(const bool &offers_third_party_delivery) {
    m_offers_third_party_delivery = offers_third_party_delivery;
    m_offers_third_party_delivery_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_offers_third_party_delivery_Set() const{
    return m_offers_third_party_delivery_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_offers_third_party_delivery_Valid() const{
    return m_offers_third_party_delivery_isValid;
}

qint32 OAISearchRestaurants_200_response_restaurants_inner::getPhoneNumber() const {
    return m_phone_number;
}
void OAISearchRestaurants_200_response_restaurants_inner::setPhoneNumber(const qint32 &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isPickupEnabled() const {
    return m_pickup_enabled;
}
void OAISearchRestaurants_200_response_restaurants_inner::setPickupEnabled(const bool &pickup_enabled) {
    m_pickup_enabled = pickup_enabled;
    m_pickup_enabled_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_pickup_enabled_Set() const{
    return m_pickup_enabled_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_pickup_enabled_Valid() const{
    return m_pickup_enabled_isValid;
}

QList<OAIObject> OAISearchRestaurants_200_response_restaurants_inner::getStorePhotos() const {
    return m_store_photos;
}
void OAISearchRestaurants_200_response_restaurants_inner::setStorePhotos(const QList<OAIObject> &store_photos) {
    m_store_photos = store_photos;
    m_store_photos_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_store_photos_Set() const{
    return m_store_photos_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_store_photos_Valid() const{
    return m_store_photos_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner::getType() const {
    return m_type;
}
void OAISearchRestaurants_200_response_restaurants_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_type_Valid() const{
    return m_type_isValid;
}

double OAISearchRestaurants_200_response_restaurants_inner::getWeightedRatingValue() const {
    return m_weighted_rating_value;
}
void OAISearchRestaurants_200_response_restaurants_inner::setWeightedRatingValue(const double &weighted_rating_value) {
    m_weighted_rating_value = weighted_rating_value;
    m_weighted_rating_value_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_weighted_rating_value_Set() const{
    return m_weighted_rating_value_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner::is_weighted_rating_value_Valid() const{
    return m_weighted_rating_value_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregated_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cuisines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dollar_signs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers_first_party_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers_third_party_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_rating_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRestaurants_200_response_restaurants_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
