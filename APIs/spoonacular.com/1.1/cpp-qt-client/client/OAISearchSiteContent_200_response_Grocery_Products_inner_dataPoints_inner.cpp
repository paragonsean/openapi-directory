/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner() {
    this->initializeModel();
}

OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::~OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner() {}

void OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::getKey() const {
    return m_key;
}
void OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::getValue() const {
    return m_value;
}
void OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSiteContent_200_response_Grocery_Products_inner_dataPoints_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
