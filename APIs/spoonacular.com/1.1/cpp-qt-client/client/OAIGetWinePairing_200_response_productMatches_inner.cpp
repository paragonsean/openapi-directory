/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWinePairing_200_response_productMatches_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWinePairing_200_response_productMatches_inner::OAIGetWinePairing_200_response_productMatches_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWinePairing_200_response_productMatches_inner::OAIGetWinePairing_200_response_productMatches_inner() {
    this->initializeModel();
}

OAIGetWinePairing_200_response_productMatches_inner::~OAIGetWinePairing_200_response_productMatches_inner() {}

void OAIGetWinePairing_200_response_productMatches_inner::initializeModel() {

    m_average_rating_isSet = false;
    m_average_rating_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_rating_count_isSet = false;
    m_rating_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGetWinePairing_200_response_productMatches_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWinePairing_200_response_productMatches_inner::fromJsonObject(QJsonObject json) {

    m_average_rating_isValid = ::OpenAPI::fromJsonValue(m_average_rating, json[QString("averageRating")]);
    m_average_rating_isSet = !json[QString("averageRating")].isNull() && m_average_rating_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_rating_count_isValid = ::OpenAPI::fromJsonValue(m_rating_count, json[QString("ratingCount")]);
    m_rating_count_isSet = !json[QString("ratingCount")].isNull() && m_rating_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGetWinePairing_200_response_productMatches_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWinePairing_200_response_productMatches_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_average_rating_isSet) {
        obj.insert(QString("averageRating"), ::OpenAPI::toJsonValue(m_average_rating));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_rating_count_isSet) {
        obj.insert(QString("ratingCount"), ::OpenAPI::toJsonValue(m_rating_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

double OAIGetWinePairing_200_response_productMatches_inner::getAverageRating() const {
    return m_average_rating;
}
void OAIGetWinePairing_200_response_productMatches_inner::setAverageRating(const double &average_rating) {
    m_average_rating = average_rating;
    m_average_rating_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_average_rating_Set() const{
    return m_average_rating_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_average_rating_Valid() const{
    return m_average_rating_isValid;
}

QJsonValue OAIGetWinePairing_200_response_productMatches_inner::getDescription() const {
    return m_description;
}
void OAIGetWinePairing_200_response_productMatches_inner::setDescription(const QJsonValue &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGetWinePairing_200_response_productMatches_inner::getId() const {
    return m_id;
}
void OAIGetWinePairing_200_response_productMatches_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetWinePairing_200_response_productMatches_inner::getImageUrl() const {
    return m_image_url;
}
void OAIGetWinePairing_200_response_productMatches_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGetWinePairing_200_response_productMatches_inner::getLink() const {
    return m_link;
}
void OAIGetWinePairing_200_response_productMatches_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIGetWinePairing_200_response_productMatches_inner::getPrice() const {
    return m_price;
}
void OAIGetWinePairing_200_response_productMatches_inner::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_price_Set() const{
    return m_price_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIGetWinePairing_200_response_productMatches_inner::getRatingCount() const {
    return m_rating_count;
}
void OAIGetWinePairing_200_response_productMatches_inner::setRatingCount(const qint32 &rating_count) {
    m_rating_count = rating_count;
    m_rating_count_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_rating_count_Set() const{
    return m_rating_count_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_rating_count_Valid() const{
    return m_rating_count_isValid;
}

double OAIGetWinePairing_200_response_productMatches_inner::getScore() const {
    return m_score;
}
void OAIGetWinePairing_200_response_productMatches_inner::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIGetWinePairing_200_response_productMatches_inner::getTitle() const {
    return m_title;
}
void OAIGetWinePairing_200_response_productMatches_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetWinePairing_200_response_productMatches_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGetWinePairing_200_response_productMatches_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWinePairing_200_response_productMatches_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_average_rating_isValid && m_id_isValid && m_image_url_isValid && m_link_isValid && m_price_isValid && m_rating_count_isValid && m_score_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
