/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetRecipeNutritionWidgetByID_200_response.h
 *
 * 
 */

#ifndef OAIGetRecipeNutritionWidgetByID_200_response_H
#define OAIGetRecipeNutritionWidgetByID_200_response_H

#include <QJsonObject>

#include "OAIGetRecipeNutritionWidgetByID_200_response_bad_inner.h"
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetRecipeNutritionWidgetByID_200_response_bad_inner;

class OAIGetRecipeNutritionWidgetByID_200_response : public OAIObject {
public:
    OAIGetRecipeNutritionWidgetByID_200_response();
    OAIGetRecipeNutritionWidgetByID_200_response(QString json);
    ~OAIGetRecipeNutritionWidgetByID_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> getBad() const;
    void setBad(const QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> &bad);
    bool is_bad_Set() const;
    bool is_bad_Valid() const;

    QString getCalories() const;
    void setCalories(const QString &calories);
    bool is_calories_Set() const;
    bool is_calories_Valid() const;

    QString getCarbs() const;
    void setCarbs(const QString &carbs);
    bool is_carbs_Set() const;
    bool is_carbs_Valid() const;

    QString getFat() const;
    void setFat(const QString &fat);
    bool is_fat_Set() const;
    bool is_fat_Valid() const;

    QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> getGood() const;
    void setGood(const QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> &good);
    bool is_good_Set() const;
    bool is_good_Valid() const;

    QString getProtein() const;
    void setProtein(const QString &protein);
    bool is_protein_Set() const;
    bool is_protein_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> m_bad;
    bool m_bad_isSet;
    bool m_bad_isValid;

    QString m_calories;
    bool m_calories_isSet;
    bool m_calories_isValid;

    QString m_carbs;
    bool m_carbs_isSet;
    bool m_carbs_isValid;

    QString m_fat;
    bool m_fat_isSet;
    bool m_fat_isValid;

    QSet<OAIGetRecipeNutritionWidgetByID_200_response_bad_inner> m_good;
    bool m_good_isSet;
    bool m_good_isValid;

    QString m_protein;
    bool m_protein_isSet;
    bool m_protein_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetRecipeNutritionWidgetByID_200_response)

#endif // OAIGetRecipeNutritionWidgetByID_200_response_H
