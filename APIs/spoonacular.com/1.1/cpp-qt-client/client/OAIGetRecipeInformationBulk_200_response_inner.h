/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetRecipeInformationBulk_200_response_inner.h
 *
 * 
 */

#ifndef OAIGetRecipeInformationBulk_200_response_inner_H
#define OAIGetRecipeInformationBulk_200_response_inner_H

#include <QJsonObject>

#include "OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner.h"
#include "OAIExtractRecipeFromWebsite_200_response_winePairing.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner;
class OAIExtractRecipeFromWebsite_200_response_winePairing;

class OAIGetRecipeInformationBulk_200_response_inner : public OAIObject {
public:
    OAIGetRecipeInformationBulk_200_response_inner();
    OAIGetRecipeInformationBulk_200_response_inner(QString json);
    ~OAIGetRecipeInformationBulk_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAggregateLikes() const;
    void setAggregateLikes(const qint32 &aggregate_likes);
    bool is_aggregate_likes_Set() const;
    bool is_aggregate_likes_Valid() const;

    QList<QString> getAnalyzedInstructions() const;
    void setAnalyzedInstructions(const QList<QString> &analyzed_instructions);
    bool is_analyzed_instructions_Set() const;
    bool is_analyzed_instructions_Valid() const;

    bool isCheap() const;
    void setCheap(const bool &cheap);
    bool is_cheap_Set() const;
    bool is_cheap_Valid() const;

    QString getCreditsText() const;
    void setCreditsText(const QString &credits_text);
    bool is_credits_text_Set() const;
    bool is_credits_text_Valid() const;

    QList<QString> getCuisines() const;
    void setCuisines(const QList<QString> &cuisines);
    bool is_cuisines_Set() const;
    bool is_cuisines_Valid() const;

    bool isDairyFree() const;
    void setDairyFree(const bool &dairy_free);
    bool is_dairy_free_Set() const;
    bool is_dairy_free_Valid() const;

    QList<QString> getDiets() const;
    void setDiets(const QList<QString> &diets);
    bool is_diets_Set() const;
    bool is_diets_Valid() const;

    QList<QString> getDishTypes() const;
    void setDishTypes(const QList<QString> &dish_types);
    bool is_dish_types_Set() const;
    bool is_dish_types_Valid() const;

    QSet<OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner> getExtendedIngredients() const;
    void setExtendedIngredients(const QSet<OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner> &extended_ingredients);
    bool is_extended_ingredients_Set() const;
    bool is_extended_ingredients_Valid() const;

    QString getGaps() const;
    void setGaps(const QString &gaps);
    bool is_gaps_Set() const;
    bool is_gaps_Valid() const;

    bool isGlutenFree() const;
    void setGlutenFree(const bool &gluten_free);
    bool is_gluten_free_Set() const;
    bool is_gluten_free_Valid() const;

    double getHealthScore() const;
    void setHealthScore(const double &health_score);
    bool is_health_score_Set() const;
    bool is_health_score_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImageType() const;
    void setImageType(const QString &image_type);
    bool is_image_type_Set() const;
    bool is_image_type_Valid() const;

    QString getInstructions() const;
    void setInstructions(const QString &instructions);
    bool is_instructions_Set() const;
    bool is_instructions_Valid() const;

    bool isKetogenic() const;
    void setKetogenic(const bool &ketogenic);
    bool is_ketogenic_Set() const;
    bool is_ketogenic_Valid() const;

    QString getLicense() const;
    void setLicense(const QString &license);
    bool is_license_Set() const;
    bool is_license_Valid() const;

    bool isLowFodmap() const;
    void setLowFodmap(const bool &low_fodmap);
    bool is_low_fodmap_Set() const;
    bool is_low_fodmap_Valid() const;

    QList<QString> getOccasions() const;
    void setOccasions(const QList<QString> &occasions);
    bool is_occasions_Set() const;
    bool is_occasions_Valid() const;

    double getPricePerServing() const;
    void setPricePerServing(const double &price_per_serving);
    bool is_price_per_serving_Set() const;
    bool is_price_per_serving_Valid() const;

    qint32 getReadyInMinutes() const;
    void setReadyInMinutes(const qint32 &ready_in_minutes);
    bool is_ready_in_minutes_Set() const;
    bool is_ready_in_minutes_Valid() const;

    double getServings() const;
    void setServings(const double &servings);
    bool is_servings_Set() const;
    bool is_servings_Valid() const;

    QString getSourceName() const;
    void setSourceName(const QString &source_name);
    bool is_source_name_Set() const;
    bool is_source_name_Valid() const;

    QString getSourceUrl() const;
    void setSourceUrl(const QString &source_url);
    bool is_source_url_Set() const;
    bool is_source_url_Valid() const;

    double getSpoonacularScore() const;
    void setSpoonacularScore(const double &spoonacular_score);
    bool is_spoonacular_score_Set() const;
    bool is_spoonacular_score_Valid() const;

    QString getSpoonacularSourceUrl() const;
    void setSpoonacularSourceUrl(const QString &spoonacular_source_url);
    bool is_spoonacular_source_url_Set() const;
    bool is_spoonacular_source_url_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    bool isSustainable() const;
    void setSustainable(const bool &sustainable);
    bool is_sustainable_Set() const;
    bool is_sustainable_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    bool isVegan() const;
    void setVegan(const bool &vegan);
    bool is_vegan_Set() const;
    bool is_vegan_Valid() const;

    bool isVegetarian() const;
    void setVegetarian(const bool &vegetarian);
    bool is_vegetarian_Set() const;
    bool is_vegetarian_Valid() const;

    bool isVeryHealthy() const;
    void setVeryHealthy(const bool &very_healthy);
    bool is_very_healthy_Set() const;
    bool is_very_healthy_Valid() const;

    bool isVeryPopular() const;
    void setVeryPopular(const bool &very_popular);
    bool is_very_popular_Set() const;
    bool is_very_popular_Valid() const;

    double getWeightWatcherSmartPoints() const;
    void setWeightWatcherSmartPoints(const double &weight_watcher_smart_points);
    bool is_weight_watcher_smart_points_Set() const;
    bool is_weight_watcher_smart_points_Valid() const;

    bool isWhole30() const;
    void setWhole30(const bool &whole30);
    bool is_whole30_Set() const;
    bool is_whole30_Valid() const;

    OAIExtractRecipeFromWebsite_200_response_winePairing getWinePairing() const;
    void setWinePairing(const OAIExtractRecipeFromWebsite_200_response_winePairing &wine_pairing);
    bool is_wine_pairing_Set() const;
    bool is_wine_pairing_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_aggregate_likes;
    bool m_aggregate_likes_isSet;
    bool m_aggregate_likes_isValid;

    QList<QString> m_analyzed_instructions;
    bool m_analyzed_instructions_isSet;
    bool m_analyzed_instructions_isValid;

    bool m_cheap;
    bool m_cheap_isSet;
    bool m_cheap_isValid;

    QString m_credits_text;
    bool m_credits_text_isSet;
    bool m_credits_text_isValid;

    QList<QString> m_cuisines;
    bool m_cuisines_isSet;
    bool m_cuisines_isValid;

    bool m_dairy_free;
    bool m_dairy_free_isSet;
    bool m_dairy_free_isValid;

    QList<QString> m_diets;
    bool m_diets_isSet;
    bool m_diets_isValid;

    QList<QString> m_dish_types;
    bool m_dish_types_isSet;
    bool m_dish_types_isValid;

    QSet<OAIExtractRecipeFromWebsite_200_response_extendedIngredients_inner> m_extended_ingredients;
    bool m_extended_ingredients_isSet;
    bool m_extended_ingredients_isValid;

    QString m_gaps;
    bool m_gaps_isSet;
    bool m_gaps_isValid;

    bool m_gluten_free;
    bool m_gluten_free_isSet;
    bool m_gluten_free_isValid;

    double m_health_score;
    bool m_health_score_isSet;
    bool m_health_score_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;

    QString m_instructions;
    bool m_instructions_isSet;
    bool m_instructions_isValid;

    bool m_ketogenic;
    bool m_ketogenic_isSet;
    bool m_ketogenic_isValid;

    QString m_license;
    bool m_license_isSet;
    bool m_license_isValid;

    bool m_low_fodmap;
    bool m_low_fodmap_isSet;
    bool m_low_fodmap_isValid;

    QList<QString> m_occasions;
    bool m_occasions_isSet;
    bool m_occasions_isValid;

    double m_price_per_serving;
    bool m_price_per_serving_isSet;
    bool m_price_per_serving_isValid;

    qint32 m_ready_in_minutes;
    bool m_ready_in_minutes_isSet;
    bool m_ready_in_minutes_isValid;

    double m_servings;
    bool m_servings_isSet;
    bool m_servings_isValid;

    QString m_source_name;
    bool m_source_name_isSet;
    bool m_source_name_isValid;

    QString m_source_url;
    bool m_source_url_isSet;
    bool m_source_url_isValid;

    double m_spoonacular_score;
    bool m_spoonacular_score_isSet;
    bool m_spoonacular_score_isValid;

    QString m_spoonacular_source_url;
    bool m_spoonacular_source_url_isSet;
    bool m_spoonacular_source_url_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;

    bool m_sustainable;
    bool m_sustainable_isSet;
    bool m_sustainable_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    bool m_vegan;
    bool m_vegan_isSet;
    bool m_vegan_isValid;

    bool m_vegetarian;
    bool m_vegetarian_isSet;
    bool m_vegetarian_isValid;

    bool m_very_healthy;
    bool m_very_healthy_isSet;
    bool m_very_healthy_isValid;

    bool m_very_popular;
    bool m_very_popular_isSet;
    bool m_very_popular_isValid;

    double m_weight_watcher_smart_points;
    bool m_weight_watcher_smart_points_isSet;
    bool m_weight_watcher_smart_points_isValid;

    bool m_whole30;
    bool m_whole30_isSet;
    bool m_whole30_isValid;

    OAIExtractRecipeFromWebsite_200_response_winePairing m_wine_pairing;
    bool m_wine_pairing_isSet;
    bool m_wine_pairing_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetRecipeInformationBulk_200_response_inner)

#endif // OAIGetRecipeInformationBulk_200_response_inner_H
