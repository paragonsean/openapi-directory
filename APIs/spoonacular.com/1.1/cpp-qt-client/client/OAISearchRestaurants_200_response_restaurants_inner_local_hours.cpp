/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRestaurants_200_response_restaurants_inner_local_hours.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRestaurants_200_response_restaurants_inner_local_hours::OAISearchRestaurants_200_response_restaurants_inner_local_hours(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours::OAISearchRestaurants_200_response_restaurants_inner_local_hours() {
    this->initializeModel();
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours::~OAISearchRestaurants_200_response_restaurants_inner_local_hours() {}

void OAISearchRestaurants_200_response_restaurants_inner_local_hours::initializeModel() {

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_dine_in_isSet = false;
    m_dine_in_isValid = false;

    m_operational_isSet = false;
    m_operational_isValid = false;

    m_pickup_isSet = false;
    m_pickup_isValid = false;
}

void OAISearchRestaurants_200_response_restaurants_inner_local_hours::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRestaurants_200_response_restaurants_inner_local_hours::fromJsonObject(QJsonObject json) {

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_dine_in_isValid = ::OpenAPI::fromJsonValue(m_dine_in, json[QString("dine_in")]);
    m_dine_in_isSet = !json[QString("dine_in")].isNull() && m_dine_in_isValid;

    m_operational_isValid = ::OpenAPI::fromJsonValue(m_operational, json[QString("operational")]);
    m_operational_isSet = !json[QString("operational")].isNull() && m_operational_isValid;

    m_pickup_isValid = ::OpenAPI::fromJsonValue(m_pickup, json[QString("pickup")]);
    m_pickup_isSet = !json[QString("pickup")].isNull() && m_pickup_isValid;
}

QString OAISearchRestaurants_200_response_restaurants_inner_local_hours::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRestaurants_200_response_restaurants_inner_local_hours::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery.isSet()) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_dine_in.isSet()) {
        obj.insert(QString("dine_in"), ::OpenAPI::toJsonValue(m_dine_in));
    }
    if (m_operational.isSet()) {
        obj.insert(QString("operational"), ::OpenAPI::toJsonValue(m_operational));
    }
    if (m_pickup.isSet()) {
        obj.insert(QString("pickup"), ::OpenAPI::toJsonValue(m_pickup));
    }
    return obj;
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery OAISearchRestaurants_200_response_restaurants_inner_local_hours::getDelivery() const {
    return m_delivery;
}
void OAISearchRestaurants_200_response_restaurants_inner_local_hours::setDelivery(const OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_delivery_Valid() const{
    return m_delivery_isValid;
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery OAISearchRestaurants_200_response_restaurants_inner_local_hours::getDineIn() const {
    return m_dine_in;
}
void OAISearchRestaurants_200_response_restaurants_inner_local_hours::setDineIn(const OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery &dine_in) {
    m_dine_in = dine_in;
    m_dine_in_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_dine_in_Set() const{
    return m_dine_in_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_dine_in_Valid() const{
    return m_dine_in_isValid;
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery OAISearchRestaurants_200_response_restaurants_inner_local_hours::getOperational() const {
    return m_operational;
}
void OAISearchRestaurants_200_response_restaurants_inner_local_hours::setOperational(const OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery &operational) {
    m_operational = operational;
    m_operational_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_operational_Set() const{
    return m_operational_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_operational_Valid() const{
    return m_operational_isValid;
}

OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery OAISearchRestaurants_200_response_restaurants_inner_local_hours::getPickup() const {
    return m_pickup;
}
void OAISearchRestaurants_200_response_restaurants_inner_local_hours::setPickup(const OAISearchRestaurants_200_response_restaurants_inner_local_hours_delivery &pickup) {
    m_pickup = pickup;
    m_pickup_isSet = true;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_pickup_Set() const{
    return m_pickup_isSet;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::is_pickup_Valid() const{
    return m_pickup_isValid;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dine_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRestaurants_200_response_restaurants_inner_local_hours::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
