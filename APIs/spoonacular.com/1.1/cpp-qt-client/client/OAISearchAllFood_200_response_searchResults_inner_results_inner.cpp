/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchAllFood_200_response_searchResults_inner_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchAllFood_200_response_searchResults_inner_results_inner::OAISearchAllFood_200_response_searchResults_inner_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchAllFood_200_response_searchResults_inner_results_inner::OAISearchAllFood_200_response_searchResults_inner_results_inner() {
    this->initializeModel();
}

OAISearchAllFood_200_response_searchResults_inner_results_inner::~OAISearchAllFood_200_response_searchResults_inner_results_inner() {}

void OAISearchAllFood_200_response_searchResults_inner_results_inner::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relevance_isSet = false;
    m_relevance_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearchAllFood_200_response_searchResults_inner_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchAllFood_200_response_searchResults_inner_results_inner::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relevance_isValid = ::OpenAPI::fromJsonValue(m_relevance, json[QString("relevance")]);
    m_relevance_isSet = !json[QString("relevance")].isNull() && m_relevance_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchAllFood_200_response_searchResults_inner_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relevance_isSet) {
        obj.insert(QString("relevance"), ::OpenAPI::toJsonValue(m_relevance));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getContent() const {
    return m_content;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_content_Set() const{
    return m_content_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_content_Valid() const{
    return m_content_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getId() const {
    return m_id;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getImage() const {
    return m_image;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getLink() const {
    return m_link;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getName() const {
    return m_name;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAISearchAllFood_200_response_searchResults_inner_results_inner::getRelevance() const {
    return m_relevance;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setRelevance(const double &relevance) {
    m_relevance = relevance;
    m_relevance_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_relevance_Set() const{
    return m_relevance_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_relevance_Valid() const{
    return m_relevance_isValid;
}

QString OAISearchAllFood_200_response_searchResults_inner_results_inner::getType() const {
    return m_type;
}
void OAISearchAllFood_200_response_searchResults_inner_results_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchAllFood_200_response_searchResults_inner_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_id_isValid && m_image_isValid && m_link_isValid && m_name_isValid && m_relevance_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
