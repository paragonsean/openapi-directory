/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeRecipe_request_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeRecipe_request_1::OAIAnalyzeRecipe_request_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeRecipe_request_1::OAIAnalyzeRecipe_request_1() {
    this->initializeModel();
}

OAIAnalyzeRecipe_request_1::~OAIAnalyzeRecipe_request_1() {}

void OAIAnalyzeRecipe_request_1::initializeModel() {

    m_ingredients_isSet = false;
    m_ingredients_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_servings_isSet = false;
    m_servings_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAnalyzeRecipe_request_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeRecipe_request_1::fromJsonObject(QJsonObject json) {

    m_ingredients_isValid = ::OpenAPI::fromJsonValue(m_ingredients, json[QString("ingredients")]);
    m_ingredients_isSet = !json[QString("ingredients")].isNull() && m_ingredients_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_servings_isValid = ::OpenAPI::fromJsonValue(m_servings, json[QString("servings")]);
    m_servings_isSet = !json[QString("servings")].isNull() && m_servings_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAnalyzeRecipe_request_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeRecipe_request_1::asJsonObject() const {
    QJsonObject obj;
    if (m_ingredients.size() > 0) {
        obj.insert(QString("ingredients"), ::OpenAPI::toJsonValue(m_ingredients));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_servings_isSet) {
        obj.insert(QString("servings"), ::OpenAPI::toJsonValue(m_servings));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAIAnalyzeRecipe_request_1::getIngredients() const {
    return m_ingredients;
}
void OAIAnalyzeRecipe_request_1::setIngredients(const QList<QString> &ingredients) {
    m_ingredients = ingredients;
    m_ingredients_isSet = true;
}

bool OAIAnalyzeRecipe_request_1::is_ingredients_Set() const{
    return m_ingredients_isSet;
}

bool OAIAnalyzeRecipe_request_1::is_ingredients_Valid() const{
    return m_ingredients_isValid;
}

QString OAIAnalyzeRecipe_request_1::getInstructions() const {
    return m_instructions;
}
void OAIAnalyzeRecipe_request_1::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIAnalyzeRecipe_request_1::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIAnalyzeRecipe_request_1::is_instructions_Valid() const{
    return m_instructions_isValid;
}

qint32 OAIAnalyzeRecipe_request_1::getServings() const {
    return m_servings;
}
void OAIAnalyzeRecipe_request_1::setServings(const qint32 &servings) {
    m_servings = servings;
    m_servings_isSet = true;
}

bool OAIAnalyzeRecipe_request_1::is_servings_Set() const{
    return m_servings_isSet;
}

bool OAIAnalyzeRecipe_request_1::is_servings_Valid() const{
    return m_servings_isValid;
}

QString OAIAnalyzeRecipe_request_1::getTitle() const {
    return m_title;
}
void OAIAnalyzeRecipe_request_1::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAnalyzeRecipe_request_1::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAnalyzeRecipe_request_1::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAnalyzeRecipe_request_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeRecipe_request_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
