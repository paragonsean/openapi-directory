/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFoodVideos_200_response_videos_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFoodVideos_200_response_videos_inner::OAISearchFoodVideos_200_response_videos_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFoodVideos_200_response_videos_inner::OAISearchFoodVideos_200_response_videos_inner() {
    this->initializeModel();
}

OAISearchFoodVideos_200_response_videos_inner::~OAISearchFoodVideos_200_response_videos_inner() {}

void OAISearchFoodVideos_200_response_videos_inner::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_you_tube_id_isSet = false;
    m_you_tube_id_isValid = false;
}

void OAISearchFoodVideos_200_response_videos_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchFoodVideos_200_response_videos_inner::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("shortTitle")]);
    m_short_title_isSet = !json[QString("shortTitle")].isNull() && m_short_title_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_you_tube_id_isValid = ::OpenAPI::fromJsonValue(m_you_tube_id, json[QString("youTubeId")]);
    m_you_tube_id_isSet = !json[QString("youTubeId")].isNull() && m_you_tube_id_isValid;
}

QString OAISearchFoodVideos_200_response_videos_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchFoodVideos_200_response_videos_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("shortTitle"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    if (m_you_tube_id_isSet) {
        obj.insert(QString("youTubeId"), ::OpenAPI::toJsonValue(m_you_tube_id));
    }
    return obj;
}

qint32 OAISearchFoodVideos_200_response_videos_inner::getLength() const {
    return m_length;
}
void OAISearchFoodVideos_200_response_videos_inner::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_length_Set() const{
    return m_length_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_length_Valid() const{
    return m_length_isValid;
}

double OAISearchFoodVideos_200_response_videos_inner::getRating() const {
    return m_rating;
}
void OAISearchFoodVideos_200_response_videos_inner::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAISearchFoodVideos_200_response_videos_inner::getShortTitle() const {
    return m_short_title;
}
void OAISearchFoodVideos_200_response_videos_inner::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_short_title_Valid() const{
    return m_short_title_isValid;
}

QString OAISearchFoodVideos_200_response_videos_inner::getThumbnail() const {
    return m_thumbnail;
}
void OAISearchFoodVideos_200_response_videos_inner::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAISearchFoodVideos_200_response_videos_inner::getTitle() const {
    return m_title;
}
void OAISearchFoodVideos_200_response_videos_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAISearchFoodVideos_200_response_videos_inner::getViews() const {
    return m_views;
}
void OAISearchFoodVideos_200_response_videos_inner::setViews(const qint32 &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_views_Set() const{
    return m_views_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_views_Valid() const{
    return m_views_isValid;
}

QString OAISearchFoodVideos_200_response_videos_inner::getYouTubeId() const {
    return m_you_tube_id;
}
void OAISearchFoodVideos_200_response_videos_inner::setYouTubeId(const QString &you_tube_id) {
    m_you_tube_id = you_tube_id;
    m_you_tube_id_isSet = true;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_you_tube_id_Set() const{
    return m_you_tube_id_isSet;
}

bool OAISearchFoodVideos_200_response_videos_inner::is_you_tube_id_Valid() const{
    return m_you_tube_id_isValid;
}

bool OAISearchFoodVideos_200_response_videos_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_you_tube_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchFoodVideos_200_response_videos_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_rating_isValid && m_short_title_isValid && m_thumbnail_isValid && m_title_isValid && m_views_isValid && m_you_tube_id_isValid && true;
}

} // namespace OpenAPI
