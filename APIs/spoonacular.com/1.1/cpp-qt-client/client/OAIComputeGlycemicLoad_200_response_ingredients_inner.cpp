/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeGlycemicLoad_200_response_ingredients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeGlycemicLoad_200_response_ingredients_inner::OAIComputeGlycemicLoad_200_response_ingredients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeGlycemicLoad_200_response_ingredients_inner::OAIComputeGlycemicLoad_200_response_ingredients_inner() {
    this->initializeModel();
}

OAIComputeGlycemicLoad_200_response_ingredients_inner::~OAIComputeGlycemicLoad_200_response_ingredients_inner() {}

void OAIComputeGlycemicLoad_200_response_ingredients_inner::initializeModel() {

    m_glycemic_index_isSet = false;
    m_glycemic_index_isValid = false;

    m_glycemic_load_isSet = false;
    m_glycemic_load_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;
}

void OAIComputeGlycemicLoad_200_response_ingredients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeGlycemicLoad_200_response_ingredients_inner::fromJsonObject(QJsonObject json) {

    m_glycemic_index_isValid = ::OpenAPI::fromJsonValue(m_glycemic_index, json[QString("glycemicIndex")]);
    m_glycemic_index_isSet = !json[QString("glycemicIndex")].isNull() && m_glycemic_index_isValid;

    m_glycemic_load_isValid = ::OpenAPI::fromJsonValue(m_glycemic_load, json[QString("glycemicLoad")]);
    m_glycemic_load_isSet = !json[QString("glycemicLoad")].isNull() && m_glycemic_load_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;
}

QString OAIComputeGlycemicLoad_200_response_ingredients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeGlycemicLoad_200_response_ingredients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_glycemic_index_isSet) {
        obj.insert(QString("glycemicIndex"), ::OpenAPI::toJsonValue(m_glycemic_index));
    }
    if (m_glycemic_load_isSet) {
        obj.insert(QString("glycemicLoad"), ::OpenAPI::toJsonValue(m_glycemic_load));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_isSet) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    return obj;
}

double OAIComputeGlycemicLoad_200_response_ingredients_inner::getGlycemicIndex() const {
    return m_glycemic_index;
}
void OAIComputeGlycemicLoad_200_response_ingredients_inner::setGlycemicIndex(const double &glycemic_index) {
    m_glycemic_index = glycemic_index;
    m_glycemic_index_isSet = true;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_glycemic_index_Set() const{
    return m_glycemic_index_isSet;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_glycemic_index_Valid() const{
    return m_glycemic_index_isValid;
}

double OAIComputeGlycemicLoad_200_response_ingredients_inner::getGlycemicLoad() const {
    return m_glycemic_load;
}
void OAIComputeGlycemicLoad_200_response_ingredients_inner::setGlycemicLoad(const double &glycemic_load) {
    m_glycemic_load = glycemic_load;
    m_glycemic_load_isSet = true;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_glycemic_load_Set() const{
    return m_glycemic_load_isSet;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_glycemic_load_Valid() const{
    return m_glycemic_load_isValid;
}

qint32 OAIComputeGlycemicLoad_200_response_ingredients_inner::getId() const {
    return m_id;
}
void OAIComputeGlycemicLoad_200_response_ingredients_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIComputeGlycemicLoad_200_response_ingredients_inner::getOriginal() const {
    return m_original;
}
void OAIComputeGlycemicLoad_200_response_ingredients_inner::setOriginal(const QString &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_original_Set() const{
    return m_original_isSet;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::is_original_Valid() const{
    return m_original_isValid;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_glycemic_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glycemic_load_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeGlycemicLoad_200_response_ingredients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_glycemic_index_isValid && m_glycemic_load_isValid && m_id_isValid && m_original_isValid && true;
}

} // namespace OpenAPI
