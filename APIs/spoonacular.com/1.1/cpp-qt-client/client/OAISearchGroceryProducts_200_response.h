/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchGroceryProducts_200_response.h
 *
 * 
 */

#ifndef OAISearchGroceryProducts_200_response_H
#define OAISearchGroceryProducts_200_response_H

#include <QJsonObject>

#include "OAISearchGroceryProducts_200_response_products_inner.h"
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISearchGroceryProducts_200_response_products_inner;

class OAISearchGroceryProducts_200_response : public OAIObject {
public:
    OAISearchGroceryProducts_200_response();
    OAISearchGroceryProducts_200_response(QString json);
    ~OAISearchGroceryProducts_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QSet<OAISearchGroceryProducts_200_response_products_inner> getProducts() const;
    void setProducts(const QSet<OAISearchGroceryProducts_200_response_products_inner> &products);
    bool is_products_Set() const;
    bool is_products_Valid() const;

    qint32 getTotalProducts() const;
    void setTotalProducts(const qint32 &total_products);
    bool is_total_products_Set() const;
    bool is_total_products_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QSet<OAISearchGroceryProducts_200_response_products_inner> m_products;
    bool m_products_isSet;
    bool m_products_isValid;

    qint32 m_total_products;
    bool m_total_products_isSet;
    bool m_total_products_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchGroceryProducts_200_response)

#endif // OAISearchGroceryProducts_200_response_H
