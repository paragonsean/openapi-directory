/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown() {
    this->initializeModel();
}

OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::~OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown() {}

void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::initializeModel() {

    m_percent_carbs_isSet = false;
    m_percent_carbs_isValid = false;

    m_percent_fat_isSet = false;
    m_percent_fat_isValid = false;

    m_percent_protein_isSet = false;
    m_percent_protein_isValid = false;
}

void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::fromJsonObject(QJsonObject json) {

    m_percent_carbs_isValid = ::OpenAPI::fromJsonValue(m_percent_carbs, json[QString("percentCarbs")]);
    m_percent_carbs_isSet = !json[QString("percentCarbs")].isNull() && m_percent_carbs_isValid;

    m_percent_fat_isValid = ::OpenAPI::fromJsonValue(m_percent_fat, json[QString("percentFat")]);
    m_percent_fat_isSet = !json[QString("percentFat")].isNull() && m_percent_fat_isValid;

    m_percent_protein_isValid = ::OpenAPI::fromJsonValue(m_percent_protein, json[QString("percentProtein")]);
    m_percent_protein_isSet = !json[QString("percentProtein")].isNull() && m_percent_protein_isValid;
}

QString OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_carbs_isSet) {
        obj.insert(QString("percentCarbs"), ::OpenAPI::toJsonValue(m_percent_carbs));
    }
    if (m_percent_fat_isSet) {
        obj.insert(QString("percentFat"), ::OpenAPI::toJsonValue(m_percent_fat));
    }
    if (m_percent_protein_isSet) {
        obj.insert(QString("percentProtein"), ::OpenAPI::toJsonValue(m_percent_protein));
    }
    return obj;
}

double OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::getPercentCarbs() const {
    return m_percent_carbs;
}
void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::setPercentCarbs(const double &percent_carbs) {
    m_percent_carbs = percent_carbs;
    m_percent_carbs_isSet = true;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_carbs_Set() const{
    return m_percent_carbs_isSet;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_carbs_Valid() const{
    return m_percent_carbs_isValid;
}

double OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::getPercentFat() const {
    return m_percent_fat;
}
void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::setPercentFat(const double &percent_fat) {
    m_percent_fat = percent_fat;
    m_percent_fat_isSet = true;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_fat_Set() const{
    return m_percent_fat_isSet;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_fat_Valid() const{
    return m_percent_fat_isValid;
}

double OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::getPercentProtein() const {
    return m_percent_protein;
}
void OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::setPercentProtein(const double &percent_protein) {
    m_percent_protein = percent_protein;
    m_percent_protein_isSet = true;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_protein_Set() const{
    return m_percent_protein_isSet;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::is_percent_protein_Valid() const{
    return m_percent_protein_isValid;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_carbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_fat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_protein_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIngredientInformation_200_response_nutrition_caloricBreakdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_percent_carbs_isValid && m_percent_fat_isValid && m_percent_protein_isValid && true;
}

} // namespace OpenAPI
