/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchFoodVideos_200_response_videos_inner.h
 *
 * 
 */

#ifndef OAISearchFoodVideos_200_response_videos_inner_H
#define OAISearchFoodVideos_200_response_videos_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearchFoodVideos_200_response_videos_inner : public OAIObject {
public:
    OAISearchFoodVideos_200_response_videos_inner();
    OAISearchFoodVideos_200_response_videos_inner(QString json);
    ~OAISearchFoodVideos_200_response_videos_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    QString getShortTitle() const;
    void setShortTitle(const QString &short_title);
    bool is_short_title_Set() const;
    bool is_short_title_Valid() const;

    QString getThumbnail() const;
    void setThumbnail(const QString &thumbnail);
    bool is_thumbnail_Set() const;
    bool is_thumbnail_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getViews() const;
    void setViews(const qint32 &views);
    bool is_views_Set() const;
    bool is_views_Valid() const;

    QString getYouTubeId() const;
    void setYouTubeId(const QString &you_tube_id);
    bool is_you_tube_id_Set() const;
    bool is_you_tube_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    QString m_short_title;
    bool m_short_title_isSet;
    bool m_short_title_isValid;

    QString m_thumbnail;
    bool m_thumbnail_isSet;
    bool m_thumbnail_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_views;
    bool m_views_isSet;
    bool m_views_isValid;

    QString m_you_tube_id;
    bool m_you_tube_id_isSet;
    bool m_you_tube_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchFoodVideos_200_response_videos_inner)

#endif // OAISearchFoodVideos_200_response_videos_inner_H
