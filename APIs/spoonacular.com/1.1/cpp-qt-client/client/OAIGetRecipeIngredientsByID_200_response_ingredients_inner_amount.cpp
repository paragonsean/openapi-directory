/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount() {
    this->initializeModel();
}

OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::~OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount() {}

void OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::initializeModel() {

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_us_isSet = false;
    m_us_isValid = false;
}

void OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::fromJsonObject(QJsonObject json) {

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_us_isValid = ::OpenAPI::fromJsonValue(m_us, json[QString("us")]);
    m_us_isSet = !json[QString("us")].isNull() && m_us_isValid;
}

QString OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::asJsonObject() const {
    QJsonObject obj;
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_us.isSet()) {
        obj.insert(QString("us"), ::OpenAPI::toJsonValue(m_us));
    }
    return obj;
}

OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount_metric OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::getMetric() const {
    return m_metric;
}
void OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::setMetric(const OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount_metric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::is_metric_Valid() const{
    return m_metric_isValid;
}

OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount_metric OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::getUs() const {
    return m_us;
}
void OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::setUs(const OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount_metric &us) {
    m_us = us;
    m_us_isSet = true;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::is_us_Set() const{
    return m_us_isSet;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::is_us_Valid() const{
    return m_us_isValid;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_us.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecipeIngredientsByID_200_response_ingredients_inner_amount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_isValid && m_us_isValid && true;
}

} // namespace OpenAPI
