/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParseIngredients_200_response_inner.h
 *
 * 
 */

#ifndef OAIParseIngredients_200_response_inner_H
#define OAIParseIngredients_200_response_inner_H

#include <QJsonObject>

#include "OAIGetIngredientInformation_200_response_estimatedCost.h"
#include "OAIParseIngredients_200_response_inner_nutrition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetIngredientInformation_200_response_estimatedCost;
class OAIParseIngredients_200_response_inner_nutrition;

class OAIParseIngredients_200_response_inner : public OAIObject {
public:
    OAIParseIngredients_200_response_inner();
    OAIParseIngredients_200_response_inner(QString json);
    ~OAIParseIngredients_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAisle() const;
    void setAisle(const QString &aisle);
    bool is_aisle_Set() const;
    bool is_aisle_Valid() const;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getConsistency() const;
    void setConsistency(const QString &consistency);
    bool is_consistency_Set() const;
    bool is_consistency_Valid() const;

    OAIGetIngredientInformation_200_response_estimatedCost getEstimatedCost() const;
    void setEstimatedCost(const OAIGetIngredientInformation_200_response_estimatedCost &estimated_cost);
    bool is_estimated_cost_Set() const;
    bool is_estimated_cost_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QList<QString> getMeta() const;
    void setMeta(const QList<QString> &meta);
    bool is_meta_Set() const;
    bool is_meta_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNameClean() const;
    void setNameClean(const QString &name_clean);
    bool is_name_clean_Set() const;
    bool is_name_clean_Valid() const;

    OAIParseIngredients_200_response_inner_nutrition getNutrition() const;
    void setNutrition(const OAIParseIngredients_200_response_inner_nutrition &nutrition);
    bool is_nutrition_Set() const;
    bool is_nutrition_Valid() const;

    QString getOriginal() const;
    void setOriginal(const QString &original);
    bool is_original_Set() const;
    bool is_original_Valid() const;

    QString getOriginalName() const;
    void setOriginalName(const QString &original_name);
    bool is_original_name_Set() const;
    bool is_original_name_Valid() const;

    QList<QString> getPossibleUnits() const;
    void setPossibleUnits(const QList<QString> &possible_units);
    bool is_possible_units_Set() const;
    bool is_possible_units_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QString getUnitLong() const;
    void setUnitLong(const QString &unit_long);
    bool is_unit_long_Set() const;
    bool is_unit_long_Valid() const;

    QString getUnitShort() const;
    void setUnitShort(const QString &unit_short);
    bool is_unit_short_Set() const;
    bool is_unit_short_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aisle;
    bool m_aisle_isSet;
    bool m_aisle_isValid;

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_consistency;
    bool m_consistency_isSet;
    bool m_consistency_isValid;

    OAIGetIngredientInformation_200_response_estimatedCost m_estimated_cost;
    bool m_estimated_cost_isSet;
    bool m_estimated_cost_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QList<QString> m_meta;
    bool m_meta_isSet;
    bool m_meta_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_name_clean;
    bool m_name_clean_isSet;
    bool m_name_clean_isValid;

    OAIParseIngredients_200_response_inner_nutrition m_nutrition;
    bool m_nutrition_isSet;
    bool m_nutrition_isValid;

    QString m_original;
    bool m_original_isSet;
    bool m_original_isValid;

    QString m_original_name;
    bool m_original_name_isSet;
    bool m_original_name_isValid;

    QList<QString> m_possible_units;
    bool m_possible_units_isSet;
    bool m_possible_units_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QString m_unit_long;
    bool m_unit_long_isSet;
    bool m_unit_long_isValid;

    QString m_unit_short;
    bool m_unit_short_isSet;
    bool m_unit_short_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParseIngredients_200_response_inner)

#endif // OAIParseIngredients_200_response_inner_H
