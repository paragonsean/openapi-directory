/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:54.949264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures {
  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric metric;

  public static final String SERIALIZED_NAME_US = "us";
  @SerializedName(SERIALIZED_NAME_US)
  private ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric us;

  public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures() {
  }

  public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures metric(ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nonnull
  public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric getMetric() {
    return metric;
  }

  public void setMetric(ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric metric) {
    this.metric = metric;
  }


  public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures us(ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric us) {
    this.us = us;
    return this;
  }

  /**
   * Get us
   * @return us
   */
  @javax.annotation.Nonnull
  public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric getUs() {
    return us;
  }

  public void setUs(ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric us) {
    this.us = us;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures extractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures = (ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures) o;
    return Objects.equals(this.metric, extractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.metric) &&
        Objects.equals(this.us, extractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.us);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metric, us);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures {\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    us: ").append(toIndentedString(us)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metric");
    openapiFields.add("us");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metric");
    openapiRequiredFields.add("us");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures is not found in the empty JSON string", ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `metric`
      ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.validateJsonElement(jsonObj.get("metric"));
      // validate the required field `us`
      ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.validateJsonElement(jsonObj.get("us"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures>() {
           @Override
           public void write(JsonWriter out, ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures
   * @throws IOException if the JSON string is invalid with respect to ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures
   */
  public static ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.class);
  }

  /**
   * Convert an instance of ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

