/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetIngredientInformation200ResponseNutritionCaloricBreakdown
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:54.949264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIngredientInformation200ResponseNutritionCaloricBreakdown {
  public static final String SERIALIZED_NAME_PERCENT_CARBS = "percentCarbs";
  @SerializedName(SERIALIZED_NAME_PERCENT_CARBS)
  private BigDecimal percentCarbs;

  public static final String SERIALIZED_NAME_PERCENT_FAT = "percentFat";
  @SerializedName(SERIALIZED_NAME_PERCENT_FAT)
  private BigDecimal percentFat;

  public static final String SERIALIZED_NAME_PERCENT_PROTEIN = "percentProtein";
  @SerializedName(SERIALIZED_NAME_PERCENT_PROTEIN)
  private BigDecimal percentProtein;

  public GetIngredientInformation200ResponseNutritionCaloricBreakdown() {
  }

  public GetIngredientInformation200ResponseNutritionCaloricBreakdown percentCarbs(BigDecimal percentCarbs) {
    this.percentCarbs = percentCarbs;
    return this;
  }

  /**
   * Get percentCarbs
   * @return percentCarbs
   */
  @javax.annotation.Nonnull
  public BigDecimal getPercentCarbs() {
    return percentCarbs;
  }

  public void setPercentCarbs(BigDecimal percentCarbs) {
    this.percentCarbs = percentCarbs;
  }


  public GetIngredientInformation200ResponseNutritionCaloricBreakdown percentFat(BigDecimal percentFat) {
    this.percentFat = percentFat;
    return this;
  }

  /**
   * Get percentFat
   * @return percentFat
   */
  @javax.annotation.Nonnull
  public BigDecimal getPercentFat() {
    return percentFat;
  }

  public void setPercentFat(BigDecimal percentFat) {
    this.percentFat = percentFat;
  }


  public GetIngredientInformation200ResponseNutritionCaloricBreakdown percentProtein(BigDecimal percentProtein) {
    this.percentProtein = percentProtein;
    return this;
  }

  /**
   * Get percentProtein
   * @return percentProtein
   */
  @javax.annotation.Nonnull
  public BigDecimal getPercentProtein() {
    return percentProtein;
  }

  public void setPercentProtein(BigDecimal percentProtein) {
    this.percentProtein = percentProtein;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIngredientInformation200ResponseNutritionCaloricBreakdown getIngredientInformation200ResponseNutritionCaloricBreakdown = (GetIngredientInformation200ResponseNutritionCaloricBreakdown) o;
    return Objects.equals(this.percentCarbs, getIngredientInformation200ResponseNutritionCaloricBreakdown.percentCarbs) &&
        Objects.equals(this.percentFat, getIngredientInformation200ResponseNutritionCaloricBreakdown.percentFat) &&
        Objects.equals(this.percentProtein, getIngredientInformation200ResponseNutritionCaloricBreakdown.percentProtein);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentCarbs, percentFat, percentProtein);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIngredientInformation200ResponseNutritionCaloricBreakdown {\n");
    sb.append("    percentCarbs: ").append(toIndentedString(percentCarbs)).append("\n");
    sb.append("    percentFat: ").append(toIndentedString(percentFat)).append("\n");
    sb.append("    percentProtein: ").append(toIndentedString(percentProtein)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentCarbs");
    openapiFields.add("percentFat");
    openapiFields.add("percentProtein");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("percentCarbs");
    openapiRequiredFields.add("percentFat");
    openapiRequiredFields.add("percentProtein");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIngredientInformation200ResponseNutritionCaloricBreakdown
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIngredientInformation200ResponseNutritionCaloricBreakdown.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIngredientInformation200ResponseNutritionCaloricBreakdown is not found in the empty JSON string", GetIngredientInformation200ResponseNutritionCaloricBreakdown.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIngredientInformation200ResponseNutritionCaloricBreakdown.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIngredientInformation200ResponseNutritionCaloricBreakdown` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetIngredientInformation200ResponseNutritionCaloricBreakdown.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIngredientInformation200ResponseNutritionCaloricBreakdown.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIngredientInformation200ResponseNutritionCaloricBreakdown' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIngredientInformation200ResponseNutritionCaloricBreakdown> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIngredientInformation200ResponseNutritionCaloricBreakdown.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIngredientInformation200ResponseNutritionCaloricBreakdown>() {
           @Override
           public void write(JsonWriter out, GetIngredientInformation200ResponseNutritionCaloricBreakdown value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIngredientInformation200ResponseNutritionCaloricBreakdown read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIngredientInformation200ResponseNutritionCaloricBreakdown given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIngredientInformation200ResponseNutritionCaloricBreakdown
   * @throws IOException if the JSON string is invalid with respect to GetIngredientInformation200ResponseNutritionCaloricBreakdown
   */
  public static GetIngredientInformation200ResponseNutritionCaloricBreakdown fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIngredientInformation200ResponseNutritionCaloricBreakdown.class);
  }

  /**
   * Convert an instance of GetIngredientInformation200ResponseNutritionCaloricBreakdown to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

