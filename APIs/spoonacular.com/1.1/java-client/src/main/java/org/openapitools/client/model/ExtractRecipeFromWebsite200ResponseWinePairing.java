/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.GetWineRecommendation200ResponseRecommendedWinesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtractRecipeFromWebsite200ResponseWinePairing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:54.949264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtractRecipeFromWebsite200ResponseWinePairing {
  public static final String SERIALIZED_NAME_PAIRED_WINES = "pairedWines";
  @SerializedName(SERIALIZED_NAME_PAIRED_WINES)
  private List<String> pairedWines = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAIRING_TEXT = "pairingText";
  @SerializedName(SERIALIZED_NAME_PAIRING_TEXT)
  private String pairingText;

  public static final String SERIALIZED_NAME_PRODUCT_MATCHES = "productMatches";
  @SerializedName(SERIALIZED_NAME_PRODUCT_MATCHES)
  private Set<GetWineRecommendation200ResponseRecommendedWinesInner> productMatches = new LinkedHashSet<>();

  public ExtractRecipeFromWebsite200ResponseWinePairing() {
  }

  public ExtractRecipeFromWebsite200ResponseWinePairing pairedWines(List<String> pairedWines) {
    this.pairedWines = pairedWines;
    return this;
  }

  public ExtractRecipeFromWebsite200ResponseWinePairing addPairedWinesItem(String pairedWinesItem) {
    if (this.pairedWines == null) {
      this.pairedWines = new ArrayList<>();
    }
    this.pairedWines.add(pairedWinesItem);
    return this;
  }

  /**
   * Get pairedWines
   * @return pairedWines
   */
  @javax.annotation.Nonnull
  public List<String> getPairedWines() {
    return pairedWines;
  }

  public void setPairedWines(List<String> pairedWines) {
    this.pairedWines = pairedWines;
  }


  public ExtractRecipeFromWebsite200ResponseWinePairing pairingText(String pairingText) {
    this.pairingText = pairingText;
    return this;
  }

  /**
   * Get pairingText
   * @return pairingText
   */
  @javax.annotation.Nonnull
  public String getPairingText() {
    return pairingText;
  }

  public void setPairingText(String pairingText) {
    this.pairingText = pairingText;
  }


  public ExtractRecipeFromWebsite200ResponseWinePairing productMatches(Set<GetWineRecommendation200ResponseRecommendedWinesInner> productMatches) {
    this.productMatches = productMatches;
    return this;
  }

  public ExtractRecipeFromWebsite200ResponseWinePairing addProductMatchesItem(GetWineRecommendation200ResponseRecommendedWinesInner productMatchesItem) {
    if (this.productMatches == null) {
      this.productMatches = new LinkedHashSet<>();
    }
    this.productMatches.add(productMatchesItem);
    return this;
  }

  /**
   * Get productMatches
   * @return productMatches
   */
  @javax.annotation.Nonnull
  public Set<GetWineRecommendation200ResponseRecommendedWinesInner> getProductMatches() {
    return productMatches;
  }

  public void setProductMatches(Set<GetWineRecommendation200ResponseRecommendedWinesInner> productMatches) {
    this.productMatches = productMatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtractRecipeFromWebsite200ResponseWinePairing extractRecipeFromWebsite200ResponseWinePairing = (ExtractRecipeFromWebsite200ResponseWinePairing) o;
    return Objects.equals(this.pairedWines, extractRecipeFromWebsite200ResponseWinePairing.pairedWines) &&
        Objects.equals(this.pairingText, extractRecipeFromWebsite200ResponseWinePairing.pairingText) &&
        Objects.equals(this.productMatches, extractRecipeFromWebsite200ResponseWinePairing.productMatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pairedWines, pairingText, productMatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtractRecipeFromWebsite200ResponseWinePairing {\n");
    sb.append("    pairedWines: ").append(toIndentedString(pairedWines)).append("\n");
    sb.append("    pairingText: ").append(toIndentedString(pairingText)).append("\n");
    sb.append("    productMatches: ").append(toIndentedString(productMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pairedWines");
    openapiFields.add("pairingText");
    openapiFields.add("productMatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pairedWines");
    openapiRequiredFields.add("pairingText");
    openapiRequiredFields.add("productMatches");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtractRecipeFromWebsite200ResponseWinePairing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtractRecipeFromWebsite200ResponseWinePairing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtractRecipeFromWebsite200ResponseWinePairing is not found in the empty JSON string", ExtractRecipeFromWebsite200ResponseWinePairing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtractRecipeFromWebsite200ResponseWinePairing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtractRecipeFromWebsite200ResponseWinePairing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExtractRecipeFromWebsite200ResponseWinePairing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("pairedWines") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pairedWines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pairedWines` to be an array in the JSON string but got `%s`", jsonObj.get("pairedWines").toString()));
      }
      if (!jsonObj.get("pairingText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pairingText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pairingText").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("productMatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productMatches` to be an array in the JSON string but got `%s`", jsonObj.get("productMatches").toString()));
      }

      JsonArray jsonArrayproductMatches = jsonObj.getAsJsonArray("productMatches");
      // validate the required field `productMatches` (array)
      for (int i = 0; i < jsonArrayproductMatches.size(); i++) {
        GetWineRecommendation200ResponseRecommendedWinesInner.validateJsonElement(jsonArrayproductMatches.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtractRecipeFromWebsite200ResponseWinePairing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtractRecipeFromWebsite200ResponseWinePairing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtractRecipeFromWebsite200ResponseWinePairing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtractRecipeFromWebsite200ResponseWinePairing.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtractRecipeFromWebsite200ResponseWinePairing>() {
           @Override
           public void write(JsonWriter out, ExtractRecipeFromWebsite200ResponseWinePairing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtractRecipeFromWebsite200ResponseWinePairing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtractRecipeFromWebsite200ResponseWinePairing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtractRecipeFromWebsite200ResponseWinePairing
   * @throws IOException if the JSON string is invalid with respect to ExtractRecipeFromWebsite200ResponseWinePairing
   */
  public static ExtractRecipeFromWebsite200ResponseWinePairing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtractRecipeFromWebsite200ResponseWinePairing.class);
  }

  /**
   * Convert an instance of ExtractRecipeFromWebsite200ResponseWinePairing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

