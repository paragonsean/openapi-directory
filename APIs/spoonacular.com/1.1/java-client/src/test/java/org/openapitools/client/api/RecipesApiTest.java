/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeARecipeSearchQuery200Response;
import org.openapitools.client.model.AnalyzeRecipeInstructions200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.ClassifyCuisine200Response;
import org.openapitools.client.model.ComputeGlycemicLoad200Response;
import org.openapitools.client.model.ComputeGlycemicLoadRequest;
import org.openapitools.client.model.ConvertAmounts200Response;
import org.openapitools.client.model.CreateRecipeCard200Response;
import org.openapitools.client.model.ExtractRecipeFromWebsite200Response;
import org.openapitools.client.model.GenerateMealPlan200ResponseMealsInner;
import org.openapitools.client.model.GetAnalyzedRecipeInstructions200Response;
import org.openapitools.client.model.GetRandomRecipes200Response;
import org.openapitools.client.model.GetRecipeEquipmentByID200Response;
import org.openapitools.client.model.GetRecipeInformationBulk200ResponseInner;
import org.openapitools.client.model.GetRecipeIngredientsByID200Response;
import org.openapitools.client.model.GetRecipeNutritionWidgetByID200Response;
import org.openapitools.client.model.GetRecipePriceBreakdownByID200Response;
import org.openapitools.client.model.GetRecipeTasteByID200Response;
import org.openapitools.client.model.GuessNutritionByDishName200Response;
import org.openapitools.client.model.ParseIngredients200ResponseInner;
import org.openapitools.client.model.QuickAnswer200Response;
import org.openapitools.client.model.SearchGroceryProducts200ResponseProductsInner;
import org.openapitools.client.model.SearchRecipes200Response;
import org.openapitools.client.model.SearchRecipes200ResponseResultsInner;
import org.openapitools.client.model.SearchRecipesByIngredients200ResponseInner;
import java.util.Set;
import org.openapitools.client.model.SummarizeRecipe200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecipesApi
 */
@Disabled
public class RecipesApiTest {

    private final RecipesApi api = new RecipesApi();

    /**
     * Analyze a Recipe Search Query
     *
     * Parse a recipe search query to find out its intention.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeARecipeSearchQueryTest() throws ApiException {
        String q = null;
        AnalyzeARecipeSearchQuery200Response response = api.analyzeARecipeSearchQuery(q);
        // TODO: test validations
    }

    /**
     * Analyze Recipe Instructions
     *
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeRecipeInstructionsTest() throws ApiException {
        String contentType = null;
        AnalyzeRecipeInstructions200Response response = api.analyzeRecipeInstructions(contentType);
        // TODO: test validations
    }

    /**
     * Autocomplete Recipe Search
     *
     * Autocomplete a partial input to suggest possible recipe names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autocompleteRecipeSearchTest() throws ApiException {
        String query = null;
        Integer number = null;
        Set<SearchGroceryProducts200ResponseProductsInner> response = api.autocompleteRecipeSearch(query, number);
        // TODO: test validations
    }

    /**
     * Classify Cuisine
     *
     * Classify the recipe&#39;s cuisine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classifyCuisineTest() throws ApiException {
        String contentType = null;
        ClassifyCuisine200Response response = api.classifyCuisine(contentType);
        // TODO: test validations
    }

    /**
     * Compute Glycemic Load
     *
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeGlycemicLoadTest() throws ApiException {
        ComputeGlycemicLoadRequest computeGlycemicLoadRequest = null;
        String language = null;
        ComputeGlycemicLoad200Response response = api.computeGlycemicLoad(computeGlycemicLoadRequest, language);
        // TODO: test validations
    }

    /**
     * Convert Amounts
     *
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertAmountsTest() throws ApiException {
        String ingredientName = null;
        BigDecimal sourceAmount = null;
        String sourceUnit = null;
        String targetUnit = null;
        ConvertAmounts200Response response = api.convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit);
        // TODO: test validations
    }

    /**
     * Create Recipe Card
     *
     * Generate a recipe card for a recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecipeCardTest() throws ApiException {
        String contentType = null;
        CreateRecipeCard200Response response = api.createRecipeCard(contentType);
        // TODO: test validations
    }

    /**
     * Equipment by ID Image
     *
     * Visualize a recipe&#39;s equipment list as an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void equipmentByIDImageTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.equipmentByIDImage(id);
        // TODO: test validations
    }

    /**
     * Extract Recipe from Website
     *
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractRecipeFromWebsiteTest() throws ApiException {
        String url = null;
        Boolean forceExtraction = null;
        Boolean analyze = null;
        Boolean includeNutrition = null;
        Boolean includeTaste = null;
        ExtractRecipeFromWebsite200Response response = api.extractRecipeFromWebsite(url, forceExtraction, analyze, includeNutrition, includeTaste);
        // TODO: test validations
    }

    /**
     * Get Analyzed Recipe Instructions
     *
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzedRecipeInstructionsTest() throws ApiException {
        Integer id = null;
        Boolean stepBreakdown = null;
        GetAnalyzedRecipeInstructions200Response response = api.getAnalyzedRecipeInstructions(id, stepBreakdown);
        // TODO: test validations
    }

    /**
     * Get Random Recipes
     *
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRandomRecipesTest() throws ApiException {
        Boolean limitLicense = null;
        String tags = null;
        Integer number = null;
        GetRandomRecipes200Response response = api.getRandomRecipes(limitLicense, tags, number);
        // TODO: test validations
    }

    /**
     * Equipment by ID
     *
     * Get a recipe&#39;s equipment list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeEquipmentByIDTest() throws ApiException {
        Integer id = null;
        GetRecipeEquipmentByID200Response response = api.getRecipeEquipmentByID(id);
        // TODO: test validations
    }

    /**
     * Get Recipe Information
     *
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeInformationTest() throws ApiException {
        Integer id = null;
        Boolean includeNutrition = null;
        ExtractRecipeFromWebsite200Response response = api.getRecipeInformation(id, includeNutrition);
        // TODO: test validations
    }

    /**
     * Get Recipe Information Bulk
     *
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeInformationBulkTest() throws ApiException {
        String ids = null;
        Boolean includeNutrition = null;
        Set<GetRecipeInformationBulk200ResponseInner> response = api.getRecipeInformationBulk(ids, includeNutrition);
        // TODO: test validations
    }

    /**
     * Ingredients by ID
     *
     * Get a recipe&#39;s ingredient list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeIngredientsByIDTest() throws ApiException {
        Integer id = null;
        GetRecipeIngredientsByID200Response response = api.getRecipeIngredientsByID(id);
        // TODO: test validations
    }

    /**
     * Nutrition by ID
     *
     * Get a recipe&#39;s nutrition data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeNutritionWidgetByIDTest() throws ApiException {
        Integer id = null;
        GetRecipeNutritionWidgetByID200Response response = api.getRecipeNutritionWidgetByID(id);
        // TODO: test validations
    }

    /**
     * Price Breakdown by ID
     *
     * Get a recipe&#39;s price breakdown data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipePriceBreakdownByIDTest() throws ApiException {
        Integer id = null;
        GetRecipePriceBreakdownByID200Response response = api.getRecipePriceBreakdownByID(id);
        // TODO: test validations
    }

    /**
     * Taste by ID
     *
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecipeTasteByIDTest() throws ApiException {
        Integer id = null;
        Boolean normalize = null;
        GetRecipeTasteByID200Response response = api.getRecipeTasteByID(id, normalize);
        // TODO: test validations
    }

    /**
     * Get Similar Recipes
     *
     * Find recipes which are similar to the given one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarRecipesTest() throws ApiException {
        Integer id = null;
        Integer number = null;
        Boolean limitLicense = null;
        Set<GenerateMealPlan200ResponseMealsInner> response = api.getSimilarRecipes(id, number, limitLicense);
        // TODO: test validations
    }

    /**
     * Guess Nutrition by Dish Name
     *
     * Estimate the macronutrients of a dish based on its title.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void guessNutritionByDishNameTest() throws ApiException {
        String title = null;
        GuessNutritionByDishName200Response response = api.guessNutritionByDishName(title);
        // TODO: test validations
    }

    /**
     * Ingredients by ID Image
     *
     * Visualize a recipe&#39;s ingredient list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ingredientsByIDImage_0Test() throws ApiException {
        BigDecimal id = null;
        String measure = null;
        Object response = api.ingredientsByIDImage_0(id, measure);
        // TODO: test validations
    }

    /**
     * Parse Ingredients
     *
     * Extract an ingredient from plain text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void parseIngredientsTest() throws ApiException {
        String contentType = null;
        String language = null;
        Set<ParseIngredients200ResponseInner> response = api.parseIngredients(contentType, language);
        // TODO: test validations
    }

    /**
     * Price Breakdown by ID Image
     *
     * Visualize a recipe&#39;s price breakdown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void priceBreakdownByIDImageTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.priceBreakdownByIDImage(id);
        // TODO: test validations
    }

    /**
     * Quick Answer
     *
     * Answer a nutrition related natural language question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void quickAnswerTest() throws ApiException {
        String q = null;
        QuickAnswer200Response response = api.quickAnswer(q);
        // TODO: test validations
    }

    /**
     * Recipe Nutrition by ID Image
     *
     * Visualize a recipe&#39;s nutritional information as an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeNutritionByIDImageTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.recipeNutritionByIDImage(id);
        // TODO: test validations
    }

    /**
     * Recipe Nutrition Label Image
     *
     * Get a recipe&#39;s nutrition label as an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeNutritionLabelImageTest() throws ApiException {
        BigDecimal id = null;
        Boolean showOptionalNutrients = null;
        Boolean showZeroValues = null;
        Boolean showIngredients = null;
        Object response = api.recipeNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients);
        // TODO: test validations
    }

    /**
     * Recipe Nutrition Label Widget
     *
     * Get a recipe&#39;s nutrition label as an HTML widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeNutritionLabelWidgetTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        Boolean showOptionalNutrients = null;
        Boolean showZeroValues = null;
        Boolean showIngredients = null;
        String response = api.recipeNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
        // TODO: test validations
    }

    /**
     * Recipe Taste by ID Image
     *
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recipeTasteByIDImageTest() throws ApiException {
        BigDecimal id = null;
        Boolean normalize = null;
        String rgb = null;
        Object response = api.recipeTasteByIDImage(id, normalize, rgb);
        // TODO: test validations
    }

    /**
     * Search Recipes
     *
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRecipesTest() throws ApiException {
        String query = null;
        String cuisine = null;
        String excludeCuisine = null;
        String diet = null;
        String intolerances = null;
        String equipment = null;
        String includeIngredients = null;
        String excludeIngredients = null;
        String type = null;
        Boolean instructionsRequired = null;
        Boolean fillIngredients = null;
        Boolean addRecipeInformation = null;
        Boolean addRecipeNutrition = null;
        String author = null;
        String tags = null;
        BigDecimal recipeBoxId = null;
        String titleMatch = null;
        BigDecimal maxReadyTime = null;
        Boolean ignorePantry = null;
        String sort = null;
        String sortDirection = null;
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal minAlcohol = null;
        BigDecimal maxAlcohol = null;
        BigDecimal minCaffeine = null;
        BigDecimal maxCaffeine = null;
        BigDecimal minCopper = null;
        BigDecimal maxCopper = null;
        BigDecimal minCalcium = null;
        BigDecimal maxCalcium = null;
        BigDecimal minCholine = null;
        BigDecimal maxCholine = null;
        BigDecimal minCholesterol = null;
        BigDecimal maxCholesterol = null;
        BigDecimal minFluoride = null;
        BigDecimal maxFluoride = null;
        BigDecimal minSaturatedFat = null;
        BigDecimal maxSaturatedFat = null;
        BigDecimal minVitaminA = null;
        BigDecimal maxVitaminA = null;
        BigDecimal minVitaminC = null;
        BigDecimal maxVitaminC = null;
        BigDecimal minVitaminD = null;
        BigDecimal maxVitaminD = null;
        BigDecimal minVitaminE = null;
        BigDecimal maxVitaminE = null;
        BigDecimal minVitaminK = null;
        BigDecimal maxVitaminK = null;
        BigDecimal minVitaminB1 = null;
        BigDecimal maxVitaminB1 = null;
        BigDecimal minVitaminB2 = null;
        BigDecimal maxVitaminB2 = null;
        BigDecimal minVitaminB5 = null;
        BigDecimal maxVitaminB5 = null;
        BigDecimal minVitaminB3 = null;
        BigDecimal maxVitaminB3 = null;
        BigDecimal minVitaminB6 = null;
        BigDecimal maxVitaminB6 = null;
        BigDecimal minVitaminB12 = null;
        BigDecimal maxVitaminB12 = null;
        BigDecimal minFiber = null;
        BigDecimal maxFiber = null;
        BigDecimal minFolate = null;
        BigDecimal maxFolate = null;
        BigDecimal minFolicAcid = null;
        BigDecimal maxFolicAcid = null;
        BigDecimal minIodine = null;
        BigDecimal maxIodine = null;
        BigDecimal minIron = null;
        BigDecimal maxIron = null;
        BigDecimal minMagnesium = null;
        BigDecimal maxMagnesium = null;
        BigDecimal minManganese = null;
        BigDecimal maxManganese = null;
        BigDecimal minPhosphorus = null;
        BigDecimal maxPhosphorus = null;
        BigDecimal minPotassium = null;
        BigDecimal maxPotassium = null;
        BigDecimal minSelenium = null;
        BigDecimal maxSelenium = null;
        BigDecimal minSodium = null;
        BigDecimal maxSodium = null;
        BigDecimal minSugar = null;
        BigDecimal maxSugar = null;
        BigDecimal minZinc = null;
        BigDecimal maxZinc = null;
        Integer offset = null;
        Integer number = null;
        Boolean limitLicense = null;
        SearchRecipes200Response response = api.searchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
        // TODO: test validations
    }

    /**
     * Search Recipes by Ingredients
     *
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRecipesByIngredientsTest() throws ApiException {
        String ingredients = null;
        Integer number = null;
        Boolean limitLicense = null;
        BigDecimal ranking = null;
        Boolean ignorePantry = null;
        Set<SearchRecipesByIngredients200ResponseInner> response = api.searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry);
        // TODO: test validations
    }

    /**
     * Search Recipes by Nutrients
     *
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRecipesByNutrientsTest() throws ApiException {
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        BigDecimal minAlcohol = null;
        BigDecimal maxAlcohol = null;
        BigDecimal minCaffeine = null;
        BigDecimal maxCaffeine = null;
        BigDecimal minCopper = null;
        BigDecimal maxCopper = null;
        BigDecimal minCalcium = null;
        BigDecimal maxCalcium = null;
        BigDecimal minCholine = null;
        BigDecimal maxCholine = null;
        BigDecimal minCholesterol = null;
        BigDecimal maxCholesterol = null;
        BigDecimal minFluoride = null;
        BigDecimal maxFluoride = null;
        BigDecimal minSaturatedFat = null;
        BigDecimal maxSaturatedFat = null;
        BigDecimal minVitaminA = null;
        BigDecimal maxVitaminA = null;
        BigDecimal minVitaminC = null;
        BigDecimal maxVitaminC = null;
        BigDecimal minVitaminD = null;
        BigDecimal maxVitaminD = null;
        BigDecimal minVitaminE = null;
        BigDecimal maxVitaminE = null;
        BigDecimal minVitaminK = null;
        BigDecimal maxVitaminK = null;
        BigDecimal minVitaminB1 = null;
        BigDecimal maxVitaminB1 = null;
        BigDecimal minVitaminB2 = null;
        BigDecimal maxVitaminB2 = null;
        BigDecimal minVitaminB5 = null;
        BigDecimal maxVitaminB5 = null;
        BigDecimal minVitaminB3 = null;
        BigDecimal maxVitaminB3 = null;
        BigDecimal minVitaminB6 = null;
        BigDecimal maxVitaminB6 = null;
        BigDecimal minVitaminB12 = null;
        BigDecimal maxVitaminB12 = null;
        BigDecimal minFiber = null;
        BigDecimal maxFiber = null;
        BigDecimal minFolate = null;
        BigDecimal maxFolate = null;
        BigDecimal minFolicAcid = null;
        BigDecimal maxFolicAcid = null;
        BigDecimal minIodine = null;
        BigDecimal maxIodine = null;
        BigDecimal minIron = null;
        BigDecimal maxIron = null;
        BigDecimal minMagnesium = null;
        BigDecimal maxMagnesium = null;
        BigDecimal minManganese = null;
        BigDecimal maxManganese = null;
        BigDecimal minPhosphorus = null;
        BigDecimal maxPhosphorus = null;
        BigDecimal minPotassium = null;
        BigDecimal maxPotassium = null;
        BigDecimal minSelenium = null;
        BigDecimal maxSelenium = null;
        BigDecimal minSodium = null;
        BigDecimal maxSodium = null;
        BigDecimal minSugar = null;
        BigDecimal maxSugar = null;
        BigDecimal minZinc = null;
        BigDecimal maxZinc = null;
        Integer offset = null;
        Integer number = null;
        Boolean random = null;
        Boolean limitLicense = null;
        Set<SearchRecipes200ResponseResultsInner> response = api.searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
        // TODO: test validations
    }

    /**
     * Summarize Recipe
     *
     * Automatically generate a short description that summarizes key information about the recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void summarizeRecipeTest() throws ApiException {
        Integer id = null;
        SummarizeRecipe200Response response = api.summarizeRecipe(id);
        // TODO: test validations
    }

    /**
     * Equipment Widget
     *
     * Visualize the equipment used to make a recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeEquipmentTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String response = api.visualizeEquipment(contentType, accept);
        // TODO: test validations
    }

    /**
     * Price Breakdown Widget
     *
     * Visualize the price breakdown of a recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizePriceBreakdownTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String language = null;
        String response = api.visualizePriceBreakdown(contentType, accept, language);
        // TODO: test validations
    }

    /**
     * Equipment by ID Widget
     *
     * Visualize a recipe&#39;s equipment list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeEquipmentByIDTest() throws ApiException {
        Integer id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipeEquipmentByID(id, defaultCss);
        // TODO: test validations
    }

    /**
     * Ingredients by ID Widget
     *
     * Visualize a recipe&#39;s ingredient list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeIngredientsByIDTest() throws ApiException {
        Integer id = null;
        Boolean defaultCss = null;
        String measure = null;
        String response = api.visualizeRecipeIngredientsByID(id, defaultCss, measure);
        // TODO: test validations
    }

    /**
     * Recipe Nutrition Widget
     *
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeNutritionTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String language = null;
        String response = api.visualizeRecipeNutrition(contentType, accept, language);
        // TODO: test validations
    }

    /**
     * Recipe Nutrition by ID Widget
     *
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeNutritionByIDTest() throws ApiException {
        Integer id = null;
        Boolean defaultCss = null;
        String accept = null;
        String response = api.visualizeRecipeNutritionByID(id, defaultCss, accept);
        // TODO: test validations
    }

    /**
     * Price Breakdown by ID Widget
     *
     * Visualize a recipe&#39;s price breakdown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipePriceBreakdownByIDTest() throws ApiException {
        Integer id = null;
        Boolean defaultCss = null;
        String response = api.visualizeRecipePriceBreakdownByID(id, defaultCss);
        // TODO: test validations
    }

    /**
     * Recipe Taste Widget
     *
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeTasteTest() throws ApiException {
        String language = null;
        String contentType = null;
        String accept = null;
        Boolean normalize = null;
        String rgb = null;
        String response = api.visualizeRecipeTaste(language, contentType, accept, normalize, rgb);
        // TODO: test validations
    }

    /**
     * Recipe Taste by ID Widget
     *
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeRecipeTasteByIDTest() throws ApiException {
        Integer id = null;
        Boolean normalize = null;
        String rgb = null;
        String response = api.visualizeRecipeTasteByID(id, normalize, rgb);
        // TODO: test validations
    }

}
