/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeRecipeRequest;
import org.openapitools.client.model.AnalyzeRecipeRequest1;
import java.math.BigDecimal;
import org.openapitools.client.model.SearchRestaurants200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Analyze Recipe
     *
     * This endpoint allows you to send raw recipe information, such as title, servings, and ingredients, to then see what we compute (badges, diets, nutrition, and more). This is useful if you have your own recipe data and want to enrich it with our semantic analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyzeRecipeTest() throws ApiException {
        AnalyzeRecipeRequest analyzeRecipeRequest = null;
        String language = null;
        Boolean includeNutrition = null;
        Boolean includeTaste = null;
        Object response = api.analyzeRecipe(analyzeRecipeRequest, language, includeNutrition, includeTaste);
        // TODO: test validations
    }

    /**
     * Create Recipe Card
     *
     * Generate a recipe card for a recipe.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecipeCardGetTest() throws ApiException {
        BigDecimal id = null;
        String mask = null;
        String backgroundImage = null;
        String backgroundColor = null;
        String fontColor = null;
        Object response = api.createRecipeCardGet(id, mask, backgroundImage, backgroundColor, fontColor);
        // TODO: test validations
    }

    /**
     * Search Restaurants
     *
     * Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchRestaurantsTest() throws ApiException {
        String query = null;
        BigDecimal lat = null;
        BigDecimal lng = null;
        BigDecimal distance = null;
        BigDecimal budget = null;
        String cuisine = null;
        BigDecimal minRating = null;
        Boolean isOpen = null;
        String sort = null;
        BigDecimal page = null;
        SearchRestaurants200Response response = api.searchRestaurants(query, lat, lng, distance, budget, cuisine, minRating, isOpen, sort, page);
        // TODO: test validations
    }

}
