/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutocompleteProductSearch200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.ClassifyGroceryProduct200Response;
import org.openapitools.client.model.ClassifyGroceryProductBulk200ResponseInner;
import org.openapitools.client.model.ClassifyGroceryProductBulkRequestInner;
import org.openapitools.client.model.ClassifyGroceryProductRequest;
import org.openapitools.client.model.GetComparableProducts200Response;
import org.openapitools.client.model.GetProductInformation200Response;
import org.openapitools.client.model.SearchGroceryProducts200Response;
import org.openapitools.client.model.SearchGroceryProductsByUPC200Response;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Autocomplete Product Search
     *
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autocompleteProductSearchTest() throws ApiException {
        String query = null;
        Integer number = null;
        AutocompleteProductSearch200Response response = api.autocompleteProductSearch(query, number);
        // TODO: test validations
    }

    /**
     * Classify Grocery Product
     *
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classifyGroceryProductTest() throws ApiException {
        ClassifyGroceryProductRequest classifyGroceryProductRequest = null;
        String locale = null;
        ClassifyGroceryProduct200Response response = api.classifyGroceryProduct(classifyGroceryProductRequest, locale);
        // TODO: test validations
    }

    /**
     * Classify Grocery Product Bulk
     *
     * Provide a set of product jsons, get back classified products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classifyGroceryProductBulkTest() throws ApiException {
        Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner = null;
        String locale = null;
        Set<ClassifyGroceryProductBulk200ResponseInner> response = api.classifyGroceryProductBulk(classifyGroceryProductBulkRequestInner, locale);
        // TODO: test validations
    }

    /**
     * Get Comparable Products
     *
     * Find comparable products to the given one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getComparableProductsTest() throws ApiException {
        BigDecimal upc = null;
        GetComparableProducts200Response response = api.getComparableProducts(upc);
        // TODO: test validations
    }

    /**
     * Get Product Information
     *
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductInformationTest() throws ApiException {
        Integer id = null;
        GetProductInformation200Response response = api.getProductInformation(id);
        // TODO: test validations
    }

    /**
     * Product Nutrition by ID Image
     *
     * Visualize a product&#39;s nutritional information as an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNutritionByIDImageTest() throws ApiException {
        BigDecimal id = null;
        Object response = api.productNutritionByIDImage(id);
        // TODO: test validations
    }

    /**
     * Product Nutrition Label Image
     *
     * Get a product&#39;s nutrition label as an image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNutritionLabelImageTest() throws ApiException {
        BigDecimal id = null;
        Boolean showOptionalNutrients = null;
        Boolean showZeroValues = null;
        Boolean showIngredients = null;
        Object response = api.productNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients);
        // TODO: test validations
    }

    /**
     * Product Nutrition Label Widget
     *
     * Get a product&#39;s nutrition label as an HTML widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productNutritionLabelWidgetTest() throws ApiException {
        BigDecimal id = null;
        Boolean defaultCss = null;
        Boolean showOptionalNutrients = null;
        Boolean showZeroValues = null;
        Boolean showIngredients = null;
        String response = api.productNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
        // TODO: test validations
    }

    /**
     * Search Grocery Products
     *
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchGroceryProductsTest() throws ApiException {
        String query = null;
        BigDecimal minCalories = null;
        BigDecimal maxCalories = null;
        BigDecimal minCarbs = null;
        BigDecimal maxCarbs = null;
        BigDecimal minProtein = null;
        BigDecimal maxProtein = null;
        BigDecimal minFat = null;
        BigDecimal maxFat = null;
        Boolean addProductInformation = null;
        Integer offset = null;
        Integer number = null;
        SearchGroceryProducts200Response response = api.searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number);
        // TODO: test validations
    }

    /**
     * Search Grocery Products by UPC
     *
     * Get information about a packaged food using its UPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchGroceryProductsByUPCTest() throws ApiException {
        BigDecimal upc = null;
        SearchGroceryProductsByUPC200Response response = api.searchGroceryProductsByUPC(upc);
        // TODO: test validations
    }

    /**
     * Product Nutrition by ID Widget
     *
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visualizeProductNutritionByIDTest() throws ApiException {
        Integer id = null;
        Boolean defaultCss = null;
        String accept = null;
        String response = api.visualizeProductNutritionByID(id, defaultCss, accept);
        // TODO: test validations
    }

}
