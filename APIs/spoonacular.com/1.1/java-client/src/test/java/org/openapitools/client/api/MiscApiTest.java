/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DetectFoodInText200Response;
import org.openapitools.client.model.GetARandomFoodJoke200Response;
import org.openapitools.client.model.GetConversationSuggests200Response;
import org.openapitools.client.model.GetRandomFoodTrivia200Response;
import org.openapitools.client.model.ImageAnalysisByURL200Response;
import org.openapitools.client.model.ImageClassificationByURL200Response;
import org.openapitools.client.model.SearchAllFood200Response;
import org.openapitools.client.model.SearchCustomFoods200Response;
import org.openapitools.client.model.SearchFoodVideos200Response;
import org.openapitools.client.model.SearchSiteContent200Response;
import org.openapitools.client.model.TalkToChatbot200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MiscApi
 */
@Disabled
public class MiscApiTest {

    private final MiscApi api = new MiscApi();

    /**
     * Detect Food in Text
     *
     * Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectFoodInTextTest() throws ApiException {
        String contentType = null;
        DetectFoodInText200Response response = api.detectFoodInText(contentType);
        // TODO: test validations
    }

    /**
     * Random Food Joke
     *
     * Get a random joke that is related to food. Caution: this is an endpoint for adults!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getARandomFoodJokeTest() throws ApiException {
        GetARandomFoodJoke200Response response = api.getARandomFoodJoke();
        // TODO: test validations
    }

    /**
     * Conversation Suggests
     *
     * This endpoint returns suggestions for things the user can say or ask the chatbot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationSuggestsTest() throws ApiException {
        String query = null;
        BigDecimal number = null;
        GetConversationSuggests200Response response = api.getConversationSuggests(query, number);
        // TODO: test validations
    }

    /**
     * Random Food Trivia
     *
     * Returns random food trivia.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRandomFoodTriviaTest() throws ApiException {
        GetRandomFoodTrivia200Response response = api.getRandomFoodTrivia();
        // TODO: test validations
    }

    /**
     * Image Analysis by URL
     *
     * Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageAnalysisByURLTest() throws ApiException {
        String imageUrl = null;
        ImageAnalysisByURL200Response response = api.imageAnalysisByURL(imageUrl);
        // TODO: test validations
    }

    /**
     * Image Classification by URL
     *
     * Classify a food image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imageClassificationByURLTest() throws ApiException {
        String imageUrl = null;
        ImageClassificationByURL200Response response = api.imageClassificationByURL(imageUrl);
        // TODO: test validations
    }

    /**
     * Search All Food
     *
     * Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAllFoodTest() throws ApiException {
        String query = null;
        Integer offset = null;
        Integer number = null;
        SearchAllFood200Response response = api.searchAllFood(query, offset, number);
        // TODO: test validations
    }

    /**
     * Search Custom Foods
     *
     * Search custom foods in a user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCustomFoodsTest() throws ApiException {
        String username = null;
        String hash = null;
        String query = null;
        Integer offset = null;
        Integer number = null;
        SearchCustomFoods200Response response = api.searchCustomFoods(username, hash, query, offset, number);
        // TODO: test validations
    }

    /**
     * Search Food Videos
     *
     * Find recipe and other food related videos.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchFoodVideosTest() throws ApiException {
        String query = null;
        String type = null;
        String cuisine = null;
        String diet = null;
        String includeIngredients = null;
        String excludeIngredients = null;
        BigDecimal minLength = null;
        BigDecimal maxLength = null;
        Integer offset = null;
        Integer number = null;
        SearchFoodVideos200Response response = api.searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number);
        // TODO: test validations
    }

    /**
     * Search Site Content
     *
     * Search spoonacular&#39;s site content. You&#39;ll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSiteContentTest() throws ApiException {
        String query = null;
        SearchSiteContent200Response response = api.searchSiteContent(query);
        // TODO: test validations
    }

    /**
     * Talk to Chatbot
     *
     * This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \&quot;Get Conversation Suggests\&quot; endpoint to show your user what he or she can say.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void talkToChatbotTest() throws ApiException {
        String text = null;
        String contextId = null;
        TalkToChatbot200Response response = api.talkToChatbot(text, contextId);
        // TODO: test validations
    }

}
