# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TalkToChatbot200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_text: str=None, media: List[object]=None):
        """TalkToChatbot200Response - a model defined in OpenAPI

        :param answer_text: The answer_text of this TalkToChatbot200Response.
        :param media: The media of this TalkToChatbot200Response.
        """
        self.openapi_types = {
            'answer_text': str,
            'media': List[object]
        }

        self.attribute_map = {
            'answer_text': 'answerText',
            'media': 'media'
        }

        self._answer_text = answer_text
        self._media = media

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TalkToChatbot200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The talkToChatbot_200_response of this TalkToChatbot200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_text(self):
        """Gets the answer_text of this TalkToChatbot200Response.


        :return: The answer_text of this TalkToChatbot200Response.
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this TalkToChatbot200Response.


        :param answer_text: The answer_text of this TalkToChatbot200Response.
        :type answer_text: str
        """
        if answer_text is None:
            raise ValueError("Invalid value for `answer_text`, must not be `None`")
        if answer_text is not None and len(answer_text) < 1:
            raise ValueError("Invalid value for `answer_text`, length must be greater than or equal to `1`")

        self._answer_text = answer_text

    @property
    def media(self):
        """Gets the media of this TalkToChatbot200Response.


        :return: The media of this TalkToChatbot200Response.
        :rtype: List[object]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this TalkToChatbot200Response.


        :param media: The media of this TalkToChatbot200Response.
        :type media: List[object]
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media
