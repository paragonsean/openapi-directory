# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateMealPlan200ResponseNutrients(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calories: float=None, carbohydrates: float=None, fat: float=None, protein: float=None):
        """GenerateMealPlan200ResponseNutrients - a model defined in OpenAPI

        :param calories: The calories of this GenerateMealPlan200ResponseNutrients.
        :param carbohydrates: The carbohydrates of this GenerateMealPlan200ResponseNutrients.
        :param fat: The fat of this GenerateMealPlan200ResponseNutrients.
        :param protein: The protein of this GenerateMealPlan200ResponseNutrients.
        """
        self.openapi_types = {
            'calories': float,
            'carbohydrates': float,
            'fat': float,
            'protein': float
        }

        self.attribute_map = {
            'calories': 'calories',
            'carbohydrates': 'carbohydrates',
            'fat': 'fat',
            'protein': 'protein'
        }

        self._calories = calories
        self._carbohydrates = carbohydrates
        self._fat = fat
        self._protein = protein

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateMealPlan200ResponseNutrients':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generateMealPlan_200_response_nutrients of this GenerateMealPlan200ResponseNutrients.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self):
        """Gets the calories of this GenerateMealPlan200ResponseNutrients.


        :return: The calories of this GenerateMealPlan200ResponseNutrients.
        :rtype: float
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this GenerateMealPlan200ResponseNutrients.


        :param calories: The calories of this GenerateMealPlan200ResponseNutrients.
        :type calories: float
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")

        self._calories = calories

    @property
    def carbohydrates(self):
        """Gets the carbohydrates of this GenerateMealPlan200ResponseNutrients.


        :return: The carbohydrates of this GenerateMealPlan200ResponseNutrients.
        :rtype: float
        """
        return self._carbohydrates

    @carbohydrates.setter
    def carbohydrates(self, carbohydrates):
        """Sets the carbohydrates of this GenerateMealPlan200ResponseNutrients.


        :param carbohydrates: The carbohydrates of this GenerateMealPlan200ResponseNutrients.
        :type carbohydrates: float
        """
        if carbohydrates is None:
            raise ValueError("Invalid value for `carbohydrates`, must not be `None`")

        self._carbohydrates = carbohydrates

    @property
    def fat(self):
        """Gets the fat of this GenerateMealPlan200ResponseNutrients.


        :return: The fat of this GenerateMealPlan200ResponseNutrients.
        :rtype: float
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this GenerateMealPlan200ResponseNutrients.


        :param fat: The fat of this GenerateMealPlan200ResponseNutrients.
        :type fat: float
        """
        if fat is None:
            raise ValueError("Invalid value for `fat`, must not be `None`")

        self._fat = fat

    @property
    def protein(self):
        """Gets the protein of this GenerateMealPlan200ResponseNutrients.


        :return: The protein of this GenerateMealPlan200ResponseNutrients.
        :rtype: float
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this GenerateMealPlan200ResponseNutrients.


        :param protein: The protein of this GenerateMealPlan200ResponseNutrients.
        :type protein: float
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")

        self._protein = protein
