# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_food_videos200_response_videos_inner import SearchFoodVideos200ResponseVideosInner
from openapi_server import util


class SearchFoodVideos200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_results: int=None, videos: list[SearchFoodVideos200ResponseVideosInner]=None):
        """SearchFoodVideos200Response - a model defined in OpenAPI

        :param total_results: The total_results of this SearchFoodVideos200Response.
        :param videos: The videos of this SearchFoodVideos200Response.
        """
        self.openapi_types = {
            'total_results': int,
            'videos': list[SearchFoodVideos200ResponseVideosInner]
        }

        self.attribute_map = {
            'total_results': 'totalResults',
            'videos': 'videos'
        }

        self._total_results = total_results
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFoodVideos200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchFoodVideos_200_response of this SearchFoodVideos200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_results(self):
        """Gets the total_results of this SearchFoodVideos200Response.


        :return: The total_results of this SearchFoodVideos200Response.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this SearchFoodVideos200Response.


        :param total_results: The total_results of this SearchFoodVideos200Response.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results

    @property
    def videos(self):
        """Gets the videos of this SearchFoodVideos200Response.


        :return: The videos of this SearchFoodVideos200Response.
        :rtype: list[SearchFoodVideos200ResponseVideosInner]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this SearchFoodVideos200Response.


        :param videos: The videos of this SearchFoodVideos200Response.
        :type videos: list[SearchFoodVideos200ResponseVideosInner]
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")
        if videos is not None and len(videos) < 0:
            raise ValueError("Invalid value for `videos`, number of items must be greater than or equal to `0`")

        self._videos = videos
