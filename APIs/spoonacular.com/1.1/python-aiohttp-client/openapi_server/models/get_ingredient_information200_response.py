# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_ingredient_information200_response_estimated_cost import GetIngredientInformation200ResponseEstimatedCost
from openapi_server.models.get_ingredient_information200_response_nutrition import GetIngredientInformation200ResponseNutrition
from openapi_server import util


class GetIngredientInformation200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, amount: float=None, category_path: List[str]=None, consistency: str=None, estimated_cost: GetIngredientInformation200ResponseEstimatedCost=None, id: int=None, image: str=None, meta: List[object]=None, name: str=None, name_clean: str=None, nutrition: GetIngredientInformation200ResponseNutrition=None, original: str=None, original_name: str=None, possible_units: List[str]=None, shopping_list_units: List[str]=None, unit: str=None, unit_long: str=None, unit_short: str=None):
        """GetIngredientInformation200Response - a model defined in OpenAPI

        :param aisle: The aisle of this GetIngredientInformation200Response.
        :param amount: The amount of this GetIngredientInformation200Response.
        :param category_path: The category_path of this GetIngredientInformation200Response.
        :param consistency: The consistency of this GetIngredientInformation200Response.
        :param estimated_cost: The estimated_cost of this GetIngredientInformation200Response.
        :param id: The id of this GetIngredientInformation200Response.
        :param image: The image of this GetIngredientInformation200Response.
        :param meta: The meta of this GetIngredientInformation200Response.
        :param name: The name of this GetIngredientInformation200Response.
        :param name_clean: The name_clean of this GetIngredientInformation200Response.
        :param nutrition: The nutrition of this GetIngredientInformation200Response.
        :param original: The original of this GetIngredientInformation200Response.
        :param original_name: The original_name of this GetIngredientInformation200Response.
        :param possible_units: The possible_units of this GetIngredientInformation200Response.
        :param shopping_list_units: The shopping_list_units of this GetIngredientInformation200Response.
        :param unit: The unit of this GetIngredientInformation200Response.
        :param unit_long: The unit_long of this GetIngredientInformation200Response.
        :param unit_short: The unit_short of this GetIngredientInformation200Response.
        """
        self.openapi_types = {
            'aisle': str,
            'amount': float,
            'category_path': List[str],
            'consistency': str,
            'estimated_cost': GetIngredientInformation200ResponseEstimatedCost,
            'id': int,
            'image': str,
            'meta': List[object],
            'name': str,
            'name_clean': str,
            'nutrition': GetIngredientInformation200ResponseNutrition,
            'original': str,
            'original_name': str,
            'possible_units': List[str],
            'shopping_list_units': List[str],
            'unit': str,
            'unit_long': str,
            'unit_short': str
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'amount': 'amount',
            'category_path': 'categoryPath',
            'consistency': 'consistency',
            'estimated_cost': 'estimatedCost',
            'id': 'id',
            'image': 'image',
            'meta': 'meta',
            'name': 'name',
            'name_clean': 'nameClean',
            'nutrition': 'nutrition',
            'original': 'original',
            'original_name': 'originalName',
            'possible_units': 'possibleUnits',
            'shopping_list_units': 'shoppingListUnits',
            'unit': 'unit',
            'unit_long': 'unitLong',
            'unit_short': 'unitShort'
        }

        self._aisle = aisle
        self._amount = amount
        self._category_path = category_path
        self._consistency = consistency
        self._estimated_cost = estimated_cost
        self._id = id
        self._image = image
        self._meta = meta
        self._name = name
        self._name_clean = name_clean
        self._nutrition = nutrition
        self._original = original
        self._original_name = original_name
        self._possible_units = possible_units
        self._shopping_list_units = shopping_list_units
        self._unit = unit
        self._unit_long = unit_long
        self._unit_short = unit_short

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIngredientInformation200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getIngredientInformation_200_response of this GetIngredientInformation200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this GetIngredientInformation200Response.


        :return: The aisle of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this GetIngredientInformation200Response.


        :param aisle: The aisle of this GetIngredientInformation200Response.
        :type aisle: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def amount(self):
        """Gets the amount of this GetIngredientInformation200Response.


        :return: The amount of this GetIngredientInformation200Response.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetIngredientInformation200Response.


        :param amount: The amount of this GetIngredientInformation200Response.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def category_path(self):
        """Gets the category_path of this GetIngredientInformation200Response.


        :return: The category_path of this GetIngredientInformation200Response.
        :rtype: List[str]
        """
        return self._category_path

    @category_path.setter
    def category_path(self, category_path):
        """Sets the category_path of this GetIngredientInformation200Response.


        :param category_path: The category_path of this GetIngredientInformation200Response.
        :type category_path: List[str]
        """
        if category_path is None:
            raise ValueError("Invalid value for `category_path`, must not be `None`")

        self._category_path = category_path

    @property
    def consistency(self):
        """Gets the consistency of this GetIngredientInformation200Response.


        :return: The consistency of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency):
        """Sets the consistency of this GetIngredientInformation200Response.


        :param consistency: The consistency of this GetIngredientInformation200Response.
        :type consistency: str
        """
        if consistency is None:
            raise ValueError("Invalid value for `consistency`, must not be `None`")
        if consistency is not None and len(consistency) < 1:
            raise ValueError("Invalid value for `consistency`, length must be greater than or equal to `1`")

        self._consistency = consistency

    @property
    def estimated_cost(self):
        """Gets the estimated_cost of this GetIngredientInformation200Response.


        :return: The estimated_cost of this GetIngredientInformation200Response.
        :rtype: GetIngredientInformation200ResponseEstimatedCost
        """
        return self._estimated_cost

    @estimated_cost.setter
    def estimated_cost(self, estimated_cost):
        """Sets the estimated_cost of this GetIngredientInformation200Response.


        :param estimated_cost: The estimated_cost of this GetIngredientInformation200Response.
        :type estimated_cost: GetIngredientInformation200ResponseEstimatedCost
        """
        if estimated_cost is None:
            raise ValueError("Invalid value for `estimated_cost`, must not be `None`")

        self._estimated_cost = estimated_cost

    @property
    def id(self):
        """Gets the id of this GetIngredientInformation200Response.


        :return: The id of this GetIngredientInformation200Response.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetIngredientInformation200Response.


        :param id: The id of this GetIngredientInformation200Response.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this GetIngredientInformation200Response.


        :return: The image of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GetIngredientInformation200Response.


        :param image: The image of this GetIngredientInformation200Response.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def meta(self):
        """Gets the meta of this GetIngredientInformation200Response.


        :return: The meta of this GetIngredientInformation200Response.
        :rtype: List[object]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this GetIngredientInformation200Response.


        :param meta: The meta of this GetIngredientInformation200Response.
        :type meta: List[object]
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this GetIngredientInformation200Response.


        :return: The name of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetIngredientInformation200Response.


        :param name: The name of this GetIngredientInformation200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def name_clean(self):
        """Gets the name_clean of this GetIngredientInformation200Response.


        :return: The name_clean of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._name_clean

    @name_clean.setter
    def name_clean(self, name_clean):
        """Sets the name_clean of this GetIngredientInformation200Response.


        :param name_clean: The name_clean of this GetIngredientInformation200Response.
        :type name_clean: str
        """
        if name_clean is None:
            raise ValueError("Invalid value for `name_clean`, must not be `None`")
        if name_clean is not None and len(name_clean) < 1:
            raise ValueError("Invalid value for `name_clean`, length must be greater than or equal to `1`")

        self._name_clean = name_clean

    @property
    def nutrition(self):
        """Gets the nutrition of this GetIngredientInformation200Response.


        :return: The nutrition of this GetIngredientInformation200Response.
        :rtype: GetIngredientInformation200ResponseNutrition
        """
        return self._nutrition

    @nutrition.setter
    def nutrition(self, nutrition):
        """Sets the nutrition of this GetIngredientInformation200Response.


        :param nutrition: The nutrition of this GetIngredientInformation200Response.
        :type nutrition: GetIngredientInformation200ResponseNutrition
        """
        if nutrition is None:
            raise ValueError("Invalid value for `nutrition`, must not be `None`")

        self._nutrition = nutrition

    @property
    def original(self):
        """Gets the original of this GetIngredientInformation200Response.


        :return: The original of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this GetIngredientInformation200Response.


        :param original: The original of this GetIngredientInformation200Response.
        :type original: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")

        self._original = original

    @property
    def original_name(self):
        """Gets the original_name of this GetIngredientInformation200Response.


        :return: The original_name of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this GetIngredientInformation200Response.


        :param original_name: The original_name of this GetIngredientInformation200Response.
        :type original_name: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")
        if original_name is not None and len(original_name) < 1:
            raise ValueError("Invalid value for `original_name`, length must be greater than or equal to `1`")

        self._original_name = original_name

    @property
    def possible_units(self):
        """Gets the possible_units of this GetIngredientInformation200Response.


        :return: The possible_units of this GetIngredientInformation200Response.
        :rtype: List[str]
        """
        return self._possible_units

    @possible_units.setter
    def possible_units(self, possible_units):
        """Sets the possible_units of this GetIngredientInformation200Response.


        :param possible_units: The possible_units of this GetIngredientInformation200Response.
        :type possible_units: List[str]
        """
        if possible_units is None:
            raise ValueError("Invalid value for `possible_units`, must not be `None`")

        self._possible_units = possible_units

    @property
    def shopping_list_units(self):
        """Gets the shopping_list_units of this GetIngredientInformation200Response.


        :return: The shopping_list_units of this GetIngredientInformation200Response.
        :rtype: List[str]
        """
        return self._shopping_list_units

    @shopping_list_units.setter
    def shopping_list_units(self, shopping_list_units):
        """Sets the shopping_list_units of this GetIngredientInformation200Response.


        :param shopping_list_units: The shopping_list_units of this GetIngredientInformation200Response.
        :type shopping_list_units: List[str]
        """
        if shopping_list_units is None:
            raise ValueError("Invalid value for `shopping_list_units`, must not be `None`")

        self._shopping_list_units = shopping_list_units

    @property
    def unit(self):
        """Gets the unit of this GetIngredientInformation200Response.


        :return: The unit of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetIngredientInformation200Response.


        :param unit: The unit of this GetIngredientInformation200Response.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit

    @property
    def unit_long(self):
        """Gets the unit_long of this GetIngredientInformation200Response.


        :return: The unit_long of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._unit_long

    @unit_long.setter
    def unit_long(self, unit_long):
        """Sets the unit_long of this GetIngredientInformation200Response.


        :param unit_long: The unit_long of this GetIngredientInformation200Response.
        :type unit_long: str
        """
        if unit_long is None:
            raise ValueError("Invalid value for `unit_long`, must not be `None`")

        self._unit_long = unit_long

    @property
    def unit_short(self):
        """Gets the unit_short of this GetIngredientInformation200Response.


        :return: The unit_short of this GetIngredientInformation200Response.
        :rtype: str
        """
        return self._unit_short

    @unit_short.setter
    def unit_short(self, unit_short):
        """Sets the unit_short of this GetIngredientInformation200Response.


        :param unit_short: The unit_short of this GetIngredientInformation200Response.
        :type unit_short: str
        """
        if unit_short is None:
            raise ValueError("Invalid value for `unit_short`, must not be `None`")

        self._unit_short = unit_short
