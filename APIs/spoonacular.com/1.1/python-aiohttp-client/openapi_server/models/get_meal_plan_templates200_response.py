# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_meal_plan_templates200_response_templates_inner import GetMealPlanTemplates200ResponseTemplatesInner
from openapi_server import util


class GetMealPlanTemplates200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, templates: list[GetMealPlanTemplates200ResponseTemplatesInner]=None):
        """GetMealPlanTemplates200Response - a model defined in OpenAPI

        :param templates: The templates of this GetMealPlanTemplates200Response.
        """
        self.openapi_types = {
            'templates': list[GetMealPlanTemplates200ResponseTemplatesInner]
        }

        self.attribute_map = {
            'templates': 'templates'
        }

        self._templates = templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMealPlanTemplates200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMealPlanTemplates_200_response of this GetMealPlanTemplates200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def templates(self):
        """Gets the templates of this GetMealPlanTemplates200Response.


        :return: The templates of this GetMealPlanTemplates200Response.
        :rtype: list[GetMealPlanTemplates200ResponseTemplatesInner]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this GetMealPlanTemplates200Response.


        :param templates: The templates of this GetMealPlanTemplates200Response.
        :type templates: list[GetMealPlanTemplates200ResponseTemplatesInner]
        """
        if templates is None:
            raise ValueError("Invalid value for `templates`, must not be `None`")
        if templates is not None and len(templates) < 0:
            raise ValueError("Invalid value for `templates`, number of items must be greater than or equal to `0`")

        self._templates = templates
