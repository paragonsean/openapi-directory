# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extract_recipe_from_website200_response_extended_ingredients_inner import ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner
from openapi_server.models.extract_recipe_from_website200_response_wine_pairing import ExtractRecipeFromWebsite200ResponseWinePairing
from openapi_server import util


class GetRecipeInformationBulk200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_likes: int=None, analyzed_instructions: List[str]=None, cheap: bool=None, credits_text: str=None, cuisines: List[str]=None, dairy_free: bool=None, diets: List[str]=None, dish_types: List[str]=None, extended_ingredients: list[ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner]=None, gaps: str=None, gluten_free: bool=None, health_score: float=None, id: int=None, image: str=None, image_type: str=None, instructions: str=None, ketogenic: bool=None, license: str=None, low_fodmap: bool=None, occasions: List[str]=None, price_per_serving: float=None, ready_in_minutes: int=None, servings: float=None, source_name: str=None, source_url: str=None, spoonacular_score: float=None, spoonacular_source_url: str=None, summary: str=None, sustainable: bool=None, title: str=None, vegan: bool=None, vegetarian: bool=None, very_healthy: bool=None, very_popular: bool=None, weight_watcher_smart_points: float=None, whole30: bool=None, wine_pairing: ExtractRecipeFromWebsite200ResponseWinePairing=None):
        """GetRecipeInformationBulk200ResponseInner - a model defined in OpenAPI

        :param aggregate_likes: The aggregate_likes of this GetRecipeInformationBulk200ResponseInner.
        :param analyzed_instructions: The analyzed_instructions of this GetRecipeInformationBulk200ResponseInner.
        :param cheap: The cheap of this GetRecipeInformationBulk200ResponseInner.
        :param credits_text: The credits_text of this GetRecipeInformationBulk200ResponseInner.
        :param cuisines: The cuisines of this GetRecipeInformationBulk200ResponseInner.
        :param dairy_free: The dairy_free of this GetRecipeInformationBulk200ResponseInner.
        :param diets: The diets of this GetRecipeInformationBulk200ResponseInner.
        :param dish_types: The dish_types of this GetRecipeInformationBulk200ResponseInner.
        :param extended_ingredients: The extended_ingredients of this GetRecipeInformationBulk200ResponseInner.
        :param gaps: The gaps of this GetRecipeInformationBulk200ResponseInner.
        :param gluten_free: The gluten_free of this GetRecipeInformationBulk200ResponseInner.
        :param health_score: The health_score of this GetRecipeInformationBulk200ResponseInner.
        :param id: The id of this GetRecipeInformationBulk200ResponseInner.
        :param image: The image of this GetRecipeInformationBulk200ResponseInner.
        :param image_type: The image_type of this GetRecipeInformationBulk200ResponseInner.
        :param instructions: The instructions of this GetRecipeInformationBulk200ResponseInner.
        :param ketogenic: The ketogenic of this GetRecipeInformationBulk200ResponseInner.
        :param license: The license of this GetRecipeInformationBulk200ResponseInner.
        :param low_fodmap: The low_fodmap of this GetRecipeInformationBulk200ResponseInner.
        :param occasions: The occasions of this GetRecipeInformationBulk200ResponseInner.
        :param price_per_serving: The price_per_serving of this GetRecipeInformationBulk200ResponseInner.
        :param ready_in_minutes: The ready_in_minutes of this GetRecipeInformationBulk200ResponseInner.
        :param servings: The servings of this GetRecipeInformationBulk200ResponseInner.
        :param source_name: The source_name of this GetRecipeInformationBulk200ResponseInner.
        :param source_url: The source_url of this GetRecipeInformationBulk200ResponseInner.
        :param spoonacular_score: The spoonacular_score of this GetRecipeInformationBulk200ResponseInner.
        :param spoonacular_source_url: The spoonacular_source_url of this GetRecipeInformationBulk200ResponseInner.
        :param summary: The summary of this GetRecipeInformationBulk200ResponseInner.
        :param sustainable: The sustainable of this GetRecipeInformationBulk200ResponseInner.
        :param title: The title of this GetRecipeInformationBulk200ResponseInner.
        :param vegan: The vegan of this GetRecipeInformationBulk200ResponseInner.
        :param vegetarian: The vegetarian of this GetRecipeInformationBulk200ResponseInner.
        :param very_healthy: The very_healthy of this GetRecipeInformationBulk200ResponseInner.
        :param very_popular: The very_popular of this GetRecipeInformationBulk200ResponseInner.
        :param weight_watcher_smart_points: The weight_watcher_smart_points of this GetRecipeInformationBulk200ResponseInner.
        :param whole30: The whole30 of this GetRecipeInformationBulk200ResponseInner.
        :param wine_pairing: The wine_pairing of this GetRecipeInformationBulk200ResponseInner.
        """
        self.openapi_types = {
            'aggregate_likes': int,
            'analyzed_instructions': List[str],
            'cheap': bool,
            'credits_text': str,
            'cuisines': List[str],
            'dairy_free': bool,
            'diets': List[str],
            'dish_types': List[str],
            'extended_ingredients': list[ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner],
            'gaps': str,
            'gluten_free': bool,
            'health_score': float,
            'id': int,
            'image': str,
            'image_type': str,
            'instructions': str,
            'ketogenic': bool,
            'license': str,
            'low_fodmap': bool,
            'occasions': List[str],
            'price_per_serving': float,
            'ready_in_minutes': int,
            'servings': float,
            'source_name': str,
            'source_url': str,
            'spoonacular_score': float,
            'spoonacular_source_url': str,
            'summary': str,
            'sustainable': bool,
            'title': str,
            'vegan': bool,
            'vegetarian': bool,
            'very_healthy': bool,
            'very_popular': bool,
            'weight_watcher_smart_points': float,
            'whole30': bool,
            'wine_pairing': ExtractRecipeFromWebsite200ResponseWinePairing
        }

        self.attribute_map = {
            'aggregate_likes': 'aggregateLikes',
            'analyzed_instructions': 'analyzedInstructions',
            'cheap': 'cheap',
            'credits_text': 'creditsText',
            'cuisines': 'cuisines',
            'dairy_free': 'dairyFree',
            'diets': 'diets',
            'dish_types': 'dishTypes',
            'extended_ingredients': 'extendedIngredients',
            'gaps': 'gaps',
            'gluten_free': 'glutenFree',
            'health_score': 'healthScore',
            'id': 'id',
            'image': 'image',
            'image_type': 'imageType',
            'instructions': 'instructions',
            'ketogenic': 'ketogenic',
            'license': 'license',
            'low_fodmap': 'lowFodmap',
            'occasions': 'occasions',
            'price_per_serving': 'pricePerServing',
            'ready_in_minutes': 'readyInMinutes',
            'servings': 'servings',
            'source_name': 'sourceName',
            'source_url': 'sourceUrl',
            'spoonacular_score': 'spoonacularScore',
            'spoonacular_source_url': 'spoonacularSourceUrl',
            'summary': 'summary',
            'sustainable': 'sustainable',
            'title': 'title',
            'vegan': 'vegan',
            'vegetarian': 'vegetarian',
            'very_healthy': 'veryHealthy',
            'very_popular': 'veryPopular',
            'weight_watcher_smart_points': 'weightWatcherSmartPoints',
            'whole30': 'whole30',
            'wine_pairing': 'winePairing'
        }

        self._aggregate_likes = aggregate_likes
        self._analyzed_instructions = analyzed_instructions
        self._cheap = cheap
        self._credits_text = credits_text
        self._cuisines = cuisines
        self._dairy_free = dairy_free
        self._diets = diets
        self._dish_types = dish_types
        self._extended_ingredients = extended_ingredients
        self._gaps = gaps
        self._gluten_free = gluten_free
        self._health_score = health_score
        self._id = id
        self._image = image
        self._image_type = image_type
        self._instructions = instructions
        self._ketogenic = ketogenic
        self._license = license
        self._low_fodmap = low_fodmap
        self._occasions = occasions
        self._price_per_serving = price_per_serving
        self._ready_in_minutes = ready_in_minutes
        self._servings = servings
        self._source_name = source_name
        self._source_url = source_url
        self._spoonacular_score = spoonacular_score
        self._spoonacular_source_url = spoonacular_source_url
        self._summary = summary
        self._sustainable = sustainable
        self._title = title
        self._vegan = vegan
        self._vegetarian = vegetarian
        self._very_healthy = very_healthy
        self._very_popular = very_popular
        self._weight_watcher_smart_points = weight_watcher_smart_points
        self._whole30 = whole30
        self._wine_pairing = wine_pairing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeInformationBulk200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeInformationBulk_200_response_inner of this GetRecipeInformationBulk200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_likes(self):
        """Gets the aggregate_likes of this GetRecipeInformationBulk200ResponseInner.


        :return: The aggregate_likes of this GetRecipeInformationBulk200ResponseInner.
        :rtype: int
        """
        return self._aggregate_likes

    @aggregate_likes.setter
    def aggregate_likes(self, aggregate_likes):
        """Sets the aggregate_likes of this GetRecipeInformationBulk200ResponseInner.


        :param aggregate_likes: The aggregate_likes of this GetRecipeInformationBulk200ResponseInner.
        :type aggregate_likes: int
        """
        if aggregate_likes is None:
            raise ValueError("Invalid value for `aggregate_likes`, must not be `None`")

        self._aggregate_likes = aggregate_likes

    @property
    def analyzed_instructions(self):
        """Gets the analyzed_instructions of this GetRecipeInformationBulk200ResponseInner.


        :return: The analyzed_instructions of this GetRecipeInformationBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._analyzed_instructions

    @analyzed_instructions.setter
    def analyzed_instructions(self, analyzed_instructions):
        """Sets the analyzed_instructions of this GetRecipeInformationBulk200ResponseInner.


        :param analyzed_instructions: The analyzed_instructions of this GetRecipeInformationBulk200ResponseInner.
        :type analyzed_instructions: List[str]
        """
        if analyzed_instructions is None:
            raise ValueError("Invalid value for `analyzed_instructions`, must not be `None`")

        self._analyzed_instructions = analyzed_instructions

    @property
    def cheap(self):
        """Gets the cheap of this GetRecipeInformationBulk200ResponseInner.


        :return: The cheap of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._cheap

    @cheap.setter
    def cheap(self, cheap):
        """Sets the cheap of this GetRecipeInformationBulk200ResponseInner.


        :param cheap: The cheap of this GetRecipeInformationBulk200ResponseInner.
        :type cheap: bool
        """
        if cheap is None:
            raise ValueError("Invalid value for `cheap`, must not be `None`")

        self._cheap = cheap

    @property
    def credits_text(self):
        """Gets the credits_text of this GetRecipeInformationBulk200ResponseInner.


        :return: The credits_text of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._credits_text

    @credits_text.setter
    def credits_text(self, credits_text):
        """Sets the credits_text of this GetRecipeInformationBulk200ResponseInner.


        :param credits_text: The credits_text of this GetRecipeInformationBulk200ResponseInner.
        :type credits_text: str
        """
        if credits_text is None:
            raise ValueError("Invalid value for `credits_text`, must not be `None`")
        if credits_text is not None and len(credits_text) < 1:
            raise ValueError("Invalid value for `credits_text`, length must be greater than or equal to `1`")

        self._credits_text = credits_text

    @property
    def cuisines(self):
        """Gets the cuisines of this GetRecipeInformationBulk200ResponseInner.


        :return: The cuisines of this GetRecipeInformationBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._cuisines

    @cuisines.setter
    def cuisines(self, cuisines):
        """Sets the cuisines of this GetRecipeInformationBulk200ResponseInner.


        :param cuisines: The cuisines of this GetRecipeInformationBulk200ResponseInner.
        :type cuisines: List[str]
        """
        if cuisines is None:
            raise ValueError("Invalid value for `cuisines`, must not be `None`")

        self._cuisines = cuisines

    @property
    def dairy_free(self):
        """Gets the dairy_free of this GetRecipeInformationBulk200ResponseInner.


        :return: The dairy_free of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._dairy_free

    @dairy_free.setter
    def dairy_free(self, dairy_free):
        """Sets the dairy_free of this GetRecipeInformationBulk200ResponseInner.


        :param dairy_free: The dairy_free of this GetRecipeInformationBulk200ResponseInner.
        :type dairy_free: bool
        """
        if dairy_free is None:
            raise ValueError("Invalid value for `dairy_free`, must not be `None`")

        self._dairy_free = dairy_free

    @property
    def diets(self):
        """Gets the diets of this GetRecipeInformationBulk200ResponseInner.


        :return: The diets of this GetRecipeInformationBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._diets

    @diets.setter
    def diets(self, diets):
        """Sets the diets of this GetRecipeInformationBulk200ResponseInner.


        :param diets: The diets of this GetRecipeInformationBulk200ResponseInner.
        :type diets: List[str]
        """
        if diets is None:
            raise ValueError("Invalid value for `diets`, must not be `None`")

        self._diets = diets

    @property
    def dish_types(self):
        """Gets the dish_types of this GetRecipeInformationBulk200ResponseInner.


        :return: The dish_types of this GetRecipeInformationBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._dish_types

    @dish_types.setter
    def dish_types(self, dish_types):
        """Sets the dish_types of this GetRecipeInformationBulk200ResponseInner.


        :param dish_types: The dish_types of this GetRecipeInformationBulk200ResponseInner.
        :type dish_types: List[str]
        """
        if dish_types is None:
            raise ValueError("Invalid value for `dish_types`, must not be `None`")

        self._dish_types = dish_types

    @property
    def extended_ingredients(self):
        """Gets the extended_ingredients of this GetRecipeInformationBulk200ResponseInner.


        :return: The extended_ingredients of this GetRecipeInformationBulk200ResponseInner.
        :rtype: list[ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner]
        """
        return self._extended_ingredients

    @extended_ingredients.setter
    def extended_ingredients(self, extended_ingredients):
        """Sets the extended_ingredients of this GetRecipeInformationBulk200ResponseInner.


        :param extended_ingredients: The extended_ingredients of this GetRecipeInformationBulk200ResponseInner.
        :type extended_ingredients: list[ExtractRecipeFromWebsite200ResponseExtendedIngredientsInner]
        """
        if extended_ingredients is None:
            raise ValueError("Invalid value for `extended_ingredients`, must not be `None`")
        if extended_ingredients is not None and len(extended_ingredients) < 0:
            raise ValueError("Invalid value for `extended_ingredients`, number of items must be greater than or equal to `0`")

        self._extended_ingredients = extended_ingredients

    @property
    def gaps(self):
        """Gets the gaps of this GetRecipeInformationBulk200ResponseInner.


        :return: The gaps of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._gaps

    @gaps.setter
    def gaps(self, gaps):
        """Sets the gaps of this GetRecipeInformationBulk200ResponseInner.


        :param gaps: The gaps of this GetRecipeInformationBulk200ResponseInner.
        :type gaps: str
        """
        if gaps is None:
            raise ValueError("Invalid value for `gaps`, must not be `None`")
        if gaps is not None and len(gaps) < 1:
            raise ValueError("Invalid value for `gaps`, length must be greater than or equal to `1`")

        self._gaps = gaps

    @property
    def gluten_free(self):
        """Gets the gluten_free of this GetRecipeInformationBulk200ResponseInner.


        :return: The gluten_free of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._gluten_free

    @gluten_free.setter
    def gluten_free(self, gluten_free):
        """Sets the gluten_free of this GetRecipeInformationBulk200ResponseInner.


        :param gluten_free: The gluten_free of this GetRecipeInformationBulk200ResponseInner.
        :type gluten_free: bool
        """
        if gluten_free is None:
            raise ValueError("Invalid value for `gluten_free`, must not be `None`")

        self._gluten_free = gluten_free

    @property
    def health_score(self):
        """Gets the health_score of this GetRecipeInformationBulk200ResponseInner.


        :return: The health_score of this GetRecipeInformationBulk200ResponseInner.
        :rtype: float
        """
        return self._health_score

    @health_score.setter
    def health_score(self, health_score):
        """Sets the health_score of this GetRecipeInformationBulk200ResponseInner.


        :param health_score: The health_score of this GetRecipeInformationBulk200ResponseInner.
        :type health_score: float
        """
        if health_score is None:
            raise ValueError("Invalid value for `health_score`, must not be `None`")

        self._health_score = health_score

    @property
    def id(self):
        """Gets the id of this GetRecipeInformationBulk200ResponseInner.


        :return: The id of this GetRecipeInformationBulk200ResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetRecipeInformationBulk200ResponseInner.


        :param id: The id of this GetRecipeInformationBulk200ResponseInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this GetRecipeInformationBulk200ResponseInner.


        :return: The image of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GetRecipeInformationBulk200ResponseInner.


        :param image: The image of this GetRecipeInformationBulk200ResponseInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def image_type(self):
        """Gets the image_type of this GetRecipeInformationBulk200ResponseInner.


        :return: The image_type of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this GetRecipeInformationBulk200ResponseInner.


        :param image_type: The image_type of this GetRecipeInformationBulk200ResponseInner.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")
        if image_type is not None and len(image_type) < 1:
            raise ValueError("Invalid value for `image_type`, length must be greater than or equal to `1`")

        self._image_type = image_type

    @property
    def instructions(self):
        """Gets the instructions of this GetRecipeInformationBulk200ResponseInner.


        :return: The instructions of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this GetRecipeInformationBulk200ResponseInner.


        :param instructions: The instructions of this GetRecipeInformationBulk200ResponseInner.
        :type instructions: str
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")

        self._instructions = instructions

    @property
    def ketogenic(self):
        """Gets the ketogenic of this GetRecipeInformationBulk200ResponseInner.


        :return: The ketogenic of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._ketogenic

    @ketogenic.setter
    def ketogenic(self, ketogenic):
        """Sets the ketogenic of this GetRecipeInformationBulk200ResponseInner.


        :param ketogenic: The ketogenic of this GetRecipeInformationBulk200ResponseInner.
        :type ketogenic: bool
        """
        if ketogenic is None:
            raise ValueError("Invalid value for `ketogenic`, must not be `None`")

        self._ketogenic = ketogenic

    @property
    def license(self):
        """Gets the license of this GetRecipeInformationBulk200ResponseInner.


        :return: The license of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this GetRecipeInformationBulk200ResponseInner.


        :param license: The license of this GetRecipeInformationBulk200ResponseInner.
        :type license: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")
        if license is not None and len(license) < 1:
            raise ValueError("Invalid value for `license`, length must be greater than or equal to `1`")

        self._license = license

    @property
    def low_fodmap(self):
        """Gets the low_fodmap of this GetRecipeInformationBulk200ResponseInner.


        :return: The low_fodmap of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._low_fodmap

    @low_fodmap.setter
    def low_fodmap(self, low_fodmap):
        """Sets the low_fodmap of this GetRecipeInformationBulk200ResponseInner.


        :param low_fodmap: The low_fodmap of this GetRecipeInformationBulk200ResponseInner.
        :type low_fodmap: bool
        """
        if low_fodmap is None:
            raise ValueError("Invalid value for `low_fodmap`, must not be `None`")

        self._low_fodmap = low_fodmap

    @property
    def occasions(self):
        """Gets the occasions of this GetRecipeInformationBulk200ResponseInner.


        :return: The occasions of this GetRecipeInformationBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._occasions

    @occasions.setter
    def occasions(self, occasions):
        """Sets the occasions of this GetRecipeInformationBulk200ResponseInner.


        :param occasions: The occasions of this GetRecipeInformationBulk200ResponseInner.
        :type occasions: List[str]
        """
        if occasions is None:
            raise ValueError("Invalid value for `occasions`, must not be `None`")

        self._occasions = occasions

    @property
    def price_per_serving(self):
        """Gets the price_per_serving of this GetRecipeInformationBulk200ResponseInner.


        :return: The price_per_serving of this GetRecipeInformationBulk200ResponseInner.
        :rtype: float
        """
        return self._price_per_serving

    @price_per_serving.setter
    def price_per_serving(self, price_per_serving):
        """Sets the price_per_serving of this GetRecipeInformationBulk200ResponseInner.


        :param price_per_serving: The price_per_serving of this GetRecipeInformationBulk200ResponseInner.
        :type price_per_serving: float
        """
        if price_per_serving is None:
            raise ValueError("Invalid value for `price_per_serving`, must not be `None`")

        self._price_per_serving = price_per_serving

    @property
    def ready_in_minutes(self):
        """Gets the ready_in_minutes of this GetRecipeInformationBulk200ResponseInner.


        :return: The ready_in_minutes of this GetRecipeInformationBulk200ResponseInner.
        :rtype: int
        """
        return self._ready_in_minutes

    @ready_in_minutes.setter
    def ready_in_minutes(self, ready_in_minutes):
        """Sets the ready_in_minutes of this GetRecipeInformationBulk200ResponseInner.


        :param ready_in_minutes: The ready_in_minutes of this GetRecipeInformationBulk200ResponseInner.
        :type ready_in_minutes: int
        """
        if ready_in_minutes is None:
            raise ValueError("Invalid value for `ready_in_minutes`, must not be `None`")

        self._ready_in_minutes = ready_in_minutes

    @property
    def servings(self):
        """Gets the servings of this GetRecipeInformationBulk200ResponseInner.


        :return: The servings of this GetRecipeInformationBulk200ResponseInner.
        :rtype: float
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this GetRecipeInformationBulk200ResponseInner.


        :param servings: The servings of this GetRecipeInformationBulk200ResponseInner.
        :type servings: float
        """
        if servings is None:
            raise ValueError("Invalid value for `servings`, must not be `None`")

        self._servings = servings

    @property
    def source_name(self):
        """Gets the source_name of this GetRecipeInformationBulk200ResponseInner.


        :return: The source_name of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this GetRecipeInformationBulk200ResponseInner.


        :param source_name: The source_name of this GetRecipeInformationBulk200ResponseInner.
        :type source_name: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")
        if source_name is not None and len(source_name) < 1:
            raise ValueError("Invalid value for `source_name`, length must be greater than or equal to `1`")

        self._source_name = source_name

    @property
    def source_url(self):
        """Gets the source_url of this GetRecipeInformationBulk200ResponseInner.


        :return: The source_url of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this GetRecipeInformationBulk200ResponseInner.


        :param source_url: The source_url of this GetRecipeInformationBulk200ResponseInner.
        :type source_url: str
        """
        if source_url is None:
            raise ValueError("Invalid value for `source_url`, must not be `None`")
        if source_url is not None and len(source_url) < 1:
            raise ValueError("Invalid value for `source_url`, length must be greater than or equal to `1`")

        self._source_url = source_url

    @property
    def spoonacular_score(self):
        """Gets the spoonacular_score of this GetRecipeInformationBulk200ResponseInner.


        :return: The spoonacular_score of this GetRecipeInformationBulk200ResponseInner.
        :rtype: float
        """
        return self._spoonacular_score

    @spoonacular_score.setter
    def spoonacular_score(self, spoonacular_score):
        """Sets the spoonacular_score of this GetRecipeInformationBulk200ResponseInner.


        :param spoonacular_score: The spoonacular_score of this GetRecipeInformationBulk200ResponseInner.
        :type spoonacular_score: float
        """
        if spoonacular_score is None:
            raise ValueError("Invalid value for `spoonacular_score`, must not be `None`")

        self._spoonacular_score = spoonacular_score

    @property
    def spoonacular_source_url(self):
        """Gets the spoonacular_source_url of this GetRecipeInformationBulk200ResponseInner.


        :return: The spoonacular_source_url of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._spoonacular_source_url

    @spoonacular_source_url.setter
    def spoonacular_source_url(self, spoonacular_source_url):
        """Sets the spoonacular_source_url of this GetRecipeInformationBulk200ResponseInner.


        :param spoonacular_source_url: The spoonacular_source_url of this GetRecipeInformationBulk200ResponseInner.
        :type spoonacular_source_url: str
        """
        if spoonacular_source_url is None:
            raise ValueError("Invalid value for `spoonacular_source_url`, must not be `None`")
        if spoonacular_source_url is not None and len(spoonacular_source_url) < 1:
            raise ValueError("Invalid value for `spoonacular_source_url`, length must be greater than or equal to `1`")

        self._spoonacular_source_url = spoonacular_source_url

    @property
    def summary(self):
        """Gets the summary of this GetRecipeInformationBulk200ResponseInner.


        :return: The summary of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this GetRecipeInformationBulk200ResponseInner.


        :param summary: The summary of this GetRecipeInformationBulk200ResponseInner.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")
        if summary is not None and len(summary) < 1:
            raise ValueError("Invalid value for `summary`, length must be greater than or equal to `1`")

        self._summary = summary

    @property
    def sustainable(self):
        """Gets the sustainable of this GetRecipeInformationBulk200ResponseInner.


        :return: The sustainable of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._sustainable

    @sustainable.setter
    def sustainable(self, sustainable):
        """Sets the sustainable of this GetRecipeInformationBulk200ResponseInner.


        :param sustainable: The sustainable of this GetRecipeInformationBulk200ResponseInner.
        :type sustainable: bool
        """
        if sustainable is None:
            raise ValueError("Invalid value for `sustainable`, must not be `None`")

        self._sustainable = sustainable

    @property
    def title(self):
        """Gets the title of this GetRecipeInformationBulk200ResponseInner.


        :return: The title of this GetRecipeInformationBulk200ResponseInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetRecipeInformationBulk200ResponseInner.


        :param title: The title of this GetRecipeInformationBulk200ResponseInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def vegan(self):
        """Gets the vegan of this GetRecipeInformationBulk200ResponseInner.


        :return: The vegan of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._vegan

    @vegan.setter
    def vegan(self, vegan):
        """Sets the vegan of this GetRecipeInformationBulk200ResponseInner.


        :param vegan: The vegan of this GetRecipeInformationBulk200ResponseInner.
        :type vegan: bool
        """
        if vegan is None:
            raise ValueError("Invalid value for `vegan`, must not be `None`")

        self._vegan = vegan

    @property
    def vegetarian(self):
        """Gets the vegetarian of this GetRecipeInformationBulk200ResponseInner.


        :return: The vegetarian of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._vegetarian

    @vegetarian.setter
    def vegetarian(self, vegetarian):
        """Sets the vegetarian of this GetRecipeInformationBulk200ResponseInner.


        :param vegetarian: The vegetarian of this GetRecipeInformationBulk200ResponseInner.
        :type vegetarian: bool
        """
        if vegetarian is None:
            raise ValueError("Invalid value for `vegetarian`, must not be `None`")

        self._vegetarian = vegetarian

    @property
    def very_healthy(self):
        """Gets the very_healthy of this GetRecipeInformationBulk200ResponseInner.


        :return: The very_healthy of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._very_healthy

    @very_healthy.setter
    def very_healthy(self, very_healthy):
        """Sets the very_healthy of this GetRecipeInformationBulk200ResponseInner.


        :param very_healthy: The very_healthy of this GetRecipeInformationBulk200ResponseInner.
        :type very_healthy: bool
        """
        if very_healthy is None:
            raise ValueError("Invalid value for `very_healthy`, must not be `None`")

        self._very_healthy = very_healthy

    @property
    def very_popular(self):
        """Gets the very_popular of this GetRecipeInformationBulk200ResponseInner.


        :return: The very_popular of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._very_popular

    @very_popular.setter
    def very_popular(self, very_popular):
        """Sets the very_popular of this GetRecipeInformationBulk200ResponseInner.


        :param very_popular: The very_popular of this GetRecipeInformationBulk200ResponseInner.
        :type very_popular: bool
        """
        if very_popular is None:
            raise ValueError("Invalid value for `very_popular`, must not be `None`")

        self._very_popular = very_popular

    @property
    def weight_watcher_smart_points(self):
        """Gets the weight_watcher_smart_points of this GetRecipeInformationBulk200ResponseInner.


        :return: The weight_watcher_smart_points of this GetRecipeInformationBulk200ResponseInner.
        :rtype: float
        """
        return self._weight_watcher_smart_points

    @weight_watcher_smart_points.setter
    def weight_watcher_smart_points(self, weight_watcher_smart_points):
        """Sets the weight_watcher_smart_points of this GetRecipeInformationBulk200ResponseInner.


        :param weight_watcher_smart_points: The weight_watcher_smart_points of this GetRecipeInformationBulk200ResponseInner.
        :type weight_watcher_smart_points: float
        """
        if weight_watcher_smart_points is None:
            raise ValueError("Invalid value for `weight_watcher_smart_points`, must not be `None`")

        self._weight_watcher_smart_points = weight_watcher_smart_points

    @property
    def whole30(self):
        """Gets the whole30 of this GetRecipeInformationBulk200ResponseInner.


        :return: The whole30 of this GetRecipeInformationBulk200ResponseInner.
        :rtype: bool
        """
        return self._whole30

    @whole30.setter
    def whole30(self, whole30):
        """Sets the whole30 of this GetRecipeInformationBulk200ResponseInner.


        :param whole30: The whole30 of this GetRecipeInformationBulk200ResponseInner.
        :type whole30: bool
        """
        if whole30 is None:
            raise ValueError("Invalid value for `whole30`, must not be `None`")

        self._whole30 = whole30

    @property
    def wine_pairing(self):
        """Gets the wine_pairing of this GetRecipeInformationBulk200ResponseInner.


        :return: The wine_pairing of this GetRecipeInformationBulk200ResponseInner.
        :rtype: ExtractRecipeFromWebsite200ResponseWinePairing
        """
        return self._wine_pairing

    @wine_pairing.setter
    def wine_pairing(self, wine_pairing):
        """Sets the wine_pairing of this GetRecipeInformationBulk200ResponseInner.


        :param wine_pairing: The wine_pairing of this GetRecipeInformationBulk200ResponseInner.
        :type wine_pairing: ExtractRecipeFromWebsite200ResponseWinePairing
        """
        if wine_pairing is None:
            raise ValueError("Invalid value for `wine_pairing`, must not be `None`")

        self._wine_pairing = wine_pairing
