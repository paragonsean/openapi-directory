# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIngredientInformation200ResponseNutritionNutrientsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, name: str=None, percent_of_daily_needs: float=None, unit: str=None):
        """GetIngredientInformation200ResponseNutritionNutrientsInner - a model defined in OpenAPI

        :param amount: The amount of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :param name: The name of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :param percent_of_daily_needs: The percent_of_daily_needs of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :param unit: The unit of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        """
        self.openapi_types = {
            'amount': float,
            'name': str,
            'percent_of_daily_needs': float,
            'unit': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'name': 'name',
            'percent_of_daily_needs': 'percentOfDailyNeeds',
            'unit': 'unit'
        }

        self._amount = amount
        self._name = name
        self._percent_of_daily_needs = percent_of_daily_needs
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIngredientInformation200ResponseNutritionNutrientsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getIngredientInformation_200_response_nutrition_nutrients_inner of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :return: The amount of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :param amount: The amount of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def name(self):
        """Gets the name of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :return: The name of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :param name: The name of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def percent_of_daily_needs(self):
        """Gets the percent_of_daily_needs of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :return: The percent_of_daily_needs of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :rtype: float
        """
        return self._percent_of_daily_needs

    @percent_of_daily_needs.setter
    def percent_of_daily_needs(self, percent_of_daily_needs):
        """Sets the percent_of_daily_needs of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :param percent_of_daily_needs: The percent_of_daily_needs of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :type percent_of_daily_needs: float
        """
        if percent_of_daily_needs is None:
            raise ValueError("Invalid value for `percent_of_daily_needs`, must not be `None`")

        self._percent_of_daily_needs = percent_of_daily_needs

    @property
    def unit(self):
        """Gets the unit of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :return: The unit of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetIngredientInformation200ResponseNutritionNutrientsInner.


        :param unit: The unit of this GetIngredientInformation200ResponseNutritionNutrientsInner.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")
        if unit is not None and len(unit) < 1:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")

        self._unit = unit
