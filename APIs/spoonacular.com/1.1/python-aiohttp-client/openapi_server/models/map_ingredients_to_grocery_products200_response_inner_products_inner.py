# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapIngredientsToGroceryProducts200ResponseInnerProductsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, title: str=None, upc: str=None):
        """MapIngredientsToGroceryProducts200ResponseInnerProductsInner - a model defined in OpenAPI

        :param id: The id of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :param title: The title of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :param upc: The upc of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        """
        self.openapi_types = {
            'id': int,
            'title': str,
            'upc': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'upc': 'upc'
        }

        self._id = id
        self._title = title
        self._upc = upc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapIngredientsToGroceryProducts200ResponseInnerProductsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mapIngredientsToGroceryProducts_200_response_inner_products_inner of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :return: The id of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :param id: The id of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def title(self):
        """Gets the title of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :return: The title of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :param title: The title of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def upc(self):
        """Gets the upc of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :return: The upc of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.


        :param upc: The upc of this MapIngredientsToGroceryProducts200ResponseInnerProductsInner.
        :type upc: str
        """
        if upc is None:
            raise ValueError("Invalid value for `upc`, must not be `None`")
        if upc is not None and len(upc) < 1:
            raise ValueError("Invalid value for `upc`, length must be greater than or equal to `1`")

        self._upc = upc
