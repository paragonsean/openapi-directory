# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MapIngredientsToGroceryProductsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: List[str]=None, servings: float=None):
        """MapIngredientsToGroceryProductsRequest - a model defined in OpenAPI

        :param ingredients: The ingredients of this MapIngredientsToGroceryProductsRequest.
        :param servings: The servings of this MapIngredientsToGroceryProductsRequest.
        """
        self.openapi_types = {
            'ingredients': List[str],
            'servings': float
        }

        self.attribute_map = {
            'ingredients': 'ingredients',
            'servings': 'servings'
        }

        self._ingredients = ingredients
        self._servings = servings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapIngredientsToGroceryProductsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mapIngredientsToGroceryProducts_request of this MapIngredientsToGroceryProductsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this MapIngredientsToGroceryProductsRequest.


        :return: The ingredients of this MapIngredientsToGroceryProductsRequest.
        :rtype: List[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this MapIngredientsToGroceryProductsRequest.


        :param ingredients: The ingredients of this MapIngredientsToGroceryProductsRequest.
        :type ingredients: List[str]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")

        self._ingredients = ingredients

    @property
    def servings(self):
        """Gets the servings of this MapIngredientsToGroceryProductsRequest.


        :return: The servings of this MapIngredientsToGroceryProductsRequest.
        :rtype: float
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this MapIngredientsToGroceryProductsRequest.


        :param servings: The servings of this MapIngredientsToGroceryProductsRequest.
        :type servings: float
        """
        if servings is None:
            raise ValueError("Invalid value for `servings`, must not be `None`")

        self._servings = servings
