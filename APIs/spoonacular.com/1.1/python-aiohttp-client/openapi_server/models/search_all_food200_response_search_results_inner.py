# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_all_food200_response_search_results_inner_results_inner import SearchAllFood200ResponseSearchResultsInnerResultsInner
from openapi_server import util


class SearchAllFood200ResponseSearchResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, results: list[SearchAllFood200ResponseSearchResultsInnerResultsInner]=None, total_results: int=None):
        """SearchAllFood200ResponseSearchResultsInner - a model defined in OpenAPI

        :param name: The name of this SearchAllFood200ResponseSearchResultsInner.
        :param results: The results of this SearchAllFood200ResponseSearchResultsInner.
        :param total_results: The total_results of this SearchAllFood200ResponseSearchResultsInner.
        """
        self.openapi_types = {
            'name': str,
            'results': list[SearchAllFood200ResponseSearchResultsInnerResultsInner],
            'total_results': int
        }

        self.attribute_map = {
            'name': 'name',
            'results': 'results',
            'total_results': 'totalResults'
        }

        self._name = name
        self._results = results
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAllFood200ResponseSearchResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchAllFood_200_response_searchResults_inner of this SearchAllFood200ResponseSearchResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SearchAllFood200ResponseSearchResultsInner.


        :return: The name of this SearchAllFood200ResponseSearchResultsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchAllFood200ResponseSearchResultsInner.


        :param name: The name of this SearchAllFood200ResponseSearchResultsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def results(self):
        """Gets the results of this SearchAllFood200ResponseSearchResultsInner.


        :return: The results of this SearchAllFood200ResponseSearchResultsInner.
        :rtype: list[SearchAllFood200ResponseSearchResultsInnerResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchAllFood200ResponseSearchResultsInner.


        :param results: The results of this SearchAllFood200ResponseSearchResultsInner.
        :type results: list[SearchAllFood200ResponseSearchResultsInnerResultsInner]
        """
        if results is not None and len(results) < 0:
            raise ValueError("Invalid value for `results`, number of items must be greater than or equal to `0`")

        self._results = results

    @property
    def total_results(self):
        """Gets the total_results of this SearchAllFood200ResponseSearchResultsInner.


        :return: The total_results of this SearchAllFood200ResponseSearchResultsInner.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this SearchAllFood200ResponseSearchResultsInner.


        :param total_results: The total_results of this SearchAllFood200ResponseSearchResultsInner.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results
