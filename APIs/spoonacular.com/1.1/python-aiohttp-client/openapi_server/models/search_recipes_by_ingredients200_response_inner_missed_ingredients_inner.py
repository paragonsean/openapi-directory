# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, amount: float=None, id: int=None, image: str=None, meta: List[str]=None, name: str=None, original: str=None, original_name: str=None, unit: str=None, unit_long: str=None, unit_short: str=None):
        """SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner - a model defined in OpenAPI

        :param aisle: The aisle of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param amount: The amount of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param id: The id of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param image: The image of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param meta: The meta of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param name: The name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param original: The original of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param original_name: The original_name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param unit: The unit of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param unit_long: The unit_long of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :param unit_short: The unit_short of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        """
        self.openapi_types = {
            'aisle': str,
            'amount': float,
            'id': int,
            'image': str,
            'meta': List[str],
            'name': str,
            'original': str,
            'original_name': str,
            'unit': str,
            'unit_long': str,
            'unit_short': str
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'amount': 'amount',
            'id': 'id',
            'image': 'image',
            'meta': 'meta',
            'name': 'name',
            'original': 'original',
            'original_name': 'originalName',
            'unit': 'unit',
            'unit_long': 'unitLong',
            'unit_short': 'unitShort'
        }

        self._aisle = aisle
        self._amount = amount
        self._id = id
        self._image = image
        self._meta = meta
        self._name = name
        self._original = original
        self._original_name = original_name
        self._unit = unit
        self._unit_long = unit_long
        self._unit_short = unit_short

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchRecipesByIngredients_200_response_inner_missedIngredients_inner of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The aisle of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param aisle: The aisle of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type aisle: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def amount(self):
        """Gets the amount of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The amount of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param amount: The amount of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def id(self):
        """Gets the id of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The id of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param id: The id of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The image of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param image: The image of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def meta(self):
        """Gets the meta of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The meta of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: List[str]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param meta: The meta of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type meta: List[str]
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param name: The name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def original(self):
        """Gets the original of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The original of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param original: The original of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type original: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")

        self._original = original

    @property
    def original_name(self):
        """Gets the original_name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The original_name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param original_name: The original_name of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type original_name: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")
        if original_name is not None and len(original_name) < 1:
            raise ValueError("Invalid value for `original_name`, length must be greater than or equal to `1`")

        self._original_name = original_name

    @property
    def unit(self):
        """Gets the unit of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The unit of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param unit: The unit of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")
        if unit is not None and len(unit) < 0:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `0`")

        self._unit = unit

    @property
    def unit_long(self):
        """Gets the unit_long of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The unit_long of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._unit_long

    @unit_long.setter
    def unit_long(self, unit_long):
        """Sets the unit_long of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param unit_long: The unit_long of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type unit_long: str
        """
        if unit_long is None:
            raise ValueError("Invalid value for `unit_long`, must not be `None`")
        if unit_long is not None and len(unit_long) < 0:
            raise ValueError("Invalid value for `unit_long`, length must be greater than or equal to `0`")

        self._unit_long = unit_long

    @property
    def unit_short(self):
        """Gets the unit_short of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :return: The unit_short of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :rtype: str
        """
        return self._unit_short

    @unit_short.setter
    def unit_short(self, unit_short):
        """Sets the unit_short of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.


        :param unit_short: The unit_short of this SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner.
        :type unit_short: str
        """
        if unit_short is None:
            raise ValueError("Invalid value for `unit_short`, must not be `None`")
        if unit_short is not None and len(unit_short) < 0:
            raise ValueError("Invalid value for `unit_short`, length must be greater than or equal to `0`")

        self._unit_short = unit_short
