# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_glycemic_load200_response_ingredients_inner import ComputeGlycemicLoad200ResponseIngredientsInner
from openapi_server import util


class ComputeGlycemicLoad200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: list[ComputeGlycemicLoad200ResponseIngredientsInner]=None, total_glycemic_load: float=None):
        """ComputeGlycemicLoad200Response - a model defined in OpenAPI

        :param ingredients: The ingredients of this ComputeGlycemicLoad200Response.
        :param total_glycemic_load: The total_glycemic_load of this ComputeGlycemicLoad200Response.
        """
        self.openapi_types = {
            'ingredients': list[ComputeGlycemicLoad200ResponseIngredientsInner],
            'total_glycemic_load': float
        }

        self.attribute_map = {
            'ingredients': 'ingredients',
            'total_glycemic_load': 'totalGlycemicLoad'
        }

        self._ingredients = ingredients
        self._total_glycemic_load = total_glycemic_load

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeGlycemicLoad200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The computeGlycemicLoad_200_response of this ComputeGlycemicLoad200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this ComputeGlycemicLoad200Response.


        :return: The ingredients of this ComputeGlycemicLoad200Response.
        :rtype: list[ComputeGlycemicLoad200ResponseIngredientsInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this ComputeGlycemicLoad200Response.


        :param ingredients: The ingredients of this ComputeGlycemicLoad200Response.
        :type ingredients: list[ComputeGlycemicLoad200ResponseIngredientsInner]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients

    @property
    def total_glycemic_load(self):
        """Gets the total_glycemic_load of this ComputeGlycemicLoad200Response.


        :return: The total_glycemic_load of this ComputeGlycemicLoad200Response.
        :rtype: float
        """
        return self._total_glycemic_load

    @total_glycemic_load.setter
    def total_glycemic_load(self, total_glycemic_load):
        """Sets the total_glycemic_load of this ComputeGlycemicLoad200Response.


        :param total_glycemic_load: The total_glycemic_load of this ComputeGlycemicLoad200Response.
        :type total_glycemic_load: float
        """
        if total_glycemic_load is None:
            raise ValueError("Invalid value for `total_glycemic_load`, must not be `None`")

        self._total_glycemic_load = total_glycemic_load
