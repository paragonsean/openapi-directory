# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_comparable_products200_response_comparable_products import GetComparableProducts200ResponseComparableProducts
from openapi_server import util


class GetComparableProducts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparable_products: GetComparableProducts200ResponseComparableProducts=None):
        """GetComparableProducts200Response - a model defined in OpenAPI

        :param comparable_products: The comparable_products of this GetComparableProducts200Response.
        """
        self.openapi_types = {
            'comparable_products': GetComparableProducts200ResponseComparableProducts
        }

        self.attribute_map = {
            'comparable_products': 'comparableProducts'
        }

        self._comparable_products = comparable_products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetComparableProducts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getComparableProducts_200_response of this GetComparableProducts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparable_products(self):
        """Gets the comparable_products of this GetComparableProducts200Response.


        :return: The comparable_products of this GetComparableProducts200Response.
        :rtype: GetComparableProducts200ResponseComparableProducts
        """
        return self._comparable_products

    @comparable_products.setter
    def comparable_products(self, comparable_products):
        """Sets the comparable_products of this GetComparableProducts200Response.


        :param comparable_products: The comparable_products of this GetComparableProducts200Response.
        :type comparable_products: GetComparableProducts200ResponseComparableProducts
        """
        if comparable_products is None:
            raise ValueError("Invalid value for `comparable_products`, must not be `None`")

        self._comparable_products = comparable_products
