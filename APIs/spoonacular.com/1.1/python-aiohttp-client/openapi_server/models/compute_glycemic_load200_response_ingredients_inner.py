# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeGlycemicLoad200ResponseIngredientsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, glycemic_index: float=None, glycemic_load: float=None, id: int=None, original: str=None):
        """ComputeGlycemicLoad200ResponseIngredientsInner - a model defined in OpenAPI

        :param glycemic_index: The glycemic_index of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :param glycemic_load: The glycemic_load of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :param id: The id of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :param original: The original of this ComputeGlycemicLoad200ResponseIngredientsInner.
        """
        self.openapi_types = {
            'glycemic_index': float,
            'glycemic_load': float,
            'id': int,
            'original': str
        }

        self.attribute_map = {
            'glycemic_index': 'glycemicIndex',
            'glycemic_load': 'glycemicLoad',
            'id': 'id',
            'original': 'original'
        }

        self._glycemic_index = glycemic_index
        self._glycemic_load = glycemic_load
        self._id = id
        self._original = original

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeGlycemicLoad200ResponseIngredientsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The computeGlycemicLoad_200_response_ingredients_inner of this ComputeGlycemicLoad200ResponseIngredientsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def glycemic_index(self):
        """Gets the glycemic_index of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :return: The glycemic_index of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :rtype: float
        """
        return self._glycemic_index

    @glycemic_index.setter
    def glycemic_index(self, glycemic_index):
        """Sets the glycemic_index of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :param glycemic_index: The glycemic_index of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :type glycemic_index: float
        """
        if glycemic_index is None:
            raise ValueError("Invalid value for `glycemic_index`, must not be `None`")

        self._glycemic_index = glycemic_index

    @property
    def glycemic_load(self):
        """Gets the glycemic_load of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :return: The glycemic_load of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :rtype: float
        """
        return self._glycemic_load

    @glycemic_load.setter
    def glycemic_load(self, glycemic_load):
        """Sets the glycemic_load of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :param glycemic_load: The glycemic_load of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :type glycemic_load: float
        """
        if glycemic_load is None:
            raise ValueError("Invalid value for `glycemic_load`, must not be `None`")

        self._glycemic_load = glycemic_load

    @property
    def id(self):
        """Gets the id of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :return: The id of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :param id: The id of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def original(self):
        """Gets the original of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :return: The original of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this ComputeGlycemicLoad200ResponseIngredientsInner.


        :param original: The original of this ComputeGlycemicLoad200ResponseIngredientsInner.
        :type original: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")

        self._original = original
