# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIngredientInformation200ResponseNutritionCaloricBreakdown(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_carbs: float=None, percent_fat: float=None, percent_protein: float=None):
        """GetIngredientInformation200ResponseNutritionCaloricBreakdown - a model defined in OpenAPI

        :param percent_carbs: The percent_carbs of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :param percent_fat: The percent_fat of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :param percent_protein: The percent_protein of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        """
        self.openapi_types = {
            'percent_carbs': float,
            'percent_fat': float,
            'percent_protein': float
        }

        self.attribute_map = {
            'percent_carbs': 'percentCarbs',
            'percent_fat': 'percentFat',
            'percent_protein': 'percentProtein'
        }

        self._percent_carbs = percent_carbs
        self._percent_fat = percent_fat
        self._percent_protein = percent_protein

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIngredientInformation200ResponseNutritionCaloricBreakdown':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getIngredientInformation_200_response_nutrition_caloricBreakdown of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_carbs(self):
        """Gets the percent_carbs of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :return: The percent_carbs of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :rtype: float
        """
        return self._percent_carbs

    @percent_carbs.setter
    def percent_carbs(self, percent_carbs):
        """Sets the percent_carbs of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :param percent_carbs: The percent_carbs of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :type percent_carbs: float
        """
        if percent_carbs is None:
            raise ValueError("Invalid value for `percent_carbs`, must not be `None`")

        self._percent_carbs = percent_carbs

    @property
    def percent_fat(self):
        """Gets the percent_fat of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :return: The percent_fat of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :rtype: float
        """
        return self._percent_fat

    @percent_fat.setter
    def percent_fat(self, percent_fat):
        """Sets the percent_fat of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :param percent_fat: The percent_fat of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :type percent_fat: float
        """
        if percent_fat is None:
            raise ValueError("Invalid value for `percent_fat`, must not be `None`")

        self._percent_fat = percent_fat

    @property
    def percent_protein(self):
        """Gets the percent_protein of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :return: The percent_protein of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :rtype: float
        """
        return self._percent_protein

    @percent_protein.setter
    def percent_protein(self, percent_protein):
        """Sets the percent_protein of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.


        :param percent_protein: The percent_protein of this GetIngredientInformation200ResponseNutritionCaloricBreakdown.
        :type percent_protein: float
        """
        if percent_protein is None:
            raise ValueError("Invalid value for `percent_protein`, must not be `None`")

        self._percent_protein = percent_protein
