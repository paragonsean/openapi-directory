# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_conversation_suggests200_response_suggests import GetConversationSuggests200ResponseSuggests
from openapi_server import util


class GetConversationSuggests200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggests: GetConversationSuggests200ResponseSuggests=None, words: List[object]=None):
        """GetConversationSuggests200Response - a model defined in OpenAPI

        :param suggests: The suggests of this GetConversationSuggests200Response.
        :param words: The words of this GetConversationSuggests200Response.
        """
        self.openapi_types = {
            'suggests': GetConversationSuggests200ResponseSuggests,
            'words': List[object]
        }

        self.attribute_map = {
            'suggests': 'suggests',
            'words': 'words'
        }

        self._suggests = suggests
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetConversationSuggests200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getConversationSuggests_200_response of this GetConversationSuggests200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggests(self):
        """Gets the suggests of this GetConversationSuggests200Response.


        :return: The suggests of this GetConversationSuggests200Response.
        :rtype: GetConversationSuggests200ResponseSuggests
        """
        return self._suggests

    @suggests.setter
    def suggests(self, suggests):
        """Sets the suggests of this GetConversationSuggests200Response.


        :param suggests: The suggests of this GetConversationSuggests200Response.
        :type suggests: GetConversationSuggests200ResponseSuggests
        """
        if suggests is None:
            raise ValueError("Invalid value for `suggests`, must not be `None`")

        self._suggests = suggests

    @property
    def words(self):
        """Gets the words of this GetConversationSuggests200Response.


        :return: The words of this GetConversationSuggests200Response.
        :rtype: List[object]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this GetConversationSuggests200Response.


        :param words: The words of this GetConversationSuggests200Response.
        :type words: List[object]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")

        self._words = words
