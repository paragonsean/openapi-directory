# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClassifyCuisine200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, cuisine: str=None, cuisines: List[str]=None):
        """ClassifyCuisine200Response - a model defined in OpenAPI

        :param confidence: The confidence of this ClassifyCuisine200Response.
        :param cuisine: The cuisine of this ClassifyCuisine200Response.
        :param cuisines: The cuisines of this ClassifyCuisine200Response.
        """
        self.openapi_types = {
            'confidence': float,
            'cuisine': str,
            'cuisines': List[str]
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'cuisine': 'cuisine',
            'cuisines': 'cuisines'
        }

        self._confidence = confidence
        self._cuisine = cuisine
        self._cuisines = cuisines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassifyCuisine200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The classifyCuisine_200_response of this ClassifyCuisine200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this ClassifyCuisine200Response.


        :return: The confidence of this ClassifyCuisine200Response.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this ClassifyCuisine200Response.


        :param confidence: The confidence of this ClassifyCuisine200Response.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")

        self._confidence = confidence

    @property
    def cuisine(self):
        """Gets the cuisine of this ClassifyCuisine200Response.


        :return: The cuisine of this ClassifyCuisine200Response.
        :rtype: str
        """
        return self._cuisine

    @cuisine.setter
    def cuisine(self, cuisine):
        """Sets the cuisine of this ClassifyCuisine200Response.


        :param cuisine: The cuisine of this ClassifyCuisine200Response.
        :type cuisine: str
        """
        if cuisine is None:
            raise ValueError("Invalid value for `cuisine`, must not be `None`")
        if cuisine is not None and len(cuisine) < 1:
            raise ValueError("Invalid value for `cuisine`, length must be greater than or equal to `1`")

        self._cuisine = cuisine

    @property
    def cuisines(self):
        """Gets the cuisines of this ClassifyCuisine200Response.


        :return: The cuisines of this ClassifyCuisine200Response.
        :rtype: List[str]
        """
        return self._cuisines

    @cuisines.setter
    def cuisines(self, cuisines):
        """Sets the cuisines of this ClassifyCuisine200Response.


        :param cuisines: The cuisines of this ClassifyCuisine200Response.
        :type cuisines: List[str]
        """
        if cuisines is None:
            raise ValueError("Invalid value for `cuisines`, must not be `None`")

        self._cuisines = cuisines
