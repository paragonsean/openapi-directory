# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, unit_long: str=None, unit_short: str=None):
        """ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric - a model defined in OpenAPI

        :param amount: The amount of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :param unit_long: The unit_long of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :param unit_short: The unit_short of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        """
        self.openapi_types = {
            'amount': float,
            'unit_long': str,
            'unit_short': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'unit_long': 'unitLong',
            'unit_short': 'unitShort'
        }

        self._amount = amount
        self._unit_long = unit_long
        self._unit_short = unit_short

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The extractRecipeFromWebsite_200_response_extendedIngredients_inner_measures_metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :return: The amount of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :param amount: The amount of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def unit_long(self):
        """Gets the unit_long of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :return: The unit_long of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :rtype: str
        """
        return self._unit_long

    @unit_long.setter
    def unit_long(self, unit_long):
        """Sets the unit_long of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :param unit_long: The unit_long of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :type unit_long: str
        """
        if unit_long is None:
            raise ValueError("Invalid value for `unit_long`, must not be `None`")
        if unit_long is not None and len(unit_long) < 0:
            raise ValueError("Invalid value for `unit_long`, length must be greater than or equal to `0`")

        self._unit_long = unit_long

    @property
    def unit_short(self):
        """Gets the unit_short of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :return: The unit_short of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :rtype: str
        """
        return self._unit_short

    @unit_short.setter
    def unit_short(self, unit_short):
        """Sets the unit_short of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.


        :param unit_short: The unit_short of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric.
        :type unit_short: str
        """
        if unit_short is None:
            raise ValueError("Invalid value for `unit_short`, must not be `None`")
        if unit_short is not None and len(unit_short) < 0:
            raise ValueError("Invalid value for `unit_short`, length must be greater than or equal to `0`")

        self._unit_short = unit_short
