# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_recipe_instructions200_response_equipment_inner import AnalyzeRecipeInstructions200ResponseEquipmentInner
from openapi_server.models.analyze_recipe_instructions200_response_parsed_instructions_inner import AnalyzeRecipeInstructions200ResponseParsedInstructionsInner
from openapi_server import util


class AnalyzeRecipeInstructions200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equipment: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]=None, ingredients: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]=None, parsed_instructions: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInner]=None):
        """AnalyzeRecipeInstructions200Response - a model defined in OpenAPI

        :param equipment: The equipment of this AnalyzeRecipeInstructions200Response.
        :param ingredients: The ingredients of this AnalyzeRecipeInstructions200Response.
        :param parsed_instructions: The parsed_instructions of this AnalyzeRecipeInstructions200Response.
        """
        self.openapi_types = {
            'equipment': list[AnalyzeRecipeInstructions200ResponseEquipmentInner],
            'ingredients': list[AnalyzeRecipeInstructions200ResponseEquipmentInner],
            'parsed_instructions': list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInner]
        }

        self.attribute_map = {
            'equipment': 'equipment',
            'ingredients': 'ingredients',
            'parsed_instructions': 'parsedInstructions'
        }

        self._equipment = equipment
        self._ingredients = ingredients
        self._parsed_instructions = parsed_instructions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeRecipeInstructions200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeRecipeInstructions_200_response of this AnalyzeRecipeInstructions200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equipment(self):
        """Gets the equipment of this AnalyzeRecipeInstructions200Response.


        :return: The equipment of this AnalyzeRecipeInstructions200Response.
        :rtype: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this AnalyzeRecipeInstructions200Response.


        :param equipment: The equipment of this AnalyzeRecipeInstructions200Response.
        :type equipment: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]
        """
        if equipment is None:
            raise ValueError("Invalid value for `equipment`, must not be `None`")
        if equipment is not None and len(equipment) < 0:
            raise ValueError("Invalid value for `equipment`, number of items must be greater than or equal to `0`")

        self._equipment = equipment

    @property
    def ingredients(self):
        """Gets the ingredients of this AnalyzeRecipeInstructions200Response.


        :return: The ingredients of this AnalyzeRecipeInstructions200Response.
        :rtype: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this AnalyzeRecipeInstructions200Response.


        :param ingredients: The ingredients of this AnalyzeRecipeInstructions200Response.
        :type ingredients: list[AnalyzeRecipeInstructions200ResponseEquipmentInner]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients

    @property
    def parsed_instructions(self):
        """Gets the parsed_instructions of this AnalyzeRecipeInstructions200Response.


        :return: The parsed_instructions of this AnalyzeRecipeInstructions200Response.
        :rtype: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInner]
        """
        return self._parsed_instructions

    @parsed_instructions.setter
    def parsed_instructions(self, parsed_instructions):
        """Sets the parsed_instructions of this AnalyzeRecipeInstructions200Response.


        :param parsed_instructions: The parsed_instructions of this AnalyzeRecipeInstructions200Response.
        :type parsed_instructions: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInner]
        """
        if parsed_instructions is None:
            raise ValueError("Invalid value for `parsed_instructions`, must not be `None`")
        if parsed_instructions is not None and len(parsed_instructions) < 0:
            raise ValueError("Invalid value for `parsed_instructions`, number of items must be greater than or equal to `0`")

        self._parsed_instructions = parsed_instructions
