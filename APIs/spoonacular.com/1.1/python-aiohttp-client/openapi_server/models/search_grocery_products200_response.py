# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_grocery_products200_response_products_inner import SearchGroceryProducts200ResponseProductsInner
from openapi_server import util


class SearchGroceryProducts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: int=None, offset: int=None, products: list[SearchGroceryProducts200ResponseProductsInner]=None, total_products: int=None, type: str=None):
        """SearchGroceryProducts200Response - a model defined in OpenAPI

        :param number: The number of this SearchGroceryProducts200Response.
        :param offset: The offset of this SearchGroceryProducts200Response.
        :param products: The products of this SearchGroceryProducts200Response.
        :param total_products: The total_products of this SearchGroceryProducts200Response.
        :param type: The type of this SearchGroceryProducts200Response.
        """
        self.openapi_types = {
            'number': int,
            'offset': int,
            'products': list[SearchGroceryProducts200ResponseProductsInner],
            'total_products': int,
            'type': str
        }

        self.attribute_map = {
            'number': 'number',
            'offset': 'offset',
            'products': 'products',
            'total_products': 'totalProducts',
            'type': 'type'
        }

        self._number = number
        self._offset = offset
        self._products = products
        self._total_products = total_products
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGroceryProducts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchGroceryProducts_200_response of this SearchGroceryProducts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this SearchGroceryProducts200Response.


        :return: The number of this SearchGroceryProducts200Response.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SearchGroceryProducts200Response.


        :param number: The number of this SearchGroceryProducts200Response.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def offset(self):
        """Gets the offset of this SearchGroceryProducts200Response.


        :return: The offset of this SearchGroceryProducts200Response.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchGroceryProducts200Response.


        :param offset: The offset of this SearchGroceryProducts200Response.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def products(self):
        """Gets the products of this SearchGroceryProducts200Response.


        :return: The products of this SearchGroceryProducts200Response.
        :rtype: list[SearchGroceryProducts200ResponseProductsInner]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this SearchGroceryProducts200Response.


        :param products: The products of this SearchGroceryProducts200Response.
        :type products: list[SearchGroceryProducts200ResponseProductsInner]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")
        if products is not None and len(products) < 0:
            raise ValueError("Invalid value for `products`, number of items must be greater than or equal to `0`")

        self._products = products

    @property
    def total_products(self):
        """Gets the total_products of this SearchGroceryProducts200Response.


        :return: The total_products of this SearchGroceryProducts200Response.
        :rtype: int
        """
        return self._total_products

    @total_products.setter
    def total_products(self, total_products):
        """Sets the total_products of this SearchGroceryProducts200Response.


        :param total_products: The total_products of this SearchGroceryProducts200Response.
        :type total_products: int
        """
        if total_products is None:
            raise ValueError("Invalid value for `total_products`, must not be `None`")

        self._total_products = total_products

    @property
    def type(self):
        """Gets the type of this SearchGroceryProducts200Response.


        :return: The type of this SearchGroceryProducts200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchGroceryProducts200Response.


        :param type: The type of this SearchGroceryProducts200Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type
