# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutocompleteIngredientSearch200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, id: int=None, image: str=None, name: str=None, possible_units: List[str]=None):
        """AutocompleteIngredientSearch200ResponseInner - a model defined in OpenAPI

        :param aisle: The aisle of this AutocompleteIngredientSearch200ResponseInner.
        :param id: The id of this AutocompleteIngredientSearch200ResponseInner.
        :param image: The image of this AutocompleteIngredientSearch200ResponseInner.
        :param name: The name of this AutocompleteIngredientSearch200ResponseInner.
        :param possible_units: The possible_units of this AutocompleteIngredientSearch200ResponseInner.
        """
        self.openapi_types = {
            'aisle': str,
            'id': int,
            'image': str,
            'name': str,
            'possible_units': List[str]
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'id': 'id',
            'image': 'image',
            'name': 'name',
            'possible_units': 'possibleUnits'
        }

        self._aisle = aisle
        self._id = id
        self._image = image
        self._name = name
        self._possible_units = possible_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutocompleteIngredientSearch200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The autocompleteIngredientSearch_200_response_inner of this AutocompleteIngredientSearch200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this AutocompleteIngredientSearch200ResponseInner.


        :return: The aisle of this AutocompleteIngredientSearch200ResponseInner.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this AutocompleteIngredientSearch200ResponseInner.


        :param aisle: The aisle of this AutocompleteIngredientSearch200ResponseInner.
        :type aisle: str
        """
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def id(self):
        """Gets the id of this AutocompleteIngredientSearch200ResponseInner.


        :return: The id of this AutocompleteIngredientSearch200ResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutocompleteIngredientSearch200ResponseInner.


        :param id: The id of this AutocompleteIngredientSearch200ResponseInner.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this AutocompleteIngredientSearch200ResponseInner.


        :return: The image of this AutocompleteIngredientSearch200ResponseInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AutocompleteIngredientSearch200ResponseInner.


        :param image: The image of this AutocompleteIngredientSearch200ResponseInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def name(self):
        """Gets the name of this AutocompleteIngredientSearch200ResponseInner.


        :return: The name of this AutocompleteIngredientSearch200ResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutocompleteIngredientSearch200ResponseInner.


        :param name: The name of this AutocompleteIngredientSearch200ResponseInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def possible_units(self):
        """Gets the possible_units of this AutocompleteIngredientSearch200ResponseInner.


        :return: The possible_units of this AutocompleteIngredientSearch200ResponseInner.
        :rtype: List[str]
        """
        return self._possible_units

    @possible_units.setter
    def possible_units(self, possible_units):
        """Sets the possible_units of this AutocompleteIngredientSearch200ResponseInner.


        :param possible_units: The possible_units of this AutocompleteIngredientSearch200ResponseInner.
        :type possible_units: List[str]
        """

        self._possible_units = possible_units
