# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detect_food_in_text200_response_annotations_inner import DetectFoodInText200ResponseAnnotationsInner
from openapi_server import util


class DetectFoodInText200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: list[DetectFoodInText200ResponseAnnotationsInner]=None):
        """DetectFoodInText200Response - a model defined in OpenAPI

        :param annotations: The annotations of this DetectFoodInText200Response.
        """
        self.openapi_types = {
            'annotations': list[DetectFoodInText200ResponseAnnotationsInner]
        }

        self.attribute_map = {
            'annotations': 'annotations'
        }

        self._annotations = annotations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectFoodInText200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The detectFoodInText_200_response of this DetectFoodInText200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this DetectFoodInText200Response.


        :return: The annotations of this DetectFoodInText200Response.
        :rtype: list[DetectFoodInText200ResponseAnnotationsInner]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this DetectFoodInText200Response.


        :param annotations: The annotations of this DetectFoodInText200Response.
        :type annotations: list[DetectFoodInText200ResponseAnnotationsInner]
        """
        if annotations is None:
            raise ValueError("Invalid value for `annotations`, must not be `None`")
        if annotations is not None and len(annotations) < 0:
            raise ValueError("Invalid value for `annotations`, number of items must be greater than or equal to `0`")

        self._annotations = annotations
