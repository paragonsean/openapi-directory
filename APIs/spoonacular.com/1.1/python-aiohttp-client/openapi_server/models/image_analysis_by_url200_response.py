# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_analysis_by_url200_response_category import ImageAnalysisByURL200ResponseCategory
from openapi_server.models.image_analysis_by_url200_response_nutrition import ImageAnalysisByURL200ResponseNutrition
from openapi_server.models.image_analysis_by_url200_response_recipes_inner import ImageAnalysisByURL200ResponseRecipesInner
from openapi_server import util


class ImageAnalysisByURL200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: ImageAnalysisByURL200ResponseCategory=None, nutrition: ImageAnalysisByURL200ResponseNutrition=None, recipes: list[ImageAnalysisByURL200ResponseRecipesInner]=None):
        """ImageAnalysisByURL200Response - a model defined in OpenAPI

        :param category: The category of this ImageAnalysisByURL200Response.
        :param nutrition: The nutrition of this ImageAnalysisByURL200Response.
        :param recipes: The recipes of this ImageAnalysisByURL200Response.
        """
        self.openapi_types = {
            'category': ImageAnalysisByURL200ResponseCategory,
            'nutrition': ImageAnalysisByURL200ResponseNutrition,
            'recipes': list[ImageAnalysisByURL200ResponseRecipesInner]
        }

        self.attribute_map = {
            'category': 'category',
            'nutrition': 'nutrition',
            'recipes': 'recipes'
        }

        self._category = category
        self._nutrition = nutrition
        self._recipes = recipes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnalysisByURL200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imageAnalysisByURL_200_response of this ImageAnalysisByURL200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ImageAnalysisByURL200Response.


        :return: The category of this ImageAnalysisByURL200Response.
        :rtype: ImageAnalysisByURL200ResponseCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ImageAnalysisByURL200Response.


        :param category: The category of this ImageAnalysisByURL200Response.
        :type category: ImageAnalysisByURL200ResponseCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def nutrition(self):
        """Gets the nutrition of this ImageAnalysisByURL200Response.


        :return: The nutrition of this ImageAnalysisByURL200Response.
        :rtype: ImageAnalysisByURL200ResponseNutrition
        """
        return self._nutrition

    @nutrition.setter
    def nutrition(self, nutrition):
        """Sets the nutrition of this ImageAnalysisByURL200Response.


        :param nutrition: The nutrition of this ImageAnalysisByURL200Response.
        :type nutrition: ImageAnalysisByURL200ResponseNutrition
        """
        if nutrition is None:
            raise ValueError("Invalid value for `nutrition`, must not be `None`")

        self._nutrition = nutrition

    @property
    def recipes(self):
        """Gets the recipes of this ImageAnalysisByURL200Response.


        :return: The recipes of this ImageAnalysisByURL200Response.
        :rtype: list[ImageAnalysisByURL200ResponseRecipesInner]
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this ImageAnalysisByURL200Response.


        :param recipes: The recipes of this ImageAnalysisByURL200Response.
        :type recipes: list[ImageAnalysisByURL200ResponseRecipesInner]
        """
        if recipes is None:
            raise ValueError("Invalid value for `recipes`, must not be `None`")
        if recipes is not None and len(recipes) < 0:
            raise ValueError("Invalid value for `recipes`, number of items must be greater than or equal to `0`")

        self._recipes = recipes
