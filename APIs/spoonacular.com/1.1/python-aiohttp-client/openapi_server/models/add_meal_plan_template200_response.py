# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_meal_plan_template200_response_items_inner import AddMealPlanTemplate200ResponseItemsInner
from openapi_server import util


class AddMealPlanTemplate200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: list[AddMealPlanTemplate200ResponseItemsInner]=None, name: str=None, publish_as_public: bool=None):
        """AddMealPlanTemplate200Response - a model defined in OpenAPI

        :param items: The items of this AddMealPlanTemplate200Response.
        :param name: The name of this AddMealPlanTemplate200Response.
        :param publish_as_public: The publish_as_public of this AddMealPlanTemplate200Response.
        """
        self.openapi_types = {
            'items': list[AddMealPlanTemplate200ResponseItemsInner],
            'name': str,
            'publish_as_public': bool
        }

        self.attribute_map = {
            'items': 'items',
            'name': 'name',
            'publish_as_public': 'publishAsPublic'
        }

        self._items = items
        self._name = name
        self._publish_as_public = publish_as_public

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddMealPlanTemplate200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addMealPlanTemplate_200_response of this AddMealPlanTemplate200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this AddMealPlanTemplate200Response.


        :return: The items of this AddMealPlanTemplate200Response.
        :rtype: list[AddMealPlanTemplate200ResponseItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this AddMealPlanTemplate200Response.


        :param items: The items of this AddMealPlanTemplate200Response.
        :type items: list[AddMealPlanTemplate200ResponseItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def name(self):
        """Gets the name of this AddMealPlanTemplate200Response.


        :return: The name of this AddMealPlanTemplate200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddMealPlanTemplate200Response.


        :param name: The name of this AddMealPlanTemplate200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def publish_as_public(self):
        """Gets the publish_as_public of this AddMealPlanTemplate200Response.


        :return: The publish_as_public of this AddMealPlanTemplate200Response.
        :rtype: bool
        """
        return self._publish_as_public

    @publish_as_public.setter
    def publish_as_public(self, publish_as_public):
        """Sets the publish_as_public of this AddMealPlanTemplate200Response.


        :param publish_as_public: The publish_as_public of this AddMealPlanTemplate200Response.
        :type publish_as_public: bool
        """
        if publish_as_public is None:
            raise ValueError("Invalid value for `publish_as_public`, must not be `None`")

        self._publish_as_public = publish_as_public
