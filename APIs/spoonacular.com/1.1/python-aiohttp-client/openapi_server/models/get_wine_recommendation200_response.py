# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_wine_recommendation200_response_recommended_wines_inner import GetWineRecommendation200ResponseRecommendedWinesInner
from openapi_server import util


class GetWineRecommendation200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommended_wines: list[GetWineRecommendation200ResponseRecommendedWinesInner]=None, total_found: int=None):
        """GetWineRecommendation200Response - a model defined in OpenAPI

        :param recommended_wines: The recommended_wines of this GetWineRecommendation200Response.
        :param total_found: The total_found of this GetWineRecommendation200Response.
        """
        self.openapi_types = {
            'recommended_wines': list[GetWineRecommendation200ResponseRecommendedWinesInner],
            'total_found': int
        }

        self.attribute_map = {
            'recommended_wines': 'recommendedWines',
            'total_found': 'totalFound'
        }

        self._recommended_wines = recommended_wines
        self._total_found = total_found

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWineRecommendation200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getWineRecommendation_200_response of this GetWineRecommendation200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommended_wines(self):
        """Gets the recommended_wines of this GetWineRecommendation200Response.


        :return: The recommended_wines of this GetWineRecommendation200Response.
        :rtype: list[GetWineRecommendation200ResponseRecommendedWinesInner]
        """
        return self._recommended_wines

    @recommended_wines.setter
    def recommended_wines(self, recommended_wines):
        """Sets the recommended_wines of this GetWineRecommendation200Response.


        :param recommended_wines: The recommended_wines of this GetWineRecommendation200Response.
        :type recommended_wines: list[GetWineRecommendation200ResponseRecommendedWinesInner]
        """
        if recommended_wines is None:
            raise ValueError("Invalid value for `recommended_wines`, must not be `None`")
        if recommended_wines is not None and len(recommended_wines) < 0:
            raise ValueError("Invalid value for `recommended_wines`, number of items must be greater than or equal to `0`")

        self._recommended_wines = recommended_wines

    @property
    def total_found(self):
        """Gets the total_found of this GetWineRecommendation200Response.


        :return: The total_found of this GetWineRecommendation200Response.
        :rtype: int
        """
        return self._total_found

    @total_found.setter
    def total_found(self, total_found):
        """Sets the total_found of this GetWineRecommendation200Response.


        :param total_found: The total_found of this GetWineRecommendation200Response.
        :type total_found: int
        """
        if total_found is None:
            raise ValueError("Invalid value for `total_found`, must not be `None`")

        self._total_found = total_found
