# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_recipes_by_ingredients200_response_inner_missed_ingredients_inner import SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
from openapi_server import util


class SearchRecipesByIngredients200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, image: str=None, image_type: str=None, likes: int=None, missed_ingredient_count: int=None, missed_ingredients: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]=None, title: str=None, unused_ingredients: List[object]=None, used_ingredient_count: float=None, used_ingredients: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]=None):
        """SearchRecipesByIngredients200ResponseInner - a model defined in OpenAPI

        :param id: The id of this SearchRecipesByIngredients200ResponseInner.
        :param image: The image of this SearchRecipesByIngredients200ResponseInner.
        :param image_type: The image_type of this SearchRecipesByIngredients200ResponseInner.
        :param likes: The likes of this SearchRecipesByIngredients200ResponseInner.
        :param missed_ingredient_count: The missed_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :param missed_ingredients: The missed_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :param title: The title of this SearchRecipesByIngredients200ResponseInner.
        :param unused_ingredients: The unused_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :param used_ingredient_count: The used_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :param used_ingredients: The used_ingredients of this SearchRecipesByIngredients200ResponseInner.
        """
        self.openapi_types = {
            'id': int,
            'image': str,
            'image_type': str,
            'likes': int,
            'missed_ingredient_count': int,
            'missed_ingredients': list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner],
            'title': str,
            'unused_ingredients': List[object],
            'used_ingredient_count': float,
            'used_ingredients': list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'image_type': 'imageType',
            'likes': 'likes',
            'missed_ingredient_count': 'missedIngredientCount',
            'missed_ingredients': 'missedIngredients',
            'title': 'title',
            'unused_ingredients': 'unusedIngredients',
            'used_ingredient_count': 'usedIngredientCount',
            'used_ingredients': 'usedIngredients'
        }

        self._id = id
        self._image = image
        self._image_type = image_type
        self._likes = likes
        self._missed_ingredient_count = missed_ingredient_count
        self._missed_ingredients = missed_ingredients
        self._title = title
        self._unused_ingredients = unused_ingredients
        self._used_ingredient_count = used_ingredient_count
        self._used_ingredients = used_ingredients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRecipesByIngredients200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchRecipesByIngredients_200_response_inner of this SearchRecipesByIngredients200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SearchRecipesByIngredients200ResponseInner.


        :return: The id of this SearchRecipesByIngredients200ResponseInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchRecipesByIngredients200ResponseInner.


        :param id: The id of this SearchRecipesByIngredients200ResponseInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this SearchRecipesByIngredients200ResponseInner.


        :return: The image of this SearchRecipesByIngredients200ResponseInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchRecipesByIngredients200ResponseInner.


        :param image: The image of this SearchRecipesByIngredients200ResponseInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def image_type(self):
        """Gets the image_type of this SearchRecipesByIngredients200ResponseInner.


        :return: The image_type of this SearchRecipesByIngredients200ResponseInner.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this SearchRecipesByIngredients200ResponseInner.


        :param image_type: The image_type of this SearchRecipesByIngredients200ResponseInner.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")
        if image_type is not None and len(image_type) < 1:
            raise ValueError("Invalid value for `image_type`, length must be greater than or equal to `1`")

        self._image_type = image_type

    @property
    def likes(self):
        """Gets the likes of this SearchRecipesByIngredients200ResponseInner.


        :return: The likes of this SearchRecipesByIngredients200ResponseInner.
        :rtype: int
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this SearchRecipesByIngredients200ResponseInner.


        :param likes: The likes of this SearchRecipesByIngredients200ResponseInner.
        :type likes: int
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def missed_ingredient_count(self):
        """Gets the missed_ingredient_count of this SearchRecipesByIngredients200ResponseInner.


        :return: The missed_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :rtype: int
        """
        return self._missed_ingredient_count

    @missed_ingredient_count.setter
    def missed_ingredient_count(self, missed_ingredient_count):
        """Sets the missed_ingredient_count of this SearchRecipesByIngredients200ResponseInner.


        :param missed_ingredient_count: The missed_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :type missed_ingredient_count: int
        """
        if missed_ingredient_count is None:
            raise ValueError("Invalid value for `missed_ingredient_count`, must not be `None`")

        self._missed_ingredient_count = missed_ingredient_count

    @property
    def missed_ingredients(self):
        """Gets the missed_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :return: The missed_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :rtype: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]
        """
        return self._missed_ingredients

    @missed_ingredients.setter
    def missed_ingredients(self, missed_ingredients):
        """Sets the missed_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :param missed_ingredients: The missed_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :type missed_ingredients: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]
        """
        if missed_ingredients is None:
            raise ValueError("Invalid value for `missed_ingredients`, must not be `None`")
        if missed_ingredients is not None and len(missed_ingredients) < 0:
            raise ValueError("Invalid value for `missed_ingredients`, number of items must be greater than or equal to `0`")

        self._missed_ingredients = missed_ingredients

    @property
    def title(self):
        """Gets the title of this SearchRecipesByIngredients200ResponseInner.


        :return: The title of this SearchRecipesByIngredients200ResponseInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchRecipesByIngredients200ResponseInner.


        :param title: The title of this SearchRecipesByIngredients200ResponseInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def unused_ingredients(self):
        """Gets the unused_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :return: The unused_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :rtype: List[object]
        """
        return self._unused_ingredients

    @unused_ingredients.setter
    def unused_ingredients(self, unused_ingredients):
        """Sets the unused_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :param unused_ingredients: The unused_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :type unused_ingredients: List[object]
        """
        if unused_ingredients is None:
            raise ValueError("Invalid value for `unused_ingredients`, must not be `None`")
        if unused_ingredients is not None and len(unused_ingredients) < 0:
            raise ValueError("Invalid value for `unused_ingredients`, number of items must be greater than or equal to `0`")

        self._unused_ingredients = unused_ingredients

    @property
    def used_ingredient_count(self):
        """Gets the used_ingredient_count of this SearchRecipesByIngredients200ResponseInner.


        :return: The used_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :rtype: float
        """
        return self._used_ingredient_count

    @used_ingredient_count.setter
    def used_ingredient_count(self, used_ingredient_count):
        """Sets the used_ingredient_count of this SearchRecipesByIngredients200ResponseInner.


        :param used_ingredient_count: The used_ingredient_count of this SearchRecipesByIngredients200ResponseInner.
        :type used_ingredient_count: float
        """
        if used_ingredient_count is None:
            raise ValueError("Invalid value for `used_ingredient_count`, must not be `None`")

        self._used_ingredient_count = used_ingredient_count

    @property
    def used_ingredients(self):
        """Gets the used_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :return: The used_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :rtype: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]
        """
        return self._used_ingredients

    @used_ingredients.setter
    def used_ingredients(self, used_ingredients):
        """Sets the used_ingredients of this SearchRecipesByIngredients200ResponseInner.


        :param used_ingredients: The used_ingredients of this SearchRecipesByIngredients200ResponseInner.
        :type used_ingredients: list[SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner]
        """
        if used_ingredients is None:
            raise ValueError("Invalid value for `used_ingredients`, must not be `None`")
        if used_ingredients is not None and len(used_ingredients) < 0:
            raise ValueError("Invalid value for `used_ingredients`, number of items must be greater than or equal to `0`")

        self._used_ingredients = used_ingredients
