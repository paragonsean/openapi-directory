# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_custom_foods200_response_custom_foods_inner import SearchCustomFoods200ResponseCustomFoodsInner
from openapi_server import util


class SearchCustomFoods200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_foods: list[SearchCustomFoods200ResponseCustomFoodsInner]=None, number: int=None, offset: int=None, type: str=None):
        """SearchCustomFoods200Response - a model defined in OpenAPI

        :param custom_foods: The custom_foods of this SearchCustomFoods200Response.
        :param number: The number of this SearchCustomFoods200Response.
        :param offset: The offset of this SearchCustomFoods200Response.
        :param type: The type of this SearchCustomFoods200Response.
        """
        self.openapi_types = {
            'custom_foods': list[SearchCustomFoods200ResponseCustomFoodsInner],
            'number': int,
            'offset': int,
            'type': str
        }

        self.attribute_map = {
            'custom_foods': 'customFoods',
            'number': 'number',
            'offset': 'offset',
            'type': 'type'
        }

        self._custom_foods = custom_foods
        self._number = number
        self._offset = offset
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchCustomFoods200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchCustomFoods_200_response of this SearchCustomFoods200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_foods(self):
        """Gets the custom_foods of this SearchCustomFoods200Response.


        :return: The custom_foods of this SearchCustomFoods200Response.
        :rtype: list[SearchCustomFoods200ResponseCustomFoodsInner]
        """
        return self._custom_foods

    @custom_foods.setter
    def custom_foods(self, custom_foods):
        """Sets the custom_foods of this SearchCustomFoods200Response.


        :param custom_foods: The custom_foods of this SearchCustomFoods200Response.
        :type custom_foods: list[SearchCustomFoods200ResponseCustomFoodsInner]
        """
        if custom_foods is None:
            raise ValueError("Invalid value for `custom_foods`, must not be `None`")
        if custom_foods is not None and len(custom_foods) < 0:
            raise ValueError("Invalid value for `custom_foods`, number of items must be greater than or equal to `0`")

        self._custom_foods = custom_foods

    @property
    def number(self):
        """Gets the number of this SearchCustomFoods200Response.


        :return: The number of this SearchCustomFoods200Response.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SearchCustomFoods200Response.


        :param number: The number of this SearchCustomFoods200Response.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def offset(self):
        """Gets the offset of this SearchCustomFoods200Response.


        :return: The offset of this SearchCustomFoods200Response.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchCustomFoods200Response.


        :param offset: The offset of this SearchCustomFoods200Response.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def type(self):
        """Gets the type of this SearchCustomFoods200Response.


        :return: The type of this SearchCustomFoods200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchCustomFoods200Response.


        :param type: The type of this SearchCustomFoods200Response.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type
