# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRecipeTasteByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitterness: float=None, fattiness: float=None, saltiness: float=None, savoriness: float=None, sourness: float=None, spiciness: float=None, sweetness: float=None):
        """GetRecipeTasteByID200Response - a model defined in OpenAPI

        :param bitterness: The bitterness of this GetRecipeTasteByID200Response.
        :param fattiness: The fattiness of this GetRecipeTasteByID200Response.
        :param saltiness: The saltiness of this GetRecipeTasteByID200Response.
        :param savoriness: The savoriness of this GetRecipeTasteByID200Response.
        :param sourness: The sourness of this GetRecipeTasteByID200Response.
        :param spiciness: The spiciness of this GetRecipeTasteByID200Response.
        :param sweetness: The sweetness of this GetRecipeTasteByID200Response.
        """
        self.openapi_types = {
            'bitterness': float,
            'fattiness': float,
            'saltiness': float,
            'savoriness': float,
            'sourness': float,
            'spiciness': float,
            'sweetness': float
        }

        self.attribute_map = {
            'bitterness': 'bitterness',
            'fattiness': 'fattiness',
            'saltiness': 'saltiness',
            'savoriness': 'savoriness',
            'sourness': 'sourness',
            'spiciness': 'spiciness',
            'sweetness': 'sweetness'
        }

        self._bitterness = bitterness
        self._fattiness = fattiness
        self._saltiness = saltiness
        self._savoriness = savoriness
        self._sourness = sourness
        self._spiciness = spiciness
        self._sweetness = sweetness

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeTasteByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeTasteByID_200_response of this GetRecipeTasteByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitterness(self):
        """Gets the bitterness of this GetRecipeTasteByID200Response.


        :return: The bitterness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._bitterness

    @bitterness.setter
    def bitterness(self, bitterness):
        """Sets the bitterness of this GetRecipeTasteByID200Response.


        :param bitterness: The bitterness of this GetRecipeTasteByID200Response.
        :type bitterness: float
        """
        if bitterness is None:
            raise ValueError("Invalid value for `bitterness`, must not be `None`")

        self._bitterness = bitterness

    @property
    def fattiness(self):
        """Gets the fattiness of this GetRecipeTasteByID200Response.


        :return: The fattiness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._fattiness

    @fattiness.setter
    def fattiness(self, fattiness):
        """Sets the fattiness of this GetRecipeTasteByID200Response.


        :param fattiness: The fattiness of this GetRecipeTasteByID200Response.
        :type fattiness: float
        """
        if fattiness is None:
            raise ValueError("Invalid value for `fattiness`, must not be `None`")

        self._fattiness = fattiness

    @property
    def saltiness(self):
        """Gets the saltiness of this GetRecipeTasteByID200Response.


        :return: The saltiness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._saltiness

    @saltiness.setter
    def saltiness(self, saltiness):
        """Sets the saltiness of this GetRecipeTasteByID200Response.


        :param saltiness: The saltiness of this GetRecipeTasteByID200Response.
        :type saltiness: float
        """
        if saltiness is None:
            raise ValueError("Invalid value for `saltiness`, must not be `None`")

        self._saltiness = saltiness

    @property
    def savoriness(self):
        """Gets the savoriness of this GetRecipeTasteByID200Response.


        :return: The savoriness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._savoriness

    @savoriness.setter
    def savoriness(self, savoriness):
        """Sets the savoriness of this GetRecipeTasteByID200Response.


        :param savoriness: The savoriness of this GetRecipeTasteByID200Response.
        :type savoriness: float
        """
        if savoriness is None:
            raise ValueError("Invalid value for `savoriness`, must not be `None`")

        self._savoriness = savoriness

    @property
    def sourness(self):
        """Gets the sourness of this GetRecipeTasteByID200Response.


        :return: The sourness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._sourness

    @sourness.setter
    def sourness(self, sourness):
        """Sets the sourness of this GetRecipeTasteByID200Response.


        :param sourness: The sourness of this GetRecipeTasteByID200Response.
        :type sourness: float
        """
        if sourness is None:
            raise ValueError("Invalid value for `sourness`, must not be `None`")

        self._sourness = sourness

    @property
    def spiciness(self):
        """Gets the spiciness of this GetRecipeTasteByID200Response.


        :return: The spiciness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._spiciness

    @spiciness.setter
    def spiciness(self, spiciness):
        """Sets the spiciness of this GetRecipeTasteByID200Response.


        :param spiciness: The spiciness of this GetRecipeTasteByID200Response.
        :type spiciness: float
        """
        if spiciness is None:
            raise ValueError("Invalid value for `spiciness`, must not be `None`")

        self._spiciness = spiciness

    @property
    def sweetness(self):
        """Gets the sweetness of this GetRecipeTasteByID200Response.


        :return: The sweetness of this GetRecipeTasteByID200Response.
        :rtype: float
        """
        return self._sweetness

    @sweetness.setter
    def sweetness(self, sweetness):
        """Sets the sweetness of this GetRecipeTasteByID200Response.


        :param sweetness: The sweetness of this GetRecipeTasteByID200Response.
        :type sweetness: float
        """
        if sweetness is None:
            raise ValueError("Invalid value for `sweetness`, must not be `None`")

        self._sweetness = sweetness
