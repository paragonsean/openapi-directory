# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map_ingredients_to_grocery_products200_response_inner_products_inner import MapIngredientsToGroceryProducts200ResponseInnerProductsInner
from openapi_server import util


class MapIngredientsToGroceryProducts200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredient_image: str=None, meta: List[str]=None, original: str=None, original_name: str=None, products: list[MapIngredientsToGroceryProducts200ResponseInnerProductsInner]=None):
        """MapIngredientsToGroceryProducts200ResponseInner - a model defined in OpenAPI

        :param ingredient_image: The ingredient_image of this MapIngredientsToGroceryProducts200ResponseInner.
        :param meta: The meta of this MapIngredientsToGroceryProducts200ResponseInner.
        :param original: The original of this MapIngredientsToGroceryProducts200ResponseInner.
        :param original_name: The original_name of this MapIngredientsToGroceryProducts200ResponseInner.
        :param products: The products of this MapIngredientsToGroceryProducts200ResponseInner.
        """
        self.openapi_types = {
            'ingredient_image': str,
            'meta': List[str],
            'original': str,
            'original_name': str,
            'products': list[MapIngredientsToGroceryProducts200ResponseInnerProductsInner]
        }

        self.attribute_map = {
            'ingredient_image': 'ingredientImage',
            'meta': 'meta',
            'original': 'original',
            'original_name': 'originalName',
            'products': 'products'
        }

        self._ingredient_image = ingredient_image
        self._meta = meta
        self._original = original
        self._original_name = original_name
        self._products = products

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MapIngredientsToGroceryProducts200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mapIngredientsToGroceryProducts_200_response_inner of this MapIngredientsToGroceryProducts200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredient_image(self):
        """Gets the ingredient_image of this MapIngredientsToGroceryProducts200ResponseInner.


        :return: The ingredient_image of this MapIngredientsToGroceryProducts200ResponseInner.
        :rtype: str
        """
        return self._ingredient_image

    @ingredient_image.setter
    def ingredient_image(self, ingredient_image):
        """Sets the ingredient_image of this MapIngredientsToGroceryProducts200ResponseInner.


        :param ingredient_image: The ingredient_image of this MapIngredientsToGroceryProducts200ResponseInner.
        :type ingredient_image: str
        """
        if ingredient_image is None:
            raise ValueError("Invalid value for `ingredient_image`, must not be `None`")
        if ingredient_image is not None and len(ingredient_image) < 1:
            raise ValueError("Invalid value for `ingredient_image`, length must be greater than or equal to `1`")

        self._ingredient_image = ingredient_image

    @property
    def meta(self):
        """Gets the meta of this MapIngredientsToGroceryProducts200ResponseInner.


        :return: The meta of this MapIngredientsToGroceryProducts200ResponseInner.
        :rtype: List[str]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this MapIngredientsToGroceryProducts200ResponseInner.


        :param meta: The meta of this MapIngredientsToGroceryProducts200ResponseInner.
        :type meta: List[str]
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta

    @property
    def original(self):
        """Gets the original of this MapIngredientsToGroceryProducts200ResponseInner.


        :return: The original of this MapIngredientsToGroceryProducts200ResponseInner.
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this MapIngredientsToGroceryProducts200ResponseInner.


        :param original: The original of this MapIngredientsToGroceryProducts200ResponseInner.
        :type original: str
        """
        if original is None:
            raise ValueError("Invalid value for `original`, must not be `None`")
        if original is not None and len(original) < 1:
            raise ValueError("Invalid value for `original`, length must be greater than or equal to `1`")

        self._original = original

    @property
    def original_name(self):
        """Gets the original_name of this MapIngredientsToGroceryProducts200ResponseInner.


        :return: The original_name of this MapIngredientsToGroceryProducts200ResponseInner.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this MapIngredientsToGroceryProducts200ResponseInner.


        :param original_name: The original_name of this MapIngredientsToGroceryProducts200ResponseInner.
        :type original_name: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")
        if original_name is not None and len(original_name) < 1:
            raise ValueError("Invalid value for `original_name`, length must be greater than or equal to `1`")

        self._original_name = original_name

    @property
    def products(self):
        """Gets the products of this MapIngredientsToGroceryProducts200ResponseInner.


        :return: The products of this MapIngredientsToGroceryProducts200ResponseInner.
        :rtype: list[MapIngredientsToGroceryProducts200ResponseInnerProductsInner]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this MapIngredientsToGroceryProducts200ResponseInner.


        :param products: The products of this MapIngredientsToGroceryProducts200ResponseInner.
        :type products: list[MapIngredientsToGroceryProducts200ResponseInnerProductsInner]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")
        if products is not None and len(products) < 0:
            raise ValueError("Invalid value for `products`, number of items must be greater than or equal to `0`")

        self._products = products
