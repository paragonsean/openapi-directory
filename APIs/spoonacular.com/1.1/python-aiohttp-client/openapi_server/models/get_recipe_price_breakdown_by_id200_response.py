# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_recipe_price_breakdown_by_id200_response_ingredients_inner import GetRecipePriceBreakdownByID200ResponseIngredientsInner
from openapi_server import util


class GetRecipePriceBreakdownByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: list[GetRecipePriceBreakdownByID200ResponseIngredientsInner]=None, total_cost: float=None, total_cost_per_serving: float=None):
        """GetRecipePriceBreakdownByID200Response - a model defined in OpenAPI

        :param ingredients: The ingredients of this GetRecipePriceBreakdownByID200Response.
        :param total_cost: The total_cost of this GetRecipePriceBreakdownByID200Response.
        :param total_cost_per_serving: The total_cost_per_serving of this GetRecipePriceBreakdownByID200Response.
        """
        self.openapi_types = {
            'ingredients': list[GetRecipePriceBreakdownByID200ResponseIngredientsInner],
            'total_cost': float,
            'total_cost_per_serving': float
        }

        self.attribute_map = {
            'ingredients': 'ingredients',
            'total_cost': 'totalCost',
            'total_cost_per_serving': 'totalCostPerServing'
        }

        self._ingredients = ingredients
        self._total_cost = total_cost
        self._total_cost_per_serving = total_cost_per_serving

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipePriceBreakdownByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipePriceBreakdownByID_200_response of this GetRecipePriceBreakdownByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this GetRecipePriceBreakdownByID200Response.


        :return: The ingredients of this GetRecipePriceBreakdownByID200Response.
        :rtype: list[GetRecipePriceBreakdownByID200ResponseIngredientsInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this GetRecipePriceBreakdownByID200Response.


        :param ingredients: The ingredients of this GetRecipePriceBreakdownByID200Response.
        :type ingredients: list[GetRecipePriceBreakdownByID200ResponseIngredientsInner]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients

    @property
    def total_cost(self):
        """Gets the total_cost of this GetRecipePriceBreakdownByID200Response.


        :return: The total_cost of this GetRecipePriceBreakdownByID200Response.
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this GetRecipePriceBreakdownByID200Response.


        :param total_cost: The total_cost of this GetRecipePriceBreakdownByID200Response.
        :type total_cost: float
        """
        if total_cost is None:
            raise ValueError("Invalid value for `total_cost`, must not be `None`")

        self._total_cost = total_cost

    @property
    def total_cost_per_serving(self):
        """Gets the total_cost_per_serving of this GetRecipePriceBreakdownByID200Response.


        :return: The total_cost_per_serving of this GetRecipePriceBreakdownByID200Response.
        :rtype: float
        """
        return self._total_cost_per_serving

    @total_cost_per_serving.setter
    def total_cost_per_serving(self, total_cost_per_serving):
        """Sets the total_cost_per_serving of this GetRecipePriceBreakdownByID200Response.


        :param total_cost_per_serving: The total_cost_per_serving of this GetRecipePriceBreakdownByID200Response.
        :type total_cost_per_serving: float
        """
        if total_cost_per_serving is None:
            raise ValueError("Invalid value for `total_cost_per_serving`, must not be `None`")

        self._total_cost_per_serving = total_cost_per_serving
