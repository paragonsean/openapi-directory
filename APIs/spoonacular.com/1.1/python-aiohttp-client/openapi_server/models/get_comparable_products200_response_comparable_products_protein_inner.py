# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetComparableProducts200ResponseComparableProductsProteinInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, difference: float=None, id: int=None, image: str=None, title: str=None):
        """GetComparableProducts200ResponseComparableProductsProteinInner - a model defined in OpenAPI

        :param difference: The difference of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :param id: The id of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :param image: The image of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :param title: The title of this GetComparableProducts200ResponseComparableProductsProteinInner.
        """
        self.openapi_types = {
            'difference': float,
            'id': int,
            'image': str,
            'title': str
        }

        self.attribute_map = {
            'difference': 'difference',
            'id': 'id',
            'image': 'image',
            'title': 'title'
        }

        self._difference = difference
        self._id = id
        self._image = image
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetComparableProducts200ResponseComparableProductsProteinInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getComparableProducts_200_response_comparableProducts_protein_inner of this GetComparableProducts200ResponseComparableProductsProteinInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def difference(self):
        """Gets the difference of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :return: The difference of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :rtype: float
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :param difference: The difference of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :type difference: float
        """
        if difference is None:
            raise ValueError("Invalid value for `difference`, must not be `None`")

        self._difference = difference

    @property
    def id(self):
        """Gets the id of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :return: The id of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :param id: The id of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :return: The image of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :param image: The image of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def title(self):
        """Gets the title of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :return: The title of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetComparableProducts200ResponseComparableProductsProteinInner.


        :param title: The title of this GetComparableProducts200ResponseComparableProductsProteinInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
