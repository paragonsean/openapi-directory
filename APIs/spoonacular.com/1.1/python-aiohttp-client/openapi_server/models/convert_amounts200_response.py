# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConvertAmounts200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, source_amount: float=None, source_unit: str=None, target_amount: float=None, target_unit: str=None):
        """ConvertAmounts200Response - a model defined in OpenAPI

        :param answer: The answer of this ConvertAmounts200Response.
        :param source_amount: The source_amount of this ConvertAmounts200Response.
        :param source_unit: The source_unit of this ConvertAmounts200Response.
        :param target_amount: The target_amount of this ConvertAmounts200Response.
        :param target_unit: The target_unit of this ConvertAmounts200Response.
        """
        self.openapi_types = {
            'answer': str,
            'source_amount': float,
            'source_unit': str,
            'target_amount': float,
            'target_unit': str
        }

        self.attribute_map = {
            'answer': 'answer',
            'source_amount': 'sourceAmount',
            'source_unit': 'sourceUnit',
            'target_amount': 'targetAmount',
            'target_unit': 'targetUnit'
        }

        self._answer = answer
        self._source_amount = source_amount
        self._source_unit = source_unit
        self._target_amount = target_amount
        self._target_unit = target_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertAmounts200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The convertAmounts_200_response of this ConvertAmounts200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this ConvertAmounts200Response.


        :return: The answer of this ConvertAmounts200Response.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this ConvertAmounts200Response.


        :param answer: The answer of this ConvertAmounts200Response.
        :type answer: str
        """
        if answer is None:
            raise ValueError("Invalid value for `answer`, must not be `None`")
        if answer is not None and len(answer) < 1:
            raise ValueError("Invalid value for `answer`, length must be greater than or equal to `1`")

        self._answer = answer

    @property
    def source_amount(self):
        """Gets the source_amount of this ConvertAmounts200Response.


        :return: The source_amount of this ConvertAmounts200Response.
        :rtype: float
        """
        return self._source_amount

    @source_amount.setter
    def source_amount(self, source_amount):
        """Sets the source_amount of this ConvertAmounts200Response.


        :param source_amount: The source_amount of this ConvertAmounts200Response.
        :type source_amount: float
        """
        if source_amount is None:
            raise ValueError("Invalid value for `source_amount`, must not be `None`")

        self._source_amount = source_amount

    @property
    def source_unit(self):
        """Gets the source_unit of this ConvertAmounts200Response.


        :return: The source_unit of this ConvertAmounts200Response.
        :rtype: str
        """
        return self._source_unit

    @source_unit.setter
    def source_unit(self, source_unit):
        """Sets the source_unit of this ConvertAmounts200Response.


        :param source_unit: The source_unit of this ConvertAmounts200Response.
        :type source_unit: str
        """
        if source_unit is None:
            raise ValueError("Invalid value for `source_unit`, must not be `None`")
        if source_unit is not None and len(source_unit) < 1:
            raise ValueError("Invalid value for `source_unit`, length must be greater than or equal to `1`")

        self._source_unit = source_unit

    @property
    def target_amount(self):
        """Gets the target_amount of this ConvertAmounts200Response.


        :return: The target_amount of this ConvertAmounts200Response.
        :rtype: float
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this ConvertAmounts200Response.


        :param target_amount: The target_amount of this ConvertAmounts200Response.
        :type target_amount: float
        """
        if target_amount is None:
            raise ValueError("Invalid value for `target_amount`, must not be `None`")

        self._target_amount = target_amount

    @property
    def target_unit(self):
        """Gets the target_unit of this ConvertAmounts200Response.


        :return: The target_unit of this ConvertAmounts200Response.
        :rtype: str
        """
        return self._target_unit

    @target_unit.setter
    def target_unit(self, target_unit):
        """Sets the target_unit of this ConvertAmounts200Response.


        :param target_unit: The target_unit of this ConvertAmounts200Response.
        :type target_unit: str
        """
        if target_unit is None:
            raise ValueError("Invalid value for `target_unit`, must not be `None`")
        if target_unit is not None and len(target_unit) < 1:
            raise ValueError("Invalid value for `target_unit`, length must be greater than or equal to `1`")

        self._target_unit = target_unit
