# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_recipe_instructions200_response_parsed_instructions_inner_steps_inner import AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner
from openapi_server import util


class AnalyzeRecipeInstructions200ResponseParsedInstructionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, steps: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner]=None):
        """AnalyzeRecipeInstructions200ResponseParsedInstructionsInner - a model defined in OpenAPI

        :param name: The name of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        :param steps: The steps of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        """
        self.openapi_types = {
            'name': str,
            'steps': list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner]
        }

        self.attribute_map = {
            'name': 'name',
            'steps': 'steps'
        }

        self._name = name
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeRecipeInstructions200ResponseParsedInstructionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeRecipeInstructions_200_response_parsedInstructions_inner of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.


        :return: The name of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.


        :param name: The name of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def steps(self):
        """Gets the steps of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.


        :return: The steps of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        :rtype: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.


        :param steps: The steps of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInner.
        :type steps: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner]
        """
        if steps is not None and len(steps) < 0:
            raise ValueError("Invalid value for `steps`, number of items must be greater than or equal to `0`")

        self._steps = steps
