# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_recipe_ingredients_by_id200_response_ingredients_inner_amount_metric import GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
from openapi_server import util


class GetRecipeIngredientsByID200ResponseIngredientsInnerAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric=None, us: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric=None):
        """GetRecipeIngredientsByID200ResponseIngredientsInnerAmount - a model defined in OpenAPI

        :param metric: The metric of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        :param us: The us of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        """
        self.openapi_types = {
            'metric': GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric,
            'us': GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
        }

        self.attribute_map = {
            'metric': 'metric',
            'us': 'us'
        }

        self._metric = metric
        self._us = us

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeIngredientsByID200ResponseIngredientsInnerAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeIngredientsByID_200_response_ingredients_inner_amount of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.


        :return: The metric of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        :rtype: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.


        :param metric: The metric of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        :type metric: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def us(self):
        """Gets the us of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.


        :return: The us of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        :rtype: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
        """
        return self._us

    @us.setter
    def us(self, us):
        """Sets the us of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.


        :param us: The us of this GetRecipeIngredientsByID200ResponseIngredientsInnerAmount.
        :type us: GetRecipeIngredientsByID200ResponseIngredientsInnerAmountMetric
        """
        if us is None:
            raise ValueError("Invalid value for `us`, must not be `None`")

        self._us = us
