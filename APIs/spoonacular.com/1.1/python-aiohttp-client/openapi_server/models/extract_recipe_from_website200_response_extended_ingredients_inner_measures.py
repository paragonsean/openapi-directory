# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extract_recipe_from_website200_response_extended_ingredients_inner_measures_metric import ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
from openapi_server import util


class ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric=None, us: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric=None):
        """ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures - a model defined in OpenAPI

        :param metric: The metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        :param us: The us of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        """
        self.openapi_types = {
            'metric': ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric,
            'us': ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
        }

        self.attribute_map = {
            'metric': 'metric',
            'us': 'us'
        }

        self._metric = metric
        self._us = us

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The extractRecipeFromWebsite_200_response_extendedIngredients_inner_measures of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.


        :return: The metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        :rtype: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.


        :param metric: The metric of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        :type metric: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def us(self):
        """Gets the us of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.


        :return: The us of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        :rtype: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
        """
        return self._us

    @us.setter
    def us(self, us):
        """Sets the us of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.


        :param us: The us of this ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasures.
        :type us: ExtractRecipeFromWebsite200ResponseExtendedIngredientsInnerMeasuresMetric
        """
        if us is None:
            raise ValueError("Invalid value for `us`, must not be `None`")

        self._us = us
