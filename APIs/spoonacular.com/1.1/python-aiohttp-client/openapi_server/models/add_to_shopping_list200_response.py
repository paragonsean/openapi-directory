# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_shopping_list200_response_aisles_inner import GetShoppingList200ResponseAislesInner
from openapi_server import util


class AddToShoppingList200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisles: list[GetShoppingList200ResponseAislesInner]=None, cost: float=None, end_date: float=None, start_date: float=None):
        """AddToShoppingList200Response - a model defined in OpenAPI

        :param aisles: The aisles of this AddToShoppingList200Response.
        :param cost: The cost of this AddToShoppingList200Response.
        :param end_date: The end_date of this AddToShoppingList200Response.
        :param start_date: The start_date of this AddToShoppingList200Response.
        """
        self.openapi_types = {
            'aisles': list[GetShoppingList200ResponseAislesInner],
            'cost': float,
            'end_date': float,
            'start_date': float
        }

        self.attribute_map = {
            'aisles': 'aisles',
            'cost': 'cost',
            'end_date': 'endDate',
            'start_date': 'startDate'
        }

        self._aisles = aisles
        self._cost = cost
        self._end_date = end_date
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddToShoppingList200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addToShoppingList_200_response of this AddToShoppingList200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisles(self):
        """Gets the aisles of this AddToShoppingList200Response.


        :return: The aisles of this AddToShoppingList200Response.
        :rtype: list[GetShoppingList200ResponseAislesInner]
        """
        return self._aisles

    @aisles.setter
    def aisles(self, aisles):
        """Sets the aisles of this AddToShoppingList200Response.


        :param aisles: The aisles of this AddToShoppingList200Response.
        :type aisles: list[GetShoppingList200ResponseAislesInner]
        """
        if aisles is None:
            raise ValueError("Invalid value for `aisles`, must not be `None`")
        if aisles is not None and len(aisles) < 0:
            raise ValueError("Invalid value for `aisles`, number of items must be greater than or equal to `0`")

        self._aisles = aisles

    @property
    def cost(self):
        """Gets the cost of this AddToShoppingList200Response.


        :return: The cost of this AddToShoppingList200Response.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AddToShoppingList200Response.


        :param cost: The cost of this AddToShoppingList200Response.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def end_date(self):
        """Gets the end_date of this AddToShoppingList200Response.


        :return: The end_date of this AddToShoppingList200Response.
        :rtype: float
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AddToShoppingList200Response.


        :param end_date: The end_date of this AddToShoppingList200Response.
        :type end_date: float
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this AddToShoppingList200Response.


        :return: The start_date of this AddToShoppingList200Response.
        :rtype: float
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AddToShoppingList200Response.


        :param start_date: The start_date of this AddToShoppingList200Response.
        :type start_date: float
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
