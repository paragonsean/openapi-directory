# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIngredientSubstitutes200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredient: str=None, message: str=None, substitutes: List[str]=None):
        """GetIngredientSubstitutes200Response - a model defined in OpenAPI

        :param ingredient: The ingredient of this GetIngredientSubstitutes200Response.
        :param message: The message of this GetIngredientSubstitutes200Response.
        :param substitutes: The substitutes of this GetIngredientSubstitutes200Response.
        """
        self.openapi_types = {
            'ingredient': str,
            'message': str,
            'substitutes': List[str]
        }

        self.attribute_map = {
            'ingredient': 'ingredient',
            'message': 'message',
            'substitutes': 'substitutes'
        }

        self._ingredient = ingredient
        self._message = message
        self._substitutes = substitutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIngredientSubstitutes200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getIngredientSubstitutes_200_response of this GetIngredientSubstitutes200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredient(self):
        """Gets the ingredient of this GetIngredientSubstitutes200Response.


        :return: The ingredient of this GetIngredientSubstitutes200Response.
        :rtype: str
        """
        return self._ingredient

    @ingredient.setter
    def ingredient(self, ingredient):
        """Sets the ingredient of this GetIngredientSubstitutes200Response.


        :param ingredient: The ingredient of this GetIngredientSubstitutes200Response.
        :type ingredient: str
        """
        if ingredient is None:
            raise ValueError("Invalid value for `ingredient`, must not be `None`")
        if ingredient is not None and len(ingredient) < 1:
            raise ValueError("Invalid value for `ingredient`, length must be greater than or equal to `1`")

        self._ingredient = ingredient

    @property
    def message(self):
        """Gets the message of this GetIngredientSubstitutes200Response.


        :return: The message of this GetIngredientSubstitutes200Response.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GetIngredientSubstitutes200Response.


        :param message: The message of this GetIngredientSubstitutes200Response.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def substitutes(self):
        """Gets the substitutes of this GetIngredientSubstitutes200Response.


        :return: The substitutes of this GetIngredientSubstitutes200Response.
        :rtype: List[str]
        """
        return self._substitutes

    @substitutes.setter
    def substitutes(self, substitutes):
        """Sets the substitutes of this GetIngredientSubstitutes200Response.


        :param substitutes: The substitutes of this GetIngredientSubstitutes200Response.
        :type substitutes: List[str]
        """
        if substitutes is None:
            raise ValueError("Invalid value for `substitutes`, must not be `None`")

        self._substitutes = substitutes
