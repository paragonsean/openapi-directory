# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_comparable_products200_response_comparable_products_protein_inner import GetComparableProducts200ResponseComparableProductsProteinInner
from openapi_server import util


class GetComparableProducts200ResponseComparableProducts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calories: List[object]=None, likes: List[object]=None, price: List[object]=None, protein: list[GetComparableProducts200ResponseComparableProductsProteinInner]=None, spoonacular_score: list[GetComparableProducts200ResponseComparableProductsProteinInner]=None, sugar: List[object]=None):
        """GetComparableProducts200ResponseComparableProducts - a model defined in OpenAPI

        :param calories: The calories of this GetComparableProducts200ResponseComparableProducts.
        :param likes: The likes of this GetComparableProducts200ResponseComparableProducts.
        :param price: The price of this GetComparableProducts200ResponseComparableProducts.
        :param protein: The protein of this GetComparableProducts200ResponseComparableProducts.
        :param spoonacular_score: The spoonacular_score of this GetComparableProducts200ResponseComparableProducts.
        :param sugar: The sugar of this GetComparableProducts200ResponseComparableProducts.
        """
        self.openapi_types = {
            'calories': List[object],
            'likes': List[object],
            'price': List[object],
            'protein': list[GetComparableProducts200ResponseComparableProductsProteinInner],
            'spoonacular_score': list[GetComparableProducts200ResponseComparableProductsProteinInner],
            'sugar': List[object]
        }

        self.attribute_map = {
            'calories': 'calories',
            'likes': 'likes',
            'price': 'price',
            'protein': 'protein',
            'spoonacular_score': 'spoonacularScore',
            'sugar': 'sugar'
        }

        self._calories = calories
        self._likes = likes
        self._price = price
        self._protein = protein
        self._spoonacular_score = spoonacular_score
        self._sugar = sugar

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetComparableProducts200ResponseComparableProducts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getComparableProducts_200_response_comparableProducts of this GetComparableProducts200ResponseComparableProducts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self):
        """Gets the calories of this GetComparableProducts200ResponseComparableProducts.


        :return: The calories of this GetComparableProducts200ResponseComparableProducts.
        :rtype: List[object]
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this GetComparableProducts200ResponseComparableProducts.


        :param calories: The calories of this GetComparableProducts200ResponseComparableProducts.
        :type calories: List[object]
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")

        self._calories = calories

    @property
    def likes(self):
        """Gets the likes of this GetComparableProducts200ResponseComparableProducts.


        :return: The likes of this GetComparableProducts200ResponseComparableProducts.
        :rtype: List[object]
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this GetComparableProducts200ResponseComparableProducts.


        :param likes: The likes of this GetComparableProducts200ResponseComparableProducts.
        :type likes: List[object]
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def price(self):
        """Gets the price of this GetComparableProducts200ResponseComparableProducts.


        :return: The price of this GetComparableProducts200ResponseComparableProducts.
        :rtype: List[object]
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetComparableProducts200ResponseComparableProducts.


        :param price: The price of this GetComparableProducts200ResponseComparableProducts.
        :type price: List[object]
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def protein(self):
        """Gets the protein of this GetComparableProducts200ResponseComparableProducts.


        :return: The protein of this GetComparableProducts200ResponseComparableProducts.
        :rtype: list[GetComparableProducts200ResponseComparableProductsProteinInner]
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this GetComparableProducts200ResponseComparableProducts.


        :param protein: The protein of this GetComparableProducts200ResponseComparableProducts.
        :type protein: list[GetComparableProducts200ResponseComparableProductsProteinInner]
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")
        if protein is not None and len(protein) < 0:
            raise ValueError("Invalid value for `protein`, number of items must be greater than or equal to `0`")

        self._protein = protein

    @property
    def spoonacular_score(self):
        """Gets the spoonacular_score of this GetComparableProducts200ResponseComparableProducts.


        :return: The spoonacular_score of this GetComparableProducts200ResponseComparableProducts.
        :rtype: list[GetComparableProducts200ResponseComparableProductsProteinInner]
        """
        return self._spoonacular_score

    @spoonacular_score.setter
    def spoonacular_score(self, spoonacular_score):
        """Sets the spoonacular_score of this GetComparableProducts200ResponseComparableProducts.


        :param spoonacular_score: The spoonacular_score of this GetComparableProducts200ResponseComparableProducts.
        :type spoonacular_score: list[GetComparableProducts200ResponseComparableProductsProteinInner]
        """
        if spoonacular_score is None:
            raise ValueError("Invalid value for `spoonacular_score`, must not be `None`")
        if spoonacular_score is not None and len(spoonacular_score) < 0:
            raise ValueError("Invalid value for `spoonacular_score`, number of items must be greater than or equal to `0`")

        self._spoonacular_score = spoonacular_score

    @property
    def sugar(self):
        """Gets the sugar of this GetComparableProducts200ResponseComparableProducts.


        :return: The sugar of this GetComparableProducts200ResponseComparableProducts.
        :rtype: List[object]
        """
        return self._sugar

    @sugar.setter
    def sugar(self, sugar):
        """Sets the sugar of this GetComparableProducts200ResponseComparableProducts.


        :param sugar: The sugar of this GetComparableProducts200ResponseComparableProducts.
        :type sugar: List[object]
        """
        if sugar is None:
            raise ValueError("Invalid value for `sugar`, must not be `None`")

        self._sugar = sugar
