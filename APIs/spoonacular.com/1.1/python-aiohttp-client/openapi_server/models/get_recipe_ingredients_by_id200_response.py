# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_recipe_ingredients_by_id200_response_ingredients_inner import GetRecipeIngredientsByID200ResponseIngredientsInner
from openapi_server import util


class GetRecipeIngredientsByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: list[GetRecipeIngredientsByID200ResponseIngredientsInner]=None):
        """GetRecipeIngredientsByID200Response - a model defined in OpenAPI

        :param ingredients: The ingredients of this GetRecipeIngredientsByID200Response.
        """
        self.openapi_types = {
            'ingredients': list[GetRecipeIngredientsByID200ResponseIngredientsInner]
        }

        self.attribute_map = {
            'ingredients': 'ingredients'
        }

        self._ingredients = ingredients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeIngredientsByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeIngredientsByID_200_response of this GetRecipeIngredientsByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this GetRecipeIngredientsByID200Response.


        :return: The ingredients of this GetRecipeIngredientsByID200Response.
        :rtype: list[GetRecipeIngredientsByID200ResponseIngredientsInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this GetRecipeIngredientsByID200Response.


        :param ingredients: The ingredients of this GetRecipeIngredientsByID200Response.
        :type ingredients: list[GetRecipeIngredientsByID200ResponseIngredientsInner]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients
