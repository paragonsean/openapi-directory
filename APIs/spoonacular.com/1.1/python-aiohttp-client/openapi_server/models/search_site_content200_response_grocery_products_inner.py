# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_site_content200_response_grocery_products_inner_data_points_inner import SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner
from openapi_server import util


class SearchSiteContent200ResponseGroceryProductsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_points: list[SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner]=None, image: str=None, link: str=None, name: str=None):
        """SearchSiteContent200ResponseGroceryProductsInner - a model defined in OpenAPI

        :param data_points: The data_points of this SearchSiteContent200ResponseGroceryProductsInner.
        :param image: The image of this SearchSiteContent200ResponseGroceryProductsInner.
        :param link: The link of this SearchSiteContent200ResponseGroceryProductsInner.
        :param name: The name of this SearchSiteContent200ResponseGroceryProductsInner.
        """
        self.openapi_types = {
            'data_points': list[SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner],
            'image': str,
            'link': str,
            'name': str
        }

        self.attribute_map = {
            'data_points': 'dataPoints',
            'image': 'image',
            'link': 'link',
            'name': 'name'
        }

        self._data_points = data_points
        self._image = image
        self._link = link
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchSiteContent200ResponseGroceryProductsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchSiteContent_200_response_Grocery_Products_inner of this SearchSiteContent200ResponseGroceryProductsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_points(self):
        """Gets the data_points of this SearchSiteContent200ResponseGroceryProductsInner.


        :return: The data_points of this SearchSiteContent200ResponseGroceryProductsInner.
        :rtype: list[SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this SearchSiteContent200ResponseGroceryProductsInner.


        :param data_points: The data_points of this SearchSiteContent200ResponseGroceryProductsInner.
        :type data_points: list[SearchSiteContent200ResponseGroceryProductsInnerDataPointsInner]
        """
        if data_points is not None and len(data_points) < 0:
            raise ValueError("Invalid value for `data_points`, number of items must be greater than or equal to `0`")

        self._data_points = data_points

    @property
    def image(self):
        """Gets the image of this SearchSiteContent200ResponseGroceryProductsInner.


        :return: The image of this SearchSiteContent200ResponseGroceryProductsInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchSiteContent200ResponseGroceryProductsInner.


        :param image: The image of this SearchSiteContent200ResponseGroceryProductsInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def link(self):
        """Gets the link of this SearchSiteContent200ResponseGroceryProductsInner.


        :return: The link of this SearchSiteContent200ResponseGroceryProductsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SearchSiteContent200ResponseGroceryProductsInner.


        :param link: The link of this SearchSiteContent200ResponseGroceryProductsInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")

        self._link = link

    @property
    def name(self):
        """Gets the name of this SearchSiteContent200ResponseGroceryProductsInner.


        :return: The name of this SearchSiteContent200ResponseGroceryProductsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchSiteContent200ResponseGroceryProductsInner.


        :param name: The name of this SearchSiteContent200ResponseGroceryProductsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
