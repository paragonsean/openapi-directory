# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageClassificationByURL200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, probability: float=None):
        """ImageClassificationByURL200Response - a model defined in OpenAPI

        :param category: The category of this ImageClassificationByURL200Response.
        :param probability: The probability of this ImageClassificationByURL200Response.
        """
        self.openapi_types = {
            'category': str,
            'probability': float
        }

        self.attribute_map = {
            'category': 'category',
            'probability': 'probability'
        }

        self._category = category
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageClassificationByURL200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imageClassificationByURL_200_response of this ImageClassificationByURL200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this ImageClassificationByURL200Response.


        :return: The category of this ImageClassificationByURL200Response.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ImageClassificationByURL200Response.


        :param category: The category of this ImageClassificationByURL200Response.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")
        if category is not None and len(category) < 1:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")

        self._category = category

    @property
    def probability(self):
        """Gets the probability of this ImageClassificationByURL200Response.


        :return: The probability of this ImageClassificationByURL200Response.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this ImageClassificationByURL200Response.


        :param probability: The probability of this ImageClassificationByURL200Response.
        :type probability: float
        """
        if probability is None:
            raise ValueError("Invalid value for `probability`, must not be `None`")

        self._probability = probability
