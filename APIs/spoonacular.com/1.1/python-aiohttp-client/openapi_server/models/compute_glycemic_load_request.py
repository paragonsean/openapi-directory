# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeGlycemicLoadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: List[str]=None):
        """ComputeGlycemicLoadRequest - a model defined in OpenAPI

        :param ingredients: The ingredients of this ComputeGlycemicLoadRequest.
        """
        self.openapi_types = {
            'ingredients': List[str]
        }

        self.attribute_map = {
            'ingredients': 'ingredients'
        }

        self._ingredients = ingredients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeGlycemicLoadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The computeGlycemicLoad_request of this ComputeGlycemicLoadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this ComputeGlycemicLoadRequest.


        :return: The ingredients of this ComputeGlycemicLoadRequest.
        :rtype: List[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this ComputeGlycemicLoadRequest.


        :param ingredients: The ingredients of this ComputeGlycemicLoadRequest.
        :type ingredients: List[str]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")

        self._ingredients = ingredients
