# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ingredient_search200_response_results_inner import IngredientSearch200ResponseResultsInner
from openapi_server import util


class IngredientSearch200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: int=None, offset: int=None, results: list[IngredientSearch200ResponseResultsInner]=None, total_results: int=None):
        """IngredientSearch200Response - a model defined in OpenAPI

        :param number: The number of this IngredientSearch200Response.
        :param offset: The offset of this IngredientSearch200Response.
        :param results: The results of this IngredientSearch200Response.
        :param total_results: The total_results of this IngredientSearch200Response.
        """
        self.openapi_types = {
            'number': int,
            'offset': int,
            'results': list[IngredientSearch200ResponseResultsInner],
            'total_results': int
        }

        self.attribute_map = {
            'number': 'number',
            'offset': 'offset',
            'results': 'results',
            'total_results': 'totalResults'
        }

        self._number = number
        self._offset = offset
        self._results = results
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngredientSearch200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ingredientSearch_200_response of this IngredientSearch200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this IngredientSearch200Response.


        :return: The number of this IngredientSearch200Response.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IngredientSearch200Response.


        :param number: The number of this IngredientSearch200Response.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def offset(self):
        """Gets the offset of this IngredientSearch200Response.


        :return: The offset of this IngredientSearch200Response.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this IngredientSearch200Response.


        :param offset: The offset of this IngredientSearch200Response.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def results(self):
        """Gets the results of this IngredientSearch200Response.


        :return: The results of this IngredientSearch200Response.
        :rtype: list[IngredientSearch200ResponseResultsInner]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this IngredientSearch200Response.


        :param results: The results of this IngredientSearch200Response.
        :type results: list[IngredientSearch200ResponseResultsInner]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")
        if results is not None and len(results) < 0:
            raise ValueError("Invalid value for `results`, number of items must be greater than or equal to `0`")

        self._results = results

    @property
    def total_results(self):
        """Gets the total_results of this IngredientSearch200Response.


        :return: The total_results of this IngredientSearch200Response.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this IngredientSearch200Response.


        :param total_results: The total_results of this IngredientSearch200Response.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results
