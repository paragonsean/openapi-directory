# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_analysis_by_url200_response_nutrition_calories_confidence_range95_percent import ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
from openapi_server import util


class ImageAnalysisByURL200ResponseNutritionCalories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_range95_percent: ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent=None, standard_deviation: float=None, unit: str=None, value: float=None):
        """ImageAnalysisByURL200ResponseNutritionCalories - a model defined in OpenAPI

        :param confidence_range95_percent: The confidence_range95_percent of this ImageAnalysisByURL200ResponseNutritionCalories.
        :param standard_deviation: The standard_deviation of this ImageAnalysisByURL200ResponseNutritionCalories.
        :param unit: The unit of this ImageAnalysisByURL200ResponseNutritionCalories.
        :param value: The value of this ImageAnalysisByURL200ResponseNutritionCalories.
        """
        self.openapi_types = {
            'confidence_range95_percent': ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent,
            'standard_deviation': float,
            'unit': str,
            'value': float
        }

        self.attribute_map = {
            'confidence_range95_percent': 'confidenceRange95Percent',
            'standard_deviation': 'standardDeviation',
            'unit': 'unit',
            'value': 'value'
        }

        self._confidence_range95_percent = confidence_range95_percent
        self._standard_deviation = standard_deviation
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnalysisByURL200ResponseNutritionCalories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imageAnalysisByURL_200_response_nutrition_calories of this ImageAnalysisByURL200ResponseNutritionCalories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_range95_percent(self):
        """Gets the confidence_range95_percent of this ImageAnalysisByURL200ResponseNutritionCalories.


        :return: The confidence_range95_percent of this ImageAnalysisByURL200ResponseNutritionCalories.
        :rtype: ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
        """
        return self._confidence_range95_percent

    @confidence_range95_percent.setter
    def confidence_range95_percent(self, confidence_range95_percent):
        """Sets the confidence_range95_percent of this ImageAnalysisByURL200ResponseNutritionCalories.


        :param confidence_range95_percent: The confidence_range95_percent of this ImageAnalysisByURL200ResponseNutritionCalories.
        :type confidence_range95_percent: ImageAnalysisByURL200ResponseNutritionCaloriesConfidenceRange95Percent
        """
        if confidence_range95_percent is None:
            raise ValueError("Invalid value for `confidence_range95_percent`, must not be `None`")

        self._confidence_range95_percent = confidence_range95_percent

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this ImageAnalysisByURL200ResponseNutritionCalories.


        :return: The standard_deviation of this ImageAnalysisByURL200ResponseNutritionCalories.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this ImageAnalysisByURL200ResponseNutritionCalories.


        :param standard_deviation: The standard_deviation of this ImageAnalysisByURL200ResponseNutritionCalories.
        :type standard_deviation: float
        """
        if standard_deviation is None:
            raise ValueError("Invalid value for `standard_deviation`, must not be `None`")

        self._standard_deviation = standard_deviation

    @property
    def unit(self):
        """Gets the unit of this ImageAnalysisByURL200ResponseNutritionCalories.


        :return: The unit of this ImageAnalysisByURL200ResponseNutritionCalories.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ImageAnalysisByURL200ResponseNutritionCalories.


        :param unit: The unit of this ImageAnalysisByURL200ResponseNutritionCalories.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")
        if unit is not None and len(unit) < 1:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this ImageAnalysisByURL200ResponseNutritionCalories.


        :return: The value of this ImageAnalysisByURL200ResponseNutritionCalories.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ImageAnalysisByURL200ResponseNutritionCalories.


        :param value: The value of this ImageAnalysisByURL200ResponseNutritionCalories.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
