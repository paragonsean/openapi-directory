# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddToShoppingListRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, item: str=None, parse: bool=None):
        """AddToShoppingListRequest - a model defined in OpenAPI

        :param aisle: The aisle of this AddToShoppingListRequest.
        :param item: The item of this AddToShoppingListRequest.
        :param parse: The parse of this AddToShoppingListRequest.
        """
        self.openapi_types = {
            'aisle': str,
            'item': str,
            'parse': bool
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'item': 'item',
            'parse': 'parse'
        }

        self._aisle = aisle
        self._item = item
        self._parse = parse

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddToShoppingListRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addToShoppingList_request of this AddToShoppingListRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this AddToShoppingListRequest.


        :return: The aisle of this AddToShoppingListRequest.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this AddToShoppingListRequest.


        :param aisle: The aisle of this AddToShoppingListRequest.
        :type aisle: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def item(self):
        """Gets the item of this AddToShoppingListRequest.


        :return: The item of this AddToShoppingListRequest.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this AddToShoppingListRequest.


        :param item: The item of this AddToShoppingListRequest.
        :type item: str
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")
        if item is not None and len(item) < 1:
            raise ValueError("Invalid value for `item`, length must be greater than or equal to `1`")

        self._item = item

    @property
    def parse(self):
        """Gets the parse of this AddToShoppingListRequest.


        :return: The parse of this AddToShoppingListRequest.
        :rtype: bool
        """
        return self._parse

    @parse.setter
    def parse(self, parse):
        """Sets the parse of this AddToShoppingListRequest.


        :param parse: The parse of this AddToShoppingListRequest.
        :type parse: bool
        """
        if parse is None:
            raise ValueError("Invalid value for `parse`, must not be `None`")

        self._parse = parse
