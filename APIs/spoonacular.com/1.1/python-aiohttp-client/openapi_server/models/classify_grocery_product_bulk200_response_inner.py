# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClassifyGroceryProductBulk200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breadcrumbs: List[str]=None, category: str=None, clean_title: str=None, image: str=None, usda_code: int=None):
        """ClassifyGroceryProductBulk200ResponseInner - a model defined in OpenAPI

        :param breadcrumbs: The breadcrumbs of this ClassifyGroceryProductBulk200ResponseInner.
        :param category: The category of this ClassifyGroceryProductBulk200ResponseInner.
        :param clean_title: The clean_title of this ClassifyGroceryProductBulk200ResponseInner.
        :param image: The image of this ClassifyGroceryProductBulk200ResponseInner.
        :param usda_code: The usda_code of this ClassifyGroceryProductBulk200ResponseInner.
        """
        self.openapi_types = {
            'breadcrumbs': List[str],
            'category': str,
            'clean_title': str,
            'image': str,
            'usda_code': int
        }

        self.attribute_map = {
            'breadcrumbs': 'breadcrumbs',
            'category': 'category',
            'clean_title': 'cleanTitle',
            'image': 'image',
            'usda_code': 'usdaCode'
        }

        self._breadcrumbs = breadcrumbs
        self._category = category
        self._clean_title = clean_title
        self._image = image
        self._usda_code = usda_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassifyGroceryProductBulk200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The classifyGroceryProductBulk_200_response_inner of this ClassifyGroceryProductBulk200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breadcrumbs(self):
        """Gets the breadcrumbs of this ClassifyGroceryProductBulk200ResponseInner.


        :return: The breadcrumbs of this ClassifyGroceryProductBulk200ResponseInner.
        :rtype: List[str]
        """
        return self._breadcrumbs

    @breadcrumbs.setter
    def breadcrumbs(self, breadcrumbs):
        """Sets the breadcrumbs of this ClassifyGroceryProductBulk200ResponseInner.


        :param breadcrumbs: The breadcrumbs of this ClassifyGroceryProductBulk200ResponseInner.
        :type breadcrumbs: List[str]
        """
        if breadcrumbs is None:
            raise ValueError("Invalid value for `breadcrumbs`, must not be `None`")

        self._breadcrumbs = breadcrumbs

    @property
    def category(self):
        """Gets the category of this ClassifyGroceryProductBulk200ResponseInner.


        :return: The category of this ClassifyGroceryProductBulk200ResponseInner.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ClassifyGroceryProductBulk200ResponseInner.


        :param category: The category of this ClassifyGroceryProductBulk200ResponseInner.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")
        if category is not None and len(category) < 1:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")

        self._category = category

    @property
    def clean_title(self):
        """Gets the clean_title of this ClassifyGroceryProductBulk200ResponseInner.


        :return: The clean_title of this ClassifyGroceryProductBulk200ResponseInner.
        :rtype: str
        """
        return self._clean_title

    @clean_title.setter
    def clean_title(self, clean_title):
        """Sets the clean_title of this ClassifyGroceryProductBulk200ResponseInner.


        :param clean_title: The clean_title of this ClassifyGroceryProductBulk200ResponseInner.
        :type clean_title: str
        """
        if clean_title is None:
            raise ValueError("Invalid value for `clean_title`, must not be `None`")
        if clean_title is not None and len(clean_title) < 1:
            raise ValueError("Invalid value for `clean_title`, length must be greater than or equal to `1`")

        self._clean_title = clean_title

    @property
    def image(self):
        """Gets the image of this ClassifyGroceryProductBulk200ResponseInner.


        :return: The image of this ClassifyGroceryProductBulk200ResponseInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ClassifyGroceryProductBulk200ResponseInner.


        :param image: The image of this ClassifyGroceryProductBulk200ResponseInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def usda_code(self):
        """Gets the usda_code of this ClassifyGroceryProductBulk200ResponseInner.


        :return: The usda_code of this ClassifyGroceryProductBulk200ResponseInner.
        :rtype: int
        """
        return self._usda_code

    @usda_code.setter
    def usda_code(self, usda_code):
        """Sets the usda_code of this ClassifyGroceryProductBulk200ResponseInner.


        :param usda_code: The usda_code of this ClassifyGroceryProductBulk200ResponseInner.
        :type usda_code: int
        """
        if usda_code is None:
            raise ValueError("Invalid value for `usda_code`, must not be `None`")

        self._usda_code = usda_code
