# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchAllFood200ResponseSearchResultsInnerResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, id: str=None, image: str=None, link: str=None, name: str=None, relevance: float=None, type: str=None):
        """SearchAllFood200ResponseSearchResultsInnerResultsInner - a model defined in OpenAPI

        :param content: The content of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param id: The id of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param image: The image of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param link: The link of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param name: The name of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param relevance: The relevance of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :param type: The type of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        """
        self.openapi_types = {
            'content': str,
            'id': str,
            'image': str,
            'link': str,
            'name': str,
            'relevance': float,
            'type': str
        }

        self.attribute_map = {
            'content': 'content',
            'id': 'id',
            'image': 'image',
            'link': 'link',
            'name': 'name',
            'relevance': 'relevance',
            'type': 'type'
        }

        self._content = content
        self._id = id
        self._image = image
        self._link = link
        self._name = name
        self._relevance = relevance
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAllFood200ResponseSearchResultsInnerResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchAllFood_200_response_searchResults_inner_results_inner of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The content of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param content: The content of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `0`")

        self._content = content

    @property
    def id(self):
        """Gets the id of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The id of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param id: The id of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The image of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param image: The image of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def link(self):
        """Gets the link of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The link of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param link: The link of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")

        self._link = link

    @property
    def name(self):
        """Gets the name of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The name of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param name: The name of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def relevance(self):
        """Gets the relevance of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The relevance of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param relevance: The relevance of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type relevance: float
        """
        if relevance is None:
            raise ValueError("Invalid value for `relevance`, must not be `None`")

        self._relevance = relevance

    @property
    def type(self):
        """Gets the type of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :return: The type of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchAllFood200ResponseSearchResultsInnerResultsInner.


        :param type: The type of this SearchAllFood200ResponseSearchResultsInnerResultsInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type
