# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_analysis_by_url200_response_nutrition_calories import ImageAnalysisByURL200ResponseNutritionCalories
from openapi_server import util


class ImageAnalysisByURL200ResponseNutrition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calories: ImageAnalysisByURL200ResponseNutritionCalories=None, carbs: ImageAnalysisByURL200ResponseNutritionCalories=None, fat: ImageAnalysisByURL200ResponseNutritionCalories=None, protein: ImageAnalysisByURL200ResponseNutritionCalories=None, recipes_used: int=None):
        """ImageAnalysisByURL200ResponseNutrition - a model defined in OpenAPI

        :param calories: The calories of this ImageAnalysisByURL200ResponseNutrition.
        :param carbs: The carbs of this ImageAnalysisByURL200ResponseNutrition.
        :param fat: The fat of this ImageAnalysisByURL200ResponseNutrition.
        :param protein: The protein of this ImageAnalysisByURL200ResponseNutrition.
        :param recipes_used: The recipes_used of this ImageAnalysisByURL200ResponseNutrition.
        """
        self.openapi_types = {
            'calories': ImageAnalysisByURL200ResponseNutritionCalories,
            'carbs': ImageAnalysisByURL200ResponseNutritionCalories,
            'fat': ImageAnalysisByURL200ResponseNutritionCalories,
            'protein': ImageAnalysisByURL200ResponseNutritionCalories,
            'recipes_used': int
        }

        self.attribute_map = {
            'calories': 'calories',
            'carbs': 'carbs',
            'fat': 'fat',
            'protein': 'protein',
            'recipes_used': 'recipesUsed'
        }

        self._calories = calories
        self._carbs = carbs
        self._fat = fat
        self._protein = protein
        self._recipes_used = recipes_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnalysisByURL200ResponseNutrition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imageAnalysisByURL_200_response_nutrition of this ImageAnalysisByURL200ResponseNutrition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self):
        """Gets the calories of this ImageAnalysisByURL200ResponseNutrition.


        :return: The calories of this ImageAnalysisByURL200ResponseNutrition.
        :rtype: ImageAnalysisByURL200ResponseNutritionCalories
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this ImageAnalysisByURL200ResponseNutrition.


        :param calories: The calories of this ImageAnalysisByURL200ResponseNutrition.
        :type calories: ImageAnalysisByURL200ResponseNutritionCalories
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")

        self._calories = calories

    @property
    def carbs(self):
        """Gets the carbs of this ImageAnalysisByURL200ResponseNutrition.


        :return: The carbs of this ImageAnalysisByURL200ResponseNutrition.
        :rtype: ImageAnalysisByURL200ResponseNutritionCalories
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs):
        """Sets the carbs of this ImageAnalysisByURL200ResponseNutrition.


        :param carbs: The carbs of this ImageAnalysisByURL200ResponseNutrition.
        :type carbs: ImageAnalysisByURL200ResponseNutritionCalories
        """
        if carbs is None:
            raise ValueError("Invalid value for `carbs`, must not be `None`")

        self._carbs = carbs

    @property
    def fat(self):
        """Gets the fat of this ImageAnalysisByURL200ResponseNutrition.


        :return: The fat of this ImageAnalysisByURL200ResponseNutrition.
        :rtype: ImageAnalysisByURL200ResponseNutritionCalories
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this ImageAnalysisByURL200ResponseNutrition.


        :param fat: The fat of this ImageAnalysisByURL200ResponseNutrition.
        :type fat: ImageAnalysisByURL200ResponseNutritionCalories
        """
        if fat is None:
            raise ValueError("Invalid value for `fat`, must not be `None`")

        self._fat = fat

    @property
    def protein(self):
        """Gets the protein of this ImageAnalysisByURL200ResponseNutrition.


        :return: The protein of this ImageAnalysisByURL200ResponseNutrition.
        :rtype: ImageAnalysisByURL200ResponseNutritionCalories
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this ImageAnalysisByURL200ResponseNutrition.


        :param protein: The protein of this ImageAnalysisByURL200ResponseNutrition.
        :type protein: ImageAnalysisByURL200ResponseNutritionCalories
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")

        self._protein = protein

    @property
    def recipes_used(self):
        """Gets the recipes_used of this ImageAnalysisByURL200ResponseNutrition.


        :return: The recipes_used of this ImageAnalysisByURL200ResponseNutrition.
        :rtype: int
        """
        return self._recipes_used

    @recipes_used.setter
    def recipes_used(self, recipes_used):
        """Sets the recipes_used of this ImageAnalysisByURL200ResponseNutrition.


        :param recipes_used: The recipes_used of this ImageAnalysisByURL200ResponseNutrition.
        :type recipes_used: int
        """
        if recipes_used is None:
            raise ValueError("Invalid value for `recipes_used`, must not be `None`")

        self._recipes_used = recipes_used
