# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchMenuItems200ResponseMenuItemsInnerServings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: float=None, size: float=None, unit: str=None):
        """SearchMenuItems200ResponseMenuItemsInnerServings - a model defined in OpenAPI

        :param number: The number of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :param size: The size of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :param unit: The unit of this SearchMenuItems200ResponseMenuItemsInnerServings.
        """
        self.openapi_types = {
            'number': float,
            'size': float,
            'unit': str
        }

        self.attribute_map = {
            'number': 'number',
            'size': 'size',
            'unit': 'unit'
        }

        self._number = number
        self._size = size
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchMenuItems200ResponseMenuItemsInnerServings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchMenuItems_200_response_menuItems_inner_servings of this SearchMenuItems200ResponseMenuItemsInnerServings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :return: The number of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :param number: The number of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :type number: float
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def size(self):
        """Gets the size of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :return: The size of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :param size: The size of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :type size: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def unit(self):
        """Gets the unit of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :return: The unit of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SearchMenuItems200ResponseMenuItemsInnerServings.


        :param unit: The unit of this SearchMenuItems200ResponseMenuItemsInnerServings.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")
        if unit is not None and len(unit) < 1:
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")

        self._unit = unit
