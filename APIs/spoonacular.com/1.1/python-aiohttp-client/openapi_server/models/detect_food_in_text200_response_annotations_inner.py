# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectFoodInText200ResponseAnnotationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation: str=None, image: str=None, tag: str=None):
        """DetectFoodInText200ResponseAnnotationsInner - a model defined in OpenAPI

        :param annotation: The annotation of this DetectFoodInText200ResponseAnnotationsInner.
        :param image: The image of this DetectFoodInText200ResponseAnnotationsInner.
        :param tag: The tag of this DetectFoodInText200ResponseAnnotationsInner.
        """
        self.openapi_types = {
            'annotation': str,
            'image': str,
            'tag': str
        }

        self.attribute_map = {
            'annotation': 'annotation',
            'image': 'image',
            'tag': 'tag'
        }

        self._annotation = annotation
        self._image = image
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectFoodInText200ResponseAnnotationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The detectFoodInText_200_response_annotations_inner of this DetectFoodInText200ResponseAnnotationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation(self):
        """Gets the annotation of this DetectFoodInText200ResponseAnnotationsInner.


        :return: The annotation of this DetectFoodInText200ResponseAnnotationsInner.
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this DetectFoodInText200ResponseAnnotationsInner.


        :param annotation: The annotation of this DetectFoodInText200ResponseAnnotationsInner.
        :type annotation: str
        """
        if annotation is None:
            raise ValueError("Invalid value for `annotation`, must not be `None`")
        if annotation is not None and len(annotation) < 1:
            raise ValueError("Invalid value for `annotation`, length must be greater than or equal to `1`")

        self._annotation = annotation

    @property
    def image(self):
        """Gets the image of this DetectFoodInText200ResponseAnnotationsInner.


        :return: The image of this DetectFoodInText200ResponseAnnotationsInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectFoodInText200ResponseAnnotationsInner.


        :param image: The image of this DetectFoodInText200ResponseAnnotationsInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def tag(self):
        """Gets the tag of this DetectFoodInText200ResponseAnnotationsInner.


        :return: The tag of this DetectFoodInText200ResponseAnnotationsInner.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DetectFoodInText200ResponseAnnotationsInner.


        :param tag: The tag of this DetectFoodInText200ResponseAnnotationsInner.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")
        if tag is not None and len(tag) < 1:
            raise ValueError("Invalid value for `tag`, length must be greater than or equal to `1`")

        self._tag = tag
