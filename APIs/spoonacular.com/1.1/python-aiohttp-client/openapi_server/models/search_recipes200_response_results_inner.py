# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRecipes200ResponseResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calories: float=None, carbs: str=None, fat: str=None, id: int=None, image: str=None, image_type: str=None, protein: str=None, title: str=None):
        """SearchRecipes200ResponseResultsInner - a model defined in OpenAPI

        :param calories: The calories of this SearchRecipes200ResponseResultsInner.
        :param carbs: The carbs of this SearchRecipes200ResponseResultsInner.
        :param fat: The fat of this SearchRecipes200ResponseResultsInner.
        :param id: The id of this SearchRecipes200ResponseResultsInner.
        :param image: The image of this SearchRecipes200ResponseResultsInner.
        :param image_type: The image_type of this SearchRecipes200ResponseResultsInner.
        :param protein: The protein of this SearchRecipes200ResponseResultsInner.
        :param title: The title of this SearchRecipes200ResponseResultsInner.
        """
        self.openapi_types = {
            'calories': float,
            'carbs': str,
            'fat': str,
            'id': int,
            'image': str,
            'image_type': str,
            'protein': str,
            'title': str
        }

        self.attribute_map = {
            'calories': 'calories',
            'carbs': 'carbs',
            'fat': 'fat',
            'id': 'id',
            'image': 'image',
            'image_type': 'imageType',
            'protein': 'protein',
            'title': 'title'
        }

        self._calories = calories
        self._carbs = carbs
        self._fat = fat
        self._id = id
        self._image = image
        self._image_type = image_type
        self._protein = protein
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRecipes200ResponseResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchRecipes_200_response_results_inner of this SearchRecipes200ResponseResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self):
        """Gets the calories of this SearchRecipes200ResponseResultsInner.


        :return: The calories of this SearchRecipes200ResponseResultsInner.
        :rtype: float
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this SearchRecipes200ResponseResultsInner.


        :param calories: The calories of this SearchRecipes200ResponseResultsInner.
        :type calories: float
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")

        self._calories = calories

    @property
    def carbs(self):
        """Gets the carbs of this SearchRecipes200ResponseResultsInner.


        :return: The carbs of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs):
        """Sets the carbs of this SearchRecipes200ResponseResultsInner.


        :param carbs: The carbs of this SearchRecipes200ResponseResultsInner.
        :type carbs: str
        """
        if carbs is None:
            raise ValueError("Invalid value for `carbs`, must not be `None`")
        if carbs is not None and len(carbs) < 1:
            raise ValueError("Invalid value for `carbs`, length must be greater than or equal to `1`")

        self._carbs = carbs

    @property
    def fat(self):
        """Gets the fat of this SearchRecipes200ResponseResultsInner.


        :return: The fat of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this SearchRecipes200ResponseResultsInner.


        :param fat: The fat of this SearchRecipes200ResponseResultsInner.
        :type fat: str
        """
        if fat is None:
            raise ValueError("Invalid value for `fat`, must not be `None`")
        if fat is not None and len(fat) < 1:
            raise ValueError("Invalid value for `fat`, length must be greater than or equal to `1`")

        self._fat = fat

    @property
    def id(self):
        """Gets the id of this SearchRecipes200ResponseResultsInner.


        :return: The id of this SearchRecipes200ResponseResultsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchRecipes200ResponseResultsInner.


        :param id: The id of this SearchRecipes200ResponseResultsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this SearchRecipes200ResponseResultsInner.


        :return: The image of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchRecipes200ResponseResultsInner.


        :param image: The image of this SearchRecipes200ResponseResultsInner.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def image_type(self):
        """Gets the image_type of this SearchRecipes200ResponseResultsInner.


        :return: The image_type of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this SearchRecipes200ResponseResultsInner.


        :param image_type: The image_type of this SearchRecipes200ResponseResultsInner.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")
        if image_type is not None and len(image_type) < 1:
            raise ValueError("Invalid value for `image_type`, length must be greater than or equal to `1`")

        self._image_type = image_type

    @property
    def protein(self):
        """Gets the protein of this SearchRecipes200ResponseResultsInner.


        :return: The protein of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this SearchRecipes200ResponseResultsInner.


        :param protein: The protein of this SearchRecipes200ResponseResultsInner.
        :type protein: str
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")
        if protein is not None and len(protein) < 1:
            raise ValueError("Invalid value for `protein`, length must be greater than or equal to `1`")

        self._protein = protein

    @property
    def title(self):
        """Gets the title of this SearchRecipes200ResponseResultsInner.


        :return: The title of this SearchRecipes200ResponseResultsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchRecipes200ResponseResultsInner.


        :param title: The title of this SearchRecipes200ResponseResultsInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
