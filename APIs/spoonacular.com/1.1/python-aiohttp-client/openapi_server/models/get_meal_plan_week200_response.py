# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_meal_plan_week200_response_days_inner import GetMealPlanWeek200ResponseDaysInner
from openapi_server import util


class GetMealPlanWeek200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days: list[GetMealPlanWeek200ResponseDaysInner]=None):
        """GetMealPlanWeek200Response - a model defined in OpenAPI

        :param days: The days of this GetMealPlanWeek200Response.
        """
        self.openapi_types = {
            'days': list[GetMealPlanWeek200ResponseDaysInner]
        }

        self.attribute_map = {
            'days': 'days'
        }

        self._days = days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMealPlanWeek200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMealPlanWeek_200_response of this GetMealPlanWeek200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days(self):
        """Gets the days of this GetMealPlanWeek200Response.


        :return: The days of this GetMealPlanWeek200Response.
        :rtype: list[GetMealPlanWeek200ResponseDaysInner]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this GetMealPlanWeek200Response.


        :param days: The days of this GetMealPlanWeek200Response.
        :type days: list[GetMealPlanWeek200ResponseDaysInner]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")
        if days is not None and len(days) < 0:
            raise ValueError("Invalid value for `days`, number of items must be greater than or equal to `0`")

        self._days = days
