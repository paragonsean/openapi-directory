# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_shopping_list200_response_aisles_inner_items_inner import GetShoppingList200ResponseAislesInnerItemsInner
from openapi_server import util


class GetShoppingList200ResponseAislesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, items: list[GetShoppingList200ResponseAislesInnerItemsInner]=None):
        """GetShoppingList200ResponseAislesInner - a model defined in OpenAPI

        :param aisle: The aisle of this GetShoppingList200ResponseAislesInner.
        :param items: The items of this GetShoppingList200ResponseAislesInner.
        """
        self.openapi_types = {
            'aisle': str,
            'items': list[GetShoppingList200ResponseAislesInnerItemsInner]
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'items': 'items'
        }

        self._aisle = aisle
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetShoppingList200ResponseAislesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getShoppingList_200_response_aisles_inner of this GetShoppingList200ResponseAislesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this GetShoppingList200ResponseAislesInner.


        :return: The aisle of this GetShoppingList200ResponseAislesInner.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this GetShoppingList200ResponseAislesInner.


        :param aisle: The aisle of this GetShoppingList200ResponseAislesInner.
        :type aisle: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def items(self):
        """Gets the items of this GetShoppingList200ResponseAislesInner.


        :return: The items of this GetShoppingList200ResponseAislesInner.
        :rtype: list[GetShoppingList200ResponseAislesInnerItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetShoppingList200ResponseAislesInner.


        :param items: The items of this GetShoppingList200ResponseAislesInner.
        :type items: list[GetShoppingList200ResponseAislesInnerItemsInner]
        """
        if items is not None and len(items) < 0:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `0`")

        self._items = items
