# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetWineRecommendation200ResponseRecommendedWinesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_rating: float=None, description: str=None, id: int=None, image_url: str=None, link: str=None, price: str=None, rating_count: int=None, score: float=None, title: str=None):
        """GetWineRecommendation200ResponseRecommendedWinesInner - a model defined in OpenAPI

        :param average_rating: The average_rating of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param description: The description of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param id: The id of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param image_url: The image_url of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param link: The link of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param price: The price of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param rating_count: The rating_count of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param score: The score of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :param title: The title of this GetWineRecommendation200ResponseRecommendedWinesInner.
        """
        self.openapi_types = {
            'average_rating': float,
            'description': str,
            'id': int,
            'image_url': str,
            'link': str,
            'price': str,
            'rating_count': int,
            'score': float,
            'title': str
        }

        self.attribute_map = {
            'average_rating': 'averageRating',
            'description': 'description',
            'id': 'id',
            'image_url': 'imageUrl',
            'link': 'link',
            'price': 'price',
            'rating_count': 'ratingCount',
            'score': 'score',
            'title': 'title'
        }

        self._average_rating = average_rating
        self._description = description
        self._id = id
        self._image_url = image_url
        self._link = link
        self._price = price
        self._rating_count = rating_count
        self._score = score
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWineRecommendation200ResponseRecommendedWinesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getWineRecommendation_200_response_recommendedWines_inner of this GetWineRecommendation200ResponseRecommendedWinesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_rating(self):
        """Gets the average_rating of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The average_rating of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: float
        """
        return self._average_rating

    @average_rating.setter
    def average_rating(self, average_rating):
        """Sets the average_rating of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param average_rating: The average_rating of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type average_rating: float
        """
        if average_rating is None:
            raise ValueError("Invalid value for `average_rating`, must not be `None`")

        self._average_rating = average_rating

    @property
    def description(self):
        """Gets the description of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The description of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param description: The description of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The id of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param id: The id of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The image_url of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param image_url: The image_url of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")
        if image_url is not None and len(image_url) < 1:
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `1`")

        self._image_url = image_url

    @property
    def link(self):
        """Gets the link of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The link of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param link: The link of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")
        if link is not None and len(link) < 1:
            raise ValueError("Invalid value for `link`, length must be greater than or equal to `1`")

        self._link = link

    @property
    def price(self):
        """Gets the price of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The price of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param price: The price of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type price: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")
        if price is not None and len(price) < 1:
            raise ValueError("Invalid value for `price`, length must be greater than or equal to `1`")

        self._price = price

    @property
    def rating_count(self):
        """Gets the rating_count of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The rating_count of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: int
        """
        return self._rating_count

    @rating_count.setter
    def rating_count(self, rating_count):
        """Sets the rating_count of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param rating_count: The rating_count of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type rating_count: int
        """
        if rating_count is None:
            raise ValueError("Invalid value for `rating_count`, must not be `None`")

        self._rating_count = rating_count

    @property
    def score(self):
        """Gets the score of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The score of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param score: The score of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def title(self):
        """Gets the title of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :return: The title of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetWineRecommendation200ResponseRecommendedWinesInner.


        :param title: The title of this GetWineRecommendation200ResponseRecommendedWinesInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
