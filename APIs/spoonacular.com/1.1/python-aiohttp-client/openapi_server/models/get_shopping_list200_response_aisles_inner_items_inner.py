# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_shopping_list200_response_aisles_inner_items_inner_measures import GetShoppingList200ResponseAislesInnerItemsInnerMeasures
from openapi_server import util


class GetShoppingList200ResponseAislesInnerItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aisle: str=None, cost: float=None, id: int=None, ingredient_id: int=None, measures: GetShoppingList200ResponseAislesInnerItemsInnerMeasures=None, name: str=None, pantry_item: bool=None):
        """GetShoppingList200ResponseAislesInnerItemsInner - a model defined in OpenAPI

        :param aisle: The aisle of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param cost: The cost of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param id: The id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param ingredient_id: The ingredient_id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param measures: The measures of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param name: The name of this GetShoppingList200ResponseAislesInnerItemsInner.
        :param pantry_item: The pantry_item of this GetShoppingList200ResponseAislesInnerItemsInner.
        """
        self.openapi_types = {
            'aisle': str,
            'cost': float,
            'id': int,
            'ingredient_id': int,
            'measures': GetShoppingList200ResponseAislesInnerItemsInnerMeasures,
            'name': str,
            'pantry_item': bool
        }

        self.attribute_map = {
            'aisle': 'aisle',
            'cost': 'cost',
            'id': 'id',
            'ingredient_id': 'ingredientId',
            'measures': 'measures',
            'name': 'name',
            'pantry_item': 'pantryItem'
        }

        self._aisle = aisle
        self._cost = cost
        self._id = id
        self._ingredient_id = ingredient_id
        self._measures = measures
        self._name = name
        self._pantry_item = pantry_item

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetShoppingList200ResponseAislesInnerItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getShoppingList_200_response_aisles_inner_items_inner of this GetShoppingList200ResponseAislesInnerItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aisle(self):
        """Gets the aisle of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The aisle of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: str
        """
        return self._aisle

    @aisle.setter
    def aisle(self, aisle):
        """Sets the aisle of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param aisle: The aisle of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type aisle: str
        """
        if aisle is None:
            raise ValueError("Invalid value for `aisle`, must not be `None`")
        if aisle is not None and len(aisle) < 1:
            raise ValueError("Invalid value for `aisle`, length must be greater than or equal to `1`")

        self._aisle = aisle

    @property
    def cost(self):
        """Gets the cost of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The cost of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param cost: The cost of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def id(self):
        """Gets the id of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param id: The id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ingredient_id(self):
        """Gets the ingredient_id of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The ingredient_id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: int
        """
        return self._ingredient_id

    @ingredient_id.setter
    def ingredient_id(self, ingredient_id):
        """Sets the ingredient_id of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param ingredient_id: The ingredient_id of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type ingredient_id: int
        """
        if ingredient_id is None:
            raise ValueError("Invalid value for `ingredient_id`, must not be `None`")

        self._ingredient_id = ingredient_id

    @property
    def measures(self):
        """Gets the measures of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The measures of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: GetShoppingList200ResponseAislesInnerItemsInnerMeasures
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param measures: The measures of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type measures: GetShoppingList200ResponseAislesInnerItemsInnerMeasures
        """

        self._measures = measures

    @property
    def name(self):
        """Gets the name of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The name of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param name: The name of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def pantry_item(self):
        """Gets the pantry_item of this GetShoppingList200ResponseAislesInnerItemsInner.


        :return: The pantry_item of this GetShoppingList200ResponseAislesInnerItemsInner.
        :rtype: bool
        """
        return self._pantry_item

    @pantry_item.setter
    def pantry_item(self, pantry_item):
        """Sets the pantry_item of this GetShoppingList200ResponseAislesInnerItemsInner.


        :param pantry_item: The pantry_item of this GetShoppingList200ResponseAislesInnerItemsInner.
        :type pantry_item: bool
        """
        if pantry_item is None:
            raise ValueError("Invalid value for `pantry_item`, must not be `None`")

        self._pantry_item = pantry_item
