# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_to_meal_plan_request1_value import AddToMealPlanRequest1Value
from openapi_server import util


class AddToMealPlanRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: float=None, position: int=None, slot: int=None, type: str=None, value: AddToMealPlanRequest1Value=None):
        """AddToMealPlanRequest1 - a model defined in OpenAPI

        :param _date: The _date of this AddToMealPlanRequest1.
        :param position: The position of this AddToMealPlanRequest1.
        :param slot: The slot of this AddToMealPlanRequest1.
        :param type: The type of this AddToMealPlanRequest1.
        :param value: The value of this AddToMealPlanRequest1.
        """
        self.openapi_types = {
            '_date': float,
            'position': int,
            'slot': int,
            'type': str,
            'value': AddToMealPlanRequest1Value
        }

        self.attribute_map = {
            '_date': 'date',
            'position': 'position',
            'slot': 'slot',
            'type': 'type',
            'value': 'value'
        }

        self.__date = _date
        self._position = position
        self._slot = slot
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddToMealPlanRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The addToMealPlan_request_1 of this AddToMealPlanRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this AddToMealPlanRequest1.


        :return: The _date of this AddToMealPlanRequest1.
        :rtype: float
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AddToMealPlanRequest1.


        :param _date: The _date of this AddToMealPlanRequest1.
        :type _date: float
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def position(self):
        """Gets the position of this AddToMealPlanRequest1.


        :return: The position of this AddToMealPlanRequest1.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AddToMealPlanRequest1.


        :param position: The position of this AddToMealPlanRequest1.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def slot(self):
        """Gets the slot of this AddToMealPlanRequest1.


        :return: The slot of this AddToMealPlanRequest1.
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this AddToMealPlanRequest1.


        :param slot: The slot of this AddToMealPlanRequest1.
        :type slot: int
        """
        if slot is None:
            raise ValueError("Invalid value for `slot`, must not be `None`")

        self._slot = slot

    @property
    def type(self):
        """Gets the type of this AddToMealPlanRequest1.


        :return: The type of this AddToMealPlanRequest1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddToMealPlanRequest1.


        :param type: The type of this AddToMealPlanRequest1.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type

    @property
    def value(self):
        """Gets the value of this AddToMealPlanRequest1.


        :return: The value of this AddToMealPlanRequest1.
        :rtype: AddToMealPlanRequest1Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AddToMealPlanRequest1.


        :param value: The value of this AddToMealPlanRequest1.
        :type value: AddToMealPlanRequest1Value
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
