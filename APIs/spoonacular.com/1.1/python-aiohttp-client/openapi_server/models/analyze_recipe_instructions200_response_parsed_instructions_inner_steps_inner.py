# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_recipe_instructions200_response_parsed_instructions_inner_steps_inner_equipment_inner import AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner
from openapi_server import util


class AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equipment: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]=None, ingredients: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]=None, number: float=None, step: str=None):
        """AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner - a model defined in OpenAPI

        :param equipment: The equipment of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :param ingredients: The ingredients of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :param number: The number of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :param step: The step of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        """
        self.openapi_types = {
            'equipment': list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner],
            'ingredients': list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner],
            'number': float,
            'step': str
        }

        self.attribute_map = {
            'equipment': 'equipment',
            'ingredients': 'ingredients',
            'number': 'number',
            'step': 'step'
        }

        self._equipment = equipment
        self._ingredients = ingredients
        self._number = number
        self._step = step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeRecipeInstructions_200_response_parsedInstructions_inner_steps_inner of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equipment(self):
        """Gets the equipment of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :return: The equipment of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :rtype: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :param equipment: The equipment of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :type equipment: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]
        """
        if equipment is not None and len(equipment) < 0:
            raise ValueError("Invalid value for `equipment`, number of items must be greater than or equal to `0`")

        self._equipment = equipment

    @property
    def ingredients(self):
        """Gets the ingredients of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :return: The ingredients of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :rtype: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :param ingredients: The ingredients of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :type ingredients: list[AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInnerEquipmentInner]
        """
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients

    @property
    def number(self):
        """Gets the number of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :return: The number of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :param number: The number of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :type number: float
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def step(self):
        """Gets the step of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :return: The step of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.


        :param step: The step of this AnalyzeRecipeInstructions200ResponseParsedInstructionsInnerStepsInner.
        :type step: str
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")
        if step is not None and len(step) < 1:
            raise ValueError("Invalid value for `step`, length must be greater than or equal to `1`")

        self._step = step
