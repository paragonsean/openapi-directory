# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_wine_pairing200_response_product_matches_inner import GetWinePairing200ResponseProductMatchesInner
from openapi_server import util


class GetWinePairing200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, paired_wines: List[str]=None, pairing_text: str=None, product_matches: list[GetWinePairing200ResponseProductMatchesInner]=None):
        """GetWinePairing200Response - a model defined in OpenAPI

        :param paired_wines: The paired_wines of this GetWinePairing200Response.
        :param pairing_text: The pairing_text of this GetWinePairing200Response.
        :param product_matches: The product_matches of this GetWinePairing200Response.
        """
        self.openapi_types = {
            'paired_wines': List[str],
            'pairing_text': str,
            'product_matches': list[GetWinePairing200ResponseProductMatchesInner]
        }

        self.attribute_map = {
            'paired_wines': 'pairedWines',
            'pairing_text': 'pairingText',
            'product_matches': 'productMatches'
        }

        self._paired_wines = paired_wines
        self._pairing_text = pairing_text
        self._product_matches = product_matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWinePairing200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getWinePairing_200_response of this GetWinePairing200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paired_wines(self):
        """Gets the paired_wines of this GetWinePairing200Response.


        :return: The paired_wines of this GetWinePairing200Response.
        :rtype: List[str]
        """
        return self._paired_wines

    @paired_wines.setter
    def paired_wines(self, paired_wines):
        """Sets the paired_wines of this GetWinePairing200Response.


        :param paired_wines: The paired_wines of this GetWinePairing200Response.
        :type paired_wines: List[str]
        """
        if paired_wines is None:
            raise ValueError("Invalid value for `paired_wines`, must not be `None`")

        self._paired_wines = paired_wines

    @property
    def pairing_text(self):
        """Gets the pairing_text of this GetWinePairing200Response.


        :return: The pairing_text of this GetWinePairing200Response.
        :rtype: str
        """
        return self._pairing_text

    @pairing_text.setter
    def pairing_text(self, pairing_text):
        """Sets the pairing_text of this GetWinePairing200Response.


        :param pairing_text: The pairing_text of this GetWinePairing200Response.
        :type pairing_text: str
        """
        if pairing_text is None:
            raise ValueError("Invalid value for `pairing_text`, must not be `None`")
        if pairing_text is not None and len(pairing_text) < 1:
            raise ValueError("Invalid value for `pairing_text`, length must be greater than or equal to `1`")

        self._pairing_text = pairing_text

    @property
    def product_matches(self):
        """Gets the product_matches of this GetWinePairing200Response.


        :return: The product_matches of this GetWinePairing200Response.
        :rtype: list[GetWinePairing200ResponseProductMatchesInner]
        """
        return self._product_matches

    @product_matches.setter
    def product_matches(self, product_matches):
        """Sets the product_matches of this GetWinePairing200Response.


        :param product_matches: The product_matches of this GetWinePairing200Response.
        :type product_matches: list[GetWinePairing200ResponseProductMatchesInner]
        """
        if product_matches is None:
            raise ValueError("Invalid value for `product_matches`, must not be `None`")
        if product_matches is not None and len(product_matches) < 0:
            raise ValueError("Invalid value for `product_matches`, number of items must be greater than or equal to `0`")

        self._product_matches = product_matches
