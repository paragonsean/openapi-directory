# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_menu_item_information200_response_nutrition import GetMenuItemInformation200ResponseNutrition
from openapi_server.models.search_menu_items200_response_menu_items_inner_servings import SearchMenuItems200ResponseMenuItemsInnerServings
from openapi_server import util


class GetMenuItemInformation200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badges: List[str]=None, breadcrumbs: List[str]=None, generated_text: str=None, id: int=None, image_type: str=None, likes: float=None, nutrition: GetMenuItemInformation200ResponseNutrition=None, price: float=None, restaurant_chain: str=None, servings: SearchMenuItems200ResponseMenuItemsInnerServings=None, spoonacular_score: float=None, title: str=None):
        """GetMenuItemInformation200Response - a model defined in OpenAPI

        :param badges: The badges of this GetMenuItemInformation200Response.
        :param breadcrumbs: The breadcrumbs of this GetMenuItemInformation200Response.
        :param generated_text: The generated_text of this GetMenuItemInformation200Response.
        :param id: The id of this GetMenuItemInformation200Response.
        :param image_type: The image_type of this GetMenuItemInformation200Response.
        :param likes: The likes of this GetMenuItemInformation200Response.
        :param nutrition: The nutrition of this GetMenuItemInformation200Response.
        :param price: The price of this GetMenuItemInformation200Response.
        :param restaurant_chain: The restaurant_chain of this GetMenuItemInformation200Response.
        :param servings: The servings of this GetMenuItemInformation200Response.
        :param spoonacular_score: The spoonacular_score of this GetMenuItemInformation200Response.
        :param title: The title of this GetMenuItemInformation200Response.
        """
        self.openapi_types = {
            'badges': List[str],
            'breadcrumbs': List[str],
            'generated_text': str,
            'id': int,
            'image_type': str,
            'likes': float,
            'nutrition': GetMenuItemInformation200ResponseNutrition,
            'price': float,
            'restaurant_chain': str,
            'servings': SearchMenuItems200ResponseMenuItemsInnerServings,
            'spoonacular_score': float,
            'title': str
        }

        self.attribute_map = {
            'badges': 'badges',
            'breadcrumbs': 'breadcrumbs',
            'generated_text': 'generatedText',
            'id': 'id',
            'image_type': 'imageType',
            'likes': 'likes',
            'nutrition': 'nutrition',
            'price': 'price',
            'restaurant_chain': 'restaurantChain',
            'servings': 'servings',
            'spoonacular_score': 'spoonacularScore',
            'title': 'title'
        }

        self._badges = badges
        self._breadcrumbs = breadcrumbs
        self._generated_text = generated_text
        self._id = id
        self._image_type = image_type
        self._likes = likes
        self._nutrition = nutrition
        self._price = price
        self._restaurant_chain = restaurant_chain
        self._servings = servings
        self._spoonacular_score = spoonacular_score
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMenuItemInformation200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMenuItemInformation_200_response of this GetMenuItemInformation200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badges(self):
        """Gets the badges of this GetMenuItemInformation200Response.


        :return: The badges of this GetMenuItemInformation200Response.
        :rtype: List[str]
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this GetMenuItemInformation200Response.


        :param badges: The badges of this GetMenuItemInformation200Response.
        :type badges: List[str]
        """
        if badges is None:
            raise ValueError("Invalid value for `badges`, must not be `None`")

        self._badges = badges

    @property
    def breadcrumbs(self):
        """Gets the breadcrumbs of this GetMenuItemInformation200Response.


        :return: The breadcrumbs of this GetMenuItemInformation200Response.
        :rtype: List[str]
        """
        return self._breadcrumbs

    @breadcrumbs.setter
    def breadcrumbs(self, breadcrumbs):
        """Sets the breadcrumbs of this GetMenuItemInformation200Response.


        :param breadcrumbs: The breadcrumbs of this GetMenuItemInformation200Response.
        :type breadcrumbs: List[str]
        """
        if breadcrumbs is None:
            raise ValueError("Invalid value for `breadcrumbs`, must not be `None`")

        self._breadcrumbs = breadcrumbs

    @property
    def generated_text(self):
        """Gets the generated_text of this GetMenuItemInformation200Response.


        :return: The generated_text of this GetMenuItemInformation200Response.
        :rtype: str
        """
        return self._generated_text

    @generated_text.setter
    def generated_text(self, generated_text):
        """Sets the generated_text of this GetMenuItemInformation200Response.


        :param generated_text: The generated_text of this GetMenuItemInformation200Response.
        :type generated_text: str
        """

        self._generated_text = generated_text

    @property
    def id(self):
        """Gets the id of this GetMenuItemInformation200Response.


        :return: The id of this GetMenuItemInformation200Response.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMenuItemInformation200Response.


        :param id: The id of this GetMenuItemInformation200Response.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_type(self):
        """Gets the image_type of this GetMenuItemInformation200Response.


        :return: The image_type of this GetMenuItemInformation200Response.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this GetMenuItemInformation200Response.


        :param image_type: The image_type of this GetMenuItemInformation200Response.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")
        if image_type is not None and len(image_type) < 1:
            raise ValueError("Invalid value for `image_type`, length must be greater than or equal to `1`")

        self._image_type = image_type

    @property
    def likes(self):
        """Gets the likes of this GetMenuItemInformation200Response.


        :return: The likes of this GetMenuItemInformation200Response.
        :rtype: float
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this GetMenuItemInformation200Response.


        :param likes: The likes of this GetMenuItemInformation200Response.
        :type likes: float
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def nutrition(self):
        """Gets the nutrition of this GetMenuItemInformation200Response.


        :return: The nutrition of this GetMenuItemInformation200Response.
        :rtype: GetMenuItemInformation200ResponseNutrition
        """
        return self._nutrition

    @nutrition.setter
    def nutrition(self, nutrition):
        """Sets the nutrition of this GetMenuItemInformation200Response.


        :param nutrition: The nutrition of this GetMenuItemInformation200Response.
        :type nutrition: GetMenuItemInformation200ResponseNutrition
        """
        if nutrition is None:
            raise ValueError("Invalid value for `nutrition`, must not be `None`")

        self._nutrition = nutrition

    @property
    def price(self):
        """Gets the price of this GetMenuItemInformation200Response.


        :return: The price of this GetMenuItemInformation200Response.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetMenuItemInformation200Response.


        :param price: The price of this GetMenuItemInformation200Response.
        :type price: float
        """

        self._price = price

    @property
    def restaurant_chain(self):
        """Gets the restaurant_chain of this GetMenuItemInformation200Response.


        :return: The restaurant_chain of this GetMenuItemInformation200Response.
        :rtype: str
        """
        return self._restaurant_chain

    @restaurant_chain.setter
    def restaurant_chain(self, restaurant_chain):
        """Sets the restaurant_chain of this GetMenuItemInformation200Response.


        :param restaurant_chain: The restaurant_chain of this GetMenuItemInformation200Response.
        :type restaurant_chain: str
        """
        if restaurant_chain is None:
            raise ValueError("Invalid value for `restaurant_chain`, must not be `None`")
        if restaurant_chain is not None and len(restaurant_chain) < 1:
            raise ValueError("Invalid value for `restaurant_chain`, length must be greater than or equal to `1`")

        self._restaurant_chain = restaurant_chain

    @property
    def servings(self):
        """Gets the servings of this GetMenuItemInformation200Response.


        :return: The servings of this GetMenuItemInformation200Response.
        :rtype: SearchMenuItems200ResponseMenuItemsInnerServings
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this GetMenuItemInformation200Response.


        :param servings: The servings of this GetMenuItemInformation200Response.
        :type servings: SearchMenuItems200ResponseMenuItemsInnerServings
        """
        if servings is None:
            raise ValueError("Invalid value for `servings`, must not be `None`")

        self._servings = servings

    @property
    def spoonacular_score(self):
        """Gets the spoonacular_score of this GetMenuItemInformation200Response.


        :return: The spoonacular_score of this GetMenuItemInformation200Response.
        :rtype: float
        """
        return self._spoonacular_score

    @spoonacular_score.setter
    def spoonacular_score(self, spoonacular_score):
        """Sets the spoonacular_score of this GetMenuItemInformation200Response.


        :param spoonacular_score: The spoonacular_score of this GetMenuItemInformation200Response.
        :type spoonacular_score: float
        """

        self._spoonacular_score = spoonacular_score

    @property
    def title(self):
        """Gets the title of this GetMenuItemInformation200Response.


        :return: The title of this GetMenuItemInformation200Response.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetMenuItemInformation200Response.


        :param title: The title of this GetMenuItemInformation200Response.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
