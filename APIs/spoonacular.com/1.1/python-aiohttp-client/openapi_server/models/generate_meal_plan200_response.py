# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generate_meal_plan200_response_meals_inner import GenerateMealPlan200ResponseMealsInner
from openapi_server.models.generate_meal_plan200_response_nutrients import GenerateMealPlan200ResponseNutrients
from openapi_server import util


class GenerateMealPlan200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meals: list[GenerateMealPlan200ResponseMealsInner]=None, nutrients: GenerateMealPlan200ResponseNutrients=None):
        """GenerateMealPlan200Response - a model defined in OpenAPI

        :param meals: The meals of this GenerateMealPlan200Response.
        :param nutrients: The nutrients of this GenerateMealPlan200Response.
        """
        self.openapi_types = {
            'meals': list[GenerateMealPlan200ResponseMealsInner],
            'nutrients': GenerateMealPlan200ResponseNutrients
        }

        self.attribute_map = {
            'meals': 'meals',
            'nutrients': 'nutrients'
        }

        self._meals = meals
        self._nutrients = nutrients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateMealPlan200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The generateMealPlan_200_response of this GenerateMealPlan200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meals(self):
        """Gets the meals of this GenerateMealPlan200Response.


        :return: The meals of this GenerateMealPlan200Response.
        :rtype: list[GenerateMealPlan200ResponseMealsInner]
        """
        return self._meals

    @meals.setter
    def meals(self, meals):
        """Sets the meals of this GenerateMealPlan200Response.


        :param meals: The meals of this GenerateMealPlan200Response.
        :type meals: list[GenerateMealPlan200ResponseMealsInner]
        """
        if meals is None:
            raise ValueError("Invalid value for `meals`, must not be `None`")
        if meals is not None and len(meals) < 0:
            raise ValueError("Invalid value for `meals`, number of items must be greater than or equal to `0`")

        self._meals = meals

    @property
    def nutrients(self):
        """Gets the nutrients of this GenerateMealPlan200Response.


        :return: The nutrients of this GenerateMealPlan200Response.
        :rtype: GenerateMealPlan200ResponseNutrients
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this GenerateMealPlan200Response.


        :param nutrients: The nutrients of this GenerateMealPlan200Response.
        :type nutrients: GenerateMealPlan200ResponseNutrients
        """
        if nutrients is None:
            raise ValueError("Invalid value for `nutrients`, must not be `None`")

        self._nutrients = nutrients
