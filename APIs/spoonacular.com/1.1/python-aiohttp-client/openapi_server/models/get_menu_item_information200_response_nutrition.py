# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_ingredient_information200_response_nutrition_caloric_breakdown import GetIngredientInformation200ResponseNutritionCaloricBreakdown
from openapi_server.models.get_ingredient_information200_response_nutrition_nutrients_inner import GetIngredientInformation200ResponseNutritionNutrientsInner
from openapi_server import util


class GetMenuItemInformation200ResponseNutrition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caloric_breakdown: GetIngredientInformation200ResponseNutritionCaloricBreakdown=None, nutrients: list[GetIngredientInformation200ResponseNutritionNutrientsInner]=None):
        """GetMenuItemInformation200ResponseNutrition - a model defined in OpenAPI

        :param caloric_breakdown: The caloric_breakdown of this GetMenuItemInformation200ResponseNutrition.
        :param nutrients: The nutrients of this GetMenuItemInformation200ResponseNutrition.
        """
        self.openapi_types = {
            'caloric_breakdown': GetIngredientInformation200ResponseNutritionCaloricBreakdown,
            'nutrients': list[GetIngredientInformation200ResponseNutritionNutrientsInner]
        }

        self.attribute_map = {
            'caloric_breakdown': 'caloricBreakdown',
            'nutrients': 'nutrients'
        }

        self._caloric_breakdown = caloric_breakdown
        self._nutrients = nutrients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMenuItemInformation200ResponseNutrition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMenuItemInformation_200_response_nutrition of this GetMenuItemInformation200ResponseNutrition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caloric_breakdown(self):
        """Gets the caloric_breakdown of this GetMenuItemInformation200ResponseNutrition.


        :return: The caloric_breakdown of this GetMenuItemInformation200ResponseNutrition.
        :rtype: GetIngredientInformation200ResponseNutritionCaloricBreakdown
        """
        return self._caloric_breakdown

    @caloric_breakdown.setter
    def caloric_breakdown(self, caloric_breakdown):
        """Sets the caloric_breakdown of this GetMenuItemInformation200ResponseNutrition.


        :param caloric_breakdown: The caloric_breakdown of this GetMenuItemInformation200ResponseNutrition.
        :type caloric_breakdown: GetIngredientInformation200ResponseNutritionCaloricBreakdown
        """
        if caloric_breakdown is None:
            raise ValueError("Invalid value for `caloric_breakdown`, must not be `None`")

        self._caloric_breakdown = caloric_breakdown

    @property
    def nutrients(self):
        """Gets the nutrients of this GetMenuItemInformation200ResponseNutrition.


        :return: The nutrients of this GetMenuItemInformation200ResponseNutrition.
        :rtype: list[GetIngredientInformation200ResponseNutritionNutrientsInner]
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this GetMenuItemInformation200ResponseNutrition.


        :param nutrients: The nutrients of this GetMenuItemInformation200ResponseNutrition.
        :type nutrients: list[GetIngredientInformation200ResponseNutritionNutrientsInner]
        """
        if nutrients is None:
            raise ValueError("Invalid value for `nutrients`, must not be `None`")
        if nutrients is not None and len(nutrients) < 0:
            raise ValueError("Invalid value for `nutrients`, number of items must be greater than or equal to `0`")

        self._nutrients = nutrients
