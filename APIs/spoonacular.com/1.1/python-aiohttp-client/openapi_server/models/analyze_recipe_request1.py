# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyzeRecipeRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredients: List[str]=None, instructions: str=None, servings: int=None, title: str=None):
        """AnalyzeRecipeRequest1 - a model defined in OpenAPI

        :param ingredients: The ingredients of this AnalyzeRecipeRequest1.
        :param instructions: The instructions of this AnalyzeRecipeRequest1.
        :param servings: The servings of this AnalyzeRecipeRequest1.
        :param title: The title of this AnalyzeRecipeRequest1.
        """
        self.openapi_types = {
            'ingredients': List[str],
            'instructions': str,
            'servings': int,
            'title': str
        }

        self.attribute_map = {
            'ingredients': 'ingredients',
            'instructions': 'instructions',
            'servings': 'servings',
            'title': 'title'
        }

        self._ingredients = ingredients
        self._instructions = instructions
        self._servings = servings
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeRecipeRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeRecipe_request_1 of this AnalyzeRecipeRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredients(self):
        """Gets the ingredients of this AnalyzeRecipeRequest1.


        :return: The ingredients of this AnalyzeRecipeRequest1.
        :rtype: List[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this AnalyzeRecipeRequest1.


        :param ingredients: The ingredients of this AnalyzeRecipeRequest1.
        :type ingredients: List[str]
        """

        self._ingredients = ingredients

    @property
    def instructions(self):
        """Gets the instructions of this AnalyzeRecipeRequest1.


        :return: The instructions of this AnalyzeRecipeRequest1.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this AnalyzeRecipeRequest1.


        :param instructions: The instructions of this AnalyzeRecipeRequest1.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def servings(self):
        """Gets the servings of this AnalyzeRecipeRequest1.


        :return: The servings of this AnalyzeRecipeRequest1.
        :rtype: int
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this AnalyzeRecipeRequest1.


        :param servings: The servings of this AnalyzeRecipeRequest1.
        :type servings: int
        """

        self._servings = servings

    @property
    def title(self):
        """Gets the title of this AnalyzeRecipeRequest1.


        :return: The title of this AnalyzeRecipeRequest1.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AnalyzeRecipeRequest1.


        :param title: The title of this AnalyzeRecipeRequest1.
        :type title: str
        """

        self._title = title
