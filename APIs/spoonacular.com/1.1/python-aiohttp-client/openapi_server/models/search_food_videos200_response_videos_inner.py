# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchFoodVideos200ResponseVideosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, rating: float=None, short_title: str=None, thumbnail: str=None, title: str=None, views: int=None, you_tube_id: str=None):
        """SearchFoodVideos200ResponseVideosInner - a model defined in OpenAPI

        :param length: The length of this SearchFoodVideos200ResponseVideosInner.
        :param rating: The rating of this SearchFoodVideos200ResponseVideosInner.
        :param short_title: The short_title of this SearchFoodVideos200ResponseVideosInner.
        :param thumbnail: The thumbnail of this SearchFoodVideos200ResponseVideosInner.
        :param title: The title of this SearchFoodVideos200ResponseVideosInner.
        :param views: The views of this SearchFoodVideos200ResponseVideosInner.
        :param you_tube_id: The you_tube_id of this SearchFoodVideos200ResponseVideosInner.
        """
        self.openapi_types = {
            'length': int,
            'rating': float,
            'short_title': str,
            'thumbnail': str,
            'title': str,
            'views': int,
            'you_tube_id': str
        }

        self.attribute_map = {
            'length': 'length',
            'rating': 'rating',
            'short_title': 'shortTitle',
            'thumbnail': 'thumbnail',
            'title': 'title',
            'views': 'views',
            'you_tube_id': 'youTubeId'
        }

        self._length = length
        self._rating = rating
        self._short_title = short_title
        self._thumbnail = thumbnail
        self._title = title
        self._views = views
        self._you_tube_id = you_tube_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFoodVideos200ResponseVideosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchFoodVideos_200_response_videos_inner of this SearchFoodVideos200ResponseVideosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this SearchFoodVideos200ResponseVideosInner.


        :return: The length of this SearchFoodVideos200ResponseVideosInner.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SearchFoodVideos200ResponseVideosInner.


        :param length: The length of this SearchFoodVideos200ResponseVideosInner.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def rating(self):
        """Gets the rating of this SearchFoodVideos200ResponseVideosInner.


        :return: The rating of this SearchFoodVideos200ResponseVideosInner.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SearchFoodVideos200ResponseVideosInner.


        :param rating: The rating of this SearchFoodVideos200ResponseVideosInner.
        :type rating: float
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def short_title(self):
        """Gets the short_title of this SearchFoodVideos200ResponseVideosInner.


        :return: The short_title of this SearchFoodVideos200ResponseVideosInner.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this SearchFoodVideos200ResponseVideosInner.


        :param short_title: The short_title of this SearchFoodVideos200ResponseVideosInner.
        :type short_title: str
        """
        if short_title is None:
            raise ValueError("Invalid value for `short_title`, must not be `None`")
        if short_title is not None and len(short_title) < 1:
            raise ValueError("Invalid value for `short_title`, length must be greater than or equal to `1`")

        self._short_title = short_title

    @property
    def thumbnail(self):
        """Gets the thumbnail of this SearchFoodVideos200ResponseVideosInner.


        :return: The thumbnail of this SearchFoodVideos200ResponseVideosInner.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this SearchFoodVideos200ResponseVideosInner.


        :param thumbnail: The thumbnail of this SearchFoodVideos200ResponseVideosInner.
        :type thumbnail: str
        """
        if thumbnail is None:
            raise ValueError("Invalid value for `thumbnail`, must not be `None`")
        if thumbnail is not None and len(thumbnail) < 1:
            raise ValueError("Invalid value for `thumbnail`, length must be greater than or equal to `1`")

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this SearchFoodVideos200ResponseVideosInner.


        :return: The title of this SearchFoodVideos200ResponseVideosInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchFoodVideos200ResponseVideosInner.


        :param title: The title of this SearchFoodVideos200ResponseVideosInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def views(self):
        """Gets the views of this SearchFoodVideos200ResponseVideosInner.


        :return: The views of this SearchFoodVideos200ResponseVideosInner.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this SearchFoodVideos200ResponseVideosInner.


        :param views: The views of this SearchFoodVideos200ResponseVideosInner.
        :type views: int
        """
        if views is None:
            raise ValueError("Invalid value for `views`, must not be `None`")

        self._views = views

    @property
    def you_tube_id(self):
        """Gets the you_tube_id of this SearchFoodVideos200ResponseVideosInner.


        :return: The you_tube_id of this SearchFoodVideos200ResponseVideosInner.
        :rtype: str
        """
        return self._you_tube_id

    @you_tube_id.setter
    def you_tube_id(self, you_tube_id):
        """Sets the you_tube_id of this SearchFoodVideos200ResponseVideosInner.


        :param you_tube_id: The you_tube_id of this SearchFoodVideos200ResponseVideosInner.
        :type you_tube_id: str
        """
        if you_tube_id is None:
            raise ValueError("Invalid value for `you_tube_id`, must not be `None`")
        if you_tube_id is not None and len(you_tube_id) < 1:
            raise ValueError("Invalid value for `you_tube_id`, length must be greater than or equal to `1`")

        self._you_tube_id = you_tube_id
