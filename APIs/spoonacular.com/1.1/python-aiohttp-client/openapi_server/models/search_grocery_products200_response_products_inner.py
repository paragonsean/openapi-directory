# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchGroceryProducts200ResponseProductsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, image_type: str=None, title: str=None):
        """SearchGroceryProducts200ResponseProductsInner - a model defined in OpenAPI

        :param id: The id of this SearchGroceryProducts200ResponseProductsInner.
        :param image_type: The image_type of this SearchGroceryProducts200ResponseProductsInner.
        :param title: The title of this SearchGroceryProducts200ResponseProductsInner.
        """
        self.openapi_types = {
            'id': int,
            'image_type': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'image_type': 'imageType',
            'title': 'title'
        }

        self._id = id
        self._image_type = image_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGroceryProducts200ResponseProductsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchGroceryProducts_200_response_products_inner of this SearchGroceryProducts200ResponseProductsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SearchGroceryProducts200ResponseProductsInner.


        :return: The id of this SearchGroceryProducts200ResponseProductsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchGroceryProducts200ResponseProductsInner.


        :param id: The id of this SearchGroceryProducts200ResponseProductsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_type(self):
        """Gets the image_type of this SearchGroceryProducts200ResponseProductsInner.


        :return: The image_type of this SearchGroceryProducts200ResponseProductsInner.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this SearchGroceryProducts200ResponseProductsInner.


        :param image_type: The image_type of this SearchGroceryProducts200ResponseProductsInner.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")
        if image_type is not None and len(image_type) < 1:
            raise ValueError("Invalid value for `image_type`, length must be greater than or equal to `1`")

        self._image_type = image_type

    @property
    def title(self):
        """Gets the title of this SearchGroceryProducts200ResponseProductsInner.


        :return: The title of this SearchGroceryProducts200ResponseProductsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchGroceryProducts200ResponseProductsInner.


        :param title: The title of this SearchGroceryProducts200ResponseProductsInner.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title
