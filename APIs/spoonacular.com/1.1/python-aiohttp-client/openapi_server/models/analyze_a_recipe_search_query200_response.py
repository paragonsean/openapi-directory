# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_a_recipe_search_query200_response_dishes_inner import AnalyzeARecipeSearchQuery200ResponseDishesInner
from openapi_server.models.analyze_a_recipe_search_query200_response_ingredients_inner import AnalyzeARecipeSearchQuery200ResponseIngredientsInner
from openapi_server import util


class AnalyzeARecipeSearchQuery200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cuisines: List[str]=None, dishes: list[AnalyzeARecipeSearchQuery200ResponseDishesInner]=None, ingredients: list[AnalyzeARecipeSearchQuery200ResponseIngredientsInner]=None, modifiers: List[str]=None):
        """AnalyzeARecipeSearchQuery200Response - a model defined in OpenAPI

        :param cuisines: The cuisines of this AnalyzeARecipeSearchQuery200Response.
        :param dishes: The dishes of this AnalyzeARecipeSearchQuery200Response.
        :param ingredients: The ingredients of this AnalyzeARecipeSearchQuery200Response.
        :param modifiers: The modifiers of this AnalyzeARecipeSearchQuery200Response.
        """
        self.openapi_types = {
            'cuisines': List[str],
            'dishes': list[AnalyzeARecipeSearchQuery200ResponseDishesInner],
            'ingredients': list[AnalyzeARecipeSearchQuery200ResponseIngredientsInner],
            'modifiers': List[str]
        }

        self.attribute_map = {
            'cuisines': 'cuisines',
            'dishes': 'dishes',
            'ingredients': 'ingredients',
            'modifiers': 'modifiers'
        }

        self._cuisines = cuisines
        self._dishes = dishes
        self._ingredients = ingredients
        self._modifiers = modifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeARecipeSearchQuery200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeARecipeSearchQuery_200_response of this AnalyzeARecipeSearchQuery200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cuisines(self):
        """Gets the cuisines of this AnalyzeARecipeSearchQuery200Response.


        :return: The cuisines of this AnalyzeARecipeSearchQuery200Response.
        :rtype: List[str]
        """
        return self._cuisines

    @cuisines.setter
    def cuisines(self, cuisines):
        """Sets the cuisines of this AnalyzeARecipeSearchQuery200Response.


        :param cuisines: The cuisines of this AnalyzeARecipeSearchQuery200Response.
        :type cuisines: List[str]
        """
        if cuisines is None:
            raise ValueError("Invalid value for `cuisines`, must not be `None`")

        self._cuisines = cuisines

    @property
    def dishes(self):
        """Gets the dishes of this AnalyzeARecipeSearchQuery200Response.


        :return: The dishes of this AnalyzeARecipeSearchQuery200Response.
        :rtype: list[AnalyzeARecipeSearchQuery200ResponseDishesInner]
        """
        return self._dishes

    @dishes.setter
    def dishes(self, dishes):
        """Sets the dishes of this AnalyzeARecipeSearchQuery200Response.


        :param dishes: The dishes of this AnalyzeARecipeSearchQuery200Response.
        :type dishes: list[AnalyzeARecipeSearchQuery200ResponseDishesInner]
        """
        if dishes is None:
            raise ValueError("Invalid value for `dishes`, must not be `None`")
        if dishes is not None and len(dishes) < 0:
            raise ValueError("Invalid value for `dishes`, number of items must be greater than or equal to `0`")

        self._dishes = dishes

    @property
    def ingredients(self):
        """Gets the ingredients of this AnalyzeARecipeSearchQuery200Response.


        :return: The ingredients of this AnalyzeARecipeSearchQuery200Response.
        :rtype: list[AnalyzeARecipeSearchQuery200ResponseIngredientsInner]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this AnalyzeARecipeSearchQuery200Response.


        :param ingredients: The ingredients of this AnalyzeARecipeSearchQuery200Response.
        :type ingredients: list[AnalyzeARecipeSearchQuery200ResponseIngredientsInner]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")
        if ingredients is not None and len(ingredients) < 0:
            raise ValueError("Invalid value for `ingredients`, number of items must be greater than or equal to `0`")

        self._ingredients = ingredients

    @property
    def modifiers(self):
        """Gets the modifiers of this AnalyzeARecipeSearchQuery200Response.


        :return: The modifiers of this AnalyzeARecipeSearchQuery200Response.
        :rtype: List[str]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this AnalyzeARecipeSearchQuery200Response.


        :param modifiers: The modifiers of this AnalyzeARecipeSearchQuery200Response.
        :type modifiers: List[str]
        """
        if modifiers is None:
            raise ValueError("Invalid value for `modifiers`, must not be `None`")

        self._modifiers = modifiers
