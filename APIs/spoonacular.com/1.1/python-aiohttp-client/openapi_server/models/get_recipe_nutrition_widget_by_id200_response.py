# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_recipe_nutrition_widget_by_id200_response_bad_inner import GetRecipeNutritionWidgetByID200ResponseBadInner
from openapi_server import util


class GetRecipeNutritionWidgetByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bad: list[GetRecipeNutritionWidgetByID200ResponseBadInner]=None, calories: str=None, carbs: str=None, fat: str=None, good: list[GetRecipeNutritionWidgetByID200ResponseBadInner]=None, protein: str=None):
        """GetRecipeNutritionWidgetByID200Response - a model defined in OpenAPI

        :param bad: The bad of this GetRecipeNutritionWidgetByID200Response.
        :param calories: The calories of this GetRecipeNutritionWidgetByID200Response.
        :param carbs: The carbs of this GetRecipeNutritionWidgetByID200Response.
        :param fat: The fat of this GetRecipeNutritionWidgetByID200Response.
        :param good: The good of this GetRecipeNutritionWidgetByID200Response.
        :param protein: The protein of this GetRecipeNutritionWidgetByID200Response.
        """
        self.openapi_types = {
            'bad': list[GetRecipeNutritionWidgetByID200ResponseBadInner],
            'calories': str,
            'carbs': str,
            'fat': str,
            'good': list[GetRecipeNutritionWidgetByID200ResponseBadInner],
            'protein': str
        }

        self.attribute_map = {
            'bad': 'bad',
            'calories': 'calories',
            'carbs': 'carbs',
            'fat': 'fat',
            'good': 'good',
            'protein': 'protein'
        }

        self._bad = bad
        self._calories = calories
        self._carbs = carbs
        self._fat = fat
        self._good = good
        self._protein = protein

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeNutritionWidgetByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeNutritionWidgetByID_200_response of this GetRecipeNutritionWidgetByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bad(self):
        """Gets the bad of this GetRecipeNutritionWidgetByID200Response.


        :return: The bad of this GetRecipeNutritionWidgetByID200Response.
        :rtype: list[GetRecipeNutritionWidgetByID200ResponseBadInner]
        """
        return self._bad

    @bad.setter
    def bad(self, bad):
        """Sets the bad of this GetRecipeNutritionWidgetByID200Response.


        :param bad: The bad of this GetRecipeNutritionWidgetByID200Response.
        :type bad: list[GetRecipeNutritionWidgetByID200ResponseBadInner]
        """
        if bad is None:
            raise ValueError("Invalid value for `bad`, must not be `None`")
        if bad is not None and len(bad) < 0:
            raise ValueError("Invalid value for `bad`, number of items must be greater than or equal to `0`")

        self._bad = bad

    @property
    def calories(self):
        """Gets the calories of this GetRecipeNutritionWidgetByID200Response.


        :return: The calories of this GetRecipeNutritionWidgetByID200Response.
        :rtype: str
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this GetRecipeNutritionWidgetByID200Response.


        :param calories: The calories of this GetRecipeNutritionWidgetByID200Response.
        :type calories: str
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")
        if calories is not None and len(calories) < 1:
            raise ValueError("Invalid value for `calories`, length must be greater than or equal to `1`")

        self._calories = calories

    @property
    def carbs(self):
        """Gets the carbs of this GetRecipeNutritionWidgetByID200Response.


        :return: The carbs of this GetRecipeNutritionWidgetByID200Response.
        :rtype: str
        """
        return self._carbs

    @carbs.setter
    def carbs(self, carbs):
        """Sets the carbs of this GetRecipeNutritionWidgetByID200Response.


        :param carbs: The carbs of this GetRecipeNutritionWidgetByID200Response.
        :type carbs: str
        """
        if carbs is None:
            raise ValueError("Invalid value for `carbs`, must not be `None`")
        if carbs is not None and len(carbs) < 1:
            raise ValueError("Invalid value for `carbs`, length must be greater than or equal to `1`")

        self._carbs = carbs

    @property
    def fat(self):
        """Gets the fat of this GetRecipeNutritionWidgetByID200Response.


        :return: The fat of this GetRecipeNutritionWidgetByID200Response.
        :rtype: str
        """
        return self._fat

    @fat.setter
    def fat(self, fat):
        """Sets the fat of this GetRecipeNutritionWidgetByID200Response.


        :param fat: The fat of this GetRecipeNutritionWidgetByID200Response.
        :type fat: str
        """
        if fat is None:
            raise ValueError("Invalid value for `fat`, must not be `None`")
        if fat is not None and len(fat) < 1:
            raise ValueError("Invalid value for `fat`, length must be greater than or equal to `1`")

        self._fat = fat

    @property
    def good(self):
        """Gets the good of this GetRecipeNutritionWidgetByID200Response.


        :return: The good of this GetRecipeNutritionWidgetByID200Response.
        :rtype: list[GetRecipeNutritionWidgetByID200ResponseBadInner]
        """
        return self._good

    @good.setter
    def good(self, good):
        """Sets the good of this GetRecipeNutritionWidgetByID200Response.


        :param good: The good of this GetRecipeNutritionWidgetByID200Response.
        :type good: list[GetRecipeNutritionWidgetByID200ResponseBadInner]
        """
        if good is None:
            raise ValueError("Invalid value for `good`, must not be `None`")
        if good is not None and len(good) < 0:
            raise ValueError("Invalid value for `good`, number of items must be greater than or equal to `0`")

        self._good = good

    @property
    def protein(self):
        """Gets the protein of this GetRecipeNutritionWidgetByID200Response.


        :return: The protein of this GetRecipeNutritionWidgetByID200Response.
        :rtype: str
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this GetRecipeNutritionWidgetByID200Response.


        :param protein: The protein of this GetRecipeNutritionWidgetByID200Response.
        :type protein: str
        """
        if protein is None:
            raise ValueError("Invalid value for `protein`, must not be `None`")
        if protein is not None and len(protein) < 1:
            raise ValueError("Invalid value for `protein`, length must be greater than or equal to `1`")

        self._protein = protein
