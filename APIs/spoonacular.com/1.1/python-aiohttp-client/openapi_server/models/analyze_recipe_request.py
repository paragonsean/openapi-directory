# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalyzeRecipeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_nutrition: bool=None, include_taste: bool=None, language: str=None):
        """AnalyzeRecipeRequest - a model defined in OpenAPI

        :param include_nutrition: The include_nutrition of this AnalyzeRecipeRequest.
        :param include_taste: The include_taste of this AnalyzeRecipeRequest.
        :param language: The language of this AnalyzeRecipeRequest.
        """
        self.openapi_types = {
            'include_nutrition': bool,
            'include_taste': bool,
            'language': str
        }

        self.attribute_map = {
            'include_nutrition': 'includeNutrition',
            'include_taste': 'includeTaste',
            'language': 'language'
        }

        self._include_nutrition = include_nutrition
        self._include_taste = include_taste
        self._language = language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeRecipeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analyzeRecipe_request of this AnalyzeRecipeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_nutrition(self):
        """Gets the include_nutrition of this AnalyzeRecipeRequest.

        Whether nutrition data should be added to correctly parsed ingredients.

        :return: The include_nutrition of this AnalyzeRecipeRequest.
        :rtype: bool
        """
        return self._include_nutrition

    @include_nutrition.setter
    def include_nutrition(self, include_nutrition):
        """Sets the include_nutrition of this AnalyzeRecipeRequest.

        Whether nutrition data should be added to correctly parsed ingredients.

        :param include_nutrition: The include_nutrition of this AnalyzeRecipeRequest.
        :type include_nutrition: bool
        """

        self._include_nutrition = include_nutrition

    @property
    def include_taste(self):
        """Gets the include_taste of this AnalyzeRecipeRequest.

        Whether taste data should be added to correctly parsed ingredients.

        :return: The include_taste of this AnalyzeRecipeRequest.
        :rtype: bool
        """
        return self._include_taste

    @include_taste.setter
    def include_taste(self, include_taste):
        """Sets the include_taste of this AnalyzeRecipeRequest.

        Whether taste data should be added to correctly parsed ingredients.

        :param include_taste: The include_taste of this AnalyzeRecipeRequest.
        :type include_taste: bool
        """

        self._include_taste = include_taste

    @property
    def language(self):
        """Gets the language of this AnalyzeRecipeRequest.

        The input language, either \"en\" or \"de\".

        :return: The language of this AnalyzeRecipeRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this AnalyzeRecipeRequest.

        The input language, either \"en\" or \"de\".

        :param language: The language of this AnalyzeRecipeRequest.
        :type language: str
        """

        self._language = language
