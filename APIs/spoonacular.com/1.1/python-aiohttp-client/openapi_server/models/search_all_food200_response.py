# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_all_food200_response_search_results_inner import SearchAllFood200ResponseSearchResultsInner
from openapi_server import util


class SearchAllFood200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: int=None, offset: int=None, query: str=None, search_results: list[SearchAllFood200ResponseSearchResultsInner]=None, total_results: int=None):
        """SearchAllFood200Response - a model defined in OpenAPI

        :param limit: The limit of this SearchAllFood200Response.
        :param offset: The offset of this SearchAllFood200Response.
        :param query: The query of this SearchAllFood200Response.
        :param search_results: The search_results of this SearchAllFood200Response.
        :param total_results: The total_results of this SearchAllFood200Response.
        """
        self.openapi_types = {
            'limit': int,
            'offset': int,
            'query': str,
            'search_results': list[SearchAllFood200ResponseSearchResultsInner],
            'total_results': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'offset': 'offset',
            'query': 'query',
            'search_results': 'searchResults',
            'total_results': 'totalResults'
        }

        self._limit = limit
        self._offset = offset
        self._query = query
        self._search_results = search_results
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchAllFood200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchAllFood_200_response of this SearchAllFood200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this SearchAllFood200Response.


        :return: The limit of this SearchAllFood200Response.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchAllFood200Response.


        :param limit: The limit of this SearchAllFood200Response.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this SearchAllFood200Response.


        :return: The offset of this SearchAllFood200Response.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchAllFood200Response.


        :param offset: The offset of this SearchAllFood200Response.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def query(self):
        """Gets the query of this SearchAllFood200Response.


        :return: The query of this SearchAllFood200Response.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchAllFood200Response.


        :param query: The query of this SearchAllFood200Response.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")
        if query is not None and len(query) < 1:
            raise ValueError("Invalid value for `query`, length must be greater than or equal to `1`")

        self._query = query

    @property
    def search_results(self):
        """Gets the search_results of this SearchAllFood200Response.


        :return: The search_results of this SearchAllFood200Response.
        :rtype: list[SearchAllFood200ResponseSearchResultsInner]
        """
        return self._search_results

    @search_results.setter
    def search_results(self, search_results):
        """Sets the search_results of this SearchAllFood200Response.


        :param search_results: The search_results of this SearchAllFood200Response.
        :type search_results: list[SearchAllFood200ResponseSearchResultsInner]
        """
        if search_results is None:
            raise ValueError("Invalid value for `search_results`, must not be `None`")
        if search_results is not None and len(search_results) < 0:
            raise ValueError("Invalid value for `search_results`, number of items must be greater than or equal to `0`")

        self._search_results = search_results

    @property
    def total_results(self):
        """Gets the total_results of this SearchAllFood200Response.


        :return: The total_results of this SearchAllFood200Response.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this SearchAllFood200Response.


        :param total_results: The total_results of this SearchAllFood200Response.
        :type total_results: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results
