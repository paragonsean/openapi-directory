# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRecipeNutritionWidgetByID200ResponseBadInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, indented: bool=None, name: str=None, percent_of_daily_needs: float=None):
        """GetRecipeNutritionWidgetByID200ResponseBadInner - a model defined in OpenAPI

        :param amount: The amount of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :param indented: The indented of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :param name: The name of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :param percent_of_daily_needs: The percent_of_daily_needs of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        """
        self.openapi_types = {
            'amount': str,
            'indented': bool,
            'name': str,
            'percent_of_daily_needs': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'indented': 'indented',
            'name': 'name',
            'percent_of_daily_needs': 'percentOfDailyNeeds'
        }

        self._amount = amount
        self._indented = indented
        self._name = name
        self._percent_of_daily_needs = percent_of_daily_needs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeNutritionWidgetByID200ResponseBadInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeNutritionWidgetByID_200_response_bad_inner of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :return: The amount of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :param amount: The amount of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and len(amount) < 1:
            raise ValueError("Invalid value for `amount`, length must be greater than or equal to `1`")

        self._amount = amount

    @property
    def indented(self):
        """Gets the indented of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :return: The indented of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :rtype: bool
        """
        return self._indented

    @indented.setter
    def indented(self, indented):
        """Sets the indented of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :param indented: The indented of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :type indented: bool
        """
        if indented is None:
            raise ValueError("Invalid value for `indented`, must not be `None`")

        self._indented = indented

    @property
    def name(self):
        """Gets the name of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :return: The name of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :param name: The name of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def percent_of_daily_needs(self):
        """Gets the percent_of_daily_needs of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :return: The percent_of_daily_needs of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :rtype: float
        """
        return self._percent_of_daily_needs

    @percent_of_daily_needs.setter
    def percent_of_daily_needs(self, percent_of_daily_needs):
        """Sets the percent_of_daily_needs of this GetRecipeNutritionWidgetByID200ResponseBadInner.


        :param percent_of_daily_needs: The percent_of_daily_needs of this GetRecipeNutritionWidgetByID200ResponseBadInner.
        :type percent_of_daily_needs: float
        """
        if percent_of_daily_needs is None:
            raise ValueError("Invalid value for `percent_of_daily_needs`, must not be `None`")

        self._percent_of_daily_needs = percent_of_daily_needs
