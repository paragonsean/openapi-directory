# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetWineDescription200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wine_description: str=None):
        """GetWineDescription200Response - a model defined in OpenAPI

        :param wine_description: The wine_description of this GetWineDescription200Response.
        """
        self.openapi_types = {
            'wine_description': str
        }

        self.attribute_map = {
            'wine_description': 'wineDescription'
        }

        self._wine_description = wine_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetWineDescription200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getWineDescription_200_response of this GetWineDescription200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wine_description(self):
        """Gets the wine_description of this GetWineDescription200Response.


        :return: The wine_description of this GetWineDescription200Response.
        :rtype: str
        """
        return self._wine_description

    @wine_description.setter
    def wine_description(self, wine_description):
        """Sets the wine_description of this GetWineDescription200Response.


        :param wine_description: The wine_description of this GetWineDescription200Response.
        :type wine_description: str
        """
        if wine_description is None:
            raise ValueError("Invalid value for `wine_description`, must not be `None`")
        if wine_description is not None and len(wine_description) < 1:
            raise ValueError("Invalid value for `wine_description`, length must be greater than or equal to `1`")

        self._wine_description = wine_description
