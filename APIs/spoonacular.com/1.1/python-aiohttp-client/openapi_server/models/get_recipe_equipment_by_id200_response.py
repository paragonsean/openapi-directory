# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_recipe_equipment_by_id200_response_equipment_inner import GetRecipeEquipmentByID200ResponseEquipmentInner
from openapi_server import util


class GetRecipeEquipmentByID200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equipment: list[GetRecipeEquipmentByID200ResponseEquipmentInner]=None):
        """GetRecipeEquipmentByID200Response - a model defined in OpenAPI

        :param equipment: The equipment of this GetRecipeEquipmentByID200Response.
        """
        self.openapi_types = {
            'equipment': list[GetRecipeEquipmentByID200ResponseEquipmentInner]
        }

        self.attribute_map = {
            'equipment': 'equipment'
        }

        self._equipment = equipment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecipeEquipmentByID200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getRecipeEquipmentByID_200_response of this GetRecipeEquipmentByID200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equipment(self):
        """Gets the equipment of this GetRecipeEquipmentByID200Response.


        :return: The equipment of this GetRecipeEquipmentByID200Response.
        :rtype: list[GetRecipeEquipmentByID200ResponseEquipmentInner]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this GetRecipeEquipmentByID200Response.


        :param equipment: The equipment of this GetRecipeEquipmentByID200Response.
        :type equipment: list[GetRecipeEquipmentByID200ResponseEquipmentInner]
        """
        if equipment is None:
            raise ValueError("Invalid value for `equipment`, must not be `None`")
        if equipment is not None and len(equipment) < 0:
            raise ValueError("Invalid value for `equipment`, number of items must be greater than or equal to `0`")

        self._equipment = equipment
