# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_site_content200_response_articles_inner import SearchSiteContent200ResponseArticlesInner
from openapi_server.models.search_site_content200_response_grocery_products_inner import SearchSiteContent200ResponseGroceryProductsInner
from openapi_server import util


class SearchSiteContent200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, articles: list[SearchSiteContent200ResponseArticlesInner]=None, grocery_products: list[SearchSiteContent200ResponseGroceryProductsInner]=None, menu_items: list[SearchSiteContent200ResponseGroceryProductsInner]=None, recipes: list[SearchSiteContent200ResponseGroceryProductsInner]=None):
        """SearchSiteContent200Response - a model defined in OpenAPI

        :param articles: The articles of this SearchSiteContent200Response.
        :param grocery_products: The grocery_products of this SearchSiteContent200Response.
        :param menu_items: The menu_items of this SearchSiteContent200Response.
        :param recipes: The recipes of this SearchSiteContent200Response.
        """
        self.openapi_types = {
            'articles': list[SearchSiteContent200ResponseArticlesInner],
            'grocery_products': list[SearchSiteContent200ResponseGroceryProductsInner],
            'menu_items': list[SearchSiteContent200ResponseGroceryProductsInner],
            'recipes': list[SearchSiteContent200ResponseGroceryProductsInner]
        }

        self.attribute_map = {
            'articles': 'Articles',
            'grocery_products': 'Grocery Products',
            'menu_items': 'Menu Items',
            'recipes': 'Recipes'
        }

        self._articles = articles
        self._grocery_products = grocery_products
        self._menu_items = menu_items
        self._recipes = recipes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchSiteContent200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The searchSiteContent_200_response of this SearchSiteContent200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def articles(self):
        """Gets the articles of this SearchSiteContent200Response.


        :return: The articles of this SearchSiteContent200Response.
        :rtype: list[SearchSiteContent200ResponseArticlesInner]
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this SearchSiteContent200Response.


        :param articles: The articles of this SearchSiteContent200Response.
        :type articles: list[SearchSiteContent200ResponseArticlesInner]
        """
        if articles is None:
            raise ValueError("Invalid value for `articles`, must not be `None`")
        if articles is not None and len(articles) < 0:
            raise ValueError("Invalid value for `articles`, number of items must be greater than or equal to `0`")

        self._articles = articles

    @property
    def grocery_products(self):
        """Gets the grocery_products of this SearchSiteContent200Response.


        :return: The grocery_products of this SearchSiteContent200Response.
        :rtype: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        return self._grocery_products

    @grocery_products.setter
    def grocery_products(self, grocery_products):
        """Sets the grocery_products of this SearchSiteContent200Response.


        :param grocery_products: The grocery_products of this SearchSiteContent200Response.
        :type grocery_products: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        if grocery_products is None:
            raise ValueError("Invalid value for `grocery_products`, must not be `None`")
        if grocery_products is not None and len(grocery_products) < 0:
            raise ValueError("Invalid value for `grocery_products`, number of items must be greater than or equal to `0`")

        self._grocery_products = grocery_products

    @property
    def menu_items(self):
        """Gets the menu_items of this SearchSiteContent200Response.


        :return: The menu_items of this SearchSiteContent200Response.
        :rtype: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        return self._menu_items

    @menu_items.setter
    def menu_items(self, menu_items):
        """Sets the menu_items of this SearchSiteContent200Response.


        :param menu_items: The menu_items of this SearchSiteContent200Response.
        :type menu_items: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        if menu_items is None:
            raise ValueError("Invalid value for `menu_items`, must not be `None`")
        if menu_items is not None and len(menu_items) < 0:
            raise ValueError("Invalid value for `menu_items`, number of items must be greater than or equal to `0`")

        self._menu_items = menu_items

    @property
    def recipes(self):
        """Gets the recipes of this SearchSiteContent200Response.


        :return: The recipes of this SearchSiteContent200Response.
        :rtype: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        return self._recipes

    @recipes.setter
    def recipes(self, recipes):
        """Sets the recipes of this SearchSiteContent200Response.


        :param recipes: The recipes of this SearchSiteContent200Response.
        :type recipes: list[SearchSiteContent200ResponseGroceryProductsInner]
        """
        if recipes is None:
            raise ValueError("Invalid value for `recipes`, must not be `None`")
        if recipes is not None and len(recipes) < 0:
            raise ValueError("Invalid value for `recipes`, number of items must be greater than or equal to `0`")

        self._recipes = recipes
