/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BenefitsDiscountsInner from './BenefitsDiscountsInner';
import BenefitsIncentivesInner from './BenefitsIncentivesInner';

/**
 * The Benefits model module.
 * @module model/Benefits
 * @version 1.5.3
 */
class Benefits {
    /**
     * Constructs a new <code>Benefits</code>.
     * Plan benefits to be displayed to customer
     * @alias module:model/Benefits
     * @param discounts {Array.<module:model/BenefitsDiscountsInner>} Discounts available for this plan
     * @param incentives {Array.<module:model/BenefitsIncentivesInner>} Inventives available for this plan
     * @param name {String} Name of this section when rendering
     */
    constructor(discounts, incentives, name) { 
        
        Benefits.initialize(this, discounts, incentives, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discounts, incentives, name) { 
        obj['discounts'] = discounts;
        obj['incentives'] = incentives;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Benefits</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Benefits} obj Optional instance to populate.
     * @return {module:model/Benefits} The populated <code>Benefits</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Benefits();

            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [BenefitsDiscountsInner]);
            }
            if (data.hasOwnProperty('incentives')) {
                obj['incentives'] = ApiClient.convertToType(data['incentives'], [BenefitsIncentivesInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Benefits</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Benefits</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Benefits.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discounts'])) {
                throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
            }
            // validate the optional field `discounts` (array)
            for (const item of data['discounts']) {
                BenefitsDiscountsInner.validateJSON(item);
            };
        }
        if (data['incentives']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['incentives'])) {
                throw new Error("Expected the field `incentives` to be an array in the JSON data but got " + data['incentives']);
            }
            // validate the optional field `incentives` (array)
            for (const item of data['incentives']) {
                BenefitsIncentivesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Benefits.RequiredProperties = ["discounts", "incentives", "name"];

/**
 * Discounts available for this plan
 * @member {Array.<module:model/BenefitsDiscountsInner>} discounts
 */
Benefits.prototype['discounts'] = undefined;

/**
 * Inventives available for this plan
 * @member {Array.<module:model/BenefitsIncentivesInner>} incentives
 */
Benefits.prototype['incentives'] = undefined;

/**
 * Name of this section when rendering
 * @member {String} name
 */
Benefits.prototype['name'] = undefined;






export default Benefits;

