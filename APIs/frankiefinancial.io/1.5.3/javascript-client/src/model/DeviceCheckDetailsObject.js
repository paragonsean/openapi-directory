/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyValuePairObject from './KeyValuePairObject';

/**
 * The DeviceCheckDetailsObject model module.
 * @module model/DeviceCheckDetailsObject
 * @version 1.5.3
 */
class DeviceCheckDetailsObject {
    /**
     * Constructs a new <code>DeviceCheckDetailsObject</code>.
     * Contains any/all details we want to pass on to the device/biometric checking service as part of an activity / transaction. A transaction isn&#39;t just a payment, but can represent a number of different interaction types. See below for more. 
     * @alias module:model/DeviceCheckDetailsObject
     */
    constructor() { 
        
        DeviceCheckDetailsObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceCheckDetailsObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceCheckDetailsObject} obj Optional instance to populate.
     * @return {module:model/DeviceCheckDetailsObject} The populated <code>DeviceCheckDetailsObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceCheckDetailsObject();

            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'String');
            }
            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], [KeyValuePairObject]);
            }
            if (data.hasOwnProperty('checkSessionKey')) {
                obj['checkSessionKey'] = ApiClient.convertToType(data['checkSessionKey'], 'String');
            }
            if (data.hasOwnProperty('checkType')) {
                obj['checkType'] = ApiClient.convertToType(data['checkType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceCheckDetailsObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceCheckDetailsObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activityType'] && !(typeof data['activityType'] === 'string' || data['activityType'] instanceof String)) {
            throw new Error("Expected the field `activityType` to be a primitive type in the JSON string but got " + data['activityType']);
        }
        if (data['additionalData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalData'])) {
                throw new Error("Expected the field `additionalData` to be an array in the JSON data but got " + data['additionalData']);
            }
            // validate the optional field `additionalData` (array)
            for (const item of data['additionalData']) {
                KeyValuePairObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['checkSessionKey'] && !(typeof data['checkSessionKey'] === 'string' || data['checkSessionKey'] instanceof String)) {
            throw new Error("Expected the field `checkSessionKey` to be a primitive type in the JSON string but got " + data['checkSessionKey']);
        }
        // ensure the json data is a string
        if (data['checkType'] && !(typeof data['checkType'] === 'string' || data['checkType'] instanceof String)) {
            throw new Error("Expected the field `checkType` to be a primitive type in the JSON string but got " + data['checkType']);
        }

        return true;
    }


}



/**
 * The type of activity we're checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch's LOGIN_3 type, you can send \"_LOGIN_3\" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. 
 * @member {module:model/DeviceCheckDetailsObject.ActivityTypeEnum} activityType
 */
DeviceCheckDetailsObject.prototype['activityType'] = undefined;

/**
 * Collection of additional data points you wish to add to the activity check. These are defined in conjunction with the Customer and the device checking service being used.  Standard values are supplied upon request:  | kvpKey | kvpType | kvpValue | | ------- | -------- | -------- | | detectedIp | general.string | The IP address you detect the transaction coming from | | accountId.src | id.external | Your account identifier. Can be a SHA hash or similar | | accountId.dst | id.external | Target/payee account identifier. Can be a SHA hash or similar | | entityId | id.external | Use this to override the Frankie entityID that would be used to identify | | amount | general.float | Amount involved in the transaction  | | platform  | general.string | One of APP, WEB, MOBILE_WEB. Assumes APP if not supplied | |   |   |   Like the activityType, you can also specify vendor specific additional data parameters by adding a leading underscore \"_\" to the kvpKey. You can set the kvpType to one of the available types, or just use general.string (recommended) 
 * @member {Array.<module:model/KeyValuePairObject>} additionalData
 */
DeviceCheckDetailsObject.prototype['additionalData'] = undefined;

/**
 * the unique session based ID that will be checked against the service.
 * @member {String} checkSessionKey
 */
DeviceCheckDetailsObject.prototype['checkSessionKey'] = undefined;

/**
 * Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics 
 * @member {module:model/DeviceCheckDetailsObject.CheckTypeEnum} checkType
 */
DeviceCheckDetailsObject.prototype['checkType'] = undefined;





/**
 * Allowed values for the <code>activityType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceCheckDetailsObject['ActivityTypeEnum'] = {

    /**
     * value: "SIGNUP"
     * @const
     */
    "SIGNUP": "SIGNUP",

    /**
     * value: "LOGIN"
     * @const
     */
    "LOGIN": "LOGIN",

    /**
     * value: "PAYMENT"
     * @const
     */
    "PAYMENT": "PAYMENT",

    /**
     * value: "CONFIRMATION"
     * @const
     */
    "CONFIRMATION": "CONFIRMATION",

    /**
     * value: "_<Vendor Specific List>"
     * @const
     */
    "_&lt;Vendor Specific List&gt;": "_<Vendor Specific List>"
};


/**
 * Allowed values for the <code>checkType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceCheckDetailsObject['CheckTypeEnum'] = {

    /**
     * value: "DEVICE"
     * @const
     */
    "DEVICE": "DEVICE",

    /**
     * value: "BIOMETRIC"
     * @const
     */
    "BIOMETRIC": "BIOMETRIC"
};



export default DeviceCheckDetailsObject;

