/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayOfDirectorship from './ArrayOfDirectorship';

/**
 * The Director model module.
 * @module model/Director
 * @version 1.5.3
 */
class Director {
    /**
     * Constructs a new <code>Director</code>.
     * @alias module:model/Director
     */
    constructor() { 
        
        Director.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Director</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Director} obj Optional instance to populate.
     * @return {module:model/Director} The populated <code>Director</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Director();

            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('address3')) {
                obj['address3'] = ApiClient.convertToType(data['address3'], 'String');
            }
            if (data.hasOwnProperty('address4')) {
                obj['address4'] = ApiClient.convertToType(data['address4'], 'String');
            }
            if (data.hasOwnProperty('address5')) {
                obj['address5'] = ApiClient.convertToType(data['address5'], 'String');
            }
            if (data.hasOwnProperty('address6')) {
                obj['address6'] = ApiClient.convertToType(data['address6'], 'String');
            }
            if (data.hasOwnProperty('birthdate')) {
                obj['birthdate'] = ApiClient.convertToType(data['birthdate'], 'String');
            }
            if (data.hasOwnProperty('directorNumber')) {
                obj['directorNumber'] = ApiClient.convertToType(data['directorNumber'], 'String');
            }
            if (data.hasOwnProperty('directorships')) {
                obj['directorships'] = ArrayOfDirectorship.constructFromObject(data['directorships']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Director</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Director</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['address3'] && !(typeof data['address3'] === 'string' || data['address3'] instanceof String)) {
            throw new Error("Expected the field `address3` to be a primitive type in the JSON string but got " + data['address3']);
        }
        // ensure the json data is a string
        if (data['address4'] && !(typeof data['address4'] === 'string' || data['address4'] instanceof String)) {
            throw new Error("Expected the field `address4` to be a primitive type in the JSON string but got " + data['address4']);
        }
        // ensure the json data is a string
        if (data['address5'] && !(typeof data['address5'] === 'string' || data['address5'] instanceof String)) {
            throw new Error("Expected the field `address5` to be a primitive type in the JSON string but got " + data['address5']);
        }
        // ensure the json data is a string
        if (data['address6'] && !(typeof data['address6'] === 'string' || data['address6'] instanceof String)) {
            throw new Error("Expected the field `address6` to be a primitive type in the JSON string but got " + data['address6']);
        }
        // ensure the json data is a string
        if (data['birthdate'] && !(typeof data['birthdate'] === 'string' || data['birthdate'] instanceof String)) {
            throw new Error("Expected the field `birthdate` to be a primitive type in the JSON string but got " + data['birthdate']);
        }
        // ensure the json data is a string
        if (data['directorNumber'] && !(typeof data['directorNumber'] === 'string' || data['directorNumber'] instanceof String)) {
            throw new Error("Expected the field `directorNumber` to be a primitive type in the JSON string but got " + data['directorNumber']);
        }
        // validate the optional field `directorships`
        if (data['directorships']) { // data not null
          ArrayOfDirectorship.validateJSON(data['directorships']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} address1
 */
Director.prototype['address1'] = undefined;

/**
 * @member {String} address2
 */
Director.prototype['address2'] = undefined;

/**
 * @member {String} address3
 */
Director.prototype['address3'] = undefined;

/**
 * @member {String} address4
 */
Director.prototype['address4'] = undefined;

/**
 * @member {String} address5
 */
Director.prototype['address5'] = undefined;

/**
 * @member {String} address6
 */
Director.prototype['address6'] = undefined;

/**
 * @member {String} birthdate
 */
Director.prototype['birthdate'] = undefined;

/**
 * @member {String} directorNumber
 */
Director.prototype['directorNumber'] = undefined;

/**
 * @member {module:model/ArrayOfDirectorship} directorships
 */
Director.prototype['directorships'] = undefined;

/**
 * @member {String} name
 */
Director.prototype['name'] = undefined;

/**
 * @member {String} nationality
 */
Director.prototype['nationality'] = undefined;

/**
 * @member {String} postcode
 */
Director.prototype['postcode'] = undefined;

/**
 * @member {String} title
 */
Director.prototype['title'] = undefined;






export default Director;

