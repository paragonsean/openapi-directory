/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityObject from './EntityObject';

/**
 * The EntityIDVDetailsObject model module.
 * @module model/EntityIDVDetailsObject
 * @version 1.5.3
 */
class EntityIDVDetailsObject {
    /**
     * Constructs a new <code>EntityIDVDetailsObject</code>.
     * Contains all the details we need to create/update an entity and generate an IDV token 
     * @alias module:model/EntityIDVDetailsObject
     * @param entity {module:model/EntityObject} 
     */
    constructor(entity) { 
        
        EntityIDVDetailsObject.initialize(this, entity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entity) { 
        obj['entity'] = entity;
    }

    /**
     * Constructs a <code>EntityIDVDetailsObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityIDVDetailsObject} obj Optional instance to populate.
     * @return {module:model/EntityIDVDetailsObject} The populated <code>EntityIDVDetailsObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityIDVDetailsObject();

            if (data.hasOwnProperty('applicantId')) {
                obj['applicantId'] = ApiClient.convertToType(data['applicantId'], 'String');
            }
            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = EntityObject.constructFromObject(data['entity']);
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = ApiClient.convertToType(data['referrer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityIDVDetailsObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityIDVDetailsObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntityIDVDetailsObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicantId'] && !(typeof data['applicantId'] === 'string' || data['applicantId'] instanceof String)) {
            throw new Error("Expected the field `applicantId` to be a primitive type in the JSON string but got " + data['applicantId']);
        }
        // ensure the json data is a string
        if (data['applicationId'] && !(typeof data['applicationId'] === 'string' || data['applicationId'] instanceof String)) {
            throw new Error("Expected the field `applicationId` to be a primitive type in the JSON string but got " + data['applicationId']);
        }
        // validate the optional field `entity`
        if (data['entity']) { // data not null
          EntityObject.validateJSON(data['entity']);
        }
        // ensure the json data is a string
        if (data['referrer'] && !(typeof data['referrer'] === 'string' || data['referrer'] instanceof String)) {
            throw new Error("Expected the field `referrer` to be a primitive type in the JSON string but got " + data['referrer']);
        }

        return true;
    }


}

EntityIDVDetailsObject.RequiredProperties = ["entity"];

/**
 * The applicantId previously supplied when creating a token for the first time for an entity. Only required if re-submitting for a fresh token on a previously created applicant. 
 * @member {String} applicantId
 */
EntityIDVDetailsObject.prototype['applicantId'] = undefined;

/**
 * If this is for a native application SDK, then we need the applicationId as reported by the SDK. This will then be tied to the token so it cannot be used in another application or handset.  You must send either an applicationID or a referrer (see below) 
 * @member {String} applicationId
 */
EntityIDVDetailsObject.prototype['applicationId'] = undefined;

/**
 * @member {module:model/EntityObject} entity
 */
EntityIDVDetailsObject.prototype['entity'] = undefined;

/**
 * If this is for a web SDK, then you need to supply the referrer domain so that the token can be validated by the IDV service  You must send either a referrer or an applicationID (see above) 
 * @member {String} referrer
 */
EntityIDVDetailsObject.prototype['referrer'] = undefined;






export default EntityIDVDetailsObject;

