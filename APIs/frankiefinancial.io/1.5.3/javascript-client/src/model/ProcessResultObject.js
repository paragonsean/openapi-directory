/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumCheckResultState from './EnumCheckResultState';
import KeyValuePairObject from './KeyValuePairObject';

/**
 * The ProcessResultObject model module.
 * @module model/ProcessResultObject
 * @version 1.5.3
 */
class ProcessResultObject {
    /**
     * Constructs a new <code>ProcessResultObject</code>.
     * Stores the generic results of a process (check, scan, compare, verify, etc)
     * @alias module:model/ProcessResultObject
     */
    constructor() { 
        
        ProcessResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessResultObject} obj Optional instance to populate.
     * @return {module:model/ProcessResultObject} The populated <code>ProcessResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessResultObject();

            if (data.hasOwnProperty('checkDate')) {
                obj['checkDate'] = ApiClient.convertToType(data['checkDate'], 'Date');
            }
            if (data.hasOwnProperty('checkId')) {
                obj['checkId'] = ApiClient.convertToType(data['checkId'], 'String');
            }
            if (data.hasOwnProperty('checkPerformedBy')) {
                obj['checkPerformedBy'] = ApiClient.convertToType(data['checkPerformedBy'], 'String');
            }
            if (data.hasOwnProperty('checkSource')) {
                obj['checkSource'] = ApiClient.convertToType(data['checkSource'], 'String');
            }
            if (data.hasOwnProperty('checkType')) {
                obj['checkType'] = ApiClient.convertToType(data['checkType'], 'String');
            }
            if (data.hasOwnProperty('confidenceLevel')) {
                obj['confidenceLevel'] = ApiClient.convertToType(data['confidenceLevel'], 'Number');
            }
            if (data.hasOwnProperty('providerCheckID')) {
                obj['providerCheckID'] = ApiClient.convertToType(data['providerCheckID'], 'String');
            }
            if (data.hasOwnProperty('resultNotes')) {
                obj['resultNotes'] = ApiClient.convertToType(data['resultNotes'], [KeyValuePairObject]);
            }
            if (data.hasOwnProperty('resultState')) {
                obj['resultState'] = EnumCheckResultState.constructFromObject(data['resultState']);
            }
            if (data.hasOwnProperty('riskLevel')) {
                obj['riskLevel'] = ApiClient.convertToType(data['riskLevel'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessResultObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkId'] && !(typeof data['checkId'] === 'string' || data['checkId'] instanceof String)) {
            throw new Error("Expected the field `checkId` to be a primitive type in the JSON string but got " + data['checkId']);
        }
        // ensure the json data is a string
        if (data['checkPerformedBy'] && !(typeof data['checkPerformedBy'] === 'string' || data['checkPerformedBy'] instanceof String)) {
            throw new Error("Expected the field `checkPerformedBy` to be a primitive type in the JSON string but got " + data['checkPerformedBy']);
        }
        // ensure the json data is a string
        if (data['checkSource'] && !(typeof data['checkSource'] === 'string' || data['checkSource'] instanceof String)) {
            throw new Error("Expected the field `checkSource` to be a primitive type in the JSON string but got " + data['checkSource']);
        }
        // ensure the json data is a string
        if (data['checkType'] && !(typeof data['checkType'] === 'string' || data['checkType'] instanceof String)) {
            throw new Error("Expected the field `checkType` to be a primitive type in the JSON string but got " + data['checkType']);
        }
        // ensure the json data is a string
        if (data['providerCheckID'] && !(typeof data['providerCheckID'] === 'string' || data['providerCheckID'] instanceof String)) {
            throw new Error("Expected the field `providerCheckID` to be a primitive type in the JSON string but got " + data['providerCheckID']);
        }
        if (data['resultNotes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resultNotes'])) {
                throw new Error("Expected the field `resultNotes` to be an array in the JSON data but got " + data['resultNotes']);
            }
            // validate the optional field `resultNotes` (array)
            for (const item of data['resultNotes']) {
                KeyValuePairObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The date and time the item was checked to provide this result.
 * @member {Date} checkDate
 */
ProcessResultObject.prototype['checkDate'] = undefined;

/**
 * Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.
 * @member {String} checkId
 */
ProcessResultObject.prototype['checkId'] = undefined;

/**
 * Service provider that performed the check. Basically the name of the connector, without the leading con_ 
 * @member {String} checkPerformedBy
 */
ProcessResultObject.prototype['checkPerformedBy'] = undefined;

/**
 * Code that can be used to determine the underlying nature or data source of the checks performed. This may or may not be known by the connector, or may be a provider specific type (e.g. type \"O\")  Note, this will actually be normalised by the core service into a standfardised result so that we're not accidentally counting sources twice. Original source will then be copied into the KVPs 
 * @member {String} checkSource
 */
ProcessResultObject.prototype['checkSource'] = undefined;

/**
 * Short indication of the type of check that was done.   When used as a summary, it will the the checkType that was requested  For granular results, it will be the individual check performed. 
 * @member {String} checkType
 */
ProcessResultObject.prototype['checkType'] = undefined;

/**
 * Confidence in the result on a scale of 0 (no match) to 100 (strong/identical match). Whole integers only.  Negative values are used to indicate untrusted results. 
 * @member {Number} confidenceLevel
 */
ProcessResultObject.prototype['confidenceLevel'] = undefined;

/**
 * The service provider will give us a receipt, transaction id, check number, or some such that gives us a unique id on their side that we can reconcile with 
 * @member {String} providerCheckID
 */
ProcessResultObject.prototype['providerCheckID'] = undefined;

/**
 * Any additional notes that may relate to the state. These are returned as typed KVPs
 * @member {Array.<module:model/KeyValuePairObject>} resultNotes
 */
ProcessResultObject.prototype['resultNotes'] = undefined;

/**
 * @member {module:model/EnumCheckResultState} resultState
 */
ProcessResultObject.prototype['resultState'] = undefined;

/**
 * Only supplied in a summary result. Used to indicate the ovall risk score for the entity at this point in time, based on configurable rules.  Some examples might include:    * Current level of ID checks passed   * Device ID scores   * Current PEP/Sanctions/etc checks   * Jurisdictional risk based on addresses, documents and other KVPs   * Fraud check results    In this case a higher score is a bad thing. General rule of thumb:    * 0 - 30 = Low Risk   * 31 - 50 = Medium Risk   * 50 - 75 = High Risk   * 75+ = Unacceptable 
 * @member {Number} riskLevel
 */
ProcessResultObject.prototype['riskLevel'] = undefined;






export default ProcessResultObject;

