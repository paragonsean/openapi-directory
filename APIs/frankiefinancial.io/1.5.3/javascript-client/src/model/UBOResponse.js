/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessDetails from './BusinessDetails';
import IndividualData from './IndividualData';
import IssueListItems from './IssueListItems';
import NonIndividualBeneficialOwner from './NonIndividualBeneficialOwner';
import ScreeningResult from './ScreeningResult';
import SuppliedData from './SuppliedData';
import SuppliedDataMatches from './SuppliedDataMatches';

/**
 * The UBOResponse model module.
 * @module model/UBOResponse
 * @version 1.5.3
 */
class UBOResponse {
    /**
     * Constructs a new <code>UBOResponse</code>.
     * @alias module:model/UBOResponse
     * @param suppliedData {module:model/SuppliedData} 
     */
    constructor(suppliedData) { 
        
        UBOResponse.initialize(this, suppliedData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, suppliedData) { 
        obj['supplied_data'] = suppliedData;
    }

    /**
     * Constructs a <code>UBOResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UBOResponse} obj Optional instance to populate.
     * @return {module:model/UBOResponse} The populated <code>UBOResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UBOResponse();

            if (data.hasOwnProperty('asic_search_timestamp')) {
                obj['asic_search_timestamp'] = ApiClient.convertToType(data['asic_search_timestamp'], 'Date');
            }
            if (data.hasOwnProperty('business_details')) {
                obj['business_details'] = BusinessDetails.constructFromObject(data['business_details']);
            }
            if (data.hasOwnProperty('business_screening_result')) {
                obj['business_screening_result'] = ScreeningResult.constructFromObject(data['business_screening_result']);
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('issues_list')) {
                obj['issues_list'] = ApiClient.convertToType(data['issues_list'], [IssueListItems]);
            }
            if (data.hasOwnProperty('non_individual_beneficial_owners')) {
                obj['non_individual_beneficial_owners'] = ApiClient.convertToType(data['non_individual_beneficial_owners'], [NonIndividualBeneficialOwner]);
            }
            if (data.hasOwnProperty('officeholders')) {
                obj['officeholders'] = ApiClient.convertToType(data['officeholders'], [IndividualData]);
            }
            if (data.hasOwnProperty('supplied_data')) {
                obj['supplied_data'] = SuppliedData.constructFromObject(data['supplied_data']);
            }
            if (data.hasOwnProperty('supplied_data_matches')) {
                obj['supplied_data_matches'] = SuppliedDataMatches.constructFromObject(data['supplied_data_matches']);
            }
            if (data.hasOwnProperty('ubo_report')) {
                obj['ubo_report'] = ApiClient.convertToType(data['ubo_report'], 'String');
            }
            if (data.hasOwnProperty('ultimate_beneficial_owners')) {
                obj['ultimate_beneficial_owners'] = ApiClient.convertToType(data['ultimate_beneficial_owners'], [IndividualData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UBOResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UBOResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UBOResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `business_details`
        if (data['business_details']) { // data not null
          BusinessDetails.validateJSON(data['business_details']);
        }
        // validate the optional field `business_screening_result`
        if (data['business_screening_result']) { // data not null
          ScreeningResult.validateJSON(data['business_screening_result']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        if (data['issues_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues_list'])) {
                throw new Error("Expected the field `issues_list` to be an array in the JSON data but got " + data['issues_list']);
            }
            // validate the optional field `issues_list` (array)
            for (const item of data['issues_list']) {
                IssueListItems.validateJSON(item);
            };
        }
        if (data['non_individual_beneficial_owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['non_individual_beneficial_owners'])) {
                throw new Error("Expected the field `non_individual_beneficial_owners` to be an array in the JSON data but got " + data['non_individual_beneficial_owners']);
            }
            // validate the optional field `non_individual_beneficial_owners` (array)
            for (const item of data['non_individual_beneficial_owners']) {
                NonIndividualBeneficialOwner.validateJSON(item);
            };
        }
        if (data['officeholders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['officeholders'])) {
                throw new Error("Expected the field `officeholders` to be an array in the JSON data but got " + data['officeholders']);
            }
            // validate the optional field `officeholders` (array)
            for (const item of data['officeholders']) {
                IndividualData.validateJSON(item);
            };
        }
        // validate the optional field `supplied_data`
        if (data['supplied_data']) { // data not null
          SuppliedData.validateJSON(data['supplied_data']);
        }
        // validate the optional field `supplied_data_matches`
        if (data['supplied_data_matches']) { // data not null
          SuppliedDataMatches.validateJSON(data['supplied_data_matches']);
        }
        // ensure the json data is a string
        if (data['ubo_report'] && !(typeof data['ubo_report'] === 'string' || data['ubo_report'] instanceof String)) {
            throw new Error("Expected the field `ubo_report` to be a primitive type in the JSON string but got " + data['ubo_report']);
        }
        if (data['ultimate_beneficial_owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ultimate_beneficial_owners'])) {
                throw new Error("Expected the field `ultimate_beneficial_owners` to be an array in the JSON data but got " + data['ultimate_beneficial_owners']);
            }
            // validate the optional field `ultimate_beneficial_owners` (array)
            for (const item of data['ultimate_beneficial_owners']) {
                IndividualData.validateJSON(item);
            };
        }

        return true;
    }


}

UBOResponse.RequiredProperties = ["supplied_data"];

/**
 * If an ASIC search was conducted, what was the date/time in RFC-3339 format 
 * @member {Date} asic_search_timestamp
 */
UBOResponse.prototype['asic_search_timestamp'] = undefined;

/**
 * @member {module:model/BusinessDetails} business_details
 */
UBOResponse.prototype['business_details'] = undefined;

/**
 * @member {module:model/ScreeningResult} business_screening_result
 */
UBOResponse.prototype['business_screening_result'] = undefined;

/**
 * Only populated if there was an error whilst trying to initiate the UBO check.  Signifies that no other result data will be supplied 
 * @member {String} error_message
 */
UBOResponse.prototype['error_message'] = undefined;

/**
 * A list of issues encountered whilst processing the UBO request and subsequent KYC/AML checks. 
 * @member {Array.<module:model/IssueListItems>} issues_list
 */
UBOResponse.prototype['issues_list'] = undefined;

/**
 * A list of organisations who have been determined to own a (potentially) beneficial interest the company.  The presence of non_individual_beneficial_owners indicates that not all individual ultimate beneficial owners could be determined.  Examples may include public companies, listed companies, foreign companies, corporate trusts or other entities whose beneficial owners are not readily available. 
 * @member {Array.<module:model/NonIndividualBeneficialOwner>} non_individual_beneficial_owners
 */
UBOResponse.prototype['non_individual_beneficial_owners'] = undefined;

/**
 * A list of individuals who serve as current office holders the company 
 * @member {Array.<module:model/IndividualData>} officeholders
 */
UBOResponse.prototype['officeholders'] = undefined;

/**
 * @member {module:model/SuppliedData} supplied_data
 */
UBOResponse.prototype['supplied_data'] = undefined;

/**
 * @member {module:model/SuppliedDataMatches} supplied_data_matches
 */
UBOResponse.prototype['supplied_data_matches'] = undefined;

/**
 * The full URI of the UBO report PDF created as a part of this process (if requested) 
 * @member {String} ubo_report
 */
UBOResponse.prototype['ubo_report'] = undefined;

/**
 * A list of individuals who have been determined to own, either directly or indirectly, 25% or more of the company 
 * @member {Array.<module:model/IndividualData>} ultimate_beneficial_owners
 */
UBOResponse.prototype['ultimate_beneficial_owners'] = undefined;






export default UBOResponse;

