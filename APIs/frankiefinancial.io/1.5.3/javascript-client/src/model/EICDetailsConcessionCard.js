/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EICDetailsConcessionCard model module.
 * @module model/EICDetailsConcessionCard
 * @version 1.5.3
 */
class EICDetailsConcessionCard {
    /**
     * Constructs a new <code>EICDetailsConcessionCard</code>.
     * Customer concession card details
     * @alias module:model/EICDetailsConcessionCard
     * @param concessionEvidenceType {module:model/EICDetailsConcessionCard.ConcessionEvidenceTypeEnum} The type of evidence used to prove eligibility for concessions
     * @param concessionType {module:model/EICDetailsConcessionCard.ConcessionTypeEnum} Concessions linked to the customer's concession card
     * @param customerReferenceNumber {String} Customer Reference Number (CRN) on the concession card
     * @param endDate {Date} Concession card end expiry date
     * @param firstName {String} First name on the concession card
     * @param lastName {String} Last name on the concession card
     * @param startDate {Date} Concession card start date
     */
    constructor(concessionEvidenceType, concessionType, customerReferenceNumber, endDate, firstName, lastName, startDate) { 
        
        EICDetailsConcessionCard.initialize(this, concessionEvidenceType, concessionType, customerReferenceNumber, endDate, firstName, lastName, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, concessionEvidenceType, concessionType, customerReferenceNumber, endDate, firstName, lastName, startDate) { 
        obj['concessionEvidenceType'] = concessionEvidenceType;
        obj['concessionType'] = concessionType;
        obj['customerReferenceNumber'] = customerReferenceNumber;
        obj['endDate'] = endDate;
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>EICDetailsConcessionCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EICDetailsConcessionCard} obj Optional instance to populate.
     * @return {module:model/EICDetailsConcessionCard} The populated <code>EICDetailsConcessionCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EICDetailsConcessionCard();

            if (data.hasOwnProperty('concessionEvidenceType')) {
                obj['concessionEvidenceType'] = ApiClient.convertToType(data['concessionEvidenceType'], 'String');
            }
            if (data.hasOwnProperty('concessionType')) {
                obj['concessionType'] = ApiClient.convertToType(data['concessionType'], 'String');
            }
            if (data.hasOwnProperty('customerReferenceNumber')) {
                obj['customerReferenceNumber'] = ApiClient.convertToType(data['customerReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EICDetailsConcessionCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EICDetailsConcessionCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EICDetailsConcessionCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['concessionEvidenceType'] && !(typeof data['concessionEvidenceType'] === 'string' || data['concessionEvidenceType'] instanceof String)) {
            throw new Error("Expected the field `concessionEvidenceType` to be a primitive type in the JSON string but got " + data['concessionEvidenceType']);
        }
        // ensure the json data is a string
        if (data['concessionType'] && !(typeof data['concessionType'] === 'string' || data['concessionType'] instanceof String)) {
            throw new Error("Expected the field `concessionType` to be a primitive type in the JSON string but got " + data['concessionType']);
        }
        // ensure the json data is a string
        if (data['customerReferenceNumber'] && !(typeof data['customerReferenceNumber'] === 'string' || data['customerReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `customerReferenceNumber` to be a primitive type in the JSON string but got " + data['customerReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }

        return true;
    }


}

EICDetailsConcessionCard.RequiredProperties = ["concessionEvidenceType", "concessionType", "customerReferenceNumber", "endDate", "firstName", "lastName", "startDate"];

/**
 * The type of evidence used to prove eligibility for concessions
 * @member {module:model/EICDetailsConcessionCard.ConcessionEvidenceTypeEnum} concessionEvidenceType
 */
EICDetailsConcessionCard.prototype['concessionEvidenceType'] = undefined;

/**
 * Concessions linked to the customer's concession card
 * @member {module:model/EICDetailsConcessionCard.ConcessionTypeEnum} concessionType
 */
EICDetailsConcessionCard.prototype['concessionType'] = undefined;

/**
 * Customer Reference Number (CRN) on the concession card
 * @member {String} customerReferenceNumber
 */
EICDetailsConcessionCard.prototype['customerReferenceNumber'] = undefined;

/**
 * Concession card end expiry date
 * @member {Date} endDate
 */
EICDetailsConcessionCard.prototype['endDate'] = undefined;

/**
 * First name on the concession card
 * @member {String} firstName
 */
EICDetailsConcessionCard.prototype['firstName'] = undefined;

/**
 * Last name on the concession card
 * @member {String} lastName
 */
EICDetailsConcessionCard.prototype['lastName'] = undefined;

/**
 * Concession card start date
 * @member {Date} startDate
 */
EICDetailsConcessionCard.prototype['startDate'] = undefined;





/**
 * Allowed values for the <code>concessionEvidenceType</code> property.
 * @enum {String}
 * @readonly
 */
EICDetailsConcessionCard['ConcessionEvidenceTypeEnum'] = {

    /**
     * value: "Pensioner Concession Card"
     * @const
     */
    "Pensioner Concession Card": "Pensioner Concession Card",

    /**
     * value: "Gold Repatriation Health Card"
     * @const
     */
    "Gold Repatriation Health Card": "Gold Repatriation Health Card",

    /**
     * value: "Health Care Card"
     * @const
     */
    "Health Care Card": "Health Care Card",

    /**
     * value: "NSW Life Support Rebate Without Concession Card"
     * @const
     */
    "NSW Life Support Rebate Without Concession Card": "NSW Life Support Rebate Without Concession Card",

    /**
     * value: "Queensland Seniors Card"
     * @const
     */
    "Queensland Seniors Card": "Queensland Seniors Card"
};


/**
 * Allowed values for the <code>concessionType</code> property.
 * @enum {String}
 * @readonly
 */
EICDetailsConcessionCard['ConcessionTypeEnum'] = {

    /**
     * value: "Life Support"
     * @const
     */
    "Life Support": "Life Support",

    /**
     * value: "Medical Cooling"
     * @const
     */
    "Medical Cooling": "Medical Cooling",

    /**
     * value: "Service to Property Charge"
     * @const
     */
    "Service to Property Charge": "Service to Property Charge",

    /**
     * value: "Off-Peak Electricity"
     * @const
     */
    "Off-Peak Electricity": "Off-Peak Electricity",

    /**
     * value: "Annual Electricity"
     * @const
     */
    "Annual Electricity": "Annual Electricity",

    /**
     * value: "Transfer Fee Waiver"
     * @const
     */
    "Transfer Fee Waiver": "Transfer Fee Waiver",

    /**
     * value: "Excess Electricity"
     * @const
     */
    "Excess Electricity": "Excess Electricity",

    /**
     * value: "Controlled Load"
     * @const
     */
    "Controlled Load": "Controlled Load",

    /**
     * value: "Low Income Household"
     * @const
     */
    "Low Income Household": "Low Income Household",

    /**
     * value: "Medical Energy"
     * @const
     */
    "Medical Energy": "Medical Energy",

    /**
     * value: "NSW Government Life Support Rebate"
     * @const
     */
    "NSW Government Life Support Rebate": "NSW Government Life Support Rebate",

    /**
     * value: "Queensland Electricity Rebate"
     * @const
     */
    "Queensland Electricity Rebate": "Queensland Electricity Rebate",

    /**
     * value: "Winter Gas"
     * @const
     */
    "Winter Gas": "Winter Gas",

    /**
     * value: "Excess Gas Consumption"
     * @const
     */
    "Excess Gas Consumption": "Excess Gas Consumption"
};



export default EICDetailsConcessionCard;

