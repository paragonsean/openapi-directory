/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumDocumentStatus from './EnumDocumentStatus';
import EnumIdType from './EnumIdType';
import KeyValuePairObject from './KeyValuePairObject';
import ScannedDocumentObject from './ScannedDocumentObject';

/**
 * The IdentityDocumentObject model module.
 * @module model/IdentityDocumentObject
 * @version 1.5.3
 */
class IdentityDocumentObject {
    /**
     * Constructs a new <code>IdentityDocumentObject</code>.
     * @alias module:model/IdentityDocumentObject
     * @param country {String} The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more 
     * @param idType {module:model/EnumIdType} 
     */
    constructor(country, idType) { 
        
        IdentityDocumentObject.initialize(this, country, idType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, idType) { 
        obj['country'] = country;
        obj['idType'] = idType;
    }

    /**
     * Constructs a <code>IdentityDocumentObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityDocumentObject} obj Optional instance to populate.
     * @return {module:model/IdentityDocumentObject} The populated <code>IdentityDocumentObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityDocumentObject();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('createdFromScan')) {
                obj['createdFromScan'] = ApiClient.convertToType(data['createdFromScan'], 'Boolean');
            }
            if (data.hasOwnProperty('docScan')) {
                obj['docScan'] = ApiClient.convertToType(data['docScan'], [ScannedDocumentObject]);
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('documentStatus')) {
                obj['documentStatus'] = EnumDocumentStatus.constructFromObject(data['documentStatus']);
            }
            if (data.hasOwnProperty('extraData')) {
                obj['extraData'] = ApiClient.convertToType(data['extraData'], [KeyValuePairObject]);
            }
            if (data.hasOwnProperty('idExpiry')) {
                obj['idExpiry'] = ApiClient.convertToType(data['idExpiry'], 'Date');
            }
            if (data.hasOwnProperty('idIssued')) {
                obj['idIssued'] = ApiClient.convertToType(data['idIssued'], 'Date');
            }
            if (data.hasOwnProperty('idNumber')) {
                obj['idNumber'] = ApiClient.convertToType(data['idNumber'], 'String');
            }
            if (data.hasOwnProperty('idSubType')) {
                obj['idSubType'] = ApiClient.convertToType(data['idSubType'], 'String');
            }
            if (data.hasOwnProperty('idType')) {
                obj['idType'] = EnumIdType.constructFromObject(data['idType']);
            }
            if (data.hasOwnProperty('manuallyModified')) {
                obj['manuallyModified'] = ApiClient.convertToType(data['manuallyModified'], 'Boolean');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityDocumentObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityDocumentObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityDocumentObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        if (data['docScan']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['docScan'])) {
                throw new Error("Expected the field `docScan` to be an array in the JSON data but got " + data['docScan']);
            }
            // validate the optional field `docScan` (array)
            for (const item of data['docScan']) {
                ScannedDocumentObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['documentId'] && !(typeof data['documentId'] === 'string' || data['documentId'] instanceof String)) {
            throw new Error("Expected the field `documentId` to be a primitive type in the JSON string but got " + data['documentId']);
        }
        if (data['extraData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extraData'])) {
                throw new Error("Expected the field `extraData` to be an array in the JSON data but got " + data['extraData']);
            }
            // validate the optional field `extraData` (array)
            for (const item of data['extraData']) {
                KeyValuePairObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['idNumber'] && !(typeof data['idNumber'] === 'string' || data['idNumber'] instanceof String)) {
            throw new Error("Expected the field `idNumber` to be a primitive type in the JSON string but got " + data['idNumber']);
        }
        // ensure the json data is a string
        if (data['idSubType'] && !(typeof data['idSubType'] === 'string' || data['idSubType'] instanceof String)) {
            throw new Error("Expected the field `idSubType` to be a primitive type in the JSON string but got " + data['idSubType']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }

        return true;
    }


}

IdentityDocumentObject.RequiredProperties = ["country", "idType"];

/**
 * The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more 
 * @member {String} country
 */
IdentityDocumentObject.prototype['country'] = undefined;

/**
 * This document's data was initially created from scanned and processed images. The value cannot be set manually and any attempt to do so will just be ignored. 
 * @member {Boolean} createdFromScan
 */
IdentityDocumentObject.prototype['createdFromScan'] = undefined;

/**
 * Collection of one or more objects that describe scan(s) that need to be put through OCR or facial recognition. These should all be from the one ID document, such as front/back, or page 1, 2, 3, etc. You can upload multiple scans in a single call, or in multiple calls.     Note: if you do upload over multiple calls, make sure you include the documentId (see above), and indicate that this is happening with a \"more_data\" checkAction 
 * @member {Array.<module:model/ScannedDocumentObject>} docScan
 */
IdentityDocumentObject.prototype['docScan'] = undefined;

/**
 * When an ID document is created/uploaded, it is assigned a documentId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 
 * @member {String} documentId
 */
IdentityDocumentObject.prototype['documentId'] = undefined;

/**
 * @member {module:model/EnumDocumentStatus} documentStatus
 */
IdentityDocumentObject.prototype['documentStatus'] = undefined;

/**
 * Set of key-value pairs that provide ID type-specific data. If updating an existing document, then existing values with the same name will be overwritten. New values will be added.  If this document is scanned through OCR or similar processes, then extracted data will be found here (Some may be used to populate other fields like idNumber and idExpiry as well) 
 * @member {Array.<module:model/KeyValuePairObject>} extraData
 */
IdentityDocumentObject.prototype['extraData'] = undefined;

/**
 * The expiry date of the document (if known) in YYYY-MM-DD format.
 * @member {Date} idExpiry
 */
IdentityDocumentObject.prototype['idExpiry'] = undefined;

/**
 * The issued date of the document (if known) in YYYY-MM-DD format.
 * @member {Date} idIssued
 */
IdentityDocumentObject.prototype['idIssued'] = undefined;

/**
 * The ID number of the document (if known).
 * @member {String} idNumber
 */
IdentityDocumentObject.prototype['idNumber'] = undefined;

/**
 * The sub-type of identity document. Very document specific.
 * @member {String} idSubType
 */
IdentityDocumentObject.prototype['idSubType'] = undefined;

/**
 * @member {module:model/EnumIdType} idType
 */
IdentityDocumentObject.prototype['idType'] = undefined;

/**
 * If this document was originally populated from scanned data, then manually adjusted (e.g. if the scan's results weren't 100% correct or data was missing), then this will be set to true. The value cannot be set manually and any attempt to do so will just be ignored. 
 * @member {Boolean} manuallyModified
 */
IdentityDocumentObject.prototype['manuallyModified'] = undefined;

/**
 * Regional variant of the ID (e.g. VIC drivers licence)  You should always use the local abbreviation for this. E.g.   - VIC for The Australian state of Victoria   - MA for the US state of Massachusetts   - etc 
 * @member {String} region
 */
IdentityDocumentObject.prototype['region'] = undefined;






export default IdentityDocumentObject;

