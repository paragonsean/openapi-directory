/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AcceptedEntityResultObject model module.
 * @module model/AcceptedEntityResultObject
 * @version 1.5.3
 */
class AcceptedEntityResultObject {
    /**
     * Constructs a new <code>AcceptedEntityResultObject</code>.
     * The following fields represent the data you need in order to retrieve the results of the requested function. See the details of the notification API for more. 
     * @alias module:model/AcceptedEntityResultObject
     */
    constructor() { 
        
        AcceptedEntityResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AcceptedEntityResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcceptedEntityResultObject} obj Optional instance to populate.
     * @return {module:model/AcceptedEntityResultObject} The populated <code>AcceptedEntityResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcceptedEntityResultObject();

            if (data.hasOwnProperty('checkId')) {
                obj['checkId'] = ApiClient.convertToType(data['checkId'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
            if (data.hasOwnProperty('linkURL')) {
                obj['linkURL'] = ApiClient.convertToType(data['linkURL'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcceptedEntityResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcceptedEntityResultObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkId'] && !(typeof data['checkId'] === 'string' || data['checkId'] instanceof String)) {
            throw new Error("Expected the field `checkId` to be a primitive type in the JSON string but got " + data['checkId']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }
        // ensure the json data is a string
        if (data['linkURL'] && !(typeof data['linkURL'] === 'string' || data['linkURL'] instanceof String)) {
            throw new Error("Expected the field `linkURL` to be a primitive type in the JSON string but got " + data['linkURL']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * If you're calling a processing function of some kind, a check number will be issued. This field will only be present if the function you're calling would normally return a checkId (such as scan, verify, and compare). 
 * @member {String} checkId
 */
AcceptedEntityResultObject.prototype['checkId'] = undefined;

/**
 * When an entity is created/uploaded, or generated from a document scan, it is assigned an entityId. This can then be referenced in subsequent calls if you're uploading more/updated data. 
 * @member {String} entityId
 */
AcceptedEntityResultObject.prototype['entityId'] = undefined;

/**
 * Short description of the function called. 
 * @member {String} function
 */
AcceptedEntityResultObject.prototype['function'] = undefined;

/**
 * Optional link that can be returned - used by the Push To Mobile service to allow API users to manage the use of the onboarding link themselves. 
 * @member {String} linkURL
 */
AcceptedEntityResultObject.prototype['linkURL'] = undefined;

/**
 * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
 * @member {String} requestId
 */
AcceptedEntityResultObject.prototype['requestId'] = undefined;






export default AcceptedEntityResultObject;

