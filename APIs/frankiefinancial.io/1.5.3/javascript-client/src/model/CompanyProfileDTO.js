/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayOfActivityDTO from './ArrayOfActivityDTO';
import ArrayOfActivityDeclarationDTO from './ArrayOfActivityDeclarationDTO';
import ArrayOfAddressDTO from './ArrayOfAddressDTO';
import ArrayOfCapitalDTO from './ArrayOfCapitalDTO';
import ArrayOfString from './ArrayOfString';
import ArrayOfUSOfficerDTO from './ArrayOfUSOfficerDTO';
import DirectorAndShareDetails from './DirectorAndShareDetails';
import LegalFormDTO from './LegalFormDTO';

/**
 * The CompanyProfileDTO model module.
 * @module model/CompanyProfileDTO
 * @version 1.5.3
 */
class CompanyProfileDTO {
    /**
     * Constructs a new <code>CompanyProfileDTO</code>.
     * @alias module:model/CompanyProfileDTO
     */
    constructor() { 
        
        CompanyProfileDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyProfileDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyProfileDTO} obj Optional instance to populate.
     * @return {module:model/CompanyProfileDTO} The populated <code>CompanyProfileDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyProfileDTO();

            if (data.hasOwnProperty('Activity')) {
                obj['Activity'] = ArrayOfActivityDTO.constructFromObject(data['Activity']);
            }
            if (data.hasOwnProperty('ActivityDeclaration')) {
                obj['ActivityDeclaration'] = ArrayOfActivityDeclarationDTO.constructFromObject(data['ActivityDeclaration']);
            }
            if (data.hasOwnProperty('Addresses')) {
                obj['Addresses'] = ArrayOfAddressDTO.constructFromObject(data['Addresses']);
            }
            if (data.hasOwnProperty('AgentAddress')) {
                obj['AgentAddress'] = ApiClient.convertToType(data['AgentAddress'], 'String');
            }
            if (data.hasOwnProperty('AgentName')) {
                obj['AgentName'] = ApiClient.convertToType(data['AgentName'], 'String');
            }
            if (data.hasOwnProperty('Aliases')) {
                obj['Aliases'] = ArrayOfString.constructFromObject(data['Aliases']);
            }
            if (data.hasOwnProperty('AppointmentDateOfOfficial')) {
                obj['AppointmentDateOfOfficial'] = ApiClient.convertToType(data['AppointmentDateOfOfficial'], 'String');
            }
            if (data.hasOwnProperty('Capital')) {
                obj['Capital'] = ArrayOfCapitalDTO.constructFromObject(data['Capital']);
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('CompanyNameInEnglish')) {
                obj['CompanyNameInEnglish'] = ApiClient.convertToType(data['CompanyNameInEnglish'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('FaxNumber')) {
                obj['FaxNumber'] = ApiClient.convertToType(data['FaxNumber'], 'String');
            }
            if (data.hasOwnProperty('FiscalCode')) {
                obj['FiscalCode'] = ApiClient.convertToType(data['FiscalCode'], 'String');
            }
            if (data.hasOwnProperty('FoundationDate')) {
                obj['FoundationDate'] = ApiClient.convertToType(data['FoundationDate'], 'String');
            }
            if (data.hasOwnProperty('Functions')) {
                obj['Functions'] = ArrayOfString.constructFromObject(data['Functions']);
            }
            if (data.hasOwnProperty('Headquarters')) {
                obj['Headquarters'] = ApiClient.convertToType(data['Headquarters'], 'String');
            }
            if (data.hasOwnProperty('KeyFigures')) {
                obj['KeyFigures'] = ArrayOfString.constructFromObject(data['KeyFigures']);
            }
            if (data.hasOwnProperty('LastAnnualAccountDate')) {
                obj['LastAnnualAccountDate'] = ApiClient.convertToType(data['LastAnnualAccountDate'], 'String');
            }
            if (data.hasOwnProperty('LegalForm')) {
                obj['LegalForm'] = ApiClient.convertToType(data['LegalForm'], 'String');
            }
            if (data.hasOwnProperty('LegalFormDeclaration')) {
                obj['LegalFormDeclaration'] = ApiClient.convertToType(data['LegalFormDeclaration'], 'String');
            }
            if (data.hasOwnProperty('LegalFormDetails')) {
                obj['LegalFormDetails'] = LegalFormDTO.constructFromObject(data['LegalFormDetails']);
            }
            if (data.hasOwnProperty('LegalStatus')) {
                obj['LegalStatus'] = ApiClient.convertToType(data['LegalStatus'], 'String');
            }
            if (data.hasOwnProperty('MailingAddress')) {
                obj['MailingAddress'] = ApiClient.convertToType(data['MailingAddress'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Official')) {
                obj['Official'] = ApiClient.convertToType(data['Official'], 'Boolean');
            }
            if (data.hasOwnProperty('RegistrationAuthority')) {
                obj['RegistrationAuthority'] = ApiClient.convertToType(data['RegistrationAuthority'], 'String');
            }
            if (data.hasOwnProperty('RegistrationAuthorityCode')) {
                obj['RegistrationAuthorityCode'] = ApiClient.convertToType(data['RegistrationAuthorityCode'], 'String');
            }
            if (data.hasOwnProperty('RegistrationDate')) {
                obj['RegistrationDate'] = ApiClient.convertToType(data['RegistrationDate'], 'String');
            }
            if (data.hasOwnProperty('RegistrationNumber')) {
                obj['RegistrationNumber'] = ApiClient.convertToType(data['RegistrationNumber'], 'String');
            }
            if (data.hasOwnProperty('SigningDeclaration')) {
                obj['SigningDeclaration'] = ApiClient.convertToType(data['SigningDeclaration'], 'String');
            }
            if (data.hasOwnProperty('SigningDeclarationDescription')) {
                obj['SigningDeclarationDescription'] = ApiClient.convertToType(data['SigningDeclarationDescription'], 'String');
            }
            if (data.hasOwnProperty('SigningLanguage')) {
                obj['SigningLanguage'] = ApiClient.convertToType(data['SigningLanguage'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('StateOfIncorporation')) {
                obj['StateOfIncorporation'] = ApiClient.convertToType(data['StateOfIncorporation'], 'String');
            }
            if (data.hasOwnProperty('TelephoneNumber')) {
                obj['TelephoneNumber'] = ApiClient.convertToType(data['TelephoneNumber'], 'String');
            }
            if (data.hasOwnProperty('VatNumber')) {
                obj['VatNumber'] = ApiClient.convertToType(data['VatNumber'], 'String');
            }
            if (data.hasOwnProperty('VirtualId')) {
                obj['VirtualId'] = ApiClient.convertToType(data['VirtualId'], 'String');
            }
            if (data.hasOwnProperty('WebsiteURL')) {
                obj['WebsiteURL'] = ApiClient.convertToType(data['WebsiteURL'], 'String');
            }
            if (data.hasOwnProperty('directorAndShareDetails')) {
                obj['directorAndShareDetails'] = DirectorAndShareDetails.constructFromObject(data['directorAndShareDetails']);
            }
            if (data.hasOwnProperty('officers')) {
                obj['officers'] = ArrayOfUSOfficerDTO.constructFromObject(data['officers']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyProfileDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyProfileDTO</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Activity`
        if (data['Activity']) { // data not null
          ArrayOfActivityDTO.validateJSON(data['Activity']);
        }
        // validate the optional field `ActivityDeclaration`
        if (data['ActivityDeclaration']) { // data not null
          ArrayOfActivityDeclarationDTO.validateJSON(data['ActivityDeclaration']);
        }
        // validate the optional field `Addresses`
        if (data['Addresses']) { // data not null
          ArrayOfAddressDTO.validateJSON(data['Addresses']);
        }
        // ensure the json data is a string
        if (data['AgentAddress'] && !(typeof data['AgentAddress'] === 'string' || data['AgentAddress'] instanceof String)) {
            throw new Error("Expected the field `AgentAddress` to be a primitive type in the JSON string but got " + data['AgentAddress']);
        }
        // ensure the json data is a string
        if (data['AgentName'] && !(typeof data['AgentName'] === 'string' || data['AgentName'] instanceof String)) {
            throw new Error("Expected the field `AgentName` to be a primitive type in the JSON string but got " + data['AgentName']);
        }
        // validate the optional field `Aliases`
        if (data['Aliases']) { // data not null
          ArrayOfString.validateJSON(data['Aliases']);
        }
        // ensure the json data is a string
        if (data['AppointmentDateOfOfficial'] && !(typeof data['AppointmentDateOfOfficial'] === 'string' || data['AppointmentDateOfOfficial'] instanceof String)) {
            throw new Error("Expected the field `AppointmentDateOfOfficial` to be a primitive type in the JSON string but got " + data['AppointmentDateOfOfficial']);
        }
        // validate the optional field `Capital`
        if (data['Capital']) { // data not null
          ArrayOfCapitalDTO.validateJSON(data['Capital']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['CompanyNameInEnglish'] && !(typeof data['CompanyNameInEnglish'] === 'string' || data['CompanyNameInEnglish'] instanceof String)) {
            throw new Error("Expected the field `CompanyNameInEnglish` to be a primitive type in the JSON string but got " + data['CompanyNameInEnglish']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['FaxNumber'] && !(typeof data['FaxNumber'] === 'string' || data['FaxNumber'] instanceof String)) {
            throw new Error("Expected the field `FaxNumber` to be a primitive type in the JSON string but got " + data['FaxNumber']);
        }
        // ensure the json data is a string
        if (data['FiscalCode'] && !(typeof data['FiscalCode'] === 'string' || data['FiscalCode'] instanceof String)) {
            throw new Error("Expected the field `FiscalCode` to be a primitive type in the JSON string but got " + data['FiscalCode']);
        }
        // ensure the json data is a string
        if (data['FoundationDate'] && !(typeof data['FoundationDate'] === 'string' || data['FoundationDate'] instanceof String)) {
            throw new Error("Expected the field `FoundationDate` to be a primitive type in the JSON string but got " + data['FoundationDate']);
        }
        // validate the optional field `Functions`
        if (data['Functions']) { // data not null
          ArrayOfString.validateJSON(data['Functions']);
        }
        // ensure the json data is a string
        if (data['Headquarters'] && !(typeof data['Headquarters'] === 'string' || data['Headquarters'] instanceof String)) {
            throw new Error("Expected the field `Headquarters` to be a primitive type in the JSON string but got " + data['Headquarters']);
        }
        // validate the optional field `KeyFigures`
        if (data['KeyFigures']) { // data not null
          ArrayOfString.validateJSON(data['KeyFigures']);
        }
        // ensure the json data is a string
        if (data['LastAnnualAccountDate'] && !(typeof data['LastAnnualAccountDate'] === 'string' || data['LastAnnualAccountDate'] instanceof String)) {
            throw new Error("Expected the field `LastAnnualAccountDate` to be a primitive type in the JSON string but got " + data['LastAnnualAccountDate']);
        }
        // ensure the json data is a string
        if (data['LegalForm'] && !(typeof data['LegalForm'] === 'string' || data['LegalForm'] instanceof String)) {
            throw new Error("Expected the field `LegalForm` to be a primitive type in the JSON string but got " + data['LegalForm']);
        }
        // ensure the json data is a string
        if (data['LegalFormDeclaration'] && !(typeof data['LegalFormDeclaration'] === 'string' || data['LegalFormDeclaration'] instanceof String)) {
            throw new Error("Expected the field `LegalFormDeclaration` to be a primitive type in the JSON string but got " + data['LegalFormDeclaration']);
        }
        // validate the optional field `LegalFormDetails`
        if (data['LegalFormDetails']) { // data not null
          LegalFormDTO.validateJSON(data['LegalFormDetails']);
        }
        // ensure the json data is a string
        if (data['LegalStatus'] && !(typeof data['LegalStatus'] === 'string' || data['LegalStatus'] instanceof String)) {
            throw new Error("Expected the field `LegalStatus` to be a primitive type in the JSON string but got " + data['LegalStatus']);
        }
        // ensure the json data is a string
        if (data['MailingAddress'] && !(typeof data['MailingAddress'] === 'string' || data['MailingAddress'] instanceof String)) {
            throw new Error("Expected the field `MailingAddress` to be a primitive type in the JSON string but got " + data['MailingAddress']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RegistrationAuthority'] && !(typeof data['RegistrationAuthority'] === 'string' || data['RegistrationAuthority'] instanceof String)) {
            throw new Error("Expected the field `RegistrationAuthority` to be a primitive type in the JSON string but got " + data['RegistrationAuthority']);
        }
        // ensure the json data is a string
        if (data['RegistrationAuthorityCode'] && !(typeof data['RegistrationAuthorityCode'] === 'string' || data['RegistrationAuthorityCode'] instanceof String)) {
            throw new Error("Expected the field `RegistrationAuthorityCode` to be a primitive type in the JSON string but got " + data['RegistrationAuthorityCode']);
        }
        // ensure the json data is a string
        if (data['RegistrationDate'] && !(typeof data['RegistrationDate'] === 'string' || data['RegistrationDate'] instanceof String)) {
            throw new Error("Expected the field `RegistrationDate` to be a primitive type in the JSON string but got " + data['RegistrationDate']);
        }
        // ensure the json data is a string
        if (data['RegistrationNumber'] && !(typeof data['RegistrationNumber'] === 'string' || data['RegistrationNumber'] instanceof String)) {
            throw new Error("Expected the field `RegistrationNumber` to be a primitive type in the JSON string but got " + data['RegistrationNumber']);
        }
        // ensure the json data is a string
        if (data['SigningDeclaration'] && !(typeof data['SigningDeclaration'] === 'string' || data['SigningDeclaration'] instanceof String)) {
            throw new Error("Expected the field `SigningDeclaration` to be a primitive type in the JSON string but got " + data['SigningDeclaration']);
        }
        // ensure the json data is a string
        if (data['SigningDeclarationDescription'] && !(typeof data['SigningDeclarationDescription'] === 'string' || data['SigningDeclarationDescription'] instanceof String)) {
            throw new Error("Expected the field `SigningDeclarationDescription` to be a primitive type in the JSON string but got " + data['SigningDeclarationDescription']);
        }
        // ensure the json data is a string
        if (data['SigningLanguage'] && !(typeof data['SigningLanguage'] === 'string' || data['SigningLanguage'] instanceof String)) {
            throw new Error("Expected the field `SigningLanguage` to be a primitive type in the JSON string but got " + data['SigningLanguage']);
        }
        // ensure the json data is a string
        if (data['Source'] && !(typeof data['Source'] === 'string' || data['Source'] instanceof String)) {
            throw new Error("Expected the field `Source` to be a primitive type in the JSON string but got " + data['Source']);
        }
        // ensure the json data is a string
        if (data['StateOfIncorporation'] && !(typeof data['StateOfIncorporation'] === 'string' || data['StateOfIncorporation'] instanceof String)) {
            throw new Error("Expected the field `StateOfIncorporation` to be a primitive type in the JSON string but got " + data['StateOfIncorporation']);
        }
        // ensure the json data is a string
        if (data['TelephoneNumber'] && !(typeof data['TelephoneNumber'] === 'string' || data['TelephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `TelephoneNumber` to be a primitive type in the JSON string but got " + data['TelephoneNumber']);
        }
        // ensure the json data is a string
        if (data['VatNumber'] && !(typeof data['VatNumber'] === 'string' || data['VatNumber'] instanceof String)) {
            throw new Error("Expected the field `VatNumber` to be a primitive type in the JSON string but got " + data['VatNumber']);
        }
        // ensure the json data is a string
        if (data['VirtualId'] && !(typeof data['VirtualId'] === 'string' || data['VirtualId'] instanceof String)) {
            throw new Error("Expected the field `VirtualId` to be a primitive type in the JSON string but got " + data['VirtualId']);
        }
        // ensure the json data is a string
        if (data['WebsiteURL'] && !(typeof data['WebsiteURL'] === 'string' || data['WebsiteURL'] instanceof String)) {
            throw new Error("Expected the field `WebsiteURL` to be a primitive type in the JSON string but got " + data['WebsiteURL']);
        }
        // validate the optional field `directorAndShareDetails`
        if (data['directorAndShareDetails']) { // data not null
          DirectorAndShareDetails.validateJSON(data['directorAndShareDetails']);
        }
        // validate the optional field `officers`
        if (data['officers']) { // data not null
          ArrayOfUSOfficerDTO.validateJSON(data['officers']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArrayOfActivityDTO} Activity
 */
CompanyProfileDTO.prototype['Activity'] = undefined;

/**
 * @member {module:model/ArrayOfActivityDeclarationDTO} ActivityDeclaration
 */
CompanyProfileDTO.prototype['ActivityDeclaration'] = undefined;

/**
 * @member {module:model/ArrayOfAddressDTO} Addresses
 */
CompanyProfileDTO.prototype['Addresses'] = undefined;

/**
 * @member {String} AgentAddress
 */
CompanyProfileDTO.prototype['AgentAddress'] = undefined;

/**
 * @member {String} AgentName
 */
CompanyProfileDTO.prototype['AgentName'] = undefined;

/**
 * @member {module:model/ArrayOfString} Aliases
 */
CompanyProfileDTO.prototype['Aliases'] = undefined;

/**
 * @member {String} AppointmentDateOfOfficial
 */
CompanyProfileDTO.prototype['AppointmentDateOfOfficial'] = undefined;

/**
 * @member {module:model/ArrayOfCapitalDTO} Capital
 */
CompanyProfileDTO.prototype['Capital'] = undefined;

/**
 * @member {String} Code
 */
CompanyProfileDTO.prototype['Code'] = undefined;

/**
 * @member {String} CompanyNameInEnglish
 */
CompanyProfileDTO.prototype['CompanyNameInEnglish'] = undefined;

/**
 * @member {String} Date
 */
CompanyProfileDTO.prototype['Date'] = undefined;

/**
 * @member {String} Email
 */
CompanyProfileDTO.prototype['Email'] = undefined;

/**
 * @member {String} FaxNumber
 */
CompanyProfileDTO.prototype['FaxNumber'] = undefined;

/**
 * @member {String} FiscalCode
 */
CompanyProfileDTO.prototype['FiscalCode'] = undefined;

/**
 * @member {String} FoundationDate
 */
CompanyProfileDTO.prototype['FoundationDate'] = undefined;

/**
 * @member {module:model/ArrayOfString} Functions
 */
CompanyProfileDTO.prototype['Functions'] = undefined;

/**
 * @member {String} Headquarters
 */
CompanyProfileDTO.prototype['Headquarters'] = undefined;

/**
 * @member {module:model/ArrayOfString} KeyFigures
 */
CompanyProfileDTO.prototype['KeyFigures'] = undefined;

/**
 * @member {String} LastAnnualAccountDate
 */
CompanyProfileDTO.prototype['LastAnnualAccountDate'] = undefined;

/**
 * @member {String} LegalForm
 */
CompanyProfileDTO.prototype['LegalForm'] = undefined;

/**
 * @member {String} LegalFormDeclaration
 */
CompanyProfileDTO.prototype['LegalFormDeclaration'] = undefined;

/**
 * @member {module:model/LegalFormDTO} LegalFormDetails
 */
CompanyProfileDTO.prototype['LegalFormDetails'] = undefined;

/**
 * @member {String} LegalStatus
 */
CompanyProfileDTO.prototype['LegalStatus'] = undefined;

/**
 * @member {String} MailingAddress
 */
CompanyProfileDTO.prototype['MailingAddress'] = undefined;

/**
 * @member {String} Name
 */
CompanyProfileDTO.prototype['Name'] = undefined;

/**
 * @member {Boolean} Official
 */
CompanyProfileDTO.prototype['Official'] = undefined;

/**
 * @member {String} RegistrationAuthority
 */
CompanyProfileDTO.prototype['RegistrationAuthority'] = undefined;

/**
 * @member {String} RegistrationAuthorityCode
 */
CompanyProfileDTO.prototype['RegistrationAuthorityCode'] = undefined;

/**
 * @member {String} RegistrationDate
 */
CompanyProfileDTO.prototype['RegistrationDate'] = undefined;

/**
 * @member {String} RegistrationNumber
 */
CompanyProfileDTO.prototype['RegistrationNumber'] = undefined;

/**
 * @member {String} SigningDeclaration
 */
CompanyProfileDTO.prototype['SigningDeclaration'] = undefined;

/**
 * @member {String} SigningDeclarationDescription
 */
CompanyProfileDTO.prototype['SigningDeclarationDescription'] = undefined;

/**
 * @member {String} SigningLanguage
 */
CompanyProfileDTO.prototype['SigningLanguage'] = undefined;

/**
 * @member {String} Source
 */
CompanyProfileDTO.prototype['Source'] = undefined;

/**
 * @member {String} StateOfIncorporation
 */
CompanyProfileDTO.prototype['StateOfIncorporation'] = undefined;

/**
 * @member {String} TelephoneNumber
 */
CompanyProfileDTO.prototype['TelephoneNumber'] = undefined;

/**
 * @member {String} VatNumber
 */
CompanyProfileDTO.prototype['VatNumber'] = undefined;

/**
 * @member {String} VirtualId
 */
CompanyProfileDTO.prototype['VirtualId'] = undefined;

/**
 * @member {String} WebsiteURL
 */
CompanyProfileDTO.prototype['WebsiteURL'] = undefined;

/**
 * @member {module:model/DirectorAndShareDetails} directorAndShareDetails
 */
CompanyProfileDTO.prototype['directorAndShareDetails'] = undefined;

/**
 * @member {module:model/ArrayOfUSOfficerDTO} officers
 */
CompanyProfileDTO.prototype['officers'] = undefined;






export default CompanyProfileDTO;

