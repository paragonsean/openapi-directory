/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityObject from './EntityObject';

/**
 * The EntityIDVResultObject model module.
 * @module model/EntityIDVResultObject
 * @version 1.5.3
 */
class EntityIDVResultObject {
    /**
     * Constructs a new <code>EntityIDVResultObject</code>.
     * Contains the results of a given document entity create/update and IDV token details.
     * @alias module:model/EntityIDVResultObject
     * @param applicantId {String} The applicantId is either the same one that was supplied in the request for a fresh token, or a new one. This ID must be supplied along with the token to your SDK so that it knows who any uploaded documents are for.  The latest applicant will also be written to the extraData of the entity as well for safe keeping. Older applicantIds will be overwritten. 
     * @param entity {module:model/EntityObject} 
     * @param requestId {String} Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
     * @param token {String} Token to be used in the SDK to authenticate the applicant and application/referrer.  Tokens are time limited (1 hour) and can only be used with the applicantId supplied. 
     */
    constructor(applicantId, entity, requestId, token) { 
        
        EntityIDVResultObject.initialize(this, applicantId, entity, requestId, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicantId, entity, requestId, token) { 
        obj['applicantId'] = applicantId;
        obj['entity'] = entity;
        obj['requestId'] = requestId;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>EntityIDVResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityIDVResultObject} obj Optional instance to populate.
     * @return {module:model/EntityIDVResultObject} The populated <code>EntityIDVResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityIDVResultObject();

            if (data.hasOwnProperty('applicantId')) {
                obj['applicantId'] = ApiClient.convertToType(data['applicantId'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = EntityObject.constructFromObject(data['entity']);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('supportTwoDocs')) {
                obj['supportTwoDocs'] = ApiClient.convertToType(data['supportTwoDocs'], 'Boolean');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityIDVResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityIDVResultObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntityIDVResultObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicantId'] && !(typeof data['applicantId'] === 'string' || data['applicantId'] instanceof String)) {
            throw new Error("Expected the field `applicantId` to be a primitive type in the JSON string but got " + data['applicantId']);
        }
        // validate the optional field `entity`
        if (data['entity']) { // data not null
          EntityObject.validateJSON(data['entity']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

EntityIDVResultObject.RequiredProperties = ["applicantId", "entity", "requestId", "token"];

/**
 * The applicantId is either the same one that was supplied in the request for a fresh token, or a new one. This ID must be supplied along with the token to your SDK so that it knows who any uploaded documents are for.  The latest applicant will also be written to the extraData of the entity as well for safe keeping. Older applicantIds will be overwritten. 
 * @member {String} applicantId
 */
EntityIDVResultObject.prototype['applicantId'] = undefined;

/**
 * @member {module:model/EntityObject} entity
 */
EntityIDVResultObject.prototype['entity'] = undefined;

/**
 * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
 * @member {String} requestId
 */
EntityIDVResultObject.prototype['requestId'] = undefined;

/**
 * If the requesting customer can support requesting 2 documents.
 * @member {Boolean} supportTwoDocs
 */
EntityIDVResultObject.prototype['supportTwoDocs'] = undefined;

/**
 * Token to be used in the SDK to authenticate the applicant and application/referrer.  Tokens are time limited (1 hour) and can only be used with the applicantId supplied. 
 * @member {String} token
 */
EntityIDVResultObject.prototype['token'] = undefined;






export default EntityIDVResultObject;

