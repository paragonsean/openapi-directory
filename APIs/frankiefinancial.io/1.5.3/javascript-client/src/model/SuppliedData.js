/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuppliedData model module.
 * @module model/SuppliedData
 * @version 1.5.3
 */
class SuppliedData {
    /**
     * Constructs a new <code>SuppliedData</code>.
     * The data that was initially supplied to check in the batch file 
     * @alias module:model/SuppliedData
     * @param abn {String} Australian Business Number - MUST be 11 digits. Can be supplied in lieu of the ACN 
     * @param acn {String} Australian Company Number on file - MUST be zero left-padded to 9 digits 
     * @param companyType {module:model/SuppliedData.CompanyTypeEnum} The type of company on file. Use the ABR's company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 
     * @param customerReference {String} Your reference number for this company
     * @param name {String} The name of the company to be verified 
     */
    constructor(abn, acn, companyType, customerReference, name) { 
        
        SuppliedData.initialize(this, abn, acn, companyType, customerReference, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abn, acn, companyType, customerReference, name) { 
        obj['abn'] = abn;
        obj['acn'] = acn;
        obj['company_type'] = companyType;
        obj['customer_reference'] = customerReference;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>SuppliedData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuppliedData} obj Optional instance to populate.
     * @return {module:model/SuppliedData} The populated <code>SuppliedData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuppliedData();

            if (data.hasOwnProperty('abn')) {
                obj['abn'] = ApiClient.convertToType(data['abn'], 'String');
            }
            if (data.hasOwnProperty('acn')) {
                obj['acn'] = ApiClient.convertToType(data['acn'], 'String');
            }
            if (data.hasOwnProperty('company_type')) {
                obj['company_type'] = ApiClient.convertToType(data['company_type'], 'String');
            }
            if (data.hasOwnProperty('customer_reference')) {
                obj['customer_reference'] = ApiClient.convertToType(data['customer_reference'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuppliedData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuppliedData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SuppliedData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abn'] && !(typeof data['abn'] === 'string' || data['abn'] instanceof String)) {
            throw new Error("Expected the field `abn` to be a primitive type in the JSON string but got " + data['abn']);
        }
        // ensure the json data is a string
        if (data['acn'] && !(typeof data['acn'] === 'string' || data['acn'] instanceof String)) {
            throw new Error("Expected the field `acn` to be a primitive type in the JSON string but got " + data['acn']);
        }
        // ensure the json data is a string
        if (data['company_type'] && !(typeof data['company_type'] === 'string' || data['company_type'] instanceof String)) {
            throw new Error("Expected the field `company_type` to be a primitive type in the JSON string but got " + data['company_type']);
        }
        // ensure the json data is a string
        if (data['customer_reference'] && !(typeof data['customer_reference'] === 'string' || data['customer_reference'] instanceof String)) {
            throw new Error("Expected the field `customer_reference` to be a primitive type in the JSON string but got " + data['customer_reference']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

SuppliedData.RequiredProperties = ["abn", "acn", "company_type", "customer_reference", "name"];

/**
 * Australian Business Number - MUST be 11 digits. Can be supplied in lieu of the ACN 
 * @member {String} abn
 */
SuppliedData.prototype['abn'] = undefined;

/**
 * Australian Company Number on file - MUST be zero left-padded to 9 digits 
 * @member {String} acn
 */
SuppliedData.prototype['acn'] = undefined;

/**
 * The type of company on file. Use the ABR's company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 
 * @member {module:model/SuppliedData.CompanyTypeEnum} company_type
 */
SuppliedData.prototype['company_type'] = undefined;

/**
 * Your reference number for this company
 * @member {String} customer_reference
 */
SuppliedData.prototype['customer_reference'] = undefined;

/**
 * The name of the company to be verified 
 * @member {String} name
 */
SuppliedData.prototype['name'] = undefined;





/**
 * Allowed values for the <code>company_type</code> property.
 * @enum {String}
 * @readonly
 */
SuppliedData['CompanyTypeEnum'] = {

    /**
     * value: "PRV"
     * @const
     */
    "PRV": "PRV",

    /**
     * value: "PUB"
     * @const
     */
    "PUB": "PUB"
};



export default SuppliedData;

