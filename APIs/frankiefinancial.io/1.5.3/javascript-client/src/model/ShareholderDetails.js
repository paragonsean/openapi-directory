/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShareholderDetails model module.
 * @module model/ShareholderDetails
 * @version 1.5.3
 */
class ShareholderDetails {
    /**
     * Constructs a new <code>ShareholderDetails</code>.
     * @alias module:model/ShareholderDetails
     */
    constructor() { 
        
        ShareholderDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareholderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareholderDetails} obj Optional instance to populate.
     * @return {module:model/ShareholderDetails} The populated <code>ShareholderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareholderDetails();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('allInfo')) {
                obj['allInfo'] = ApiClient.convertToType(data['allInfo'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
            if (data.hasOwnProperty('nominalValue')) {
                obj['nominalValue'] = ApiClient.convertToType(data['nominalValue'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('shareClass')) {
                obj['shareClass'] = ApiClient.convertToType(data['shareClass'], 'String');
            }
            if (data.hasOwnProperty('shareCount')) {
                obj['shareCount'] = ApiClient.convertToType(data['shareCount'], 'Number');
            }
            if (data.hasOwnProperty('shareType')) {
                obj['shareType'] = ApiClient.convertToType(data['shareType'], 'String');
            }
            if (data.hasOwnProperty('shareholderType')) {
                obj['shareholderType'] = ApiClient.convertToType(data['shareholderType'], 'String');
            }
            if (data.hasOwnProperty('totalShareCount')) {
                obj['totalShareCount'] = ApiClient.convertToType(data['totalShareCount'], 'Number');
            }
            if (data.hasOwnProperty('totalShareValue')) {
                obj['totalShareValue'] = ApiClient.convertToType(data['totalShareValue'], 'Number');
            }
            if (data.hasOwnProperty('totalShares')) {
                obj['totalShares'] = ApiClient.convertToType(data['totalShares'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareholderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareholderDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['allInfo'] && !(typeof data['allInfo'] === 'string' || data['allInfo'] instanceof String)) {
            throw new Error("Expected the field `allInfo` to be a primitive type in the JSON string but got " + data['allInfo']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }
        // ensure the json data is a string
        if (data['nominalValue'] && !(typeof data['nominalValue'] === 'string' || data['nominalValue'] instanceof String)) {
            throw new Error("Expected the field `nominalValue` to be a primitive type in the JSON string but got " + data['nominalValue']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // ensure the json data is a string
        if (data['shareClass'] && !(typeof data['shareClass'] === 'string' || data['shareClass'] instanceof String)) {
            throw new Error("Expected the field `shareClass` to be a primitive type in the JSON string but got " + data['shareClass']);
        }
        // ensure the json data is a string
        if (data['shareType'] && !(typeof data['shareType'] === 'string' || data['shareType'] instanceof String)) {
            throw new Error("Expected the field `shareType` to be a primitive type in the JSON string but got " + data['shareType']);
        }
        // ensure the json data is a string
        if (data['shareholderType'] && !(typeof data['shareholderType'] === 'string' || data['shareholderType'] instanceof String)) {
            throw new Error("Expected the field `shareholderType` to be a primitive type in the JSON string but got " + data['shareholderType']);
        }

        return true;
    }


}



/**
 * @member {String} address
 */
ShareholderDetails.prototype['address'] = undefined;

/**
 * @member {String} allInfo
 */
ShareholderDetails.prototype['allInfo'] = undefined;

/**
 * @member {String} currency
 */
ShareholderDetails.prototype['currency'] = undefined;

/**
 * @member {String} id
 */
ShareholderDetails.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ShareholderDetails.prototype['name'] = undefined;

/**
 * @member {String} nationality
 */
ShareholderDetails.prototype['nationality'] = undefined;

/**
 * @member {String} nominalValue
 */
ShareholderDetails.prototype['nominalValue'] = undefined;

/**
 * @member {String} percentage
 */
ShareholderDetails.prototype['percentage'] = undefined;

/**
 * @member {String} shareClass
 */
ShareholderDetails.prototype['shareClass'] = undefined;

/**
 * @member {Number} shareCount
 */
ShareholderDetails.prototype['shareCount'] = undefined;

/**
 * @member {String} shareType
 */
ShareholderDetails.prototype['shareType'] = undefined;

/**
 * @member {String} shareholderType
 */
ShareholderDetails.prototype['shareholderType'] = undefined;

/**
 * @member {Number} totalShareCount
 */
ShareholderDetails.prototype['totalShareCount'] = undefined;

/**
 * @member {Number} totalShareValue
 */
ShareholderDetails.prototype['totalShareValue'] = undefined;

/**
 * @member {Number} totalShares
 */
ShareholderDetails.prototype['totalShares'] = undefined;






export default ShareholderDetails;

