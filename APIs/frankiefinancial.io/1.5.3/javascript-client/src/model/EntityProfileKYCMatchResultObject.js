/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityProfileKYCMatchResultObjectMatchTypesValue from './EntityProfileKYCMatchResultObjectMatchTypesValue';

/**
 * The EntityProfileKYCMatchResultObject model module.
 * @module model/EntityProfileKYCMatchResultObject
 * @version 1.5.3
 */
class EntityProfileKYCMatchResultObject {
    /**
     * Constructs a new <code>EntityProfileKYCMatchResultObject</code>.
     * Summary of all KYC matches
     * @alias module:model/EntityProfileKYCMatchResultObject
     */
    constructor() { 
        
        EntityProfileKYCMatchResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityProfileKYCMatchResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityProfileKYCMatchResultObject} obj Optional instance to populate.
     * @return {module:model/EntityProfileKYCMatchResultObject} The populated <code>EntityProfileKYCMatchResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityProfileKYCMatchResultObject();

            if (data.hasOwnProperty('matchCount')) {
                obj['matchCount'] = ApiClient.convertToType(data['matchCount'], 'Number');
            }
            if (data.hasOwnProperty('matchCountRequired')) {
                obj['matchCountRequired'] = ApiClient.convertToType(data['matchCountRequired'], 'Number');
            }
            if (data.hasOwnProperty('matchTypes')) {
                obj['matchTypes'] = ApiClient.convertToType(data['matchTypes'], {'String': EntityProfileKYCMatchResultObjectMatchTypesValue});
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityProfileKYCMatchResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityProfileKYCMatchResultObject</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Number of matches for this set of match types. In other words the sum of the matchCounts in the matchTypes map. Note that for match sets that include government ID (gov_id) this will not neccessaily be the count of matched sources. 
 * @member {Number} matchCount
 */
EntityProfileKYCMatchResultObject.prototype['matchCount'] = undefined;

/**
 * Number of distinct matches (sources and/or matched government ID documents) required for this set of match types. 
 * @member {Number} matchCountRequired
 */
EntityProfileKYCMatchResultObject.prototype['matchCountRequired'] = undefined;

/**
 * The match types that this overall count and result refer to. Currently one or more of: - name - address - dob - gender - gov_id - other_id  These will be keys in a map whose values hold the values for the individual match types. The resultant structure would look like the following. Here dob has zero matches and is not verfied but it was check, so other than the checked flag the value object is simply empty. A completely empty object would imply that match type was not checked.      \"matchTypes\": {       \"address\": {         \"matchCount\": 1,         \"matchSources\": [ \"au-elec-roll\" ],         \"checked\": true,         \"verified\": true       },       \"dob\": {         \"checked\": true       }     }  So for a one_plus KYC check there will be two EntityProfileKYCMatchResultObject records. One for 'name' and one for 'address, dob' (like the sample above). 
 * @member {Object.<String, module:model/EntityProfileKYCMatchResultObjectMatchTypesValue>} matchTypes
 */
EntityProfileKYCMatchResultObject.prototype['matchTypes'] = undefined;

/**
 * True if there are enough matches to meet the requirement
 * @member {Boolean} verified
 */
EntityProfileKYCMatchResultObject.prototype['verified'] = undefined;






export default EntityProfileKYCMatchResultObject;

