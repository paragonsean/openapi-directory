/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Benefits from './Benefits';
import Conditions from './Conditions';
import Contract from './Contract';
import Fees from './Fees';
import NameValue from './NameValue';
import PlanDiscounts from './PlanDiscounts';
import Rates from './Rates';
import Retailer from './Retailer';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 1.5.3
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * All information associated with a given plan
     * @alias module:model/Plan
     * @param defaultOfferMessage {String} Default Offer (DMO/VDO) text to be displayed for this plan
     * @param directDebitRequired {Boolean} Is payment by direct debit required in order to subscribe to this plan
     * @param estimatedBaseCost {Number} Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.
     * @param estimatedSaving {Number} The estimated saving the customer could have realised if they had been on this plan during the billing period
     * @param estimatedTotalCost {Number} Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.
     * @param id {Number} Unique identifier for this plan. This ID is passed when calling the switch API.
     * @param name {String} Name of the plan
     * @param payOnTimeRequired {Boolean} Is pay on time required in order to subscribe to this plan
     * @param rates {module:model/Rates} 
     * @param retailer {module:model/Retailer} 
     * @param type {module:model/Plan.TypeEnum} The type of energy plan * `SR` - Single Rate * `TOU` - Time Of Use
     * @param url {String} Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))
     */
    constructor(defaultOfferMessage, directDebitRequired, estimatedBaseCost, estimatedSaving, estimatedTotalCost, id, name, payOnTimeRequired, rates, retailer, type, url) { 
        
        Plan.initialize(this, defaultOfferMessage, directDebitRequired, estimatedBaseCost, estimatedSaving, estimatedTotalCost, id, name, payOnTimeRequired, rates, retailer, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultOfferMessage, directDebitRequired, estimatedBaseCost, estimatedSaving, estimatedTotalCost, id, name, payOnTimeRequired, rates, retailer, type, url) { 
        obj['defaultOfferMessage'] = defaultOfferMessage;
        obj['directDebitRequired'] = directDebitRequired;
        obj['estimatedBaseCost'] = estimatedBaseCost;
        obj['estimatedSaving'] = estimatedSaving;
        obj['estimatedTotalCost'] = estimatedTotalCost;
        obj['id'] = id;
        obj['name'] = name;
        obj['payOnTimeRequired'] = payOnTimeRequired;
        obj['rates'] = rates;
        obj['retailer'] = retailer;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('benefits')) {
                obj['benefits'] = Benefits.constructFromObject(data['benefits']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = Conditions.constructFromObject(data['conditions']);
            }
            if (data.hasOwnProperty('contract')) {
                obj['contract'] = Contract.constructFromObject(data['contract']);
            }
            if (data.hasOwnProperty('defaultOfferMessage')) {
                obj['defaultOfferMessage'] = ApiClient.convertToType(data['defaultOfferMessage'], 'String');
            }
            if (data.hasOwnProperty('directDebitRequired')) {
                obj['directDebitRequired'] = ApiClient.convertToType(data['directDebitRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = PlanDiscounts.constructFromObject(data['discounts']);
            }
            if (data.hasOwnProperty('estimatedBaseCost')) {
                obj['estimatedBaseCost'] = ApiClient.convertToType(data['estimatedBaseCost'], 'Number');
            }
            if (data.hasOwnProperty('estimatedSaving')) {
                obj['estimatedSaving'] = ApiClient.convertToType(data['estimatedSaving'], 'Number');
            }
            if (data.hasOwnProperty('estimatedTotalCost')) {
                obj['estimatedTotalCost'] = ApiClient.convertToType(data['estimatedTotalCost'], 'Number');
            }
            if (data.hasOwnProperty('feesAndCharges')) {
                obj['feesAndCharges'] = Fees.constructFromObject(data['feesAndCharges']);
            }
            if (data.hasOwnProperty('greenOptions')) {
                obj['greenOptions'] = NameValue.constructFromObject(data['greenOptions']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('payOnTimeRequired')) {
                obj['payOnTimeRequired'] = ApiClient.convertToType(data['payOnTimeRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('paymentOptions')) {
                obj['paymentOptions'] = NameValue.constructFromObject(data['paymentOptions']);
            }
            if (data.hasOwnProperty('rates')) {
                obj['rates'] = Rates.constructFromObject(data['rates']);
            }
            if (data.hasOwnProperty('retailer')) {
                obj['retailer'] = Retailer.constructFromObject(data['retailer']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Plan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Plan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `benefits`
        if (data['benefits']) { // data not null
          Benefits.validateJSON(data['benefits']);
        }
        // validate the optional field `conditions`
        if (data['conditions']) { // data not null
          Conditions.validateJSON(data['conditions']);
        }
        // validate the optional field `contract`
        if (data['contract']) { // data not null
          Contract.validateJSON(data['contract']);
        }
        // ensure the json data is a string
        if (data['defaultOfferMessage'] && !(typeof data['defaultOfferMessage'] === 'string' || data['defaultOfferMessage'] instanceof String)) {
            throw new Error("Expected the field `defaultOfferMessage` to be a primitive type in the JSON string but got " + data['defaultOfferMessage']);
        }
        // validate the optional field `discounts`
        if (data['discounts']) { // data not null
          PlanDiscounts.validateJSON(data['discounts']);
        }
        // validate the optional field `feesAndCharges`
        if (data['feesAndCharges']) { // data not null
          Fees.validateJSON(data['feesAndCharges']);
        }
        // validate the optional field `greenOptions`
        if (data['greenOptions']) { // data not null
          NameValue.validateJSON(data['greenOptions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `paymentOptions`
        if (data['paymentOptions']) { // data not null
          NameValue.validateJSON(data['paymentOptions']);
        }
        // validate the optional field `rates`
        if (data['rates']) { // data not null
          Rates.validateJSON(data['rates']);
        }
        // validate the optional field `retailer`
        if (data['retailer']) { // data not null
          Retailer.validateJSON(data['retailer']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Plan.RequiredProperties = ["defaultOfferMessage", "directDebitRequired", "estimatedBaseCost", "estimatedSaving", "estimatedTotalCost", "id", "name", "payOnTimeRequired", "rates", "retailer", "type", "url"];

/**
 * @member {module:model/Benefits} benefits
 */
Plan.prototype['benefits'] = undefined;

/**
 * @member {module:model/Conditions} conditions
 */
Plan.prototype['conditions'] = undefined;

/**
 * @member {module:model/Contract} contract
 */
Plan.prototype['contract'] = undefined;

/**
 * Default Offer (DMO/VDO) text to be displayed for this plan
 * @member {String} defaultOfferMessage
 */
Plan.prototype['defaultOfferMessage'] = undefined;

/**
 * Is payment by direct debit required in order to subscribe to this plan
 * @member {Boolean} directDebitRequired
 */
Plan.prototype['directDebitRequired'] = undefined;

/**
 * @member {module:model/PlanDiscounts} discounts
 */
Plan.prototype['discounts'] = undefined;

/**
 * Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.
 * @member {Number} estimatedBaseCost
 */
Plan.prototype['estimatedBaseCost'] = undefined;

/**
 * The estimated saving the customer could have realised if they had been on this plan during the billing period
 * @member {Number} estimatedSaving
 */
Plan.prototype['estimatedSaving'] = undefined;

/**
 * Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.
 * @member {Number} estimatedTotalCost
 */
Plan.prototype['estimatedTotalCost'] = undefined;

/**
 * @member {module:model/Fees} feesAndCharges
 */
Plan.prototype['feesAndCharges'] = undefined;

/**
 * @member {module:model/NameValue} greenOptions
 */
Plan.prototype['greenOptions'] = undefined;

/**
 * Unique identifier for this plan. This ID is passed when calling the switch API.
 * @member {Number} id
 */
Plan.prototype['id'] = undefined;

/**
 * Name of the plan
 * @member {String} name
 */
Plan.prototype['name'] = undefined;

/**
 * Is pay on time required in order to subscribe to this plan
 * @member {Boolean} payOnTimeRequired
 */
Plan.prototype['payOnTimeRequired'] = undefined;

/**
 * @member {module:model/NameValue} paymentOptions
 */
Plan.prototype['paymentOptions'] = undefined;

/**
 * @member {module:model/Rates} rates
 */
Plan.prototype['rates'] = undefined;

/**
 * @member {module:model/Retailer} retailer
 */
Plan.prototype['retailer'] = undefined;

/**
 * The type of energy plan * `SR` - Single Rate * `TOU` - Time Of Use
 * @member {module:model/Plan.TypeEnum} type
 */
Plan.prototype['type'] = undefined;

/**
 * Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))
 * @member {String} url
 */
Plan.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Plan['TypeEnum'] = {

    /**
     * value: "SR"
     * @const
     */
    "SR": "SR",

    /**
     * value: "TOU"
     * @const
     */
    "TOU": "TOU"
};



export default Plan;

