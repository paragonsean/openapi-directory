/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressObject from './AddressObject';
import RegulatoryInformation from './RegulatoryInformation';
import StockExchangeData from './StockExchangeData';

/**
 * The BusinessDetails model module.
 * @module model/BusinessDetails
 * @version 1.5.3
 */
class BusinessDetails {
    /**
     * Constructs a new <code>BusinessDetails</code>.
     * The details of the company being checked 
     * @alias module:model/BusinessDetails
     * @param ABN {String} 
     * @param ACN {String} 
     * @param ARBN {String} 
     * @param anzsicCode {String} 
     * @param giin {String} 
     * @param registeredName {String} 
     */
    constructor(ABN, ACN, ARBN, anzsicCode, giin, registeredName) { 
        
        BusinessDetails.initialize(this, ABN, ACN, ARBN, anzsicCode, giin, registeredName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ABN, ACN, ARBN, anzsicCode, giin, registeredName) { 
        obj['ABN'] = ABN;
        obj['ACN'] = ACN;
        obj['ARBN'] = ARBN;
        obj['anzsic_code'] = anzsicCode;
        obj['giin'] = giin;
        obj['registered_name'] = registeredName;
    }

    /**
     * Constructs a <code>BusinessDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BusinessDetails} obj Optional instance to populate.
     * @return {module:model/BusinessDetails} The populated <code>BusinessDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessDetails();

            if (data.hasOwnProperty('ABN')) {
                obj['ABN'] = ApiClient.convertToType(data['ABN'], 'String');
            }
            if (data.hasOwnProperty('ACN')) {
                obj['ACN'] = ApiClient.convertToType(data['ACN'], 'String');
            }
            if (data.hasOwnProperty('ARBN')) {
                obj['ARBN'] = ApiClient.convertToType(data['ARBN'], 'String');
            }
            if (data.hasOwnProperty('anzsic_code')) {
                obj['anzsic_code'] = ApiClient.convertToType(data['anzsic_code'], 'String');
            }
            if (data.hasOwnProperty('asic_company_type')) {
                obj['asic_company_type'] = ApiClient.convertToType(data['asic_company_type'], 'String');
            }
            if (data.hasOwnProperty('business_names')) {
                obj['business_names'] = ApiClient.convertToType(data['business_names'], ['String']);
            }
            if (data.hasOwnProperty('date_registered_with_asic')) {
                obj['date_registered_with_asic'] = ApiClient.convertToType(data['date_registered_with_asic'], 'Date');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('giin')) {
                obj['giin'] = ApiClient.convertToType(data['giin'], 'String');
            }
            if (data.hasOwnProperty('place_of_business')) {
                obj['place_of_business'] = AddressObject.constructFromObject(data['place_of_business']);
            }
            if (data.hasOwnProperty('public_company')) {
                obj['public_company'] = ApiClient.convertToType(data['public_company'], 'Boolean');
            }
            if (data.hasOwnProperty('registered_name')) {
                obj['registered_name'] = ApiClient.convertToType(data['registered_name'], 'String');
            }
            if (data.hasOwnProperty('registered_office')) {
                obj['registered_office'] = AddressObject.constructFromObject(data['registered_office']);
            }
            if (data.hasOwnProperty('regulatory_information')) {
                obj['regulatory_information'] = RegulatoryInformation.constructFromObject(data['regulatory_information']);
            }
            if (data.hasOwnProperty('state_registered_with_asic')) {
                obj['state_registered_with_asic'] = ApiClient.convertToType(data['state_registered_with_asic'], 'String');
            }
            if (data.hasOwnProperty('stock_exchange_data')) {
                obj['stock_exchange_data'] = StockExchangeData.constructFromObject(data['stock_exchange_data']);
            }
            if (data.hasOwnProperty('trading_names')) {
                obj['trading_names'] = ApiClient.convertToType(data['trading_names'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BusinessDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BusinessDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BusinessDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ABN'] && !(typeof data['ABN'] === 'string' || data['ABN'] instanceof String)) {
            throw new Error("Expected the field `ABN` to be a primitive type in the JSON string but got " + data['ABN']);
        }
        // ensure the json data is a string
        if (data['ACN'] && !(typeof data['ACN'] === 'string' || data['ACN'] instanceof String)) {
            throw new Error("Expected the field `ACN` to be a primitive type in the JSON string but got " + data['ACN']);
        }
        // ensure the json data is a string
        if (data['ARBN'] && !(typeof data['ARBN'] === 'string' || data['ARBN'] instanceof String)) {
            throw new Error("Expected the field `ARBN` to be a primitive type in the JSON string but got " + data['ARBN']);
        }
        // ensure the json data is a string
        if (data['anzsic_code'] && !(typeof data['anzsic_code'] === 'string' || data['anzsic_code'] instanceof String)) {
            throw new Error("Expected the field `anzsic_code` to be a primitive type in the JSON string but got " + data['anzsic_code']);
        }
        // ensure the json data is a string
        if (data['asic_company_type'] && !(typeof data['asic_company_type'] === 'string' || data['asic_company_type'] instanceof String)) {
            throw new Error("Expected the field `asic_company_type` to be a primitive type in the JSON string but got " + data['asic_company_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['business_names'])) {
            throw new Error("Expected the field `business_names` to be an array in the JSON data but got " + data['business_names']);
        }
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        // ensure the json data is a string
        if (data['giin'] && !(typeof data['giin'] === 'string' || data['giin'] instanceof String)) {
            throw new Error("Expected the field `giin` to be a primitive type in the JSON string but got " + data['giin']);
        }
        // validate the optional field `place_of_business`
        if (data['place_of_business']) { // data not null
          AddressObject.validateJSON(data['place_of_business']);
        }
        // ensure the json data is a string
        if (data['registered_name'] && !(typeof data['registered_name'] === 'string' || data['registered_name'] instanceof String)) {
            throw new Error("Expected the field `registered_name` to be a primitive type in the JSON string but got " + data['registered_name']);
        }
        // validate the optional field `registered_office`
        if (data['registered_office']) { // data not null
          AddressObject.validateJSON(data['registered_office']);
        }
        // validate the optional field `regulatory_information`
        if (data['regulatory_information']) { // data not null
          RegulatoryInformation.validateJSON(data['regulatory_information']);
        }
        // ensure the json data is a string
        if (data['state_registered_with_asic'] && !(typeof data['state_registered_with_asic'] === 'string' || data['state_registered_with_asic'] instanceof String)) {
            throw new Error("Expected the field `state_registered_with_asic` to be a primitive type in the JSON string but got " + data['state_registered_with_asic']);
        }
        // validate the optional field `stock_exchange_data`
        if (data['stock_exchange_data']) { // data not null
          StockExchangeData.validateJSON(data['stock_exchange_data']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['trading_names'])) {
            throw new Error("Expected the field `trading_names` to be an array in the JSON data but got " + data['trading_names']);
        }

        return true;
    }


}

BusinessDetails.RequiredProperties = ["ABN", "ACN", "ARBN", "anzsic_code", "giin", "registered_name"];

/**
 * @member {String} ABN
 */
BusinessDetails.prototype['ABN'] = undefined;

/**
 * @member {String} ACN
 */
BusinessDetails.prototype['ACN'] = undefined;

/**
 * @member {String} ARBN
 */
BusinessDetails.prototype['ARBN'] = undefined;

/**
 * @member {String} anzsic_code
 */
BusinessDetails.prototype['anzsic_code'] = undefined;

/**
 * @member {String} asic_company_type
 */
BusinessDetails.prototype['asic_company_type'] = undefined;

/**
 * @member {Array.<String>} business_names
 */
BusinessDetails.prototype['business_names'] = undefined;

/**
 * @member {Date} date_registered_with_asic
 */
BusinessDetails.prototype['date_registered_with_asic'] = undefined;

/**
 * Frankie's unique identifier for the business.  Uses a non-versioned UUID format 
 * @member {String} entity_id
 */
BusinessDetails.prototype['entity_id'] = undefined;

/**
 * @member {String} giin
 */
BusinessDetails.prototype['giin'] = undefined;

/**
 * @member {module:model/AddressObject} place_of_business
 */
BusinessDetails.prototype['place_of_business'] = undefined;

/**
 * @member {Boolean} public_company
 */
BusinessDetails.prototype['public_company'] = undefined;

/**
 * @member {String} registered_name
 */
BusinessDetails.prototype['registered_name'] = undefined;

/**
 * @member {module:model/AddressObject} registered_office
 */
BusinessDetails.prototype['registered_office'] = undefined;

/**
 * @member {module:model/RegulatoryInformation} regulatory_information
 */
BusinessDetails.prototype['regulatory_information'] = undefined;

/**
 * @member {String} state_registered_with_asic
 */
BusinessDetails.prototype['state_registered_with_asic'] = undefined;

/**
 * @member {module:model/StockExchangeData} stock_exchange_data
 */
BusinessDetails.prototype['stock_exchange_data'] = undefined;

/**
 * @member {Array.<String>} trading_names
 */
BusinessDetails.prototype['trading_names'] = undefined;






export default BusinessDetails;

