/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayOfAddressLineDTO from './ArrayOfAddressLineDTO';

/**
 * The AddressDTO model module.
 * @module model/AddressDTO
 * @version 1.5.3
 */
class AddressDTO {
    /**
     * Constructs a new <code>AddressDTO</code>.
     * @alias module:model/AddressDTO
     */
    constructor() { 
        
        AddressDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressDTO} obj Optional instance to populate.
     * @return {module:model/AddressDTO} The populated <code>AddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressDTO();

            if (data.hasOwnProperty('AddressInOneLine')) {
                obj['AddressInOneLine'] = ApiClient.convertToType(data['AddressInOneLine'], 'String');
            }
            if (data.hasOwnProperty('AddressLine1')) {
                obj['AddressLine1'] = ApiClient.convertToType(data['AddressLine1'], 'String');
            }
            if (data.hasOwnProperty('AddressLine2')) {
                obj['AddressLine2'] = ApiClient.convertToType(data['AddressLine2'], 'String');
            }
            if (data.hasOwnProperty('AddressLine3')) {
                obj['AddressLine3'] = ApiClient.convertToType(data['AddressLine3'], 'String');
            }
            if (data.hasOwnProperty('AddressLine4')) {
                obj['AddressLine4'] = ApiClient.convertToType(data['AddressLine4'], 'String');
            }
            if (data.hasOwnProperty('AddressLine5')) {
                obj['AddressLine5'] = ApiClient.convertToType(data['AddressLine5'], 'String');
            }
            if (data.hasOwnProperty('CityTown')) {
                obj['CityTown'] = ApiClient.convertToType(data['CityTown'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('FaxNumber')) {
                obj['FaxNumber'] = ApiClient.convertToType(data['FaxNumber'], 'String');
            }
            if (data.hasOwnProperty('Line')) {
                obj['Line'] = ArrayOfAddressLineDTO.constructFromObject(data['Line']);
            }
            if (data.hasOwnProperty('Postcode')) {
                obj['Postcode'] = ApiClient.convertToType(data['Postcode'], 'String');
            }
            if (data.hasOwnProperty('RegionState')) {
                obj['RegionState'] = ApiClient.convertToType(data['RegionState'], 'String');
            }
            if (data.hasOwnProperty('TelephoneNumber')) {
                obj['TelephoneNumber'] = ApiClient.convertToType(data['TelephoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('TypeCode')) {
                obj['TypeCode'] = ApiClient.convertToType(data['TypeCode'], 'String');
            }
            if (data.hasOwnProperty('WebsiteUrl')) {
                obj['WebsiteUrl'] = ApiClient.convertToType(data['WebsiteUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddressDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddressDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AddressInOneLine'] && !(typeof data['AddressInOneLine'] === 'string' || data['AddressInOneLine'] instanceof String)) {
            throw new Error("Expected the field `AddressInOneLine` to be a primitive type in the JSON string but got " + data['AddressInOneLine']);
        }
        // ensure the json data is a string
        if (data['AddressLine1'] && !(typeof data['AddressLine1'] === 'string' || data['AddressLine1'] instanceof String)) {
            throw new Error("Expected the field `AddressLine1` to be a primitive type in the JSON string but got " + data['AddressLine1']);
        }
        // ensure the json data is a string
        if (data['AddressLine2'] && !(typeof data['AddressLine2'] === 'string' || data['AddressLine2'] instanceof String)) {
            throw new Error("Expected the field `AddressLine2` to be a primitive type in the JSON string but got " + data['AddressLine2']);
        }
        // ensure the json data is a string
        if (data['AddressLine3'] && !(typeof data['AddressLine3'] === 'string' || data['AddressLine3'] instanceof String)) {
            throw new Error("Expected the field `AddressLine3` to be a primitive type in the JSON string but got " + data['AddressLine3']);
        }
        // ensure the json data is a string
        if (data['AddressLine4'] && !(typeof data['AddressLine4'] === 'string' || data['AddressLine4'] instanceof String)) {
            throw new Error("Expected the field `AddressLine4` to be a primitive type in the JSON string but got " + data['AddressLine4']);
        }
        // ensure the json data is a string
        if (data['AddressLine5'] && !(typeof data['AddressLine5'] === 'string' || data['AddressLine5'] instanceof String)) {
            throw new Error("Expected the field `AddressLine5` to be a primitive type in the JSON string but got " + data['AddressLine5']);
        }
        // ensure the json data is a string
        if (data['CityTown'] && !(typeof data['CityTown'] === 'string' || data['CityTown'] instanceof String)) {
            throw new Error("Expected the field `CityTown` to be a primitive type in the JSON string but got " + data['CityTown']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['FaxNumber'] && !(typeof data['FaxNumber'] === 'string' || data['FaxNumber'] instanceof String)) {
            throw new Error("Expected the field `FaxNumber` to be a primitive type in the JSON string but got " + data['FaxNumber']);
        }
        // validate the optional field `Line`
        if (data['Line']) { // data not null
          ArrayOfAddressLineDTO.validateJSON(data['Line']);
        }
        // ensure the json data is a string
        if (data['Postcode'] && !(typeof data['Postcode'] === 'string' || data['Postcode'] instanceof String)) {
            throw new Error("Expected the field `Postcode` to be a primitive type in the JSON string but got " + data['Postcode']);
        }
        // ensure the json data is a string
        if (data['RegionState'] && !(typeof data['RegionState'] === 'string' || data['RegionState'] instanceof String)) {
            throw new Error("Expected the field `RegionState` to be a primitive type in the JSON string but got " + data['RegionState']);
        }
        // ensure the json data is a string
        if (data['TelephoneNumber'] && !(typeof data['TelephoneNumber'] === 'string' || data['TelephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `TelephoneNumber` to be a primitive type in the JSON string but got " + data['TelephoneNumber']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['TypeCode'] && !(typeof data['TypeCode'] === 'string' || data['TypeCode'] instanceof String)) {
            throw new Error("Expected the field `TypeCode` to be a primitive type in the JSON string but got " + data['TypeCode']);
        }
        // ensure the json data is a string
        if (data['WebsiteUrl'] && !(typeof data['WebsiteUrl'] === 'string' || data['WebsiteUrl'] instanceof String)) {
            throw new Error("Expected the field `WebsiteUrl` to be a primitive type in the JSON string but got " + data['WebsiteUrl']);
        }

        return true;
    }


}



/**
 * @member {String} AddressInOneLine
 */
AddressDTO.prototype['AddressInOneLine'] = undefined;

/**
 * @member {String} AddressLine1
 */
AddressDTO.prototype['AddressLine1'] = undefined;

/**
 * @member {String} AddressLine2
 */
AddressDTO.prototype['AddressLine2'] = undefined;

/**
 * @member {String} AddressLine3
 */
AddressDTO.prototype['AddressLine3'] = undefined;

/**
 * @member {String} AddressLine4
 */
AddressDTO.prototype['AddressLine4'] = undefined;

/**
 * @member {String} AddressLine5
 */
AddressDTO.prototype['AddressLine5'] = undefined;

/**
 * @member {String} CityTown
 */
AddressDTO.prototype['CityTown'] = undefined;

/**
 * @member {String} Country
 */
AddressDTO.prototype['Country'] = undefined;

/**
 * @member {String} Email
 */
AddressDTO.prototype['Email'] = undefined;

/**
 * @member {String} FaxNumber
 */
AddressDTO.prototype['FaxNumber'] = undefined;

/**
 * @member {module:model/ArrayOfAddressLineDTO} Line
 */
AddressDTO.prototype['Line'] = undefined;

/**
 * @member {String} Postcode
 */
AddressDTO.prototype['Postcode'] = undefined;

/**
 * @member {String} RegionState
 */
AddressDTO.prototype['RegionState'] = undefined;

/**
 * @member {String} TelephoneNumber
 */
AddressDTO.prototype['TelephoneNumber'] = undefined;

/**
 * @member {String} Type
 */
AddressDTO.prototype['Type'] = undefined;

/**
 * @member {String} TypeCode
 */
AddressDTO.prototype['TypeCode'] = undefined;

/**
 * @member {String} WebsiteUrl
 */
AddressDTO.prototype['WebsiteUrl'] = undefined;






export default AddressDTO;

