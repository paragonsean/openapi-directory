/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InternationalBusinessSearchCriteria model module.
 * @module model/InternationalBusinessSearchCriteria
 * @version 1.5.3
 */
class InternationalBusinessSearchCriteria {
    /**
     * Constructs a new <code>InternationalBusinessSearchCriteria</code>.
     * Object to supply the country code, business name and number, along with an optional registry parameter to search for. 
     * @alias module:model/InternationalBusinessSearchCriteria
     * @param country {String} The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 
     */
    constructor(country) { 
        
        InternationalBusinessSearchCriteria.initialize(this, country);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country) { 
        obj['country'] = country;
    }

    /**
     * Constructs a <code>InternationalBusinessSearchCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InternationalBusinessSearchCriteria} obj Optional instance to populate.
     * @return {module:model/InternationalBusinessSearchCriteria} The populated <code>InternationalBusinessSearchCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InternationalBusinessSearchCriteria();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('organisation_name')) {
                obj['organisation_name'] = ApiClient.convertToType(data['organisation_name'], 'String');
            }
            if (data.hasOwnProperty('organisation_number')) {
                obj['organisation_number'] = ApiClient.convertToType(data['organisation_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InternationalBusinessSearchCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InternationalBusinessSearchCriteria</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InternationalBusinessSearchCriteria.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['organisation_name'] && !(typeof data['organisation_name'] === 'string' || data['organisation_name'] instanceof String)) {
            throw new Error("Expected the field `organisation_name` to be a primitive type in the JSON string but got " + data['organisation_name']);
        }
        // ensure the json data is a string
        if (data['organisation_number'] && !(typeof data['organisation_number'] === 'string' || data['organisation_number'] instanceof String)) {
            throw new Error("Expected the field `organisation_number` to be a primitive type in the JSON string but got " + data['organisation_number']);
        }

        return true;
    }


}

InternationalBusinessSearchCriteria.RequiredProperties = ["country"];

/**
 * The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 
 * @member {String} country
 */
InternationalBusinessSearchCriteria.prototype['country'] = undefined;

/**
 * Name or name fragment you wish to search for.   Note: The less you supply, the more, but less relevant results will be returned.  CRITICAL NOTE: This is *NOT* to be used as a progressive search function.  You must supply at least one of organisation_name and/or organisation_number. If you supply both, a name search will be conducted first, then the number will be checked against the result set and any remaining results returned. 
 * @member {String} organisation_name
 */
InternationalBusinessSearchCriteria.prototype['organisation_name'] = undefined;

/**
 * The business number you wish to search on. This should be a unique corporate identifier as per the country registry you're searching. 
 * @member {String} organisation_number
 */
InternationalBusinessSearchCriteria.prototype['organisation_number'] = undefined;






export default InternationalBusinessSearchCriteria;

