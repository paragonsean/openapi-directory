/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MedicareCard model module.
 * @module model/MedicareCard
 * @version 1.5.3
 */
class MedicareCard {
    /**
     * Constructs a new <code>MedicareCard</code>.
     * @alias module:model/MedicareCard
     * @param expiryDate {String} Expiry date of drivers licence
     * @param number {String} Medicare Card Number
     * @param type {module:model/MedicareCard.TypeEnum} Document identifier
     */
    constructor(expiryDate, number, type) { 
        
        MedicareCard.initialize(this, expiryDate, number, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiryDate, number, type) { 
        obj['expiryDate'] = expiryDate;
        obj['number'] = number;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MedicareCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MedicareCard} obj Optional instance to populate.
     * @return {module:model/MedicareCard} The populated <code>MedicareCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MedicareCard();

            if (data.hasOwnProperty('cardColor')) {
                obj['cardColor'] = ApiClient.convertToType(data['cardColor'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('referenceNumber')) {
                obj['referenceNumber'] = ApiClient.convertToType(data['referenceNumber'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MedicareCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MedicareCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MedicareCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardColor'] && !(typeof data['cardColor'] === 'string' || data['cardColor'] instanceof String)) {
            throw new Error("Expected the field `cardColor` to be a primitive type in the JSON string but got " + data['cardColor']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['referenceNumber'] && !(typeof data['referenceNumber'] === 'string' || data['referenceNumber'] instanceof String)) {
            throw new Error("Expected the field `referenceNumber` to be a primitive type in the JSON string but got " + data['referenceNumber']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

MedicareCard.RequiredProperties = ["expiryDate", "number", "type"];

/**
 * Card color
 * @member {module:model/MedicareCard.CardColorEnum} cardColor
 */
MedicareCard.prototype['cardColor'] = undefined;

/**
 * Expiry date of drivers licence
 * @member {String} expiryDate
 */
MedicareCard.prototype['expiryDate'] = undefined;

/**
 * Middle Name on Card
 * @member {String} middleName
 */
MedicareCard.prototype['middleName'] = undefined;

/**
 * Medicare Card Number
 * @member {String} number
 */
MedicareCard.prototype['number'] = undefined;

/**
 * Medicare Card Reference Number
 * @member {String} referenceNumber
 */
MedicareCard.prototype['referenceNumber'] = undefined;

/**
 * Document identifier
 * @member {module:model/MedicareCard.TypeEnum} type
 */
MedicareCard.prototype['type'] = undefined;





/**
 * Allowed values for the <code>cardColor</code> property.
 * @enum {String}
 * @readonly
 */
MedicareCard['CardColorEnum'] = {

    /**
     * value: "green"
     * @const
     */
    "green": "green",

    /**
     * value: "blue"
     * @const
     */
    "blue": "blue",

    /**
     * value: "yellow"
     * @const
     */
    "yellow": "yellow"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MedicareCard['TypeEnum'] = {

    /**
     * value: "medicare"
     * @const
     */
    "medicare": "medicare"
};



export default MedicareCard;

