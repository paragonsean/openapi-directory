/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressObject from './AddressObject';
import ScreeningResult from './ScreeningResult';

/**
 * The IndividualData model module.
 * @module model/IndividualData
 * @version 1.5.3
 */
class IndividualData {
    /**
     * Constructs a new <code>IndividualData</code>.
     * x
     * @alias module:model/IndividualData
     * @param beneficiallyHeld {Boolean} If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 
     * @param percentOwned {Number} If describing an (ultimate) beneficial owner, the percentage of the company owned by this Individual 
     * @param role {String} If this individual has a role as an officeholder, such as director, then this will be described here. May be blank. 
     */
    constructor(beneficiallyHeld, percentOwned, role) { 
        
        IndividualData.initialize(this, beneficiallyHeld, percentOwned, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, beneficiallyHeld, percentOwned, role) { 
        obj['beneficially_held'] = beneficiallyHeld;
        obj['percent_owned'] = percentOwned;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>IndividualData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndividualData} obj Optional instance to populate.
     * @return {module:model/IndividualData} The populated <code>IndividualData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndividualData();

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [AddressObject]);
            }
            if (data.hasOwnProperty('beneficially_held')) {
                obj['beneficially_held'] = ApiClient.convertToType(data['beneficially_held'], 'Boolean');
            }
            if (data.hasOwnProperty('date_of_birth')) {
                obj['date_of_birth'] = ApiClient.convertToType(data['date_of_birth'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percent_owned')) {
                obj['percent_owned'] = ApiClient.convertToType(data['percent_owned'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('screening_result')) {
                obj['screening_result'] = ScreeningResult.constructFromObject(data['screening_result']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndividualData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndividualData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IndividualData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                AddressObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `screening_result`
        if (data['screening_result']) { // data not null
          ScreeningResult.validateJSON(data['screening_result']);
        }

        return true;
    }


}

IndividualData.RequiredProperties = ["beneficially_held", "percent_owned", "role"];

/**
 * List of all found addresses associated with this person 
 * @member {Array.<module:model/AddressObject>} addresses
 */
IndividualData.prototype['addresses'] = undefined;

/**
 * If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 
 * @member {Boolean} beneficially_held
 */
IndividualData.prototype['beneficially_held'] = undefined;

/**
 * RFC3339 formatted date
 * @member {Date} date_of_birth
 */
IndividualData.prototype['date_of_birth'] = undefined;

/**
 * Name of the individual 
 * @member {String} name
 */
IndividualData.prototype['name'] = undefined;

/**
 * If describing an (ultimate) beneficial owner, the percentage of the company owned by this Individual 
 * @member {Number} percent_owned
 */
IndividualData.prototype['percent_owned'] = undefined;

/**
 * If this individual has a role as an officeholder, such as director, then this will be described here. May be blank. 
 * @member {String} role
 */
IndividualData.prototype['role'] = undefined;

/**
 * @member {module:model/ScreeningResult} screening_result
 */
IndividualData.prototype['screening_result'] = undefined;






export default IndividualData;

