/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityObject from './EntityObject';
import IdentityDocumentObject from './IdentityDocumentObject';
import ProcessResultObject from './ProcessResultObject';

/**
 * The DocumentScanResultObject model module.
 * @module model/DocumentScanResultObject
 * @version 1.5.3
 */
class DocumentScanResultObject {
    /**
     * Constructs a new <code>DocumentScanResultObject</code>.
     * The result of a scan will contain 4 parts  * The requestid - that&#39;s always there, and is the same that was passed in in the header.  * The results of the process and the meta data around it, including confidence levels, service used and the like  * extractedDocument - this will be an updated version of the document object passed in for scanning with results of the scan inserted. You can subsequently update this data as needed (say after confirmation with the end-consumer) through the various update functions.     * Any additional data extracted from the service that does not fit into the standard identity document fields will be placed into the extraData KVPs.    * extractedEntity - the service will attempt to create the basics of an entity&#39;s name, address, DoB, gender from the data returned from the scan.    You can then use this entity data to create a new entity for a wider check if needed.      * Note if you plan on doing this, make sure you include the extractedDocument reference in the \&quot;new\&quot; entity.    * EXTRA SPECIAL NOTE: If no useful data was returned in the scan, extractedDocument will be left unchanged, and extractedEntity will be left out 
     * @alias module:model/DocumentScanResultObject
     * @param processResult {module:model/ProcessResultObject} 
     * @param requestId {String} Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
     */
    constructor(processResult, requestId) { 
        
        DocumentScanResultObject.initialize(this, processResult, requestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, processResult, requestId) { 
        obj['processResult'] = processResult;
        obj['requestId'] = requestId;
    }

    /**
     * Constructs a <code>DocumentScanResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentScanResultObject} obj Optional instance to populate.
     * @return {module:model/DocumentScanResultObject} The populated <code>DocumentScanResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentScanResultObject();

            if (data.hasOwnProperty('extractedDocument')) {
                obj['extractedDocument'] = IdentityDocumentObject.constructFromObject(data['extractedDocument']);
            }
            if (data.hasOwnProperty('extractedEntity')) {
                obj['extractedEntity'] = EntityObject.constructFromObject(data['extractedEntity']);
            }
            if (data.hasOwnProperty('processResult')) {
                obj['processResult'] = ProcessResultObject.constructFromObject(data['processResult']);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentScanResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentScanResultObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentScanResultObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `extractedDocument`
        if (data['extractedDocument']) { // data not null
          IdentityDocumentObject.validateJSON(data['extractedDocument']);
        }
        // validate the optional field `extractedEntity`
        if (data['extractedEntity']) { // data not null
          EntityObject.validateJSON(data['extractedEntity']);
        }
        // validate the optional field `processResult`
        if (data['processResult']) { // data not null
          ProcessResultObject.validateJSON(data['processResult']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}

DocumentScanResultObject.RequiredProperties = ["processResult", "requestId"];

/**
 * @member {module:model/IdentityDocumentObject} extractedDocument
 */
DocumentScanResultObject.prototype['extractedDocument'] = undefined;

/**
 * @member {module:model/EntityObject} extractedEntity
 */
DocumentScanResultObject.prototype['extractedEntity'] = undefined;

/**
 * @member {module:model/ProcessResultObject} processResult
 */
DocumentScanResultObject.prototype['processResult'] = undefined;

/**
 * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
 * @member {String} requestId
 */
DocumentScanResultObject.prototype['requestId'] = undefined;






export default DocumentScanResultObject;

