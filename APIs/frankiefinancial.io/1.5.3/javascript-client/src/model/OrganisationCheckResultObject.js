/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckEntityCheckResultObject from './CheckEntityCheckResultObject';
import ErrorObject from './ErrorObject';

/**
 * The OrganisationCheckResultObject model module.
 * @module model/OrganisationCheckResultObject
 * @version 1.5.3
 */
class OrganisationCheckResultObject {
    /**
     * Constructs a new <code>OrganisationCheckResultObject</code>.
     * The results of KYC/AML check on a organisation with a prior ownership query. This will be retrived via GET /retrieve/response/{requestId} after you receive a notification that the results are ready. 
     * @alias module:model/OrganisationCheckResultObject
     */
    constructor() { 
        
        OrganisationCheckResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrganisationCheckResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrganisationCheckResultObject} obj Optional instance to populate.
     * @return {module:model/OrganisationCheckResultObject} The populated <code>OrganisationCheckResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganisationCheckResultObject();

            if (data.hasOwnProperty('entityCategories')) {
                obj['entityCategories'] = ApiClient.convertToType(data['entityCategories'], {'String': ['String']});
            }
            if (data.hasOwnProperty('entityCheckErrors')) {
                obj['entityCheckErrors'] = ApiClient.convertToType(data['entityCheckErrors'], {'String': ErrorObject});
            }
            if (data.hasOwnProperty('entityCheckResults')) {
                obj['entityCheckResults'] = ApiClient.convertToType(data['entityCheckResults'], {'String': CheckEntityCheckResultObject});
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganisationCheckResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganisationCheckResultObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }

        return true;
    }


}



/**
 * A map of the entity categories that were selected for checks and an array of the entity IDs for each. The results for each entity ID will be in either the entityCheckResults or entityCheckErrors maps. Entities may appear in more than one category. 
 * @member {Object.<String, Array.<String>>} entityCategories
 */
OrganisationCheckResultObject.prototype['entityCategories'] = undefined;

/**
 * A map of outright errors (failure to generate any kind of result). These objects will be referenced by entity ID in the entity category map. 
 * @member {Object.<String, module:model/ErrorObject>} entityCheckErrors
 */
OrganisationCheckResultObject.prototype['entityCheckErrors'] = undefined;

/**
 * List of all entities check results (both individuals and organisations) other than outright errors. These objects will be referenced by entity ID in the entity category map. 
 * @member {Object.<String, module:model/CheckEntityCheckResultObject>} entityCheckResults
 */
OrganisationCheckResultObject.prototype['entityCheckResults'] = undefined;

/**
 * The entityId of the organisation for which this result was created. 
 * @member {String} entityId
 */
OrganisationCheckResultObject.prototype['entityId'] = undefined;

/**
 * The unique ID for grouping all new KYC/AML checks in this result. This is only for Frankie internal use. 
 * @member {String} groupId
 */
OrganisationCheckResultObject.prototype['groupId'] = undefined;






export default OrganisationCheckResultObject;

