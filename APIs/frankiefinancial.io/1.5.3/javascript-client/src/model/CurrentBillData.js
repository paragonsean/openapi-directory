/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrentBillDataSolarInner from './CurrentBillDataSolarInner';
import Period from './Period';
import Retailer from './Retailer';

/**
 * The CurrentBillData model module.
 * @module model/CurrentBillData
 * @version 1.5.3
 */
class CurrentBillData {
    /**
     * Constructs a new <code>CurrentBillData</code>.
     * Data from uploaded bill
     * @alias module:model/CurrentBillData
     * @param accountAddress {String} Account (Billing) address.
     * @param accountName {String} Customer name.
     * @param accountNumber {String} Customer account number
     * @param actualPlanTotalCost {Number} Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.
     * @param billDateFrom {String} Start date for billing period
     * @param billDateTo {String} End date for billing period
     * @param days {Number} Number of days in billing period (billDateTo - billDateFrom)
     * @param discount {Number} Total value of all unconditional discounts applied to the bill
     * @param fuelType {module:model/CurrentBillData.FuelTypeEnum} * `E` - Electricity 
     * @param nmi {String} National Meter identifier (NMI)
     * @param periods {Array.<module:model/Period>} Rates and charges for each period on the bill
     * @param retailer {module:model/Retailer} 
     * @param supplyAddress {String} Supply address. This may differ from account address if bill payers address is different from account address.
     */
    constructor(accountAddress, accountName, accountNumber, actualPlanTotalCost, billDateFrom, billDateTo, days, discount, fuelType, nmi, periods, retailer, supplyAddress) { 
        
        CurrentBillData.initialize(this, accountAddress, accountName, accountNumber, actualPlanTotalCost, billDateFrom, billDateTo, days, discount, fuelType, nmi, periods, retailer, supplyAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountAddress, accountName, accountNumber, actualPlanTotalCost, billDateFrom, billDateTo, days, discount, fuelType, nmi, periods, retailer, supplyAddress) { 
        obj['accountAddress'] = accountAddress;
        obj['accountName'] = accountName;
        obj['accountNumber'] = accountNumber;
        obj['actualPlanTotalCost'] = actualPlanTotalCost;
        obj['billDateFrom'] = billDateFrom;
        obj['billDateTo'] = billDateTo;
        obj['days'] = days;
        obj['discount'] = discount;
        obj['fuelType'] = fuelType;
        obj['nmi'] = nmi;
        obj['periods'] = periods;
        obj['retailer'] = retailer;
        obj['supplyAddress'] = supplyAddress;
    }

    /**
     * Constructs a <code>CurrentBillData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrentBillData} obj Optional instance to populate.
     * @return {module:model/CurrentBillData} The populated <code>CurrentBillData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrentBillData();

            if (data.hasOwnProperty('accountAddress')) {
                obj['accountAddress'] = ApiClient.convertToType(data['accountAddress'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('actualPlanTotalCost')) {
                obj['actualPlanTotalCost'] = ApiClient.convertToType(data['actualPlanTotalCost'], 'Number');
            }
            if (data.hasOwnProperty('billDateFrom')) {
                obj['billDateFrom'] = ApiClient.convertToType(data['billDateFrom'], 'String');
            }
            if (data.hasOwnProperty('billDateTo')) {
                obj['billDateTo'] = ApiClient.convertToType(data['billDateTo'], 'String');
            }
            if (data.hasOwnProperty('days')) {
                obj['days'] = ApiClient.convertToType(data['days'], 'Number');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('fuelType')) {
                obj['fuelType'] = ApiClient.convertToType(data['fuelType'], 'String');
            }
            if (data.hasOwnProperty('nmi')) {
                obj['nmi'] = ApiClient.convertToType(data['nmi'], 'String');
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], [Period]);
            }
            if (data.hasOwnProperty('retailer')) {
                obj['retailer'] = Retailer.constructFromObject(data['retailer']);
            }
            if (data.hasOwnProperty('solar')) {
                obj['solar'] = ApiClient.convertToType(data['solar'], [CurrentBillDataSolarInner]);
            }
            if (data.hasOwnProperty('supplyAddress')) {
                obj['supplyAddress'] = ApiClient.convertToType(data['supplyAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrentBillData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrentBillData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CurrentBillData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountAddress'] && !(typeof data['accountAddress'] === 'string' || data['accountAddress'] instanceof String)) {
            throw new Error("Expected the field `accountAddress` to be a primitive type in the JSON string but got " + data['accountAddress']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['billDateFrom'] && !(typeof data['billDateFrom'] === 'string' || data['billDateFrom'] instanceof String)) {
            throw new Error("Expected the field `billDateFrom` to be a primitive type in the JSON string but got " + data['billDateFrom']);
        }
        // ensure the json data is a string
        if (data['billDateTo'] && !(typeof data['billDateTo'] === 'string' || data['billDateTo'] instanceof String)) {
            throw new Error("Expected the field `billDateTo` to be a primitive type in the JSON string but got " + data['billDateTo']);
        }
        // ensure the json data is a string
        if (data['fuelType'] && !(typeof data['fuelType'] === 'string' || data['fuelType'] instanceof String)) {
            throw new Error("Expected the field `fuelType` to be a primitive type in the JSON string but got " + data['fuelType']);
        }
        // ensure the json data is a string
        if (data['nmi'] && !(typeof data['nmi'] === 'string' || data['nmi'] instanceof String)) {
            throw new Error("Expected the field `nmi` to be a primitive type in the JSON string but got " + data['nmi']);
        }
        if (data['periods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['periods'])) {
                throw new Error("Expected the field `periods` to be an array in the JSON data but got " + data['periods']);
            }
            // validate the optional field `periods` (array)
            for (const item of data['periods']) {
                Period.validateJSON(item);
            };
        }
        // validate the optional field `retailer`
        if (data['retailer']) { // data not null
          Retailer.validateJSON(data['retailer']);
        }
        if (data['solar']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['solar'])) {
                throw new Error("Expected the field `solar` to be an array in the JSON data but got " + data['solar']);
            }
            // validate the optional field `solar` (array)
            for (const item of data['solar']) {
                CurrentBillDataSolarInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['supplyAddress'] && !(typeof data['supplyAddress'] === 'string' || data['supplyAddress'] instanceof String)) {
            throw new Error("Expected the field `supplyAddress` to be a primitive type in the JSON string but got " + data['supplyAddress']);
        }

        return true;
    }


}

CurrentBillData.RequiredProperties = ["accountAddress", "accountName", "accountNumber", "actualPlanTotalCost", "billDateFrom", "billDateTo", "days", "discount", "fuelType", "nmi", "periods", "retailer", "supplyAddress"];

/**
 * Account (Billing) address.
 * @member {String} accountAddress
 */
CurrentBillData.prototype['accountAddress'] = undefined;

/**
 * Customer name.
 * @member {String} accountName
 */
CurrentBillData.prototype['accountName'] = undefined;

/**
 * Customer account number
 * @member {String} accountNumber
 */
CurrentBillData.prototype['accountNumber'] = undefined;

/**
 * Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.
 * @member {Number} actualPlanTotalCost
 */
CurrentBillData.prototype['actualPlanTotalCost'] = undefined;

/**
 * Start date for billing period
 * @member {String} billDateFrom
 */
CurrentBillData.prototype['billDateFrom'] = undefined;

/**
 * End date for billing period
 * @member {String} billDateTo
 */
CurrentBillData.prototype['billDateTo'] = undefined;

/**
 * Number of days in billing period (billDateTo - billDateFrom)
 * @member {Number} days
 */
CurrentBillData.prototype['days'] = undefined;

/**
 * Total value of all unconditional discounts applied to the bill
 * @member {Number} discount
 */
CurrentBillData.prototype['discount'] = undefined;

/**
 * * `E` - Electricity 
 * @member {module:model/CurrentBillData.FuelTypeEnum} fuelType
 */
CurrentBillData.prototype['fuelType'] = undefined;

/**
 * National Meter identifier (NMI)
 * @member {String} nmi
 */
CurrentBillData.prototype['nmi'] = undefined;

/**
 * Rates and charges for each period on the bill
 * @member {Array.<module:model/Period>} periods
 */
CurrentBillData.prototype['periods'] = undefined;

/**
 * @member {module:model/Retailer} retailer
 */
CurrentBillData.prototype['retailer'] = undefined;

/**
 * Array of rates and charges for solar on the bill, by period. If no solar is present on the uploaded bill this object will not be present.
 * @member {Array.<module:model/CurrentBillDataSolarInner>} solar
 */
CurrentBillData.prototype['solar'] = undefined;

/**
 * Supply address. This may differ from account address if bill payers address is different from account address.
 * @member {String} supplyAddress
 */
CurrentBillData.prototype['supplyAddress'] = undefined;





/**
 * Allowed values for the <code>fuelType</code> property.
 * @enum {String}
 * @readonly
 */
CurrentBillData['FuelTypeEnum'] = {

    /**
     * value: "E"
     * @const
     */
    "E": "E"
};



export default CurrentBillData;

