/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeDescription from './CodeDescription';
import OrganisationDataObjectRegistration from './OrganisationDataObjectRegistration';
import ShareStructureObject from './ShareStructureObject';

/**
 * The OrganisationDataObject model module.
 * @module model/OrganisationDataObject
 * @version 1.5.3
 */
class OrganisationDataObject {
    /**
     * Constructs a new <code>OrganisationDataObject</code>.
     * Organisation details for entities. Returned from an ASIC report. 
     * @alias module:model/OrganisationDataObject
     */
    constructor() { 
        
        OrganisationDataObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrganisationDataObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrganisationDataObject} obj Optional instance to populate.
     * @return {module:model/OrganisationDataObject} The populated <code>OrganisationDataObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrganisationDataObject();

            if (data.hasOwnProperty('adverseCreditDataPresent')) {
                obj['adverseCreditDataPresent'] = ApiClient.convertToType(data['adverseCreditDataPresent'], 'Boolean');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = CodeDescription.constructFromObject(data['class']);
            }
            if (data.hasOwnProperty('disclosingEntityIndicator')) {
                obj['disclosingEntityIndicator'] = ApiClient.convertToType(data['disclosingEntityIndicator'], 'Boolean');
            }
            if (data.hasOwnProperty('includesNonBeneficiallyHeld')) {
                obj['includesNonBeneficiallyHeld'] = ApiClient.convertToType(data['includesNonBeneficiallyHeld'], 'Boolean');
            }
            if (data.hasOwnProperty('kycCustomerType')) {
                obj['kycCustomerType'] = ApiClient.convertToType(data['kycCustomerType'], 'String');
            }
            if (data.hasOwnProperty('lastCheckDate')) {
                obj['lastCheckDate'] = ApiClient.convertToType(data['lastCheckDate'], 'Date');
            }
            if (data.hasOwnProperty('ownershipResolved')) {
                obj['ownershipResolved'] = ApiClient.convertToType(data['ownershipResolved'], 'Boolean');
            }
            if (data.hasOwnProperty('registeredName')) {
                obj['registeredName'] = ApiClient.convertToType(data['registeredName'], 'String');
            }
            if (data.hasOwnProperty('registration')) {
                obj['registration'] = OrganisationDataObjectRegistration.constructFromObject(data['registration']);
            }
            if (data.hasOwnProperty('shareStructure')) {
                obj['shareStructure'] = ApiClient.convertToType(data['shareStructure'], [ShareStructureObject]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CodeDescription.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subclass')) {
                obj['subclass'] = CodeDescription.constructFromObject(data['subclass']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CodeDescription.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrganisationDataObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrganisationDataObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `class`
        if (data['class']) { // data not null
          CodeDescription.validateJSON(data['class']);
        }
        // ensure the json data is a string
        if (data['kycCustomerType'] && !(typeof data['kycCustomerType'] === 'string' || data['kycCustomerType'] instanceof String)) {
            throw new Error("Expected the field `kycCustomerType` to be a primitive type in the JSON string but got " + data['kycCustomerType']);
        }
        // ensure the json data is a string
        if (data['registeredName'] && !(typeof data['registeredName'] === 'string' || data['registeredName'] instanceof String)) {
            throw new Error("Expected the field `registeredName` to be a primitive type in the JSON string but got " + data['registeredName']);
        }
        // validate the optional field `registration`
        if (data['registration']) { // data not null
          OrganisationDataObjectRegistration.validateJSON(data['registration']);
        }
        if (data['shareStructure']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shareStructure'])) {
                throw new Error("Expected the field `shareStructure` to be an array in the JSON data but got " + data['shareStructure']);
            }
            // validate the optional field `shareStructure` (array)
            for (const item of data['shareStructure']) {
                ShareStructureObject.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          CodeDescription.validateJSON(data['status']);
        }
        // validate the optional field `subclass`
        if (data['subclass']) { // data not null
          CodeDescription.validateJSON(data['subclass']);
        }
        // validate the optional field `type`
        if (data['type']) { // data not null
          CodeDescription.validateJSON(data['type']);
        }

        return true;
    }


}



/**
 * @member {Boolean} adverseCreditDataPresent
 */
OrganisationDataObject.prototype['adverseCreditDataPresent'] = undefined;

/**
 * @member {module:model/CodeDescription} class
 */
OrganisationDataObject.prototype['class'] = undefined;

/**
 * @member {Boolean} disclosingEntityIndicator
 */
OrganisationDataObject.prototype['disclosingEntityIndicator'] = undefined;

/**
 * @member {Boolean} includesNonBeneficiallyHeld
 */
OrganisationDataObject.prototype['includesNonBeneficiallyHeld'] = undefined;

/**
 * @member {String} kycCustomerType
 */
OrganisationDataObject.prototype['kycCustomerType'] = undefined;

/**
 * @member {Date} lastCheckDate
 */
OrganisationDataObject.prototype['lastCheckDate'] = undefined;

/**
 * @member {Boolean} ownershipResolved
 */
OrganisationDataObject.prototype['ownershipResolved'] = undefined;

/**
 * @member {String} registeredName
 */
OrganisationDataObject.prototype['registeredName'] = undefined;

/**
 * @member {module:model/OrganisationDataObjectRegistration} registration
 */
OrganisationDataObject.prototype['registration'] = undefined;

/**
 * @member {Array.<module:model/ShareStructureObject>} shareStructure
 */
OrganisationDataObject.prototype['shareStructure'] = undefined;

/**
 * @member {Date} startDate
 */
OrganisationDataObject.prototype['startDate'] = undefined;

/**
 * @member {module:model/CodeDescription} status
 */
OrganisationDataObject.prototype['status'] = undefined;

/**
 * @member {module:model/CodeDescription} subclass
 */
OrganisationDataObject.prototype['subclass'] = undefined;

/**
 * @member {module:model/CodeDescription} type
 */
OrganisationDataObject.prototype['type'] = undefined;






export default OrganisationDataObject;

