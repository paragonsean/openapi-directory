/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CourtJudgement model module.
 * @module model/CourtJudgement
 * @version 1.5.3
 */
class CourtJudgement {
    /**
     * Constructs a new <code>CourtJudgement</code>.
     * @alias module:model/CourtJudgement
     */
    constructor() { 
        
        CourtJudgement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CourtJudgement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CourtJudgement} obj Optional instance to populate.
     * @return {module:model/CourtJudgement} The populated <code>CourtJudgement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CourtJudgement();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('actionDate')) {
                obj['actionDate'] = ApiClient.convertToType(data['actionDate'], 'Date');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('judgementAmount')) {
                obj['judgementAmount'] = ApiClient.convertToType(data['judgementAmount'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('natureOfClaim')) {
                obj['natureOfClaim'] = ApiClient.convertToType(data['natureOfClaim'], 'String');
            }
            if (data.hasOwnProperty('natureOfClaimDesc')) {
                obj['natureOfClaimDesc'] = ApiClient.convertToType(data['natureOfClaimDesc'], 'String');
            }
            if (data.hasOwnProperty('plaintiff')) {
                obj['plaintiff'] = ApiClient.convertToType(data['plaintiff'], 'String');
            }
            if (data.hasOwnProperty('proceedingNumber')) {
                obj['proceedingNumber'] = ApiClient.convertToType(data['proceedingNumber'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CourtJudgement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CourtJudgement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['natureOfClaim'] && !(typeof data['natureOfClaim'] === 'string' || data['natureOfClaim'] instanceof String)) {
            throw new Error("Expected the field `natureOfClaim` to be a primitive type in the JSON string but got " + data['natureOfClaim']);
        }
        // ensure the json data is a string
        if (data['natureOfClaimDesc'] && !(typeof data['natureOfClaimDesc'] === 'string' || data['natureOfClaimDesc'] instanceof String)) {
            throw new Error("Expected the field `natureOfClaimDesc` to be a primitive type in the JSON string but got " + data['natureOfClaimDesc']);
        }
        // ensure the json data is a string
        if (data['plaintiff'] && !(typeof data['plaintiff'] === 'string' || data['plaintiff'] instanceof String)) {
            throw new Error("Expected the field `plaintiff` to be a primitive type in the JSON string but got " + data['plaintiff']);
        }
        // ensure the json data is a string
        if (data['proceedingNumber'] && !(typeof data['proceedingNumber'] === 'string' || data['proceedingNumber'] instanceof String)) {
            throw new Error("Expected the field `proceedingNumber` to be a primitive type in the JSON string but got " + data['proceedingNumber']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The name of the court judgement that was handed down
 * @member {String} action
 */
CourtJudgement.prototype['action'] = undefined;

/**
 * The date of the court ruling
 * @member {Date} actionDate
 */
CourtJudgement.prototype['actionDate'] = undefined;

/**
 * The date the court judgement was received and published
 * @member {Date} createdDate
 */
CourtJudgement.prototype['createdDate'] = undefined;

/**
 * The amount the defendant was ordered by the court to pay to the plaintiff
 * @member {Number} judgementAmount
 */
CourtJudgement.prototype['judgementAmount'] = undefined;

/**
 * The location of the court judgment
 * @member {String} location
 */
CourtJudgement.prototype['location'] = undefined;

/**
 * Nature of the claim
 * @member {String} natureOfClaim
 */
CourtJudgement.prototype['natureOfClaim'] = undefined;

/**
 * Additional information regarding the nature of the claim
 * @member {String} natureOfClaimDesc
 */
CourtJudgement.prototype['natureOfClaimDesc'] = undefined;

/**
 * The person or company that is taking the defendant to court
 * @member {String} plaintiff
 */
CourtJudgement.prototype['plaintiff'] = undefined;

/**
 * Court judgement referencing identifier
 * @member {String} proceedingNumber
 */
CourtJudgement.prototype['proceedingNumber'] = undefined;

/**
 * The state jurisdiction of the court judgement
 * @member {String} state
 */
CourtJudgement.prototype['state'] = undefined;






export default CourtJudgement;

