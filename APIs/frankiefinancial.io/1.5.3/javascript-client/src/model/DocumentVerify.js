/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityObject from './EntityObject';
import IdentityDocumentObject from './IdentityDocumentObject';

/**
 * The DocumentVerify model module.
 * @module model/DocumentVerify
 * @version 1.5.3
 */
class DocumentVerify {
    /**
     * Constructs a new <code>DocumentVerify</code>.
     * This is the document we wish to verify in some way, along with an entity object that contains some/all of the details we wish to verify.  For example, if we&#39;re attempting to verify a drivers licence, we generally need to pass in a name, address, DoB, etc as well. the entity gives the structure to be able to do this.   Note, only the document in the \&quot;document\&quot; parameter is to be processed. any additional documents found in the entity (there shouldn&#39;t be, but given the way this has been defined, there can be) will be ignored. Only the Name, Address, DoB and Gender fields will be potentially used during the verification process.  The EntityObject can take one of two forms.    - It can be a single entityId - in which case the details will be pulled from the database. If using an existing document, then the entity must also own the document or the request will fail.   - You can supply a \&quot;single use\&quot; entity with fields, etc. In this case the entity details will be used to verify the document, then will be discarded.    If you wish to save the entity, use the /entity comments instead to create the entity and attach the document there. 
     * @alias module:model/DocumentVerify
     */
    constructor() { 
        
        DocumentVerify.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentVerify</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentVerify} obj Optional instance to populate.
     * @return {module:model/DocumentVerify} The populated <code>DocumentVerify</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentVerify();

            if (data.hasOwnProperty('document')) {
                obj['document'] = IdentityDocumentObject.constructFromObject(data['document']);
            }
            if (data.hasOwnProperty('entityData')) {
                obj['entityData'] = EntityObject.constructFromObject(data['entityData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentVerify</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentVerify</code>.
     */
    static validateJSON(data) {
        // validate the optional field `document`
        if (data['document']) { // data not null
          IdentityDocumentObject.validateJSON(data['document']);
        }
        // validate the optional field `entityData`
        if (data['entityData']) { // data not null
          EntityObject.validateJSON(data['entityData']);
        }

        return true;
    }


}



/**
 * @member {module:model/IdentityDocumentObject} document
 */
DocumentVerify.prototype['document'] = undefined;

/**
 * @member {module:model/EntityObject} entityData
 */
DocumentVerify.prototype['entityData'] = undefined;






export default DocumentVerify;

