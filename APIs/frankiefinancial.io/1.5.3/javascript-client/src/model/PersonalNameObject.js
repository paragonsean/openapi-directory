/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonalNameObject model module.
 * @module model/PersonalNameObject
 * @version 1.5.3
 */
class PersonalNameObject {
    /**
     * Constructs a new <code>PersonalNameObject</code>.
     * @alias module:model/PersonalNameObject
     * @param familyName {String} Family name / Surname of the individual.
     */
    constructor(familyName) { 
        
        PersonalNameObject.initialize(this, familyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, familyName) { 
        obj['familyName'] = familyName;
    }

    /**
     * Constructs a <code>PersonalNameObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalNameObject} obj Optional instance to populate.
     * @return {module:model/PersonalNameObject} The populated <code>PersonalNameObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalNameObject();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('honourific')) {
                obj['honourific'] = ApiClient.convertToType(data['honourific'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalNameObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalNameObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonalNameObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['honourific'] && !(typeof data['honourific'] === 'string' || data['honourific'] instanceof String)) {
            throw new Error("Expected the field `honourific` to be a primitive type in the JSON string but got " + data['honourific']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }

        return true;
    }


}

PersonalNameObject.RequiredProperties = ["familyName"];

/**
 * In some cases, the name will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible. 
 * @member {String} displayName
 */
PersonalNameObject.prototype['displayName'] = undefined;

/**
 * Family name / Surname of the individual.
 * @member {String} familyName
 */
PersonalNameObject.prototype['familyName'] = undefined;

/**
 * First / Given name
 * @member {String} givenName
 */
PersonalNameObject.prototype['givenName'] = undefined;

/**
 * Mr/Ms/Dr/Dame/Dato/etc.
 * @member {String} honourific
 */
PersonalNameObject.prototype['honourific'] = undefined;

/**
 * Middle name(s) / Initials
 * @member {String} middleName
 */
PersonalNameObject.prototype['middleName'] = undefined;






export default PersonalNameObject;

