/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityProfileCheckResultMessage from './EntityProfileCheckResultMessage';
import EntityProfileItemMatchResultObject from './EntityProfileItemMatchResultObject';
import EntityProfileKYCMatchResultObject from './EntityProfileKYCMatchResultObject';

/**
 * The EntityProfileResultObject model module.
 * @module model/EntityProfileResultObject
 * @version 1.5.3
 */
class EntityProfileResultObject {
    /**
     * Constructs a new <code>EntityProfileResultObject</code>.
     * Contains the results of a check against an entity profile.   The entityProfileResult will be returned instead of a checkSummary to provide the full details of the verification process. 
     * @alias module:model/EntityProfileResultObject
     */
    constructor() { 
        
        EntityProfileResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityProfileResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityProfileResultObject} obj Optional instance to populate.
     * @return {module:model/EntityProfileResultObject} The populated <code>EntityProfileResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityProfileResultObject();

            if (data.hasOwnProperty('actionRecommended')) {
                obj['actionRecommended'] = ApiClient.convertToType(data['actionRecommended'], 'String');
            }
            if (data.hasOwnProperty('addressResults')) {
                obj['addressResults'] = ApiClient.convertToType(data['addressResults'], {'String': EntityProfileItemMatchResultObject});
            }
            if (data.hasOwnProperty('checkId')) {
                obj['checkId'] = ApiClient.convertToType(data['checkId'], 'String');
            }
            if (data.hasOwnProperty('checkResults')) {
                obj['checkResults'] = ApiClient.convertToType(data['checkResults'], [EntityProfileCheckResultMessage]);
            }
            if (data.hasOwnProperty('checkType')) {
                obj['checkType'] = ApiClient.convertToType(data['checkType'], 'String');
            }
            if (data.hasOwnProperty('creditHeaderFailures')) {
                obj['creditHeaderFailures'] = ApiClient.convertToType(data['creditHeaderFailures'], ['String']);
            }
            if (data.hasOwnProperty('documentResults')) {
                obj['documentResults'] = ApiClient.convertToType(data['documentResults'], {'String': EntityProfileItemMatchResultObject});
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('issueList')) {
                obj['issueList'] = ApiClient.convertToType(data['issueList'], ['String']);
            }
            if (data.hasOwnProperty('kycResults')) {
                obj['kycResults'] = ApiClient.convertToType(data['kycResults'], [EntityProfileKYCMatchResultObject]);
            }
            if (data.hasOwnProperty('latestCheckDate')) {
                obj['latestCheckDate'] = ApiClient.convertToType(data['latestCheckDate'], 'Date');
            }
            if (data.hasOwnProperty('manualIntervention')) {
                obj['manualIntervention'] = ApiClient.convertToType(data['manualIntervention'], 'Boolean');
            }
            if (data.hasOwnProperty('policyName')) {
                obj['policyName'] = ApiClient.convertToType(data['policyName'], 'String');
            }
            if (data.hasOwnProperty('profileName')) {
                obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
            }
            if (data.hasOwnProperty('resolverRecommended')) {
                obj['resolverRecommended'] = ApiClient.convertToType(data['resolverRecommended'], 'String');
            }
            if (data.hasOwnProperty('riskLevel')) {
                obj['riskLevel'] = ApiClient.convertToType(data['riskLevel'], 'String');
            }
            if (data.hasOwnProperty('riskPolicy')) {
                obj['riskPolicy'] = ApiClient.convertToType(data['riskPolicy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityProfileResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityProfileResultObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionRecommended'] && !(typeof data['actionRecommended'] === 'string' || data['actionRecommended'] instanceof String)) {
            throw new Error("Expected the field `actionRecommended` to be a primitive type in the JSON string but got " + data['actionRecommended']);
        }
        // ensure the json data is a string
        if (data['checkId'] && !(typeof data['checkId'] === 'string' || data['checkId'] instanceof String)) {
            throw new Error("Expected the field `checkId` to be a primitive type in the JSON string but got " + data['checkId']);
        }
        if (data['checkResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checkResults'])) {
                throw new Error("Expected the field `checkResults` to be an array in the JSON data but got " + data['checkResults']);
            }
            // validate the optional field `checkResults` (array)
            for (const item of data['checkResults']) {
                EntityProfileCheckResultMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['checkType'] && !(typeof data['checkType'] === 'string' || data['checkType'] instanceof String)) {
            throw new Error("Expected the field `checkType` to be a primitive type in the JSON string but got " + data['checkType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['creditHeaderFailures'])) {
            throw new Error("Expected the field `creditHeaderFailures` to be an array in the JSON data but got " + data['creditHeaderFailures']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueList'])) {
            throw new Error("Expected the field `issueList` to be an array in the JSON data but got " + data['issueList']);
        }
        if (data['kycResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['kycResults'])) {
                throw new Error("Expected the field `kycResults` to be an array in the JSON data but got " + data['kycResults']);
            }
            // validate the optional field `kycResults` (array)
            for (const item of data['kycResults']) {
                EntityProfileKYCMatchResultObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['policyName'] && !(typeof data['policyName'] === 'string' || data['policyName'] instanceof String)) {
            throw new Error("Expected the field `policyName` to be a primitive type in the JSON string but got " + data['policyName']);
        }
        // ensure the json data is a string
        if (data['profileName'] && !(typeof data['profileName'] === 'string' || data['profileName'] instanceof String)) {
            throw new Error("Expected the field `profileName` to be a primitive type in the JSON string but got " + data['profileName']);
        }
        // ensure the json data is a string
        if (data['resolverRecommended'] && !(typeof data['resolverRecommended'] === 'string' || data['resolverRecommended'] instanceof String)) {
            throw new Error("Expected the field `resolverRecommended` to be a primitive type in the JSON string but got " + data['resolverRecommended']);
        }
        // ensure the json data is a string
        if (data['riskLevel'] && !(typeof data['riskLevel'] === 'string' || data['riskLevel'] instanceof String)) {
            throw new Error("Expected the field `riskLevel` to be a primitive type in the JSON string but got " + data['riskLevel']);
        }
        // ensure the json data is a string
        if (data['riskPolicy'] && !(typeof data['riskPolicy'] === 'string' || data['riskPolicy'] instanceof String)) {
            throw new Error("Expected the field `riskPolicy` to be a primitive type in the JSON string but got " + data['riskPolicy']);
        }

        return true;
    }


}



/**
 * The recommended onboarding action for this entity after the profile check this result refers to. The action can also be an entity state set by you. - UNCHECKED: New entity with no checks applied - PASS - FAIL - PASS_MANUAL: Manual intervention was applied to achieve a pass - FAIL_MANUAL: Manual intervention was applied but the entity still fails - REFER: Manual intervention required - WAIT: Externally applied state, waiting for more entity details - ARCHIVED: Externally applied state, entity hidden from on onboarding list - INACTIVE: Externally applied state, entity hidden from on onboarding list, indexes and further changes will be blocked. 
 * @member {String} actionRecommended
 */
EntityProfileResultObject.prototype['actionRecommended'] = undefined;

/**
 * KYC match counts for each checked address, whether matched or not. The keys in this map are the address IDs. The match type in the value will be either \"curr_addr\" or \"prev_addr\". The resultant structure would look like:      \"addressResults\": {       \"addressId\": {         \"matchType\": \"curr_addr\",         \"matchCount\": 5,         \"verified\": true       },       \"addressId\": {         \"matchType\": \"prev_addr\",         \"matchCount\": 5,         \"verified\": true       }     } 
 * @member {Object.<String, module:model/EntityProfileItemMatchResultObject>} addressResults
 */
EntityProfileResultObject.prototype['addressResults'] = undefined;

/**
 * Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.
 * @member {String} checkId
 */
EntityProfileResultObject.prototype['checkId'] = undefined;

/**
 * The basic result for each check type required for the profile.  The results are listed in the order they are run so you can also see how far progressed through a check process you are. 
 * @member {Array.<module:model/EntityProfileCheckResultMessage>} checkResults
 */
EntityProfileResultObject.prototype['checkResults'] = undefined;

/**
 * Comma separated list of checks required for the entity profile.
 * @member {String} checkType
 */
EntityProfileResultObject.prototype['checkType'] = undefined;

/**
 * List of vendors from failed credit header sources.
 * @member {Array.<String>} creditHeaderFailures
 */
EntityProfileResultObject.prototype['creditHeaderFailures'] = undefined;

/**
 * KYC match counts for each checked document, whether matched or not. The keys in this map are the document IDs. The match type in the value will be either \"gov_id\" or \"other_id\". The resultant structure would look like:  documentResults: {     \"documentId\" : {       \"matchType\": \"gov_id\",       \"matchCount\": 5,       \"verified\": true     },     \"documentId\": {       \"matchType\": \"other_id\",       \"matchCount\": 5,       \"verified\": true     } } 
 * @member {Object.<String, module:model/EntityProfileItemMatchResultObject>} documentResults
 */
EntityProfileResultObject.prototype['documentResults'] = undefined;

/**
 * Unique ID for the entity. 
 * @member {String} entityId
 */
EntityProfileResultObject.prototype['entityId'] = undefined;

/**
 * @member {Array.<String>} issueList
 */
EntityProfileResultObject.prototype['issueList'] = undefined;

/**
 * Summary of KYC match counts.
 * @member {Array.<module:model/EntityProfileKYCMatchResultObject>} kycResults
 */
EntityProfileResultObject.prototype['kycResults'] = undefined;

/**
 * The date and time of the last check that contributed to this result.
 * @member {Date} latestCheckDate
 */
EntityProfileResultObject.prototype['latestCheckDate'] = undefined;

/**
 * Indicates if any manual actions have been involved in the check result.
 * @member {Boolean} manualIntervention
 */
EntityProfileResultObject.prototype['manualIntervention'] = undefined;

/**
 * The name of the policy within the profile used for this check. This may or may not incorporate the 'riskPolicy' that is also an attribute in this object.
 * @member {String} policyName
 */
EntityProfileResultObject.prototype['policyName'] = undefined;

/**
 * The name of the profile used for this check.
 * @member {String} profileName
 */
EntityProfileResultObject.prototype['profileName'] = undefined;

/**
 * Workflow hint by arrangement with Frankie
 * @member {String} resolverRecommended
 */
EntityProfileResultObject.prototype['resolverRecommended'] = undefined;

/**
 * Risk level. One of:  - LOW,  - MEDIUM,  - HIGH,  - UACCEPTABLE  - or UNKNOWN 
 * @member {String} riskLevel
 */
EntityProfileResultObject.prototype['riskLevel'] = undefined;

/**
 * Risk policy. Contents depend on account configuration but would typically be one of:  - SDD,  - CDD,  - EDD  - or FAIL 
 * @member {String} riskPolicy
 */
EntityProfileResultObject.prototype['riskPolicy'] = undefined;






export default EntityProfileResultObject;

