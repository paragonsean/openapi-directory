/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CourtJudgement from './CourtJudgement';
import InsolvencyNotice from './InsolvencyNotice';
import Loan from './Loan';
import MercantileEnquiry from './MercantileEnquiry';
import PaymentDefault from './PaymentDefault';

/**
 * The ReportCreditReport model module.
 * @module model/ReportCreditReport
 * @version 1.5.3
 */
class ReportCreditReport {
    /**
     * Constructs a new <code>ReportCreditReport</code>.
     * @alias module:model/ReportCreditReport
     */
    constructor() { 
        
        ReportCreditReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportCreditReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportCreditReport} obj Optional instance to populate.
     * @return {module:model/ReportCreditReport} The populated <code>ReportCreditReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportCreditReport();

            if (data.hasOwnProperty('courtJudgements')) {
                obj['courtJudgements'] = ApiClient.convertToType(data['courtJudgements'], [CourtJudgement]);
            }
            if (data.hasOwnProperty('creditEnquiries')) {
                obj['creditEnquiries'] = ApiClient.convertToType(data['creditEnquiries'], 'Number');
            }
            if (data.hasOwnProperty('insolvencyNotices')) {
                obj['insolvencyNotices'] = ApiClient.convertToType(data['insolvencyNotices'], [InsolvencyNotice]);
            }
            if (data.hasOwnProperty('loans')) {
                obj['loans'] = ApiClient.convertToType(data['loans'], [Loan]);
            }
            if (data.hasOwnProperty('mercantileEnquiries')) {
                obj['mercantileEnquiries'] = ApiClient.convertToType(data['mercantileEnquiries'], [MercantileEnquiry]);
            }
            if (data.hasOwnProperty('paymentDefaults')) {
                obj['paymentDefaults'] = ApiClient.convertToType(data['paymentDefaults'], [PaymentDefault]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportCreditReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportCreditReport</code>.
     */
    static validateJSON(data) {
        if (data['courtJudgements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['courtJudgements'])) {
                throw new Error("Expected the field `courtJudgements` to be an array in the JSON data but got " + data['courtJudgements']);
            }
            // validate the optional field `courtJudgements` (array)
            for (const item of data['courtJudgements']) {
                CourtJudgement.validateJSON(item);
            };
        }
        if (data['insolvencyNotices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['insolvencyNotices'])) {
                throw new Error("Expected the field `insolvencyNotices` to be an array in the JSON data but got " + data['insolvencyNotices']);
            }
            // validate the optional field `insolvencyNotices` (array)
            for (const item of data['insolvencyNotices']) {
                InsolvencyNotice.validateJSON(item);
            };
        }
        if (data['loans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loans'])) {
                throw new Error("Expected the field `loans` to be an array in the JSON data but got " + data['loans']);
            }
            // validate the optional field `loans` (array)
            for (const item of data['loans']) {
                Loan.validateJSON(item);
            };
        }
        if (data['mercantileEnquiries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mercantileEnquiries'])) {
                throw new Error("Expected the field `mercantileEnquiries` to be an array in the JSON data but got " + data['mercantileEnquiries']);
            }
            // validate the optional field `mercantileEnquiries` (array)
            for (const item of data['mercantileEnquiries']) {
                MercantileEnquiry.validateJSON(item);
            };
        }
        if (data['paymentDefaults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentDefaults'])) {
                throw new Error("Expected the field `paymentDefaults` to be an array in the JSON data but got " + data['paymentDefaults']);
            }
            // validate the optional field `paymentDefaults` (array)
            for (const item of data['paymentDefaults']) {
                PaymentDefault.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * CreditorWatch aggregate data from courts around Australia to provide a summary of court actions against an entity. When available, details of the action include location, case number, state, plaintiff, nature of the claim, action type and dollar amount.
 * @member {Array.<module:model/CourtJudgement>} courtJudgements
 */
ReportCreditReport.prototype['courtJudgements'] = undefined;

/**
 * Credit enquiries provide an indication of the number of times an entity's credit file has been accessed.
 * @member {Number} creditEnquiries
 */
ReportCreditReport.prototype['creditEnquiries'] = undefined;

/**
 * Insolvency and other published notices are provided by ASIC. These published notices provide details on external administrations, winding up applications (voluntary or by a court) and proposed company deregistrations, amongst other things. The notices contain important contact details and dates for creditors. These notices are provided directly from the ASIC insolvency notices website. If you require further information, visit:     https://insolvencynotices.asic.gov.au.
 * @member {Array.<module:model/InsolvencyNotice>} insolvencyNotices
 */
ReportCreditReport.prototype['insolvencyNotices'] = undefined;

/**
 * @member {Array.<module:model/Loan>} loans
 */
ReportCreditReport.prototype['loans'] = undefined;

/**
 * A Mercantile enquiry is an indication that a mercantile agency (or debt collection agency) has conducted an enquiry on this entity for the purpose of debt collection.
 * @member {Array.<module:model/MercantileEnquiry>} mercantileEnquiries
 */
ReportCreditReport.prototype['mercantileEnquiries'] = undefined;

/**
 * A default indicates that the debtor has failed to make a payment for goods or services. Payment Defaults are unique to CreditorWatch and  can have one of three statuses:    - outstanding   - partial payment   - settled. 
 * @member {Array.<module:model/PaymentDefault>} paymentDefaults
 */
ReportCreditReport.prototype['paymentDefaults'] = undefined;






export default ReportCreditReport;

