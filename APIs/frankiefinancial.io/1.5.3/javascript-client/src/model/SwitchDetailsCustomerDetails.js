/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SwitchDetailsCustomerDetailsEvidenceOfIdentity from './SwitchDetailsCustomerDetailsEvidenceOfIdentity';
import SwitchDetailsCustomerDetailsName from './SwitchDetailsCustomerDetailsName';

/**
 * The SwitchDetailsCustomerDetails model module.
 * @module model/SwitchDetailsCustomerDetails
 * @version 1.5.3
 */
class SwitchDetailsCustomerDetails {
    /**
     * Constructs a new <code>SwitchDetailsCustomerDetails</code>.
     * Customer&#39;s details required to switch retailers
     * @alias module:model/SwitchDetailsCustomerDetails
     * @param dateOfBirth {String} Customer's date of birth
     * @param email {String} Customer's email address
     * @param evidenceOfIdentity {module:model/SwitchDetailsCustomerDetailsEvidenceOfIdentity} 
     * @param mobile {String} Customer's phone number
     * @param name {module:model/SwitchDetailsCustomerDetailsName} 
     */
    constructor(dateOfBirth, email, evidenceOfIdentity, mobile, name) { 
        
        SwitchDetailsCustomerDetails.initialize(this, dateOfBirth, email, evidenceOfIdentity, mobile, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateOfBirth, email, evidenceOfIdentity, mobile, name) { 
        obj['dateOfBirth'] = dateOfBirth;
        obj['email'] = email;
        obj['evidenceOfIdentity'] = evidenceOfIdentity;
        obj['mobile'] = mobile;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>SwitchDetailsCustomerDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwitchDetailsCustomerDetails} obj Optional instance to populate.
     * @return {module:model/SwitchDetailsCustomerDetails} The populated <code>SwitchDetailsCustomerDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwitchDetailsCustomerDetails();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('evidenceOfIdentity')) {
                obj['evidenceOfIdentity'] = SwitchDetailsCustomerDetailsEvidenceOfIdentity.constructFromObject(data['evidenceOfIdentity']);
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = SwitchDetailsCustomerDetailsName.constructFromObject(data['name']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwitchDetailsCustomerDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwitchDetailsCustomerDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SwitchDetailsCustomerDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['dateOfBirth'] && !(typeof data['dateOfBirth'] === 'string' || data['dateOfBirth'] instanceof String)) {
            throw new Error("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got " + data['dateOfBirth']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // validate the optional field `evidenceOfIdentity`
        if (data['evidenceOfIdentity']) { // data not null
          SwitchDetailsCustomerDetailsEvidenceOfIdentity.validateJSON(data['evidenceOfIdentity']);
        }
        // ensure the json data is a string
        if (data['mobile'] && !(typeof data['mobile'] === 'string' || data['mobile'] instanceof String)) {
            throw new Error("Expected the field `mobile` to be a primitive type in the JSON string but got " + data['mobile']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          SwitchDetailsCustomerDetailsName.validateJSON(data['name']);
        }

        return true;
    }


}

SwitchDetailsCustomerDetails.RequiredProperties = ["dateOfBirth", "email", "evidenceOfIdentity", "mobile", "name"];

/**
 * Customer's supply address address. If no address is passed, the supply address as read off the bill will be used
 * @member {String} address
 */
SwitchDetailsCustomerDetails.prototype['address'] = undefined;

/**
 * Customer's date of birth
 * @member {String} dateOfBirth
 */
SwitchDetailsCustomerDetails.prototype['dateOfBirth'] = undefined;

/**
 * Customer's email address
 * @member {String} email
 */
SwitchDetailsCustomerDetails.prototype['email'] = undefined;

/**
 * @member {module:model/SwitchDetailsCustomerDetailsEvidenceOfIdentity} evidenceOfIdentity
 */
SwitchDetailsCustomerDetails.prototype['evidenceOfIdentity'] = undefined;

/**
 * Customer's phone number
 * @member {String} mobile
 */
SwitchDetailsCustomerDetails.prototype['mobile'] = undefined;

/**
 * @member {module:model/SwitchDetailsCustomerDetailsName} name
 */
SwitchDetailsCustomerDetails.prototype['name'] = undefined;






export default SwitchDetailsCustomerDetails;

