/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AMLResultSet from './AMLResultSet';
import AddressCheckResultObject from './AddressCheckResultObject';
import BackgroundCheckResultObject from './BackgroundCheckResultObject';
import DOBCheckResultObject from './DOBCheckResultObject';
import GenderCheckResultObject from './GenderCheckResultObject';
import IdentityDocumentCheckResultObject from './IdentityDocumentCheckResultObject';
import PersonalNameCheckResultObject from './PersonalNameCheckResultObject';

/**
 * The CheckEntityCheckResultObjectEntityResult model module.
 * @module model/CheckEntityCheckResultObjectEntityResult
 * @version 1.5.3
 */
class CheckEntityCheckResultObjectEntityResult {
    /**
     * Constructs a new <code>CheckEntityCheckResultObjectEntityResult</code>.
     * This will hold all of the check results that were performed against the 
     * @alias module:model/CheckEntityCheckResultObjectEntityResult
     */
    constructor() { 
        
        CheckEntityCheckResultObjectEntityResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckEntityCheckResultObjectEntityResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckEntityCheckResultObjectEntityResult} obj Optional instance to populate.
     * @return {module:model/CheckEntityCheckResultObjectEntityResult} The populated <code>CheckEntityCheckResultObjectEntityResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckEntityCheckResultObjectEntityResult();

            if (data.hasOwnProperty('addressesCheck')) {
                obj['addressesCheck'] = ApiClient.convertToType(data['addressesCheck'], [AddressCheckResultObject]);
            }
            if (data.hasOwnProperty('adverseMediaCheck')) {
                obj['adverseMediaCheck'] = ApiClient.convertToType(data['adverseMediaCheck'], [BackgroundCheckResultObject]);
            }
            if (data.hasOwnProperty('amlResultSets')) {
                obj['amlResultSets'] = ApiClient.convertToType(data['amlResultSets'], [AMLResultSet]);
            }
            if (data.hasOwnProperty('dateOfBirthCheck')) {
                obj['dateOfBirthCheck'] = DOBCheckResultObject.constructFromObject(data['dateOfBirthCheck']);
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('genderCheck')) {
                obj['genderCheck'] = GenderCheckResultObject.constructFromObject(data['genderCheck']);
            }
            if (data.hasOwnProperty('identityDocsCheck')) {
                obj['identityDocsCheck'] = ApiClient.convertToType(data['identityDocsCheck'], [IdentityDocumentCheckResultObject]);
            }
            if (data.hasOwnProperty('nameCheck')) {
                obj['nameCheck'] = PersonalNameCheckResultObject.constructFromObject(data['nameCheck']);
            }
            if (data.hasOwnProperty('pepCheck')) {
                obj['pepCheck'] = ApiClient.convertToType(data['pepCheck'], [BackgroundCheckResultObject]);
            }
            if (data.hasOwnProperty('sanctionsCheck')) {
                obj['sanctionsCheck'] = ApiClient.convertToType(data['sanctionsCheck'], [BackgroundCheckResultObject]);
            }
            if (data.hasOwnProperty('watchlistCheck')) {
                obj['watchlistCheck'] = ApiClient.convertToType(data['watchlistCheck'], [BackgroundCheckResultObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckEntityCheckResultObjectEntityResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckEntityCheckResultObjectEntityResult</code>.
     */
    static validateJSON(data) {
        if (data['addressesCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addressesCheck'])) {
                throw new Error("Expected the field `addressesCheck` to be an array in the JSON data but got " + data['addressesCheck']);
            }
            // validate the optional field `addressesCheck` (array)
            for (const item of data['addressesCheck']) {
                AddressCheckResultObject.validateJSON(item);
            };
        }
        if (data['adverseMediaCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adverseMediaCheck'])) {
                throw new Error("Expected the field `adverseMediaCheck` to be an array in the JSON data but got " + data['adverseMediaCheck']);
            }
            // validate the optional field `adverseMediaCheck` (array)
            for (const item of data['adverseMediaCheck']) {
                BackgroundCheckResultObject.validateJSON(item);
            };
        }
        if (data['amlResultSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amlResultSets'])) {
                throw new Error("Expected the field `amlResultSets` to be an array in the JSON data but got " + data['amlResultSets']);
            }
            // validate the optional field `amlResultSets` (array)
            for (const item of data['amlResultSets']) {
                AMLResultSet.validateJSON(item);
            };
        }
        // validate the optional field `dateOfBirthCheck`
        if (data['dateOfBirthCheck']) { // data not null
          DOBCheckResultObject.validateJSON(data['dateOfBirthCheck']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // validate the optional field `genderCheck`
        if (data['genderCheck']) { // data not null
          GenderCheckResultObject.validateJSON(data['genderCheck']);
        }
        if (data['identityDocsCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identityDocsCheck'])) {
                throw new Error("Expected the field `identityDocsCheck` to be an array in the JSON data but got " + data['identityDocsCheck']);
            }
            // validate the optional field `identityDocsCheck` (array)
            for (const item of data['identityDocsCheck']) {
                IdentityDocumentCheckResultObject.validateJSON(item);
            };
        }
        // validate the optional field `nameCheck`
        if (data['nameCheck']) { // data not null
          PersonalNameCheckResultObject.validateJSON(data['nameCheck']);
        }
        if (data['pepCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pepCheck'])) {
                throw new Error("Expected the field `pepCheck` to be an array in the JSON data but got " + data['pepCheck']);
            }
            // validate the optional field `pepCheck` (array)
            for (const item of data['pepCheck']) {
                BackgroundCheckResultObject.validateJSON(item);
            };
        }
        if (data['sanctionsCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sanctionsCheck'])) {
                throw new Error("Expected the field `sanctionsCheck` to be an array in the JSON data but got " + data['sanctionsCheck']);
            }
            // validate the optional field `sanctionsCheck` (array)
            for (const item of data['sanctionsCheck']) {
                BackgroundCheckResultObject.validateJSON(item);
            };
        }
        if (data['watchlistCheck']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['watchlistCheck'])) {
                throw new Error("Expected the field `watchlistCheck` to be an array in the JSON data but got " + data['watchlistCheck']);
            }
            // validate the optional field `watchlistCheck` (array)
            for (const item of data['watchlistCheck']) {
                BackgroundCheckResultObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Collection of address objects.
 * @member {Array.<module:model/AddressCheckResultObject>} addressesCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['addressesCheck'] = undefined;

/**
 * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being found in any adverse media  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
 * @member {Array.<module:model/BackgroundCheckResultObject>} adverseMediaCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['adverseMediaCheck'] = undefined;

/**
 * An array of Collections of PEP/Sanctions/WL/Media objects, as AML providers can return multiple results 
 * @member {Array.<module:model/AMLResultSet>} amlResultSets
 */
CheckEntityCheckResultObjectEntityResult.prototype['amlResultSets'] = undefined;

/**
 * @member {module:model/DOBCheckResultObject} dateOfBirthCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['dateOfBirthCheck'] = undefined;

/**
 * Unique ID for the entity. 
 * @member {String} entityId
 */
CheckEntityCheckResultObjectEntityResult.prototype['entityId'] = undefined;

/**
 * @member {module:model/GenderCheckResultObject} genderCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['genderCheck'] = undefined;

/**
 * Collection of identity documents (photos, scans, selfies, etc), and their check results
 * @member {Array.<module:model/IdentityDocumentCheckResultObject>} identityDocsCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['identityDocsCheck'] = undefined;

/**
 * @member {module:model/PersonalNameCheckResultObject} nameCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['nameCheck'] = undefined;

/**
 * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being a Politically Exposed Person  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
 * @member {Array.<module:model/BackgroundCheckResultObject>} pepCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['pepCheck'] = undefined;

/**
 * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a sanctions list  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
 * @member {Array.<module:model/BackgroundCheckResultObject>} sanctionsCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['sanctionsCheck'] = undefined;

/**
 * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a watchlist  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
 * @member {Array.<module:model/BackgroundCheckResultObject>} watchlistCheck
 */
CheckEntityCheckResultObjectEntityResult.prototype['watchlistCheck'] = undefined;






export default CheckEntityCheckResultObjectEntityResult;

