/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayMarkUpParametersValue from './DisplayMarkUpParametersValue';

/**
 * The DisplayMarkUp model module.
 * @module model/DisplayMarkUp
 * @version 1.5.3
 */
class DisplayMarkUp {
    /**
     * Constructs a new <code>DisplayMarkUp</code>.
     * @alias module:model/DisplayMarkUp
     */
    constructor() { 
        
        DisplayMarkUp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DisplayMarkUp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisplayMarkUp} obj Optional instance to populate.
     * @return {module:model/DisplayMarkUp} The populated <code>DisplayMarkUp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisplayMarkUp();

            if (data.hasOwnProperty('attribute')) {
                obj['attribute'] = ApiClient.convertToType(data['attribute'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [DisplayMarkUp]);
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ApiClient.convertToType(data['confirmation'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': DisplayMarkUpParametersValue});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisplayMarkUp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisplayMarkUp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attribute'] && !(typeof data['attribute'] === 'string' || data['attribute'] instanceof String)) {
            throw new Error("Expected the field `attribute` to be a primitive type in the JSON string but got " + data['attribute']);
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                DisplayMarkUp.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['confirmation'] && !(typeof data['confirmation'] === 'string' || data['confirmation'] instanceof String)) {
            throw new Error("Expected the field `confirmation` to be a primitive type in the JSON string but got " + data['confirmation']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Comma seperated list of attributes to apply to value when rendering.
 * @member {module:model/DisplayMarkUp.AttributeEnum} attribute
 */
DisplayMarkUp.prototype['attribute'] = undefined;

/**
 * Children of element. This data structure is recursive with a DisplayMarkup  element having 0 or more DisplayMarkup children
 * @member {Array.<module:model/DisplayMarkUp>} children
 */
DisplayMarkUp.prototype['children'] = undefined;

/**
 * Does this statement need to be confirmed (with a checkbox)? Confirmation can be mandatory or optional. When the confirmation element is present a key element must also be present. The keys of all confirmed statements must be sent in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.
 * @member {module:model/DisplayMarkUp.ConfirmationEnum} confirmation
 */
DisplayMarkUp.prototype['confirmation'] = undefined;

/**
 * For elements that require confirmation, the key of each element that the user has accepted must be send in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.
 * @member {String} key
 */
DisplayMarkUp.prototype['key'] = undefined;

/**
 * Text to display as header/title of value.
 * @member {String} name
 */
DisplayMarkUp.prototype['name'] = undefined;

/**
 * Optional element which has a keyvalue pair associated with every data binding contained in the value element of the current object.
 * @member {Object.<String, module:model/DisplayMarkUpParametersValue>} parameters
 */
DisplayMarkUp.prototype['parameters'] = undefined;

/**
 * Type of component to be used for rendering
 * @member {module:model/DisplayMarkUp.TypeEnum} type
 */
DisplayMarkUp.prototype['type'] = undefined;

/**
 * Data to be rendered. This data can contain data bindings (contained in {{ }}). If present in the string the parameters object will contain a key with the same name and the associated data (e.g a link).<br><br><div style=\"background-color:black;color:white;\">{<br>&nbsp;&nbsp;\"type\":&nbsp;\"text\",<br>&nbsp;&nbsp;\"value\":&nbsp;\"I&nbsp;accept&nbsp;the&nbsp;{{Terms&nbsp;and&nbsp;Conditions}}.\",<br>&nbsp;&nbsp;\"parameters\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Terms&nbsp;and&nbsp;Conditions\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"type\":&nbsp;\"link\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\":&nbsp;\"https://www.accurassi.com.au/sample-terms-and-conditions/\"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}</div>
 * @member {String} value
 */
DisplayMarkUp.prototype['value'] = undefined;





/**
 * Allowed values for the <code>attribute</code> property.
 * @enum {String}
 * @readonly
 */
DisplayMarkUp['AttributeEnum'] = {

    /**
     * value: "bold"
     * @const
     */
    "bold": "bold"
};


/**
 * Allowed values for the <code>confirmation</code> property.
 * @enum {String}
 * @readonly
 */
DisplayMarkUp['ConfirmationEnum'] = {

    /**
     * value: "optional"
     * @const
     */
    "optional": "optional",

    /**
     * value: "mandatory"
     * @const
     */
    "mandatory": "mandatory"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DisplayMarkUp['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "unorderedlist"
     * @const
     */
    "unorderedlist": "unorderedlist",

    /**
     * value: "orderedlist"
     * @const
     */
    "orderedlist": "orderedlist"
};



export default DisplayMarkUp;

