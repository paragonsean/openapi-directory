/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayOfString from './ArrayOfString';

/**
 * The PSCDetails model module.
 * @module model/PSCDetails
 * @version 1.5.3
 */
class PSCDetails {
    /**
     * Constructs a new <code>PSCDetails</code>.
     * @alias module:model/PSCDetails
     */
    constructor() { 
        
        PSCDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PSCDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PSCDetails} obj Optional instance to populate.
     * @return {module:model/PSCDetails} The populated <code>PSCDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PSCDetails();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], 'String');
            }
            if (data.hasOwnProperty('CeasedOn')) {
                obj['CeasedOn'] = ApiClient.convertToType(data['CeasedOn'], 'String');
            }
            if (data.hasOwnProperty('CountryOfResidence')) {
                obj['CountryOfResidence'] = ApiClient.convertToType(data['CountryOfResidence'], 'String');
            }
            if (data.hasOwnProperty('DOBDay')) {
                obj['DOBDay'] = ApiClient.convertToType(data['DOBDay'], 'Number');
            }
            if (data.hasOwnProperty('DOBMonth')) {
                obj['DOBMonth'] = ApiClient.convertToType(data['DOBMonth'], 'Number');
            }
            if (data.hasOwnProperty('DOBYear')) {
                obj['DOBYear'] = ApiClient.convertToType(data['DOBYear'], 'Number');
            }
            if (data.hasOwnProperty('Kind')) {
                obj['Kind'] = ApiClient.convertToType(data['Kind'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Nationality')) {
                obj['Nationality'] = ApiClient.convertToType(data['Nationality'], 'String');
            }
            if (data.hasOwnProperty('NatureOfControl')) {
                obj['NatureOfControl'] = ArrayOfString.constructFromObject(data['NatureOfControl']);
            }
            if (data.hasOwnProperty('NotifiedOn')) {
                obj['NotifiedOn'] = ApiClient.convertToType(data['NotifiedOn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PSCDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PSCDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address'] && !(typeof data['Address'] === 'string' || data['Address'] instanceof String)) {
            throw new Error("Expected the field `Address` to be a primitive type in the JSON string but got " + data['Address']);
        }
        // ensure the json data is a string
        if (data['CeasedOn'] && !(typeof data['CeasedOn'] === 'string' || data['CeasedOn'] instanceof String)) {
            throw new Error("Expected the field `CeasedOn` to be a primitive type in the JSON string but got " + data['CeasedOn']);
        }
        // ensure the json data is a string
        if (data['CountryOfResidence'] && !(typeof data['CountryOfResidence'] === 'string' || data['CountryOfResidence'] instanceof String)) {
            throw new Error("Expected the field `CountryOfResidence` to be a primitive type in the JSON string but got " + data['CountryOfResidence']);
        }
        // ensure the json data is a string
        if (data['Kind'] && !(typeof data['Kind'] === 'string' || data['Kind'] instanceof String)) {
            throw new Error("Expected the field `Kind` to be a primitive type in the JSON string but got " + data['Kind']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Nationality'] && !(typeof data['Nationality'] === 'string' || data['Nationality'] instanceof String)) {
            throw new Error("Expected the field `Nationality` to be a primitive type in the JSON string but got " + data['Nationality']);
        }
        // validate the optional field `NatureOfControl`
        if (data['NatureOfControl']) { // data not null
          ArrayOfString.validateJSON(data['NatureOfControl']);
        }
        // ensure the json data is a string
        if (data['NotifiedOn'] && !(typeof data['NotifiedOn'] === 'string' || data['NotifiedOn'] instanceof String)) {
            throw new Error("Expected the field `NotifiedOn` to be a primitive type in the JSON string but got " + data['NotifiedOn']);
        }

        return true;
    }


}



/**
 * @member {String} Address
 */
PSCDetails.prototype['Address'] = undefined;

/**
 * @member {String} CeasedOn
 */
PSCDetails.prototype['CeasedOn'] = undefined;

/**
 * @member {String} CountryOfResidence
 */
PSCDetails.prototype['CountryOfResidence'] = undefined;

/**
 * @member {Number} DOBDay
 */
PSCDetails.prototype['DOBDay'] = undefined;

/**
 * @member {Number} DOBMonth
 */
PSCDetails.prototype['DOBMonth'] = undefined;

/**
 * @member {Number} DOBYear
 */
PSCDetails.prototype['DOBYear'] = undefined;

/**
 * @member {String} Kind
 */
PSCDetails.prototype['Kind'] = undefined;

/**
 * @member {String} Name
 */
PSCDetails.prototype['Name'] = undefined;

/**
 * @member {String} Nationality
 */
PSCDetails.prototype['Nationality'] = undefined;

/**
 * @member {module:model/ArrayOfString} NatureOfControl
 */
PSCDetails.prototype['NatureOfControl'] = undefined;

/**
 * @member {String} NotifiedOn
 */
PSCDetails.prototype['NotifiedOn'] = undefined;






export default PSCDetails;

