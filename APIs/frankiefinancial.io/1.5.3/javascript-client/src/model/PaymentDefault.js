/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentDefault model module.
 * @module model/PaymentDefault
 * @version 1.5.3
 */
class PaymentDefault {
    /**
     * Constructs a new <code>PaymentDefault</code>.
     * @alias module:model/PaymentDefault
     */
    constructor() { 
        
        PaymentDefault.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDefault</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDefault} obj Optional instance to populate.
     * @return {module:model/PaymentDefault} The populated <code>PaymentDefault</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDefault();

            if (data.hasOwnProperty('abn')) {
                obj['abn'] = ApiClient.convertToType(data['abn'], 'String');
            }
            if (data.hasOwnProperty('accountAdditionalAbn')) {
                obj['accountAdditionalAbn'] = ApiClient.convertToType(data['accountAdditionalAbn'], 'String');
            }
            if (data.hasOwnProperty('accountVerifiedDate')) {
                obj['accountVerifiedDate'] = ApiClient.convertToType(data['accountVerifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('amountOutstanding')) {
                obj['amountOutstanding'] = ApiClient.convertToType(data['amountOutstanding'], 'Number');
            }
            if (data.hasOwnProperty('approvedDate')) {
                obj['approvedDate'] = ApiClient.convertToType(data['approvedDate'], 'Date');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('defaultSettled')) {
                obj['defaultSettled'] = ApiClient.convertToType(data['defaultSettled'], 'Boolean');
            }
            if (data.hasOwnProperty('doctype')) {
                obj['doctype'] = ApiClient.convertToType(data['doctype'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('originalInvoiceDate')) {
                obj['originalInvoiceDate'] = ApiClient.convertToType(data['originalInvoiceDate'], 'Date');
            }
            if (data.hasOwnProperty('partPaymentMade')) {
                obj['partPaymentMade'] = ApiClient.convertToType(data['partPaymentMade'], 'Boolean');
            }
            if (data.hasOwnProperty('partpayment')) {
                obj['partpayment'] = ApiClient.convertToType(data['partpayment'], 'Boolean');
            }
            if (data.hasOwnProperty('paymentDueDate')) {
                obj['paymentDueDate'] = ApiClient.convertToType(data['paymentDueDate'], 'Date');
            }
            if (data.hasOwnProperty('posterAbn')) {
                obj['posterAbn'] = ApiClient.convertToType(data['posterAbn'], 'String');
            }
            if (data.hasOwnProperty('posterName')) {
                obj['posterName'] = ApiClient.convertToType(data['posterName'], 'String');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Boolean');
            }
            if (data.hasOwnProperty('uploadedDate')) {
                obj['uploadedDate'] = ApiClient.convertToType(data['uploadedDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDefault</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDefault</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['abn'] && !(typeof data['abn'] === 'string' || data['abn'] instanceof String)) {
            throw new Error("Expected the field `abn` to be a primitive type in the JSON string but got " + data['abn']);
        }
        // ensure the json data is a string
        if (data['accountAdditionalAbn'] && !(typeof data['accountAdditionalAbn'] === 'string' || data['accountAdditionalAbn'] instanceof String)) {
            throw new Error("Expected the field `accountAdditionalAbn` to be a primitive type in the JSON string but got " + data['accountAdditionalAbn']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['doctype'] && !(typeof data['doctype'] === 'string' || data['doctype'] instanceof String)) {
            throw new Error("Expected the field `doctype` to be a primitive type in the JSON string but got " + data['doctype']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['posterAbn'] && !(typeof data['posterAbn'] === 'string' || data['posterAbn'] instanceof String)) {
            throw new Error("Expected the field `posterAbn` to be a primitive type in the JSON string but got " + data['posterAbn']);
        }
        // ensure the json data is a string
        if (data['posterName'] && !(typeof data['posterName'] === 'string' || data['posterName'] instanceof String)) {
            throw new Error("Expected the field `posterName` to be a primitive type in the JSON string but got " + data['posterName']);
        }

        return true;
    }


}



/**
 * @member {String} abn
 */
PaymentDefault.prototype['abn'] = undefined;

/**
 * @member {String} accountAdditionalAbn
 */
PaymentDefault.prototype['accountAdditionalAbn'] = undefined;

/**
 * @member {Date} accountVerifiedDate
 */
PaymentDefault.prototype['accountVerifiedDate'] = undefined;

/**
 * @member {Number} amountOutstanding
 */
PaymentDefault.prototype['amountOutstanding'] = undefined;

/**
 * @member {Date} approvedDate
 */
PaymentDefault.prototype['approvedDate'] = undefined;

/**
 * @member {String} company
 */
PaymentDefault.prototype['company'] = undefined;

/**
 * @member {Boolean} defaultSettled
 */
PaymentDefault.prototype['defaultSettled'] = undefined;

/**
 * @member {String} doctype
 */
PaymentDefault.prototype['doctype'] = undefined;

/**
 * @member {String} documentType
 */
PaymentDefault.prototype['documentType'] = undefined;

/**
 * @member {Date} lastUpdated
 */
PaymentDefault.prototype['lastUpdated'] = undefined;

/**
 * @member {Date} originalInvoiceDate
 */
PaymentDefault.prototype['originalInvoiceDate'] = undefined;

/**
 * @member {Boolean} partPaymentMade
 */
PaymentDefault.prototype['partPaymentMade'] = undefined;

/**
 * @member {Boolean} partpayment
 */
PaymentDefault.prototype['partpayment'] = undefined;

/**
 * @member {Date} paymentDueDate
 */
PaymentDefault.prototype['paymentDueDate'] = undefined;

/**
 * @member {String} posterAbn
 */
PaymentDefault.prototype['posterAbn'] = undefined;

/**
 * @member {String} posterName
 */
PaymentDefault.prototype['posterName'] = undefined;

/**
 * @member {Boolean} settled
 */
PaymentDefault.prototype['settled'] = undefined;

/**
 * @member {Date} uploadedDate
 */
PaymentDefault.prototype['uploadedDate'] = undefined;






export default PaymentDefault;

