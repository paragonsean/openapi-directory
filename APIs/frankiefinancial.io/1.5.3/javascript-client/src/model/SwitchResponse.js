/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayMarkUp from './DisplayMarkUp';
import Plan from './Plan';

/**
 * The SwitchResponse model module.
 * @module model/SwitchResponse
 * @version 1.5.3
 */
class SwitchResponse {
    /**
     * Constructs a new <code>SwitchResponse</code>.
     * @alias module:model/SwitchResponse
     * @param correlationId {String} The correlationId as passed in the request
     * @param plan {module:model/Plan} 
     * @param reference {String} A unique reference for this switch request
     * @param switchDate {String} Timestamp of switch request
     * @param version {String} Version of the API on which the switch request took place. This value should be reported with any issue raised.
     */
    constructor(correlationId, plan, reference, switchDate, version) { 
        
        SwitchResponse.initialize(this, correlationId, plan, reference, switchDate, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, correlationId, plan, reference, switchDate, version) { 
        obj['correlationId'] = correlationId;
        obj['plan'] = plan;
        obj['reference'] = reference;
        obj['switchDate'] = switchDate;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>SwitchResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwitchResponse} obj Optional instance to populate.
     * @return {module:model/SwitchResponse} The populated <code>SwitchResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwitchResponse();

            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('nextSteps')) {
                obj['nextSteps'] = ApiClient.convertToType(data['nextSteps'], [DisplayMarkUp]);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = Plan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('switchDate')) {
                obj['switchDate'] = ApiClient.convertToType(data['switchDate'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwitchResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwitchResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SwitchResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        if (data['nextSteps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nextSteps'])) {
                throw new Error("Expected the field `nextSteps` to be an array in the JSON data but got " + data['nextSteps']);
            }
            // validate the optional field `nextSteps` (array)
            for (const item of data['nextSteps']) {
                DisplayMarkUp.validateJSON(item);
            };
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          Plan.validateJSON(data['plan']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['switchDate'] && !(typeof data['switchDate'] === 'string' || data['switchDate'] instanceof String)) {
            throw new Error("Expected the field `switchDate` to be a primitive type in the JSON string but got " + data['switchDate']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

SwitchResponse.RequiredProperties = ["correlationId", "plan", "reference", "switchDate", "version"];

/**
 * The correlationId as passed in the request
 * @member {String} correlationId
 */
SwitchResponse.prototype['correlationId'] = undefined;

/**
 * Hierarchical list of objects for rendering the next steps
 * @member {Array.<module:model/DisplayMarkUp>} nextSteps
 */
SwitchResponse.prototype['nextSteps'] = undefined;

/**
 * @member {module:model/Plan} plan
 */
SwitchResponse.prototype['plan'] = undefined;

/**
 * A unique reference for this switch request
 * @member {String} reference
 */
SwitchResponse.prototype['reference'] = undefined;

/**
 * Timestamp of switch request
 * @member {String} switchDate
 */
SwitchResponse.prototype['switchDate'] = undefined;

/**
 * Version of the API on which the switch request took place. This value should be reported with any issue raised.
 * @member {String} version
 */
SwitchResponse.prototype['version'] = undefined;






export default SwitchResponse;

