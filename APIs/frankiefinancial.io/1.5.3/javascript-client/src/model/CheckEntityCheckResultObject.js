/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckEntityCheckResultObjectEntityResult from './CheckEntityCheckResultObjectEntityResult';
import EntityObject from './EntityObject';
import EntityProfileResultObject from './EntityProfileResultObject';
import FraudCheckResultObject from './FraudCheckResultObject';
import ProcessResultObject from './ProcessResultObject';

/**
 * The CheckEntityCheckResultObject model module.
 * @module model/CheckEntityCheckResultObject
 * @version 1.5.3
 */
class CheckEntityCheckResultObject {
    /**
     * Constructs a new <code>CheckEntityCheckResultObject</code>.
     * Describes all of the checks that were carried out against an entity as part of our cascading check process. Because there are a number of steps involved in checking an entity, (including the use of past checks done by you or others), there is an overall summary check result that will tell you the final disposition of the the check you requested.  So if you requested a 2+2+governmentID+pep/sanctions/etc (i.e. everything) then there would have been several checks done in order to meet this requirement. Some may have even failed, but eventually we got there. The summary gives the final assessment, based on all available data.  Detailed writeups on how this all works can be found here:   https://apidocs.frankiefinancial.com/docs/understanding-checksummary-results 
     * @alias module:model/CheckEntityCheckResultObject
     */
    constructor() { 
        
        CheckEntityCheckResultObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckEntityCheckResultObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckEntityCheckResultObject} obj Optional instance to populate.
     * @return {module:model/CheckEntityCheckResultObject} The populated <code>CheckEntityCheckResultObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckEntityCheckResultObject();

            if (data.hasOwnProperty('blacklistCheckResults')) {
                obj['blacklistCheckResults'] = ApiClient.convertToType(data['blacklistCheckResults'], [ProcessResultObject]);
            }
            if (data.hasOwnProperty('checkResultsListSummaries')) {
                obj['checkResultsListSummaries'] = ApiClient.convertToType(data['checkResultsListSummaries'], [ProcessResultObject]);
            }
            if (data.hasOwnProperty('checkRisk')) {
                obj['checkRisk'] = ProcessResultObject.constructFromObject(data['checkRisk']);
            }
            if (data.hasOwnProperty('checkSummary')) {
                obj['checkSummary'] = ProcessResultObject.constructFromObject(data['checkSummary']);
            }
            if (data.hasOwnProperty('deviceCheckResults')) {
                obj['deviceCheckResults'] = ApiClient.convertToType(data['deviceCheckResults'], [ProcessResultObject]);
            }
            if (data.hasOwnProperty('duplicateCheckResults')) {
                obj['duplicateCheckResults'] = ApiClient.convertToType(data['duplicateCheckResults'], [ProcessResultObject]);
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = EntityObject.constructFromObject(data['entity']);
            }
            if (data.hasOwnProperty('entityProfileResult')) {
                obj['entityProfileResult'] = EntityProfileResultObject.constructFromObject(data['entityProfileResult']);
            }
            if (data.hasOwnProperty('entityResult')) {
                obj['entityResult'] = CheckEntityCheckResultObjectEntityResult.constructFromObject(data['entityResult']);
            }
            if (data.hasOwnProperty('fraudCheckResults')) {
                obj['fraudCheckResults'] = FraudCheckResultObject.constructFromObject(data['fraudCheckResults']);
            }
            if (data.hasOwnProperty('manualCheckResults')) {
                obj['manualCheckResults'] = ApiClient.convertToType(data['manualCheckResults'], [ProcessResultObject]);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('sharedBlocklistCheckResults')) {
                obj['sharedBlocklistCheckResults'] = ApiClient.convertToType(data['sharedBlocklistCheckResults'], [ProcessResultObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckEntityCheckResultObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckEntityCheckResultObject</code>.
     */
    static validateJSON(data) {
        if (data['blacklistCheckResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blacklistCheckResults'])) {
                throw new Error("Expected the field `blacklistCheckResults` to be an array in the JSON data but got " + data['blacklistCheckResults']);
            }
            // validate the optional field `blacklistCheckResults` (array)
            for (const item of data['blacklistCheckResults']) {
                ProcessResultObject.validateJSON(item);
            };
        }
        if (data['checkResultsListSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checkResultsListSummaries'])) {
                throw new Error("Expected the field `checkResultsListSummaries` to be an array in the JSON data but got " + data['checkResultsListSummaries']);
            }
            // validate the optional field `checkResultsListSummaries` (array)
            for (const item of data['checkResultsListSummaries']) {
                ProcessResultObject.validateJSON(item);
            };
        }
        // validate the optional field `checkRisk`
        if (data['checkRisk']) { // data not null
          ProcessResultObject.validateJSON(data['checkRisk']);
        }
        // validate the optional field `checkSummary`
        if (data['checkSummary']) { // data not null
          ProcessResultObject.validateJSON(data['checkSummary']);
        }
        if (data['deviceCheckResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deviceCheckResults'])) {
                throw new Error("Expected the field `deviceCheckResults` to be an array in the JSON data but got " + data['deviceCheckResults']);
            }
            // validate the optional field `deviceCheckResults` (array)
            for (const item of data['deviceCheckResults']) {
                ProcessResultObject.validateJSON(item);
            };
        }
        if (data['duplicateCheckResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['duplicateCheckResults'])) {
                throw new Error("Expected the field `duplicateCheckResults` to be an array in the JSON data but got " + data['duplicateCheckResults']);
            }
            // validate the optional field `duplicateCheckResults` (array)
            for (const item of data['duplicateCheckResults']) {
                ProcessResultObject.validateJSON(item);
            };
        }
        // validate the optional field `entity`
        if (data['entity']) { // data not null
          EntityObject.validateJSON(data['entity']);
        }
        // validate the optional field `entityProfileResult`
        if (data['entityProfileResult']) { // data not null
          EntityProfileResultObject.validateJSON(data['entityProfileResult']);
        }
        // validate the optional field `entityResult`
        if (data['entityResult']) { // data not null
          CheckEntityCheckResultObjectEntityResult.validateJSON(data['entityResult']);
        }
        // validate the optional field `fraudCheckResults`
        if (data['fraudCheckResults']) { // data not null
          FraudCheckResultObject.validateJSON(data['fraudCheckResults']);
        }
        if (data['manualCheckResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['manualCheckResults'])) {
                throw new Error("Expected the field `manualCheckResults` to be an array in the JSON data but got " + data['manualCheckResults']);
            }
            // validate the optional field `manualCheckResults` (array)
            for (const item of data['manualCheckResults']) {
                ProcessResultObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        if (data['sharedBlocklistCheckResults']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharedBlocklistCheckResults'])) {
                throw new Error("Expected the field `sharedBlocklistCheckResults` to be an array in the JSON data but got " + data['sharedBlocklistCheckResults']);
            }
            // validate the optional field `sharedBlocklistCheckResults` (array)
            for (const item of data['sharedBlocklistCheckResults']) {
                ProcessResultObject.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Collection of check results for the entity having been previously blacklisted.  An array of matched blacklisted entities sorted by match confidence level (highest first). 
 * @member {Array.<module:model/ProcessResultObject>} blacklistCheckResults
 */
CheckEntityCheckResultObject.prototype['blacklistCheckResults'] = undefined;

/**
 * Contains a list of all checkSummary records (one for each check)
 * @member {Array.<module:model/ProcessResultObject>} checkResultsListSummaries
 */
CheckEntityCheckResultObject.prototype['checkResultsListSummaries'] = undefined;

/**
 * @member {module:model/ProcessResultObject} checkRisk
 */
CheckEntityCheckResultObject.prototype['checkRisk'] = undefined;

/**
 * @member {module:model/ProcessResultObject} checkSummary
 */
CheckEntityCheckResultObject.prototype['checkSummary'] = undefined;

/**
 * We can perform a number of device checks on an entity, such as those from ThreatMetrix and/or BioCatch. If one of these checks was incorporated into the ID check, then these will appear here. 
 * @member {Array.<module:model/ProcessResultObject>} deviceCheckResults
 */
CheckEntityCheckResultObject.prototype['deviceCheckResults'] = undefined;

/**
 * Collection of check results for the entity having previously been checked.  An array of matched checked entities sorted by match confidence level (highest first). 
 * @member {Array.<module:model/ProcessResultObject>} duplicateCheckResults
 */
CheckEntityCheckResultObject.prototype['duplicateCheckResults'] = undefined;

/**
 * @member {module:model/EntityObject} entity
 */
CheckEntityCheckResultObject.prototype['entity'] = undefined;

/**
 * @member {module:model/EntityProfileResultObject} entityProfileResult
 */
CheckEntityCheckResultObject.prototype['entityProfileResult'] = undefined;

/**
 * @member {module:model/CheckEntityCheckResultObjectEntityResult} entityResult
 */
CheckEntityCheckResultObject.prototype['entityResult'] = undefined;

/**
 * @member {module:model/FraudCheckResultObject} fraudCheckResults
 */
CheckEntityCheckResultObject.prototype['fraudCheckResults'] = undefined;

/**
 * Collection of check results for the manual KYC.  An array of one entry with the manual check result. 
 * @member {Array.<module:model/ProcessResultObject>} manualCheckResults
 */
CheckEntityCheckResultObject.prototype['manualCheckResults'] = undefined;

/**
 * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
 * @member {String} requestId
 */
CheckEntityCheckResultObject.prototype['requestId'] = undefined;

/**
 * Collection of check results for the entity having been previously blacklisted in shared blocklist.  An array of matched blacklisted entities sorted by match confidence level (highest first). 
 * @member {Array.<module:model/ProcessResultObject>} sharedBlocklistCheckResults
 */
CheckEntityCheckResultObject.prototype['sharedBlocklistCheckResults'] = undefined;






export default CheckEntityCheckResultObject;

