/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArrayOfAddressDTO from './ArrayOfAddressDTO';
import ArrayOfString from './ArrayOfString';

/**
 * The CompanyDTO model module.
 * @module model/CompanyDTO
 * @version 1.5.3
 */
class CompanyDTO {
    /**
     * Constructs a new <code>CompanyDTO</code>.
     * @alias module:model/CompanyDTO
     */
    constructor() { 
        
        CompanyDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyDTO} obj Optional instance to populate.
     * @return {module:model/CompanyDTO} The populated <code>CompanyDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyDTO();

            if (data.hasOwnProperty('Addresses')) {
                obj['Addresses'] = ArrayOfAddressDTO.constructFromObject(data['Addresses']);
            }
            if (data.hasOwnProperty('Aliases')) {
                obj['Aliases'] = ArrayOfString.constructFromObject(data['Aliases']);
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('CompanyID')) {
                obj['CompanyID'] = ApiClient.convertToType(data['CompanyID'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('Function')) {
                obj['Function'] = ApiClient.convertToType(data['Function'], 'String');
            }
            if (data.hasOwnProperty('LegalForm')) {
                obj['LegalForm'] = ApiClient.convertToType(data['LegalForm'], 'String');
            }
            if (data.hasOwnProperty('LegalStatus')) {
                obj['LegalStatus'] = ApiClient.convertToType(data['LegalStatus'], 'String');
            }
            if (data.hasOwnProperty('MoreKey')) {
                obj['MoreKey'] = ApiClient.convertToType(data['MoreKey'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Official')) {
                obj['Official'] = ApiClient.convertToType(data['Official'], 'Boolean');
            }
            if (data.hasOwnProperty('RegistrationAuthority')) {
                obj['RegistrationAuthority'] = ApiClient.convertToType(data['RegistrationAuthority'], 'String');
            }
            if (data.hasOwnProperty('RegistrationAuthorityCode')) {
                obj['RegistrationAuthorityCode'] = ApiClient.convertToType(data['RegistrationAuthorityCode'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('VirtualID')) {
                obj['VirtualID'] = ApiClient.convertToType(data['VirtualID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyDTO</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Addresses`
        if (data['Addresses']) { // data not null
          ArrayOfAddressDTO.validateJSON(data['Addresses']);
        }
        // validate the optional field `Aliases`
        if (data['Aliases']) { // data not null
          ArrayOfString.validateJSON(data['Aliases']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['CompanyID'] && !(typeof data['CompanyID'] === 'string' || data['CompanyID'] instanceof String)) {
            throw new Error("Expected the field `CompanyID` to be a primitive type in the JSON string but got " + data['CompanyID']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['Function'] && !(typeof data['Function'] === 'string' || data['Function'] instanceof String)) {
            throw new Error("Expected the field `Function` to be a primitive type in the JSON string but got " + data['Function']);
        }
        // ensure the json data is a string
        if (data['LegalForm'] && !(typeof data['LegalForm'] === 'string' || data['LegalForm'] instanceof String)) {
            throw new Error("Expected the field `LegalForm` to be a primitive type in the JSON string but got " + data['LegalForm']);
        }
        // ensure the json data is a string
        if (data['LegalStatus'] && !(typeof data['LegalStatus'] === 'string' || data['LegalStatus'] instanceof String)) {
            throw new Error("Expected the field `LegalStatus` to be a primitive type in the JSON string but got " + data['LegalStatus']);
        }
        // ensure the json data is a string
        if (data['MoreKey'] && !(typeof data['MoreKey'] === 'string' || data['MoreKey'] instanceof String)) {
            throw new Error("Expected the field `MoreKey` to be a primitive type in the JSON string but got " + data['MoreKey']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RegistrationAuthority'] && !(typeof data['RegistrationAuthority'] === 'string' || data['RegistrationAuthority'] instanceof String)) {
            throw new Error("Expected the field `RegistrationAuthority` to be a primitive type in the JSON string but got " + data['RegistrationAuthority']);
        }
        // ensure the json data is a string
        if (data['RegistrationAuthorityCode'] && !(typeof data['RegistrationAuthorityCode'] === 'string' || data['RegistrationAuthorityCode'] instanceof String)) {
            throw new Error("Expected the field `RegistrationAuthorityCode` to be a primitive type in the JSON string but got " + data['RegistrationAuthorityCode']);
        }
        // ensure the json data is a string
        if (data['Source'] && !(typeof data['Source'] === 'string' || data['Source'] instanceof String)) {
            throw new Error("Expected the field `Source` to be a primitive type in the JSON string but got " + data['Source']);
        }
        // ensure the json data is a string
        if (data['VirtualID'] && !(typeof data['VirtualID'] === 'string' || data['VirtualID'] instanceof String)) {
            throw new Error("Expected the field `VirtualID` to be a primitive type in the JSON string but got " + data['VirtualID']);
        }

        return true;
    }


}



/**
 * @member {module:model/ArrayOfAddressDTO} Addresses
 */
CompanyDTO.prototype['Addresses'] = undefined;

/**
 * @member {module:model/ArrayOfString} Aliases
 */
CompanyDTO.prototype['Aliases'] = undefined;

/**
 * @member {String} Code
 */
CompanyDTO.prototype['Code'] = undefined;

/**
 * @member {String} CompanyID
 */
CompanyDTO.prototype['CompanyID'] = undefined;

/**
 * @member {String} Date
 */
CompanyDTO.prototype['Date'] = undefined;

/**
 * @member {String} Function
 */
CompanyDTO.prototype['Function'] = undefined;

/**
 * @member {String} LegalForm
 */
CompanyDTO.prototype['LegalForm'] = undefined;

/**
 * @member {String} LegalStatus
 */
CompanyDTO.prototype['LegalStatus'] = undefined;

/**
 * @member {String} MoreKey
 */
CompanyDTO.prototype['MoreKey'] = undefined;

/**
 * @member {String} Name
 */
CompanyDTO.prototype['Name'] = undefined;

/**
 * @member {Boolean} Official
 */
CompanyDTO.prototype['Official'] = undefined;

/**
 * @member {String} RegistrationAuthority
 */
CompanyDTO.prototype['RegistrationAuthority'] = undefined;

/**
 * @member {String} RegistrationAuthorityCode
 */
CompanyDTO.prototype['RegistrationAuthorityCode'] = undefined;

/**
 * @member {String} Source
 */
CompanyDTO.prototype['Source'] = undefined;

/**
 * @member {String} VirtualID
 */
CompanyDTO.prototype['VirtualID'] = undefined;






export default CompanyDTO;

