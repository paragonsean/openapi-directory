/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumAddressType from './EnumAddressType';

/**
 * The AddressObject model module.
 * @module model/AddressObject
 * @version 1.5.3
 */
class AddressObject {
    /**
     * Constructs a new <code>AddressObject</code>.
     * @alias module:model/AddressObject
     * @param country {String} The ISO-3166-1 country. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.   See: https://en.wikipedia.org/wiki/ISO_3166-1 
     */
    constructor(country) { 
        
        AddressObject.initialize(this, country);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country) { 
        obj['country'] = country;
    }

    /**
     * Constructs a <code>AddressObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressObject} obj Optional instance to populate.
     * @return {module:model/AddressObject} The populated <code>AddressObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressObject();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = EnumAddressType.constructFromObject(data['addressType']);
            }
            if (data.hasOwnProperty('buildingName')) {
                obj['buildingName'] = ApiClient.convertToType(data['buildingName'], 'String');
            }
            if (data.hasOwnProperty('careOf')) {
                obj['careOf'] = ApiClient.convertToType(data['careOf'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('longForm')) {
                obj['longForm'] = ApiClient.convertToType(data['longForm'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('streetName')) {
                obj['streetName'] = ApiClient.convertToType(data['streetName'], 'String');
            }
            if (data.hasOwnProperty('streetNumber')) {
                obj['streetNumber'] = ApiClient.convertToType(data['streetNumber'], 'String');
            }
            if (data.hasOwnProperty('streetType')) {
                obj['streetType'] = ApiClient.convertToType(data['streetType'], 'String');
            }
            if (data.hasOwnProperty('suburb')) {
                obj['suburb'] = ApiClient.convertToType(data['suburb'], 'String');
            }
            if (data.hasOwnProperty('town')) {
                obj['town'] = ApiClient.convertToType(data['town'], 'String');
            }
            if (data.hasOwnProperty('unitNumber')) {
                obj['unitNumber'] = ApiClient.convertToType(data['unitNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddressObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddressObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddressObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['buildingName'] && !(typeof data['buildingName'] === 'string' || data['buildingName'] instanceof String)) {
            throw new Error("Expected the field `buildingName` to be a primitive type in the JSON string but got " + data['buildingName']);
        }
        // ensure the json data is a string
        if (data['careOf'] && !(typeof data['careOf'] === 'string' || data['careOf'] instanceof String)) {
            throw new Error("Expected the field `careOf` to be a primitive type in the JSON string but got " + data['careOf']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['longForm'] && !(typeof data['longForm'] === 'string' || data['longForm'] instanceof String)) {
            throw new Error("Expected the field `longForm` to be a primitive type in the JSON string but got " + data['longForm']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['streetName'] && !(typeof data['streetName'] === 'string' || data['streetName'] instanceof String)) {
            throw new Error("Expected the field `streetName` to be a primitive type in the JSON string but got " + data['streetName']);
        }
        // ensure the json data is a string
        if (data['streetNumber'] && !(typeof data['streetNumber'] === 'string' || data['streetNumber'] instanceof String)) {
            throw new Error("Expected the field `streetNumber` to be a primitive type in the JSON string but got " + data['streetNumber']);
        }
        // ensure the json data is a string
        if (data['streetType'] && !(typeof data['streetType'] === 'string' || data['streetType'] instanceof String)) {
            throw new Error("Expected the field `streetType` to be a primitive type in the JSON string but got " + data['streetType']);
        }
        // ensure the json data is a string
        if (data['suburb'] && !(typeof data['suburb'] === 'string' || data['suburb'] instanceof String)) {
            throw new Error("Expected the field `suburb` to be a primitive type in the JSON string but got " + data['suburb']);
        }
        // ensure the json data is a string
        if (data['town'] && !(typeof data['town'] === 'string' || data['town'] instanceof String)) {
            throw new Error("Expected the field `town` to be a primitive type in the JSON string but got " + data['town']);
        }
        // ensure the json data is a string
        if (data['unitNumber'] && !(typeof data['unitNumber'] === 'string' || data['unitNumber'] instanceof String)) {
            throw new Error("Expected the field `unitNumber` to be a primitive type in the JSON string but got " + data['unitNumber']);
        }

        return true;
    }


}

AddressObject.RequiredProperties = ["country"];

/**
 * As addresses are added to an entity, they're assigned an id to assist with tracking.   If you're adjusting an address, you will need to include the addressId so as to be able to reference it correctly in the list. 
 * @member {String} addressId
 */
AddressObject.prototype['addressId'] = undefined;

/**
 * @member {module:model/EnumAddressType} addressType
 */
AddressObject.prototype['addressType'] = undefined;

/**
 * The name of the building, apartment block, condo, etc
 * @member {String} buildingName
 */
AddressObject.prototype['buildingName'] = undefined;

/**
 * Individual or business name at this address if not the same as the name of the entity to which this address belongs. 
 * @member {String} careOf
 */
AddressObject.prototype['careOf'] = undefined;

/**
 * The ISO-3166-1 country. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.   See: https://en.wikipedia.org/wiki/ISO_3166-1 
 * @member {String} country
 */
AddressObject.prototype['country'] = undefined;

/**
 * The date this address was no longer used (if available). Used mostly with business addresses. 
 * @member {Date} endDate
 */
AddressObject.prototype['endDate'] = undefined;

/**
 * In some cases, the address will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible.  WARNING: Use of longForm is not guaranteed to produce perfect results, due to the variety of potential formats. You've been warned.  Failure to break down or disambiguate the address will result in an error. 
 * @member {String} longForm
 */
AddressObject.prototype['longForm'] = undefined;

/**
 * The post code of the address.
 * @member {String} postalCode
 */
AddressObject.prototype['postalCode'] = undefined;

/**
 * The county, province, cantonment
 * @member {String} region
 */
AddressObject.prototype['region'] = undefined;

/**
 * The date this address first because active. Used mostly with business addresses. 
 * @member {Date} startDate
 */
AddressObject.prototype['startDate'] = undefined;

/**
 * The state. Use local abbreviations, such as VIC(toria) or TX (Texas)
 * @member {String} state
 */
AddressObject.prototype['state'] = undefined;

/**
 * The name of the street  This field can in fact be a bit flexible, potentially containing the streetNumber and streetType as well. Most services in use can work it out.  If this field has been auto-populated by Google (see writeup here:  https://apidocs.frankiefinancial.com/docs/working-with-addresses then the bulk of the address will be in this field.  If you can avoid it though, please try and keep things separate. 
 * @member {String} streetName
 */
AddressObject.prototype['streetName'] = undefined;

/**
 * The number on the street. Generally a number, but can also be alphanumeric (e.g. 3A) 
 * @member {String} streetNumber
 */
AddressObject.prototype['streetNumber'] = undefined;

/**
 * The street \"type\" - e.g. Road, St, Ave, Circuit, etc
 * @member {String} streetType
 */
AddressObject.prototype['streetType'] = undefined;

/**
 * The suburb in the town/city. Only use this if you require a suburb AND a town/city, otherwise, just use the \"town\" parameter.
 * @member {String} suburb
 */
AddressObject.prototype['suburb'] = undefined;

/**
 * The town/village/suburb/city
 * @member {String} town
 */
AddressObject.prototype['town'] = undefined;

/**
 * Unit/Apartment/Flat/Suite/etc number
 * @member {String} unitNumber
 */
AddressObject.prototype['unitNumber'] = undefined;






export default AddressObject;

