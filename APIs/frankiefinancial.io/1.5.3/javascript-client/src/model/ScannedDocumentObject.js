/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumMIMEType from './EnumMIMEType';
import EnumScanDataRetrievalState from './EnumScanDataRetrievalState';
import EnumScanSide from './EnumScanSide';
import EnumScanType from './EnumScanType';

/**
 * The ScannedDocumentObject model module.
 * @module model/ScannedDocumentObject
 * @version 1.5.3
 */
class ScannedDocumentObject {
    /**
     * Constructs a new <code>ScannedDocumentObject</code>.
     * the document to be attached and optionally scanned (if supported)
     * @alias module:model/ScannedDocumentObject
     */
    constructor() { 
        
        ScannedDocumentObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScannedDocumentObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScannedDocumentObject} obj Optional instance to populate.
     * @return {module:model/ScannedDocumentObject} The populated <code>ScannedDocumentObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScannedDocumentObject();

            if (data.hasOwnProperty('ScanDelete')) {
                obj['ScanDelete'] = ApiClient.convertToType(data['ScanDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('scanCreated')) {
                obj['scanCreated'] = ApiClient.convertToType(data['scanCreated'], 'Date');
            }
            if (data.hasOwnProperty('scanData')) {
                obj['scanData'] = ApiClient.convertToType(data['scanData'], 'Blob');
            }
            if (data.hasOwnProperty('scanDataRetrievalState')) {
                obj['scanDataRetrievalState'] = EnumScanDataRetrievalState.constructFromObject(data['scanDataRetrievalState']);
            }
            if (data.hasOwnProperty('scanDocId')) {
                obj['scanDocId'] = ApiClient.convertToType(data['scanDocId'], 'String');
            }
            if (data.hasOwnProperty('scanFilename')) {
                obj['scanFilename'] = ApiClient.convertToType(data['scanFilename'], 'String');
            }
            if (data.hasOwnProperty('scanMIME')) {
                obj['scanMIME'] = EnumMIMEType.constructFromObject(data['scanMIME']);
            }
            if (data.hasOwnProperty('scanPageNum')) {
                obj['scanPageNum'] = ApiClient.convertToType(data['scanPageNum'], 'Number');
            }
            if (data.hasOwnProperty('scanSide')) {
                obj['scanSide'] = EnumScanSide.constructFromObject(data['scanSide']);
            }
            if (data.hasOwnProperty('scanType')) {
                obj['scanType'] = EnumScanType.constructFromObject(data['scanType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScannedDocumentObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScannedDocumentObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['scanDocId'] && !(typeof data['scanDocId'] === 'string' || data['scanDocId'] instanceof String)) {
            throw new Error("Expected the field `scanDocId` to be a primitive type in the JSON string but got " + data['scanDocId']);
        }
        // ensure the json data is a string
        if (data['scanFilename'] && !(typeof data['scanFilename'] === 'string' || data['scanFilename'] instanceof String)) {
            throw new Error("Expected the field `scanFilename` to be a primitive type in the JSON string but got " + data['scanFilename']);
        }

        return true;
    }


}



/**
 * Used as a way of indicating to the service that the original scanned document is not to be kept after it has been processed. We will retain any metadata and the results of processing (where required by regulation or the customer), but the original file uploaded will eventually be remnoved once processing is complete.   If ScanDelete is set to true, any call with /full at the end will still not return the file contents, regardless of whether the file has been deleted yet (the deletion process is a background task that can take a few minutes to occur) 
 * @member {Boolean} ScanDelete
 */
ScannedDocumentObject.prototype['ScanDelete'] = undefined;

/**
 * The date and time the scan was created. Not the date of the scanned document, which should be in the idIssued attribute of the document that owns this scan. 
 * @member {Date} scanCreated
 */
ScannedDocumentObject.prototype['scanCreated'] = undefined;

/**
 * Base64 encoded string of a photo or scan of an ID document to be verified. If supplied and of a supported type, the Frankie service will attempt to use OCR tech to extract the data from the scanned doc/image.  In a result message, this field will be left blank, unless the \"full\" action is requested. 
 * @member {Blob} scanData
 */
ScannedDocumentObject.prototype['scanData'] = undefined;

/**
 * @member {module:model/EnumScanDataRetrievalState} scanDataRetrievalState
 */
ScannedDocumentObject.prototype['scanDataRetrievalState'] = undefined;

/**
 * When an document scan is created/uploaded, it is assigned a scanDocId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 
 * @member {String} scanDocId
 */
ScannedDocumentObject.prototype['scanDocId'] = undefined;

/**
 * If you're uploading a file where it's important to keep the original filename, then you can provide that here. Otherwise the Frankie service will assign an arbitrary name based on the scanDocIdand an extension based on the MIME type 
 * @member {String} scanFilename
 */
ScannedDocumentObject.prototype['scanFilename'] = undefined;

/**
 * @member {module:model/EnumMIMEType} scanMIME
 */
ScannedDocumentObject.prototype['scanMIME'] = undefined;

/**
 * If uploading multiple pages - it's handy to keep a track of these. There is no enforcement of these numbers at all. You can have 10 page 1's and a page 29 if you wish. 
 * @member {Number} scanPageNum
 */
ScannedDocumentObject.prototype['scanPageNum'] = undefined;

/**
 * @member {module:model/EnumScanSide} scanSide
 */
ScannedDocumentObject.prototype['scanSide'] = undefined;

/**
 * @member {module:model/EnumScanType} scanType
 */
ScannedDocumentObject.prototype['scanType'] = undefined;






export default ScannedDocumentObject;

