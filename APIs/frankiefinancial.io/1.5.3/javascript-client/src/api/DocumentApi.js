/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptedDocumentResultObject from '../model/AcceptedDocumentResultObject';
import BasicStatusResultObject from '../model/BasicStatusResultObject';
import ComparisonSet from '../model/ComparisonSet';
import DocumentChecksResultObject from '../model/DocumentChecksResultObject';
import DocumentCompareResultObject from '../model/DocumentCompareResultObject';
import DocumentResultObject from '../model/DocumentResultObject';
import DocumentScanResultObject from '../model/DocumentScanResultObject';
import DocumentSearchResultObject from '../model/DocumentSearchResultObject';
import DocumentVerify from '../model/DocumentVerify';
import DocumentVerifyResultObject from '../model/DocumentVerifyResultObject';
import ErrorObject from '../model/ErrorObject';
import IdentityDocumentObject from '../model/IdentityDocumentObject';

/**
* Document service.
* @module api/DocumentApi
* @version 1.5.3
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compareDocument operation.
     * @callback module:api/DocumentApi~compareDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentCompareResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document and Compare to Original.
     * Creates a new document from the \"toDocument\" parameter (usual rules apply in that it must be a valid document, with no existing documentId). The compareDocument can be an existing documentId, or it too can be new as well.   * If existing (i.e. a valid DocumentId is supplied), it will be updated with any new data supplied before being sent to the comparison process.   * If new, then a new document will be created too, and the ID returned in the result.    The document scans are then sent for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {module:model/ComparisonSet} comparisonSet Contains the document (compareDocument) we want to compare (toDocument) 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~compareDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentCompareResultObject}
     */
    compareDocument(xFrankieCustomerID, comparisonSet, opts, callback) {
      opts = opts || {};
      let postBody = comparisonSet;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling compareDocument");
      }
      // verify the required parameter 'comparisonSet' is set
      if (comparisonSet === undefined || comparisonSet === null) {
        throw new Error("Missing the required parameter 'comparisonSet' when calling compareDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentCompareResultObject;
      return this.apiClient.callApi(
        '/document/new/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback module:api/DocumentApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create New Document.
     * Create a document object. A document object can be used to simply store data around a given identity or similar document. You can attach scans, PDFs, photos, videos, etc to the objectif you wish and these may be processed later (using the /scan function) to extract useful information. Or you can manually supply the extracted information if you choose. Document objects can be used to create an entity, based on extracted or supplied data; or it may be attached to an existing entity, either directly or through an ID check. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:model/IdentityDocumentObject} [document] 
     * @param {module:api/DocumentApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResultObject}
     */
    createDocument(xFrankieCustomerID, opts, callback) {
      opts = opts || {};
      let postBody = opts['document'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling createDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResultObject;
      return this.apiClient.callApi(
        '/document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScanDocument operation.
     * @callback module:api/DocumentApi~createScanDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentScanResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and OCR Scan Document.
     * Create a document object. This is then processed to extract useful information and create an entity; or it may be attached to an entity, either directly or through an ID check. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:model/IdentityDocumentObject} [document] 
     * @param {module:api/DocumentApi~createScanDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentScanResultObject}
     */
    createScanDocument(xFrankieCustomerID, opts, callback) {
      opts = opts || {};
      let postBody = opts['document'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling createScanDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentScanResultObject;
      return this.apiClient.callApi(
        '/document/new/scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback module:api/DocumentApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicStatusResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Document.
     * Mark this document as deleted. It will then become effectively invisible to all queries, but will be available in anonymised form for a past check. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicStatusResultObject}
     */
    deleteDocument(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling deleteDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicStatusResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDocument operation.
     * @callback module:api/DocumentApi~queryDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Details
     * Query the current status and details of a given documentId. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:api/DocumentApi~queryDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResultObject}
     */
    queryDocument(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling queryDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling queryDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDocumentChecks operation.
     * @callback module:api/DocumentApi~queryDocumentChecksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentChecksResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document Verification Check Details. 
     * Get the complete list of all checks that have been performed upon a given document, including the checks that have been performed by others (in those cases you just get the id, status and date run, none of the details). 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~queryDocumentChecksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentChecksResultObject}
     */
    queryDocumentChecks(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling queryDocumentChecks");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling queryDocumentChecks");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentChecksResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/checks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryDocumentFull operation.
     * @callback module:api/DocumentApi~queryDocumentFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Document and Scan Data
     * Query the current status and details of a given documentId. Also returns all document file data, not just the metadata. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:api/DocumentApi~queryDocumentFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResultObject}
     */
    queryDocumentFull(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling queryDocumentFull");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling queryDocumentFull");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDocument operation.
     * @callback module:api/DocumentApi~searchDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentSearchResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search For a Document !! EXPERIMENTAL !!
     *  Search for an existing document that matches the criteria supplied  There are of course limits to what can be searched upon. For a document search to work, you must supply at a minimum:    * idType   * country   * idNumber  The service will return a list of matching documents with confidence levels.  If you are the \"owner\" of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks)  Note: At this time, we cannot perform searches on document scans. But, you can supply extraData KVPs if they're known. These will help doublecheck search results with ambiguous results. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {module:model/IdentityDocumentObject} searchDocument A document object with the parameters you wish to search on. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:api/DocumentApi~searchDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentSearchResultObject}
     */
    searchDocument(xFrankieCustomerID, searchDocument, opts, callback) {
      opts = opts || {};
      let postBody = searchDocument;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling searchDocument");
      }
      // verify the required parameter 'searchDocument' is set
      if (searchDocument === undefined || searchDocument === null) {
        throw new Error("Missing the required parameter 'searchDocument' when calling searchDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentSearchResultObject;
      return this.apiClient.callApi(
        '/document/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCompareDocument operation.
     * @callback module:api/DocumentApi~updateCompareDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentCompareResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Document and Compare to Original.
     * Send the attached document scans to an external service for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {module:model/ComparisonSet} comparisonSet Contains the document (compareDocument) we want to compare (toDocument).  In this case, the toDocument should be left blank, and is assumed to be \"this\" document 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~updateCompareDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentCompareResultObject}
     */
    updateCompareDocument(xFrankieCustomerID, documentId, comparisonSet, opts, callback) {
      opts = opts || {};
      let postBody = comparisonSet;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateCompareDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateCompareDocument");
      }
      // verify the required parameter 'comparisonSet' is set
      if (comparisonSet === undefined || comparisonSet === null) {
        throw new Error("Missing the required parameter 'comparisonSet' when calling updateCompareDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentCompareResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocument operation.
     * @callback module:api/DocumentApi~updateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Existing Document.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {module:model/IdentityDocumentObject} document The document to be updated
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {Boolean} [noInvalidate] Disable check result invalidation for this update request. 
     * @param {module:api/DocumentApi~updateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResultObject}
     */
    updateDocument(xFrankieCustomerID, documentId, document, opts, callback) {
      opts = opts || {};
      let postBody = document;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateDocument");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling updateDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        'noInvalidate': opts['noInvalidate']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScanDocument operation.
     * @callback module:api/DocumentApi~updateScanDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentScanResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update and OCR Scan Document
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating OCR processing proceedures immediately. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {module:model/IdentityDocumentObject} document The entity to be optionally updated, then processed. If updating a document, you only need to populate the fields you're actually adding/updating. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~updateScanDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentScanResultObject}
     */
    updateScanDocument(xFrankieCustomerID, documentId, document, opts, callback) {
      opts = opts || {};
      let postBody = document;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateScanDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateScanDocument");
      }
      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling updateScanDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentScanResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVerifyDocument operation.
     * @callback module:api/DocumentApi~updateVerifyDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentVerifyResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update and Verify Document.
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating verification proceedures immediately.  Sends the updated document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {module:model/DocumentVerify} processDocument The document and (possibly) its associated scans to be verified.  There is also an optional entity object (normally stripped back to it's bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty, and is not processed or stored in any way. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~updateVerifyDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentVerifyResultObject}
     */
    updateVerifyDocument(xFrankieCustomerID, documentId, processDocument, opts, callback) {
      opts = opts || {};
      let postBody = processDocument;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateVerifyDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateVerifyDocument");
      }
      // verify the required parameter 'processDocument' is set
      if (processDocument === undefined || processDocument === null) {
        throw new Error("Missing the required parameter 'processDocument' when calling updateVerifyDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentVerifyResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyDocument operation.
     * @callback module:api/DocumentApi~verifyDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentVerifyResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and Verify Document.
     * Send the document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {module:model/DocumentVerify} processDocument The document and (possibly) its associated scans to be verified.  There is also an entity object (normally stripped back to it's bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty/ 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:api/DocumentApi~verifyDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentVerifyResultObject}
     */
    verifyDocument(xFrankieCustomerID, processDocument, opts, callback) {
      opts = opts || {};
      let postBody = processDocument;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling verifyDocument");
      }
      // verify the required parameter 'processDocument' is set
      if (processDocument === undefined || processDocument === null) {
        throw new Error("Missing the required parameter 'processDocument' when calling verifyDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentVerifyResultObject;
      return this.apiClient.callApi(
        '/document/new/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
