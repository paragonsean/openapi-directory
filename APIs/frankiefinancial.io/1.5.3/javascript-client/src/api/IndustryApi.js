/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptedDocumentResultObject from '../model/AcceptedDocumentResultObject';
import DocumentIndustryUtilityConsentResultObject from '../model/DocumentIndustryUtilityConsentResultObject';
import DocumentIndustryUtilityProcessResultObject from '../model/DocumentIndustryUtilityProcessResultObject';
import DocumentIndustryUtilitySwitchResultObject from '../model/DocumentIndustryUtilitySwitchResultObject';
import EICRequest from '../model/EICRequest';
import ErrorObject from '../model/ErrorObject';
import IdentityDocumentObject from '../model/IdentityDocumentObject';
import SwitchRequest from '../model/SwitchRequest';

/**
* Industry service.
* @module api/IndustryApi
* @version 1.5.3
*/
export default class IndustryApi {

    /**
    * Constructs a new IndustryApi. 
    * @alias module:api/IndustryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProcessIndustryUtilityDocument operation.
     * @callback module:api/IndustryApi~createProcessIndustryUtilityDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentIndustryUtilityProcessResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document and Run Utility Price Comparison.
     * Create a document object. This is then processed to extract useful information, just like a normal OCR scan. The service will then push the document through an industry specific comparison process, where the details are used to find a better plan, based on the bill.  100's of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer's energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {Number} [planLimit = 30)] The maximum number of plans to return
     * @param {module:model/IdentityDocumentObject} [document] 
     * @param {module:api/IndustryApi~createProcessIndustryUtilityDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentIndustryUtilityProcessResultObject}
     */
    createProcessIndustryUtilityDocument(xFrankieCustomerID, opts, callback) {
      opts = opts || {};
      let postBody = opts['document'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling createProcessIndustryUtilityDocument");
      }

      let pathParams = {
      };
      let queryParams = {
        'planLimit': opts['planLimit']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentIndustryUtilityProcessResultObject;
      return this.apiClient.callApi(
        '/document/new/utility/process/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessIndustryUtilityDocument operation.
     * @callback module:api/IndustryApi~updateProcessIndustryUtilityDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentIndustryUtilityProcessResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Document and Run Utility Price Comparison.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details or simply request that the document be re-processed through the industry comparison service.   100's of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer's energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {Number} [planLimit = 30)] The maximum number of plans to return
     * @param {module:model/IdentityDocumentObject} [document] 
     * @param {module:api/IndustryApi~updateProcessIndustryUtilityDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentIndustryUtilityProcessResultObject}
     */
    updateProcessIndustryUtilityDocument(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['document'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocument");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
        'planLimit': opts['planLimit']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentIndustryUtilityProcessResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/utility/process/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessIndustryUtilityDocumentConsent operation.
     * @callback module:api/IndustryApi~updateProcessIndustryUtilityDocumentConsentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentIndustryUtilityConsentResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provide Explicit Consent to Switch Utility Plans.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   Before entering into a contract with a new energy retailer, consumers are first obliged to review the retailer's contractual terms and conditions, confirm they understand these terms as well as give explicit, informed consent (EIC) for the switch to occur. This API call retrieves all information        that must be displayed in order for a compliant EIC to be captured from a consumer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:model/EICRequest} [consentRequest] 
     * @param {module:api/IndustryApi~updateProcessIndustryUtilityDocumentConsentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentIndustryUtilityConsentResultObject}
     */
    updateProcessIndustryUtilityDocumentConsent(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['consentRequest'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocumentConsent");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocumentConsent");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentIndustryUtilityConsentResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/utility/process/consent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProcessIndustryUtilityDocumentSwitch operation.
     * @callback module:api/IndustryApi~updateProcessIndustryUtilityDocumentSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentIndustryUtilitySwitchResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Switching of Utility Plan.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   The bill payer has uploaded their current bill, selected a new plan, accepted the terms and conditions and given their consent for the switch to occur. This API call will finalise the switch request and send all the customers data along with the requested plan to the selected retailer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} documentId The documentId returned previously from an earlier call to /check or /entity or /document
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {Number} [xFrankieBackground] If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes 
     * @param {module:model/SwitchRequest} [switchRequest] 
     * @param {module:api/IndustryApi~updateProcessIndustryUtilityDocumentSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentIndustryUtilitySwitchResultObject}
     */
    updateProcessIndustryUtilityDocumentSwitch(xFrankieCustomerID, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['switchRequest'];
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocumentSwitch");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocumentSwitch");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID'],
        'X-Frankie-Background': opts['xFrankieBackground']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentIndustryUtilitySwitchResultObject;
      return this.apiClient.callApi(
        '/document/{documentId}/utility/process/switch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
