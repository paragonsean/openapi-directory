/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorObject from '../model/ErrorObject';
import RetrievedResponseObject from '../model/RetrievedResponseObject';

/**
* Retrieve service.
* @module api/RetrieveApi
* @version 1.5.3
*/
export default class RetrieveApi {

    /**
    * Constructs a new RetrieveApi. 
    * @alias module:api/RetrieveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retrieveResult operation.
     * @callback module:api/RetrieveApi~retrieveResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievedResponseObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Re)retrieve Response Result.
     * If you've received a notification that you previously backgrounded transaction has completed, or you wish to re-retrive a result from an earlier transaction, then you can simply request the result from our encrypted cache  The response will return the original HTTP code, along with the payload that would have been returned in the original request. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} requestId This will be the same RequestId that was sent in the 202 acceptance response. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:model/String} [payload] Specifies the type of the payload field in the retrieved response. Default is 'string'. 
     * @param {module:api/RetrieveApi~retrieveResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievedResponseObject}
     */
    retrieveResult(xFrankieCustomerID, requestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling retrieveResult");
      }
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling retrieveResult");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrievedResponseObject;
      return this.apiClient.callApi(
        '/retrieve/response/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
