/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityResultObject from '../model/EntityResultObject';
import ErrorObject from '../model/ErrorObject';

/**
* Flag service.
* @module api/FlagApi
* @version 1.5.3
*/
export default class FlagApi {

    /**
    * Constructs a new FlagApi. 
    * @alias module:api/FlagApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blacklistEntity operation.
     * @callback module:api/FlagApi~blacklistEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Entity Blacklist State.
     * Mark the entity as blacklisted or not with the '?set=' query parameter as 'true' or 'false'. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} entityId The entityId returned previously from an earlier call to /check or /entity
     * @param {Boolean} set Set the value of an entity flag. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {String} [reason] Set the reason for blacklisting. Valid values are:   - \"NO_REASON_SUPPLIED\"   - \"FABRICATED_IDENTITY\"   - \"IDENTITY_TAKEOVER\"   - \"FALSIFIED_ID_DOCUMENTS\"   - \"STOLEN_ID_DOCUMENTS\"   - \"MERCHANT_FRAUD\"   - \"NEVER_PAY_BUST_OUT\"   - \"CONFLICTING_DATA_PROVIDED\"   - \"MONEY_MULE\"   - \"FALSE_FRAUD_CLAIM\"   - \"FRAUDULENT_3RD_PARTY\"   - \"COMPANY_TAKEOVER\"   - \"FICTITIOUS_EMPLOYER\"   - \"COLLUSIVE_EMPLOYER\"   - \"OVER_VALUATION_OF_ASSETS\"   - \"FALSIFIED_EMPLOYMENT_DETAILS\"   - \"MANIPULATED_IDENTITY\"   - \"SYNDICATED_FRAUD\"   - \"INTERNAL_FRAUD\"   - \"BANK_FRAUD\"   - \"UNDISCLOSED_DATA\"   - \"FALSE_HARDSHIP\"   - \"SMR_REPORT_LODGED\"   - \"2X_SMR_REPORTS_LODGED\" 
     * @param {String} [blockedBy] Specify who is setting the entity as blacklisted. 
     * @param {String} [attribute] Specify the blacklisted attribute. Valid values are:   - \"ENTIRE_PROFILE\"   - \"FULL_NAME\"   - \"EMAIL_ADDRESS\"   - \"PHONE_NUMBER\"   - \"ID_DOCUMENT\"   - \"MAILING_ADDRESS\"   - \"RESIDENTIAL_ADDRESS\"    
     * @param {String} [originalId] Specify the Id of the matching blacklisted entity or single data-point. 
     * @param {module:api/FlagApi~blacklistEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityResultObject}
     */
    blacklistEntity(xFrankieCustomerID, entityId, set, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling blacklistEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling blacklistEntity");
      }
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling blacklistEntity");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
        'set': set,
        'reason': opts['reason'],
        'blockedBy': opts['blockedBy'],
        'attribute': opts['attribute'],
        'originalId': opts['originalId']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityResultObject;
      return this.apiClient.callApi(
        '/entity/{entityId}/flag/blacklist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entityMonitoring operation.
     * @callback module:api/FlagApi~entityMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Entity Ongoing AML Monitoring Status.
     * Mark the entity as being monitored or not with the '?set=' query parameter as 'true' or 'false'. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} entityId The entityId returned previously from an earlier call to /check or /entity
     * @param {Boolean} set Set the value of an entity flag. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:api/FlagApi~entityMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityResultObject}
     */
    entityMonitoring(xFrankieCustomerID, entityId, set, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling entityMonitoring");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling entityMonitoring");
      }
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling entityMonitoring");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
        'set': set
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityResultObject;
      return this.apiClient.callApi(
        '/entity/{entityId}/flag/monitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flagDuplicateEntity operation.
     * @callback module:api/FlagApi~flagDuplicateEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve Duplicate States.
     * Resolve the state of a pair of duplicate entities with the '?set=' query parameter as 'true' or 'false'. Setting duplicate to 'true' will make entityId invisible for most purposes and otherId will continue to function as normal. Setting duplicate to 'false' means the two entities are in fact separate but similar and they will both continue to exist independently but will no longer be identified as duplicates of eachother. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} entityId The entityId returned previously from an earlier call to /check or /entity
     * @param {String} otherId An entityId returned previously from an earlier call to /check or /entity. Used when an operation requires two entityIds
     * @param {Boolean} set Set the value of an entity flag. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {module:api/FlagApi~flagDuplicateEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityResultObject}
     */
    flagDuplicateEntity(xFrankieCustomerID, entityId, otherId, set, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling flagDuplicateEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling flagDuplicateEntity");
      }
      // verify the required parameter 'otherId' is set
      if (otherId === undefined || otherId === null) {
        throw new Error("Missing the required parameter 'otherId' when calling flagDuplicateEntity");
      }
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling flagDuplicateEntity");
      }

      let pathParams = {
        'entityId': entityId,
        'otherId': otherId
      };
      let queryParams = {
        'set': set
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityResultObject;
      return this.apiClient.callApi(
        '/entity/{entityId}/flag/duplicate/{otherId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistEntity operation.
     * @callback module:api/FlagApi~watchlistEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityResultObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Entity Watchlist State.
     * Mark the entity as watchlisted or not with the '?set=' query parameter as 'true' or 'false'. 
     * @param {String} xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time. 
     * @param {String} entityId The entityId returned previously from an earlier call to /check or /entity
     * @param {Boolean} set Set the value of an entity flag. 
     * @param {Object} opts Optional parameters
     * @param {String} [xFrankieCustomerChildID] If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer's Children will not be able to see each other's data.  A Customer can see the documents/entities and checks of all their Children. 
     * @param {String} [reason] Set the reason for watchlisting. Valid values are:  - \"WAS_BLACKLISTED\" 
     * @param {String} [comment] A comment describing the reason for a request. 
     * @param {module:api/FlagApi~watchlistEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityResultObject}
     */
    watchlistEntity(xFrankieCustomerID, entityId, set, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xFrankieCustomerID' is set
      if (xFrankieCustomerID === undefined || xFrankieCustomerID === null) {
        throw new Error("Missing the required parameter 'xFrankieCustomerID' when calling watchlistEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling watchlistEntity");
      }
      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling watchlistEntity");
      }

      let pathParams = {
        'entityId': entityId
      };
      let queryParams = {
        'set': set,
        'reason': opts['reason'],
        'comment': opts['comment']
      };
      let headerParams = {
        'X-Frankie-CustomerID': xFrankieCustomerID,
        'X-Frankie-CustomerChildID': opts['xFrankieCustomerChildID']
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityResultObject;
      return this.apiClient.callApi(
        '/entity/{entityId}/flag/watchlist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
