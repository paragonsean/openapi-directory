/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrganisationCheckResponseObject.h
 *
 * The result of an /business/ownership/query call retrieved via GET /retrieve/response/{requestId} after you receive a notification that the result is ready. 
 */

#ifndef OAIOrganisationCheckResponseObject_H
#define OAIOrganisationCheckResponseObject_H

#include <QJsonObject>

#include "OAIBusinessReportResultObject.h"
#include "OAIEntityFlagObject.h"
#include "OAIErrorObject.h"
#include "OAIOrganisationCheckResultObject.h"
#include "OAIOwnershipQueryResultObject.h"
#include "OAIUBOResponse.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEntityFlagObject;
class OAIOrganisationCheckResultObject;
class OAIErrorObject;
class OAIOwnershipQueryResultObject;
class OAIBusinessReportResultObject;
class OAIUBOResponse;

class OAIOrganisationCheckResponseObject : public OAIObject {
public:
    OAIOrganisationCheckResponseObject();
    OAIOrganisationCheckResponseObject(QString json);
    ~OAIOrganisationCheckResponseObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIEntityFlagObject> getFlags() const;
    void setFlags(const QList<OAIEntityFlagObject> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getOrganisationCheckId() const;
    void setOrganisationCheckId(const QString &organisation_check_id);
    bool is_organisation_check_id_Set() const;
    bool is_organisation_check_id_Valid() const;

    OAIOrganisationCheckResultObject getOrganisationCheckResult() const;
    void setOrganisationCheckResult(const OAIOrganisationCheckResultObject &organisation_check_result);
    bool is_organisation_check_result_Set() const;
    bool is_organisation_check_result_Valid() const;

    QDateTime getOwnershipCheckDate() const;
    void setOwnershipCheckDate(const QDateTime &ownership_check_date);
    bool is_ownership_check_date_Set() const;
    bool is_ownership_check_date_Valid() const;

    QString getOwnershipCheckId() const;
    void setOwnershipCheckId(const QString &ownership_check_id);
    bool is_ownership_check_id_Set() const;
    bool is_ownership_check_id_Valid() const;

    OAIErrorObject getOwnershipQueryError() const;
    void setOwnershipQueryError(const OAIErrorObject &ownership_query_error);
    bool is_ownership_query_error_Set() const;
    bool is_ownership_query_error_Valid() const;

    OAIOwnershipQueryResultObject getOwnershipQueryResult() const;
    void setOwnershipQueryResult(const OAIOwnershipQueryResultObject &ownership_query_result);
    bool is_ownership_query_result_Set() const;
    bool is_ownership_query_result_Valid() const;

    OAIErrorObject getReportError() const;
    void setReportError(const OAIErrorObject &report_error);
    bool is_report_error_Set() const;
    bool is_report_error_Valid() const;

    OAIBusinessReportResultObject getReportResult() const;
    void setReportResult(const OAIBusinessReportResultObject &report_result);
    bool is_report_result_Set() const;
    bool is_report_result_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    OAIUBOResponse getUboResponse() const;
    void setUboResponse(const OAIUBOResponse &ubo_response);
    bool is_ubo_response_Set() const;
    bool is_ubo_response_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIEntityFlagObject> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_organisation_check_id;
    bool m_organisation_check_id_isSet;
    bool m_organisation_check_id_isValid;

    OAIOrganisationCheckResultObject m_organisation_check_result;
    bool m_organisation_check_result_isSet;
    bool m_organisation_check_result_isValid;

    QDateTime m_ownership_check_date;
    bool m_ownership_check_date_isSet;
    bool m_ownership_check_date_isValid;

    QString m_ownership_check_id;
    bool m_ownership_check_id_isSet;
    bool m_ownership_check_id_isValid;

    OAIErrorObject m_ownership_query_error;
    bool m_ownership_query_error_isSet;
    bool m_ownership_query_error_isValid;

    OAIOwnershipQueryResultObject m_ownership_query_result;
    bool m_ownership_query_result_isSet;
    bool m_ownership_query_result_isValid;

    OAIErrorObject m_report_error;
    bool m_report_error_isSet;
    bool m_report_error_isValid;

    OAIBusinessReportResultObject m_report_result;
    bool m_report_result_isSet;
    bool m_report_result_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    OAIUBOResponse m_ubo_response;
    bool m_ubo_response_isSet;
    bool m_ubo_response_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrganisationCheckResponseObject)

#endif // OAIOrganisationCheckResponseObject_H
