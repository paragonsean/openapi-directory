/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUBOResponse.h
 *
 * 
 */

#ifndef OAIUBOResponse_H
#define OAIUBOResponse_H

#include <QJsonObject>

#include "OAIBusinessDetails.h"
#include "OAIIndividualData.h"
#include "OAIIssueListItems.h"
#include "OAINonIndividualBeneficialOwner.h"
#include "OAIScreeningResult.h"
#include "OAISuppliedData.h"
#include "OAISuppliedDataMatches.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBusinessDetails;
class OAIScreeningResult;
class OAIIssueListItems;
class OAINonIndividualBeneficialOwner;
class OAIIndividualData;
class OAISuppliedData;
class OAISuppliedDataMatches;

class OAIUBOResponse : public OAIObject {
public:
    OAIUBOResponse();
    OAIUBOResponse(QString json);
    ~OAIUBOResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAsicSearchTimestamp() const;
    void setAsicSearchTimestamp(const QDateTime &asic_search_timestamp);
    bool is_asic_search_timestamp_Set() const;
    bool is_asic_search_timestamp_Valid() const;

    OAIBusinessDetails getBusinessDetails() const;
    void setBusinessDetails(const OAIBusinessDetails &business_details);
    bool is_business_details_Set() const;
    bool is_business_details_Valid() const;

    OAIScreeningResult getBusinessScreeningResult() const;
    void setBusinessScreeningResult(const OAIScreeningResult &business_screening_result);
    bool is_business_screening_result_Set() const;
    bool is_business_screening_result_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QList<OAIIssueListItems> getIssuesList() const;
    void setIssuesList(const QList<OAIIssueListItems> &issues_list);
    bool is_issues_list_Set() const;
    bool is_issues_list_Valid() const;

    QList<OAINonIndividualBeneficialOwner> getNonIndividualBeneficialOwners() const;
    void setNonIndividualBeneficialOwners(const QList<OAINonIndividualBeneficialOwner> &non_individual_beneficial_owners);
    bool is_non_individual_beneficial_owners_Set() const;
    bool is_non_individual_beneficial_owners_Valid() const;

    QList<OAIIndividualData> getOfficeholders() const;
    void setOfficeholders(const QList<OAIIndividualData> &officeholders);
    bool is_officeholders_Set() const;
    bool is_officeholders_Valid() const;

    OAISuppliedData getSuppliedData() const;
    void setSuppliedData(const OAISuppliedData &supplied_data);
    bool is_supplied_data_Set() const;
    bool is_supplied_data_Valid() const;

    OAISuppliedDataMatches getSuppliedDataMatches() const;
    void setSuppliedDataMatches(const OAISuppliedDataMatches &supplied_data_matches);
    bool is_supplied_data_matches_Set() const;
    bool is_supplied_data_matches_Valid() const;

    QString getUboReport() const;
    void setUboReport(const QString &ubo_report);
    bool is_ubo_report_Set() const;
    bool is_ubo_report_Valid() const;

    QList<OAIIndividualData> getUltimateBeneficialOwners() const;
    void setUltimateBeneficialOwners(const QList<OAIIndividualData> &ultimate_beneficial_owners);
    bool is_ultimate_beneficial_owners_Set() const;
    bool is_ultimate_beneficial_owners_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_asic_search_timestamp;
    bool m_asic_search_timestamp_isSet;
    bool m_asic_search_timestamp_isValid;

    OAIBusinessDetails m_business_details;
    bool m_business_details_isSet;
    bool m_business_details_isValid;

    OAIScreeningResult m_business_screening_result;
    bool m_business_screening_result_isSet;
    bool m_business_screening_result_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QList<OAIIssueListItems> m_issues_list;
    bool m_issues_list_isSet;
    bool m_issues_list_isValid;

    QList<OAINonIndividualBeneficialOwner> m_non_individual_beneficial_owners;
    bool m_non_individual_beneficial_owners_isSet;
    bool m_non_individual_beneficial_owners_isValid;

    QList<OAIIndividualData> m_officeholders;
    bool m_officeholders_isSet;
    bool m_officeholders_isValid;

    OAISuppliedData m_supplied_data;
    bool m_supplied_data_isSet;
    bool m_supplied_data_isValid;

    OAISuppliedDataMatches m_supplied_data_matches;
    bool m_supplied_data_matches_isSet;
    bool m_supplied_data_matches_isValid;

    QString m_ubo_report;
    bool m_ubo_report_isSet;
    bool m_ubo_report_isValid;

    QList<OAIIndividualData> m_ultimate_beneficial_owners;
    bool m_ultimate_beneficial_owners_isSet;
    bool m_ultimate_beneficial_owners_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUBOResponse)

#endif // OAIUBOResponse_H
