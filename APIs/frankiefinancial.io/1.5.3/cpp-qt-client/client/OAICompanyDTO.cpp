/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyDTO::OAICompanyDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyDTO::OAICompanyDTO() {
    this->initializeModel();
}

OAICompanyDTO::~OAICompanyDTO() {}

void OAICompanyDTO::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_legal_form_isSet = false;
    m_legal_form_isValid = false;

    m_legal_status_isSet = false;
    m_legal_status_isValid = false;

    m_more_key_isSet = false;
    m_more_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_official_isSet = false;
    m_official_isValid = false;

    m_registration_authority_isSet = false;
    m_registration_authority_isValid = false;

    m_registration_authority_code_isSet = false;
    m_registration_authority_code_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_virtual_id_isSet = false;
    m_virtual_id_isValid = false;
}

void OAICompanyDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyDTO::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("Addresses")]);
    m_addresses_isSet = !json[QString("Addresses")].isNull() && m_addresses_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("CompanyID")]);
    m_company_id_isSet = !json[QString("CompanyID")].isNull() && m_company_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("Function")]);
    m_function_isSet = !json[QString("Function")].isNull() && m_function_isValid;

    m_legal_form_isValid = ::OpenAPI::fromJsonValue(m_legal_form, json[QString("LegalForm")]);
    m_legal_form_isSet = !json[QString("LegalForm")].isNull() && m_legal_form_isValid;

    m_legal_status_isValid = ::OpenAPI::fromJsonValue(m_legal_status, json[QString("LegalStatus")]);
    m_legal_status_isSet = !json[QString("LegalStatus")].isNull() && m_legal_status_isValid;

    m_more_key_isValid = ::OpenAPI::fromJsonValue(m_more_key, json[QString("MoreKey")]);
    m_more_key_isSet = !json[QString("MoreKey")].isNull() && m_more_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_official_isValid = ::OpenAPI::fromJsonValue(m_official, json[QString("Official")]);
    m_official_isSet = !json[QString("Official")].isNull() && m_official_isValid;

    m_registration_authority_isValid = ::OpenAPI::fromJsonValue(m_registration_authority, json[QString("RegistrationAuthority")]);
    m_registration_authority_isSet = !json[QString("RegistrationAuthority")].isNull() && m_registration_authority_isValid;

    m_registration_authority_code_isValid = ::OpenAPI::fromJsonValue(m_registration_authority_code, json[QString("RegistrationAuthorityCode")]);
    m_registration_authority_code_isSet = !json[QString("RegistrationAuthorityCode")].isNull() && m_registration_authority_code_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_virtual_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_id, json[QString("VirtualID")]);
    m_virtual_id_isSet = !json[QString("VirtualID")].isNull() && m_virtual_id_isValid;
}

QString OAICompanyDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.isSet()) {
        obj.insert(QString("Addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("CompanyID"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_function_isSet) {
        obj.insert(QString("Function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_legal_form_isSet) {
        obj.insert(QString("LegalForm"), ::OpenAPI::toJsonValue(m_legal_form));
    }
    if (m_legal_status_isSet) {
        obj.insert(QString("LegalStatus"), ::OpenAPI::toJsonValue(m_legal_status));
    }
    if (m_more_key_isSet) {
        obj.insert(QString("MoreKey"), ::OpenAPI::toJsonValue(m_more_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_official_isSet) {
        obj.insert(QString("Official"), ::OpenAPI::toJsonValue(m_official));
    }
    if (m_registration_authority_isSet) {
        obj.insert(QString("RegistrationAuthority"), ::OpenAPI::toJsonValue(m_registration_authority));
    }
    if (m_registration_authority_code_isSet) {
        obj.insert(QString("RegistrationAuthorityCode"), ::OpenAPI::toJsonValue(m_registration_authority_code));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_virtual_id_isSet) {
        obj.insert(QString("VirtualID"), ::OpenAPI::toJsonValue(m_virtual_id));
    }
    return obj;
}

OAIArrayOfAddressDTO OAICompanyDTO::getAddresses() const {
    return m_addresses;
}
void OAICompanyDTO::setAddresses(const OAIArrayOfAddressDTO &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAICompanyDTO::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAICompanyDTO::is_addresses_Valid() const{
    return m_addresses_isValid;
}

OAIArrayOfString OAICompanyDTO::getAliases() const {
    return m_aliases;
}
void OAICompanyDTO::setAliases(const OAIArrayOfString &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAICompanyDTO::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAICompanyDTO::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAICompanyDTO::getCode() const {
    return m_code;
}
void OAICompanyDTO::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICompanyDTO::is_code_Set() const{
    return m_code_isSet;
}

bool OAICompanyDTO::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICompanyDTO::getCompanyId() const {
    return m_company_id;
}
void OAICompanyDTO::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompanyDTO::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompanyDTO::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAICompanyDTO::getDate() const {
    return m_date;
}
void OAICompanyDTO::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICompanyDTO::is_date_Set() const{
    return m_date_isSet;
}

bool OAICompanyDTO::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICompanyDTO::getFunction() const {
    return m_function;
}
void OAICompanyDTO::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAICompanyDTO::is_function_Set() const{
    return m_function_isSet;
}

bool OAICompanyDTO::is_function_Valid() const{
    return m_function_isValid;
}

QString OAICompanyDTO::getLegalForm() const {
    return m_legal_form;
}
void OAICompanyDTO::setLegalForm(const QString &legal_form) {
    m_legal_form = legal_form;
    m_legal_form_isSet = true;
}

bool OAICompanyDTO::is_legal_form_Set() const{
    return m_legal_form_isSet;
}

bool OAICompanyDTO::is_legal_form_Valid() const{
    return m_legal_form_isValid;
}

QString OAICompanyDTO::getLegalStatus() const {
    return m_legal_status;
}
void OAICompanyDTO::setLegalStatus(const QString &legal_status) {
    m_legal_status = legal_status;
    m_legal_status_isSet = true;
}

bool OAICompanyDTO::is_legal_status_Set() const{
    return m_legal_status_isSet;
}

bool OAICompanyDTO::is_legal_status_Valid() const{
    return m_legal_status_isValid;
}

QString OAICompanyDTO::getMoreKey() const {
    return m_more_key;
}
void OAICompanyDTO::setMoreKey(const QString &more_key) {
    m_more_key = more_key;
    m_more_key_isSet = true;
}

bool OAICompanyDTO::is_more_key_Set() const{
    return m_more_key_isSet;
}

bool OAICompanyDTO::is_more_key_Valid() const{
    return m_more_key_isValid;
}

QString OAICompanyDTO::getName() const {
    return m_name;
}
void OAICompanyDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompanyDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompanyDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICompanyDTO::isOfficial() const {
    return m_official;
}
void OAICompanyDTO::setOfficial(const bool &official) {
    m_official = official;
    m_official_isSet = true;
}

bool OAICompanyDTO::is_official_Set() const{
    return m_official_isSet;
}

bool OAICompanyDTO::is_official_Valid() const{
    return m_official_isValid;
}

QString OAICompanyDTO::getRegistrationAuthority() const {
    return m_registration_authority;
}
void OAICompanyDTO::setRegistrationAuthority(const QString &registration_authority) {
    m_registration_authority = registration_authority;
    m_registration_authority_isSet = true;
}

bool OAICompanyDTO::is_registration_authority_Set() const{
    return m_registration_authority_isSet;
}

bool OAICompanyDTO::is_registration_authority_Valid() const{
    return m_registration_authority_isValid;
}

QString OAICompanyDTO::getRegistrationAuthorityCode() const {
    return m_registration_authority_code;
}
void OAICompanyDTO::setRegistrationAuthorityCode(const QString &registration_authority_code) {
    m_registration_authority_code = registration_authority_code;
    m_registration_authority_code_isSet = true;
}

bool OAICompanyDTO::is_registration_authority_code_Set() const{
    return m_registration_authority_code_isSet;
}

bool OAICompanyDTO::is_registration_authority_code_Valid() const{
    return m_registration_authority_code_isValid;
}

QString OAICompanyDTO::getSource() const {
    return m_source;
}
void OAICompanyDTO::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICompanyDTO::is_source_Set() const{
    return m_source_isSet;
}

bool OAICompanyDTO::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICompanyDTO::getVirtualId() const {
    return m_virtual_id;
}
void OAICompanyDTO::setVirtualId(const QString &virtual_id) {
    m_virtual_id = virtual_id;
    m_virtual_id_isSet = true;
}

bool OAICompanyDTO::is_virtual_id_Set() const{
    return m_virtual_id_isSet;
}

bool OAICompanyDTO::is_virtual_id_Valid() const{
    return m_virtual_id_isValid;
}

bool OAICompanyDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_authority_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
