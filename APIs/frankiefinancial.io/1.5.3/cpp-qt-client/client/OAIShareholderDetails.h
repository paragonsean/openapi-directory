/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShareholderDetails.h
 *
 * 
 */

#ifndef OAIShareholderDetails_H
#define OAIShareholderDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIShareholderDetails : public OAIObject {
public:
    OAIShareholderDetails();
    OAIShareholderDetails(QString json);
    ~OAIShareholderDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getAllInfo() const;
    void setAllInfo(const QString &all_info);
    bool is_all_info_Set() const;
    bool is_all_info_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNationality() const;
    void setNationality(const QString &nationality);
    bool is_nationality_Set() const;
    bool is_nationality_Valid() const;

    QString getNominalValue() const;
    void setNominalValue(const QString &nominal_value);
    bool is_nominal_value_Set() const;
    bool is_nominal_value_Valid() const;

    QString getPercentage() const;
    void setPercentage(const QString &percentage);
    bool is_percentage_Set() const;
    bool is_percentage_Valid() const;

    QString getShareClass() const;
    void setShareClass(const QString &share_class);
    bool is_share_class_Set() const;
    bool is_share_class_Valid() const;

    qint64 getShareCount() const;
    void setShareCount(const qint64 &share_count);
    bool is_share_count_Set() const;
    bool is_share_count_Valid() const;

    QString getShareType() const;
    void setShareType(const QString &share_type);
    bool is_share_type_Set() const;
    bool is_share_type_Valid() const;

    QString getShareholderType() const;
    void setShareholderType(const QString &shareholder_type);
    bool is_shareholder_type_Set() const;
    bool is_shareholder_type_Valid() const;

    qint64 getTotalShareCount() const;
    void setTotalShareCount(const qint64 &total_share_count);
    bool is_total_share_count_Set() const;
    bool is_total_share_count_Valid() const;

    qint64 getTotalShareValue() const;
    void setTotalShareValue(const qint64 &total_share_value);
    bool is_total_share_value_Set() const;
    bool is_total_share_value_Valid() const;

    qint64 getTotalShares() const;
    void setTotalShares(const qint64 &total_shares);
    bool is_total_shares_Set() const;
    bool is_total_shares_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_all_info;
    bool m_all_info_isSet;
    bool m_all_info_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_nationality;
    bool m_nationality_isSet;
    bool m_nationality_isValid;

    QString m_nominal_value;
    bool m_nominal_value_isSet;
    bool m_nominal_value_isValid;

    QString m_percentage;
    bool m_percentage_isSet;
    bool m_percentage_isValid;

    QString m_share_class;
    bool m_share_class_isSet;
    bool m_share_class_isValid;

    qint64 m_share_count;
    bool m_share_count_isSet;
    bool m_share_count_isValid;

    QString m_share_type;
    bool m_share_type_isSet;
    bool m_share_type_isValid;

    QString m_shareholder_type;
    bool m_shareholder_type_isSet;
    bool m_shareholder_type_isValid;

    qint64 m_total_share_count;
    bool m_total_share_count_isSet;
    bool m_total_share_count_isValid;

    qint64 m_total_share_value;
    bool m_total_share_value_isSet;
    bool m_total_share_value_isValid;

    qint64 m_total_shares;
    bool m_total_shares_isSet;
    bool m_total_shares_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShareholderDetails)

#endif // OAIShareholderDetails_H
