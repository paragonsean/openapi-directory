/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriod::OAIPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriod::OAIPeriod() {
    this->initializeModel();
}

OAIPeriod::~OAIPeriod() {}

void OAIPeriod::initializeModel() {

    m_controlled_load1_isSet = false;
    m_controlled_load1_isValid = false;

    m_controlled_load2_isSet = false;
    m_controlled_load2_isValid = false;

    m_off_peak_isSet = false;
    m_off_peak_isValid = false;

    m_off_peak_step1_isSet = false;
    m_off_peak_step1_isValid = false;

    m_off_peak_step2_isSet = false;
    m_off_peak_step2_isValid = false;

    m_peak_isSet = false;
    m_peak_isValid = false;

    m_peak_step1_isSet = false;
    m_peak_step1_isValid = false;

    m_peak_step2_isSet = false;
    m_peak_step2_isValid = false;

    m_peak_step3_isSet = false;
    m_peak_step3_isValid = false;

    m_shoulder_isSet = false;
    m_shoulder_isValid = false;

    m_supply_charge_isSet = false;
    m_supply_charge_isValid = false;
}

void OAIPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriod::fromJsonObject(QJsonObject json) {

    m_controlled_load1_isValid = ::OpenAPI::fromJsonValue(m_controlled_load1, json[QString("controlledLoad1")]);
    m_controlled_load1_isSet = !json[QString("controlledLoad1")].isNull() && m_controlled_load1_isValid;

    m_controlled_load2_isValid = ::OpenAPI::fromJsonValue(m_controlled_load2, json[QString("controlledLoad2")]);
    m_controlled_load2_isSet = !json[QString("controlledLoad2")].isNull() && m_controlled_load2_isValid;

    m_off_peak_isValid = ::OpenAPI::fromJsonValue(m_off_peak, json[QString("offPeak")]);
    m_off_peak_isSet = !json[QString("offPeak")].isNull() && m_off_peak_isValid;

    m_off_peak_step1_isValid = ::OpenAPI::fromJsonValue(m_off_peak_step1, json[QString("offPeakStep1")]);
    m_off_peak_step1_isSet = !json[QString("offPeakStep1")].isNull() && m_off_peak_step1_isValid;

    m_off_peak_step2_isValid = ::OpenAPI::fromJsonValue(m_off_peak_step2, json[QString("offPeakStep2")]);
    m_off_peak_step2_isSet = !json[QString("offPeakStep2")].isNull() && m_off_peak_step2_isValid;

    m_peak_isValid = ::OpenAPI::fromJsonValue(m_peak, json[QString("peak")]);
    m_peak_isSet = !json[QString("peak")].isNull() && m_peak_isValid;

    m_peak_step1_isValid = ::OpenAPI::fromJsonValue(m_peak_step1, json[QString("peakStep1")]);
    m_peak_step1_isSet = !json[QString("peakStep1")].isNull() && m_peak_step1_isValid;

    m_peak_step2_isValid = ::OpenAPI::fromJsonValue(m_peak_step2, json[QString("peakStep2")]);
    m_peak_step2_isSet = !json[QString("peakStep2")].isNull() && m_peak_step2_isValid;

    m_peak_step3_isValid = ::OpenAPI::fromJsonValue(m_peak_step3, json[QString("peakStep3")]);
    m_peak_step3_isSet = !json[QString("peakStep3")].isNull() && m_peak_step3_isValid;

    m_shoulder_isValid = ::OpenAPI::fromJsonValue(m_shoulder, json[QString("shoulder")]);
    m_shoulder_isSet = !json[QString("shoulder")].isNull() && m_shoulder_isValid;

    m_supply_charge_isValid = ::OpenAPI::fromJsonValue(m_supply_charge, json[QString("supplyCharge")]);
    m_supply_charge_isSet = !json[QString("supplyCharge")].isNull() && m_supply_charge_isValid;
}

QString OAIPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_controlled_load1.isSet()) {
        obj.insert(QString("controlledLoad1"), ::OpenAPI::toJsonValue(m_controlled_load1));
    }
    if (m_controlled_load2.isSet()) {
        obj.insert(QString("controlledLoad2"), ::OpenAPI::toJsonValue(m_controlled_load2));
    }
    if (m_off_peak.isSet()) {
        obj.insert(QString("offPeak"), ::OpenAPI::toJsonValue(m_off_peak));
    }
    if (m_off_peak_step1.isSet()) {
        obj.insert(QString("offPeakStep1"), ::OpenAPI::toJsonValue(m_off_peak_step1));
    }
    if (m_off_peak_step2.isSet()) {
        obj.insert(QString("offPeakStep2"), ::OpenAPI::toJsonValue(m_off_peak_step2));
    }
    if (m_peak.isSet()) {
        obj.insert(QString("peak"), ::OpenAPI::toJsonValue(m_peak));
    }
    if (m_peak_step1.isSet()) {
        obj.insert(QString("peakStep1"), ::OpenAPI::toJsonValue(m_peak_step1));
    }
    if (m_peak_step2.isSet()) {
        obj.insert(QString("peakStep2"), ::OpenAPI::toJsonValue(m_peak_step2));
    }
    if (m_peak_step3.isSet()) {
        obj.insert(QString("peakStep3"), ::OpenAPI::toJsonValue(m_peak_step3));
    }
    if (m_shoulder.isSet()) {
        obj.insert(QString("shoulder"), ::OpenAPI::toJsonValue(m_shoulder));
    }
    if (m_supply_charge.isSet()) {
        obj.insert(QString("supplyCharge"), ::OpenAPI::toJsonValue(m_supply_charge));
    }
    return obj;
}

OAIRateValue OAIPeriod::getControlledLoad1() const {
    return m_controlled_load1;
}
void OAIPeriod::setControlledLoad1(const OAIRateValue &controlled_load1) {
    m_controlled_load1 = controlled_load1;
    m_controlled_load1_isSet = true;
}

bool OAIPeriod::is_controlled_load1_Set() const{
    return m_controlled_load1_isSet;
}

bool OAIPeriod::is_controlled_load1_Valid() const{
    return m_controlled_load1_isValid;
}

OAIRateValue OAIPeriod::getControlledLoad2() const {
    return m_controlled_load2;
}
void OAIPeriod::setControlledLoad2(const OAIRateValue &controlled_load2) {
    m_controlled_load2 = controlled_load2;
    m_controlled_load2_isSet = true;
}

bool OAIPeriod::is_controlled_load2_Set() const{
    return m_controlled_load2_isSet;
}

bool OAIPeriod::is_controlled_load2_Valid() const{
    return m_controlled_load2_isValid;
}

OAIRateValue OAIPeriod::getOffPeak() const {
    return m_off_peak;
}
void OAIPeriod::setOffPeak(const OAIRateValue &off_peak) {
    m_off_peak = off_peak;
    m_off_peak_isSet = true;
}

bool OAIPeriod::is_off_peak_Set() const{
    return m_off_peak_isSet;
}

bool OAIPeriod::is_off_peak_Valid() const{
    return m_off_peak_isValid;
}

OAIRateValue OAIPeriod::getOffPeakStep1() const {
    return m_off_peak_step1;
}
void OAIPeriod::setOffPeakStep1(const OAIRateValue &off_peak_step1) {
    m_off_peak_step1 = off_peak_step1;
    m_off_peak_step1_isSet = true;
}

bool OAIPeriod::is_off_peak_step1_Set() const{
    return m_off_peak_step1_isSet;
}

bool OAIPeriod::is_off_peak_step1_Valid() const{
    return m_off_peak_step1_isValid;
}

OAIRateValue OAIPeriod::getOffPeakStep2() const {
    return m_off_peak_step2;
}
void OAIPeriod::setOffPeakStep2(const OAIRateValue &off_peak_step2) {
    m_off_peak_step2 = off_peak_step2;
    m_off_peak_step2_isSet = true;
}

bool OAIPeriod::is_off_peak_step2_Set() const{
    return m_off_peak_step2_isSet;
}

bool OAIPeriod::is_off_peak_step2_Valid() const{
    return m_off_peak_step2_isValid;
}

OAIRateValue OAIPeriod::getPeak() const {
    return m_peak;
}
void OAIPeriod::setPeak(const OAIRateValue &peak) {
    m_peak = peak;
    m_peak_isSet = true;
}

bool OAIPeriod::is_peak_Set() const{
    return m_peak_isSet;
}

bool OAIPeriod::is_peak_Valid() const{
    return m_peak_isValid;
}

OAIRateValue OAIPeriod::getPeakStep1() const {
    return m_peak_step1;
}
void OAIPeriod::setPeakStep1(const OAIRateValue &peak_step1) {
    m_peak_step1 = peak_step1;
    m_peak_step1_isSet = true;
}

bool OAIPeriod::is_peak_step1_Set() const{
    return m_peak_step1_isSet;
}

bool OAIPeriod::is_peak_step1_Valid() const{
    return m_peak_step1_isValid;
}

OAIRateValue OAIPeriod::getPeakStep2() const {
    return m_peak_step2;
}
void OAIPeriod::setPeakStep2(const OAIRateValue &peak_step2) {
    m_peak_step2 = peak_step2;
    m_peak_step2_isSet = true;
}

bool OAIPeriod::is_peak_step2_Set() const{
    return m_peak_step2_isSet;
}

bool OAIPeriod::is_peak_step2_Valid() const{
    return m_peak_step2_isValid;
}

OAIRateValue OAIPeriod::getPeakStep3() const {
    return m_peak_step3;
}
void OAIPeriod::setPeakStep3(const OAIRateValue &peak_step3) {
    m_peak_step3 = peak_step3;
    m_peak_step3_isSet = true;
}

bool OAIPeriod::is_peak_step3_Set() const{
    return m_peak_step3_isSet;
}

bool OAIPeriod::is_peak_step3_Valid() const{
    return m_peak_step3_isValid;
}

OAIRateValue OAIPeriod::getShoulder() const {
    return m_shoulder;
}
void OAIPeriod::setShoulder(const OAIRateValue &shoulder) {
    m_shoulder = shoulder;
    m_shoulder_isSet = true;
}

bool OAIPeriod::is_shoulder_Set() const{
    return m_shoulder_isSet;
}

bool OAIPeriod::is_shoulder_Valid() const{
    return m_shoulder_isValid;
}

OAIRateValue OAIPeriod::getSupplyCharge() const {
    return m_supply_charge;
}
void OAIPeriod::setSupplyCharge(const OAIRateValue &supply_charge) {
    m_supply_charge = supply_charge;
    m_supply_charge_isSet = true;
}

bool OAIPeriod::is_supply_charge_Set() const{
    return m_supply_charge_isSet;
}

bool OAIPeriod::is_supply_charge_Valid() const{
    return m_supply_charge_isValid;
}

bool OAIPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controlled_load1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlled_load2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_peak.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_peak_step1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_peak_step2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_step1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_step2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_step3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shoulder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_charge.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
