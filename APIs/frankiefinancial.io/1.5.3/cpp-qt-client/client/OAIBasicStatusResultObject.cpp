/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicStatusResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicStatusResultObject::OAIBasicStatusResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicStatusResultObject::OAIBasicStatusResultObject() {
    this->initializeModel();
}

OAIBasicStatusResultObject::~OAIBasicStatusResultObject() {}

void OAIBasicStatusResultObject::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_msg_isSet = false;
    m_status_msg_isValid = false;
}

void OAIBasicStatusResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicStatusResultObject::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_status_msg_isValid = ::OpenAPI::fromJsonValue(m_status_msg, json[QString("statusMsg")]);
    m_status_msg_isSet = !json[QString("statusMsg")].isNull() && m_status_msg_isValid;
}

QString OAIBasicStatusResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicStatusResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_msg_isSet) {
        obj.insert(QString("statusMsg"), ::OpenAPI::toJsonValue(m_status_msg));
    }
    return obj;
}

QString OAIBasicStatusResultObject::getRequestId() const {
    return m_request_id;
}
void OAIBasicStatusResultObject::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIBasicStatusResultObject::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIBasicStatusResultObject::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIBasicStatusResultObject::getStatusMsg() const {
    return m_status_msg;
}
void OAIBasicStatusResultObject::setStatusMsg(const QString &status_msg) {
    m_status_msg = status_msg;
    m_status_msg_isSet = true;
}

bool OAIBasicStatusResultObject::is_status_msg_Set() const{
    return m_status_msg_isSet;
}

bool OAIBasicStatusResultObject::is_status_msg_Valid() const{
    return m_status_msg_isValid;
}

bool OAIBasicStatusResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_msg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicStatusResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_status_msg_isValid && true;
}

} // namespace OpenAPI
