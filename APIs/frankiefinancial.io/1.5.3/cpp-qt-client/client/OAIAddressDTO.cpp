/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressDTO::OAIAddressDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressDTO::OAIAddressDTO() {
    this->initializeModel();
}

OAIAddressDTO::~OAIAddressDTO() {}

void OAIAddressDTO::initializeModel() {

    m_address_in_one_line_isSet = false;
    m_address_in_one_line_isValid = false;

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_address_line4_isSet = false;
    m_address_line4_isValid = false;

    m_address_line5_isSet = false;
    m_address_line5_isValid = false;

    m_city_town_isSet = false;
    m_city_town_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_number_isSet = false;
    m_fax_number_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_region_state_isSet = false;
    m_region_state_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_code_isSet = false;
    m_type_code_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIAddressDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressDTO::fromJsonObject(QJsonObject json) {

    m_address_in_one_line_isValid = ::OpenAPI::fromJsonValue(m_address_in_one_line, json[QString("AddressInOneLine")]);
    m_address_in_one_line_isSet = !json[QString("AddressInOneLine")].isNull() && m_address_in_one_line_isValid;

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("AddressLine1")]);
    m_address_line1_isSet = !json[QString("AddressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("AddressLine2")]);
    m_address_line2_isSet = !json[QString("AddressLine2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("AddressLine3")]);
    m_address_line3_isSet = !json[QString("AddressLine3")].isNull() && m_address_line3_isValid;

    m_address_line4_isValid = ::OpenAPI::fromJsonValue(m_address_line4, json[QString("AddressLine4")]);
    m_address_line4_isSet = !json[QString("AddressLine4")].isNull() && m_address_line4_isValid;

    m_address_line5_isValid = ::OpenAPI::fromJsonValue(m_address_line5, json[QString("AddressLine5")]);
    m_address_line5_isSet = !json[QString("AddressLine5")].isNull() && m_address_line5_isValid;

    m_city_town_isValid = ::OpenAPI::fromJsonValue(m_city_town, json[QString("CityTown")]);
    m_city_town_isSet = !json[QString("CityTown")].isNull() && m_city_town_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_fax_number_isValid = ::OpenAPI::fromJsonValue(m_fax_number, json[QString("FaxNumber")]);
    m_fax_number_isSet = !json[QString("FaxNumber")].isNull() && m_fax_number_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("Line")]);
    m_line_isSet = !json[QString("Line")].isNull() && m_line_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("Postcode")]);
    m_postcode_isSet = !json[QString("Postcode")].isNull() && m_postcode_isValid;

    m_region_state_isValid = ::OpenAPI::fromJsonValue(m_region_state, json[QString("RegionState")]);
    m_region_state_isSet = !json[QString("RegionState")].isNull() && m_region_state_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("TelephoneNumber")]);
    m_telephone_number_isSet = !json[QString("TelephoneNumber")].isNull() && m_telephone_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_code_isValid = ::OpenAPI::fromJsonValue(m_type_code, json[QString("TypeCode")]);
    m_type_code_isSet = !json[QString("TypeCode")].isNull() && m_type_code_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("WebsiteUrl")]);
    m_website_url_isSet = !json[QString("WebsiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIAddressDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_address_in_one_line_isSet) {
        obj.insert(QString("AddressInOneLine"), ::OpenAPI::toJsonValue(m_address_in_one_line));
    }
    if (m_address_line1_isSet) {
        obj.insert(QString("AddressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("AddressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3_isSet) {
        obj.insert(QString("AddressLine3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_address_line4_isSet) {
        obj.insert(QString("AddressLine4"), ::OpenAPI::toJsonValue(m_address_line4));
    }
    if (m_address_line5_isSet) {
        obj.insert(QString("AddressLine5"), ::OpenAPI::toJsonValue(m_address_line5));
    }
    if (m_city_town_isSet) {
        obj.insert(QString("CityTown"), ::OpenAPI::toJsonValue(m_city_town));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_number_isSet) {
        obj.insert(QString("FaxNumber"), ::OpenAPI::toJsonValue(m_fax_number));
    }
    if (m_line.isSet()) {
        obj.insert(QString("Line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("Postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_region_state_isSet) {
        obj.insert(QString("RegionState"), ::OpenAPI::toJsonValue(m_region_state));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("TelephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_code_isSet) {
        obj.insert(QString("TypeCode"), ::OpenAPI::toJsonValue(m_type_code));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("WebsiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIAddressDTO::getAddressInOneLine() const {
    return m_address_in_one_line;
}
void OAIAddressDTO::setAddressInOneLine(const QString &address_in_one_line) {
    m_address_in_one_line = address_in_one_line;
    m_address_in_one_line_isSet = true;
}

bool OAIAddressDTO::is_address_in_one_line_Set() const{
    return m_address_in_one_line_isSet;
}

bool OAIAddressDTO::is_address_in_one_line_Valid() const{
    return m_address_in_one_line_isValid;
}

QString OAIAddressDTO::getAddressLine1() const {
    return m_address_line1;
}
void OAIAddressDTO::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIAddressDTO::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIAddressDTO::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIAddressDTO::getAddressLine2() const {
    return m_address_line2;
}
void OAIAddressDTO::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIAddressDTO::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIAddressDTO::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIAddressDTO::getAddressLine3() const {
    return m_address_line3;
}
void OAIAddressDTO::setAddressLine3(const QString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAIAddressDTO::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAIAddressDTO::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

QString OAIAddressDTO::getAddressLine4() const {
    return m_address_line4;
}
void OAIAddressDTO::setAddressLine4(const QString &address_line4) {
    m_address_line4 = address_line4;
    m_address_line4_isSet = true;
}

bool OAIAddressDTO::is_address_line4_Set() const{
    return m_address_line4_isSet;
}

bool OAIAddressDTO::is_address_line4_Valid() const{
    return m_address_line4_isValid;
}

QString OAIAddressDTO::getAddressLine5() const {
    return m_address_line5;
}
void OAIAddressDTO::setAddressLine5(const QString &address_line5) {
    m_address_line5 = address_line5;
    m_address_line5_isSet = true;
}

bool OAIAddressDTO::is_address_line5_Set() const{
    return m_address_line5_isSet;
}

bool OAIAddressDTO::is_address_line5_Valid() const{
    return m_address_line5_isValid;
}

QString OAIAddressDTO::getCityTown() const {
    return m_city_town;
}
void OAIAddressDTO::setCityTown(const QString &city_town) {
    m_city_town = city_town;
    m_city_town_isSet = true;
}

bool OAIAddressDTO::is_city_town_Set() const{
    return m_city_town_isSet;
}

bool OAIAddressDTO::is_city_town_Valid() const{
    return m_city_town_isValid;
}

QString OAIAddressDTO::getCountry() const {
    return m_country;
}
void OAIAddressDTO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddressDTO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddressDTO::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddressDTO::getEmail() const {
    return m_email;
}
void OAIAddressDTO::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAddressDTO::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAddressDTO::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAddressDTO::getFaxNumber() const {
    return m_fax_number;
}
void OAIAddressDTO::setFaxNumber(const QString &fax_number) {
    m_fax_number = fax_number;
    m_fax_number_isSet = true;
}

bool OAIAddressDTO::is_fax_number_Set() const{
    return m_fax_number_isSet;
}

bool OAIAddressDTO::is_fax_number_Valid() const{
    return m_fax_number_isValid;
}

OAIArrayOfAddressLineDTO OAIAddressDTO::getLine() const {
    return m_line;
}
void OAIAddressDTO::setLine(const OAIArrayOfAddressLineDTO &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIAddressDTO::is_line_Set() const{
    return m_line_isSet;
}

bool OAIAddressDTO::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIAddressDTO::getPostcode() const {
    return m_postcode;
}
void OAIAddressDTO::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIAddressDTO::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIAddressDTO::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIAddressDTO::getRegionState() const {
    return m_region_state;
}
void OAIAddressDTO::setRegionState(const QString &region_state) {
    m_region_state = region_state;
    m_region_state_isSet = true;
}

bool OAIAddressDTO::is_region_state_Set() const{
    return m_region_state_isSet;
}

bool OAIAddressDTO::is_region_state_Valid() const{
    return m_region_state_isValid;
}

QString OAIAddressDTO::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIAddressDTO::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIAddressDTO::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIAddressDTO::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

QString OAIAddressDTO::getType() const {
    return m_type;
}
void OAIAddressDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddressDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddressDTO::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAddressDTO::getTypeCode() const {
    return m_type_code;
}
void OAIAddressDTO::setTypeCode(const QString &type_code) {
    m_type_code = type_code;
    m_type_code_isSet = true;
}

bool OAIAddressDTO::is_type_code_Set() const{
    return m_type_code_isSet;
}

bool OAIAddressDTO::is_type_code_Valid() const{
    return m_type_code_isValid;
}

QString OAIAddressDTO::getWebsiteUrl() const {
    return m_website_url;
}
void OAIAddressDTO::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIAddressDTO::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIAddressDTO::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIAddressDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_in_one_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_town_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
