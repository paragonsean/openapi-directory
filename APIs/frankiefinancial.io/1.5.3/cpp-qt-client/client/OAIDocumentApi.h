/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentApi_H
#define OAI_OAIDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptedDocumentResultObject.h"
#include "OAIBasicStatusResultObject.h"
#include "OAIComparisonSet.h"
#include "OAIDocumentChecksResultObject.h"
#include "OAIDocumentCompareResultObject.h"
#include "OAIDocumentResultObject.h"
#include "OAIDocumentScanResultObject.h"
#include "OAIDocumentSearchResultObject.h"
#include "OAIDocumentVerify.h"
#include "OAIDocumentVerifyResultObject.h"
#include "OAIErrorObject.h"
#include "OAIIdentityDocumentObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentApi(const int timeOut = 0);
    ~OAIDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  comparison_set OAIComparisonSet [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void compareDocument(const QString &x_frankie_customer_id, const OAIComparisonSet &comparison_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  document OAIIdentityDocumentObject [optional]
    */
    virtual void createDocument(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document = ::OpenAPI::OptionalParam<OAIIdentityDocumentObject>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  document OAIIdentityDocumentObject [optional]
    */
    virtual void createScanDocument(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document = ::OpenAPI::OptionalParam<OAIIdentityDocumentObject>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void deleteDocument(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void queryDocument(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void queryDocumentChecks(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void queryDocumentFull(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  search_document OAIIdentityDocumentObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void searchDocument(const QString &x_frankie_customer_id, const OAIIdentityDocumentObject &search_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  comparison_set OAIComparisonSet [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void updateCompareDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIComparisonSet &comparison_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  document OAIIdentityDocumentObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  no_invalidate bool [optional]
    */
    virtual void updateDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIIdentityDocumentObject &document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &no_invalidate = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  document OAIIdentityDocumentObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void updateScanDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIIdentityDocumentObject &document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  process_document OAIDocumentVerify [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void updateVerifyDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIDocumentVerify &process_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  process_document OAIDocumentVerify [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void verifyDocument(const QString &x_frankie_customer_id, const OAIDocumentVerify &process_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void compareDocumentCallback(OAIHttpRequestWorker *worker);
    void createDocumentCallback(OAIHttpRequestWorker *worker);
    void createScanDocumentCallback(OAIHttpRequestWorker *worker);
    void deleteDocumentCallback(OAIHttpRequestWorker *worker);
    void queryDocumentCallback(OAIHttpRequestWorker *worker);
    void queryDocumentChecksCallback(OAIHttpRequestWorker *worker);
    void queryDocumentFullCallback(OAIHttpRequestWorker *worker);
    void searchDocumentCallback(OAIHttpRequestWorker *worker);
    void updateCompareDocumentCallback(OAIHttpRequestWorker *worker);
    void updateDocumentCallback(OAIHttpRequestWorker *worker);
    void updateScanDocumentCallback(OAIHttpRequestWorker *worker);
    void updateVerifyDocumentCallback(OAIHttpRequestWorker *worker);
    void verifyDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void compareDocumentSignal(OAIDocumentCompareResultObject summary);
    void createDocumentSignal(OAIDocumentResultObject summary);
    void createScanDocumentSignal(OAIDocumentScanResultObject summary);
    void deleteDocumentSignal(OAIBasicStatusResultObject summary);
    void queryDocumentSignal(OAIDocumentResultObject summary);
    void queryDocumentChecksSignal(OAIDocumentChecksResultObject summary);
    void queryDocumentFullSignal(OAIDocumentResultObject summary);
    void searchDocumentSignal(OAIDocumentSearchResultObject summary);
    void updateCompareDocumentSignal(OAIDocumentCompareResultObject summary);
    void updateDocumentSignal(OAIDocumentResultObject summary);
    void updateScanDocumentSignal(OAIDocumentScanResultObject summary);
    void updateVerifyDocumentSignal(OAIDocumentVerifyResultObject summary);
    void verifyDocumentSignal(OAIDocumentVerifyResultObject summary);


    void compareDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentCompareResultObject summary);
    void createDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResultObject summary);
    void createScanDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentScanResultObject summary);
    void deleteDocumentSignalFull(OAIHttpRequestWorker *worker, OAIBasicStatusResultObject summary);
    void queryDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResultObject summary);
    void queryDocumentChecksSignalFull(OAIHttpRequestWorker *worker, OAIDocumentChecksResultObject summary);
    void queryDocumentFullSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResultObject summary);
    void searchDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentSearchResultObject summary);
    void updateCompareDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentCompareResultObject summary);
    void updateDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentResultObject summary);
    void updateScanDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentScanResultObject summary);
    void updateVerifyDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentVerifyResultObject summary);
    void verifyDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentVerifyResultObject summary);

    Q_DECL_DEPRECATED_X("Use compareDocumentSignalError() instead")
    void compareDocumentSignalE(OAIDocumentCompareResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void compareDocumentSignalError(OAIDocumentCompareResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentSignalError() instead")
    void createDocumentSignalE(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalError(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScanDocumentSignalError() instead")
    void createScanDocumentSignalE(OAIDocumentScanResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScanDocumentSignalError(OAIDocumentScanResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalError() instead")
    void deleteDocumentSignalE(OAIBasicStatusResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalError(OAIBasicStatusResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentSignalError() instead")
    void queryDocumentSignalE(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentSignalError(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentChecksSignalError() instead")
    void queryDocumentChecksSignalE(OAIDocumentChecksResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentChecksSignalError(OAIDocumentChecksResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentFullSignalError() instead")
    void queryDocumentFullSignalE(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentFullSignalError(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDocumentSignalError() instead")
    void searchDocumentSignalE(OAIDocumentSearchResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDocumentSignalError(OAIDocumentSearchResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCompareDocumentSignalError() instead")
    void updateCompareDocumentSignalE(OAIDocumentCompareResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCompareDocumentSignalError(OAIDocumentCompareResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentSignalError() instead")
    void updateDocumentSignalE(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentSignalError(OAIDocumentResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScanDocumentSignalError() instead")
    void updateScanDocumentSignalE(OAIDocumentScanResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScanDocumentSignalError(OAIDocumentScanResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVerifyDocumentSignalError() instead")
    void updateVerifyDocumentSignalE(OAIDocumentVerifyResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVerifyDocumentSignalError(OAIDocumentVerifyResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyDocumentSignalError() instead")
    void verifyDocumentSignalE(OAIDocumentVerifyResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyDocumentSignalError(OAIDocumentVerifyResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use compareDocumentSignalErrorFull() instead")
    void compareDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compareDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentSignalErrorFull() instead")
    void createDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScanDocumentSignalErrorFull() instead")
    void createScanDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScanDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalErrorFull() instead")
    void deleteDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentSignalErrorFull() instead")
    void queryDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentChecksSignalErrorFull() instead")
    void queryDocumentChecksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentChecksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryDocumentFullSignalErrorFull() instead")
    void queryDocumentFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryDocumentFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDocumentSignalErrorFull() instead")
    void searchDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCompareDocumentSignalErrorFull() instead")
    void updateCompareDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCompareDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDocumentSignalErrorFull() instead")
    void updateDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScanDocumentSignalErrorFull() instead")
    void updateScanDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScanDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVerifyDocumentSignalErrorFull() instead")
    void updateVerifyDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVerifyDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyDocumentSignalErrorFull() instead")
    void verifyDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
