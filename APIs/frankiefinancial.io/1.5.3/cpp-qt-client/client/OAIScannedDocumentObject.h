/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScannedDocumentObject.h
 *
 * the document to be attached and optionally scanned (if supported)
 */

#ifndef OAIScannedDocumentObject_H
#define OAIScannedDocumentObject_H

#include <QJsonObject>

#include "OAIEnumMIMEType.h"
#include "OAIEnumScanDataRetrievalState.h"
#include "OAIEnumScanSide.h"
#include "OAIEnumScanType.h"
#include <QByteArray>
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScannedDocumentObject : public OAIObject {
public:
    OAIScannedDocumentObject();
    OAIScannedDocumentObject(QString json);
    ~OAIScannedDocumentObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isScanDelete() const;
    void setScanDelete(const bool &scan_delete);
    bool is_scan_delete_Set() const;
    bool is_scan_delete_Valid() const;

    QDateTime getScanCreated() const;
    void setScanCreated(const QDateTime &scan_created);
    bool is_scan_created_Set() const;
    bool is_scan_created_Valid() const;

    QByteArray getScanData() const;
    void setScanData(const QByteArray &scan_data);
    bool is_scan_data_Set() const;
    bool is_scan_data_Valid() const;

    OAIEnumScanDataRetrievalState getScanDataRetrievalState() const;
    void setScanDataRetrievalState(const OAIEnumScanDataRetrievalState &scan_data_retrieval_state);
    bool is_scan_data_retrieval_state_Set() const;
    bool is_scan_data_retrieval_state_Valid() const;

    QString getScanDocId() const;
    void setScanDocId(const QString &scan_doc_id);
    bool is_scan_doc_id_Set() const;
    bool is_scan_doc_id_Valid() const;

    QString getScanFilename() const;
    void setScanFilename(const QString &scan_filename);
    bool is_scan_filename_Set() const;
    bool is_scan_filename_Valid() const;

    OAIEnumMIMEType getScanMime() const;
    void setScanMime(const OAIEnumMIMEType &scan_mime);
    bool is_scan_mime_Set() const;
    bool is_scan_mime_Valid() const;

    qint32 getScanPageNum() const;
    void setScanPageNum(const qint32 &scan_page_num);
    bool is_scan_page_num_Set() const;
    bool is_scan_page_num_Valid() const;

    OAIEnumScanSide getScanSide() const;
    void setScanSide(const OAIEnumScanSide &scan_side);
    bool is_scan_side_Set() const;
    bool is_scan_side_Valid() const;

    OAIEnumScanType getScanType() const;
    void setScanType(const OAIEnumScanType &scan_type);
    bool is_scan_type_Set() const;
    bool is_scan_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_scan_delete;
    bool m_scan_delete_isSet;
    bool m_scan_delete_isValid;

    QDateTime m_scan_created;
    bool m_scan_created_isSet;
    bool m_scan_created_isValid;

    QByteArray m_scan_data;
    bool m_scan_data_isSet;
    bool m_scan_data_isValid;

    OAIEnumScanDataRetrievalState m_scan_data_retrieval_state;
    bool m_scan_data_retrieval_state_isSet;
    bool m_scan_data_retrieval_state_isValid;

    QString m_scan_doc_id;
    bool m_scan_doc_id_isSet;
    bool m_scan_doc_id_isValid;

    QString m_scan_filename;
    bool m_scan_filename_isSet;
    bool m_scan_filename_isValid;

    OAIEnumMIMEType m_scan_mime;
    bool m_scan_mime_isSet;
    bool m_scan_mime_isValid;

    qint32 m_scan_page_num;
    bool m_scan_page_num_isSet;
    bool m_scan_page_num_isValid;

    OAIEnumScanSide m_scan_side;
    bool m_scan_side_isSet;
    bool m_scan_side_isValid;

    OAIEnumScanType m_scan_type;
    bool m_scan_type_isSet;
    bool m_scan_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScannedDocumentObject)

#endif // OAIScannedDocumentObject_H
