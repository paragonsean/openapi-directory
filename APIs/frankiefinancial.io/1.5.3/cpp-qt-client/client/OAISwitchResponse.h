/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISwitchResponse.h
 *
 * 
 */

#ifndef OAISwitchResponse_H
#define OAISwitchResponse_H

#include <QJsonObject>

#include "OAIDisplayMarkUp.h"
#include "OAIPlan.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDisplayMarkUp;
class OAIPlan;

class OAISwitchResponse : public OAIObject {
public:
    OAISwitchResponse();
    OAISwitchResponse(QString json);
    ~OAISwitchResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCorrelationId() const;
    void setCorrelationId(const QString &correlation_id);
    bool is_correlation_id_Set() const;
    bool is_correlation_id_Valid() const;

    QList<OAIDisplayMarkUp> getNextSteps() const;
    void setNextSteps(const QList<OAIDisplayMarkUp> &next_steps);
    bool is_next_steps_Set() const;
    bool is_next_steps_Valid() const;

    OAIPlan getPlan() const;
    void setPlan(const OAIPlan &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getSwitchDate() const;
    void setSwitchDate(const QString &switch_date);
    bool is_switch_date_Set() const;
    bool is_switch_date_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_correlation_id;
    bool m_correlation_id_isSet;
    bool m_correlation_id_isValid;

    QList<OAIDisplayMarkUp> m_next_steps;
    bool m_next_steps_isSet;
    bool m_next_steps_isValid;

    OAIPlan m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_switch_date;
    bool m_switch_date_isSet;
    bool m_switch_date_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISwitchResponse)

#endif // OAISwitchResponse_H
