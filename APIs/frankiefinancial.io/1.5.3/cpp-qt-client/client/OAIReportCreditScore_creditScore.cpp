/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportCreditScore_creditScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportCreditScore_creditScore::OAIReportCreditScore_creditScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportCreditScore_creditScore::OAIReportCreditScore_creditScore() {
    this->initializeModel();
}

OAIReportCreditScore_creditScore::~OAIReportCreditScore_creditScore() {}

void OAIReportCreditScore_creditScore::initializeModel() {

    m_abn_isSet = false;
    m_abn_isValid = false;

    m_acn_isSet = false;
    m_acn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_item_code_isSet = false;
    m_item_code_isValid = false;

    m_scores_isSet = false;
    m_scores_isValid = false;
}

void OAIReportCreditScore_creditScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportCreditScore_creditScore::fromJsonObject(QJsonObject json) {

    m_abn_isValid = ::OpenAPI::fromJsonValue(m_abn, json[QString("abn")]);
    m_abn_isSet = !json[QString("abn")].isNull() && m_abn_isValid;

    m_acn_isValid = ::OpenAPI::fromJsonValue(m_acn, json[QString("acn")]);
    m_acn_isSet = !json[QString("acn")].isNull() && m_acn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_item_code_isValid = ::OpenAPI::fromJsonValue(m_item_code, json[QString("itemCode")]);
    m_item_code_isSet = !json[QString("itemCode")].isNull() && m_item_code_isValid;

    m_scores_isValid = ::OpenAPI::fromJsonValue(m_scores, json[QString("scores")]);
    m_scores_isSet = !json[QString("scores")].isNull() && m_scores_isValid;
}

QString OAIReportCreditScore_creditScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportCreditScore_creditScore::asJsonObject() const {
    QJsonObject obj;
    if (m_abn_isSet) {
        obj.insert(QString("abn"), ::OpenAPI::toJsonValue(m_abn));
    }
    if (m_acn_isSet) {
        obj.insert(QString("acn"), ::OpenAPI::toJsonValue(m_acn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_item_code_isSet) {
        obj.insert(QString("itemCode"), ::OpenAPI::toJsonValue(m_item_code));
    }
    if (m_scores.isSet()) {
        obj.insert(QString("scores"), ::OpenAPI::toJsonValue(m_scores));
    }
    return obj;
}

QString OAIReportCreditScore_creditScore::getAbn() const {
    return m_abn;
}
void OAIReportCreditScore_creditScore::setAbn(const QString &abn) {
    m_abn = abn;
    m_abn_isSet = true;
}

bool OAIReportCreditScore_creditScore::is_abn_Set() const{
    return m_abn_isSet;
}

bool OAIReportCreditScore_creditScore::is_abn_Valid() const{
    return m_abn_isValid;
}

QString OAIReportCreditScore_creditScore::getAcn() const {
    return m_acn;
}
void OAIReportCreditScore_creditScore::setAcn(const QString &acn) {
    m_acn = acn;
    m_acn_isSet = true;
}

bool OAIReportCreditScore_creditScore::is_acn_Set() const{
    return m_acn_isSet;
}

bool OAIReportCreditScore_creditScore::is_acn_Valid() const{
    return m_acn_isValid;
}

QString OAIReportCreditScore_creditScore::getDescription() const {
    return m_description;
}
void OAIReportCreditScore_creditScore::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportCreditScore_creditScore::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportCreditScore_creditScore::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReportCreditScore_creditScore::getItemCode() const {
    return m_item_code;
}
void OAIReportCreditScore_creditScore::setItemCode(const QString &item_code) {
    m_item_code = item_code;
    m_item_code_isSet = true;
}

bool OAIReportCreditScore_creditScore::is_item_code_Set() const{
    return m_item_code_isSet;
}

bool OAIReportCreditScore_creditScore::is_item_code_Valid() const{
    return m_item_code_isValid;
}

OAICreditScoreObject OAIReportCreditScore_creditScore::getScores() const {
    return m_scores;
}
void OAIReportCreditScore_creditScore::setScores(const OAICreditScoreObject &scores) {
    m_scores = scores;
    m_scores_isSet = true;
}

bool OAIReportCreditScore_creditScore::is_scores_Set() const{
    return m_scores_isSet;
}

bool OAIReportCreditScore_creditScore::is_scores_Valid() const{
    return m_scores_isValid;
}

bool OAIReportCreditScore_creditScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportCreditScore_creditScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
