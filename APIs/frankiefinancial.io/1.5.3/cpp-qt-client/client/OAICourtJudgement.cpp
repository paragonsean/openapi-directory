/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICourtJudgement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICourtJudgement::OAICourtJudgement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICourtJudgement::OAICourtJudgement() {
    this->initializeModel();
}

OAICourtJudgement::~OAICourtJudgement() {}

void OAICourtJudgement::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_action_date_isSet = false;
    m_action_date_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_judgement_amount_isSet = false;
    m_judgement_amount_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_nature_of_claim_isSet = false;
    m_nature_of_claim_isValid = false;

    m_nature_of_claim_desc_isSet = false;
    m_nature_of_claim_desc_isValid = false;

    m_plaintiff_isSet = false;
    m_plaintiff_isValid = false;

    m_proceeding_number_isSet = false;
    m_proceeding_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICourtJudgement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICourtJudgement::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_action_date_isValid = ::OpenAPI::fromJsonValue(m_action_date, json[QString("actionDate")]);
    m_action_date_isSet = !json[QString("actionDate")].isNull() && m_action_date_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_judgement_amount_isValid = ::OpenAPI::fromJsonValue(m_judgement_amount, json[QString("judgementAmount")]);
    m_judgement_amount_isSet = !json[QString("judgementAmount")].isNull() && m_judgement_amount_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_nature_of_claim_isValid = ::OpenAPI::fromJsonValue(m_nature_of_claim, json[QString("natureOfClaim")]);
    m_nature_of_claim_isSet = !json[QString("natureOfClaim")].isNull() && m_nature_of_claim_isValid;

    m_nature_of_claim_desc_isValid = ::OpenAPI::fromJsonValue(m_nature_of_claim_desc, json[QString("natureOfClaimDesc")]);
    m_nature_of_claim_desc_isSet = !json[QString("natureOfClaimDesc")].isNull() && m_nature_of_claim_desc_isValid;

    m_plaintiff_isValid = ::OpenAPI::fromJsonValue(m_plaintiff, json[QString("plaintiff")]);
    m_plaintiff_isSet = !json[QString("plaintiff")].isNull() && m_plaintiff_isValid;

    m_proceeding_number_isValid = ::OpenAPI::fromJsonValue(m_proceeding_number, json[QString("proceedingNumber")]);
    m_proceeding_number_isSet = !json[QString("proceedingNumber")].isNull() && m_proceeding_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICourtJudgement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICourtJudgement::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_action_date_isSet) {
        obj.insert(QString("actionDate"), ::OpenAPI::toJsonValue(m_action_date));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_judgement_amount_isSet) {
        obj.insert(QString("judgementAmount"), ::OpenAPI::toJsonValue(m_judgement_amount));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_nature_of_claim_isSet) {
        obj.insert(QString("natureOfClaim"), ::OpenAPI::toJsonValue(m_nature_of_claim));
    }
    if (m_nature_of_claim_desc_isSet) {
        obj.insert(QString("natureOfClaimDesc"), ::OpenAPI::toJsonValue(m_nature_of_claim_desc));
    }
    if (m_plaintiff_isSet) {
        obj.insert(QString("plaintiff"), ::OpenAPI::toJsonValue(m_plaintiff));
    }
    if (m_proceeding_number_isSet) {
        obj.insert(QString("proceedingNumber"), ::OpenAPI::toJsonValue(m_proceeding_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICourtJudgement::getAction() const {
    return m_action;
}
void OAICourtJudgement::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICourtJudgement::is_action_Set() const{
    return m_action_isSet;
}

bool OAICourtJudgement::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAICourtJudgement::getActionDate() const {
    return m_action_date;
}
void OAICourtJudgement::setActionDate(const QDateTime &action_date) {
    m_action_date = action_date;
    m_action_date_isSet = true;
}

bool OAICourtJudgement::is_action_date_Set() const{
    return m_action_date_isSet;
}

bool OAICourtJudgement::is_action_date_Valid() const{
    return m_action_date_isValid;
}

QDateTime OAICourtJudgement::getCreatedDate() const {
    return m_created_date;
}
void OAICourtJudgement::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICourtJudgement::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICourtJudgement::is_created_date_Valid() const{
    return m_created_date_isValid;
}

float OAICourtJudgement::getJudgementAmount() const {
    return m_judgement_amount;
}
void OAICourtJudgement::setJudgementAmount(const float &judgement_amount) {
    m_judgement_amount = judgement_amount;
    m_judgement_amount_isSet = true;
}

bool OAICourtJudgement::is_judgement_amount_Set() const{
    return m_judgement_amount_isSet;
}

bool OAICourtJudgement::is_judgement_amount_Valid() const{
    return m_judgement_amount_isValid;
}

QString OAICourtJudgement::getLocation() const {
    return m_location;
}
void OAICourtJudgement::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICourtJudgement::is_location_Set() const{
    return m_location_isSet;
}

bool OAICourtJudgement::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICourtJudgement::getNatureOfClaim() const {
    return m_nature_of_claim;
}
void OAICourtJudgement::setNatureOfClaim(const QString &nature_of_claim) {
    m_nature_of_claim = nature_of_claim;
    m_nature_of_claim_isSet = true;
}

bool OAICourtJudgement::is_nature_of_claim_Set() const{
    return m_nature_of_claim_isSet;
}

bool OAICourtJudgement::is_nature_of_claim_Valid() const{
    return m_nature_of_claim_isValid;
}

QString OAICourtJudgement::getNatureOfClaimDesc() const {
    return m_nature_of_claim_desc;
}
void OAICourtJudgement::setNatureOfClaimDesc(const QString &nature_of_claim_desc) {
    m_nature_of_claim_desc = nature_of_claim_desc;
    m_nature_of_claim_desc_isSet = true;
}

bool OAICourtJudgement::is_nature_of_claim_desc_Set() const{
    return m_nature_of_claim_desc_isSet;
}

bool OAICourtJudgement::is_nature_of_claim_desc_Valid() const{
    return m_nature_of_claim_desc_isValid;
}

QString OAICourtJudgement::getPlaintiff() const {
    return m_plaintiff;
}
void OAICourtJudgement::setPlaintiff(const QString &plaintiff) {
    m_plaintiff = plaintiff;
    m_plaintiff_isSet = true;
}

bool OAICourtJudgement::is_plaintiff_Set() const{
    return m_plaintiff_isSet;
}

bool OAICourtJudgement::is_plaintiff_Valid() const{
    return m_plaintiff_isValid;
}

QString OAICourtJudgement::getProceedingNumber() const {
    return m_proceeding_number;
}
void OAICourtJudgement::setProceedingNumber(const QString &proceeding_number) {
    m_proceeding_number = proceeding_number;
    m_proceeding_number_isSet = true;
}

bool OAICourtJudgement::is_proceeding_number_Set() const{
    return m_proceeding_number_isSet;
}

bool OAICourtJudgement::is_proceeding_number_Valid() const{
    return m_proceeding_number_isValid;
}

QString OAICourtJudgement::getState() const {
    return m_state;
}
void OAICourtJudgement::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICourtJudgement::is_state_Set() const{
    return m_state_isSet;
}

bool OAICourtJudgement::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICourtJudgement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_judgement_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nature_of_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nature_of_claim_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaintiff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proceeding_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICourtJudgement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
