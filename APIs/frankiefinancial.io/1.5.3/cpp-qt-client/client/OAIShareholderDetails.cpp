/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareholderDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareholderDetails::OAIShareholderDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareholderDetails::OAIShareholderDetails() {
    this->initializeModel();
}

OAIShareholderDetails::~OAIShareholderDetails() {}

void OAIShareholderDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_all_info_isSet = false;
    m_all_info_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_nominal_value_isSet = false;
    m_nominal_value_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_share_class_isSet = false;
    m_share_class_isValid = false;

    m_share_count_isSet = false;
    m_share_count_isValid = false;

    m_share_type_isSet = false;
    m_share_type_isValid = false;

    m_shareholder_type_isSet = false;
    m_shareholder_type_isValid = false;

    m_total_share_count_isSet = false;
    m_total_share_count_isValid = false;

    m_total_share_value_isSet = false;
    m_total_share_value_isValid = false;

    m_total_shares_isSet = false;
    m_total_shares_isValid = false;
}

void OAIShareholderDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareholderDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_all_info_isValid = ::OpenAPI::fromJsonValue(m_all_info, json[QString("allInfo")]);
    m_all_info_isSet = !json[QString("allInfo")].isNull() && m_all_info_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_nominal_value_isValid = ::OpenAPI::fromJsonValue(m_nominal_value, json[QString("nominalValue")]);
    m_nominal_value_isSet = !json[QString("nominalValue")].isNull() && m_nominal_value_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_share_class_isValid = ::OpenAPI::fromJsonValue(m_share_class, json[QString("shareClass")]);
    m_share_class_isSet = !json[QString("shareClass")].isNull() && m_share_class_isValid;

    m_share_count_isValid = ::OpenAPI::fromJsonValue(m_share_count, json[QString("shareCount")]);
    m_share_count_isSet = !json[QString("shareCount")].isNull() && m_share_count_isValid;

    m_share_type_isValid = ::OpenAPI::fromJsonValue(m_share_type, json[QString("shareType")]);
    m_share_type_isSet = !json[QString("shareType")].isNull() && m_share_type_isValid;

    m_shareholder_type_isValid = ::OpenAPI::fromJsonValue(m_shareholder_type, json[QString("shareholderType")]);
    m_shareholder_type_isSet = !json[QString("shareholderType")].isNull() && m_shareholder_type_isValid;

    m_total_share_count_isValid = ::OpenAPI::fromJsonValue(m_total_share_count, json[QString("totalShareCount")]);
    m_total_share_count_isSet = !json[QString("totalShareCount")].isNull() && m_total_share_count_isValid;

    m_total_share_value_isValid = ::OpenAPI::fromJsonValue(m_total_share_value, json[QString("totalShareValue")]);
    m_total_share_value_isSet = !json[QString("totalShareValue")].isNull() && m_total_share_value_isValid;

    m_total_shares_isValid = ::OpenAPI::fromJsonValue(m_total_shares, json[QString("totalShares")]);
    m_total_shares_isSet = !json[QString("totalShares")].isNull() && m_total_shares_isValid;
}

QString OAIShareholderDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareholderDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_all_info_isSet) {
        obj.insert(QString("allInfo"), ::OpenAPI::toJsonValue(m_all_info));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_nominal_value_isSet) {
        obj.insert(QString("nominalValue"), ::OpenAPI::toJsonValue(m_nominal_value));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_share_class_isSet) {
        obj.insert(QString("shareClass"), ::OpenAPI::toJsonValue(m_share_class));
    }
    if (m_share_count_isSet) {
        obj.insert(QString("shareCount"), ::OpenAPI::toJsonValue(m_share_count));
    }
    if (m_share_type_isSet) {
        obj.insert(QString("shareType"), ::OpenAPI::toJsonValue(m_share_type));
    }
    if (m_shareholder_type_isSet) {
        obj.insert(QString("shareholderType"), ::OpenAPI::toJsonValue(m_shareholder_type));
    }
    if (m_total_share_count_isSet) {
        obj.insert(QString("totalShareCount"), ::OpenAPI::toJsonValue(m_total_share_count));
    }
    if (m_total_share_value_isSet) {
        obj.insert(QString("totalShareValue"), ::OpenAPI::toJsonValue(m_total_share_value));
    }
    if (m_total_shares_isSet) {
        obj.insert(QString("totalShares"), ::OpenAPI::toJsonValue(m_total_shares));
    }
    return obj;
}

QString OAIShareholderDetails::getAddress() const {
    return m_address;
}
void OAIShareholderDetails::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIShareholderDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAIShareholderDetails::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIShareholderDetails::getAllInfo() const {
    return m_all_info;
}
void OAIShareholderDetails::setAllInfo(const QString &all_info) {
    m_all_info = all_info;
    m_all_info_isSet = true;
}

bool OAIShareholderDetails::is_all_info_Set() const{
    return m_all_info_isSet;
}

bool OAIShareholderDetails::is_all_info_Valid() const{
    return m_all_info_isValid;
}

QString OAIShareholderDetails::getCurrency() const {
    return m_currency;
}
void OAIShareholderDetails::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIShareholderDetails::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIShareholderDetails::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIShareholderDetails::getId() const {
    return m_id;
}
void OAIShareholderDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShareholderDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShareholderDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShareholderDetails::getName() const {
    return m_name;
}
void OAIShareholderDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShareholderDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShareholderDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShareholderDetails::getNationality() const {
    return m_nationality;
}
void OAIShareholderDetails::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIShareholderDetails::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIShareholderDetails::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIShareholderDetails::getNominalValue() const {
    return m_nominal_value;
}
void OAIShareholderDetails::setNominalValue(const QString &nominal_value) {
    m_nominal_value = nominal_value;
    m_nominal_value_isSet = true;
}

bool OAIShareholderDetails::is_nominal_value_Set() const{
    return m_nominal_value_isSet;
}

bool OAIShareholderDetails::is_nominal_value_Valid() const{
    return m_nominal_value_isValid;
}

QString OAIShareholderDetails::getPercentage() const {
    return m_percentage;
}
void OAIShareholderDetails::setPercentage(const QString &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIShareholderDetails::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIShareholderDetails::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIShareholderDetails::getShareClass() const {
    return m_share_class;
}
void OAIShareholderDetails::setShareClass(const QString &share_class) {
    m_share_class = share_class;
    m_share_class_isSet = true;
}

bool OAIShareholderDetails::is_share_class_Set() const{
    return m_share_class_isSet;
}

bool OAIShareholderDetails::is_share_class_Valid() const{
    return m_share_class_isValid;
}

qint64 OAIShareholderDetails::getShareCount() const {
    return m_share_count;
}
void OAIShareholderDetails::setShareCount(const qint64 &share_count) {
    m_share_count = share_count;
    m_share_count_isSet = true;
}

bool OAIShareholderDetails::is_share_count_Set() const{
    return m_share_count_isSet;
}

bool OAIShareholderDetails::is_share_count_Valid() const{
    return m_share_count_isValid;
}

QString OAIShareholderDetails::getShareType() const {
    return m_share_type;
}
void OAIShareholderDetails::setShareType(const QString &share_type) {
    m_share_type = share_type;
    m_share_type_isSet = true;
}

bool OAIShareholderDetails::is_share_type_Set() const{
    return m_share_type_isSet;
}

bool OAIShareholderDetails::is_share_type_Valid() const{
    return m_share_type_isValid;
}

QString OAIShareholderDetails::getShareholderType() const {
    return m_shareholder_type;
}
void OAIShareholderDetails::setShareholderType(const QString &shareholder_type) {
    m_shareholder_type = shareholder_type;
    m_shareholder_type_isSet = true;
}

bool OAIShareholderDetails::is_shareholder_type_Set() const{
    return m_shareholder_type_isSet;
}

bool OAIShareholderDetails::is_shareholder_type_Valid() const{
    return m_shareholder_type_isValid;
}

qint64 OAIShareholderDetails::getTotalShareCount() const {
    return m_total_share_count;
}
void OAIShareholderDetails::setTotalShareCount(const qint64 &total_share_count) {
    m_total_share_count = total_share_count;
    m_total_share_count_isSet = true;
}

bool OAIShareholderDetails::is_total_share_count_Set() const{
    return m_total_share_count_isSet;
}

bool OAIShareholderDetails::is_total_share_count_Valid() const{
    return m_total_share_count_isValid;
}

qint64 OAIShareholderDetails::getTotalShareValue() const {
    return m_total_share_value;
}
void OAIShareholderDetails::setTotalShareValue(const qint64 &total_share_value) {
    m_total_share_value = total_share_value;
    m_total_share_value_isSet = true;
}

bool OAIShareholderDetails::is_total_share_value_Set() const{
    return m_total_share_value_isSet;
}

bool OAIShareholderDetails::is_total_share_value_Valid() const{
    return m_total_share_value_isValid;
}

qint64 OAIShareholderDetails::getTotalShares() const {
    return m_total_shares;
}
void OAIShareholderDetails::setTotalShares(const qint64 &total_shares) {
    m_total_shares = total_shares;
    m_total_shares_isSet = true;
}

bool OAIShareholderDetails::is_total_shares_Set() const{
    return m_total_shares_isSet;
}

bool OAIShareholderDetails::is_total_shares_Valid() const{
    return m_total_shares_isValid;
}

bool OAIShareholderDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nominal_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_share_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_shares_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareholderDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
