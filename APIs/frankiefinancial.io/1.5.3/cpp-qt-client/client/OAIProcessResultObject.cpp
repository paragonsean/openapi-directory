/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessResultObject::OAIProcessResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessResultObject::OAIProcessResultObject() {
    this->initializeModel();
}

OAIProcessResultObject::~OAIProcessResultObject() {}

void OAIProcessResultObject::initializeModel() {

    m_check_date_isSet = false;
    m_check_date_isValid = false;

    m_check_id_isSet = false;
    m_check_id_isValid = false;

    m_check_performed_by_isSet = false;
    m_check_performed_by_isValid = false;

    m_check_source_isSet = false;
    m_check_source_isValid = false;

    m_check_type_isSet = false;
    m_check_type_isValid = false;

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_provider_check_id_isSet = false;
    m_provider_check_id_isValid = false;

    m_result_notes_isSet = false;
    m_result_notes_isValid = false;

    m_result_state_isSet = false;
    m_result_state_isValid = false;

    m_risk_level_isSet = false;
    m_risk_level_isValid = false;
}

void OAIProcessResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessResultObject::fromJsonObject(QJsonObject json) {

    m_check_date_isValid = ::OpenAPI::fromJsonValue(m_check_date, json[QString("checkDate")]);
    m_check_date_isSet = !json[QString("checkDate")].isNull() && m_check_date_isValid;

    m_check_id_isValid = ::OpenAPI::fromJsonValue(m_check_id, json[QString("checkId")]);
    m_check_id_isSet = !json[QString("checkId")].isNull() && m_check_id_isValid;

    m_check_performed_by_isValid = ::OpenAPI::fromJsonValue(m_check_performed_by, json[QString("checkPerformedBy")]);
    m_check_performed_by_isSet = !json[QString("checkPerformedBy")].isNull() && m_check_performed_by_isValid;

    m_check_source_isValid = ::OpenAPI::fromJsonValue(m_check_source, json[QString("checkSource")]);
    m_check_source_isSet = !json[QString("checkSource")].isNull() && m_check_source_isValid;

    m_check_type_isValid = ::OpenAPI::fromJsonValue(m_check_type, json[QString("checkType")]);
    m_check_type_isSet = !json[QString("checkType")].isNull() && m_check_type_isValid;

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_provider_check_id_isValid = ::OpenAPI::fromJsonValue(m_provider_check_id, json[QString("providerCheckID")]);
    m_provider_check_id_isSet = !json[QString("providerCheckID")].isNull() && m_provider_check_id_isValid;

    m_result_notes_isValid = ::OpenAPI::fromJsonValue(m_result_notes, json[QString("resultNotes")]);
    m_result_notes_isSet = !json[QString("resultNotes")].isNull() && m_result_notes_isValid;

    m_result_state_isValid = ::OpenAPI::fromJsonValue(m_result_state, json[QString("resultState")]);
    m_result_state_isSet = !json[QString("resultState")].isNull() && m_result_state_isValid;

    m_risk_level_isValid = ::OpenAPI::fromJsonValue(m_risk_level, json[QString("riskLevel")]);
    m_risk_level_isSet = !json[QString("riskLevel")].isNull() && m_risk_level_isValid;
}

QString OAIProcessResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_check_date_isSet) {
        obj.insert(QString("checkDate"), ::OpenAPI::toJsonValue(m_check_date));
    }
    if (m_check_id_isSet) {
        obj.insert(QString("checkId"), ::OpenAPI::toJsonValue(m_check_id));
    }
    if (m_check_performed_by_isSet) {
        obj.insert(QString("checkPerformedBy"), ::OpenAPI::toJsonValue(m_check_performed_by));
    }
    if (m_check_source_isSet) {
        obj.insert(QString("checkSource"), ::OpenAPI::toJsonValue(m_check_source));
    }
    if (m_check_type_isSet) {
        obj.insert(QString("checkType"), ::OpenAPI::toJsonValue(m_check_type));
    }
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_provider_check_id_isSet) {
        obj.insert(QString("providerCheckID"), ::OpenAPI::toJsonValue(m_provider_check_id));
    }
    if (m_result_notes.size() > 0) {
        obj.insert(QString("resultNotes"), ::OpenAPI::toJsonValue(m_result_notes));
    }
    if (m_result_state.isSet()) {
        obj.insert(QString("resultState"), ::OpenAPI::toJsonValue(m_result_state));
    }
    if (m_risk_level_isSet) {
        obj.insert(QString("riskLevel"), ::OpenAPI::toJsonValue(m_risk_level));
    }
    return obj;
}

QDateTime OAIProcessResultObject::getCheckDate() const {
    return m_check_date;
}
void OAIProcessResultObject::setCheckDate(const QDateTime &check_date) {
    m_check_date = check_date;
    m_check_date_isSet = true;
}

bool OAIProcessResultObject::is_check_date_Set() const{
    return m_check_date_isSet;
}

bool OAIProcessResultObject::is_check_date_Valid() const{
    return m_check_date_isValid;
}

QString OAIProcessResultObject::getCheckId() const {
    return m_check_id;
}
void OAIProcessResultObject::setCheckId(const QString &check_id) {
    m_check_id = check_id;
    m_check_id_isSet = true;
}

bool OAIProcessResultObject::is_check_id_Set() const{
    return m_check_id_isSet;
}

bool OAIProcessResultObject::is_check_id_Valid() const{
    return m_check_id_isValid;
}

QString OAIProcessResultObject::getCheckPerformedBy() const {
    return m_check_performed_by;
}
void OAIProcessResultObject::setCheckPerformedBy(const QString &check_performed_by) {
    m_check_performed_by = check_performed_by;
    m_check_performed_by_isSet = true;
}

bool OAIProcessResultObject::is_check_performed_by_Set() const{
    return m_check_performed_by_isSet;
}

bool OAIProcessResultObject::is_check_performed_by_Valid() const{
    return m_check_performed_by_isValid;
}

QString OAIProcessResultObject::getCheckSource() const {
    return m_check_source;
}
void OAIProcessResultObject::setCheckSource(const QString &check_source) {
    m_check_source = check_source;
    m_check_source_isSet = true;
}

bool OAIProcessResultObject::is_check_source_Set() const{
    return m_check_source_isSet;
}

bool OAIProcessResultObject::is_check_source_Valid() const{
    return m_check_source_isValid;
}

QString OAIProcessResultObject::getCheckType() const {
    return m_check_type;
}
void OAIProcessResultObject::setCheckType(const QString &check_type) {
    m_check_type = check_type;
    m_check_type_isSet = true;
}

bool OAIProcessResultObject::is_check_type_Set() const{
    return m_check_type_isSet;
}

bool OAIProcessResultObject::is_check_type_Valid() const{
    return m_check_type_isValid;
}

qint32 OAIProcessResultObject::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIProcessResultObject::setConfidenceLevel(const qint32 &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIProcessResultObject::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIProcessResultObject::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

QString OAIProcessResultObject::getProviderCheckId() const {
    return m_provider_check_id;
}
void OAIProcessResultObject::setProviderCheckId(const QString &provider_check_id) {
    m_provider_check_id = provider_check_id;
    m_provider_check_id_isSet = true;
}

bool OAIProcessResultObject::is_provider_check_id_Set() const{
    return m_provider_check_id_isSet;
}

bool OAIProcessResultObject::is_provider_check_id_Valid() const{
    return m_provider_check_id_isValid;
}

QList<OAIKeyValuePairObject> OAIProcessResultObject::getResultNotes() const {
    return m_result_notes;
}
void OAIProcessResultObject::setResultNotes(const QList<OAIKeyValuePairObject> &result_notes) {
    m_result_notes = result_notes;
    m_result_notes_isSet = true;
}

bool OAIProcessResultObject::is_result_notes_Set() const{
    return m_result_notes_isSet;
}

bool OAIProcessResultObject::is_result_notes_Valid() const{
    return m_result_notes_isValid;
}

OAIEnumCheckResultState OAIProcessResultObject::getResultState() const {
    return m_result_state;
}
void OAIProcessResultObject::setResultState(const OAIEnumCheckResultState &result_state) {
    m_result_state = result_state;
    m_result_state_isSet = true;
}

bool OAIProcessResultObject::is_result_state_Set() const{
    return m_result_state_isSet;
}

bool OAIProcessResultObject::is_result_state_Valid() const{
    return m_result_state_isValid;
}

qint32 OAIProcessResultObject::getRiskLevel() const {
    return m_risk_level;
}
void OAIProcessResultObject::setRiskLevel(const qint32 &risk_level) {
    m_risk_level = risk_level;
    m_risk_level_isSet = true;
}

bool OAIProcessResultObject::is_risk_level_Set() const{
    return m_risk_level_isSet;
}

bool OAIProcessResultObject::is_risk_level_Valid() const{
    return m_risk_level_isValid;
}

bool OAIProcessResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_performed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
