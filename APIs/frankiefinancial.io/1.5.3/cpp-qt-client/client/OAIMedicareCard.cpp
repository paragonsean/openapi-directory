/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMedicareCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMedicareCard::OAIMedicareCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMedicareCard::OAIMedicareCard() {
    this->initializeModel();
}

OAIMedicareCard::~OAIMedicareCard() {}

void OAIMedicareCard::initializeModel() {

    m_card_color_isSet = false;
    m_card_color_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMedicareCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMedicareCard::fromJsonObject(QJsonObject json) {

    m_card_color_isValid = ::OpenAPI::fromJsonValue(m_card_color, json[QString("cardColor")]);
    m_card_color_isSet = !json[QString("cardColor")].isNull() && m_card_color_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middleName")]);
    m_middle_name_isSet = !json[QString("middleName")].isNull() && m_middle_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("referenceNumber")]);
    m_reference_number_isSet = !json[QString("referenceNumber")].isNull() && m_reference_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMedicareCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMedicareCard::asJsonObject() const {
    QJsonObject obj;
    if (m_card_color_isSet) {
        obj.insert(QString("cardColor"), ::OpenAPI::toJsonValue(m_card_color));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("referenceNumber"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMedicareCard::getCardColor() const {
    return m_card_color;
}
void OAIMedicareCard::setCardColor(const QString &card_color) {
    m_card_color = card_color;
    m_card_color_isSet = true;
}

bool OAIMedicareCard::is_card_color_Set() const{
    return m_card_color_isSet;
}

bool OAIMedicareCard::is_card_color_Valid() const{
    return m_card_color_isValid;
}

QString OAIMedicareCard::getExpiryDate() const {
    return m_expiry_date;
}
void OAIMedicareCard::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIMedicareCard::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIMedicareCard::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIMedicareCard::getMiddleName() const {
    return m_middle_name;
}
void OAIMedicareCard::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIMedicareCard::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIMedicareCard::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAIMedicareCard::getNumber() const {
    return m_number;
}
void OAIMedicareCard::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIMedicareCard::is_number_Set() const{
    return m_number_isSet;
}

bool OAIMedicareCard::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIMedicareCard::getReferenceNumber() const {
    return m_reference_number;
}
void OAIMedicareCard::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIMedicareCard::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIMedicareCard::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QString OAIMedicareCard::getType() const {
    return m_type;
}
void OAIMedicareCard::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMedicareCard::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMedicareCard::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMedicareCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMedicareCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiry_date_isValid && m_number_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
