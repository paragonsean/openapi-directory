/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBusinessDetails.h
 *
 * The details of the company being checked 
 */

#ifndef OAIBusinessDetails_H
#define OAIBusinessDetails_H

#include <QJsonObject>

#include "OAIAddressObject.h"
#include "OAIRegulatoryInformation.h"
#include "OAIStockExchangeData.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddressObject;
class OAIRegulatoryInformation;
class OAIStockExchangeData;

class OAIBusinessDetails : public OAIObject {
public:
    OAIBusinessDetails();
    OAIBusinessDetails(QString json);
    ~OAIBusinessDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbn() const;
    void setAbn(const QString &abn);
    bool is_abn_Set() const;
    bool is_abn_Valid() const;

    QString getAcn() const;
    void setAcn(const QString &acn);
    bool is_acn_Set() const;
    bool is_acn_Valid() const;

    QString getArbn() const;
    void setArbn(const QString &arbn);
    bool is_arbn_Set() const;
    bool is_arbn_Valid() const;

    QString getAnzsicCode() const;
    void setAnzsicCode(const QString &anzsic_code);
    bool is_anzsic_code_Set() const;
    bool is_anzsic_code_Valid() const;

    QString getAsicCompanyType() const;
    void setAsicCompanyType(const QString &asic_company_type);
    bool is_asic_company_type_Set() const;
    bool is_asic_company_type_Valid() const;

    QList<QString> getBusinessNames() const;
    void setBusinessNames(const QList<QString> &business_names);
    bool is_business_names_Set() const;
    bool is_business_names_Valid() const;

    QDate getDateRegisteredWithAsic() const;
    void setDateRegisteredWithAsic(const QDate &date_registered_with_asic);
    bool is_date_registered_with_asic_Set() const;
    bool is_date_registered_with_asic_Valid() const;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    QString getGiin() const;
    void setGiin(const QString &giin);
    bool is_giin_Set() const;
    bool is_giin_Valid() const;

    OAIAddressObject getPlaceOfBusiness() const;
    void setPlaceOfBusiness(const OAIAddressObject &place_of_business);
    bool is_place_of_business_Set() const;
    bool is_place_of_business_Valid() const;

    bool isPublicCompany() const;
    void setPublicCompany(const bool &public_company);
    bool is_public_company_Set() const;
    bool is_public_company_Valid() const;

    QString getRegisteredName() const;
    void setRegisteredName(const QString &registered_name);
    bool is_registered_name_Set() const;
    bool is_registered_name_Valid() const;

    OAIAddressObject getRegisteredOffice() const;
    void setRegisteredOffice(const OAIAddressObject &registered_office);
    bool is_registered_office_Set() const;
    bool is_registered_office_Valid() const;

    OAIRegulatoryInformation getRegulatoryInformation() const;
    void setRegulatoryInformation(const OAIRegulatoryInformation &regulatory_information);
    bool is_regulatory_information_Set() const;
    bool is_regulatory_information_Valid() const;

    QString getStateRegisteredWithAsic() const;
    void setStateRegisteredWithAsic(const QString &state_registered_with_asic);
    bool is_state_registered_with_asic_Set() const;
    bool is_state_registered_with_asic_Valid() const;

    OAIStockExchangeData getStockExchangeData() const;
    void setStockExchangeData(const OAIStockExchangeData &stock_exchange_data);
    bool is_stock_exchange_data_Set() const;
    bool is_stock_exchange_data_Valid() const;

    QList<QString> getTradingNames() const;
    void setTradingNames(const QList<QString> &trading_names);
    bool is_trading_names_Set() const;
    bool is_trading_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abn;
    bool m_abn_isSet;
    bool m_abn_isValid;

    QString m_acn;
    bool m_acn_isSet;
    bool m_acn_isValid;

    QString m_arbn;
    bool m_arbn_isSet;
    bool m_arbn_isValid;

    QString m_anzsic_code;
    bool m_anzsic_code_isSet;
    bool m_anzsic_code_isValid;

    QString m_asic_company_type;
    bool m_asic_company_type_isSet;
    bool m_asic_company_type_isValid;

    QList<QString> m_business_names;
    bool m_business_names_isSet;
    bool m_business_names_isValid;

    QDate m_date_registered_with_asic;
    bool m_date_registered_with_asic_isSet;
    bool m_date_registered_with_asic_isValid;

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    QString m_giin;
    bool m_giin_isSet;
    bool m_giin_isValid;

    OAIAddressObject m_place_of_business;
    bool m_place_of_business_isSet;
    bool m_place_of_business_isValid;

    bool m_public_company;
    bool m_public_company_isSet;
    bool m_public_company_isValid;

    QString m_registered_name;
    bool m_registered_name_isSet;
    bool m_registered_name_isValid;

    OAIAddressObject m_registered_office;
    bool m_registered_office_isSet;
    bool m_registered_office_isValid;

    OAIRegulatoryInformation m_regulatory_information;
    bool m_regulatory_information_isSet;
    bool m_regulatory_information_isValid;

    QString m_state_registered_with_asic;
    bool m_state_registered_with_asic_isSet;
    bool m_state_registered_with_asic_isValid;

    OAIStockExchangeData m_stock_exchange_data;
    bool m_stock_exchange_data_isSet;
    bool m_stock_exchange_data_isValid;

    QList<QString> m_trading_names;
    bool m_trading_names_isSet;
    bool m_trading_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBusinessDetails)

#endif // OAIBusinessDetails_H
