/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganisationCheckResponseObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganisationCheckResponseObject::OAIOrganisationCheckResponseObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganisationCheckResponseObject::OAIOrganisationCheckResponseObject() {
    this->initializeModel();
}

OAIOrganisationCheckResponseObject::~OAIOrganisationCheckResponseObject() {}

void OAIOrganisationCheckResponseObject::initializeModel() {

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_organisation_check_id_isSet = false;
    m_organisation_check_id_isValid = false;

    m_organisation_check_result_isSet = false;
    m_organisation_check_result_isValid = false;

    m_ownership_check_date_isSet = false;
    m_ownership_check_date_isValid = false;

    m_ownership_check_id_isSet = false;
    m_ownership_check_id_isValid = false;

    m_ownership_query_error_isSet = false;
    m_ownership_query_error_isValid = false;

    m_ownership_query_result_isSet = false;
    m_ownership_query_result_isValid = false;

    m_report_error_isSet = false;
    m_report_error_isValid = false;

    m_report_result_isSet = false;
    m_report_result_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_ubo_response_isSet = false;
    m_ubo_response_isValid = false;
}

void OAIOrganisationCheckResponseObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganisationCheckResponseObject::fromJsonObject(QJsonObject json) {

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_organisation_check_id_isValid = ::OpenAPI::fromJsonValue(m_organisation_check_id, json[QString("organisationCheckId")]);
    m_organisation_check_id_isSet = !json[QString("organisationCheckId")].isNull() && m_organisation_check_id_isValid;

    m_organisation_check_result_isValid = ::OpenAPI::fromJsonValue(m_organisation_check_result, json[QString("organisationCheckResult")]);
    m_organisation_check_result_isSet = !json[QString("organisationCheckResult")].isNull() && m_organisation_check_result_isValid;

    m_ownership_check_date_isValid = ::OpenAPI::fromJsonValue(m_ownership_check_date, json[QString("ownershipCheckDate")]);
    m_ownership_check_date_isSet = !json[QString("ownershipCheckDate")].isNull() && m_ownership_check_date_isValid;

    m_ownership_check_id_isValid = ::OpenAPI::fromJsonValue(m_ownership_check_id, json[QString("ownershipCheckId")]);
    m_ownership_check_id_isSet = !json[QString("ownershipCheckId")].isNull() && m_ownership_check_id_isValid;

    m_ownership_query_error_isValid = ::OpenAPI::fromJsonValue(m_ownership_query_error, json[QString("ownershipQueryError")]);
    m_ownership_query_error_isSet = !json[QString("ownershipQueryError")].isNull() && m_ownership_query_error_isValid;

    m_ownership_query_result_isValid = ::OpenAPI::fromJsonValue(m_ownership_query_result, json[QString("ownershipQueryResult")]);
    m_ownership_query_result_isSet = !json[QString("ownershipQueryResult")].isNull() && m_ownership_query_result_isValid;

    m_report_error_isValid = ::OpenAPI::fromJsonValue(m_report_error, json[QString("reportError")]);
    m_report_error_isSet = !json[QString("reportError")].isNull() && m_report_error_isValid;

    m_report_result_isValid = ::OpenAPI::fromJsonValue(m_report_result, json[QString("reportResult")]);
    m_report_result_isSet = !json[QString("reportResult")].isNull() && m_report_result_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_ubo_response_isValid = ::OpenAPI::fromJsonValue(m_ubo_response, json[QString("uboResponse")]);
    m_ubo_response_isSet = !json[QString("uboResponse")].isNull() && m_ubo_response_isValid;
}

QString OAIOrganisationCheckResponseObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganisationCheckResponseObject::asJsonObject() const {
    QJsonObject obj;
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_organisation_check_id_isSet) {
        obj.insert(QString("organisationCheckId"), ::OpenAPI::toJsonValue(m_organisation_check_id));
    }
    if (m_organisation_check_result.isSet()) {
        obj.insert(QString("organisationCheckResult"), ::OpenAPI::toJsonValue(m_organisation_check_result));
    }
    if (m_ownership_check_date_isSet) {
        obj.insert(QString("ownershipCheckDate"), ::OpenAPI::toJsonValue(m_ownership_check_date));
    }
    if (m_ownership_check_id_isSet) {
        obj.insert(QString("ownershipCheckId"), ::OpenAPI::toJsonValue(m_ownership_check_id));
    }
    if (m_ownership_query_error.isSet()) {
        obj.insert(QString("ownershipQueryError"), ::OpenAPI::toJsonValue(m_ownership_query_error));
    }
    if (m_ownership_query_result.isSet()) {
        obj.insert(QString("ownershipQueryResult"), ::OpenAPI::toJsonValue(m_ownership_query_result));
    }
    if (m_report_error.isSet()) {
        obj.insert(QString("reportError"), ::OpenAPI::toJsonValue(m_report_error));
    }
    if (m_report_result.isSet()) {
        obj.insert(QString("reportResult"), ::OpenAPI::toJsonValue(m_report_result));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_ubo_response.isSet()) {
        obj.insert(QString("uboResponse"), ::OpenAPI::toJsonValue(m_ubo_response));
    }
    return obj;
}

QList<OAIEntityFlagObject> OAIOrganisationCheckResponseObject::getFlags() const {
    return m_flags;
}
void OAIOrganisationCheckResponseObject::setFlags(const QList<OAIEntityFlagObject> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIOrganisationCheckResponseObject::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIOrganisationCheckResponseObject::getOrganisationCheckId() const {
    return m_organisation_check_id;
}
void OAIOrganisationCheckResponseObject::setOrganisationCheckId(const QString &organisation_check_id) {
    m_organisation_check_id = organisation_check_id;
    m_organisation_check_id_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_organisation_check_id_Set() const{
    return m_organisation_check_id_isSet;
}

bool OAIOrganisationCheckResponseObject::is_organisation_check_id_Valid() const{
    return m_organisation_check_id_isValid;
}

OAIOrganisationCheckResultObject OAIOrganisationCheckResponseObject::getOrganisationCheckResult() const {
    return m_organisation_check_result;
}
void OAIOrganisationCheckResponseObject::setOrganisationCheckResult(const OAIOrganisationCheckResultObject &organisation_check_result) {
    m_organisation_check_result = organisation_check_result;
    m_organisation_check_result_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_organisation_check_result_Set() const{
    return m_organisation_check_result_isSet;
}

bool OAIOrganisationCheckResponseObject::is_organisation_check_result_Valid() const{
    return m_organisation_check_result_isValid;
}

QDateTime OAIOrganisationCheckResponseObject::getOwnershipCheckDate() const {
    return m_ownership_check_date;
}
void OAIOrganisationCheckResponseObject::setOwnershipCheckDate(const QDateTime &ownership_check_date) {
    m_ownership_check_date = ownership_check_date;
    m_ownership_check_date_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_ownership_check_date_Set() const{
    return m_ownership_check_date_isSet;
}

bool OAIOrganisationCheckResponseObject::is_ownership_check_date_Valid() const{
    return m_ownership_check_date_isValid;
}

QString OAIOrganisationCheckResponseObject::getOwnershipCheckId() const {
    return m_ownership_check_id;
}
void OAIOrganisationCheckResponseObject::setOwnershipCheckId(const QString &ownership_check_id) {
    m_ownership_check_id = ownership_check_id;
    m_ownership_check_id_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_ownership_check_id_Set() const{
    return m_ownership_check_id_isSet;
}

bool OAIOrganisationCheckResponseObject::is_ownership_check_id_Valid() const{
    return m_ownership_check_id_isValid;
}

OAIErrorObject OAIOrganisationCheckResponseObject::getOwnershipQueryError() const {
    return m_ownership_query_error;
}
void OAIOrganisationCheckResponseObject::setOwnershipQueryError(const OAIErrorObject &ownership_query_error) {
    m_ownership_query_error = ownership_query_error;
    m_ownership_query_error_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_ownership_query_error_Set() const{
    return m_ownership_query_error_isSet;
}

bool OAIOrganisationCheckResponseObject::is_ownership_query_error_Valid() const{
    return m_ownership_query_error_isValid;
}

OAIOwnershipQueryResultObject OAIOrganisationCheckResponseObject::getOwnershipQueryResult() const {
    return m_ownership_query_result;
}
void OAIOrganisationCheckResponseObject::setOwnershipQueryResult(const OAIOwnershipQueryResultObject &ownership_query_result) {
    m_ownership_query_result = ownership_query_result;
    m_ownership_query_result_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_ownership_query_result_Set() const{
    return m_ownership_query_result_isSet;
}

bool OAIOrganisationCheckResponseObject::is_ownership_query_result_Valid() const{
    return m_ownership_query_result_isValid;
}

OAIErrorObject OAIOrganisationCheckResponseObject::getReportError() const {
    return m_report_error;
}
void OAIOrganisationCheckResponseObject::setReportError(const OAIErrorObject &report_error) {
    m_report_error = report_error;
    m_report_error_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_report_error_Set() const{
    return m_report_error_isSet;
}

bool OAIOrganisationCheckResponseObject::is_report_error_Valid() const{
    return m_report_error_isValid;
}

OAIBusinessReportResultObject OAIOrganisationCheckResponseObject::getReportResult() const {
    return m_report_result;
}
void OAIOrganisationCheckResponseObject::setReportResult(const OAIBusinessReportResultObject &report_result) {
    m_report_result = report_result;
    m_report_result_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_report_result_Set() const{
    return m_report_result_isSet;
}

bool OAIOrganisationCheckResponseObject::is_report_result_Valid() const{
    return m_report_result_isValid;
}

QString OAIOrganisationCheckResponseObject::getRequestId() const {
    return m_request_id;
}
void OAIOrganisationCheckResponseObject::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIOrganisationCheckResponseObject::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIUBOResponse OAIOrganisationCheckResponseObject::getUboResponse() const {
    return m_ubo_response;
}
void OAIOrganisationCheckResponseObject::setUboResponse(const OAIUBOResponse &ubo_response) {
    m_ubo_response = ubo_response;
    m_ubo_response_isSet = true;
}

bool OAIOrganisationCheckResponseObject::is_ubo_response_Set() const{
    return m_ubo_response_isSet;
}

bool OAIOrganisationCheckResponseObject::is_ubo_response_Valid() const{
    return m_ubo_response_isValid;
}

bool OAIOrganisationCheckResponseObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_check_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_query_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_query_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ubo_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganisationCheckResponseObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
