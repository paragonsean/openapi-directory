/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckEntityCheckResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckEntityCheckResultObject::OAICheckEntityCheckResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckEntityCheckResultObject::OAICheckEntityCheckResultObject() {
    this->initializeModel();
}

OAICheckEntityCheckResultObject::~OAICheckEntityCheckResultObject() {}

void OAICheckEntityCheckResultObject::initializeModel() {

    m_blacklist_check_results_isSet = false;
    m_blacklist_check_results_isValid = false;

    m_check_results_list_summaries_isSet = false;
    m_check_results_list_summaries_isValid = false;

    m_check_risk_isSet = false;
    m_check_risk_isValid = false;

    m_check_summary_isSet = false;
    m_check_summary_isValid = false;

    m_device_check_results_isSet = false;
    m_device_check_results_isValid = false;

    m_duplicate_check_results_isSet = false;
    m_duplicate_check_results_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_entity_profile_result_isSet = false;
    m_entity_profile_result_isValid = false;

    m_entity_result_isSet = false;
    m_entity_result_isValid = false;

    m_fraud_check_results_isSet = false;
    m_fraud_check_results_isValid = false;

    m_manual_check_results_isSet = false;
    m_manual_check_results_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_shared_blocklist_check_results_isSet = false;
    m_shared_blocklist_check_results_isValid = false;
}

void OAICheckEntityCheckResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckEntityCheckResultObject::fromJsonObject(QJsonObject json) {

    m_blacklist_check_results_isValid = ::OpenAPI::fromJsonValue(m_blacklist_check_results, json[QString("blacklistCheckResults")]);
    m_blacklist_check_results_isSet = !json[QString("blacklistCheckResults")].isNull() && m_blacklist_check_results_isValid;

    m_check_results_list_summaries_isValid = ::OpenAPI::fromJsonValue(m_check_results_list_summaries, json[QString("checkResultsListSummaries")]);
    m_check_results_list_summaries_isSet = !json[QString("checkResultsListSummaries")].isNull() && m_check_results_list_summaries_isValid;

    m_check_risk_isValid = ::OpenAPI::fromJsonValue(m_check_risk, json[QString("checkRisk")]);
    m_check_risk_isSet = !json[QString("checkRisk")].isNull() && m_check_risk_isValid;

    m_check_summary_isValid = ::OpenAPI::fromJsonValue(m_check_summary, json[QString("checkSummary")]);
    m_check_summary_isSet = !json[QString("checkSummary")].isNull() && m_check_summary_isValid;

    m_device_check_results_isValid = ::OpenAPI::fromJsonValue(m_device_check_results, json[QString("deviceCheckResults")]);
    m_device_check_results_isSet = !json[QString("deviceCheckResults")].isNull() && m_device_check_results_isValid;

    m_duplicate_check_results_isValid = ::OpenAPI::fromJsonValue(m_duplicate_check_results, json[QString("duplicateCheckResults")]);
    m_duplicate_check_results_isSet = !json[QString("duplicateCheckResults")].isNull() && m_duplicate_check_results_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_entity_profile_result_isValid = ::OpenAPI::fromJsonValue(m_entity_profile_result, json[QString("entityProfileResult")]);
    m_entity_profile_result_isSet = !json[QString("entityProfileResult")].isNull() && m_entity_profile_result_isValid;

    m_entity_result_isValid = ::OpenAPI::fromJsonValue(m_entity_result, json[QString("entityResult")]);
    m_entity_result_isSet = !json[QString("entityResult")].isNull() && m_entity_result_isValid;

    m_fraud_check_results_isValid = ::OpenAPI::fromJsonValue(m_fraud_check_results, json[QString("fraudCheckResults")]);
    m_fraud_check_results_isSet = !json[QString("fraudCheckResults")].isNull() && m_fraud_check_results_isValid;

    m_manual_check_results_isValid = ::OpenAPI::fromJsonValue(m_manual_check_results, json[QString("manualCheckResults")]);
    m_manual_check_results_isSet = !json[QString("manualCheckResults")].isNull() && m_manual_check_results_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_shared_blocklist_check_results_isValid = ::OpenAPI::fromJsonValue(m_shared_blocklist_check_results, json[QString("sharedBlocklistCheckResults")]);
    m_shared_blocklist_check_results_isSet = !json[QString("sharedBlocklistCheckResults")].isNull() && m_shared_blocklist_check_results_isValid;
}

QString OAICheckEntityCheckResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckEntityCheckResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklist_check_results.size() > 0) {
        obj.insert(QString("blacklistCheckResults"), ::OpenAPI::toJsonValue(m_blacklist_check_results));
    }
    if (m_check_results_list_summaries.size() > 0) {
        obj.insert(QString("checkResultsListSummaries"), ::OpenAPI::toJsonValue(m_check_results_list_summaries));
    }
    if (m_check_risk.isSet()) {
        obj.insert(QString("checkRisk"), ::OpenAPI::toJsonValue(m_check_risk));
    }
    if (m_check_summary.isSet()) {
        obj.insert(QString("checkSummary"), ::OpenAPI::toJsonValue(m_check_summary));
    }
    if (m_device_check_results.size() > 0) {
        obj.insert(QString("deviceCheckResults"), ::OpenAPI::toJsonValue(m_device_check_results));
    }
    if (m_duplicate_check_results.size() > 0) {
        obj.insert(QString("duplicateCheckResults"), ::OpenAPI::toJsonValue(m_duplicate_check_results));
    }
    if (m_entity.isSet()) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_entity_profile_result.isSet()) {
        obj.insert(QString("entityProfileResult"), ::OpenAPI::toJsonValue(m_entity_profile_result));
    }
    if (m_entity_result.isSet()) {
        obj.insert(QString("entityResult"), ::OpenAPI::toJsonValue(m_entity_result));
    }
    if (m_fraud_check_results.isSet()) {
        obj.insert(QString("fraudCheckResults"), ::OpenAPI::toJsonValue(m_fraud_check_results));
    }
    if (m_manual_check_results.size() > 0) {
        obj.insert(QString("manualCheckResults"), ::OpenAPI::toJsonValue(m_manual_check_results));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_shared_blocklist_check_results.size() > 0) {
        obj.insert(QString("sharedBlocklistCheckResults"), ::OpenAPI::toJsonValue(m_shared_blocklist_check_results));
    }
    return obj;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getBlacklistCheckResults() const {
    return m_blacklist_check_results;
}
void OAICheckEntityCheckResultObject::setBlacklistCheckResults(const QList<OAIProcessResultObject> &blacklist_check_results) {
    m_blacklist_check_results = blacklist_check_results;
    m_blacklist_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_blacklist_check_results_Set() const{
    return m_blacklist_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_blacklist_check_results_Valid() const{
    return m_blacklist_check_results_isValid;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getCheckResultsListSummaries() const {
    return m_check_results_list_summaries;
}
void OAICheckEntityCheckResultObject::setCheckResultsListSummaries(const QList<OAIProcessResultObject> &check_results_list_summaries) {
    m_check_results_list_summaries = check_results_list_summaries;
    m_check_results_list_summaries_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_check_results_list_summaries_Set() const{
    return m_check_results_list_summaries_isSet;
}

bool OAICheckEntityCheckResultObject::is_check_results_list_summaries_Valid() const{
    return m_check_results_list_summaries_isValid;
}

OAIProcessResultObject OAICheckEntityCheckResultObject::getCheckRisk() const {
    return m_check_risk;
}
void OAICheckEntityCheckResultObject::setCheckRisk(const OAIProcessResultObject &check_risk) {
    m_check_risk = check_risk;
    m_check_risk_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_check_risk_Set() const{
    return m_check_risk_isSet;
}

bool OAICheckEntityCheckResultObject::is_check_risk_Valid() const{
    return m_check_risk_isValid;
}

OAIProcessResultObject OAICheckEntityCheckResultObject::getCheckSummary() const {
    return m_check_summary;
}
void OAICheckEntityCheckResultObject::setCheckSummary(const OAIProcessResultObject &check_summary) {
    m_check_summary = check_summary;
    m_check_summary_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_check_summary_Set() const{
    return m_check_summary_isSet;
}

bool OAICheckEntityCheckResultObject::is_check_summary_Valid() const{
    return m_check_summary_isValid;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getDeviceCheckResults() const {
    return m_device_check_results;
}
void OAICheckEntityCheckResultObject::setDeviceCheckResults(const QList<OAIProcessResultObject> &device_check_results) {
    m_device_check_results = device_check_results;
    m_device_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_device_check_results_Set() const{
    return m_device_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_device_check_results_Valid() const{
    return m_device_check_results_isValid;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getDuplicateCheckResults() const {
    return m_duplicate_check_results;
}
void OAICheckEntityCheckResultObject::setDuplicateCheckResults(const QList<OAIProcessResultObject> &duplicate_check_results) {
    m_duplicate_check_results = duplicate_check_results;
    m_duplicate_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_duplicate_check_results_Set() const{
    return m_duplicate_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_duplicate_check_results_Valid() const{
    return m_duplicate_check_results_isValid;
}

OAIEntityObject OAICheckEntityCheckResultObject::getEntity() const {
    return m_entity;
}
void OAICheckEntityCheckResultObject::setEntity(const OAIEntityObject &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAICheckEntityCheckResultObject::is_entity_Valid() const{
    return m_entity_isValid;
}

OAIEntityProfileResultObject OAICheckEntityCheckResultObject::getEntityProfileResult() const {
    return m_entity_profile_result;
}
void OAICheckEntityCheckResultObject::setEntityProfileResult(const OAIEntityProfileResultObject &entity_profile_result) {
    m_entity_profile_result = entity_profile_result;
    m_entity_profile_result_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_entity_profile_result_Set() const{
    return m_entity_profile_result_isSet;
}

bool OAICheckEntityCheckResultObject::is_entity_profile_result_Valid() const{
    return m_entity_profile_result_isValid;
}

OAICheckEntityCheckResultObject_entityResult OAICheckEntityCheckResultObject::getEntityResult() const {
    return m_entity_result;
}
void OAICheckEntityCheckResultObject::setEntityResult(const OAICheckEntityCheckResultObject_entityResult &entity_result) {
    m_entity_result = entity_result;
    m_entity_result_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_entity_result_Set() const{
    return m_entity_result_isSet;
}

bool OAICheckEntityCheckResultObject::is_entity_result_Valid() const{
    return m_entity_result_isValid;
}

OAIFraudCheckResultObject OAICheckEntityCheckResultObject::getFraudCheckResults() const {
    return m_fraud_check_results;
}
void OAICheckEntityCheckResultObject::setFraudCheckResults(const OAIFraudCheckResultObject &fraud_check_results) {
    m_fraud_check_results = fraud_check_results;
    m_fraud_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_fraud_check_results_Set() const{
    return m_fraud_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_fraud_check_results_Valid() const{
    return m_fraud_check_results_isValid;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getManualCheckResults() const {
    return m_manual_check_results;
}
void OAICheckEntityCheckResultObject::setManualCheckResults(const QList<OAIProcessResultObject> &manual_check_results) {
    m_manual_check_results = manual_check_results;
    m_manual_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_manual_check_results_Set() const{
    return m_manual_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_manual_check_results_Valid() const{
    return m_manual_check_results_isValid;
}

QString OAICheckEntityCheckResultObject::getRequestId() const {
    return m_request_id;
}
void OAICheckEntityCheckResultObject::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICheckEntityCheckResultObject::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QList<OAIProcessResultObject> OAICheckEntityCheckResultObject::getSharedBlocklistCheckResults() const {
    return m_shared_blocklist_check_results;
}
void OAICheckEntityCheckResultObject::setSharedBlocklistCheckResults(const QList<OAIProcessResultObject> &shared_blocklist_check_results) {
    m_shared_blocklist_check_results = shared_blocklist_check_results;
    m_shared_blocklist_check_results_isSet = true;
}

bool OAICheckEntityCheckResultObject::is_shared_blocklist_check_results_Set() const{
    return m_shared_blocklist_check_results_isSet;
}

bool OAICheckEntityCheckResultObject::is_shared_blocklist_check_results_Valid() const{
    return m_shared_blocklist_check_results_isValid;
}

bool OAICheckEntityCheckResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklist_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_results_list_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_profile_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_check_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_blocklist_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckEntityCheckResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
