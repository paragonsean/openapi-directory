/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndividualData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndividualData::OAIIndividualData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndividualData::OAIIndividualData() {
    this->initializeModel();
}

OAIIndividualData::~OAIIndividualData() {}

void OAIIndividualData::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_beneficially_held_isSet = false;
    m_beneficially_held_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percent_owned_isSet = false;
    m_percent_owned_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_screening_result_isSet = false;
    m_screening_result_isValid = false;
}

void OAIIndividualData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndividualData::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_beneficially_held_isValid = ::OpenAPI::fromJsonValue(m_beneficially_held, json[QString("beneficially_held")]);
    m_beneficially_held_isSet = !json[QString("beneficially_held")].isNull() && m_beneficially_held_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("date_of_birth")]);
    m_date_of_birth_isSet = !json[QString("date_of_birth")].isNull() && m_date_of_birth_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percent_owned_isValid = ::OpenAPI::fromJsonValue(m_percent_owned, json[QString("percent_owned")]);
    m_percent_owned_isSet = !json[QString("percent_owned")].isNull() && m_percent_owned_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_screening_result_isValid = ::OpenAPI::fromJsonValue(m_screening_result, json[QString("screening_result")]);
    m_screening_result_isSet = !json[QString("screening_result")].isNull() && m_screening_result_isValid;
}

QString OAIIndividualData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndividualData::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_beneficially_held_isSet) {
        obj.insert(QString("beneficially_held"), ::OpenAPI::toJsonValue(m_beneficially_held));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("date_of_birth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percent_owned_isSet) {
        obj.insert(QString("percent_owned"), ::OpenAPI::toJsonValue(m_percent_owned));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_screening_result.isSet()) {
        obj.insert(QString("screening_result"), ::OpenAPI::toJsonValue(m_screening_result));
    }
    return obj;
}

QList<OAIAddressObject> OAIIndividualData::getAddresses() const {
    return m_addresses;
}
void OAIIndividualData::setAddresses(const QList<OAIAddressObject> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIIndividualData::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIIndividualData::is_addresses_Valid() const{
    return m_addresses_isValid;
}

bool OAIIndividualData::isBeneficiallyHeld() const {
    return m_beneficially_held;
}
void OAIIndividualData::setBeneficiallyHeld(const bool &beneficially_held) {
    m_beneficially_held = beneficially_held;
    m_beneficially_held_isSet = true;
}

bool OAIIndividualData::is_beneficially_held_Set() const{
    return m_beneficially_held_isSet;
}

bool OAIIndividualData::is_beneficially_held_Valid() const{
    return m_beneficially_held_isValid;
}

QDate OAIIndividualData::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIIndividualData::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIIndividualData::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIIndividualData::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIIndividualData::getName() const {
    return m_name;
}
void OAIIndividualData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIndividualData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIndividualData::is_name_Valid() const{
    return m_name_isValid;
}

float OAIIndividualData::getPercentOwned() const {
    return m_percent_owned;
}
void OAIIndividualData::setPercentOwned(const float &percent_owned) {
    m_percent_owned = percent_owned;
    m_percent_owned_isSet = true;
}

bool OAIIndividualData::is_percent_owned_Set() const{
    return m_percent_owned_isSet;
}

bool OAIIndividualData::is_percent_owned_Valid() const{
    return m_percent_owned_isValid;
}

QString OAIIndividualData::getRole() const {
    return m_role;
}
void OAIIndividualData::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIIndividualData::is_role_Set() const{
    return m_role_isSet;
}

bool OAIIndividualData::is_role_Valid() const{
    return m_role_isValid;
}

OAIScreeningResult OAIIndividualData::getScreeningResult() const {
    return m_screening_result;
}
void OAIIndividualData::setScreeningResult(const OAIScreeningResult &screening_result) {
    m_screening_result = screening_result;
    m_screening_result_isSet = true;
}

bool OAIIndividualData::is_screening_result_Set() const{
    return m_screening_result_isSet;
}

bool OAIIndividualData::is_screening_result_Valid() const{
    return m_screening_result_isValid;
}

bool OAIIndividualData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficially_held_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screening_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndividualData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_beneficially_held_isValid && m_percent_owned_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
