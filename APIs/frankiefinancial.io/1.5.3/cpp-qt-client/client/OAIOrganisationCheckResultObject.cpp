/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganisationCheckResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganisationCheckResultObject::OAIOrganisationCheckResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganisationCheckResultObject::OAIOrganisationCheckResultObject() {
    this->initializeModel();
}

OAIOrganisationCheckResultObject::~OAIOrganisationCheckResultObject() {}

void OAIOrganisationCheckResultObject::initializeModel() {

    m_entity_categories_isSet = false;
    m_entity_categories_isValid = false;

    m_entity_check_errors_isSet = false;
    m_entity_check_errors_isValid = false;

    m_entity_check_results_isSet = false;
    m_entity_check_results_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;
}

void OAIOrganisationCheckResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganisationCheckResultObject::fromJsonObject(QJsonObject json) {

    if(json["entityCategories"].isObject()){
        auto varmap = json["entityCategories"].toObject().toVariantMap();
        m_entity_categories_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_entity_categories_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_entity_categories_isSet &= !jval.isNull() && m_entity_categories_isValid;
                m_entity_categories.insert(m_entity_categories.end(), val, item);
            }
        }
    }

    m_entity_check_errors_isValid = ::OpenAPI::fromJsonValue(m_entity_check_errors, json[QString("entityCheckErrors")]);
    m_entity_check_errors_isSet = !json[QString("entityCheckErrors")].isNull() && m_entity_check_errors_isValid;

    m_entity_check_results_isValid = ::OpenAPI::fromJsonValue(m_entity_check_results, json[QString("entityCheckResults")]);
    m_entity_check_results_isSet = !json[QString("entityCheckResults")].isNull() && m_entity_check_results_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;
}

QString OAIOrganisationCheckResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganisationCheckResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_categories.size() > 0) {
        
        obj.insert(QString("entityCategories"), toJsonValue(m_entity_categories));
    }
    if (m_entity_check_errors.size() > 0) {
        obj.insert(QString("entityCheckErrors"), ::OpenAPI::toJsonValue(m_entity_check_errors));
    }
    if (m_entity_check_results.size() > 0) {
        obj.insert(QString("entityCheckResults"), ::OpenAPI::toJsonValue(m_entity_check_results));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIOrganisationCheckResultObject::getEntityCategories() const {
    return m_entity_categories;
}
void OAIOrganisationCheckResultObject::setEntityCategories(const QMap<QString, QList<QString>> &entity_categories) {
    m_entity_categories = entity_categories;
    m_entity_categories_isSet = true;
}

bool OAIOrganisationCheckResultObject::is_entity_categories_Set() const{
    return m_entity_categories_isSet;
}

bool OAIOrganisationCheckResultObject::is_entity_categories_Valid() const{
    return m_entity_categories_isValid;
}

QMap<QString, OAIErrorObject> OAIOrganisationCheckResultObject::getEntityCheckErrors() const {
    return m_entity_check_errors;
}
void OAIOrganisationCheckResultObject::setEntityCheckErrors(const QMap<QString, OAIErrorObject> &entity_check_errors) {
    m_entity_check_errors = entity_check_errors;
    m_entity_check_errors_isSet = true;
}

bool OAIOrganisationCheckResultObject::is_entity_check_errors_Set() const{
    return m_entity_check_errors_isSet;
}

bool OAIOrganisationCheckResultObject::is_entity_check_errors_Valid() const{
    return m_entity_check_errors_isValid;
}

QMap<QString, OAICheckEntityCheckResultObject> OAIOrganisationCheckResultObject::getEntityCheckResults() const {
    return m_entity_check_results;
}
void OAIOrganisationCheckResultObject::setEntityCheckResults(const QMap<QString, OAICheckEntityCheckResultObject> &entity_check_results) {
    m_entity_check_results = entity_check_results;
    m_entity_check_results_isSet = true;
}

bool OAIOrganisationCheckResultObject::is_entity_check_results_Set() const{
    return m_entity_check_results_isSet;
}

bool OAIOrganisationCheckResultObject::is_entity_check_results_Valid() const{
    return m_entity_check_results_isValid;
}

QString OAIOrganisationCheckResultObject::getEntityId() const {
    return m_entity_id;
}
void OAIOrganisationCheckResultObject::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIOrganisationCheckResultObject::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIOrganisationCheckResultObject::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIOrganisationCheckResultObject::getGroupId() const {
    return m_group_id;
}
void OAIOrganisationCheckResultObject::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIOrganisationCheckResultObject::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIOrganisationCheckResultObject::is_group_id_Valid() const{
    return m_group_id_isValid;
}

bool OAIOrganisationCheckResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_check_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganisationCheckResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
