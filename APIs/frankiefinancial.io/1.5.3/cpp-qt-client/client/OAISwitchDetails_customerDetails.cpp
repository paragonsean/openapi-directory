/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwitchDetails_customerDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwitchDetails_customerDetails::OAISwitchDetails_customerDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwitchDetails_customerDetails::OAISwitchDetails_customerDetails() {
    this->initializeModel();
}

OAISwitchDetails_customerDetails::~OAISwitchDetails_customerDetails() {}

void OAISwitchDetails_customerDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_evidence_of_identity_isSet = false;
    m_evidence_of_identity_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISwitchDetails_customerDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwitchDetails_customerDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_evidence_of_identity_isValid = ::OpenAPI::fromJsonValue(m_evidence_of_identity, json[QString("evidenceOfIdentity")]);
    m_evidence_of_identity_isSet = !json[QString("evidenceOfIdentity")].isNull() && m_evidence_of_identity_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISwitchDetails_customerDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwitchDetails_customerDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_evidence_of_identity.isSet()) {
        obj.insert(QString("evidenceOfIdentity"), ::OpenAPI::toJsonValue(m_evidence_of_identity));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISwitchDetails_customerDetails::getAddress() const {
    return m_address;
}
void OAISwitchDetails_customerDetails::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAISwitchDetails_customerDetails::is_address_Valid() const{
    return m_address_isValid;
}

QString OAISwitchDetails_customerDetails::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAISwitchDetails_customerDetails::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAISwitchDetails_customerDetails::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAISwitchDetails_customerDetails::getEmail() const {
    return m_email;
}
void OAISwitchDetails_customerDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAISwitchDetails_customerDetails::is_email_Valid() const{
    return m_email_isValid;
}

OAISwitchDetails_customerDetails_evidenceOfIdentity OAISwitchDetails_customerDetails::getEvidenceOfIdentity() const {
    return m_evidence_of_identity;
}
void OAISwitchDetails_customerDetails::setEvidenceOfIdentity(const OAISwitchDetails_customerDetails_evidenceOfIdentity &evidence_of_identity) {
    m_evidence_of_identity = evidence_of_identity;
    m_evidence_of_identity_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_evidence_of_identity_Set() const{
    return m_evidence_of_identity_isSet;
}

bool OAISwitchDetails_customerDetails::is_evidence_of_identity_Valid() const{
    return m_evidence_of_identity_isValid;
}

QString OAISwitchDetails_customerDetails::getMobile() const {
    return m_mobile;
}
void OAISwitchDetails_customerDetails::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAISwitchDetails_customerDetails::is_mobile_Valid() const{
    return m_mobile_isValid;
}

OAISwitchDetails_customerDetails_name OAISwitchDetails_customerDetails::getName() const {
    return m_name;
}
void OAISwitchDetails_customerDetails::setName(const OAISwitchDetails_customerDetails_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISwitchDetails_customerDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAISwitchDetails_customerDetails::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISwitchDetails_customerDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_of_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwitchDetails_customerDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_birth_isValid && m_email_isValid && m_evidence_of_identity_isValid && m_mobile_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
