/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternationalBusinessSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternationalBusinessSearchResponse::OAIInternationalBusinessSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternationalBusinessSearchResponse::OAIInternationalBusinessSearchResponse() {
    this->initializeModel();
}

OAIInternationalBusinessSearchResponse::~OAIInternationalBusinessSearchResponse() {}

void OAIInternationalBusinessSearchResponse::initializeModel() {

    m_companies_isSet = false;
    m_companies_isValid = false;

    m_ib_continuation_key_isSet = false;
    m_ib_continuation_key_isValid = false;

    m_ib_response_code_isSet = false;
    m_ib_response_code_isValid = false;

    m_ib_response_details_isSet = false;
    m_ib_response_details_isValid = false;

    m_ib_transaction_id_isSet = false;
    m_ib_transaction_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIInternationalBusinessSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternationalBusinessSearchResponse::fromJsonObject(QJsonObject json) {

    m_companies_isValid = ::OpenAPI::fromJsonValue(m_companies, json[QString("Companies")]);
    m_companies_isSet = !json[QString("Companies")].isNull() && m_companies_isValid;

    m_ib_continuation_key_isValid = ::OpenAPI::fromJsonValue(m_ib_continuation_key, json[QString("ibContinuationKey")]);
    m_ib_continuation_key_isSet = !json[QString("ibContinuationKey")].isNull() && m_ib_continuation_key_isValid;

    m_ib_response_code_isValid = ::OpenAPI::fromJsonValue(m_ib_response_code, json[QString("ibResponseCode")]);
    m_ib_response_code_isSet = !json[QString("ibResponseCode")].isNull() && m_ib_response_code_isValid;

    m_ib_response_details_isValid = ::OpenAPI::fromJsonValue(m_ib_response_details, json[QString("ibResponseDetails")]);
    m_ib_response_details_isSet = !json[QString("ibResponseDetails")].isNull() && m_ib_response_details_isValid;

    m_ib_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_ib_transaction_id, json[QString("ibTransactionId")]);
    m_ib_transaction_id_isSet = !json[QString("ibTransactionId")].isNull() && m_ib_transaction_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIInternationalBusinessSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternationalBusinessSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_companies.isSet()) {
        obj.insert(QString("Companies"), ::OpenAPI::toJsonValue(m_companies));
    }
    if (m_ib_continuation_key_isSet) {
        obj.insert(QString("ibContinuationKey"), ::OpenAPI::toJsonValue(m_ib_continuation_key));
    }
    if (m_ib_response_code_isSet) {
        obj.insert(QString("ibResponseCode"), ::OpenAPI::toJsonValue(m_ib_response_code));
    }
    if (m_ib_response_details_isSet) {
        obj.insert(QString("ibResponseDetails"), ::OpenAPI::toJsonValue(m_ib_response_details));
    }
    if (m_ib_transaction_id_isSet) {
        obj.insert(QString("ibTransactionId"), ::OpenAPI::toJsonValue(m_ib_transaction_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIArrayOfCompanyDTO OAIInternationalBusinessSearchResponse::getCompanies() const {
    return m_companies;
}
void OAIInternationalBusinessSearchResponse::setCompanies(const OAIArrayOfCompanyDTO &companies) {
    m_companies = companies;
    m_companies_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_companies_Set() const{
    return m_companies_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_companies_Valid() const{
    return m_companies_isValid;
}

QString OAIInternationalBusinessSearchResponse::getIbContinuationKey() const {
    return m_ib_continuation_key;
}
void OAIInternationalBusinessSearchResponse::setIbContinuationKey(const QString &ib_continuation_key) {
    m_ib_continuation_key = ib_continuation_key;
    m_ib_continuation_key_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_ib_continuation_key_Set() const{
    return m_ib_continuation_key_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_ib_continuation_key_Valid() const{
    return m_ib_continuation_key_isValid;
}

qint32 OAIInternationalBusinessSearchResponse::getIbResponseCode() const {
    return m_ib_response_code;
}
void OAIInternationalBusinessSearchResponse::setIbResponseCode(const qint32 &ib_response_code) {
    m_ib_response_code = ib_response_code;
    m_ib_response_code_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_ib_response_code_Set() const{
    return m_ib_response_code_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_ib_response_code_Valid() const{
    return m_ib_response_code_isValid;
}

QString OAIInternationalBusinessSearchResponse::getIbResponseDetails() const {
    return m_ib_response_details;
}
void OAIInternationalBusinessSearchResponse::setIbResponseDetails(const QString &ib_response_details) {
    m_ib_response_details = ib_response_details;
    m_ib_response_details_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_ib_response_details_Set() const{
    return m_ib_response_details_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_ib_response_details_Valid() const{
    return m_ib_response_details_isValid;
}

QString OAIInternationalBusinessSearchResponse::getIbTransactionId() const {
    return m_ib_transaction_id;
}
void OAIInternationalBusinessSearchResponse::setIbTransactionId(const QString &ib_transaction_id) {
    m_ib_transaction_id = ib_transaction_id;
    m_ib_transaction_id_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_ib_transaction_id_Set() const{
    return m_ib_transaction_id_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_ib_transaction_id_Valid() const{
    return m_ib_transaction_id_isValid;
}

QString OAIInternationalBusinessSearchResponse::getRequestId() const {
    return m_request_id;
}
void OAIInternationalBusinessSearchResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIInternationalBusinessSearchResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIInternationalBusinessSearchResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIInternationalBusinessSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ib_continuation_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ib_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ib_response_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ib_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternationalBusinessSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
