/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsolvencyNotice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsolvencyNotice::OAIInsolvencyNotice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsolvencyNotice::OAIInsolvencyNotice() {
    this->initializeModel();
}

OAIInsolvencyNotice::~OAIInsolvencyNotice() {}

void OAIInsolvencyNotice::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lastmod_isSet = false;
    m_lastmod_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_reported_by_isSet = false;
    m_reported_by_isValid = false;

    m_ruling_isSet = false;
    m_ruling_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIInsolvencyNotice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsolvencyNotice::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lastmod_isValid = ::OpenAPI::fromJsonValue(m_lastmod, json[QString("lastmod")]);
    m_lastmod_isSet = !json[QString("lastmod")].isNull() && m_lastmod_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_reported_by_isValid = ::OpenAPI::fromJsonValue(m_reported_by, json[QString("reportedBy")]);
    m_reported_by_isSet = !json[QString("reportedBy")].isNull() && m_reported_by_isValid;

    m_ruling_isValid = ::OpenAPI::fromJsonValue(m_ruling, json[QString("ruling")]);
    m_ruling_isSet = !json[QString("ruling")].isNull() && m_ruling_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIInsolvencyNotice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsolvencyNotice::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lastmod_isSet) {
        obj.insert(QString("lastmod"), ::OpenAPI::toJsonValue(m_lastmod));
    }
    if (m_publisher_isSet) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_reported_by_isSet) {
        obj.insert(QString("reportedBy"), ::OpenAPI::toJsonValue(m_reported_by));
    }
    if (m_ruling_isSet) {
        obj.insert(QString("ruling"), ::OpenAPI::toJsonValue(m_ruling));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QDateTime OAIInsolvencyNotice::getDate() const {
    return m_date;
}
void OAIInsolvencyNotice::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInsolvencyNotice::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInsolvencyNotice::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIInsolvencyNotice::getId() const {
    return m_id;
}
void OAIInsolvencyNotice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInsolvencyNotice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInsolvencyNotice::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIInsolvencyNotice::getLastmod() const {
    return m_lastmod;
}
void OAIInsolvencyNotice::setLastmod(const QDateTime &lastmod) {
    m_lastmod = lastmod;
    m_lastmod_isSet = true;
}

bool OAIInsolvencyNotice::is_lastmod_Set() const{
    return m_lastmod_isSet;
}

bool OAIInsolvencyNotice::is_lastmod_Valid() const{
    return m_lastmod_isValid;
}

QString OAIInsolvencyNotice::getPublisher() const {
    return m_publisher;
}
void OAIInsolvencyNotice::setPublisher(const QString &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIInsolvencyNotice::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIInsolvencyNotice::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIInsolvencyNotice::getReportedBy() const {
    return m_reported_by;
}
void OAIInsolvencyNotice::setReportedBy(const QString &reported_by) {
    m_reported_by = reported_by;
    m_reported_by_isSet = true;
}

bool OAIInsolvencyNotice::is_reported_by_Set() const{
    return m_reported_by_isSet;
}

bool OAIInsolvencyNotice::is_reported_by_Valid() const{
    return m_reported_by_isValid;
}

QString OAIInsolvencyNotice::getRuling() const {
    return m_ruling;
}
void OAIInsolvencyNotice::setRuling(const QString &ruling) {
    m_ruling = ruling;
    m_ruling_isSet = true;
}

bool OAIInsolvencyNotice::is_ruling_Set() const{
    return m_ruling_isSet;
}

bool OAIInsolvencyNotice::is_ruling_Valid() const{
    return m_ruling_isValid;
}

QString OAIInsolvencyNotice::getTitle() const {
    return m_title;
}
void OAIInsolvencyNotice::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInsolvencyNotice::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInsolvencyNotice::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIInsolvencyNotice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastmod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ruling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsolvencyNotice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
