/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDefault.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDefault::OAIPaymentDefault(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDefault::OAIPaymentDefault() {
    this->initializeModel();
}

OAIPaymentDefault::~OAIPaymentDefault() {}

void OAIPaymentDefault::initializeModel() {

    m_abn_isSet = false;
    m_abn_isValid = false;

    m_account_additional_abn_isSet = false;
    m_account_additional_abn_isValid = false;

    m_account_verified_date_isSet = false;
    m_account_verified_date_isValid = false;

    m_amount_outstanding_isSet = false;
    m_amount_outstanding_isValid = false;

    m_approved_date_isSet = false;
    m_approved_date_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_default_settled_isSet = false;
    m_default_settled_isValid = false;

    m_doctype_isSet = false;
    m_doctype_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_original_invoice_date_isSet = false;
    m_original_invoice_date_isValid = false;

    m_part_payment_made_isSet = false;
    m_part_payment_made_isValid = false;

    m_partpayment_isSet = false;
    m_partpayment_isValid = false;

    m_payment_due_date_isSet = false;
    m_payment_due_date_isValid = false;

    m_poster_abn_isSet = false;
    m_poster_abn_isValid = false;

    m_poster_name_isSet = false;
    m_poster_name_isValid = false;

    m_settled_isSet = false;
    m_settled_isValid = false;

    m_uploaded_date_isSet = false;
    m_uploaded_date_isValid = false;
}

void OAIPaymentDefault::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDefault::fromJsonObject(QJsonObject json) {

    m_abn_isValid = ::OpenAPI::fromJsonValue(m_abn, json[QString("abn")]);
    m_abn_isSet = !json[QString("abn")].isNull() && m_abn_isValid;

    m_account_additional_abn_isValid = ::OpenAPI::fromJsonValue(m_account_additional_abn, json[QString("accountAdditionalAbn")]);
    m_account_additional_abn_isSet = !json[QString("accountAdditionalAbn")].isNull() && m_account_additional_abn_isValid;

    m_account_verified_date_isValid = ::OpenAPI::fromJsonValue(m_account_verified_date, json[QString("accountVerifiedDate")]);
    m_account_verified_date_isSet = !json[QString("accountVerifiedDate")].isNull() && m_account_verified_date_isValid;

    m_amount_outstanding_isValid = ::OpenAPI::fromJsonValue(m_amount_outstanding, json[QString("amountOutstanding")]);
    m_amount_outstanding_isSet = !json[QString("amountOutstanding")].isNull() && m_amount_outstanding_isValid;

    m_approved_date_isValid = ::OpenAPI::fromJsonValue(m_approved_date, json[QString("approvedDate")]);
    m_approved_date_isSet = !json[QString("approvedDate")].isNull() && m_approved_date_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_default_settled_isValid = ::OpenAPI::fromJsonValue(m_default_settled, json[QString("defaultSettled")]);
    m_default_settled_isSet = !json[QString("defaultSettled")].isNull() && m_default_settled_isValid;

    m_doctype_isValid = ::OpenAPI::fromJsonValue(m_doctype, json[QString("doctype")]);
    m_doctype_isSet = !json[QString("doctype")].isNull() && m_doctype_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_original_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_original_invoice_date, json[QString("originalInvoiceDate")]);
    m_original_invoice_date_isSet = !json[QString("originalInvoiceDate")].isNull() && m_original_invoice_date_isValid;

    m_part_payment_made_isValid = ::OpenAPI::fromJsonValue(m_part_payment_made, json[QString("partPaymentMade")]);
    m_part_payment_made_isSet = !json[QString("partPaymentMade")].isNull() && m_part_payment_made_isValid;

    m_partpayment_isValid = ::OpenAPI::fromJsonValue(m_partpayment, json[QString("partpayment")]);
    m_partpayment_isSet = !json[QString("partpayment")].isNull() && m_partpayment_isValid;

    m_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_payment_due_date, json[QString("paymentDueDate")]);
    m_payment_due_date_isSet = !json[QString("paymentDueDate")].isNull() && m_payment_due_date_isValid;

    m_poster_abn_isValid = ::OpenAPI::fromJsonValue(m_poster_abn, json[QString("posterAbn")]);
    m_poster_abn_isSet = !json[QString("posterAbn")].isNull() && m_poster_abn_isValid;

    m_poster_name_isValid = ::OpenAPI::fromJsonValue(m_poster_name, json[QString("posterName")]);
    m_poster_name_isSet = !json[QString("posterName")].isNull() && m_poster_name_isValid;

    m_settled_isValid = ::OpenAPI::fromJsonValue(m_settled, json[QString("settled")]);
    m_settled_isSet = !json[QString("settled")].isNull() && m_settled_isValid;

    m_uploaded_date_isValid = ::OpenAPI::fromJsonValue(m_uploaded_date, json[QString("uploadedDate")]);
    m_uploaded_date_isSet = !json[QString("uploadedDate")].isNull() && m_uploaded_date_isValid;
}

QString OAIPaymentDefault::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDefault::asJsonObject() const {
    QJsonObject obj;
    if (m_abn_isSet) {
        obj.insert(QString("abn"), ::OpenAPI::toJsonValue(m_abn));
    }
    if (m_account_additional_abn_isSet) {
        obj.insert(QString("accountAdditionalAbn"), ::OpenAPI::toJsonValue(m_account_additional_abn));
    }
    if (m_account_verified_date_isSet) {
        obj.insert(QString("accountVerifiedDate"), ::OpenAPI::toJsonValue(m_account_verified_date));
    }
    if (m_amount_outstanding_isSet) {
        obj.insert(QString("amountOutstanding"), ::OpenAPI::toJsonValue(m_amount_outstanding));
    }
    if (m_approved_date_isSet) {
        obj.insert(QString("approvedDate"), ::OpenAPI::toJsonValue(m_approved_date));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_default_settled_isSet) {
        obj.insert(QString("defaultSettled"), ::OpenAPI::toJsonValue(m_default_settled));
    }
    if (m_doctype_isSet) {
        obj.insert(QString("doctype"), ::OpenAPI::toJsonValue(m_doctype));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_original_invoice_date_isSet) {
        obj.insert(QString("originalInvoiceDate"), ::OpenAPI::toJsonValue(m_original_invoice_date));
    }
    if (m_part_payment_made_isSet) {
        obj.insert(QString("partPaymentMade"), ::OpenAPI::toJsonValue(m_part_payment_made));
    }
    if (m_partpayment_isSet) {
        obj.insert(QString("partpayment"), ::OpenAPI::toJsonValue(m_partpayment));
    }
    if (m_payment_due_date_isSet) {
        obj.insert(QString("paymentDueDate"), ::OpenAPI::toJsonValue(m_payment_due_date));
    }
    if (m_poster_abn_isSet) {
        obj.insert(QString("posterAbn"), ::OpenAPI::toJsonValue(m_poster_abn));
    }
    if (m_poster_name_isSet) {
        obj.insert(QString("posterName"), ::OpenAPI::toJsonValue(m_poster_name));
    }
    if (m_settled_isSet) {
        obj.insert(QString("settled"), ::OpenAPI::toJsonValue(m_settled));
    }
    if (m_uploaded_date_isSet) {
        obj.insert(QString("uploadedDate"), ::OpenAPI::toJsonValue(m_uploaded_date));
    }
    return obj;
}

QString OAIPaymentDefault::getAbn() const {
    return m_abn;
}
void OAIPaymentDefault::setAbn(const QString &abn) {
    m_abn = abn;
    m_abn_isSet = true;
}

bool OAIPaymentDefault::is_abn_Set() const{
    return m_abn_isSet;
}

bool OAIPaymentDefault::is_abn_Valid() const{
    return m_abn_isValid;
}

QString OAIPaymentDefault::getAccountAdditionalAbn() const {
    return m_account_additional_abn;
}
void OAIPaymentDefault::setAccountAdditionalAbn(const QString &account_additional_abn) {
    m_account_additional_abn = account_additional_abn;
    m_account_additional_abn_isSet = true;
}

bool OAIPaymentDefault::is_account_additional_abn_Set() const{
    return m_account_additional_abn_isSet;
}

bool OAIPaymentDefault::is_account_additional_abn_Valid() const{
    return m_account_additional_abn_isValid;
}

QDateTime OAIPaymentDefault::getAccountVerifiedDate() const {
    return m_account_verified_date;
}
void OAIPaymentDefault::setAccountVerifiedDate(const QDateTime &account_verified_date) {
    m_account_verified_date = account_verified_date;
    m_account_verified_date_isSet = true;
}

bool OAIPaymentDefault::is_account_verified_date_Set() const{
    return m_account_verified_date_isSet;
}

bool OAIPaymentDefault::is_account_verified_date_Valid() const{
    return m_account_verified_date_isValid;
}

float OAIPaymentDefault::getAmountOutstanding() const {
    return m_amount_outstanding;
}
void OAIPaymentDefault::setAmountOutstanding(const float &amount_outstanding) {
    m_amount_outstanding = amount_outstanding;
    m_amount_outstanding_isSet = true;
}

bool OAIPaymentDefault::is_amount_outstanding_Set() const{
    return m_amount_outstanding_isSet;
}

bool OAIPaymentDefault::is_amount_outstanding_Valid() const{
    return m_amount_outstanding_isValid;
}

QDateTime OAIPaymentDefault::getApprovedDate() const {
    return m_approved_date;
}
void OAIPaymentDefault::setApprovedDate(const QDateTime &approved_date) {
    m_approved_date = approved_date;
    m_approved_date_isSet = true;
}

bool OAIPaymentDefault::is_approved_date_Set() const{
    return m_approved_date_isSet;
}

bool OAIPaymentDefault::is_approved_date_Valid() const{
    return m_approved_date_isValid;
}

QString OAIPaymentDefault::getCompany() const {
    return m_company;
}
void OAIPaymentDefault::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIPaymentDefault::is_company_Set() const{
    return m_company_isSet;
}

bool OAIPaymentDefault::is_company_Valid() const{
    return m_company_isValid;
}

bool OAIPaymentDefault::isDefaultSettled() const {
    return m_default_settled;
}
void OAIPaymentDefault::setDefaultSettled(const bool &default_settled) {
    m_default_settled = default_settled;
    m_default_settled_isSet = true;
}

bool OAIPaymentDefault::is_default_settled_Set() const{
    return m_default_settled_isSet;
}

bool OAIPaymentDefault::is_default_settled_Valid() const{
    return m_default_settled_isValid;
}

QString OAIPaymentDefault::getDoctype() const {
    return m_doctype;
}
void OAIPaymentDefault::setDoctype(const QString &doctype) {
    m_doctype = doctype;
    m_doctype_isSet = true;
}

bool OAIPaymentDefault::is_doctype_Set() const{
    return m_doctype_isSet;
}

bool OAIPaymentDefault::is_doctype_Valid() const{
    return m_doctype_isValid;
}

QString OAIPaymentDefault::getDocumentType() const {
    return m_document_type;
}
void OAIPaymentDefault::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIPaymentDefault::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIPaymentDefault::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QDateTime OAIPaymentDefault::getLastUpdated() const {
    return m_last_updated;
}
void OAIPaymentDefault::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIPaymentDefault::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIPaymentDefault::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QDateTime OAIPaymentDefault::getOriginalInvoiceDate() const {
    return m_original_invoice_date;
}
void OAIPaymentDefault::setOriginalInvoiceDate(const QDateTime &original_invoice_date) {
    m_original_invoice_date = original_invoice_date;
    m_original_invoice_date_isSet = true;
}

bool OAIPaymentDefault::is_original_invoice_date_Set() const{
    return m_original_invoice_date_isSet;
}

bool OAIPaymentDefault::is_original_invoice_date_Valid() const{
    return m_original_invoice_date_isValid;
}

bool OAIPaymentDefault::isPartPaymentMade() const {
    return m_part_payment_made;
}
void OAIPaymentDefault::setPartPaymentMade(const bool &part_payment_made) {
    m_part_payment_made = part_payment_made;
    m_part_payment_made_isSet = true;
}

bool OAIPaymentDefault::is_part_payment_made_Set() const{
    return m_part_payment_made_isSet;
}

bool OAIPaymentDefault::is_part_payment_made_Valid() const{
    return m_part_payment_made_isValid;
}

bool OAIPaymentDefault::isPartpayment() const {
    return m_partpayment;
}
void OAIPaymentDefault::setPartpayment(const bool &partpayment) {
    m_partpayment = partpayment;
    m_partpayment_isSet = true;
}

bool OAIPaymentDefault::is_partpayment_Set() const{
    return m_partpayment_isSet;
}

bool OAIPaymentDefault::is_partpayment_Valid() const{
    return m_partpayment_isValid;
}

QDateTime OAIPaymentDefault::getPaymentDueDate() const {
    return m_payment_due_date;
}
void OAIPaymentDefault::setPaymentDueDate(const QDateTime &payment_due_date) {
    m_payment_due_date = payment_due_date;
    m_payment_due_date_isSet = true;
}

bool OAIPaymentDefault::is_payment_due_date_Set() const{
    return m_payment_due_date_isSet;
}

bool OAIPaymentDefault::is_payment_due_date_Valid() const{
    return m_payment_due_date_isValid;
}

QString OAIPaymentDefault::getPosterAbn() const {
    return m_poster_abn;
}
void OAIPaymentDefault::setPosterAbn(const QString &poster_abn) {
    m_poster_abn = poster_abn;
    m_poster_abn_isSet = true;
}

bool OAIPaymentDefault::is_poster_abn_Set() const{
    return m_poster_abn_isSet;
}

bool OAIPaymentDefault::is_poster_abn_Valid() const{
    return m_poster_abn_isValid;
}

QString OAIPaymentDefault::getPosterName() const {
    return m_poster_name;
}
void OAIPaymentDefault::setPosterName(const QString &poster_name) {
    m_poster_name = poster_name;
    m_poster_name_isSet = true;
}

bool OAIPaymentDefault::is_poster_name_Set() const{
    return m_poster_name_isSet;
}

bool OAIPaymentDefault::is_poster_name_Valid() const{
    return m_poster_name_isValid;
}

bool OAIPaymentDefault::isSettled() const {
    return m_settled;
}
void OAIPaymentDefault::setSettled(const bool &settled) {
    m_settled = settled;
    m_settled_isSet = true;
}

bool OAIPaymentDefault::is_settled_Set() const{
    return m_settled_isSet;
}

bool OAIPaymentDefault::is_settled_Valid() const{
    return m_settled_isValid;
}

QDateTime OAIPaymentDefault::getUploadedDate() const {
    return m_uploaded_date;
}
void OAIPaymentDefault::setUploadedDate(const QDateTime &uploaded_date) {
    m_uploaded_date = uploaded_date;
    m_uploaded_date_isSet = true;
}

bool OAIPaymentDefault::is_uploaded_date_Set() const{
    return m_uploaded_date_isSet;
}

bool OAIPaymentDefault::is_uploaded_date_Valid() const{
    return m_uploaded_date_isValid;
}

bool OAIPaymentDefault::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_additional_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_verified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_outstanding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doctype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_payment_made_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partpayment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDefault::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
