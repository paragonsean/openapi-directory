/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINonIndividualBeneficialOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINonIndividualBeneficialOwner::OAINonIndividualBeneficialOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINonIndividualBeneficialOwner::OAINonIndividualBeneficialOwner() {
    this->initializeModel();
}

OAINonIndividualBeneficialOwner::~OAINonIndividualBeneficialOwner() {}

void OAINonIndividualBeneficialOwner::initializeModel() {

    m_beneficially_held_isSet = false;
    m_beneficially_held_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percent_owned_isSet = false;
    m_percent_owned_isValid = false;

    m_stock_exchange_data_isSet = false;
    m_stock_exchange_data_isValid = false;
}

void OAINonIndividualBeneficialOwner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINonIndividualBeneficialOwner::fromJsonObject(QJsonObject json) {

    m_beneficially_held_isValid = ::OpenAPI::fromJsonValue(m_beneficially_held, json[QString("beneficially_held")]);
    m_beneficially_held_isSet = !json[QString("beneficially_held")].isNull() && m_beneficially_held_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percent_owned_isValid = ::OpenAPI::fromJsonValue(m_percent_owned, json[QString("percent_owned")]);
    m_percent_owned_isSet = !json[QString("percent_owned")].isNull() && m_percent_owned_isValid;

    m_stock_exchange_data_isValid = ::OpenAPI::fromJsonValue(m_stock_exchange_data, json[QString("stock_exchange_data")]);
    m_stock_exchange_data_isSet = !json[QString("stock_exchange_data")].isNull() && m_stock_exchange_data_isValid;
}

QString OAINonIndividualBeneficialOwner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINonIndividualBeneficialOwner::asJsonObject() const {
    QJsonObject obj;
    if (m_beneficially_held_isSet) {
        obj.insert(QString("beneficially_held"), ::OpenAPI::toJsonValue(m_beneficially_held));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percent_owned_isSet) {
        obj.insert(QString("percent_owned"), ::OpenAPI::toJsonValue(m_percent_owned));
    }
    if (m_stock_exchange_data.isSet()) {
        obj.insert(QString("stock_exchange_data"), ::OpenAPI::toJsonValue(m_stock_exchange_data));
    }
    return obj;
}

bool OAINonIndividualBeneficialOwner::isBeneficiallyHeld() const {
    return m_beneficially_held;
}
void OAINonIndividualBeneficialOwner::setBeneficiallyHeld(const bool &beneficially_held) {
    m_beneficially_held = beneficially_held;
    m_beneficially_held_isSet = true;
}

bool OAINonIndividualBeneficialOwner::is_beneficially_held_Set() const{
    return m_beneficially_held_isSet;
}

bool OAINonIndividualBeneficialOwner::is_beneficially_held_Valid() const{
    return m_beneficially_held_isValid;
}

QString OAINonIndividualBeneficialOwner::getEntityType() const {
    return m_entity_type;
}
void OAINonIndividualBeneficialOwner::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAINonIndividualBeneficialOwner::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAINonIndividualBeneficialOwner::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAINonIndividualBeneficialOwner::getName() const {
    return m_name;
}
void OAINonIndividualBeneficialOwner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINonIndividualBeneficialOwner::is_name_Set() const{
    return m_name_isSet;
}

bool OAINonIndividualBeneficialOwner::is_name_Valid() const{
    return m_name_isValid;
}

float OAINonIndividualBeneficialOwner::getPercentOwned() const {
    return m_percent_owned;
}
void OAINonIndividualBeneficialOwner::setPercentOwned(const float &percent_owned) {
    m_percent_owned = percent_owned;
    m_percent_owned_isSet = true;
}

bool OAINonIndividualBeneficialOwner::is_percent_owned_Set() const{
    return m_percent_owned_isSet;
}

bool OAINonIndividualBeneficialOwner::is_percent_owned_Valid() const{
    return m_percent_owned_isValid;
}

OAIStockExchangeData OAINonIndividualBeneficialOwner::getStockExchangeData() const {
    return m_stock_exchange_data;
}
void OAINonIndividualBeneficialOwner::setStockExchangeData(const OAIStockExchangeData &stock_exchange_data) {
    m_stock_exchange_data = stock_exchange_data;
    m_stock_exchange_data_isSet = true;
}

bool OAINonIndividualBeneficialOwner::is_stock_exchange_data_Set() const{
    return m_stock_exchange_data_isSet;
}

bool OAINonIndividualBeneficialOwner::is_stock_exchange_data_Valid() const{
    return m_stock_exchange_data_isValid;
}

bool OAINonIndividualBeneficialOwner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beneficially_held_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_exchange_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINonIndividualBeneficialOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_beneficially_held_isValid && m_percent_owned_isValid && true;
}

} // namespace OpenAPI
