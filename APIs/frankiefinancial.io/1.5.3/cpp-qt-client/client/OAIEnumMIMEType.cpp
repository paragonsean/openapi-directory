/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumMIMEType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumMIMEType::OAIEnumMIMEType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumMIMEType::OAIEnumMIMEType() {
    this->initializeModel();
}

OAIEnumMIMEType::~OAIEnumMIMEType() {}

void OAIEnumMIMEType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnumMIMEType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnumMIMEType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("image/jpeg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_JPEG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image/png", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_PNG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image/gif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_GIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image/webp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_WEBP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image/tiff", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_TIFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("image/bmp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::IMAGE_BMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/zip", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_ZIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/x-tar", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_X_TAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/x-rar-compressed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_X_RAR_COMPRESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/gzip", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_GZIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/x-bzip2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_X_BZIP2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/x-7z-compressed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_X_7Z_COMPRESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/pdf", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_PDF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/rtf", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_RTF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/postscript", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_POSTSCRIPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/json", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_JSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audio/mpeg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::AUDIO_MPEG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audio/m4a", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::AUDIO_M4A;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audio/x-wav", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::AUDIO_X_WAV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("audio/amr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::AUDIO_AMR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/msword", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_MSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/vnd.openxmlformats-officedocument.wordprocessingml.document", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/vnd.ms-excel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_VND_MS_EXCEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/vnd.ms-powerpoint", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_VND_MS_POWERPOINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("application/vnd.openxmlformats-officedocument.presentationml.presentation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/mp4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_MP4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/webm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_WEBM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/quicktime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_QUICKTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/x-msvideo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_X_MSVIDEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/x-ms-wmv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_X_MS_WMV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("video/mpeg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumMIMEType::VIDEO_MPEG;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnumMIMEType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnumMIMEType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnumMIMEType::IMAGE_JPEG:
            val = "image/jpeg";
            break;
        case eOAIEnumMIMEType::IMAGE_PNG:
            val = "image/png";
            break;
        case eOAIEnumMIMEType::IMAGE_GIF:
            val = "image/gif";
            break;
        case eOAIEnumMIMEType::IMAGE_WEBP:
            val = "image/webp";
            break;
        case eOAIEnumMIMEType::IMAGE_TIFF:
            val = "image/tiff";
            break;
        case eOAIEnumMIMEType::IMAGE_BMP:
            val = "image/bmp";
            break;
        case eOAIEnumMIMEType::APPLICATION_ZIP:
            val = "application/zip";
            break;
        case eOAIEnumMIMEType::APPLICATION_X_TAR:
            val = "application/x-tar";
            break;
        case eOAIEnumMIMEType::APPLICATION_X_RAR_COMPRESSED:
            val = "application/x-rar-compressed";
            break;
        case eOAIEnumMIMEType::APPLICATION_GZIP:
            val = "application/gzip";
            break;
        case eOAIEnumMIMEType::APPLICATION_X_BZIP2:
            val = "application/x-bzip2";
            break;
        case eOAIEnumMIMEType::APPLICATION_X_7Z_COMPRESSED:
            val = "application/x-7z-compressed";
            break;
        case eOAIEnumMIMEType::APPLICATION_PDF:
            val = "application/pdf";
            break;
        case eOAIEnumMIMEType::APPLICATION_RTF:
            val = "application/rtf";
            break;
        case eOAIEnumMIMEType::APPLICATION_POSTSCRIPT:
            val = "application/postscript";
            break;
        case eOAIEnumMIMEType::APPLICATION_JSON:
            val = "application/json";
            break;
        case eOAIEnumMIMEType::AUDIO_MPEG:
            val = "audio/mpeg";
            break;
        case eOAIEnumMIMEType::AUDIO_M4A:
            val = "audio/m4a";
            break;
        case eOAIEnumMIMEType::AUDIO_X_WAV:
            val = "audio/x-wav";
            break;
        case eOAIEnumMIMEType::AUDIO_AMR:
            val = "audio/amr";
            break;
        case eOAIEnumMIMEType::APPLICATION_MSWORD:
            val = "application/msword";
            break;
        case eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT:
            val = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            break;
        case eOAIEnumMIMEType::APPLICATION_VND_MS_EXCEL:
            val = "application/vnd.ms-excel";
            break;
        case eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET:
            val = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            break;
        case eOAIEnumMIMEType::APPLICATION_VND_MS_POWERPOINT:
            val = "application/vnd.ms-powerpoint";
            break;
        case eOAIEnumMIMEType::APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION:
            val = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
            break;
        case eOAIEnumMIMEType::VIDEO_MP4:
            val = "video/mp4";
            break;
        case eOAIEnumMIMEType::VIDEO_WEBM:
            val = "video/webm";
            break;
        case eOAIEnumMIMEType::VIDEO_QUICKTIME:
            val = "video/quicktime";
            break;
        case eOAIEnumMIMEType::VIDEO_X_MSVIDEO:
            val = "video/x-msvideo";
            break;
        case eOAIEnumMIMEType::VIDEO_X_MS_WMV:
            val = "video/x-ms-wmv";
            break;
        case eOAIEnumMIMEType::VIDEO_MPEG:
            val = "video/mpeg";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnumMIMEType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnumMIMEType::eOAIEnumMIMEType OAIEnumMIMEType::getValue() const {
    return m_value;
}

void OAIEnumMIMEType::setValue(const OAIEnumMIMEType::eOAIEnumMIMEType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnumMIMEType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnumMIMEType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
