/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapitalReserves.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapitalReserves::OAICapitalReserves(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapitalReserves::OAICapitalReserves() {
    this->initializeModel();
}

OAICapitalReserves::~OAICapitalReserves() {}

void OAICapitalReserves::initializeModel() {

    m_capitalreserves_isSet = false;
    m_capitalreserves_isValid = false;

    m_networth_isSet = false;
    m_networth_isValid = false;

    m_paidupequity_isSet = false;
    m_paidupequity_isValid = false;

    m_profitlossreserve_isSet = false;
    m_profitlossreserve_isValid = false;

    m_reserves_isSet = false;
    m_reserves_isValid = false;

    m_revalutationreserve_isSet = false;
    m_revalutationreserve_isValid = false;

    m_shareholderfunds_isSet = false;
    m_shareholderfunds_isValid = false;

    m_sundryreserves_isSet = false;
    m_sundryreserves_isValid = false;
}

void OAICapitalReserves::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapitalReserves::fromJsonObject(QJsonObject json) {

    m_capitalreserves_isValid = ::OpenAPI::fromJsonValue(m_capitalreserves, json[QString("capitalreserves")]);
    m_capitalreserves_isSet = !json[QString("capitalreserves")].isNull() && m_capitalreserves_isValid;

    m_networth_isValid = ::OpenAPI::fromJsonValue(m_networth, json[QString("networth")]);
    m_networth_isSet = !json[QString("networth")].isNull() && m_networth_isValid;

    m_paidupequity_isValid = ::OpenAPI::fromJsonValue(m_paidupequity, json[QString("paidupequity")]);
    m_paidupequity_isSet = !json[QString("paidupequity")].isNull() && m_paidupequity_isValid;

    m_profitlossreserve_isValid = ::OpenAPI::fromJsonValue(m_profitlossreserve, json[QString("profitlossreserve")]);
    m_profitlossreserve_isSet = !json[QString("profitlossreserve")].isNull() && m_profitlossreserve_isValid;

    m_reserves_isValid = ::OpenAPI::fromJsonValue(m_reserves, json[QString("reserves")]);
    m_reserves_isSet = !json[QString("reserves")].isNull() && m_reserves_isValid;

    m_revalutationreserve_isValid = ::OpenAPI::fromJsonValue(m_revalutationreserve, json[QString("revalutationreserve")]);
    m_revalutationreserve_isSet = !json[QString("revalutationreserve")].isNull() && m_revalutationreserve_isValid;

    m_shareholderfunds_isValid = ::OpenAPI::fromJsonValue(m_shareholderfunds, json[QString("shareholderfunds")]);
    m_shareholderfunds_isSet = !json[QString("shareholderfunds")].isNull() && m_shareholderfunds_isValid;

    m_sundryreserves_isValid = ::OpenAPI::fromJsonValue(m_sundryreserves, json[QString("sundryreserves")]);
    m_sundryreserves_isSet = !json[QString("sundryreserves")].isNull() && m_sundryreserves_isValid;
}

QString OAICapitalReserves::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapitalReserves::asJsonObject() const {
    QJsonObject obj;
    if (m_capitalreserves_isSet) {
        obj.insert(QString("capitalreserves"), ::OpenAPI::toJsonValue(m_capitalreserves));
    }
    if (m_networth_isSet) {
        obj.insert(QString("networth"), ::OpenAPI::toJsonValue(m_networth));
    }
    if (m_paidupequity_isSet) {
        obj.insert(QString("paidupequity"), ::OpenAPI::toJsonValue(m_paidupequity));
    }
    if (m_profitlossreserve_isSet) {
        obj.insert(QString("profitlossreserve"), ::OpenAPI::toJsonValue(m_profitlossreserve));
    }
    if (m_reserves_isSet) {
        obj.insert(QString("reserves"), ::OpenAPI::toJsonValue(m_reserves));
    }
    if (m_revalutationreserve_isSet) {
        obj.insert(QString("revalutationreserve"), ::OpenAPI::toJsonValue(m_revalutationreserve));
    }
    if (m_shareholderfunds_isSet) {
        obj.insert(QString("shareholderfunds"), ::OpenAPI::toJsonValue(m_shareholderfunds));
    }
    if (m_sundryreserves_isSet) {
        obj.insert(QString("sundryreserves"), ::OpenAPI::toJsonValue(m_sundryreserves));
    }
    return obj;
}

QString OAICapitalReserves::getCapitalreserves() const {
    return m_capitalreserves;
}
void OAICapitalReserves::setCapitalreserves(const QString &capitalreserves) {
    m_capitalreserves = capitalreserves;
    m_capitalreserves_isSet = true;
}

bool OAICapitalReserves::is_capitalreserves_Set() const{
    return m_capitalreserves_isSet;
}

bool OAICapitalReserves::is_capitalreserves_Valid() const{
    return m_capitalreserves_isValid;
}

QString OAICapitalReserves::getNetworth() const {
    return m_networth;
}
void OAICapitalReserves::setNetworth(const QString &networth) {
    m_networth = networth;
    m_networth_isSet = true;
}

bool OAICapitalReserves::is_networth_Set() const{
    return m_networth_isSet;
}

bool OAICapitalReserves::is_networth_Valid() const{
    return m_networth_isValid;
}

QString OAICapitalReserves::getPaidupequity() const {
    return m_paidupequity;
}
void OAICapitalReserves::setPaidupequity(const QString &paidupequity) {
    m_paidupequity = paidupequity;
    m_paidupequity_isSet = true;
}

bool OAICapitalReserves::is_paidupequity_Set() const{
    return m_paidupequity_isSet;
}

bool OAICapitalReserves::is_paidupequity_Valid() const{
    return m_paidupequity_isValid;
}

QString OAICapitalReserves::getProfitlossreserve() const {
    return m_profitlossreserve;
}
void OAICapitalReserves::setProfitlossreserve(const QString &profitlossreserve) {
    m_profitlossreserve = profitlossreserve;
    m_profitlossreserve_isSet = true;
}

bool OAICapitalReserves::is_profitlossreserve_Set() const{
    return m_profitlossreserve_isSet;
}

bool OAICapitalReserves::is_profitlossreserve_Valid() const{
    return m_profitlossreserve_isValid;
}

QString OAICapitalReserves::getReserves() const {
    return m_reserves;
}
void OAICapitalReserves::setReserves(const QString &reserves) {
    m_reserves = reserves;
    m_reserves_isSet = true;
}

bool OAICapitalReserves::is_reserves_Set() const{
    return m_reserves_isSet;
}

bool OAICapitalReserves::is_reserves_Valid() const{
    return m_reserves_isValid;
}

QString OAICapitalReserves::getRevalutationreserve() const {
    return m_revalutationreserve;
}
void OAICapitalReserves::setRevalutationreserve(const QString &revalutationreserve) {
    m_revalutationreserve = revalutationreserve;
    m_revalutationreserve_isSet = true;
}

bool OAICapitalReserves::is_revalutationreserve_Set() const{
    return m_revalutationreserve_isSet;
}

bool OAICapitalReserves::is_revalutationreserve_Valid() const{
    return m_revalutationreserve_isValid;
}

QString OAICapitalReserves::getShareholderfunds() const {
    return m_shareholderfunds;
}
void OAICapitalReserves::setShareholderfunds(const QString &shareholderfunds) {
    m_shareholderfunds = shareholderfunds;
    m_shareholderfunds_isSet = true;
}

bool OAICapitalReserves::is_shareholderfunds_Set() const{
    return m_shareholderfunds_isSet;
}

bool OAICapitalReserves::is_shareholderfunds_Valid() const{
    return m_shareholderfunds_isValid;
}

QString OAICapitalReserves::getSundryreserves() const {
    return m_sundryreserves;
}
void OAICapitalReserves::setSundryreserves(const QString &sundryreserves) {
    m_sundryreserves = sundryreserves;
    m_sundryreserves_isSet = true;
}

bool OAICapitalReserves::is_sundryreserves_Set() const{
    return m_sundryreserves_isSet;
}

bool OAICapitalReserves::is_sundryreserves_Valid() const{
    return m_sundryreserves_isValid;
}

bool OAICapitalReserves::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capitalreserves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paidupequity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profitlossreserve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserves_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revalutationreserve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholderfunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sundryreserves_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapitalReserves::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
