/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirector::OAIDirector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirector::OAIDirector() {
    this->initializeModel();
}

OAIDirector::~OAIDirector() {}

void OAIDirector::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_address5_isSet = false;
    m_address5_isValid = false;

    m_address6_isSet = false;
    m_address6_isValid = false;

    m_birthdate_isSet = false;
    m_birthdate_isValid = false;

    m_director_number_isSet = false;
    m_director_number_isValid = false;

    m_directorships_isSet = false;
    m_directorships_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDirector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirector::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("address3")]);
    m_address3_isSet = !json[QString("address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("address4")]);
    m_address4_isSet = !json[QString("address4")].isNull() && m_address4_isValid;

    m_address5_isValid = ::OpenAPI::fromJsonValue(m_address5, json[QString("address5")]);
    m_address5_isSet = !json[QString("address5")].isNull() && m_address5_isValid;

    m_address6_isValid = ::OpenAPI::fromJsonValue(m_address6, json[QString("address6")]);
    m_address6_isSet = !json[QString("address6")].isNull() && m_address6_isValid;

    m_birthdate_isValid = ::OpenAPI::fromJsonValue(m_birthdate, json[QString("birthdate")]);
    m_birthdate_isSet = !json[QString("birthdate")].isNull() && m_birthdate_isValid;

    m_director_number_isValid = ::OpenAPI::fromJsonValue(m_director_number, json[QString("directorNumber")]);
    m_director_number_isSet = !json[QString("directorNumber")].isNull() && m_director_number_isValid;

    m_directorships_isValid = ::OpenAPI::fromJsonValue(m_directorships, json[QString("directorships")]);
    m_directorships_isSet = !json[QString("directorships")].isNull() && m_directorships_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDirector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirector::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_address5_isSet) {
        obj.insert(QString("address5"), ::OpenAPI::toJsonValue(m_address5));
    }
    if (m_address6_isSet) {
        obj.insert(QString("address6"), ::OpenAPI::toJsonValue(m_address6));
    }
    if (m_birthdate_isSet) {
        obj.insert(QString("birthdate"), ::OpenAPI::toJsonValue(m_birthdate));
    }
    if (m_director_number_isSet) {
        obj.insert(QString("directorNumber"), ::OpenAPI::toJsonValue(m_director_number));
    }
    if (m_directorships.isSet()) {
        obj.insert(QString("directorships"), ::OpenAPI::toJsonValue(m_directorships));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIDirector::getAddress1() const {
    return m_address1;
}
void OAIDirector::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIDirector::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIDirector::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIDirector::getAddress2() const {
    return m_address2;
}
void OAIDirector::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIDirector::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIDirector::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIDirector::getAddress3() const {
    return m_address3;
}
void OAIDirector::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIDirector::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIDirector::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIDirector::getAddress4() const {
    return m_address4;
}
void OAIDirector::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAIDirector::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAIDirector::is_address4_Valid() const{
    return m_address4_isValid;
}

QString OAIDirector::getAddress5() const {
    return m_address5;
}
void OAIDirector::setAddress5(const QString &address5) {
    m_address5 = address5;
    m_address5_isSet = true;
}

bool OAIDirector::is_address5_Set() const{
    return m_address5_isSet;
}

bool OAIDirector::is_address5_Valid() const{
    return m_address5_isValid;
}

QString OAIDirector::getAddress6() const {
    return m_address6;
}
void OAIDirector::setAddress6(const QString &address6) {
    m_address6 = address6;
    m_address6_isSet = true;
}

bool OAIDirector::is_address6_Set() const{
    return m_address6_isSet;
}

bool OAIDirector::is_address6_Valid() const{
    return m_address6_isValid;
}

QString OAIDirector::getBirthdate() const {
    return m_birthdate;
}
void OAIDirector::setBirthdate(const QString &birthdate) {
    m_birthdate = birthdate;
    m_birthdate_isSet = true;
}

bool OAIDirector::is_birthdate_Set() const{
    return m_birthdate_isSet;
}

bool OAIDirector::is_birthdate_Valid() const{
    return m_birthdate_isValid;
}

QString OAIDirector::getDirectorNumber() const {
    return m_director_number;
}
void OAIDirector::setDirectorNumber(const QString &director_number) {
    m_director_number = director_number;
    m_director_number_isSet = true;
}

bool OAIDirector::is_director_number_Set() const{
    return m_director_number_isSet;
}

bool OAIDirector::is_director_number_Valid() const{
    return m_director_number_isValid;
}

OAIArrayOfDirectorship OAIDirector::getDirectorships() const {
    return m_directorships;
}
void OAIDirector::setDirectorships(const OAIArrayOfDirectorship &directorships) {
    m_directorships = directorships;
    m_directorships_isSet = true;
}

bool OAIDirector::is_directorships_Set() const{
    return m_directorships_isSet;
}

bool OAIDirector::is_directorships_Valid() const{
    return m_directorships_isValid;
}

QString OAIDirector::getName() const {
    return m_name;
}
void OAIDirector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDirector::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDirector::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDirector::getNationality() const {
    return m_nationality;
}
void OAIDirector::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIDirector::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIDirector::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIDirector::getPostcode() const {
    return m_postcode;
}
void OAIDirector::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIDirector::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIDirector::is_postcode_Valid() const{
    return m_postcode_isValid;
}

QString OAIDirector::getTitle() const {
    return m_title;
}
void OAIDirector::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDirector::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDirector::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDirector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthdate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_director_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directorships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
