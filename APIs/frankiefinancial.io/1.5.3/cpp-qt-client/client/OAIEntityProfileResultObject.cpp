/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityProfileResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityProfileResultObject::OAIEntityProfileResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityProfileResultObject::OAIEntityProfileResultObject() {
    this->initializeModel();
}

OAIEntityProfileResultObject::~OAIEntityProfileResultObject() {}

void OAIEntityProfileResultObject::initializeModel() {

    m_action_recommended_isSet = false;
    m_action_recommended_isValid = false;

    m_address_results_isSet = false;
    m_address_results_isValid = false;

    m_check_id_isSet = false;
    m_check_id_isValid = false;

    m_check_results_isSet = false;
    m_check_results_isValid = false;

    m_check_type_isSet = false;
    m_check_type_isValid = false;

    m_credit_header_failures_isSet = false;
    m_credit_header_failures_isValid = false;

    m_document_results_isSet = false;
    m_document_results_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_issue_list_isSet = false;
    m_issue_list_isValid = false;

    m_kyc_results_isSet = false;
    m_kyc_results_isValid = false;

    m_latest_check_date_isSet = false;
    m_latest_check_date_isValid = false;

    m_manual_intervention_isSet = false;
    m_manual_intervention_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_resolver_recommended_isSet = false;
    m_resolver_recommended_isValid = false;

    m_risk_level_isSet = false;
    m_risk_level_isValid = false;

    m_risk_policy_isSet = false;
    m_risk_policy_isValid = false;
}

void OAIEntityProfileResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityProfileResultObject::fromJsonObject(QJsonObject json) {

    m_action_recommended_isValid = ::OpenAPI::fromJsonValue(m_action_recommended, json[QString("actionRecommended")]);
    m_action_recommended_isSet = !json[QString("actionRecommended")].isNull() && m_action_recommended_isValid;

    m_address_results_isValid = ::OpenAPI::fromJsonValue(m_address_results, json[QString("addressResults")]);
    m_address_results_isSet = !json[QString("addressResults")].isNull() && m_address_results_isValid;

    m_check_id_isValid = ::OpenAPI::fromJsonValue(m_check_id, json[QString("checkId")]);
    m_check_id_isSet = !json[QString("checkId")].isNull() && m_check_id_isValid;

    m_check_results_isValid = ::OpenAPI::fromJsonValue(m_check_results, json[QString("checkResults")]);
    m_check_results_isSet = !json[QString("checkResults")].isNull() && m_check_results_isValid;

    m_check_type_isValid = ::OpenAPI::fromJsonValue(m_check_type, json[QString("checkType")]);
    m_check_type_isSet = !json[QString("checkType")].isNull() && m_check_type_isValid;

    m_credit_header_failures_isValid = ::OpenAPI::fromJsonValue(m_credit_header_failures, json[QString("creditHeaderFailures")]);
    m_credit_header_failures_isSet = !json[QString("creditHeaderFailures")].isNull() && m_credit_header_failures_isValid;

    m_document_results_isValid = ::OpenAPI::fromJsonValue(m_document_results, json[QString("documentResults")]);
    m_document_results_isSet = !json[QString("documentResults")].isNull() && m_document_results_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_issue_list_isValid = ::OpenAPI::fromJsonValue(m_issue_list, json[QString("issueList")]);
    m_issue_list_isSet = !json[QString("issueList")].isNull() && m_issue_list_isValid;

    m_kyc_results_isValid = ::OpenAPI::fromJsonValue(m_kyc_results, json[QString("kycResults")]);
    m_kyc_results_isSet = !json[QString("kycResults")].isNull() && m_kyc_results_isValid;

    m_latest_check_date_isValid = ::OpenAPI::fromJsonValue(m_latest_check_date, json[QString("latestCheckDate")]);
    m_latest_check_date_isSet = !json[QString("latestCheckDate")].isNull() && m_latest_check_date_isValid;

    m_manual_intervention_isValid = ::OpenAPI::fromJsonValue(m_manual_intervention, json[QString("manualIntervention")]);
    m_manual_intervention_isSet = !json[QString("manualIntervention")].isNull() && m_manual_intervention_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_resolver_recommended_isValid = ::OpenAPI::fromJsonValue(m_resolver_recommended, json[QString("resolverRecommended")]);
    m_resolver_recommended_isSet = !json[QString("resolverRecommended")].isNull() && m_resolver_recommended_isValid;

    m_risk_level_isValid = ::OpenAPI::fromJsonValue(m_risk_level, json[QString("riskLevel")]);
    m_risk_level_isSet = !json[QString("riskLevel")].isNull() && m_risk_level_isValid;

    m_risk_policy_isValid = ::OpenAPI::fromJsonValue(m_risk_policy, json[QString("riskPolicy")]);
    m_risk_policy_isSet = !json[QString("riskPolicy")].isNull() && m_risk_policy_isValid;
}

QString OAIEntityProfileResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityProfileResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_action_recommended_isSet) {
        obj.insert(QString("actionRecommended"), ::OpenAPI::toJsonValue(m_action_recommended));
    }
    if (m_address_results.size() > 0) {
        obj.insert(QString("addressResults"), ::OpenAPI::toJsonValue(m_address_results));
    }
    if (m_check_id_isSet) {
        obj.insert(QString("checkId"), ::OpenAPI::toJsonValue(m_check_id));
    }
    if (m_check_results.size() > 0) {
        obj.insert(QString("checkResults"), ::OpenAPI::toJsonValue(m_check_results));
    }
    if (m_check_type_isSet) {
        obj.insert(QString("checkType"), ::OpenAPI::toJsonValue(m_check_type));
    }
    if (m_credit_header_failures.size() > 0) {
        obj.insert(QString("creditHeaderFailures"), ::OpenAPI::toJsonValue(m_credit_header_failures));
    }
    if (m_document_results.size() > 0) {
        obj.insert(QString("documentResults"), ::OpenAPI::toJsonValue(m_document_results));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_issue_list.size() > 0) {
        obj.insert(QString("issueList"), ::OpenAPI::toJsonValue(m_issue_list));
    }
    if (m_kyc_results.size() > 0) {
        obj.insert(QString("kycResults"), ::OpenAPI::toJsonValue(m_kyc_results));
    }
    if (m_latest_check_date_isSet) {
        obj.insert(QString("latestCheckDate"), ::OpenAPI::toJsonValue(m_latest_check_date));
    }
    if (m_manual_intervention_isSet) {
        obj.insert(QString("manualIntervention"), ::OpenAPI::toJsonValue(m_manual_intervention));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_resolver_recommended_isSet) {
        obj.insert(QString("resolverRecommended"), ::OpenAPI::toJsonValue(m_resolver_recommended));
    }
    if (m_risk_level_isSet) {
        obj.insert(QString("riskLevel"), ::OpenAPI::toJsonValue(m_risk_level));
    }
    if (m_risk_policy_isSet) {
        obj.insert(QString("riskPolicy"), ::OpenAPI::toJsonValue(m_risk_policy));
    }
    return obj;
}

QString OAIEntityProfileResultObject::getActionRecommended() const {
    return m_action_recommended;
}
void OAIEntityProfileResultObject::setActionRecommended(const QString &action_recommended) {
    m_action_recommended = action_recommended;
    m_action_recommended_isSet = true;
}

bool OAIEntityProfileResultObject::is_action_recommended_Set() const{
    return m_action_recommended_isSet;
}

bool OAIEntityProfileResultObject::is_action_recommended_Valid() const{
    return m_action_recommended_isValid;
}

QMap<QString, OAIEntityProfileItemMatchResultObject> OAIEntityProfileResultObject::getAddressResults() const {
    return m_address_results;
}
void OAIEntityProfileResultObject::setAddressResults(const QMap<QString, OAIEntityProfileItemMatchResultObject> &address_results) {
    m_address_results = address_results;
    m_address_results_isSet = true;
}

bool OAIEntityProfileResultObject::is_address_results_Set() const{
    return m_address_results_isSet;
}

bool OAIEntityProfileResultObject::is_address_results_Valid() const{
    return m_address_results_isValid;
}

QString OAIEntityProfileResultObject::getCheckId() const {
    return m_check_id;
}
void OAIEntityProfileResultObject::setCheckId(const QString &check_id) {
    m_check_id = check_id;
    m_check_id_isSet = true;
}

bool OAIEntityProfileResultObject::is_check_id_Set() const{
    return m_check_id_isSet;
}

bool OAIEntityProfileResultObject::is_check_id_Valid() const{
    return m_check_id_isValid;
}

QList<OAIEntityProfileCheckResultMessage> OAIEntityProfileResultObject::getCheckResults() const {
    return m_check_results;
}
void OAIEntityProfileResultObject::setCheckResults(const QList<OAIEntityProfileCheckResultMessage> &check_results) {
    m_check_results = check_results;
    m_check_results_isSet = true;
}

bool OAIEntityProfileResultObject::is_check_results_Set() const{
    return m_check_results_isSet;
}

bool OAIEntityProfileResultObject::is_check_results_Valid() const{
    return m_check_results_isValid;
}

QString OAIEntityProfileResultObject::getCheckType() const {
    return m_check_type;
}
void OAIEntityProfileResultObject::setCheckType(const QString &check_type) {
    m_check_type = check_type;
    m_check_type_isSet = true;
}

bool OAIEntityProfileResultObject::is_check_type_Set() const{
    return m_check_type_isSet;
}

bool OAIEntityProfileResultObject::is_check_type_Valid() const{
    return m_check_type_isValid;
}

QList<QString> OAIEntityProfileResultObject::getCreditHeaderFailures() const {
    return m_credit_header_failures;
}
void OAIEntityProfileResultObject::setCreditHeaderFailures(const QList<QString> &credit_header_failures) {
    m_credit_header_failures = credit_header_failures;
    m_credit_header_failures_isSet = true;
}

bool OAIEntityProfileResultObject::is_credit_header_failures_Set() const{
    return m_credit_header_failures_isSet;
}

bool OAIEntityProfileResultObject::is_credit_header_failures_Valid() const{
    return m_credit_header_failures_isValid;
}

QMap<QString, OAIEntityProfileItemMatchResultObject> OAIEntityProfileResultObject::getDocumentResults() const {
    return m_document_results;
}
void OAIEntityProfileResultObject::setDocumentResults(const QMap<QString, OAIEntityProfileItemMatchResultObject> &document_results) {
    m_document_results = document_results;
    m_document_results_isSet = true;
}

bool OAIEntityProfileResultObject::is_document_results_Set() const{
    return m_document_results_isSet;
}

bool OAIEntityProfileResultObject::is_document_results_Valid() const{
    return m_document_results_isValid;
}

QString OAIEntityProfileResultObject::getEntityId() const {
    return m_entity_id;
}
void OAIEntityProfileResultObject::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEntityProfileResultObject::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEntityProfileResultObject::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QList<QString> OAIEntityProfileResultObject::getIssueList() const {
    return m_issue_list;
}
void OAIEntityProfileResultObject::setIssueList(const QList<QString> &issue_list) {
    m_issue_list = issue_list;
    m_issue_list_isSet = true;
}

bool OAIEntityProfileResultObject::is_issue_list_Set() const{
    return m_issue_list_isSet;
}

bool OAIEntityProfileResultObject::is_issue_list_Valid() const{
    return m_issue_list_isValid;
}

QList<OAIEntityProfileKYCMatchResultObject> OAIEntityProfileResultObject::getKycResults() const {
    return m_kyc_results;
}
void OAIEntityProfileResultObject::setKycResults(const QList<OAIEntityProfileKYCMatchResultObject> &kyc_results) {
    m_kyc_results = kyc_results;
    m_kyc_results_isSet = true;
}

bool OAIEntityProfileResultObject::is_kyc_results_Set() const{
    return m_kyc_results_isSet;
}

bool OAIEntityProfileResultObject::is_kyc_results_Valid() const{
    return m_kyc_results_isValid;
}

QDateTime OAIEntityProfileResultObject::getLatestCheckDate() const {
    return m_latest_check_date;
}
void OAIEntityProfileResultObject::setLatestCheckDate(const QDateTime &latest_check_date) {
    m_latest_check_date = latest_check_date;
    m_latest_check_date_isSet = true;
}

bool OAIEntityProfileResultObject::is_latest_check_date_Set() const{
    return m_latest_check_date_isSet;
}

bool OAIEntityProfileResultObject::is_latest_check_date_Valid() const{
    return m_latest_check_date_isValid;
}

bool OAIEntityProfileResultObject::isManualIntervention() const {
    return m_manual_intervention;
}
void OAIEntityProfileResultObject::setManualIntervention(const bool &manual_intervention) {
    m_manual_intervention = manual_intervention;
    m_manual_intervention_isSet = true;
}

bool OAIEntityProfileResultObject::is_manual_intervention_Set() const{
    return m_manual_intervention_isSet;
}

bool OAIEntityProfileResultObject::is_manual_intervention_Valid() const{
    return m_manual_intervention_isValid;
}

QString OAIEntityProfileResultObject::getPolicyName() const {
    return m_policy_name;
}
void OAIEntityProfileResultObject::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIEntityProfileResultObject::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIEntityProfileResultObject::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QString OAIEntityProfileResultObject::getProfileName() const {
    return m_profile_name;
}
void OAIEntityProfileResultObject::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIEntityProfileResultObject::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIEntityProfileResultObject::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIEntityProfileResultObject::getResolverRecommended() const {
    return m_resolver_recommended;
}
void OAIEntityProfileResultObject::setResolverRecommended(const QString &resolver_recommended) {
    m_resolver_recommended = resolver_recommended;
    m_resolver_recommended_isSet = true;
}

bool OAIEntityProfileResultObject::is_resolver_recommended_Set() const{
    return m_resolver_recommended_isSet;
}

bool OAIEntityProfileResultObject::is_resolver_recommended_Valid() const{
    return m_resolver_recommended_isValid;
}

QString OAIEntityProfileResultObject::getRiskLevel() const {
    return m_risk_level;
}
void OAIEntityProfileResultObject::setRiskLevel(const QString &risk_level) {
    m_risk_level = risk_level;
    m_risk_level_isSet = true;
}

bool OAIEntityProfileResultObject::is_risk_level_Set() const{
    return m_risk_level_isSet;
}

bool OAIEntityProfileResultObject::is_risk_level_Valid() const{
    return m_risk_level_isValid;
}

QString OAIEntityProfileResultObject::getRiskPolicy() const {
    return m_risk_policy;
}
void OAIEntityProfileResultObject::setRiskPolicy(const QString &risk_policy) {
    m_risk_policy = risk_policy;
    m_risk_policy_isSet = true;
}

bool OAIEntityProfileResultObject::is_risk_policy_Set() const{
    return m_risk_policy_isSet;
}

bool OAIEntityProfileResultObject::is_risk_policy_Valid() const{
    return m_risk_policy_isValid;
}

bool OAIEntityProfileResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_recommended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_header_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kyc_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_intervention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolver_recommended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityProfileResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
