/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackgroundCheckResultObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackgroundCheckResultObject::OAIBackgroundCheckResultObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackgroundCheckResultObject::OAIBackgroundCheckResultObject() {
    this->initializeModel();
}

OAIBackgroundCheckResultObject::~OAIBackgroundCheckResultObject() {}

void OAIBackgroundCheckResultObject::initializeModel() {

    m_background_check_type_isSet = false;
    m_background_check_type_isValid = false;

    m_check_details_isSet = false;
    m_check_details_isValid = false;

    m_check_frequency_isSet = false;
    m_check_frequency_isValid = false;

    m_check_id_isSet = false;
    m_check_id_isValid = false;

    m_check_performed_by_isSet = false;
    m_check_performed_by_isValid = false;

    m_check_source_isSet = false;
    m_check_source_isValid = false;

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_first_check_date_isSet = false;
    m_first_check_date_isValid = false;

    m_latest_check_date_isSet = false;
    m_latest_check_date_isValid = false;
}

void OAIBackgroundCheckResultObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackgroundCheckResultObject::fromJsonObject(QJsonObject json) {

    m_background_check_type_isValid = ::OpenAPI::fromJsonValue(m_background_check_type, json[QString("backgroundCheckType")]);
    m_background_check_type_isSet = !json[QString("backgroundCheckType")].isNull() && m_background_check_type_isValid;

    m_check_details_isValid = ::OpenAPI::fromJsonValue(m_check_details, json[QString("checkDetails")]);
    m_check_details_isSet = !json[QString("checkDetails")].isNull() && m_check_details_isValid;

    m_check_frequency_isValid = ::OpenAPI::fromJsonValue(m_check_frequency, json[QString("checkFrequency")]);
    m_check_frequency_isSet = !json[QString("checkFrequency")].isNull() && m_check_frequency_isValid;

    m_check_id_isValid = ::OpenAPI::fromJsonValue(m_check_id, json[QString("checkId")]);
    m_check_id_isSet = !json[QString("checkId")].isNull() && m_check_id_isValid;

    m_check_performed_by_isValid = ::OpenAPI::fromJsonValue(m_check_performed_by, json[QString("checkPerformedBy")]);
    m_check_performed_by_isSet = !json[QString("checkPerformedBy")].isNull() && m_check_performed_by_isValid;

    m_check_source_isValid = ::OpenAPI::fromJsonValue(m_check_source, json[QString("checkSource")]);
    m_check_source_isSet = !json[QString("checkSource")].isNull() && m_check_source_isValid;

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("currentState")]);
    m_current_state_isSet = !json[QString("currentState")].isNull() && m_current_state_isValid;

    m_first_check_date_isValid = ::OpenAPI::fromJsonValue(m_first_check_date, json[QString("firstCheckDate")]);
    m_first_check_date_isSet = !json[QString("firstCheckDate")].isNull() && m_first_check_date_isValid;

    m_latest_check_date_isValid = ::OpenAPI::fromJsonValue(m_latest_check_date, json[QString("latestCheckDate")]);
    m_latest_check_date_isSet = !json[QString("latestCheckDate")].isNull() && m_latest_check_date_isValid;
}

QString OAIBackgroundCheckResultObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackgroundCheckResultObject::asJsonObject() const {
    QJsonObject obj;
    if (m_background_check_type.isSet()) {
        obj.insert(QString("backgroundCheckType"), ::OpenAPI::toJsonValue(m_background_check_type));
    }
    if (m_check_details.size() > 0) {
        obj.insert(QString("checkDetails"), ::OpenAPI::toJsonValue(m_check_details));
    }
    if (m_check_frequency.isSet()) {
        obj.insert(QString("checkFrequency"), ::OpenAPI::toJsonValue(m_check_frequency));
    }
    if (m_check_id_isSet) {
        obj.insert(QString("checkId"), ::OpenAPI::toJsonValue(m_check_id));
    }
    if (m_check_performed_by_isSet) {
        obj.insert(QString("checkPerformedBy"), ::OpenAPI::toJsonValue(m_check_performed_by));
    }
    if (m_check_source_isSet) {
        obj.insert(QString("checkSource"), ::OpenAPI::toJsonValue(m_check_source));
    }
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_current_state.isSet()) {
        obj.insert(QString("currentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_first_check_date_isSet) {
        obj.insert(QString("firstCheckDate"), ::OpenAPI::toJsonValue(m_first_check_date));
    }
    if (m_latest_check_date_isSet) {
        obj.insert(QString("latestCheckDate"), ::OpenAPI::toJsonValue(m_latest_check_date));
    }
    return obj;
}

OAIEnumBackgroundCheckType OAIBackgroundCheckResultObject::getBackgroundCheckType() const {
    return m_background_check_type;
}
void OAIBackgroundCheckResultObject::setBackgroundCheckType(const OAIEnumBackgroundCheckType &background_check_type) {
    m_background_check_type = background_check_type;
    m_background_check_type_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_background_check_type_Set() const{
    return m_background_check_type_isSet;
}

bool OAIBackgroundCheckResultObject::is_background_check_type_Valid() const{
    return m_background_check_type_isValid;
}

QList<OAIKeyValuePairObject> OAIBackgroundCheckResultObject::getCheckDetails() const {
    return m_check_details;
}
void OAIBackgroundCheckResultObject::setCheckDetails(const QList<OAIKeyValuePairObject> &check_details) {
    m_check_details = check_details;
    m_check_details_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_check_details_Set() const{
    return m_check_details_isSet;
}

bool OAIBackgroundCheckResultObject::is_check_details_Valid() const{
    return m_check_details_isValid;
}

OAIEnumBackgroundCheckFrequency OAIBackgroundCheckResultObject::getCheckFrequency() const {
    return m_check_frequency;
}
void OAIBackgroundCheckResultObject::setCheckFrequency(const OAIEnumBackgroundCheckFrequency &check_frequency) {
    m_check_frequency = check_frequency;
    m_check_frequency_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_check_frequency_Set() const{
    return m_check_frequency_isSet;
}

bool OAIBackgroundCheckResultObject::is_check_frequency_Valid() const{
    return m_check_frequency_isValid;
}

QString OAIBackgroundCheckResultObject::getCheckId() const {
    return m_check_id;
}
void OAIBackgroundCheckResultObject::setCheckId(const QString &check_id) {
    m_check_id = check_id;
    m_check_id_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_check_id_Set() const{
    return m_check_id_isSet;
}

bool OAIBackgroundCheckResultObject::is_check_id_Valid() const{
    return m_check_id_isValid;
}

QString OAIBackgroundCheckResultObject::getCheckPerformedBy() const {
    return m_check_performed_by;
}
void OAIBackgroundCheckResultObject::setCheckPerformedBy(const QString &check_performed_by) {
    m_check_performed_by = check_performed_by;
    m_check_performed_by_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_check_performed_by_Set() const{
    return m_check_performed_by_isSet;
}

bool OAIBackgroundCheckResultObject::is_check_performed_by_Valid() const{
    return m_check_performed_by_isValid;
}

QString OAIBackgroundCheckResultObject::getCheckSource() const {
    return m_check_source;
}
void OAIBackgroundCheckResultObject::setCheckSource(const QString &check_source) {
    m_check_source = check_source;
    m_check_source_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_check_source_Set() const{
    return m_check_source_isSet;
}

bool OAIBackgroundCheckResultObject::is_check_source_Valid() const{
    return m_check_source_isValid;
}

qint32 OAIBackgroundCheckResultObject::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIBackgroundCheckResultObject::setConfidenceLevel(const qint32 &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIBackgroundCheckResultObject::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

OAIEnumBackgroundCheckState OAIBackgroundCheckResultObject::getCurrentState() const {
    return m_current_state;
}
void OAIBackgroundCheckResultObject::setCurrentState(const OAIEnumBackgroundCheckState &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIBackgroundCheckResultObject::is_current_state_Valid() const{
    return m_current_state_isValid;
}

QDateTime OAIBackgroundCheckResultObject::getFirstCheckDate() const {
    return m_first_check_date;
}
void OAIBackgroundCheckResultObject::setFirstCheckDate(const QDateTime &first_check_date) {
    m_first_check_date = first_check_date;
    m_first_check_date_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_first_check_date_Set() const{
    return m_first_check_date_isSet;
}

bool OAIBackgroundCheckResultObject::is_first_check_date_Valid() const{
    return m_first_check_date_isValid;
}

QDateTime OAIBackgroundCheckResultObject::getLatestCheckDate() const {
    return m_latest_check_date;
}
void OAIBackgroundCheckResultObject::setLatestCheckDate(const QDateTime &latest_check_date) {
    m_latest_check_date = latest_check_date;
    m_latest_check_date_isSet = true;
}

bool OAIBackgroundCheckResultObject::is_latest_check_date_Set() const{
    return m_latest_check_date_isSet;
}

bool OAIBackgroundCheckResultObject::is_latest_check_date_Valid() const{
    return m_latest_check_date_isValid;
}

bool OAIBackgroundCheckResultObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_check_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_performed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_check_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackgroundCheckResultObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
