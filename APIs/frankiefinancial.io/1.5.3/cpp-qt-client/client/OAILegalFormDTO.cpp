/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalFormDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalFormDTO::OAILegalFormDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalFormDTO::OAILegalFormDTO() {
    this->initializeModel();
}

OAILegalFormDTO::~OAILegalFormDTO() {}

void OAILegalFormDTO::initializeModel() {

    m_basis_isSet = false;
    m_basis_isValid = false;

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_incorp_isSet = false;
    m_incorp_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_responsibility_isSet = false;
    m_responsibility_isValid = false;

    m_stocks_isSet = false;
    m_stocks_isValid = false;
}

void OAILegalFormDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalFormDTO::fromJsonObject(QJsonObject json) {

    m_basis_isValid = ::OpenAPI::fromJsonValue(m_basis, json[QString("Basis")]);
    m_basis_isSet = !json[QString("Basis")].isNull() && m_basis_isValid;

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("Capital")]);
    m_capital_isSet = !json[QString("Capital")].isNull() && m_capital_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("Comments")]);
    m_comments_isSet = !json[QString("Comments")].isNull() && m_comments_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("Control")]);
    m_control_isSet = !json[QString("Control")].isNull() && m_control_isValid;

    m_incorp_isValid = ::OpenAPI::fromJsonValue(m_incorp, json[QString("Incorp")]);
    m_incorp_isSet = !json[QString("Incorp")].isNull() && m_incorp_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("Partner")]);
    m_partner_isSet = !json[QString("Partner")].isNull() && m_partner_isValid;

    m_responsibility_isValid = ::OpenAPI::fromJsonValue(m_responsibility, json[QString("Responsibility")]);
    m_responsibility_isSet = !json[QString("Responsibility")].isNull() && m_responsibility_isValid;

    m_stocks_isValid = ::OpenAPI::fromJsonValue(m_stocks, json[QString("Stocks")]);
    m_stocks_isSet = !json[QString("Stocks")].isNull() && m_stocks_isValid;
}

QString OAILegalFormDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalFormDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_basis_isSet) {
        obj.insert(QString("Basis"), ::OpenAPI::toJsonValue(m_basis));
    }
    if (m_capital_isSet) {
        obj.insert(QString("Capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_comments_isSet) {
        obj.insert(QString("Comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_control_isSet) {
        obj.insert(QString("Control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_incorp_isSet) {
        obj.insert(QString("Incorp"), ::OpenAPI::toJsonValue(m_incorp));
    }
    if (m_partner_isSet) {
        obj.insert(QString("Partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_responsibility_isSet) {
        obj.insert(QString("Responsibility"), ::OpenAPI::toJsonValue(m_responsibility));
    }
    if (m_stocks_isSet) {
        obj.insert(QString("Stocks"), ::OpenAPI::toJsonValue(m_stocks));
    }
    return obj;
}

QString OAILegalFormDTO::getBasis() const {
    return m_basis;
}
void OAILegalFormDTO::setBasis(const QString &basis) {
    m_basis = basis;
    m_basis_isSet = true;
}

bool OAILegalFormDTO::is_basis_Set() const{
    return m_basis_isSet;
}

bool OAILegalFormDTO::is_basis_Valid() const{
    return m_basis_isValid;
}

QString OAILegalFormDTO::getCapital() const {
    return m_capital;
}
void OAILegalFormDTO::setCapital(const QString &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAILegalFormDTO::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAILegalFormDTO::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAILegalFormDTO::getComments() const {
    return m_comments;
}
void OAILegalFormDTO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAILegalFormDTO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAILegalFormDTO::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAILegalFormDTO::getControl() const {
    return m_control;
}
void OAILegalFormDTO::setControl(const QString &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAILegalFormDTO::is_control_Set() const{
    return m_control_isSet;
}

bool OAILegalFormDTO::is_control_Valid() const{
    return m_control_isValid;
}

QString OAILegalFormDTO::getIncorp() const {
    return m_incorp;
}
void OAILegalFormDTO::setIncorp(const QString &incorp) {
    m_incorp = incorp;
    m_incorp_isSet = true;
}

bool OAILegalFormDTO::is_incorp_Set() const{
    return m_incorp_isSet;
}

bool OAILegalFormDTO::is_incorp_Valid() const{
    return m_incorp_isValid;
}

QString OAILegalFormDTO::getPartner() const {
    return m_partner;
}
void OAILegalFormDTO::setPartner(const QString &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAILegalFormDTO::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAILegalFormDTO::is_partner_Valid() const{
    return m_partner_isValid;
}

QString OAILegalFormDTO::getResponsibility() const {
    return m_responsibility;
}
void OAILegalFormDTO::setResponsibility(const QString &responsibility) {
    m_responsibility = responsibility;
    m_responsibility_isSet = true;
}

bool OAILegalFormDTO::is_responsibility_Set() const{
    return m_responsibility_isSet;
}

bool OAILegalFormDTO::is_responsibility_Valid() const{
    return m_responsibility_isValid;
}

QString OAILegalFormDTO::getStocks() const {
    return m_stocks;
}
void OAILegalFormDTO::setStocks(const QString &stocks) {
    m_stocks = stocks;
    m_stocks_isSet = true;
}

bool OAILegalFormDTO::is_stocks_Set() const{
    return m_stocks_isSet;
}

bool OAILegalFormDTO::is_stocks_Valid() const{
    return m_stocks_isValid;
}

bool OAILegalFormDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incorp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stocks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalFormDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
