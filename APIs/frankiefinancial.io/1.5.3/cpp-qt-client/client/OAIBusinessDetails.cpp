/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusinessDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusinessDetails::OAIBusinessDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusinessDetails::OAIBusinessDetails() {
    this->initializeModel();
}

OAIBusinessDetails::~OAIBusinessDetails() {}

void OAIBusinessDetails::initializeModel() {

    m_abn_isSet = false;
    m_abn_isValid = false;

    m_acn_isSet = false;
    m_acn_isValid = false;

    m_arbn_isSet = false;
    m_arbn_isValid = false;

    m_anzsic_code_isSet = false;
    m_anzsic_code_isValid = false;

    m_asic_company_type_isSet = false;
    m_asic_company_type_isValid = false;

    m_business_names_isSet = false;
    m_business_names_isValid = false;

    m_date_registered_with_asic_isSet = false;
    m_date_registered_with_asic_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_giin_isSet = false;
    m_giin_isValid = false;

    m_place_of_business_isSet = false;
    m_place_of_business_isValid = false;

    m_public_company_isSet = false;
    m_public_company_isValid = false;

    m_registered_name_isSet = false;
    m_registered_name_isValid = false;

    m_registered_office_isSet = false;
    m_registered_office_isValid = false;

    m_regulatory_information_isSet = false;
    m_regulatory_information_isValid = false;

    m_state_registered_with_asic_isSet = false;
    m_state_registered_with_asic_isValid = false;

    m_stock_exchange_data_isSet = false;
    m_stock_exchange_data_isValid = false;

    m_trading_names_isSet = false;
    m_trading_names_isValid = false;
}

void OAIBusinessDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusinessDetails::fromJsonObject(QJsonObject json) {

    m_abn_isValid = ::OpenAPI::fromJsonValue(m_abn, json[QString("ABN")]);
    m_abn_isSet = !json[QString("ABN")].isNull() && m_abn_isValid;

    m_acn_isValid = ::OpenAPI::fromJsonValue(m_acn, json[QString("ACN")]);
    m_acn_isSet = !json[QString("ACN")].isNull() && m_acn_isValid;

    m_arbn_isValid = ::OpenAPI::fromJsonValue(m_arbn, json[QString("ARBN")]);
    m_arbn_isSet = !json[QString("ARBN")].isNull() && m_arbn_isValid;

    m_anzsic_code_isValid = ::OpenAPI::fromJsonValue(m_anzsic_code, json[QString("anzsic_code")]);
    m_anzsic_code_isSet = !json[QString("anzsic_code")].isNull() && m_anzsic_code_isValid;

    m_asic_company_type_isValid = ::OpenAPI::fromJsonValue(m_asic_company_type, json[QString("asic_company_type")]);
    m_asic_company_type_isSet = !json[QString("asic_company_type")].isNull() && m_asic_company_type_isValid;

    m_business_names_isValid = ::OpenAPI::fromJsonValue(m_business_names, json[QString("business_names")]);
    m_business_names_isSet = !json[QString("business_names")].isNull() && m_business_names_isValid;

    m_date_registered_with_asic_isValid = ::OpenAPI::fromJsonValue(m_date_registered_with_asic, json[QString("date_registered_with_asic")]);
    m_date_registered_with_asic_isSet = !json[QString("date_registered_with_asic")].isNull() && m_date_registered_with_asic_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_giin_isValid = ::OpenAPI::fromJsonValue(m_giin, json[QString("giin")]);
    m_giin_isSet = !json[QString("giin")].isNull() && m_giin_isValid;

    m_place_of_business_isValid = ::OpenAPI::fromJsonValue(m_place_of_business, json[QString("place_of_business")]);
    m_place_of_business_isSet = !json[QString("place_of_business")].isNull() && m_place_of_business_isValid;

    m_public_company_isValid = ::OpenAPI::fromJsonValue(m_public_company, json[QString("public_company")]);
    m_public_company_isSet = !json[QString("public_company")].isNull() && m_public_company_isValid;

    m_registered_name_isValid = ::OpenAPI::fromJsonValue(m_registered_name, json[QString("registered_name")]);
    m_registered_name_isSet = !json[QString("registered_name")].isNull() && m_registered_name_isValid;

    m_registered_office_isValid = ::OpenAPI::fromJsonValue(m_registered_office, json[QString("registered_office")]);
    m_registered_office_isSet = !json[QString("registered_office")].isNull() && m_registered_office_isValid;

    m_regulatory_information_isValid = ::OpenAPI::fromJsonValue(m_regulatory_information, json[QString("regulatory_information")]);
    m_regulatory_information_isSet = !json[QString("regulatory_information")].isNull() && m_regulatory_information_isValid;

    m_state_registered_with_asic_isValid = ::OpenAPI::fromJsonValue(m_state_registered_with_asic, json[QString("state_registered_with_asic")]);
    m_state_registered_with_asic_isSet = !json[QString("state_registered_with_asic")].isNull() && m_state_registered_with_asic_isValid;

    m_stock_exchange_data_isValid = ::OpenAPI::fromJsonValue(m_stock_exchange_data, json[QString("stock_exchange_data")]);
    m_stock_exchange_data_isSet = !json[QString("stock_exchange_data")].isNull() && m_stock_exchange_data_isValid;

    m_trading_names_isValid = ::OpenAPI::fromJsonValue(m_trading_names, json[QString("trading_names")]);
    m_trading_names_isSet = !json[QString("trading_names")].isNull() && m_trading_names_isValid;
}

QString OAIBusinessDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusinessDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_abn_isSet) {
        obj.insert(QString("ABN"), ::OpenAPI::toJsonValue(m_abn));
    }
    if (m_acn_isSet) {
        obj.insert(QString("ACN"), ::OpenAPI::toJsonValue(m_acn));
    }
    if (m_arbn_isSet) {
        obj.insert(QString("ARBN"), ::OpenAPI::toJsonValue(m_arbn));
    }
    if (m_anzsic_code_isSet) {
        obj.insert(QString("anzsic_code"), ::OpenAPI::toJsonValue(m_anzsic_code));
    }
    if (m_asic_company_type_isSet) {
        obj.insert(QString("asic_company_type"), ::OpenAPI::toJsonValue(m_asic_company_type));
    }
    if (m_business_names.size() > 0) {
        obj.insert(QString("business_names"), ::OpenAPI::toJsonValue(m_business_names));
    }
    if (m_date_registered_with_asic_isSet) {
        obj.insert(QString("date_registered_with_asic"), ::OpenAPI::toJsonValue(m_date_registered_with_asic));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_giin_isSet) {
        obj.insert(QString("giin"), ::OpenAPI::toJsonValue(m_giin));
    }
    if (m_place_of_business.isSet()) {
        obj.insert(QString("place_of_business"), ::OpenAPI::toJsonValue(m_place_of_business));
    }
    if (m_public_company_isSet) {
        obj.insert(QString("public_company"), ::OpenAPI::toJsonValue(m_public_company));
    }
    if (m_registered_name_isSet) {
        obj.insert(QString("registered_name"), ::OpenAPI::toJsonValue(m_registered_name));
    }
    if (m_registered_office.isSet()) {
        obj.insert(QString("registered_office"), ::OpenAPI::toJsonValue(m_registered_office));
    }
    if (m_regulatory_information.isSet()) {
        obj.insert(QString("regulatory_information"), ::OpenAPI::toJsonValue(m_regulatory_information));
    }
    if (m_state_registered_with_asic_isSet) {
        obj.insert(QString("state_registered_with_asic"), ::OpenAPI::toJsonValue(m_state_registered_with_asic));
    }
    if (m_stock_exchange_data.isSet()) {
        obj.insert(QString("stock_exchange_data"), ::OpenAPI::toJsonValue(m_stock_exchange_data));
    }
    if (m_trading_names.size() > 0) {
        obj.insert(QString("trading_names"), ::OpenAPI::toJsonValue(m_trading_names));
    }
    return obj;
}

QString OAIBusinessDetails::getAbn() const {
    return m_abn;
}
void OAIBusinessDetails::setAbn(const QString &abn) {
    m_abn = abn;
    m_abn_isSet = true;
}

bool OAIBusinessDetails::is_abn_Set() const{
    return m_abn_isSet;
}

bool OAIBusinessDetails::is_abn_Valid() const{
    return m_abn_isValid;
}

QString OAIBusinessDetails::getAcn() const {
    return m_acn;
}
void OAIBusinessDetails::setAcn(const QString &acn) {
    m_acn = acn;
    m_acn_isSet = true;
}

bool OAIBusinessDetails::is_acn_Set() const{
    return m_acn_isSet;
}

bool OAIBusinessDetails::is_acn_Valid() const{
    return m_acn_isValid;
}

QString OAIBusinessDetails::getArbn() const {
    return m_arbn;
}
void OAIBusinessDetails::setArbn(const QString &arbn) {
    m_arbn = arbn;
    m_arbn_isSet = true;
}

bool OAIBusinessDetails::is_arbn_Set() const{
    return m_arbn_isSet;
}

bool OAIBusinessDetails::is_arbn_Valid() const{
    return m_arbn_isValid;
}

QString OAIBusinessDetails::getAnzsicCode() const {
    return m_anzsic_code;
}
void OAIBusinessDetails::setAnzsicCode(const QString &anzsic_code) {
    m_anzsic_code = anzsic_code;
    m_anzsic_code_isSet = true;
}

bool OAIBusinessDetails::is_anzsic_code_Set() const{
    return m_anzsic_code_isSet;
}

bool OAIBusinessDetails::is_anzsic_code_Valid() const{
    return m_anzsic_code_isValid;
}

QString OAIBusinessDetails::getAsicCompanyType() const {
    return m_asic_company_type;
}
void OAIBusinessDetails::setAsicCompanyType(const QString &asic_company_type) {
    m_asic_company_type = asic_company_type;
    m_asic_company_type_isSet = true;
}

bool OAIBusinessDetails::is_asic_company_type_Set() const{
    return m_asic_company_type_isSet;
}

bool OAIBusinessDetails::is_asic_company_type_Valid() const{
    return m_asic_company_type_isValid;
}

QList<QString> OAIBusinessDetails::getBusinessNames() const {
    return m_business_names;
}
void OAIBusinessDetails::setBusinessNames(const QList<QString> &business_names) {
    m_business_names = business_names;
    m_business_names_isSet = true;
}

bool OAIBusinessDetails::is_business_names_Set() const{
    return m_business_names_isSet;
}

bool OAIBusinessDetails::is_business_names_Valid() const{
    return m_business_names_isValid;
}

QDate OAIBusinessDetails::getDateRegisteredWithAsic() const {
    return m_date_registered_with_asic;
}
void OAIBusinessDetails::setDateRegisteredWithAsic(const QDate &date_registered_with_asic) {
    m_date_registered_with_asic = date_registered_with_asic;
    m_date_registered_with_asic_isSet = true;
}

bool OAIBusinessDetails::is_date_registered_with_asic_Set() const{
    return m_date_registered_with_asic_isSet;
}

bool OAIBusinessDetails::is_date_registered_with_asic_Valid() const{
    return m_date_registered_with_asic_isValid;
}

QString OAIBusinessDetails::getEntityId() const {
    return m_entity_id;
}
void OAIBusinessDetails::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIBusinessDetails::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIBusinessDetails::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIBusinessDetails::getGiin() const {
    return m_giin;
}
void OAIBusinessDetails::setGiin(const QString &giin) {
    m_giin = giin;
    m_giin_isSet = true;
}

bool OAIBusinessDetails::is_giin_Set() const{
    return m_giin_isSet;
}

bool OAIBusinessDetails::is_giin_Valid() const{
    return m_giin_isValid;
}

OAIAddressObject OAIBusinessDetails::getPlaceOfBusiness() const {
    return m_place_of_business;
}
void OAIBusinessDetails::setPlaceOfBusiness(const OAIAddressObject &place_of_business) {
    m_place_of_business = place_of_business;
    m_place_of_business_isSet = true;
}

bool OAIBusinessDetails::is_place_of_business_Set() const{
    return m_place_of_business_isSet;
}

bool OAIBusinessDetails::is_place_of_business_Valid() const{
    return m_place_of_business_isValid;
}

bool OAIBusinessDetails::isPublicCompany() const {
    return m_public_company;
}
void OAIBusinessDetails::setPublicCompany(const bool &public_company) {
    m_public_company = public_company;
    m_public_company_isSet = true;
}

bool OAIBusinessDetails::is_public_company_Set() const{
    return m_public_company_isSet;
}

bool OAIBusinessDetails::is_public_company_Valid() const{
    return m_public_company_isValid;
}

QString OAIBusinessDetails::getRegisteredName() const {
    return m_registered_name;
}
void OAIBusinessDetails::setRegisteredName(const QString &registered_name) {
    m_registered_name = registered_name;
    m_registered_name_isSet = true;
}

bool OAIBusinessDetails::is_registered_name_Set() const{
    return m_registered_name_isSet;
}

bool OAIBusinessDetails::is_registered_name_Valid() const{
    return m_registered_name_isValid;
}

OAIAddressObject OAIBusinessDetails::getRegisteredOffice() const {
    return m_registered_office;
}
void OAIBusinessDetails::setRegisteredOffice(const OAIAddressObject &registered_office) {
    m_registered_office = registered_office;
    m_registered_office_isSet = true;
}

bool OAIBusinessDetails::is_registered_office_Set() const{
    return m_registered_office_isSet;
}

bool OAIBusinessDetails::is_registered_office_Valid() const{
    return m_registered_office_isValid;
}

OAIRegulatoryInformation OAIBusinessDetails::getRegulatoryInformation() const {
    return m_regulatory_information;
}
void OAIBusinessDetails::setRegulatoryInformation(const OAIRegulatoryInformation &regulatory_information) {
    m_regulatory_information = regulatory_information;
    m_regulatory_information_isSet = true;
}

bool OAIBusinessDetails::is_regulatory_information_Set() const{
    return m_regulatory_information_isSet;
}

bool OAIBusinessDetails::is_regulatory_information_Valid() const{
    return m_regulatory_information_isValid;
}

QString OAIBusinessDetails::getStateRegisteredWithAsic() const {
    return m_state_registered_with_asic;
}
void OAIBusinessDetails::setStateRegisteredWithAsic(const QString &state_registered_with_asic) {
    m_state_registered_with_asic = state_registered_with_asic;
    m_state_registered_with_asic_isSet = true;
}

bool OAIBusinessDetails::is_state_registered_with_asic_Set() const{
    return m_state_registered_with_asic_isSet;
}

bool OAIBusinessDetails::is_state_registered_with_asic_Valid() const{
    return m_state_registered_with_asic_isValid;
}

OAIStockExchangeData OAIBusinessDetails::getStockExchangeData() const {
    return m_stock_exchange_data;
}
void OAIBusinessDetails::setStockExchangeData(const OAIStockExchangeData &stock_exchange_data) {
    m_stock_exchange_data = stock_exchange_data;
    m_stock_exchange_data_isSet = true;
}

bool OAIBusinessDetails::is_stock_exchange_data_Set() const{
    return m_stock_exchange_data_isSet;
}

bool OAIBusinessDetails::is_stock_exchange_data_Valid() const{
    return m_stock_exchange_data_isValid;
}

QList<QString> OAIBusinessDetails::getTradingNames() const {
    return m_trading_names;
}
void OAIBusinessDetails::setTradingNames(const QList<QString> &trading_names) {
    m_trading_names = trading_names;
    m_trading_names_isSet = true;
}

bool OAIBusinessDetails::is_trading_names_Set() const{
    return m_trading_names_isSet;
}

bool OAIBusinessDetails::is_trading_names_Valid() const{
    return m_trading_names_isValid;
}

bool OAIBusinessDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arbn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anzsic_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asic_company_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_registered_with_asic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_of_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_office.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regulatory_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_registered_with_asic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_exchange_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusinessDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abn_isValid && m_acn_isValid && m_arbn_isValid && m_anzsic_code_isValid && m_giin_isValid && m_registered_name_isValid && true;
}

} // namespace OpenAPI
