/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrentBillData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrentBillData::OAICurrentBillData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrentBillData::OAICurrentBillData() {
    this->initializeModel();
}

OAICurrentBillData::~OAICurrentBillData() {}

void OAICurrentBillData::initializeModel() {

    m_account_address_isSet = false;
    m_account_address_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_actual_plan_total_cost_isSet = false;
    m_actual_plan_total_cost_isValid = false;

    m_bill_date_from_isSet = false;
    m_bill_date_from_isValid = false;

    m_bill_date_to_isSet = false;
    m_bill_date_to_isValid = false;

    m_days_isSet = false;
    m_days_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_nmi_isSet = false;
    m_nmi_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_retailer_isSet = false;
    m_retailer_isValid = false;

    m_solar_isSet = false;
    m_solar_isValid = false;

    m_supply_address_isSet = false;
    m_supply_address_isValid = false;
}

void OAICurrentBillData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrentBillData::fromJsonObject(QJsonObject json) {

    m_account_address_isValid = ::OpenAPI::fromJsonValue(m_account_address, json[QString("accountAddress")]);
    m_account_address_isSet = !json[QString("accountAddress")].isNull() && m_account_address_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_actual_plan_total_cost_isValid = ::OpenAPI::fromJsonValue(m_actual_plan_total_cost, json[QString("actualPlanTotalCost")]);
    m_actual_plan_total_cost_isSet = !json[QString("actualPlanTotalCost")].isNull() && m_actual_plan_total_cost_isValid;

    m_bill_date_from_isValid = ::OpenAPI::fromJsonValue(m_bill_date_from, json[QString("billDateFrom")]);
    m_bill_date_from_isSet = !json[QString("billDateFrom")].isNull() && m_bill_date_from_isValid;

    m_bill_date_to_isValid = ::OpenAPI::fromJsonValue(m_bill_date_to, json[QString("billDateTo")]);
    m_bill_date_to_isSet = !json[QString("billDateTo")].isNull() && m_bill_date_to_isValid;

    m_days_isValid = ::OpenAPI::fromJsonValue(m_days, json[QString("days")]);
    m_days_isSet = !json[QString("days")].isNull() && m_days_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuelType")]);
    m_fuel_type_isSet = !json[QString("fuelType")].isNull() && m_fuel_type_isValid;

    m_nmi_isValid = ::OpenAPI::fromJsonValue(m_nmi, json[QString("nmi")]);
    m_nmi_isSet = !json[QString("nmi")].isNull() && m_nmi_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_retailer_isValid = ::OpenAPI::fromJsonValue(m_retailer, json[QString("retailer")]);
    m_retailer_isSet = !json[QString("retailer")].isNull() && m_retailer_isValid;

    m_solar_isValid = ::OpenAPI::fromJsonValue(m_solar, json[QString("solar")]);
    m_solar_isSet = !json[QString("solar")].isNull() && m_solar_isValid;

    m_supply_address_isValid = ::OpenAPI::fromJsonValue(m_supply_address, json[QString("supplyAddress")]);
    m_supply_address_isSet = !json[QString("supplyAddress")].isNull() && m_supply_address_isValid;
}

QString OAICurrentBillData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrentBillData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_address_isSet) {
        obj.insert(QString("accountAddress"), ::OpenAPI::toJsonValue(m_account_address));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_actual_plan_total_cost_isSet) {
        obj.insert(QString("actualPlanTotalCost"), ::OpenAPI::toJsonValue(m_actual_plan_total_cost));
    }
    if (m_bill_date_from_isSet) {
        obj.insert(QString("billDateFrom"), ::OpenAPI::toJsonValue(m_bill_date_from));
    }
    if (m_bill_date_to_isSet) {
        obj.insert(QString("billDateTo"), ::OpenAPI::toJsonValue(m_bill_date_to));
    }
    if (m_days_isSet) {
        obj.insert(QString("days"), ::OpenAPI::toJsonValue(m_days));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuelType"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_nmi_isSet) {
        obj.insert(QString("nmi"), ::OpenAPI::toJsonValue(m_nmi));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_retailer.isSet()) {
        obj.insert(QString("retailer"), ::OpenAPI::toJsonValue(m_retailer));
    }
    if (m_solar.size() > 0) {
        obj.insert(QString("solar"), ::OpenAPI::toJsonValue(m_solar));
    }
    if (m_supply_address_isSet) {
        obj.insert(QString("supplyAddress"), ::OpenAPI::toJsonValue(m_supply_address));
    }
    return obj;
}

QString OAICurrentBillData::getAccountAddress() const {
    return m_account_address;
}
void OAICurrentBillData::setAccountAddress(const QString &account_address) {
    m_account_address = account_address;
    m_account_address_isSet = true;
}

bool OAICurrentBillData::is_account_address_Set() const{
    return m_account_address_isSet;
}

bool OAICurrentBillData::is_account_address_Valid() const{
    return m_account_address_isValid;
}

QString OAICurrentBillData::getAccountName() const {
    return m_account_name;
}
void OAICurrentBillData::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAICurrentBillData::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAICurrentBillData::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAICurrentBillData::getAccountNumber() const {
    return m_account_number;
}
void OAICurrentBillData::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAICurrentBillData::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAICurrentBillData::is_account_number_Valid() const{
    return m_account_number_isValid;
}

double OAICurrentBillData::getActualPlanTotalCost() const {
    return m_actual_plan_total_cost;
}
void OAICurrentBillData::setActualPlanTotalCost(const double &actual_plan_total_cost) {
    m_actual_plan_total_cost = actual_plan_total_cost;
    m_actual_plan_total_cost_isSet = true;
}

bool OAICurrentBillData::is_actual_plan_total_cost_Set() const{
    return m_actual_plan_total_cost_isSet;
}

bool OAICurrentBillData::is_actual_plan_total_cost_Valid() const{
    return m_actual_plan_total_cost_isValid;
}

QString OAICurrentBillData::getBillDateFrom() const {
    return m_bill_date_from;
}
void OAICurrentBillData::setBillDateFrom(const QString &bill_date_from) {
    m_bill_date_from = bill_date_from;
    m_bill_date_from_isSet = true;
}

bool OAICurrentBillData::is_bill_date_from_Set() const{
    return m_bill_date_from_isSet;
}

bool OAICurrentBillData::is_bill_date_from_Valid() const{
    return m_bill_date_from_isValid;
}

QString OAICurrentBillData::getBillDateTo() const {
    return m_bill_date_to;
}
void OAICurrentBillData::setBillDateTo(const QString &bill_date_to) {
    m_bill_date_to = bill_date_to;
    m_bill_date_to_isSet = true;
}

bool OAICurrentBillData::is_bill_date_to_Set() const{
    return m_bill_date_to_isSet;
}

bool OAICurrentBillData::is_bill_date_to_Valid() const{
    return m_bill_date_to_isValid;
}

qint32 OAICurrentBillData::getDays() const {
    return m_days;
}
void OAICurrentBillData::setDays(const qint32 &days) {
    m_days = days;
    m_days_isSet = true;
}

bool OAICurrentBillData::is_days_Set() const{
    return m_days_isSet;
}

bool OAICurrentBillData::is_days_Valid() const{
    return m_days_isValid;
}

double OAICurrentBillData::getDiscount() const {
    return m_discount;
}
void OAICurrentBillData::setDiscount(const double &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAICurrentBillData::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAICurrentBillData::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAICurrentBillData::getFuelType() const {
    return m_fuel_type;
}
void OAICurrentBillData::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAICurrentBillData::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAICurrentBillData::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAICurrentBillData::getNmi() const {
    return m_nmi;
}
void OAICurrentBillData::setNmi(const QString &nmi) {
    m_nmi = nmi;
    m_nmi_isSet = true;
}

bool OAICurrentBillData::is_nmi_Set() const{
    return m_nmi_isSet;
}

bool OAICurrentBillData::is_nmi_Valid() const{
    return m_nmi_isValid;
}

QList<OAIPeriod> OAICurrentBillData::getPeriods() const {
    return m_periods;
}
void OAICurrentBillData::setPeriods(const QList<OAIPeriod> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAICurrentBillData::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAICurrentBillData::is_periods_Valid() const{
    return m_periods_isValid;
}

OAIRetailer OAICurrentBillData::getRetailer() const {
    return m_retailer;
}
void OAICurrentBillData::setRetailer(const OAIRetailer &retailer) {
    m_retailer = retailer;
    m_retailer_isSet = true;
}

bool OAICurrentBillData::is_retailer_Set() const{
    return m_retailer_isSet;
}

bool OAICurrentBillData::is_retailer_Valid() const{
    return m_retailer_isValid;
}

QList<OAICurrentBillData_solar_inner> OAICurrentBillData::getSolar() const {
    return m_solar;
}
void OAICurrentBillData::setSolar(const QList<OAICurrentBillData_solar_inner> &solar) {
    m_solar = solar;
    m_solar_isSet = true;
}

bool OAICurrentBillData::is_solar_Set() const{
    return m_solar_isSet;
}

bool OAICurrentBillData::is_solar_Valid() const{
    return m_solar_isValid;
}

QString OAICurrentBillData::getSupplyAddress() const {
    return m_supply_address;
}
void OAICurrentBillData::setSupplyAddress(const QString &supply_address) {
    m_supply_address = supply_address;
    m_supply_address_isSet = true;
}

bool OAICurrentBillData::is_supply_address_Set() const{
    return m_supply_address_isSet;
}

bool OAICurrentBillData::is_supply_address_Valid() const{
    return m_supply_address_isValid;
}

bool OAICurrentBillData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_plan_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nmi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retailer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrentBillData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_address_isValid && m_account_name_isValid && m_account_number_isValid && m_actual_plan_total_cost_isValid && m_bill_date_from_isValid && m_bill_date_to_isValid && m_days_isValid && m_discount_isValid && m_fuel_type_isValid && m_nmi_isValid && m_periods_isValid && m_retailer_isValid && m_supply_address_isValid && true;
}

} // namespace OpenAPI
