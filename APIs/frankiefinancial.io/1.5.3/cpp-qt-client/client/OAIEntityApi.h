/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEntityApi_H
#define OAI_OAIEntityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptedEntityResultObject.h"
#include "OAIBasicStatusResultObject.h"
#include "OAICheckEntityCheckResultObject.h"
#include "OAICheckResultUpdateObject.h"
#include "OAIEntityCheckDetailsObject.h"
#include "OAIEntityIDVDetailsObject.h"
#include "OAIEntityIDVResultObject.h"
#include "OAIEntityObject.h"
#include "OAIEntityResultObject.h"
#include "OAIEntitySearchResultObject.h"
#include "OAIErrorObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEntityApi : public QObject {
    Q_OBJECT

public:
    OAIEntityApi(const int timeOut = 0);
    ~OAIEntityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  check_type QString [required]
    * @param[in]  result_level QString [required]
    * @param[in]  entity_details OAIEntityCheckDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void createCheckEntity(const QString &x_frankie_customer_id, const QString &check_type, const QString &result_level, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_details OAIEntityCheckDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  nopush bool [optional]
    */
    virtual void createCheckEntityPushToMobile(const QString &x_frankie_customer_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &nopush = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  entity OAIEntityObject [optional]
    */
    virtual void createEntity(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEntityObject> &entity = ::OpenAPI::OptionalParam<OAIEntityObject>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_idv_details OAIEntityIDVDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void createEntityGetIDVToken(const QString &x_frankie_customer_id, const OAIEntityIDVDetailsObject &entity_idv_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    */
    virtual void deleteEntity(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void queryEntity(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  alldata bool [optional]
    */
    virtual void queryEntityChecks(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &alldata = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void queryEntityFull(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  search_entity OAIEntityObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void searchEntity(const QString &x_frankie_customer_id, const OAIEntityObject &search_entity, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  check_id QString [required]
    * @param[in]  check_class QString [required]
    * @param[in]  check_class_id QString [required]
    * @param[in]  status QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  undo bool [optional]
    */
    virtual void updateCheckClassResult(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_id, const QString &check_class, const QString &check_class_id, const QString &status, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &undo = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  check_id QString [required]
    * @param[in]  check_class QString [required]
    * @param[in]  check_result_update OAICheckResultUpdateObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void updateCheckClassResults(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_id, const QString &check_class, const OAICheckResultUpdateObject &check_result_update, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  check_type QString [required]
    * @param[in]  result_level QString [required]
    * @param[in]  entity_details OAIEntityCheckDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  force bool [optional]
    * @param[in]  no_invalidate bool [optional]
    */
    virtual void updateCheckEntity(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_type, const QString &result_level, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &no_invalidate = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_details OAIEntityCheckDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  nopush bool [optional]
    * @param[in]  phase qint32 [optional]
    */
    virtual void updateCheckEntityPushToMobile(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &nopush = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &phase = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity OAIEntityObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  x_frankie_background qint32 [optional]
    * @param[in]  no_invalidate bool [optional]
    */
    virtual void updateEntity(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityObject &entity, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &x_frankie_background = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &no_invalidate = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_idv_details OAIEntityIDVDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void updateEntityGetIDVToken(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityIDVDetailsObject &entity_idv_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  entity_details OAIEntityCheckDetailsObject [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void updateEntityInitIDVProcess(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  r_set QString [optional]
    * @param[in]  risk QString [optional]
    * @param[in]  comment QString [optional]
    */
    virtual void updateEntityState(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &risk = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCheckEntityCallback(OAIHttpRequestWorker *worker);
    void createCheckEntityPushToMobileCallback(OAIHttpRequestWorker *worker);
    void createEntityCallback(OAIHttpRequestWorker *worker);
    void createEntityGetIDVTokenCallback(OAIHttpRequestWorker *worker);
    void deleteEntityCallback(OAIHttpRequestWorker *worker);
    void queryEntityCallback(OAIHttpRequestWorker *worker);
    void queryEntityChecksCallback(OAIHttpRequestWorker *worker);
    void queryEntityFullCallback(OAIHttpRequestWorker *worker);
    void searchEntityCallback(OAIHttpRequestWorker *worker);
    void updateCheckClassResultCallback(OAIHttpRequestWorker *worker);
    void updateCheckClassResultsCallback(OAIHttpRequestWorker *worker);
    void updateCheckEntityCallback(OAIHttpRequestWorker *worker);
    void updateCheckEntityPushToMobileCallback(OAIHttpRequestWorker *worker);
    void updateEntityCallback(OAIHttpRequestWorker *worker);
    void updateEntityGetIDVTokenCallback(OAIHttpRequestWorker *worker);
    void updateEntityInitIDVProcessCallback(OAIHttpRequestWorker *worker);
    void updateEntityStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCheckEntitySignal(OAICheckEntityCheckResultObject summary);
    void createCheckEntityPushToMobileSignal(OAIAcceptedEntityResultObject summary);
    void createEntitySignal(OAIEntityResultObject summary);
    void createEntityGetIDVTokenSignal(OAIEntityIDVResultObject summary);
    void deleteEntitySignal(OAIBasicStatusResultObject summary);
    void queryEntitySignal(OAIEntityResultObject summary);
    void queryEntityChecksSignal(OAICheckEntityCheckResultObject summary);
    void queryEntityFullSignal(OAIEntityResultObject summary);
    void searchEntitySignal(OAIEntitySearchResultObject summary);
    void updateCheckClassResultSignal(OAICheckEntityCheckResultObject summary);
    void updateCheckClassResultsSignal(OAICheckEntityCheckResultObject summary);
    void updateCheckEntitySignal(OAICheckEntityCheckResultObject summary);
    void updateCheckEntityPushToMobileSignal(OAIAcceptedEntityResultObject summary);
    void updateEntitySignal(OAIEntityResultObject summary);
    void updateEntityGetIDVTokenSignal(OAIEntityIDVResultObject summary);
    void updateEntityInitIDVProcessSignal(OAIEntityIDVResultObject summary);
    void updateEntityStateSignal(OAICheckEntityCheckResultObject summary);


    void createCheckEntitySignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);
    void createCheckEntityPushToMobileSignalFull(OAIHttpRequestWorker *worker, OAIAcceptedEntityResultObject summary);
    void createEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void createEntityGetIDVTokenSignalFull(OAIHttpRequestWorker *worker, OAIEntityIDVResultObject summary);
    void deleteEntitySignalFull(OAIHttpRequestWorker *worker, OAIBasicStatusResultObject summary);
    void queryEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void queryEntityChecksSignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);
    void queryEntityFullSignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void searchEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntitySearchResultObject summary);
    void updateCheckClassResultSignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);
    void updateCheckClassResultsSignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);
    void updateCheckEntitySignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);
    void updateCheckEntityPushToMobileSignalFull(OAIHttpRequestWorker *worker, OAIAcceptedEntityResultObject summary);
    void updateEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void updateEntityGetIDVTokenSignalFull(OAIHttpRequestWorker *worker, OAIEntityIDVResultObject summary);
    void updateEntityInitIDVProcessSignalFull(OAIHttpRequestWorker *worker, OAIEntityIDVResultObject summary);
    void updateEntityStateSignalFull(OAIHttpRequestWorker *worker, OAICheckEntityCheckResultObject summary);

    Q_DECL_DEPRECATED_X("Use createCheckEntitySignalError() instead")
    void createCheckEntitySignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckEntitySignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCheckEntityPushToMobileSignalError() instead")
    void createCheckEntityPushToMobileSignalE(OAIAcceptedEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckEntityPushToMobileSignalError(OAIAcceptedEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEntitySignalError() instead")
    void createEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEntityGetIDVTokenSignalError() instead")
    void createEntityGetIDVTokenSignalE(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEntityGetIDVTokenSignalError(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEntitySignalError() instead")
    void deleteEntitySignalE(OAIBasicStatusResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEntitySignalError(OAIBasicStatusResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntitySignalError() instead")
    void queryEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntityChecksSignalError() instead")
    void queryEntityChecksSignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntityChecksSignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntityFullSignalError() instead")
    void queryEntityFullSignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntityFullSignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEntitySignalError() instead")
    void searchEntitySignalE(OAIEntitySearchResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEntitySignalError(OAIEntitySearchResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckClassResultSignalError() instead")
    void updateCheckClassResultSignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckClassResultSignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckClassResultsSignalError() instead")
    void updateCheckClassResultsSignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckClassResultsSignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckEntitySignalError() instead")
    void updateCheckEntitySignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckEntitySignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckEntityPushToMobileSignalError() instead")
    void updateCheckEntityPushToMobileSignalE(OAIAcceptedEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckEntityPushToMobileSignalError(OAIAcceptedEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntitySignalError() instead")
    void updateEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityGetIDVTokenSignalError() instead")
    void updateEntityGetIDVTokenSignalE(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityGetIDVTokenSignalError(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityInitIDVProcessSignalError() instead")
    void updateEntityInitIDVProcessSignalE(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityInitIDVProcessSignalError(OAIEntityIDVResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityStateSignalError() instead")
    void updateEntityStateSignalE(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityStateSignalError(OAICheckEntityCheckResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCheckEntitySignalErrorFull() instead")
    void createCheckEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCheckEntityPushToMobileSignalErrorFull() instead")
    void createCheckEntityPushToMobileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCheckEntityPushToMobileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEntitySignalErrorFull() instead")
    void createEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEntityGetIDVTokenSignalErrorFull() instead")
    void createEntityGetIDVTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEntityGetIDVTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEntitySignalErrorFull() instead")
    void deleteEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntitySignalErrorFull() instead")
    void queryEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntityChecksSignalErrorFull() instead")
    void queryEntityChecksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntityChecksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryEntityFullSignalErrorFull() instead")
    void queryEntityFullSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryEntityFullSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEntitySignalErrorFull() instead")
    void searchEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckClassResultSignalErrorFull() instead")
    void updateCheckClassResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckClassResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckClassResultsSignalErrorFull() instead")
    void updateCheckClassResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckClassResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckEntitySignalErrorFull() instead")
    void updateCheckEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckEntityPushToMobileSignalErrorFull() instead")
    void updateCheckEntityPushToMobileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckEntityPushToMobileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntitySignalErrorFull() instead")
    void updateEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityGetIDVTokenSignalErrorFull() instead")
    void updateEntityGetIDVTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityGetIDVTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityInitIDVProcessSignalErrorFull() instead")
    void updateEntityInitIDVProcessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityInitIDVProcessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEntityStateSignalErrorFull() instead")
    void updateEntityStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEntityStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
