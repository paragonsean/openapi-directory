/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPuppyObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPuppyObject::OAIPuppyObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPuppyObject::OAIPuppyObject() {
    this->initializeModel();
}

OAIPuppyObject::~OAIPuppyObject() {}

void OAIPuppyObject::initializeModel() {

    m_asknicely1_isSet = false;
    m_asknicely1_isValid = false;

    m_asknicely2_isSet = false;
    m_asknicely2_isValid = false;

    m_asknicely3_isSet = false;
    m_asknicely3_isValid = false;

    m_asknicely4_isSet = false;
    m_asknicely4_isValid = false;

    m_asknicely5_isSet = false;
    m_asknicely5_isValid = false;

    m_asknicely6_isSet = false;
    m_asknicely6_isValid = false;

    m_asknicely7_isSet = false;
    m_asknicely7_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_puppy_isSet = false;
    m_puppy_isValid = false;
}

void OAIPuppyObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPuppyObject::fromJsonObject(QJsonObject json) {

    m_asknicely1_isValid = ::OpenAPI::fromJsonValue(m_asknicely1, json[QString("asknicely1")]);
    m_asknicely1_isSet = !json[QString("asknicely1")].isNull() && m_asknicely1_isValid;

    m_asknicely2_isValid = ::OpenAPI::fromJsonValue(m_asknicely2, json[QString("asknicely2")]);
    m_asknicely2_isSet = !json[QString("asknicely2")].isNull() && m_asknicely2_isValid;

    m_asknicely3_isValid = ::OpenAPI::fromJsonValue(m_asknicely3, json[QString("asknicely3")]);
    m_asknicely3_isSet = !json[QString("asknicely3")].isNull() && m_asknicely3_isValid;

    m_asknicely4_isValid = ::OpenAPI::fromJsonValue(m_asknicely4, json[QString("asknicely4")]);
    m_asknicely4_isSet = !json[QString("asknicely4")].isNull() && m_asknicely4_isValid;

    m_asknicely5_isValid = ::OpenAPI::fromJsonValue(m_asknicely5, json[QString("asknicely5")]);
    m_asknicely5_isSet = !json[QString("asknicely5")].isNull() && m_asknicely5_isValid;

    m_asknicely6_isValid = ::OpenAPI::fromJsonValue(m_asknicely6, json[QString("asknicely6")]);
    m_asknicely6_isSet = !json[QString("asknicely6")].isNull() && m_asknicely6_isValid;

    m_asknicely7_isValid = ::OpenAPI::fromJsonValue(m_asknicely7, json[QString("asknicely7")]);
    m_asknicely7_isSet = !json[QString("asknicely7")].isNull() && m_asknicely7_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_puppy_isValid = ::OpenAPI::fromJsonValue(m_puppy, json[QString("puppy")]);
    m_puppy_isSet = !json[QString("puppy")].isNull() && m_puppy_isValid;
}

QString OAIPuppyObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPuppyObject::asJsonObject() const {
    QJsonObject obj;
    if (m_asknicely1_isSet) {
        obj.insert(QString("asknicely1"), ::OpenAPI::toJsonValue(m_asknicely1));
    }
    if (m_asknicely2_isSet) {
        obj.insert(QString("asknicely2"), ::OpenAPI::toJsonValue(m_asknicely2));
    }
    if (m_asknicely3_isSet) {
        obj.insert(QString("asknicely3"), ::OpenAPI::toJsonValue(m_asknicely3));
    }
    if (m_asknicely4_isSet) {
        obj.insert(QString("asknicely4"), ::OpenAPI::toJsonValue(m_asknicely4));
    }
    if (m_asknicely5_isSet) {
        obj.insert(QString("asknicely5"), ::OpenAPI::toJsonValue(m_asknicely5));
    }
    if (m_asknicely6_isSet) {
        obj.insert(QString("asknicely6"), ::OpenAPI::toJsonValue(m_asknicely6));
    }
    if (m_asknicely7_isSet) {
        obj.insert(QString("asknicely7"), ::OpenAPI::toJsonValue(m_asknicely7));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_puppy_isSet) {
        obj.insert(QString("puppy"), ::OpenAPI::toJsonValue(m_puppy));
    }
    return obj;
}

QString OAIPuppyObject::getAsknicely1() const {
    return m_asknicely1;
}
void OAIPuppyObject::setAsknicely1(const QString &asknicely1) {
    m_asknicely1 = asknicely1;
    m_asknicely1_isSet = true;
}

bool OAIPuppyObject::is_asknicely1_Set() const{
    return m_asknicely1_isSet;
}

bool OAIPuppyObject::is_asknicely1_Valid() const{
    return m_asknicely1_isValid;
}

QString OAIPuppyObject::getAsknicely2() const {
    return m_asknicely2;
}
void OAIPuppyObject::setAsknicely2(const QString &asknicely2) {
    m_asknicely2 = asknicely2;
    m_asknicely2_isSet = true;
}

bool OAIPuppyObject::is_asknicely2_Set() const{
    return m_asknicely2_isSet;
}

bool OAIPuppyObject::is_asknicely2_Valid() const{
    return m_asknicely2_isValid;
}

QString OAIPuppyObject::getAsknicely3() const {
    return m_asknicely3;
}
void OAIPuppyObject::setAsknicely3(const QString &asknicely3) {
    m_asknicely3 = asknicely3;
    m_asknicely3_isSet = true;
}

bool OAIPuppyObject::is_asknicely3_Set() const{
    return m_asknicely3_isSet;
}

bool OAIPuppyObject::is_asknicely3_Valid() const{
    return m_asknicely3_isValid;
}

QString OAIPuppyObject::getAsknicely4() const {
    return m_asknicely4;
}
void OAIPuppyObject::setAsknicely4(const QString &asknicely4) {
    m_asknicely4 = asknicely4;
    m_asknicely4_isSet = true;
}

bool OAIPuppyObject::is_asknicely4_Set() const{
    return m_asknicely4_isSet;
}

bool OAIPuppyObject::is_asknicely4_Valid() const{
    return m_asknicely4_isValid;
}

QString OAIPuppyObject::getAsknicely5() const {
    return m_asknicely5;
}
void OAIPuppyObject::setAsknicely5(const QString &asknicely5) {
    m_asknicely5 = asknicely5;
    m_asknicely5_isSet = true;
}

bool OAIPuppyObject::is_asknicely5_Set() const{
    return m_asknicely5_isSet;
}

bool OAIPuppyObject::is_asknicely5_Valid() const{
    return m_asknicely5_isValid;
}

QString OAIPuppyObject::getAsknicely6() const {
    return m_asknicely6;
}
void OAIPuppyObject::setAsknicely6(const QString &asknicely6) {
    m_asknicely6 = asknicely6;
    m_asknicely6_isSet = true;
}

bool OAIPuppyObject::is_asknicely6_Set() const{
    return m_asknicely6_isSet;
}

bool OAIPuppyObject::is_asknicely6_Valid() const{
    return m_asknicely6_isValid;
}

QString OAIPuppyObject::getAsknicely7() const {
    return m_asknicely7;
}
void OAIPuppyObject::setAsknicely7(const QString &asknicely7) {
    m_asknicely7 = asknicely7;
    m_asknicely7_isSet = true;
}

bool OAIPuppyObject::is_asknicely7_Set() const{
    return m_asknicely7_isSet;
}

bool OAIPuppyObject::is_asknicely7_Valid() const{
    return m_asknicely7_isValid;
}

QString OAIPuppyObject::getCommit() const {
    return m_commit;
}
void OAIPuppyObject::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIPuppyObject::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIPuppyObject::is_commit_Valid() const{
    return m_commit_isValid;
}

bool OAIPuppyObject::isPuppy() const {
    return m_puppy;
}
void OAIPuppyObject::setPuppy(const bool &puppy) {
    m_puppy = puppy;
    m_puppy_isSet = true;
}

bool OAIPuppyObject::is_puppy_Set() const{
    return m_puppy_isSet;
}

bool OAIPuppyObject::is_puppy_Valid() const{
    return m_puppy_isValid;
}

bool OAIPuppyObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asknicely1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asknicely7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_puppy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPuppyObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_puppy_isValid && true;
}

} // namespace OpenAPI
