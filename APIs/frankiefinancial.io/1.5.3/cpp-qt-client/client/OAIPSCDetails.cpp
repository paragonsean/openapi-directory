/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPSCDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPSCDetails::OAIPSCDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPSCDetails::OAIPSCDetails() {
    this->initializeModel();
}

OAIPSCDetails::~OAIPSCDetails() {}

void OAIPSCDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_ceased_on_isSet = false;
    m_ceased_on_isValid = false;

    m_country_of_residence_isSet = false;
    m_country_of_residence_isValid = false;

    m_dob_day_isSet = false;
    m_dob_day_isValid = false;

    m_dob_month_isSet = false;
    m_dob_month_isValid = false;

    m_dob_year_isSet = false;
    m_dob_year_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_nature_of_control_isSet = false;
    m_nature_of_control_isValid = false;

    m_notified_on_isSet = false;
    m_notified_on_isValid = false;
}

void OAIPSCDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPSCDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_ceased_on_isValid = ::OpenAPI::fromJsonValue(m_ceased_on, json[QString("CeasedOn")]);
    m_ceased_on_isSet = !json[QString("CeasedOn")].isNull() && m_ceased_on_isValid;

    m_country_of_residence_isValid = ::OpenAPI::fromJsonValue(m_country_of_residence, json[QString("CountryOfResidence")]);
    m_country_of_residence_isSet = !json[QString("CountryOfResidence")].isNull() && m_country_of_residence_isValid;

    m_dob_day_isValid = ::OpenAPI::fromJsonValue(m_dob_day, json[QString("DOBDay")]);
    m_dob_day_isSet = !json[QString("DOBDay")].isNull() && m_dob_day_isValid;

    m_dob_month_isValid = ::OpenAPI::fromJsonValue(m_dob_month, json[QString("DOBMonth")]);
    m_dob_month_isSet = !json[QString("DOBMonth")].isNull() && m_dob_month_isValid;

    m_dob_year_isValid = ::OpenAPI::fromJsonValue(m_dob_year, json[QString("DOBYear")]);
    m_dob_year_isSet = !json[QString("DOBYear")].isNull() && m_dob_year_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("Nationality")]);
    m_nationality_isSet = !json[QString("Nationality")].isNull() && m_nationality_isValid;

    m_nature_of_control_isValid = ::OpenAPI::fromJsonValue(m_nature_of_control, json[QString("NatureOfControl")]);
    m_nature_of_control_isSet = !json[QString("NatureOfControl")].isNull() && m_nature_of_control_isValid;

    m_notified_on_isValid = ::OpenAPI::fromJsonValue(m_notified_on, json[QString("NotifiedOn")]);
    m_notified_on_isSet = !json[QString("NotifiedOn")].isNull() && m_notified_on_isValid;
}

QString OAIPSCDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPSCDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_ceased_on_isSet) {
        obj.insert(QString("CeasedOn"), ::OpenAPI::toJsonValue(m_ceased_on));
    }
    if (m_country_of_residence_isSet) {
        obj.insert(QString("CountryOfResidence"), ::OpenAPI::toJsonValue(m_country_of_residence));
    }
    if (m_dob_day_isSet) {
        obj.insert(QString("DOBDay"), ::OpenAPI::toJsonValue(m_dob_day));
    }
    if (m_dob_month_isSet) {
        obj.insert(QString("DOBMonth"), ::OpenAPI::toJsonValue(m_dob_month));
    }
    if (m_dob_year_isSet) {
        obj.insert(QString("DOBYear"), ::OpenAPI::toJsonValue(m_dob_year));
    }
    if (m_kind_isSet) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("Nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_nature_of_control.isSet()) {
        obj.insert(QString("NatureOfControl"), ::OpenAPI::toJsonValue(m_nature_of_control));
    }
    if (m_notified_on_isSet) {
        obj.insert(QString("NotifiedOn"), ::OpenAPI::toJsonValue(m_notified_on));
    }
    return obj;
}

QString OAIPSCDetails::getAddress() const {
    return m_address;
}
void OAIPSCDetails::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPSCDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPSCDetails::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPSCDetails::getCeasedOn() const {
    return m_ceased_on;
}
void OAIPSCDetails::setCeasedOn(const QString &ceased_on) {
    m_ceased_on = ceased_on;
    m_ceased_on_isSet = true;
}

bool OAIPSCDetails::is_ceased_on_Set() const{
    return m_ceased_on_isSet;
}

bool OAIPSCDetails::is_ceased_on_Valid() const{
    return m_ceased_on_isValid;
}

QString OAIPSCDetails::getCountryOfResidence() const {
    return m_country_of_residence;
}
void OAIPSCDetails::setCountryOfResidence(const QString &country_of_residence) {
    m_country_of_residence = country_of_residence;
    m_country_of_residence_isSet = true;
}

bool OAIPSCDetails::is_country_of_residence_Set() const{
    return m_country_of_residence_isSet;
}

bool OAIPSCDetails::is_country_of_residence_Valid() const{
    return m_country_of_residence_isValid;
}

qint64 OAIPSCDetails::getDobDay() const {
    return m_dob_day;
}
void OAIPSCDetails::setDobDay(const qint64 &dob_day) {
    m_dob_day = dob_day;
    m_dob_day_isSet = true;
}

bool OAIPSCDetails::is_dob_day_Set() const{
    return m_dob_day_isSet;
}

bool OAIPSCDetails::is_dob_day_Valid() const{
    return m_dob_day_isValid;
}

qint64 OAIPSCDetails::getDobMonth() const {
    return m_dob_month;
}
void OAIPSCDetails::setDobMonth(const qint64 &dob_month) {
    m_dob_month = dob_month;
    m_dob_month_isSet = true;
}

bool OAIPSCDetails::is_dob_month_Set() const{
    return m_dob_month_isSet;
}

bool OAIPSCDetails::is_dob_month_Valid() const{
    return m_dob_month_isValid;
}

qint64 OAIPSCDetails::getDobYear() const {
    return m_dob_year;
}
void OAIPSCDetails::setDobYear(const qint64 &dob_year) {
    m_dob_year = dob_year;
    m_dob_year_isSet = true;
}

bool OAIPSCDetails::is_dob_year_Set() const{
    return m_dob_year_isSet;
}

bool OAIPSCDetails::is_dob_year_Valid() const{
    return m_dob_year_isValid;
}

QString OAIPSCDetails::getKind() const {
    return m_kind;
}
void OAIPSCDetails::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPSCDetails::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPSCDetails::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPSCDetails::getName() const {
    return m_name;
}
void OAIPSCDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPSCDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPSCDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPSCDetails::getNationality() const {
    return m_nationality;
}
void OAIPSCDetails::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIPSCDetails::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIPSCDetails::is_nationality_Valid() const{
    return m_nationality_isValid;
}

OAIArrayOfString OAIPSCDetails::getNatureOfControl() const {
    return m_nature_of_control;
}
void OAIPSCDetails::setNatureOfControl(const OAIArrayOfString &nature_of_control) {
    m_nature_of_control = nature_of_control;
    m_nature_of_control_isSet = true;
}

bool OAIPSCDetails::is_nature_of_control_Set() const{
    return m_nature_of_control_isSet;
}

bool OAIPSCDetails::is_nature_of_control_Valid() const{
    return m_nature_of_control_isValid;
}

QString OAIPSCDetails::getNotifiedOn() const {
    return m_notified_on;
}
void OAIPSCDetails::setNotifiedOn(const QString &notified_on) {
    m_notified_on = notified_on;
    m_notified_on_isSet = true;
}

bool OAIPSCDetails::is_notified_on_Set() const{
    return m_notified_on_isSet;
}

bool OAIPSCDetails::is_notified_on_Valid() const{
    return m_notified_on_isValid;
}

bool OAIPSCDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ceased_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_of_residence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nature_of_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPSCDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
