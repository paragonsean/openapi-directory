/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareholdingObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareholdingObject::OAIShareholdingObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareholdingObject::OAIShareholdingObject() {
    this->initializeModel();
}

OAIShareholdingObject::~OAIShareholdingObject() {}

void OAIShareholdingObject::initializeModel() {

    m_beneficially_owned_isSet = false;
    m_beneficially_owned_isValid = false;

    m_doc_number_isSet = false;
    m_doc_number_isValid = false;

    m_doc_number_qualifier_isSet = false;
    m_doc_number_qualifier_isValid = false;

    m_fully_paid_isSet = false;
    m_fully_paid_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_number_held_isSet = false;
    m_number_held_isValid = false;

    m_share_capital_class_code_isSet = false;
    m_share_capital_class_code_isValid = false;
}

void OAIShareholdingObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareholdingObject::fromJsonObject(QJsonObject json) {

    m_beneficially_owned_isValid = ::OpenAPI::fromJsonValue(m_beneficially_owned, json[QString("beneficiallyOwned")]);
    m_beneficially_owned_isSet = !json[QString("beneficiallyOwned")].isNull() && m_beneficially_owned_isValid;

    m_doc_number_isValid = ::OpenAPI::fromJsonValue(m_doc_number, json[QString("docNumber")]);
    m_doc_number_isSet = !json[QString("docNumber")].isNull() && m_doc_number_isValid;

    m_doc_number_qualifier_isValid = ::OpenAPI::fromJsonValue(m_doc_number_qualifier, json[QString("docNumberQualifier")]);
    m_doc_number_qualifier_isSet = !json[QString("docNumberQualifier")].isNull() && m_doc_number_qualifier_isValid;

    m_fully_paid_isValid = ::OpenAPI::fromJsonValue(m_fully_paid, json[QString("fullyPaid")]);
    m_fully_paid_isSet = !json[QString("fullyPaid")].isNull() && m_fully_paid_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_number_held_isValid = ::OpenAPI::fromJsonValue(m_number_held, json[QString("numberHeld")]);
    m_number_held_isSet = !json[QString("numberHeld")].isNull() && m_number_held_isValid;

    m_share_capital_class_code_isValid = ::OpenAPI::fromJsonValue(m_share_capital_class_code, json[QString("shareCapitalClassCode")]);
    m_share_capital_class_code_isSet = !json[QString("shareCapitalClassCode")].isNull() && m_share_capital_class_code_isValid;
}

QString OAIShareholdingObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareholdingObject::asJsonObject() const {
    QJsonObject obj;
    if (m_beneficially_owned_isSet) {
        obj.insert(QString("beneficiallyOwned"), ::OpenAPI::toJsonValue(m_beneficially_owned));
    }
    if (m_doc_number_isSet) {
        obj.insert(QString("docNumber"), ::OpenAPI::toJsonValue(m_doc_number));
    }
    if (m_doc_number_qualifier_isSet) {
        obj.insert(QString("docNumberQualifier"), ::OpenAPI::toJsonValue(m_doc_number_qualifier));
    }
    if (m_fully_paid_isSet) {
        obj.insert(QString("fullyPaid"), ::OpenAPI::toJsonValue(m_fully_paid));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_number_held_isSet) {
        obj.insert(QString("numberHeld"), ::OpenAPI::toJsonValue(m_number_held));
    }
    if (m_share_capital_class_code_isSet) {
        obj.insert(QString("shareCapitalClassCode"), ::OpenAPI::toJsonValue(m_share_capital_class_code));
    }
    return obj;
}

bool OAIShareholdingObject::isBeneficiallyOwned() const {
    return m_beneficially_owned;
}
void OAIShareholdingObject::setBeneficiallyOwned(const bool &beneficially_owned) {
    m_beneficially_owned = beneficially_owned;
    m_beneficially_owned_isSet = true;
}

bool OAIShareholdingObject::is_beneficially_owned_Set() const{
    return m_beneficially_owned_isSet;
}

bool OAIShareholdingObject::is_beneficially_owned_Valid() const{
    return m_beneficially_owned_isValid;
}

QString OAIShareholdingObject::getDocNumber() const {
    return m_doc_number;
}
void OAIShareholdingObject::setDocNumber(const QString &doc_number) {
    m_doc_number = doc_number;
    m_doc_number_isSet = true;
}

bool OAIShareholdingObject::is_doc_number_Set() const{
    return m_doc_number_isSet;
}

bool OAIShareholdingObject::is_doc_number_Valid() const{
    return m_doc_number_isValid;
}

QString OAIShareholdingObject::getDocNumberQualifier() const {
    return m_doc_number_qualifier;
}
void OAIShareholdingObject::setDocNumberQualifier(const QString &doc_number_qualifier) {
    m_doc_number_qualifier = doc_number_qualifier;
    m_doc_number_qualifier_isSet = true;
}

bool OAIShareholdingObject::is_doc_number_qualifier_Set() const{
    return m_doc_number_qualifier_isSet;
}

bool OAIShareholdingObject::is_doc_number_qualifier_Valid() const{
    return m_doc_number_qualifier_isValid;
}

bool OAIShareholdingObject::isFullyPaid() const {
    return m_fully_paid;
}
void OAIShareholdingObject::setFullyPaid(const bool &fully_paid) {
    m_fully_paid = fully_paid;
    m_fully_paid_isSet = true;
}

bool OAIShareholdingObject::is_fully_paid_Set() const{
    return m_fully_paid_isSet;
}

bool OAIShareholdingObject::is_fully_paid_Valid() const{
    return m_fully_paid_isValid;
}

QList<QString> OAIShareholdingObject::getMembers() const {
    return m_members;
}
void OAIShareholdingObject::setMembers(const QList<QString> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIShareholdingObject::is_members_Set() const{
    return m_members_isSet;
}

bool OAIShareholdingObject::is_members_Valid() const{
    return m_members_isValid;
}

qint32 OAIShareholdingObject::getNumberHeld() const {
    return m_number_held;
}
void OAIShareholdingObject::setNumberHeld(const qint32 &number_held) {
    m_number_held = number_held;
    m_number_held_isSet = true;
}

bool OAIShareholdingObject::is_number_held_Set() const{
    return m_number_held_isSet;
}

bool OAIShareholdingObject::is_number_held_Valid() const{
    return m_number_held_isValid;
}

QString OAIShareholdingObject::getShareCapitalClassCode() const {
    return m_share_capital_class_code;
}
void OAIShareholdingObject::setShareCapitalClassCode(const QString &share_capital_class_code) {
    m_share_capital_class_code = share_capital_class_code;
    m_share_capital_class_code_isSet = true;
}

bool OAIShareholdingObject::is_share_capital_class_code_Set() const{
    return m_share_capital_class_code_isSet;
}

bool OAIShareholdingObject::is_share_capital_class_code_Valid() const{
    return m_share_capital_class_code_isValid;
}

bool OAIShareholdingObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beneficially_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_held_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_capital_class_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareholdingObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
