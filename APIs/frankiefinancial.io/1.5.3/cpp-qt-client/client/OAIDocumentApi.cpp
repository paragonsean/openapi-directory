/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDocumentApi::OAIDocumentApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDocumentApi::~OAIDocumentApi() {
}

void OAIDocumentApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.demo.frankiefinancial.io/compliance/v1.2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("compareDocument", defaultConf);
    _serverIndices.insert("compareDocument", 0);
    _serverConfigs.insert("createDocument", defaultConf);
    _serverIndices.insert("createDocument", 0);
    _serverConfigs.insert("createScanDocument", defaultConf);
    _serverIndices.insert("createScanDocument", 0);
    _serverConfigs.insert("deleteDocument", defaultConf);
    _serverIndices.insert("deleteDocument", 0);
    _serverConfigs.insert("queryDocument", defaultConf);
    _serverIndices.insert("queryDocument", 0);
    _serverConfigs.insert("queryDocumentChecks", defaultConf);
    _serverIndices.insert("queryDocumentChecks", 0);
    _serverConfigs.insert("queryDocumentFull", defaultConf);
    _serverIndices.insert("queryDocumentFull", 0);
    _serverConfigs.insert("searchDocument", defaultConf);
    _serverIndices.insert("searchDocument", 0);
    _serverConfigs.insert("updateCompareDocument", defaultConf);
    _serverIndices.insert("updateCompareDocument", 0);
    _serverConfigs.insert("updateDocument", defaultConf);
    _serverIndices.insert("updateDocument", 0);
    _serverConfigs.insert("updateScanDocument", defaultConf);
    _serverIndices.insert("updateScanDocument", 0);
    _serverConfigs.insert("updateVerifyDocument", defaultConf);
    _serverIndices.insert("updateVerifyDocument", 0);
    _serverConfigs.insert("verifyDocument", defaultConf);
    _serverIndices.insert("verifyDocument", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDocumentApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDocumentApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDocumentApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDocumentApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDocumentApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDocumentApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDocumentApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDocumentApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDocumentApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDocumentApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDocumentApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDocumentApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDocumentApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDocumentApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDocumentApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDocumentApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDocumentApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDocumentApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDocumentApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDocumentApi::compareDocument(const QString &x_frankie_customer_id, const OAIComparisonSet &comparison_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["compareDocument"][_serverIndices.value("compareDocument")].URL()+"/document/new/compare");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = comparison_set.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::compareDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::compareDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentCompareResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compareDocumentSignal(output);
        Q_EMIT compareDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compareDocumentSignalE(output, error_type, error_str);
        Q_EMIT compareDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compareDocumentSignalError(output, error_type, error_str);
        Q_EMIT compareDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::createDocument(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document) {
    QString fullPath = QString(_serverConfigs["createDocument"][_serverIndices.value("createDocument")].URL()+"/document");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (document.hasValue()){

        
        QByteArray output = document.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::createDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::createDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createDocumentSignal(output);
        Q_EMIT createDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createDocumentSignalE(output, error_type, error_str);
        Q_EMIT createDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createDocumentSignalError(output, error_type, error_str);
        Q_EMIT createDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::createScanDocument(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document) {
    QString fullPath = QString(_serverConfigs["createScanDocument"][_serverIndices.value("createScanDocument")].URL()+"/document/new/scan");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (document.hasValue()){

        
        QByteArray output = document.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::createScanDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::createScanDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentScanResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createScanDocumentSignal(output);
        Q_EMIT createScanDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createScanDocumentSignalE(output, error_type, error_str);
        Q_EMIT createScanDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createScanDocumentSignalError(output, error_type, error_str);
        Q_EMIT createScanDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::deleteDocument(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["deleteDocument"][_serverIndices.value("deleteDocument")].URL()+"/document/{documentId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::deleteDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::deleteDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBasicStatusResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteDocumentSignal(output);
        Q_EMIT deleteDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteDocumentSignalE(output, error_type, error_str);
        Q_EMIT deleteDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteDocumentSignalError(output, error_type, error_str);
        Q_EMIT deleteDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::queryDocument(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["queryDocument"][_serverIndices.value("queryDocument")].URL()+"/document/{documentId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::queryDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::queryDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDocumentSignal(output);
        Q_EMIT queryDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDocumentSignalE(output, error_type, error_str);
        Q_EMIT queryDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDocumentSignalError(output, error_type, error_str);
        Q_EMIT queryDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::queryDocumentChecks(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["queryDocumentChecks"][_serverIndices.value("queryDocumentChecks")].URL()+"/document/{documentId}/checks");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::queryDocumentChecksCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::queryDocumentChecksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentChecksResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDocumentChecksSignal(output);
        Q_EMIT queryDocumentChecksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDocumentChecksSignalE(output, error_type, error_str);
        Q_EMIT queryDocumentChecksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDocumentChecksSignalError(output, error_type, error_str);
        Q_EMIT queryDocumentChecksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::queryDocumentFull(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["queryDocumentFull"][_serverIndices.value("queryDocumentFull")].URL()+"/document/{documentId}/full");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::queryDocumentFullCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::queryDocumentFullCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryDocumentFullSignal(output);
        Q_EMIT queryDocumentFullSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryDocumentFullSignalE(output, error_type, error_str);
        Q_EMIT queryDocumentFullSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryDocumentFullSignalError(output, error_type, error_str);
        Q_EMIT queryDocumentFullSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::searchDocument(const QString &x_frankie_customer_id, const OAIIdentityDocumentObject &search_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["searchDocument"][_serverIndices.value("searchDocument")].URL()+"/document/search");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = search_document.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::searchDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::searchDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentSearchResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchDocumentSignal(output);
        Q_EMIT searchDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchDocumentSignalE(output, error_type, error_str);
        Q_EMIT searchDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchDocumentSignalError(output, error_type, error_str);
        Q_EMIT searchDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::updateCompareDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIComparisonSet &comparison_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["updateCompareDocument"][_serverIndices.value("updateCompareDocument")].URL()+"/document/{documentId}/compare");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = comparison_set.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::updateCompareDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::updateCompareDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentCompareResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCompareDocumentSignal(output);
        Q_EMIT updateCompareDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCompareDocumentSignalE(output, error_type, error_str);
        Q_EMIT updateCompareDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCompareDocumentSignalError(output, error_type, error_str);
        Q_EMIT updateCompareDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::updateDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIIdentityDocumentObject &document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<bool> &no_invalidate) {
    QString fullPath = QString(_serverConfigs["updateDocument"][_serverIndices.value("updateDocument")].URL()+"/document/{documentId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (no_invalidate.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "noInvalidate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("noInvalidate")).append(querySuffix).append(QUrl::toPercentEncoding(no_invalidate.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = document.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::updateDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::updateDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateDocumentSignal(output);
        Q_EMIT updateDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateDocumentSignalE(output, error_type, error_str);
        Q_EMIT updateDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateDocumentSignalError(output, error_type, error_str);
        Q_EMIT updateDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::updateScanDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIIdentityDocumentObject &document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["updateScanDocument"][_serverIndices.value("updateScanDocument")].URL()+"/document/{documentId}/scan");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = document.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::updateScanDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::updateScanDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentScanResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateScanDocumentSignal(output);
        Q_EMIT updateScanDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateScanDocumentSignalE(output, error_type, error_str);
        Q_EMIT updateScanDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateScanDocumentSignalError(output, error_type, error_str);
        Q_EMIT updateScanDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::updateVerifyDocument(const QString &x_frankie_customer_id, const QString &document_id, const OAIDocumentVerify &process_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["updateVerifyDocument"][_serverIndices.value("updateVerifyDocument")].URL()+"/document/{documentId}/verify");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = process_document.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::updateVerifyDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::updateVerifyDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentVerifyResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateVerifyDocumentSignal(output);
        Q_EMIT updateVerifyDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateVerifyDocumentSignalE(output, error_type, error_str);
        Q_EMIT updateVerifyDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateVerifyDocumentSignalError(output, error_type, error_str);
        Q_EMIT updateVerifyDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::verifyDocument(const QString &x_frankie_customer_id, const OAIDocumentVerify &process_document, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["verifyDocument"][_serverIndices.value("verifyDocument")].URL()+"/document/new/verify");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = process_document.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDocumentApi::verifyDocumentCallback);
    connect(this, &OAIDocumentApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDocumentApi::verifyDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentVerifyResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verifyDocumentSignal(output);
        Q_EMIT verifyDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verifyDocumentSignalE(output, error_type, error_str);
        Q_EMIT verifyDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verifyDocumentSignalError(output, error_type, error_str);
        Q_EMIT verifyDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDocumentApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
