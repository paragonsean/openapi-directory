/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScannedDocumentObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScannedDocumentObject::OAIScannedDocumentObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScannedDocumentObject::OAIScannedDocumentObject() {
    this->initializeModel();
}

OAIScannedDocumentObject::~OAIScannedDocumentObject() {}

void OAIScannedDocumentObject::initializeModel() {

    m_scan_delete_isSet = false;
    m_scan_delete_isValid = false;

    m_scan_created_isSet = false;
    m_scan_created_isValid = false;

    m_scan_data_isSet = false;
    m_scan_data_isValid = false;

    m_scan_data_retrieval_state_isSet = false;
    m_scan_data_retrieval_state_isValid = false;

    m_scan_doc_id_isSet = false;
    m_scan_doc_id_isValid = false;

    m_scan_filename_isSet = false;
    m_scan_filename_isValid = false;

    m_scan_mime_isSet = false;
    m_scan_mime_isValid = false;

    m_scan_page_num_isSet = false;
    m_scan_page_num_isValid = false;

    m_scan_side_isSet = false;
    m_scan_side_isValid = false;

    m_scan_type_isSet = false;
    m_scan_type_isValid = false;
}

void OAIScannedDocumentObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScannedDocumentObject::fromJsonObject(QJsonObject json) {

    m_scan_delete_isValid = ::OpenAPI::fromJsonValue(m_scan_delete, json[QString("ScanDelete")]);
    m_scan_delete_isSet = !json[QString("ScanDelete")].isNull() && m_scan_delete_isValid;

    m_scan_created_isValid = ::OpenAPI::fromJsonValue(m_scan_created, json[QString("scanCreated")]);
    m_scan_created_isSet = !json[QString("scanCreated")].isNull() && m_scan_created_isValid;

    m_scan_data_isValid = ::OpenAPI::fromJsonValue(m_scan_data, json[QString("scanData")]);
    m_scan_data_isSet = !json[QString("scanData")].isNull() && m_scan_data_isValid;

    m_scan_data_retrieval_state_isValid = ::OpenAPI::fromJsonValue(m_scan_data_retrieval_state, json[QString("scanDataRetrievalState")]);
    m_scan_data_retrieval_state_isSet = !json[QString("scanDataRetrievalState")].isNull() && m_scan_data_retrieval_state_isValid;

    m_scan_doc_id_isValid = ::OpenAPI::fromJsonValue(m_scan_doc_id, json[QString("scanDocId")]);
    m_scan_doc_id_isSet = !json[QString("scanDocId")].isNull() && m_scan_doc_id_isValid;

    m_scan_filename_isValid = ::OpenAPI::fromJsonValue(m_scan_filename, json[QString("scanFilename")]);
    m_scan_filename_isSet = !json[QString("scanFilename")].isNull() && m_scan_filename_isValid;

    m_scan_mime_isValid = ::OpenAPI::fromJsonValue(m_scan_mime, json[QString("scanMIME")]);
    m_scan_mime_isSet = !json[QString("scanMIME")].isNull() && m_scan_mime_isValid;

    m_scan_page_num_isValid = ::OpenAPI::fromJsonValue(m_scan_page_num, json[QString("scanPageNum")]);
    m_scan_page_num_isSet = !json[QString("scanPageNum")].isNull() && m_scan_page_num_isValid;

    m_scan_side_isValid = ::OpenAPI::fromJsonValue(m_scan_side, json[QString("scanSide")]);
    m_scan_side_isSet = !json[QString("scanSide")].isNull() && m_scan_side_isValid;

    m_scan_type_isValid = ::OpenAPI::fromJsonValue(m_scan_type, json[QString("scanType")]);
    m_scan_type_isSet = !json[QString("scanType")].isNull() && m_scan_type_isValid;
}

QString OAIScannedDocumentObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScannedDocumentObject::asJsonObject() const {
    QJsonObject obj;
    if (m_scan_delete_isSet) {
        obj.insert(QString("ScanDelete"), ::OpenAPI::toJsonValue(m_scan_delete));
    }
    if (m_scan_created_isSet) {
        obj.insert(QString("scanCreated"), ::OpenAPI::toJsonValue(m_scan_created));
    }
    if (m_scan_data_isSet) {
        obj.insert(QString("scanData"), ::OpenAPI::toJsonValue(m_scan_data));
    }
    if (m_scan_data_retrieval_state.isSet()) {
        obj.insert(QString("scanDataRetrievalState"), ::OpenAPI::toJsonValue(m_scan_data_retrieval_state));
    }
    if (m_scan_doc_id_isSet) {
        obj.insert(QString("scanDocId"), ::OpenAPI::toJsonValue(m_scan_doc_id));
    }
    if (m_scan_filename_isSet) {
        obj.insert(QString("scanFilename"), ::OpenAPI::toJsonValue(m_scan_filename));
    }
    if (m_scan_mime.isSet()) {
        obj.insert(QString("scanMIME"), ::OpenAPI::toJsonValue(m_scan_mime));
    }
    if (m_scan_page_num_isSet) {
        obj.insert(QString("scanPageNum"), ::OpenAPI::toJsonValue(m_scan_page_num));
    }
    if (m_scan_side.isSet()) {
        obj.insert(QString("scanSide"), ::OpenAPI::toJsonValue(m_scan_side));
    }
    if (m_scan_type.isSet()) {
        obj.insert(QString("scanType"), ::OpenAPI::toJsonValue(m_scan_type));
    }
    return obj;
}

bool OAIScannedDocumentObject::isScanDelete() const {
    return m_scan_delete;
}
void OAIScannedDocumentObject::setScanDelete(const bool &scan_delete) {
    m_scan_delete = scan_delete;
    m_scan_delete_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_delete_Set() const{
    return m_scan_delete_isSet;
}

bool OAIScannedDocumentObject::is_scan_delete_Valid() const{
    return m_scan_delete_isValid;
}

QDateTime OAIScannedDocumentObject::getScanCreated() const {
    return m_scan_created;
}
void OAIScannedDocumentObject::setScanCreated(const QDateTime &scan_created) {
    m_scan_created = scan_created;
    m_scan_created_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_created_Set() const{
    return m_scan_created_isSet;
}

bool OAIScannedDocumentObject::is_scan_created_Valid() const{
    return m_scan_created_isValid;
}

QByteArray OAIScannedDocumentObject::getScanData() const {
    return m_scan_data;
}
void OAIScannedDocumentObject::setScanData(const QByteArray &scan_data) {
    m_scan_data = scan_data;
    m_scan_data_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_data_Set() const{
    return m_scan_data_isSet;
}

bool OAIScannedDocumentObject::is_scan_data_Valid() const{
    return m_scan_data_isValid;
}

OAIEnumScanDataRetrievalState OAIScannedDocumentObject::getScanDataRetrievalState() const {
    return m_scan_data_retrieval_state;
}
void OAIScannedDocumentObject::setScanDataRetrievalState(const OAIEnumScanDataRetrievalState &scan_data_retrieval_state) {
    m_scan_data_retrieval_state = scan_data_retrieval_state;
    m_scan_data_retrieval_state_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_data_retrieval_state_Set() const{
    return m_scan_data_retrieval_state_isSet;
}

bool OAIScannedDocumentObject::is_scan_data_retrieval_state_Valid() const{
    return m_scan_data_retrieval_state_isValid;
}

QString OAIScannedDocumentObject::getScanDocId() const {
    return m_scan_doc_id;
}
void OAIScannedDocumentObject::setScanDocId(const QString &scan_doc_id) {
    m_scan_doc_id = scan_doc_id;
    m_scan_doc_id_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_doc_id_Set() const{
    return m_scan_doc_id_isSet;
}

bool OAIScannedDocumentObject::is_scan_doc_id_Valid() const{
    return m_scan_doc_id_isValid;
}

QString OAIScannedDocumentObject::getScanFilename() const {
    return m_scan_filename;
}
void OAIScannedDocumentObject::setScanFilename(const QString &scan_filename) {
    m_scan_filename = scan_filename;
    m_scan_filename_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_filename_Set() const{
    return m_scan_filename_isSet;
}

bool OAIScannedDocumentObject::is_scan_filename_Valid() const{
    return m_scan_filename_isValid;
}

OAIEnumMIMEType OAIScannedDocumentObject::getScanMime() const {
    return m_scan_mime;
}
void OAIScannedDocumentObject::setScanMime(const OAIEnumMIMEType &scan_mime) {
    m_scan_mime = scan_mime;
    m_scan_mime_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_mime_Set() const{
    return m_scan_mime_isSet;
}

bool OAIScannedDocumentObject::is_scan_mime_Valid() const{
    return m_scan_mime_isValid;
}

qint32 OAIScannedDocumentObject::getScanPageNum() const {
    return m_scan_page_num;
}
void OAIScannedDocumentObject::setScanPageNum(const qint32 &scan_page_num) {
    m_scan_page_num = scan_page_num;
    m_scan_page_num_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_page_num_Set() const{
    return m_scan_page_num_isSet;
}

bool OAIScannedDocumentObject::is_scan_page_num_Valid() const{
    return m_scan_page_num_isValid;
}

OAIEnumScanSide OAIScannedDocumentObject::getScanSide() const {
    return m_scan_side;
}
void OAIScannedDocumentObject::setScanSide(const OAIEnumScanSide &scan_side) {
    m_scan_side = scan_side;
    m_scan_side_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_side_Set() const{
    return m_scan_side_isSet;
}

bool OAIScannedDocumentObject::is_scan_side_Valid() const{
    return m_scan_side_isValid;
}

OAIEnumScanType OAIScannedDocumentObject::getScanType() const {
    return m_scan_type;
}
void OAIScannedDocumentObject::setScanType(const OAIEnumScanType &scan_type) {
    m_scan_type = scan_type;
    m_scan_type_isSet = true;
}

bool OAIScannedDocumentObject::is_scan_type_Set() const{
    return m_scan_type_isSet;
}

bool OAIScannedDocumentObject::is_scan_type_Valid() const{
    return m_scan_type_isValid;
}

bool OAIScannedDocumentObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scan_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_data_retrieval_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_mime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_page_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_side.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScannedDocumentObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
