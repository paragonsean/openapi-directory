/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEICDetails_concessionCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEICDetails_concessionCard::OAIEICDetails_concessionCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEICDetails_concessionCard::OAIEICDetails_concessionCard() {
    this->initializeModel();
}

OAIEICDetails_concessionCard::~OAIEICDetails_concessionCard() {}

void OAIEICDetails_concessionCard::initializeModel() {

    m_concession_evidence_type_isSet = false;
    m_concession_evidence_type_isValid = false;

    m_concession_type_isSet = false;
    m_concession_type_isValid = false;

    m_customer_reference_number_isSet = false;
    m_customer_reference_number_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIEICDetails_concessionCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEICDetails_concessionCard::fromJsonObject(QJsonObject json) {

    m_concession_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_concession_evidence_type, json[QString("concessionEvidenceType")]);
    m_concession_evidence_type_isSet = !json[QString("concessionEvidenceType")].isNull() && m_concession_evidence_type_isValid;

    m_concession_type_isValid = ::OpenAPI::fromJsonValue(m_concession_type, json[QString("concessionType")]);
    m_concession_type_isSet = !json[QString("concessionType")].isNull() && m_concession_type_isValid;

    m_customer_reference_number_isValid = ::OpenAPI::fromJsonValue(m_customer_reference_number, json[QString("customerReferenceNumber")]);
    m_customer_reference_number_isSet = !json[QString("customerReferenceNumber")].isNull() && m_customer_reference_number_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIEICDetails_concessionCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEICDetails_concessionCard::asJsonObject() const {
    QJsonObject obj;
    if (m_concession_evidence_type_isSet) {
        obj.insert(QString("concessionEvidenceType"), ::OpenAPI::toJsonValue(m_concession_evidence_type));
    }
    if (m_concession_type_isSet) {
        obj.insert(QString("concessionType"), ::OpenAPI::toJsonValue(m_concession_type));
    }
    if (m_customer_reference_number_isSet) {
        obj.insert(QString("customerReferenceNumber"), ::OpenAPI::toJsonValue(m_customer_reference_number));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIEICDetails_concessionCard::getConcessionEvidenceType() const {
    return m_concession_evidence_type;
}
void OAIEICDetails_concessionCard::setConcessionEvidenceType(const QString &concession_evidence_type) {
    m_concession_evidence_type = concession_evidence_type;
    m_concession_evidence_type_isSet = true;
}

bool OAIEICDetails_concessionCard::is_concession_evidence_type_Set() const{
    return m_concession_evidence_type_isSet;
}

bool OAIEICDetails_concessionCard::is_concession_evidence_type_Valid() const{
    return m_concession_evidence_type_isValid;
}

QString OAIEICDetails_concessionCard::getConcessionType() const {
    return m_concession_type;
}
void OAIEICDetails_concessionCard::setConcessionType(const QString &concession_type) {
    m_concession_type = concession_type;
    m_concession_type_isSet = true;
}

bool OAIEICDetails_concessionCard::is_concession_type_Set() const{
    return m_concession_type_isSet;
}

bool OAIEICDetails_concessionCard::is_concession_type_Valid() const{
    return m_concession_type_isValid;
}

QString OAIEICDetails_concessionCard::getCustomerReferenceNumber() const {
    return m_customer_reference_number;
}
void OAIEICDetails_concessionCard::setCustomerReferenceNumber(const QString &customer_reference_number) {
    m_customer_reference_number = customer_reference_number;
    m_customer_reference_number_isSet = true;
}

bool OAIEICDetails_concessionCard::is_customer_reference_number_Set() const{
    return m_customer_reference_number_isSet;
}

bool OAIEICDetails_concessionCard::is_customer_reference_number_Valid() const{
    return m_customer_reference_number_isValid;
}

QDate OAIEICDetails_concessionCard::getEndDate() const {
    return m_end_date;
}
void OAIEICDetails_concessionCard::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEICDetails_concessionCard::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEICDetails_concessionCard::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEICDetails_concessionCard::getFirstName() const {
    return m_first_name;
}
void OAIEICDetails_concessionCard::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIEICDetails_concessionCard::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIEICDetails_concessionCard::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIEICDetails_concessionCard::getLastName() const {
    return m_last_name;
}
void OAIEICDetails_concessionCard::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIEICDetails_concessionCard::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIEICDetails_concessionCard::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDate OAIEICDetails_concessionCard::getStartDate() const {
    return m_start_date;
}
void OAIEICDetails_concessionCard::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEICDetails_concessionCard::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEICDetails_concessionCard::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIEICDetails_concessionCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concession_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concession_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEICDetails_concessionCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_concession_evidence_type_isValid && m_concession_type_isValid && m_customer_reference_number_isValid && m_end_date_isValid && m_first_name_isValid && m_last_name_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
