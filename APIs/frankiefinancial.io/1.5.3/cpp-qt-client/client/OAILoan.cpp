/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoan::OAILoan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoan::OAILoan() {
    this->initializeModel();
}

OAILoan::~OAILoan() {}

void OAILoan::initializeModel() {

    m_abn_isSet = false;
    m_abn_isValid = false;

    m_acn_isSet = false;
    m_acn_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_term_length_isSet = false;
    m_term_length_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAILoan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoan::fromJsonObject(QJsonObject json) {

    m_abn_isValid = ::OpenAPI::fromJsonValue(m_abn, json[QString("abn")]);
    m_abn_isSet = !json[QString("abn")].isNull() && m_abn_isValid;

    m_acn_isValid = ::OpenAPI::fromJsonValue(m_acn, json[QString("acn")]);
    m_acn_isSet = !json[QString("acn")].isNull() && m_acn_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("endAt")]);
    m_end_at_isSet = !json[QString("endAt")].isNull() && m_end_at_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_term_length_isValid = ::OpenAPI::fromJsonValue(m_term_length, json[QString("termLength")]);
    m_term_length_isSet = !json[QString("termLength")].isNull() && m_term_length_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAILoan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoan::asJsonObject() const {
    QJsonObject obj;
    if (m_abn_isSet) {
        obj.insert(QString("abn"), ::OpenAPI::toJsonValue(m_abn));
    }
    if (m_acn_isSet) {
        obj.insert(QString("acn"), ::OpenAPI::toJsonValue(m_acn));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("endAt"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_term_length_isSet) {
        obj.insert(QString("termLength"), ::OpenAPI::toJsonValue(m_term_length));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAILoan::getAbn() const {
    return m_abn;
}
void OAILoan::setAbn(const QString &abn) {
    m_abn = abn;
    m_abn_isSet = true;
}

bool OAILoan::is_abn_Set() const{
    return m_abn_isSet;
}

bool OAILoan::is_abn_Valid() const{
    return m_abn_isValid;
}

QString OAILoan::getAcn() const {
    return m_acn;
}
void OAILoan::setAcn(const QString &acn) {
    m_acn = acn;
    m_acn_isSet = true;
}

bool OAILoan::is_acn_Set() const{
    return m_acn_isSet;
}

bool OAILoan::is_acn_Valid() const{
    return m_acn_isValid;
}

QString OAILoan::getAmount() const {
    return m_amount;
}
void OAILoan::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAILoan::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAILoan::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAILoan::getCompanyName() const {
    return m_company_name;
}
void OAILoan::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAILoan::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAILoan::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QDateTime OAILoan::getEndAt() const {
    return m_end_at;
}
void OAILoan::setEndAt(const QDateTime &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAILoan::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAILoan::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QDateTime OAILoan::getStartAt() const {
    return m_start_at;
}
void OAILoan::setStartAt(const QDateTime &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAILoan::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAILoan::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAILoan::getStatus() const {
    return m_status;
}
void OAILoan::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILoan::is_status_Set() const{
    return m_status_isSet;
}

bool OAILoan::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAILoan::getTermLength() const {
    return m_term_length;
}
void OAILoan::setTermLength(const qint32 &term_length) {
    m_term_length = term_length;
    m_term_length_isSet = true;
}

bool OAILoan::is_term_length_Set() const{
    return m_term_length_isSet;
}

bool OAILoan::is_term_length_Valid() const{
    return m_term_length_isValid;
}

QString OAILoan::getType() const {
    return m_type;
}
void OAILoan::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILoan::is_type_Set() const{
    return m_type_isSet;
}

bool OAILoan::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILoan::getUuid() const {
    return m_uuid;
}
void OAILoan::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAILoan::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAILoan::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAILoan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
