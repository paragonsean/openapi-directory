/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumBackgroundCheckType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumBackgroundCheckType::OAIEnumBackgroundCheckType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumBackgroundCheckType::OAIEnumBackgroundCheckType() {
    this->initializeModel();
}

OAIEnumBackgroundCheckType::~OAIEnumBackgroundCheckType() {}

void OAIEnumBackgroundCheckType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnumBackgroundCheckType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnumBackgroundCheckType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PEP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumBackgroundCheckType::PEP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SANCTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumBackgroundCheckType::SANCTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WATCHLIST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumBackgroundCheckType::WATCHLIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumBackgroundCheckType::MEDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumBackgroundCheckType::GROUP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnumBackgroundCheckType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnumBackgroundCheckType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnumBackgroundCheckType::PEP:
            val = "PEP";
            break;
        case eOAIEnumBackgroundCheckType::SANCTION:
            val = "SANCTION";
            break;
        case eOAIEnumBackgroundCheckType::WATCHLIST:
            val = "WATCHLIST";
            break;
        case eOAIEnumBackgroundCheckType::MEDIA:
            val = "MEDIA";
            break;
        case eOAIEnumBackgroundCheckType::GROUP:
            val = "GROUP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnumBackgroundCheckType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnumBackgroundCheckType::eOAIEnumBackgroundCheckType OAIEnumBackgroundCheckType::getValue() const {
    return m_value;
}

void OAIEnumBackgroundCheckType::setValue(const OAIEnumBackgroundCheckType::eOAIEnumBackgroundCheckType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnumBackgroundCheckType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnumBackgroundCheckType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
