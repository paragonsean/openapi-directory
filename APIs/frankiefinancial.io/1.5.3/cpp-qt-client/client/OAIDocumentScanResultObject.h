/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocumentScanResultObject.h
 *
 * The result of a scan will contain 4 parts  * The requestid - that&#39;s always there, and is the same that was passed in in the header.  * The results of the process and the meta data around it, including confidence levels, service used and the like  * extractedDocument - this will be an updated version of the document object passed in for scanning with results of the scan inserted. You can subsequently update this data as needed (say after confirmation with the end-consumer) through the various update functions.     * Any additional data extracted from the service that does not fit into the standard identity document fields will be placed into the extraData KVPs.    * extractedEntity - the service will attempt to create the basics of an entity&#39;s name, address, DoB, gender from the data returned from the scan.    You can then use this entity data to create a new entity for a wider check if needed.      * Note if you plan on doing this, make sure you include the extractedDocument reference in the \&quot;new\&quot; entity.    * EXTRA SPECIAL NOTE: If no useful data was returned in the scan, extractedDocument will be left unchanged, and extractedEntity will be left out 
 */

#ifndef OAIDocumentScanResultObject_H
#define OAIDocumentScanResultObject_H

#include <QJsonObject>

#include "OAIEntityObject.h"
#include "OAIIdentityDocumentObject.h"
#include "OAIProcessResultObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIdentityDocumentObject;
class OAIEntityObject;
class OAIProcessResultObject;

class OAIDocumentScanResultObject : public OAIObject {
public:
    OAIDocumentScanResultObject();
    OAIDocumentScanResultObject(QString json);
    ~OAIDocumentScanResultObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIdentityDocumentObject getExtractedDocument() const;
    void setExtractedDocument(const OAIIdentityDocumentObject &extracted_document);
    bool is_extracted_document_Set() const;
    bool is_extracted_document_Valid() const;

    OAIEntityObject getExtractedEntity() const;
    void setExtractedEntity(const OAIEntityObject &extracted_entity);
    bool is_extracted_entity_Set() const;
    bool is_extracted_entity_Valid() const;

    OAIProcessResultObject getProcessResult() const;
    void setProcessResult(const OAIProcessResultObject &process_result);
    bool is_process_result_Set() const;
    bool is_process_result_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIdentityDocumentObject m_extracted_document;
    bool m_extracted_document_isSet;
    bool m_extracted_document_isValid;

    OAIEntityObject m_extracted_entity;
    bool m_extracted_entity_isSet;
    bool m_extracted_entity_isValid;

    OAIProcessResultObject m_process_result;
    bool m_process_result_isSet;
    bool m_process_result_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocumentScanResultObject)

#endif // OAIDocumentScanResultObject_H
