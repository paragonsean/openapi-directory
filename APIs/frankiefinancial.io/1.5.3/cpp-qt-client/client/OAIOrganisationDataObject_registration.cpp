/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganisationDataObject_registration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganisationDataObject_registration::OAIOrganisationDataObject_registration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganisationDataObject_registration::OAIOrganisationDataObject_registration() {
    this->initializeModel();
}

OAIOrganisationDataObject_registration::~OAIOrganisationDataObject_registration() {}

void OAIOrganisationDataObject_registration::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_previous_number_isSet = false;
    m_previous_number_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIOrganisationDataObject_registration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganisationDataObject_registration::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_previous_number_isValid = ::OpenAPI::fromJsonValue(m_previous_number, json[QString("previousNumber")]);
    m_previous_number_isSet = !json[QString("previousNumber")].isNull() && m_previous_number_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIOrganisationDataObject_registration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganisationDataObject_registration::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_previous_number_isSet) {
        obj.insert(QString("previousNumber"), ::OpenAPI::toJsonValue(m_previous_number));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDate OAIOrganisationDataObject_registration::getDate() const {
    return m_date;
}
void OAIOrganisationDataObject_registration::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIOrganisationDataObject_registration::is_date_Set() const{
    return m_date_isSet;
}

bool OAIOrganisationDataObject_registration::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIOrganisationDataObject_registration::getPreviousNumber() const {
    return m_previous_number;
}
void OAIOrganisationDataObject_registration::setPreviousNumber(const QString &previous_number) {
    m_previous_number = previous_number;
    m_previous_number_isSet = true;
}

bool OAIOrganisationDataObject_registration::is_previous_number_Set() const{
    return m_previous_number_isSet;
}

bool OAIOrganisationDataObject_registration::is_previous_number_Valid() const{
    return m_previous_number_isValid;
}

QString OAIOrganisationDataObject_registration::getState() const {
    return m_state;
}
void OAIOrganisationDataObject_registration::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrganisationDataObject_registration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrganisationDataObject_registration::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIOrganisationDataObject_registration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganisationDataObject_registration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
