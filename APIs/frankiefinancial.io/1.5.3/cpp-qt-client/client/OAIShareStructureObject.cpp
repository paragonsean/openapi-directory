/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareStructureObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareStructureObject::OAIShareStructureObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareStructureObject::OAIShareStructureObject() {
    this->initializeModel();
}

OAIShareStructureObject::~OAIShareStructureObject() {}

void OAIShareStructureObject::initializeModel() {

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_class_code_isSet = false;
    m_class_code_isValid = false;

    m_class_title_isSet = false;
    m_class_title_isValid = false;

    m_doc_number_isSet = false;
    m_doc_number_isValid = false;

    m_doc_number_qualifier_isSet = false;
    m_doc_number_qualifier_isValid = false;

    m_shares_issued_isSet = false;
    m_shares_issued_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIShareStructureObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareStructureObject::fromJsonObject(QJsonObject json) {

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amountDue")]);
    m_amount_due_isSet = !json[QString("amountDue")].isNull() && m_amount_due_isValid;

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("amountPaid")]);
    m_amount_paid_isSet = !json[QString("amountPaid")].isNull() && m_amount_paid_isValid;

    m_class_code_isValid = ::OpenAPI::fromJsonValue(m_class_code, json[QString("classCode")]);
    m_class_code_isSet = !json[QString("classCode")].isNull() && m_class_code_isValid;

    m_class_title_isValid = ::OpenAPI::fromJsonValue(m_class_title, json[QString("classTitle")]);
    m_class_title_isSet = !json[QString("classTitle")].isNull() && m_class_title_isValid;

    m_doc_number_isValid = ::OpenAPI::fromJsonValue(m_doc_number, json[QString("docNumber")]);
    m_doc_number_isSet = !json[QString("docNumber")].isNull() && m_doc_number_isValid;

    m_doc_number_qualifier_isValid = ::OpenAPI::fromJsonValue(m_doc_number_qualifier, json[QString("docNumberQualifier")]);
    m_doc_number_qualifier_isSet = !json[QString("docNumberQualifier")].isNull() && m_doc_number_qualifier_isValid;

    m_shares_issued_isValid = ::OpenAPI::fromJsonValue(m_shares_issued, json[QString("sharesIssued")]);
    m_shares_issued_isSet = !json[QString("sharesIssued")].isNull() && m_shares_issued_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIShareStructureObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareStructureObject::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_due_isSet) {
        obj.insert(QString("amountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_amount_paid_isSet) {
        obj.insert(QString("amountPaid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_class_code_isSet) {
        obj.insert(QString("classCode"), ::OpenAPI::toJsonValue(m_class_code));
    }
    if (m_class_title_isSet) {
        obj.insert(QString("classTitle"), ::OpenAPI::toJsonValue(m_class_title));
    }
    if (m_doc_number_isSet) {
        obj.insert(QString("docNumber"), ::OpenAPI::toJsonValue(m_doc_number));
    }
    if (m_doc_number_qualifier_isSet) {
        obj.insert(QString("docNumberQualifier"), ::OpenAPI::toJsonValue(m_doc_number_qualifier));
    }
    if (m_shares_issued_isSet) {
        obj.insert(QString("sharesIssued"), ::OpenAPI::toJsonValue(m_shares_issued));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

double OAIShareStructureObject::getAmountDue() const {
    return m_amount_due;
}
void OAIShareStructureObject::setAmountDue(const double &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIShareStructureObject::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIShareStructureObject::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

double OAIShareStructureObject::getAmountPaid() const {
    return m_amount_paid;
}
void OAIShareStructureObject::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAIShareStructureObject::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAIShareStructureObject::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

QString OAIShareStructureObject::getClassCode() const {
    return m_class_code;
}
void OAIShareStructureObject::setClassCode(const QString &class_code) {
    m_class_code = class_code;
    m_class_code_isSet = true;
}

bool OAIShareStructureObject::is_class_code_Set() const{
    return m_class_code_isSet;
}

bool OAIShareStructureObject::is_class_code_Valid() const{
    return m_class_code_isValid;
}

QString OAIShareStructureObject::getClassTitle() const {
    return m_class_title;
}
void OAIShareStructureObject::setClassTitle(const QString &class_title) {
    m_class_title = class_title;
    m_class_title_isSet = true;
}

bool OAIShareStructureObject::is_class_title_Set() const{
    return m_class_title_isSet;
}

bool OAIShareStructureObject::is_class_title_Valid() const{
    return m_class_title_isValid;
}

QString OAIShareStructureObject::getDocNumber() const {
    return m_doc_number;
}
void OAIShareStructureObject::setDocNumber(const QString &doc_number) {
    m_doc_number = doc_number;
    m_doc_number_isSet = true;
}

bool OAIShareStructureObject::is_doc_number_Set() const{
    return m_doc_number_isSet;
}

bool OAIShareStructureObject::is_doc_number_Valid() const{
    return m_doc_number_isValid;
}

QString OAIShareStructureObject::getDocNumberQualifier() const {
    return m_doc_number_qualifier;
}
void OAIShareStructureObject::setDocNumberQualifier(const QString &doc_number_qualifier) {
    m_doc_number_qualifier = doc_number_qualifier;
    m_doc_number_qualifier_isSet = true;
}

bool OAIShareStructureObject::is_doc_number_qualifier_Set() const{
    return m_doc_number_qualifier_isSet;
}

bool OAIShareStructureObject::is_doc_number_qualifier_Valid() const{
    return m_doc_number_qualifier_isValid;
}

qint32 OAIShareStructureObject::getSharesIssued() const {
    return m_shares_issued;
}
void OAIShareStructureObject::setSharesIssued(const qint32 &shares_issued) {
    m_shares_issued = shares_issued;
    m_shares_issued_isSet = true;
}

bool OAIShareStructureObject::is_shares_issued_Set() const{
    return m_shares_issued_isSet;
}

bool OAIShareStructureObject::is_shares_issued_Valid() const{
    return m_shares_issued_isValid;
}

QString OAIShareStructureObject::getStatus() const {
    return m_status;
}
void OAIShareStructureObject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShareStructureObject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShareStructureObject::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIShareStructureObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareStructureObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
