/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrganisationDataObject.h
 *
 * Organisation details for entities. Returned from an ASIC report. 
 */

#ifndef OAIOrganisationDataObject_H
#define OAIOrganisationDataObject_H

#include <QJsonObject>

#include "OAICodeDescription.h"
#include "OAIOrganisationDataObject_registration.h"
#include "OAIShareStructureObject.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodeDescription;
class OAIOrganisationDataObject_registration;
class OAIShareStructureObject;

class OAIOrganisationDataObject : public OAIObject {
public:
    OAIOrganisationDataObject();
    OAIOrganisationDataObject(QString json);
    ~OAIOrganisationDataObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdverseCreditDataPresent() const;
    void setAdverseCreditDataPresent(const bool &adverse_credit_data_present);
    bool is_adverse_credit_data_present_Set() const;
    bool is_adverse_credit_data_present_Valid() const;

    OAICodeDescription getRClass() const;
    void setRClass(const OAICodeDescription &r_class);
    bool is_r_class_Set() const;
    bool is_r_class_Valid() const;

    bool isDisclosingEntityIndicator() const;
    void setDisclosingEntityIndicator(const bool &disclosing_entity_indicator);
    bool is_disclosing_entity_indicator_Set() const;
    bool is_disclosing_entity_indicator_Valid() const;

    bool isIncludesNonBeneficiallyHeld() const;
    void setIncludesNonBeneficiallyHeld(const bool &includes_non_beneficially_held);
    bool is_includes_non_beneficially_held_Set() const;
    bool is_includes_non_beneficially_held_Valid() const;

    QString getKycCustomerType() const;
    void setKycCustomerType(const QString &kyc_customer_type);
    bool is_kyc_customer_type_Set() const;
    bool is_kyc_customer_type_Valid() const;

    QDate getLastCheckDate() const;
    void setLastCheckDate(const QDate &last_check_date);
    bool is_last_check_date_Set() const;
    bool is_last_check_date_Valid() const;

    bool isOwnershipResolved() const;
    void setOwnershipResolved(const bool &ownership_resolved);
    bool is_ownership_resolved_Set() const;
    bool is_ownership_resolved_Valid() const;

    QString getRegisteredName() const;
    void setRegisteredName(const QString &registered_name);
    bool is_registered_name_Set() const;
    bool is_registered_name_Valid() const;

    OAIOrganisationDataObject_registration getRegistration() const;
    void setRegistration(const OAIOrganisationDataObject_registration &registration);
    bool is_registration_Set() const;
    bool is_registration_Valid() const;

    QList<OAIShareStructureObject> getShareStructure() const;
    void setShareStructure(const QList<OAIShareStructureObject> &share_structure);
    bool is_share_structure_Set() const;
    bool is_share_structure_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    OAICodeDescription getStatus() const;
    void setStatus(const OAICodeDescription &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICodeDescription getSubclass() const;
    void setSubclass(const OAICodeDescription &subclass);
    bool is_subclass_Set() const;
    bool is_subclass_Valid() const;

    OAICodeDescription getType() const;
    void setType(const OAICodeDescription &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_adverse_credit_data_present;
    bool m_adverse_credit_data_present_isSet;
    bool m_adverse_credit_data_present_isValid;

    OAICodeDescription m_r_class;
    bool m_r_class_isSet;
    bool m_r_class_isValid;

    bool m_disclosing_entity_indicator;
    bool m_disclosing_entity_indicator_isSet;
    bool m_disclosing_entity_indicator_isValid;

    bool m_includes_non_beneficially_held;
    bool m_includes_non_beneficially_held_isSet;
    bool m_includes_non_beneficially_held_isValid;

    QString m_kyc_customer_type;
    bool m_kyc_customer_type_isSet;
    bool m_kyc_customer_type_isValid;

    QDate m_last_check_date;
    bool m_last_check_date_isSet;
    bool m_last_check_date_isValid;

    bool m_ownership_resolved;
    bool m_ownership_resolved_isSet;
    bool m_ownership_resolved_isValid;

    QString m_registered_name;
    bool m_registered_name_isSet;
    bool m_registered_name_isValid;

    OAIOrganisationDataObject_registration m_registration;
    bool m_registration_isSet;
    bool m_registration_isValid;

    QList<OAIShareStructureObject> m_share_structure;
    bool m_share_structure_isSet;
    bool m_share_structure_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    OAICodeDescription m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICodeDescription m_subclass;
    bool m_subclass_isSet;
    bool m_subclass_isValid;

    OAICodeDescription m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrganisationDataObject)

#endif // OAIOrganisationDataObject_H
