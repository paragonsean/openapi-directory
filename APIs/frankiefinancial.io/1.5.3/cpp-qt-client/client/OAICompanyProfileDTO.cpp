/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyProfileDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyProfileDTO::OAICompanyProfileDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyProfileDTO::OAICompanyProfileDTO() {
    this->initializeModel();
}

OAICompanyProfileDTO::~OAICompanyProfileDTO() {}

void OAICompanyProfileDTO::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_activity_declaration_isSet = false;
    m_activity_declaration_isValid = false;

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_agent_address_isSet = false;
    m_agent_address_isValid = false;

    m_agent_name_isSet = false;
    m_agent_name_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_appointment_date_of_official_isSet = false;
    m_appointment_date_of_official_isValid = false;

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_company_name_in_english_isSet = false;
    m_company_name_in_english_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fax_number_isSet = false;
    m_fax_number_isValid = false;

    m_fiscal_code_isSet = false;
    m_fiscal_code_isValid = false;

    m_foundation_date_isSet = false;
    m_foundation_date_isValid = false;

    m_functions_isSet = false;
    m_functions_isValid = false;

    m_headquarters_isSet = false;
    m_headquarters_isValid = false;

    m_key_figures_isSet = false;
    m_key_figures_isValid = false;

    m_last_annual_account_date_isSet = false;
    m_last_annual_account_date_isValid = false;

    m_legal_form_isSet = false;
    m_legal_form_isValid = false;

    m_legal_form_declaration_isSet = false;
    m_legal_form_declaration_isValid = false;

    m_legal_form_details_isSet = false;
    m_legal_form_details_isValid = false;

    m_legal_status_isSet = false;
    m_legal_status_isValid = false;

    m_mailing_address_isSet = false;
    m_mailing_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_official_isSet = false;
    m_official_isValid = false;

    m_registration_authority_isSet = false;
    m_registration_authority_isValid = false;

    m_registration_authority_code_isSet = false;
    m_registration_authority_code_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_signing_declaration_isSet = false;
    m_signing_declaration_isValid = false;

    m_signing_declaration_description_isSet = false;
    m_signing_declaration_description_isValid = false;

    m_signing_language_isSet = false;
    m_signing_language_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_of_incorporation_isSet = false;
    m_state_of_incorporation_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;

    m_virtual_id_isSet = false;
    m_virtual_id_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;

    m_director_and_share_details_isSet = false;
    m_director_and_share_details_isValid = false;

    m_officers_isSet = false;
    m_officers_isValid = false;
}

void OAICompanyProfileDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyProfileDTO::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("Activity")]);
    m_activity_isSet = !json[QString("Activity")].isNull() && m_activity_isValid;

    m_activity_declaration_isValid = ::OpenAPI::fromJsonValue(m_activity_declaration, json[QString("ActivityDeclaration")]);
    m_activity_declaration_isSet = !json[QString("ActivityDeclaration")].isNull() && m_activity_declaration_isValid;

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("Addresses")]);
    m_addresses_isSet = !json[QString("Addresses")].isNull() && m_addresses_isValid;

    m_agent_address_isValid = ::OpenAPI::fromJsonValue(m_agent_address, json[QString("AgentAddress")]);
    m_agent_address_isSet = !json[QString("AgentAddress")].isNull() && m_agent_address_isValid;

    m_agent_name_isValid = ::OpenAPI::fromJsonValue(m_agent_name, json[QString("AgentName")]);
    m_agent_name_isSet = !json[QString("AgentName")].isNull() && m_agent_name_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("Aliases")]);
    m_aliases_isSet = !json[QString("Aliases")].isNull() && m_aliases_isValid;

    m_appointment_date_of_official_isValid = ::OpenAPI::fromJsonValue(m_appointment_date_of_official, json[QString("AppointmentDateOfOfficial")]);
    m_appointment_date_of_official_isSet = !json[QString("AppointmentDateOfOfficial")].isNull() && m_appointment_date_of_official_isValid;

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("Capital")]);
    m_capital_isSet = !json[QString("Capital")].isNull() && m_capital_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_company_name_in_english_isValid = ::OpenAPI::fromJsonValue(m_company_name_in_english, json[QString("CompanyNameInEnglish")]);
    m_company_name_in_english_isSet = !json[QString("CompanyNameInEnglish")].isNull() && m_company_name_in_english_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_fax_number_isValid = ::OpenAPI::fromJsonValue(m_fax_number, json[QString("FaxNumber")]);
    m_fax_number_isSet = !json[QString("FaxNumber")].isNull() && m_fax_number_isValid;

    m_fiscal_code_isValid = ::OpenAPI::fromJsonValue(m_fiscal_code, json[QString("FiscalCode")]);
    m_fiscal_code_isSet = !json[QString("FiscalCode")].isNull() && m_fiscal_code_isValid;

    m_foundation_date_isValid = ::OpenAPI::fromJsonValue(m_foundation_date, json[QString("FoundationDate")]);
    m_foundation_date_isSet = !json[QString("FoundationDate")].isNull() && m_foundation_date_isValid;

    m_functions_isValid = ::OpenAPI::fromJsonValue(m_functions, json[QString("Functions")]);
    m_functions_isSet = !json[QString("Functions")].isNull() && m_functions_isValid;

    m_headquarters_isValid = ::OpenAPI::fromJsonValue(m_headquarters, json[QString("Headquarters")]);
    m_headquarters_isSet = !json[QString("Headquarters")].isNull() && m_headquarters_isValid;

    m_key_figures_isValid = ::OpenAPI::fromJsonValue(m_key_figures, json[QString("KeyFigures")]);
    m_key_figures_isSet = !json[QString("KeyFigures")].isNull() && m_key_figures_isValid;

    m_last_annual_account_date_isValid = ::OpenAPI::fromJsonValue(m_last_annual_account_date, json[QString("LastAnnualAccountDate")]);
    m_last_annual_account_date_isSet = !json[QString("LastAnnualAccountDate")].isNull() && m_last_annual_account_date_isValid;

    m_legal_form_isValid = ::OpenAPI::fromJsonValue(m_legal_form, json[QString("LegalForm")]);
    m_legal_form_isSet = !json[QString("LegalForm")].isNull() && m_legal_form_isValid;

    m_legal_form_declaration_isValid = ::OpenAPI::fromJsonValue(m_legal_form_declaration, json[QString("LegalFormDeclaration")]);
    m_legal_form_declaration_isSet = !json[QString("LegalFormDeclaration")].isNull() && m_legal_form_declaration_isValid;

    m_legal_form_details_isValid = ::OpenAPI::fromJsonValue(m_legal_form_details, json[QString("LegalFormDetails")]);
    m_legal_form_details_isSet = !json[QString("LegalFormDetails")].isNull() && m_legal_form_details_isValid;

    m_legal_status_isValid = ::OpenAPI::fromJsonValue(m_legal_status, json[QString("LegalStatus")]);
    m_legal_status_isSet = !json[QString("LegalStatus")].isNull() && m_legal_status_isValid;

    m_mailing_address_isValid = ::OpenAPI::fromJsonValue(m_mailing_address, json[QString("MailingAddress")]);
    m_mailing_address_isSet = !json[QString("MailingAddress")].isNull() && m_mailing_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_official_isValid = ::OpenAPI::fromJsonValue(m_official, json[QString("Official")]);
    m_official_isSet = !json[QString("Official")].isNull() && m_official_isValid;

    m_registration_authority_isValid = ::OpenAPI::fromJsonValue(m_registration_authority, json[QString("RegistrationAuthority")]);
    m_registration_authority_isSet = !json[QString("RegistrationAuthority")].isNull() && m_registration_authority_isValid;

    m_registration_authority_code_isValid = ::OpenAPI::fromJsonValue(m_registration_authority_code, json[QString("RegistrationAuthorityCode")]);
    m_registration_authority_code_isSet = !json[QString("RegistrationAuthorityCode")].isNull() && m_registration_authority_code_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("RegistrationDate")]);
    m_registration_date_isSet = !json[QString("RegistrationDate")].isNull() && m_registration_date_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("RegistrationNumber")]);
    m_registration_number_isSet = !json[QString("RegistrationNumber")].isNull() && m_registration_number_isValid;

    m_signing_declaration_isValid = ::OpenAPI::fromJsonValue(m_signing_declaration, json[QString("SigningDeclaration")]);
    m_signing_declaration_isSet = !json[QString("SigningDeclaration")].isNull() && m_signing_declaration_isValid;

    m_signing_declaration_description_isValid = ::OpenAPI::fromJsonValue(m_signing_declaration_description, json[QString("SigningDeclarationDescription")]);
    m_signing_declaration_description_isSet = !json[QString("SigningDeclarationDescription")].isNull() && m_signing_declaration_description_isValid;

    m_signing_language_isValid = ::OpenAPI::fromJsonValue(m_signing_language, json[QString("SigningLanguage")]);
    m_signing_language_isSet = !json[QString("SigningLanguage")].isNull() && m_signing_language_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_state_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_state_of_incorporation, json[QString("StateOfIncorporation")]);
    m_state_of_incorporation_isSet = !json[QString("StateOfIncorporation")].isNull() && m_state_of_incorporation_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("TelephoneNumber")]);
    m_telephone_number_isSet = !json[QString("TelephoneNumber")].isNull() && m_telephone_number_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("VatNumber")]);
    m_vat_number_isSet = !json[QString("VatNumber")].isNull() && m_vat_number_isValid;

    m_virtual_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_id, json[QString("VirtualId")]);
    m_virtual_id_isSet = !json[QString("VirtualId")].isNull() && m_virtual_id_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("WebsiteURL")]);
    m_website_url_isSet = !json[QString("WebsiteURL")].isNull() && m_website_url_isValid;

    m_director_and_share_details_isValid = ::OpenAPI::fromJsonValue(m_director_and_share_details, json[QString("directorAndShareDetails")]);
    m_director_and_share_details_isSet = !json[QString("directorAndShareDetails")].isNull() && m_director_and_share_details_isValid;

    m_officers_isValid = ::OpenAPI::fromJsonValue(m_officers, json[QString("officers")]);
    m_officers_isSet = !json[QString("officers")].isNull() && m_officers_isValid;
}

QString OAICompanyProfileDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyProfileDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.isSet()) {
        obj.insert(QString("Activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_activity_declaration.isSet()) {
        obj.insert(QString("ActivityDeclaration"), ::OpenAPI::toJsonValue(m_activity_declaration));
    }
    if (m_addresses.isSet()) {
        obj.insert(QString("Addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_agent_address_isSet) {
        obj.insert(QString("AgentAddress"), ::OpenAPI::toJsonValue(m_agent_address));
    }
    if (m_agent_name_isSet) {
        obj.insert(QString("AgentName"), ::OpenAPI::toJsonValue(m_agent_name));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("Aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_appointment_date_of_official_isSet) {
        obj.insert(QString("AppointmentDateOfOfficial"), ::OpenAPI::toJsonValue(m_appointment_date_of_official));
    }
    if (m_capital.isSet()) {
        obj.insert(QString("Capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_company_name_in_english_isSet) {
        obj.insert(QString("CompanyNameInEnglish"), ::OpenAPI::toJsonValue(m_company_name_in_english));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fax_number_isSet) {
        obj.insert(QString("FaxNumber"), ::OpenAPI::toJsonValue(m_fax_number));
    }
    if (m_fiscal_code_isSet) {
        obj.insert(QString("FiscalCode"), ::OpenAPI::toJsonValue(m_fiscal_code));
    }
    if (m_foundation_date_isSet) {
        obj.insert(QString("FoundationDate"), ::OpenAPI::toJsonValue(m_foundation_date));
    }
    if (m_functions.isSet()) {
        obj.insert(QString("Functions"), ::OpenAPI::toJsonValue(m_functions));
    }
    if (m_headquarters_isSet) {
        obj.insert(QString("Headquarters"), ::OpenAPI::toJsonValue(m_headquarters));
    }
    if (m_key_figures.isSet()) {
        obj.insert(QString("KeyFigures"), ::OpenAPI::toJsonValue(m_key_figures));
    }
    if (m_last_annual_account_date_isSet) {
        obj.insert(QString("LastAnnualAccountDate"), ::OpenAPI::toJsonValue(m_last_annual_account_date));
    }
    if (m_legal_form_isSet) {
        obj.insert(QString("LegalForm"), ::OpenAPI::toJsonValue(m_legal_form));
    }
    if (m_legal_form_declaration_isSet) {
        obj.insert(QString("LegalFormDeclaration"), ::OpenAPI::toJsonValue(m_legal_form_declaration));
    }
    if (m_legal_form_details.isSet()) {
        obj.insert(QString("LegalFormDetails"), ::OpenAPI::toJsonValue(m_legal_form_details));
    }
    if (m_legal_status_isSet) {
        obj.insert(QString("LegalStatus"), ::OpenAPI::toJsonValue(m_legal_status));
    }
    if (m_mailing_address_isSet) {
        obj.insert(QString("MailingAddress"), ::OpenAPI::toJsonValue(m_mailing_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_official_isSet) {
        obj.insert(QString("Official"), ::OpenAPI::toJsonValue(m_official));
    }
    if (m_registration_authority_isSet) {
        obj.insert(QString("RegistrationAuthority"), ::OpenAPI::toJsonValue(m_registration_authority));
    }
    if (m_registration_authority_code_isSet) {
        obj.insert(QString("RegistrationAuthorityCode"), ::OpenAPI::toJsonValue(m_registration_authority_code));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("RegistrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("RegistrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_signing_declaration_isSet) {
        obj.insert(QString("SigningDeclaration"), ::OpenAPI::toJsonValue(m_signing_declaration));
    }
    if (m_signing_declaration_description_isSet) {
        obj.insert(QString("SigningDeclarationDescription"), ::OpenAPI::toJsonValue(m_signing_declaration_description));
    }
    if (m_signing_language_isSet) {
        obj.insert(QString("SigningLanguage"), ::OpenAPI::toJsonValue(m_signing_language));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_of_incorporation_isSet) {
        obj.insert(QString("StateOfIncorporation"), ::OpenAPI::toJsonValue(m_state_of_incorporation));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("TelephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("VatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    if (m_virtual_id_isSet) {
        obj.insert(QString("VirtualId"), ::OpenAPI::toJsonValue(m_virtual_id));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("WebsiteURL"), ::OpenAPI::toJsonValue(m_website_url));
    }
    if (m_director_and_share_details.isSet()) {
        obj.insert(QString("directorAndShareDetails"), ::OpenAPI::toJsonValue(m_director_and_share_details));
    }
    if (m_officers.isSet()) {
        obj.insert(QString("officers"), ::OpenAPI::toJsonValue(m_officers));
    }
    return obj;
}

OAIArrayOfActivityDTO OAICompanyProfileDTO::getActivity() const {
    return m_activity;
}
void OAICompanyProfileDTO::setActivity(const OAIArrayOfActivityDTO &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAICompanyProfileDTO::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAICompanyProfileDTO::is_activity_Valid() const{
    return m_activity_isValid;
}

OAIArrayOfActivityDeclarationDTO OAICompanyProfileDTO::getActivityDeclaration() const {
    return m_activity_declaration;
}
void OAICompanyProfileDTO::setActivityDeclaration(const OAIArrayOfActivityDeclarationDTO &activity_declaration) {
    m_activity_declaration = activity_declaration;
    m_activity_declaration_isSet = true;
}

bool OAICompanyProfileDTO::is_activity_declaration_Set() const{
    return m_activity_declaration_isSet;
}

bool OAICompanyProfileDTO::is_activity_declaration_Valid() const{
    return m_activity_declaration_isValid;
}

OAIArrayOfAddressDTO OAICompanyProfileDTO::getAddresses() const {
    return m_addresses;
}
void OAICompanyProfileDTO::setAddresses(const OAIArrayOfAddressDTO &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAICompanyProfileDTO::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAICompanyProfileDTO::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QString OAICompanyProfileDTO::getAgentAddress() const {
    return m_agent_address;
}
void OAICompanyProfileDTO::setAgentAddress(const QString &agent_address) {
    m_agent_address = agent_address;
    m_agent_address_isSet = true;
}

bool OAICompanyProfileDTO::is_agent_address_Set() const{
    return m_agent_address_isSet;
}

bool OAICompanyProfileDTO::is_agent_address_Valid() const{
    return m_agent_address_isValid;
}

QString OAICompanyProfileDTO::getAgentName() const {
    return m_agent_name;
}
void OAICompanyProfileDTO::setAgentName(const QString &agent_name) {
    m_agent_name = agent_name;
    m_agent_name_isSet = true;
}

bool OAICompanyProfileDTO::is_agent_name_Set() const{
    return m_agent_name_isSet;
}

bool OAICompanyProfileDTO::is_agent_name_Valid() const{
    return m_agent_name_isValid;
}

OAIArrayOfString OAICompanyProfileDTO::getAliases() const {
    return m_aliases;
}
void OAICompanyProfileDTO::setAliases(const OAIArrayOfString &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAICompanyProfileDTO::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAICompanyProfileDTO::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAICompanyProfileDTO::getAppointmentDateOfOfficial() const {
    return m_appointment_date_of_official;
}
void OAICompanyProfileDTO::setAppointmentDateOfOfficial(const QString &appointment_date_of_official) {
    m_appointment_date_of_official = appointment_date_of_official;
    m_appointment_date_of_official_isSet = true;
}

bool OAICompanyProfileDTO::is_appointment_date_of_official_Set() const{
    return m_appointment_date_of_official_isSet;
}

bool OAICompanyProfileDTO::is_appointment_date_of_official_Valid() const{
    return m_appointment_date_of_official_isValid;
}

OAIArrayOfCapitalDTO OAICompanyProfileDTO::getCapital() const {
    return m_capital;
}
void OAICompanyProfileDTO::setCapital(const OAIArrayOfCapitalDTO &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAICompanyProfileDTO::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAICompanyProfileDTO::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAICompanyProfileDTO::getCode() const {
    return m_code;
}
void OAICompanyProfileDTO::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICompanyProfileDTO::is_code_Set() const{
    return m_code_isSet;
}

bool OAICompanyProfileDTO::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICompanyProfileDTO::getCompanyNameInEnglish() const {
    return m_company_name_in_english;
}
void OAICompanyProfileDTO::setCompanyNameInEnglish(const QString &company_name_in_english) {
    m_company_name_in_english = company_name_in_english;
    m_company_name_in_english_isSet = true;
}

bool OAICompanyProfileDTO::is_company_name_in_english_Set() const{
    return m_company_name_in_english_isSet;
}

bool OAICompanyProfileDTO::is_company_name_in_english_Valid() const{
    return m_company_name_in_english_isValid;
}

QString OAICompanyProfileDTO::getDate() const {
    return m_date;
}
void OAICompanyProfileDTO::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICompanyProfileDTO::is_date_Set() const{
    return m_date_isSet;
}

bool OAICompanyProfileDTO::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICompanyProfileDTO::getEmail() const {
    return m_email;
}
void OAICompanyProfileDTO::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICompanyProfileDTO::is_email_Set() const{
    return m_email_isSet;
}

bool OAICompanyProfileDTO::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICompanyProfileDTO::getFaxNumber() const {
    return m_fax_number;
}
void OAICompanyProfileDTO::setFaxNumber(const QString &fax_number) {
    m_fax_number = fax_number;
    m_fax_number_isSet = true;
}

bool OAICompanyProfileDTO::is_fax_number_Set() const{
    return m_fax_number_isSet;
}

bool OAICompanyProfileDTO::is_fax_number_Valid() const{
    return m_fax_number_isValid;
}

QString OAICompanyProfileDTO::getFiscalCode() const {
    return m_fiscal_code;
}
void OAICompanyProfileDTO::setFiscalCode(const QString &fiscal_code) {
    m_fiscal_code = fiscal_code;
    m_fiscal_code_isSet = true;
}

bool OAICompanyProfileDTO::is_fiscal_code_Set() const{
    return m_fiscal_code_isSet;
}

bool OAICompanyProfileDTO::is_fiscal_code_Valid() const{
    return m_fiscal_code_isValid;
}

QString OAICompanyProfileDTO::getFoundationDate() const {
    return m_foundation_date;
}
void OAICompanyProfileDTO::setFoundationDate(const QString &foundation_date) {
    m_foundation_date = foundation_date;
    m_foundation_date_isSet = true;
}

bool OAICompanyProfileDTO::is_foundation_date_Set() const{
    return m_foundation_date_isSet;
}

bool OAICompanyProfileDTO::is_foundation_date_Valid() const{
    return m_foundation_date_isValid;
}

OAIArrayOfString OAICompanyProfileDTO::getFunctions() const {
    return m_functions;
}
void OAICompanyProfileDTO::setFunctions(const OAIArrayOfString &functions) {
    m_functions = functions;
    m_functions_isSet = true;
}

bool OAICompanyProfileDTO::is_functions_Set() const{
    return m_functions_isSet;
}

bool OAICompanyProfileDTO::is_functions_Valid() const{
    return m_functions_isValid;
}

QString OAICompanyProfileDTO::getHeadquarters() const {
    return m_headquarters;
}
void OAICompanyProfileDTO::setHeadquarters(const QString &headquarters) {
    m_headquarters = headquarters;
    m_headquarters_isSet = true;
}

bool OAICompanyProfileDTO::is_headquarters_Set() const{
    return m_headquarters_isSet;
}

bool OAICompanyProfileDTO::is_headquarters_Valid() const{
    return m_headquarters_isValid;
}

OAIArrayOfString OAICompanyProfileDTO::getKeyFigures() const {
    return m_key_figures;
}
void OAICompanyProfileDTO::setKeyFigures(const OAIArrayOfString &key_figures) {
    m_key_figures = key_figures;
    m_key_figures_isSet = true;
}

bool OAICompanyProfileDTO::is_key_figures_Set() const{
    return m_key_figures_isSet;
}

bool OAICompanyProfileDTO::is_key_figures_Valid() const{
    return m_key_figures_isValid;
}

QString OAICompanyProfileDTO::getLastAnnualAccountDate() const {
    return m_last_annual_account_date;
}
void OAICompanyProfileDTO::setLastAnnualAccountDate(const QString &last_annual_account_date) {
    m_last_annual_account_date = last_annual_account_date;
    m_last_annual_account_date_isSet = true;
}

bool OAICompanyProfileDTO::is_last_annual_account_date_Set() const{
    return m_last_annual_account_date_isSet;
}

bool OAICompanyProfileDTO::is_last_annual_account_date_Valid() const{
    return m_last_annual_account_date_isValid;
}

QString OAICompanyProfileDTO::getLegalForm() const {
    return m_legal_form;
}
void OAICompanyProfileDTO::setLegalForm(const QString &legal_form) {
    m_legal_form = legal_form;
    m_legal_form_isSet = true;
}

bool OAICompanyProfileDTO::is_legal_form_Set() const{
    return m_legal_form_isSet;
}

bool OAICompanyProfileDTO::is_legal_form_Valid() const{
    return m_legal_form_isValid;
}

QString OAICompanyProfileDTO::getLegalFormDeclaration() const {
    return m_legal_form_declaration;
}
void OAICompanyProfileDTO::setLegalFormDeclaration(const QString &legal_form_declaration) {
    m_legal_form_declaration = legal_form_declaration;
    m_legal_form_declaration_isSet = true;
}

bool OAICompanyProfileDTO::is_legal_form_declaration_Set() const{
    return m_legal_form_declaration_isSet;
}

bool OAICompanyProfileDTO::is_legal_form_declaration_Valid() const{
    return m_legal_form_declaration_isValid;
}

OAILegalFormDTO OAICompanyProfileDTO::getLegalFormDetails() const {
    return m_legal_form_details;
}
void OAICompanyProfileDTO::setLegalFormDetails(const OAILegalFormDTO &legal_form_details) {
    m_legal_form_details = legal_form_details;
    m_legal_form_details_isSet = true;
}

bool OAICompanyProfileDTO::is_legal_form_details_Set() const{
    return m_legal_form_details_isSet;
}

bool OAICompanyProfileDTO::is_legal_form_details_Valid() const{
    return m_legal_form_details_isValid;
}

QString OAICompanyProfileDTO::getLegalStatus() const {
    return m_legal_status;
}
void OAICompanyProfileDTO::setLegalStatus(const QString &legal_status) {
    m_legal_status = legal_status;
    m_legal_status_isSet = true;
}

bool OAICompanyProfileDTO::is_legal_status_Set() const{
    return m_legal_status_isSet;
}

bool OAICompanyProfileDTO::is_legal_status_Valid() const{
    return m_legal_status_isValid;
}

QString OAICompanyProfileDTO::getMailingAddress() const {
    return m_mailing_address;
}
void OAICompanyProfileDTO::setMailingAddress(const QString &mailing_address) {
    m_mailing_address = mailing_address;
    m_mailing_address_isSet = true;
}

bool OAICompanyProfileDTO::is_mailing_address_Set() const{
    return m_mailing_address_isSet;
}

bool OAICompanyProfileDTO::is_mailing_address_Valid() const{
    return m_mailing_address_isValid;
}

QString OAICompanyProfileDTO::getName() const {
    return m_name;
}
void OAICompanyProfileDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompanyProfileDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompanyProfileDTO::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICompanyProfileDTO::isOfficial() const {
    return m_official;
}
void OAICompanyProfileDTO::setOfficial(const bool &official) {
    m_official = official;
    m_official_isSet = true;
}

bool OAICompanyProfileDTO::is_official_Set() const{
    return m_official_isSet;
}

bool OAICompanyProfileDTO::is_official_Valid() const{
    return m_official_isValid;
}

QString OAICompanyProfileDTO::getRegistrationAuthority() const {
    return m_registration_authority;
}
void OAICompanyProfileDTO::setRegistrationAuthority(const QString &registration_authority) {
    m_registration_authority = registration_authority;
    m_registration_authority_isSet = true;
}

bool OAICompanyProfileDTO::is_registration_authority_Set() const{
    return m_registration_authority_isSet;
}

bool OAICompanyProfileDTO::is_registration_authority_Valid() const{
    return m_registration_authority_isValid;
}

QString OAICompanyProfileDTO::getRegistrationAuthorityCode() const {
    return m_registration_authority_code;
}
void OAICompanyProfileDTO::setRegistrationAuthorityCode(const QString &registration_authority_code) {
    m_registration_authority_code = registration_authority_code;
    m_registration_authority_code_isSet = true;
}

bool OAICompanyProfileDTO::is_registration_authority_code_Set() const{
    return m_registration_authority_code_isSet;
}

bool OAICompanyProfileDTO::is_registration_authority_code_Valid() const{
    return m_registration_authority_code_isValid;
}

QString OAICompanyProfileDTO::getRegistrationDate() const {
    return m_registration_date;
}
void OAICompanyProfileDTO::setRegistrationDate(const QString &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAICompanyProfileDTO::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAICompanyProfileDTO::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QString OAICompanyProfileDTO::getRegistrationNumber() const {
    return m_registration_number;
}
void OAICompanyProfileDTO::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAICompanyProfileDTO::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAICompanyProfileDTO::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QString OAICompanyProfileDTO::getSigningDeclaration() const {
    return m_signing_declaration;
}
void OAICompanyProfileDTO::setSigningDeclaration(const QString &signing_declaration) {
    m_signing_declaration = signing_declaration;
    m_signing_declaration_isSet = true;
}

bool OAICompanyProfileDTO::is_signing_declaration_Set() const{
    return m_signing_declaration_isSet;
}

bool OAICompanyProfileDTO::is_signing_declaration_Valid() const{
    return m_signing_declaration_isValid;
}

QString OAICompanyProfileDTO::getSigningDeclarationDescription() const {
    return m_signing_declaration_description;
}
void OAICompanyProfileDTO::setSigningDeclarationDescription(const QString &signing_declaration_description) {
    m_signing_declaration_description = signing_declaration_description;
    m_signing_declaration_description_isSet = true;
}

bool OAICompanyProfileDTO::is_signing_declaration_description_Set() const{
    return m_signing_declaration_description_isSet;
}

bool OAICompanyProfileDTO::is_signing_declaration_description_Valid() const{
    return m_signing_declaration_description_isValid;
}

QString OAICompanyProfileDTO::getSigningLanguage() const {
    return m_signing_language;
}
void OAICompanyProfileDTO::setSigningLanguage(const QString &signing_language) {
    m_signing_language = signing_language;
    m_signing_language_isSet = true;
}

bool OAICompanyProfileDTO::is_signing_language_Set() const{
    return m_signing_language_isSet;
}

bool OAICompanyProfileDTO::is_signing_language_Valid() const{
    return m_signing_language_isValid;
}

QString OAICompanyProfileDTO::getSource() const {
    return m_source;
}
void OAICompanyProfileDTO::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICompanyProfileDTO::is_source_Set() const{
    return m_source_isSet;
}

bool OAICompanyProfileDTO::is_source_Valid() const{
    return m_source_isValid;
}

QString OAICompanyProfileDTO::getStateOfIncorporation() const {
    return m_state_of_incorporation;
}
void OAICompanyProfileDTO::setStateOfIncorporation(const QString &state_of_incorporation) {
    m_state_of_incorporation = state_of_incorporation;
    m_state_of_incorporation_isSet = true;
}

bool OAICompanyProfileDTO::is_state_of_incorporation_Set() const{
    return m_state_of_incorporation_isSet;
}

bool OAICompanyProfileDTO::is_state_of_incorporation_Valid() const{
    return m_state_of_incorporation_isValid;
}

QString OAICompanyProfileDTO::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAICompanyProfileDTO::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAICompanyProfileDTO::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAICompanyProfileDTO::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

QString OAICompanyProfileDTO::getVatNumber() const {
    return m_vat_number;
}
void OAICompanyProfileDTO::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAICompanyProfileDTO::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAICompanyProfileDTO::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

QString OAICompanyProfileDTO::getVirtualId() const {
    return m_virtual_id;
}
void OAICompanyProfileDTO::setVirtualId(const QString &virtual_id) {
    m_virtual_id = virtual_id;
    m_virtual_id_isSet = true;
}

bool OAICompanyProfileDTO::is_virtual_id_Set() const{
    return m_virtual_id_isSet;
}

bool OAICompanyProfileDTO::is_virtual_id_Valid() const{
    return m_virtual_id_isValid;
}

QString OAICompanyProfileDTO::getWebsiteUrl() const {
    return m_website_url;
}
void OAICompanyProfileDTO::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAICompanyProfileDTO::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAICompanyProfileDTO::is_website_url_Valid() const{
    return m_website_url_isValid;
}

OAIDirectorAndShareDetails OAICompanyProfileDTO::getDirectorAndShareDetails() const {
    return m_director_and_share_details;
}
void OAICompanyProfileDTO::setDirectorAndShareDetails(const OAIDirectorAndShareDetails &director_and_share_details) {
    m_director_and_share_details = director_and_share_details;
    m_director_and_share_details_isSet = true;
}

bool OAICompanyProfileDTO::is_director_and_share_details_Set() const{
    return m_director_and_share_details_isSet;
}

bool OAICompanyProfileDTO::is_director_and_share_details_Valid() const{
    return m_director_and_share_details_isValid;
}

OAIArrayOfUSOfficerDTO OAICompanyProfileDTO::getOfficers() const {
    return m_officers;
}
void OAICompanyProfileDTO::setOfficers(const OAIArrayOfUSOfficerDTO &officers) {
    m_officers = officers;
    m_officers_isSet = true;
}

bool OAICompanyProfileDTO::is_officers_Set() const{
    return m_officers_isSet;
}

bool OAICompanyProfileDTO::is_officers_Valid() const{
    return m_officers_isValid;
}

bool OAICompanyProfileDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_date_of_official_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_in_english_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fiscal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foundation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headquarters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_figures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_annual_account_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_declaration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_authority_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_declaration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_declaration_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_of_incorporation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_director_and_share_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_officers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyProfileDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
