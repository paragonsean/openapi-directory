/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayMarkUp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayMarkUp::OAIDisplayMarkUp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayMarkUp::OAIDisplayMarkUp() {
    this->initializeModel();
}

OAIDisplayMarkUp::~OAIDisplayMarkUp() {}

void OAIDisplayMarkUp::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_confirmation_isSet = false;
    m_confirmation_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDisplayMarkUp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayMarkUp::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_confirmation_isValid = ::OpenAPI::fromJsonValue(m_confirmation, json[QString("confirmation")]);
    m_confirmation_isSet = !json[QString("confirmation")].isNull() && m_confirmation_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDisplayMarkUp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayMarkUp::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_isSet) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_confirmation_isSet) {
        obj.insert(QString("confirmation"), ::OpenAPI::toJsonValue(m_confirmation));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDisplayMarkUp::getAttribute() const {
    return m_attribute;
}
void OAIDisplayMarkUp::setAttribute(const QString &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIDisplayMarkUp::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIDisplayMarkUp::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QList<OAIDisplayMarkUp> OAIDisplayMarkUp::getChildren() const {
    return m_children;
}
void OAIDisplayMarkUp::setChildren(const QList<OAIDisplayMarkUp> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIDisplayMarkUp::is_children_Set() const{
    return m_children_isSet;
}

bool OAIDisplayMarkUp::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIDisplayMarkUp::getConfirmation() const {
    return m_confirmation;
}
void OAIDisplayMarkUp::setConfirmation(const QString &confirmation) {
    m_confirmation = confirmation;
    m_confirmation_isSet = true;
}

bool OAIDisplayMarkUp::is_confirmation_Set() const{
    return m_confirmation_isSet;
}

bool OAIDisplayMarkUp::is_confirmation_Valid() const{
    return m_confirmation_isValid;
}

QString OAIDisplayMarkUp::getKey() const {
    return m_key;
}
void OAIDisplayMarkUp::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDisplayMarkUp::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDisplayMarkUp::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIDisplayMarkUp::getName() const {
    return m_name;
}
void OAIDisplayMarkUp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDisplayMarkUp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDisplayMarkUp::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAIDisplayMarkUp_parameters_value> OAIDisplayMarkUp::getParameters() const {
    return m_parameters;
}
void OAIDisplayMarkUp::setParameters(const QMap<QString, OAIDisplayMarkUp_parameters_value> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDisplayMarkUp::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDisplayMarkUp::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDisplayMarkUp::getType() const {
    return m_type;
}
void OAIDisplayMarkUp::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDisplayMarkUp::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDisplayMarkUp::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDisplayMarkUp::getValue() const {
    return m_value;
}
void OAIDisplayMarkUp::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDisplayMarkUp::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDisplayMarkUp::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDisplayMarkUp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayMarkUp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
