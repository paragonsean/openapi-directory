/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectorAndShareDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectorAndShareDetails::OAIDirectorAndShareDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectorAndShareDetails::OAIDirectorAndShareDetails() {
    this->initializeModel();
}

OAIDirectorAndShareDetails::~OAIDirectorAndShareDetails() {}

void OAIDirectorAndShareDetails::initializeModel() {

    m_persons_of_significant_control_isSet = false;
    m_persons_of_significant_control_isValid = false;

    m_capital_reserves_isSet = false;
    m_capital_reserves_isValid = false;

    m_directors_isSet = false;
    m_directors_isValid = false;

    m_share_holder_summary_isSet = false;
    m_share_holder_summary_isValid = false;

    m_share_holders_isSet = false;
    m_share_holders_isValid = false;
}

void OAIDirectorAndShareDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectorAndShareDetails::fromJsonObject(QJsonObject json) {

    m_persons_of_significant_control_isValid = ::OpenAPI::fromJsonValue(m_persons_of_significant_control, json[QString("PersonsOfSignificantControl")]);
    m_persons_of_significant_control_isSet = !json[QString("PersonsOfSignificantControl")].isNull() && m_persons_of_significant_control_isValid;

    m_capital_reserves_isValid = ::OpenAPI::fromJsonValue(m_capital_reserves, json[QString("capitalReserves")]);
    m_capital_reserves_isSet = !json[QString("capitalReserves")].isNull() && m_capital_reserves_isValid;

    m_directors_isValid = ::OpenAPI::fromJsonValue(m_directors, json[QString("directors")]);
    m_directors_isSet = !json[QString("directors")].isNull() && m_directors_isValid;

    m_share_holder_summary_isValid = ::OpenAPI::fromJsonValue(m_share_holder_summary, json[QString("shareHolderSummary")]);
    m_share_holder_summary_isSet = !json[QString("shareHolderSummary")].isNull() && m_share_holder_summary_isValid;

    m_share_holders_isValid = ::OpenAPI::fromJsonValue(m_share_holders, json[QString("shareHolders")]);
    m_share_holders_isSet = !json[QString("shareHolders")].isNull() && m_share_holders_isValid;
}

QString OAIDirectorAndShareDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectorAndShareDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_persons_of_significant_control.isSet()) {
        obj.insert(QString("PersonsOfSignificantControl"), ::OpenAPI::toJsonValue(m_persons_of_significant_control));
    }
    if (m_capital_reserves.isSet()) {
        obj.insert(QString("capitalReserves"), ::OpenAPI::toJsonValue(m_capital_reserves));
    }
    if (m_directors.isSet()) {
        obj.insert(QString("directors"), ::OpenAPI::toJsonValue(m_directors));
    }
    if (m_share_holder_summary.isSet()) {
        obj.insert(QString("shareHolderSummary"), ::OpenAPI::toJsonValue(m_share_holder_summary));
    }
    if (m_share_holders.isSet()) {
        obj.insert(QString("shareHolders"), ::OpenAPI::toJsonValue(m_share_holders));
    }
    return obj;
}

OAIArrayOfPSCDetails OAIDirectorAndShareDetails::getPersonsOfSignificantControl() const {
    return m_persons_of_significant_control;
}
void OAIDirectorAndShareDetails::setPersonsOfSignificantControl(const OAIArrayOfPSCDetails &persons_of_significant_control) {
    m_persons_of_significant_control = persons_of_significant_control;
    m_persons_of_significant_control_isSet = true;
}

bool OAIDirectorAndShareDetails::is_persons_of_significant_control_Set() const{
    return m_persons_of_significant_control_isSet;
}

bool OAIDirectorAndShareDetails::is_persons_of_significant_control_Valid() const{
    return m_persons_of_significant_control_isValid;
}

OAICapitalReserves OAIDirectorAndShareDetails::getCapitalReserves() const {
    return m_capital_reserves;
}
void OAIDirectorAndShareDetails::setCapitalReserves(const OAICapitalReserves &capital_reserves) {
    m_capital_reserves = capital_reserves;
    m_capital_reserves_isSet = true;
}

bool OAIDirectorAndShareDetails::is_capital_reserves_Set() const{
    return m_capital_reserves_isSet;
}

bool OAIDirectorAndShareDetails::is_capital_reserves_Valid() const{
    return m_capital_reserves_isValid;
}

OAIArrayOfDirector OAIDirectorAndShareDetails::getDirectors() const {
    return m_directors;
}
void OAIDirectorAndShareDetails::setDirectors(const OAIArrayOfDirector &directors) {
    m_directors = directors;
    m_directors_isSet = true;
}

bool OAIDirectorAndShareDetails::is_directors_Set() const{
    return m_directors_isSet;
}

bool OAIDirectorAndShareDetails::is_directors_Valid() const{
    return m_directors_isValid;
}

OAIShareholderSummary OAIDirectorAndShareDetails::getShareHolderSummary() const {
    return m_share_holder_summary;
}
void OAIDirectorAndShareDetails::setShareHolderSummary(const OAIShareholderSummary &share_holder_summary) {
    m_share_holder_summary = share_holder_summary;
    m_share_holder_summary_isSet = true;
}

bool OAIDirectorAndShareDetails::is_share_holder_summary_Set() const{
    return m_share_holder_summary_isSet;
}

bool OAIDirectorAndShareDetails::is_share_holder_summary_Valid() const{
    return m_share_holder_summary_isValid;
}

OAIArrayOfShareholderDetails OAIDirectorAndShareDetails::getShareHolders() const {
    return m_share_holders;
}
void OAIDirectorAndShareDetails::setShareHolders(const OAIArrayOfShareholderDetails &share_holders) {
    m_share_holders = share_holders;
    m_share_holders_isSet = true;
}

bool OAIDirectorAndShareDetails::is_share_holders_Set() const{
    return m_share_holders_isSet;
}

bool OAIDirectorAndShareDetails::is_share_holders_Valid() const{
    return m_share_holders_isValid;
}

bool OAIDirectorAndShareDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_persons_of_significant_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_reserves.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_holder_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_holders.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectorAndShareDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
