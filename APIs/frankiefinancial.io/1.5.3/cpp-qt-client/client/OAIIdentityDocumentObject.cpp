/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityDocumentObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityDocumentObject::OAIIdentityDocumentObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityDocumentObject::OAIIdentityDocumentObject() {
    this->initializeModel();
}

OAIIdentityDocumentObject::~OAIIdentityDocumentObject() {}

void OAIIdentityDocumentObject::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_created_from_scan_isSet = false;
    m_created_from_scan_isValid = false;

    m_doc_scan_isSet = false;
    m_doc_scan_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_status_isSet = false;
    m_document_status_isValid = false;

    m_extra_data_isSet = false;
    m_extra_data_isValid = false;

    m_id_expiry_isSet = false;
    m_id_expiry_isValid = false;

    m_id_issued_isSet = false;
    m_id_issued_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_id_sub_type_isSet = false;
    m_id_sub_type_isValid = false;

    m_id_type_isSet = false;
    m_id_type_isValid = false;

    m_manually_modified_isSet = false;
    m_manually_modified_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIIdentityDocumentObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityDocumentObject::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_created_from_scan_isValid = ::OpenAPI::fromJsonValue(m_created_from_scan, json[QString("createdFromScan")]);
    m_created_from_scan_isSet = !json[QString("createdFromScan")].isNull() && m_created_from_scan_isValid;

    m_doc_scan_isValid = ::OpenAPI::fromJsonValue(m_doc_scan, json[QString("docScan")]);
    m_doc_scan_isSet = !json[QString("docScan")].isNull() && m_doc_scan_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_document_status_isValid = ::OpenAPI::fromJsonValue(m_document_status, json[QString("documentStatus")]);
    m_document_status_isSet = !json[QString("documentStatus")].isNull() && m_document_status_isValid;

    m_extra_data_isValid = ::OpenAPI::fromJsonValue(m_extra_data, json[QString("extraData")]);
    m_extra_data_isSet = !json[QString("extraData")].isNull() && m_extra_data_isValid;

    m_id_expiry_isValid = ::OpenAPI::fromJsonValue(m_id_expiry, json[QString("idExpiry")]);
    m_id_expiry_isSet = !json[QString("idExpiry")].isNull() && m_id_expiry_isValid;

    m_id_issued_isValid = ::OpenAPI::fromJsonValue(m_id_issued, json[QString("idIssued")]);
    m_id_issued_isSet = !json[QString("idIssued")].isNull() && m_id_issued_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("idNumber")]);
    m_id_number_isSet = !json[QString("idNumber")].isNull() && m_id_number_isValid;

    m_id_sub_type_isValid = ::OpenAPI::fromJsonValue(m_id_sub_type, json[QString("idSubType")]);
    m_id_sub_type_isSet = !json[QString("idSubType")].isNull() && m_id_sub_type_isValid;

    m_id_type_isValid = ::OpenAPI::fromJsonValue(m_id_type, json[QString("idType")]);
    m_id_type_isSet = !json[QString("idType")].isNull() && m_id_type_isValid;

    m_manually_modified_isValid = ::OpenAPI::fromJsonValue(m_manually_modified, json[QString("manuallyModified")]);
    m_manually_modified_isSet = !json[QString("manuallyModified")].isNull() && m_manually_modified_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIIdentityDocumentObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityDocumentObject::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_created_from_scan_isSet) {
        obj.insert(QString("createdFromScan"), ::OpenAPI::toJsonValue(m_created_from_scan));
    }
    if (m_doc_scan.size() > 0) {
        obj.insert(QString("docScan"), ::OpenAPI::toJsonValue(m_doc_scan));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_status.isSet()) {
        obj.insert(QString("documentStatus"), ::OpenAPI::toJsonValue(m_document_status));
    }
    if (m_extra_data.size() > 0) {
        obj.insert(QString("extraData"), ::OpenAPI::toJsonValue(m_extra_data));
    }
    if (m_id_expiry_isSet) {
        obj.insert(QString("idExpiry"), ::OpenAPI::toJsonValue(m_id_expiry));
    }
    if (m_id_issued_isSet) {
        obj.insert(QString("idIssued"), ::OpenAPI::toJsonValue(m_id_issued));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("idNumber"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_id_sub_type_isSet) {
        obj.insert(QString("idSubType"), ::OpenAPI::toJsonValue(m_id_sub_type));
    }
    if (m_id_type.isSet()) {
        obj.insert(QString("idType"), ::OpenAPI::toJsonValue(m_id_type));
    }
    if (m_manually_modified_isSet) {
        obj.insert(QString("manuallyModified"), ::OpenAPI::toJsonValue(m_manually_modified));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIIdentityDocumentObject::getCountry() const {
    return m_country;
}
void OAIIdentityDocumentObject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIIdentityDocumentObject::is_country_Set() const{
    return m_country_isSet;
}

bool OAIIdentityDocumentObject::is_country_Valid() const{
    return m_country_isValid;
}

bool OAIIdentityDocumentObject::isCreatedFromScan() const {
    return m_created_from_scan;
}
void OAIIdentityDocumentObject::setCreatedFromScan(const bool &created_from_scan) {
    m_created_from_scan = created_from_scan;
    m_created_from_scan_isSet = true;
}

bool OAIIdentityDocumentObject::is_created_from_scan_Set() const{
    return m_created_from_scan_isSet;
}

bool OAIIdentityDocumentObject::is_created_from_scan_Valid() const{
    return m_created_from_scan_isValid;
}

QList<OAIScannedDocumentObject> OAIIdentityDocumentObject::getDocScan() const {
    return m_doc_scan;
}
void OAIIdentityDocumentObject::setDocScan(const QList<OAIScannedDocumentObject> &doc_scan) {
    m_doc_scan = doc_scan;
    m_doc_scan_isSet = true;
}

bool OAIIdentityDocumentObject::is_doc_scan_Set() const{
    return m_doc_scan_isSet;
}

bool OAIIdentityDocumentObject::is_doc_scan_Valid() const{
    return m_doc_scan_isValid;
}

QString OAIIdentityDocumentObject::getDocumentId() const {
    return m_document_id;
}
void OAIIdentityDocumentObject::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIIdentityDocumentObject::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIIdentityDocumentObject::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAIEnumDocumentStatus OAIIdentityDocumentObject::getDocumentStatus() const {
    return m_document_status;
}
void OAIIdentityDocumentObject::setDocumentStatus(const OAIEnumDocumentStatus &document_status) {
    m_document_status = document_status;
    m_document_status_isSet = true;
}

bool OAIIdentityDocumentObject::is_document_status_Set() const{
    return m_document_status_isSet;
}

bool OAIIdentityDocumentObject::is_document_status_Valid() const{
    return m_document_status_isValid;
}

QList<OAIKeyValuePairObject> OAIIdentityDocumentObject::getExtraData() const {
    return m_extra_data;
}
void OAIIdentityDocumentObject::setExtraData(const QList<OAIKeyValuePairObject> &extra_data) {
    m_extra_data = extra_data;
    m_extra_data_isSet = true;
}

bool OAIIdentityDocumentObject::is_extra_data_Set() const{
    return m_extra_data_isSet;
}

bool OAIIdentityDocumentObject::is_extra_data_Valid() const{
    return m_extra_data_isValid;
}

QDate OAIIdentityDocumentObject::getIdExpiry() const {
    return m_id_expiry;
}
void OAIIdentityDocumentObject::setIdExpiry(const QDate &id_expiry) {
    m_id_expiry = id_expiry;
    m_id_expiry_isSet = true;
}

bool OAIIdentityDocumentObject::is_id_expiry_Set() const{
    return m_id_expiry_isSet;
}

bool OAIIdentityDocumentObject::is_id_expiry_Valid() const{
    return m_id_expiry_isValid;
}

QDate OAIIdentityDocumentObject::getIdIssued() const {
    return m_id_issued;
}
void OAIIdentityDocumentObject::setIdIssued(const QDate &id_issued) {
    m_id_issued = id_issued;
    m_id_issued_isSet = true;
}

bool OAIIdentityDocumentObject::is_id_issued_Set() const{
    return m_id_issued_isSet;
}

bool OAIIdentityDocumentObject::is_id_issued_Valid() const{
    return m_id_issued_isValid;
}

QString OAIIdentityDocumentObject::getIdNumber() const {
    return m_id_number;
}
void OAIIdentityDocumentObject::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIIdentityDocumentObject::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIIdentityDocumentObject::is_id_number_Valid() const{
    return m_id_number_isValid;
}

QString OAIIdentityDocumentObject::getIdSubType() const {
    return m_id_sub_type;
}
void OAIIdentityDocumentObject::setIdSubType(const QString &id_sub_type) {
    m_id_sub_type = id_sub_type;
    m_id_sub_type_isSet = true;
}

bool OAIIdentityDocumentObject::is_id_sub_type_Set() const{
    return m_id_sub_type_isSet;
}

bool OAIIdentityDocumentObject::is_id_sub_type_Valid() const{
    return m_id_sub_type_isValid;
}

OAIEnumIdType OAIIdentityDocumentObject::getIdType() const {
    return m_id_type;
}
void OAIIdentityDocumentObject::setIdType(const OAIEnumIdType &id_type) {
    m_id_type = id_type;
    m_id_type_isSet = true;
}

bool OAIIdentityDocumentObject::is_id_type_Set() const{
    return m_id_type_isSet;
}

bool OAIIdentityDocumentObject::is_id_type_Valid() const{
    return m_id_type_isValid;
}

bool OAIIdentityDocumentObject::isManuallyModified() const {
    return m_manually_modified;
}
void OAIIdentityDocumentObject::setManuallyModified(const bool &manually_modified) {
    m_manually_modified = manually_modified;
    m_manually_modified_isSet = true;
}

bool OAIIdentityDocumentObject::is_manually_modified_Set() const{
    return m_manually_modified_isSet;
}

bool OAIIdentityDocumentObject::is_manually_modified_Valid() const{
    return m_manually_modified_isValid;
}

QString OAIIdentityDocumentObject::getRegion() const {
    return m_region;
}
void OAIIdentityDocumentObject::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIIdentityDocumentObject::is_region_Set() const{
    return m_region_isSet;
}

bool OAIIdentityDocumentObject::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIIdentityDocumentObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_from_scan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_scan.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manually_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityDocumentObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_id_type_isValid && true;
}

} // namespace OpenAPI
