/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfficerObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfficerObject::OAIOfficerObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfficerObject::OAIOfficerObject() {
    this->initializeModel();
}

OAIOfficerObject::~OAIOfficerObject() {}

void OAIOfficerObject::initializeModel() {

    m_appointment_date_isSet = false;
    m_appointment_date_isValid = false;

    m_court_details_isSet = false;
    m_court_details_isValid = false;

    m_doc_number_isSet = false;
    m_doc_number_isValid = false;

    m_doc_number_qualifier_isSet = false;
    m_doc_number_qualifier_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_description_isSet = false;
    m_type_description_isValid = false;
}

void OAIOfficerObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfficerObject::fromJsonObject(QJsonObject json) {

    m_appointment_date_isValid = ::OpenAPI::fromJsonValue(m_appointment_date, json[QString("appointmentDate")]);
    m_appointment_date_isSet = !json[QString("appointmentDate")].isNull() && m_appointment_date_isValid;

    m_court_details_isValid = ::OpenAPI::fromJsonValue(m_court_details, json[QString("courtDetails")]);
    m_court_details_isSet = !json[QString("courtDetails")].isNull() && m_court_details_isValid;

    m_doc_number_isValid = ::OpenAPI::fromJsonValue(m_doc_number, json[QString("docNumber")]);
    m_doc_number_isSet = !json[QString("docNumber")].isNull() && m_doc_number_isValid;

    m_doc_number_qualifier_isValid = ::OpenAPI::fromJsonValue(m_doc_number_qualifier, json[QString("docNumberQualifier")]);
    m_doc_number_qualifier_isSet = !json[QString("docNumberQualifier")].isNull() && m_doc_number_qualifier_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_description_isValid = ::OpenAPI::fromJsonValue(m_type_description, json[QString("typeDescription")]);
    m_type_description_isSet = !json[QString("typeDescription")].isNull() && m_type_description_isValid;
}

QString OAIOfficerObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfficerObject::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_date_isSet) {
        obj.insert(QString("appointmentDate"), ::OpenAPI::toJsonValue(m_appointment_date));
    }
    if (m_court_details.isSet()) {
        obj.insert(QString("courtDetails"), ::OpenAPI::toJsonValue(m_court_details));
    }
    if (m_doc_number_isSet) {
        obj.insert(QString("docNumber"), ::OpenAPI::toJsonValue(m_doc_number));
    }
    if (m_doc_number_qualifier_isSet) {
        obj.insert(QString("docNumberQualifier"), ::OpenAPI::toJsonValue(m_doc_number_qualifier));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_description_isSet) {
        obj.insert(QString("typeDescription"), ::OpenAPI::toJsonValue(m_type_description));
    }
    return obj;
}

QDate OAIOfficerObject::getAppointmentDate() const {
    return m_appointment_date;
}
void OAIOfficerObject::setAppointmentDate(const QDate &appointment_date) {
    m_appointment_date = appointment_date;
    m_appointment_date_isSet = true;
}

bool OAIOfficerObject::is_appointment_date_Set() const{
    return m_appointment_date_isSet;
}

bool OAIOfficerObject::is_appointment_date_Valid() const{
    return m_appointment_date_isValid;
}

OAICourtDetailsObject OAIOfficerObject::getCourtDetails() const {
    return m_court_details;
}
void OAIOfficerObject::setCourtDetails(const OAICourtDetailsObject &court_details) {
    m_court_details = court_details;
    m_court_details_isSet = true;
}

bool OAIOfficerObject::is_court_details_Set() const{
    return m_court_details_isSet;
}

bool OAIOfficerObject::is_court_details_Valid() const{
    return m_court_details_isValid;
}

QString OAIOfficerObject::getDocNumber() const {
    return m_doc_number;
}
void OAIOfficerObject::setDocNumber(const QString &doc_number) {
    m_doc_number = doc_number;
    m_doc_number_isSet = true;
}

bool OAIOfficerObject::is_doc_number_Set() const{
    return m_doc_number_isSet;
}

bool OAIOfficerObject::is_doc_number_Valid() const{
    return m_doc_number_isValid;
}

QString OAIOfficerObject::getDocNumberQualifier() const {
    return m_doc_number_qualifier;
}
void OAIOfficerObject::setDocNumberQualifier(const QString &doc_number_qualifier) {
    m_doc_number_qualifier = doc_number_qualifier;
    m_doc_number_qualifier_isSet = true;
}

bool OAIOfficerObject::is_doc_number_qualifier_Set() const{
    return m_doc_number_qualifier_isSet;
}

bool OAIOfficerObject::is_doc_number_qualifier_Valid() const{
    return m_doc_number_qualifier_isValid;
}

QString OAIOfficerObject::getEntityId() const {
    return m_entity_id;
}
void OAIOfficerObject::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIOfficerObject::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIOfficerObject::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIOfficerObject::getStatus() const {
    return m_status;
}
void OAIOfficerObject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOfficerObject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOfficerObject::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOfficerObject::getType() const {
    return m_type;
}
void OAIOfficerObject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOfficerObject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOfficerObject::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOfficerObject::getTypeDescription() const {
    return m_type_description;
}
void OAIOfficerObject::setTypeDescription(const QString &type_description) {
    m_type_description = type_description;
    m_type_description_isSet = true;
}

bool OAIOfficerObject::is_type_description_Set() const{
    return m_type_description_isSet;
}

bool OAIOfficerObject::is_type_description_Valid() const{
    return m_type_description_isValid;
}

bool OAIOfficerObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_court_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_number_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfficerObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
