/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwitchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwitchResponse::OAISwitchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwitchResponse::OAISwitchResponse() {
    this->initializeModel();
}

OAISwitchResponse::~OAISwitchResponse() {}

void OAISwitchResponse::initializeModel() {

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_next_steps_isSet = false;
    m_next_steps_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_switch_date_isSet = false;
    m_switch_date_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISwitchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwitchResponse::fromJsonObject(QJsonObject json) {

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_next_steps_isValid = ::OpenAPI::fromJsonValue(m_next_steps, json[QString("nextSteps")]);
    m_next_steps_isSet = !json[QString("nextSteps")].isNull() && m_next_steps_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_switch_date_isValid = ::OpenAPI::fromJsonValue(m_switch_date, json[QString("switchDate")]);
    m_switch_date_isSet = !json[QString("switchDate")].isNull() && m_switch_date_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISwitchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwitchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_next_steps.size() > 0) {
        obj.insert(QString("nextSteps"), ::OpenAPI::toJsonValue(m_next_steps));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_switch_date_isSet) {
        obj.insert(QString("switchDate"), ::OpenAPI::toJsonValue(m_switch_date));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISwitchResponse::getCorrelationId() const {
    return m_correlation_id;
}
void OAISwitchResponse::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAISwitchResponse::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAISwitchResponse::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<OAIDisplayMarkUp> OAISwitchResponse::getNextSteps() const {
    return m_next_steps;
}
void OAISwitchResponse::setNextSteps(const QList<OAIDisplayMarkUp> &next_steps) {
    m_next_steps = next_steps;
    m_next_steps_isSet = true;
}

bool OAISwitchResponse::is_next_steps_Set() const{
    return m_next_steps_isSet;
}

bool OAISwitchResponse::is_next_steps_Valid() const{
    return m_next_steps_isValid;
}

OAIPlan OAISwitchResponse::getPlan() const {
    return m_plan;
}
void OAISwitchResponse::setPlan(const OAIPlan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISwitchResponse::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISwitchResponse::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAISwitchResponse::getReference() const {
    return m_reference;
}
void OAISwitchResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAISwitchResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAISwitchResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAISwitchResponse::getSwitchDate() const {
    return m_switch_date;
}
void OAISwitchResponse::setSwitchDate(const QString &switch_date) {
    m_switch_date = switch_date;
    m_switch_date_isSet = true;
}

bool OAISwitchResponse::is_switch_date_Set() const{
    return m_switch_date_isSet;
}

bool OAISwitchResponse::is_switch_date_Valid() const{
    return m_switch_date_isValid;
}

QString OAISwitchResponse::getVersion() const {
    return m_version;
}
void OAISwitchResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISwitchResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAISwitchResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISwitchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwitchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_correlation_id_isValid && m_plan_isValid && m_reference_isValid && m_switch_date_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
