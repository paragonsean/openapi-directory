/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityProfileCheckResultMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityProfileCheckResultMessage::OAIEntityProfileCheckResultMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityProfileCheckResultMessage::OAIEntityProfileCheckResultMessage() {
    this->initializeModel();
}

OAIEntityProfileCheckResultMessage::~OAIEntityProfileCheckResultMessage() {}

void OAIEntityProfileCheckResultMessage::initializeModel() {

    m_check_class_isSet = false;
    m_check_class_isValid = false;

    m_check_type_isSet = false;
    m_check_type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIEntityProfileCheckResultMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityProfileCheckResultMessage::fromJsonObject(QJsonObject json) {

    m_check_class_isValid = ::OpenAPI::fromJsonValue(m_check_class, json[QString("checkClass")]);
    m_check_class_isSet = !json[QString("checkClass")].isNull() && m_check_class_isValid;

    m_check_type_isValid = ::OpenAPI::fromJsonValue(m_check_type, json[QString("checkType")]);
    m_check_type_isSet = !json[QString("checkType")].isNull() && m_check_type_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIEntityProfileCheckResultMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityProfileCheckResultMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_check_class_isSet) {
        obj.insert(QString("checkClass"), ::OpenAPI::toJsonValue(m_check_class));
    }
    if (m_check_type_isSet) {
        obj.insert(QString("checkType"), ::OpenAPI::toJsonValue(m_check_type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIEntityProfileCheckResultMessage::getCheckClass() const {
    return m_check_class;
}
void OAIEntityProfileCheckResultMessage::setCheckClass(const QString &check_class) {
    m_check_class = check_class;
    m_check_class_isSet = true;
}

bool OAIEntityProfileCheckResultMessage::is_check_class_Set() const{
    return m_check_class_isSet;
}

bool OAIEntityProfileCheckResultMessage::is_check_class_Valid() const{
    return m_check_class_isValid;
}

QString OAIEntityProfileCheckResultMessage::getCheckType() const {
    return m_check_type;
}
void OAIEntityProfileCheckResultMessage::setCheckType(const QString &check_type) {
    m_check_type = check_type;
    m_check_type_isSet = true;
}

bool OAIEntityProfileCheckResultMessage::is_check_type_Set() const{
    return m_check_type_isSet;
}

bool OAIEntityProfileCheckResultMessage::is_check_type_Valid() const{
    return m_check_type_isValid;
}

QString OAIEntityProfileCheckResultMessage::getCode() const {
    return m_code;
}
void OAIEntityProfileCheckResultMessage::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEntityProfileCheckResultMessage::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEntityProfileCheckResultMessage::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIEntityProfileCheckResultMessage::getMessage() const {
    return m_message;
}
void OAIEntityProfileCheckResultMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEntityProfileCheckResultMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEntityProfileCheckResultMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEntityProfileCheckResultMessage::getResult() const {
    return m_result;
}
void OAIEntityProfileCheckResultMessage::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIEntityProfileCheckResultMessage::is_result_Set() const{
    return m_result_isSet;
}

bool OAIEntityProfileCheckResultMessage::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIEntityProfileCheckResultMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityProfileCheckResultMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
