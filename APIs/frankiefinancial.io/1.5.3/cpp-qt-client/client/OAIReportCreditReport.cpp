/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportCreditReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportCreditReport::OAIReportCreditReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportCreditReport::OAIReportCreditReport() {
    this->initializeModel();
}

OAIReportCreditReport::~OAIReportCreditReport() {}

void OAIReportCreditReport::initializeModel() {

    m_court_judgements_isSet = false;
    m_court_judgements_isValid = false;

    m_credit_enquiries_isSet = false;
    m_credit_enquiries_isValid = false;

    m_insolvency_notices_isSet = false;
    m_insolvency_notices_isValid = false;

    m_loans_isSet = false;
    m_loans_isValid = false;

    m_mercantile_enquiries_isSet = false;
    m_mercantile_enquiries_isValid = false;

    m_payment_defaults_isSet = false;
    m_payment_defaults_isValid = false;
}

void OAIReportCreditReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportCreditReport::fromJsonObject(QJsonObject json) {

    m_court_judgements_isValid = ::OpenAPI::fromJsonValue(m_court_judgements, json[QString("courtJudgements")]);
    m_court_judgements_isSet = !json[QString("courtJudgements")].isNull() && m_court_judgements_isValid;

    m_credit_enquiries_isValid = ::OpenAPI::fromJsonValue(m_credit_enquiries, json[QString("creditEnquiries")]);
    m_credit_enquiries_isSet = !json[QString("creditEnquiries")].isNull() && m_credit_enquiries_isValid;

    m_insolvency_notices_isValid = ::OpenAPI::fromJsonValue(m_insolvency_notices, json[QString("insolvencyNotices")]);
    m_insolvency_notices_isSet = !json[QString("insolvencyNotices")].isNull() && m_insolvency_notices_isValid;

    m_loans_isValid = ::OpenAPI::fromJsonValue(m_loans, json[QString("loans")]);
    m_loans_isSet = !json[QString("loans")].isNull() && m_loans_isValid;

    m_mercantile_enquiries_isValid = ::OpenAPI::fromJsonValue(m_mercantile_enquiries, json[QString("mercantileEnquiries")]);
    m_mercantile_enquiries_isSet = !json[QString("mercantileEnquiries")].isNull() && m_mercantile_enquiries_isValid;

    m_payment_defaults_isValid = ::OpenAPI::fromJsonValue(m_payment_defaults, json[QString("paymentDefaults")]);
    m_payment_defaults_isSet = !json[QString("paymentDefaults")].isNull() && m_payment_defaults_isValid;
}

QString OAIReportCreditReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportCreditReport::asJsonObject() const {
    QJsonObject obj;
    if (m_court_judgements.size() > 0) {
        obj.insert(QString("courtJudgements"), ::OpenAPI::toJsonValue(m_court_judgements));
    }
    if (m_credit_enquiries_isSet) {
        obj.insert(QString("creditEnquiries"), ::OpenAPI::toJsonValue(m_credit_enquiries));
    }
    if (m_insolvency_notices.size() > 0) {
        obj.insert(QString("insolvencyNotices"), ::OpenAPI::toJsonValue(m_insolvency_notices));
    }
    if (m_loans.size() > 0) {
        obj.insert(QString("loans"), ::OpenAPI::toJsonValue(m_loans));
    }
    if (m_mercantile_enquiries.size() > 0) {
        obj.insert(QString("mercantileEnquiries"), ::OpenAPI::toJsonValue(m_mercantile_enquiries));
    }
    if (m_payment_defaults.size() > 0) {
        obj.insert(QString("paymentDefaults"), ::OpenAPI::toJsonValue(m_payment_defaults));
    }
    return obj;
}

QList<OAICourtJudgement> OAIReportCreditReport::getCourtJudgements() const {
    return m_court_judgements;
}
void OAIReportCreditReport::setCourtJudgements(const QList<OAICourtJudgement> &court_judgements) {
    m_court_judgements = court_judgements;
    m_court_judgements_isSet = true;
}

bool OAIReportCreditReport::is_court_judgements_Set() const{
    return m_court_judgements_isSet;
}

bool OAIReportCreditReport::is_court_judgements_Valid() const{
    return m_court_judgements_isValid;
}

qint32 OAIReportCreditReport::getCreditEnquiries() const {
    return m_credit_enquiries;
}
void OAIReportCreditReport::setCreditEnquiries(const qint32 &credit_enquiries) {
    m_credit_enquiries = credit_enquiries;
    m_credit_enquiries_isSet = true;
}

bool OAIReportCreditReport::is_credit_enquiries_Set() const{
    return m_credit_enquiries_isSet;
}

bool OAIReportCreditReport::is_credit_enquiries_Valid() const{
    return m_credit_enquiries_isValid;
}

QList<OAIInsolvencyNotice> OAIReportCreditReport::getInsolvencyNotices() const {
    return m_insolvency_notices;
}
void OAIReportCreditReport::setInsolvencyNotices(const QList<OAIInsolvencyNotice> &insolvency_notices) {
    m_insolvency_notices = insolvency_notices;
    m_insolvency_notices_isSet = true;
}

bool OAIReportCreditReport::is_insolvency_notices_Set() const{
    return m_insolvency_notices_isSet;
}

bool OAIReportCreditReport::is_insolvency_notices_Valid() const{
    return m_insolvency_notices_isValid;
}

QList<OAILoan> OAIReportCreditReport::getLoans() const {
    return m_loans;
}
void OAIReportCreditReport::setLoans(const QList<OAILoan> &loans) {
    m_loans = loans;
    m_loans_isSet = true;
}

bool OAIReportCreditReport::is_loans_Set() const{
    return m_loans_isSet;
}

bool OAIReportCreditReport::is_loans_Valid() const{
    return m_loans_isValid;
}

QList<OAIMercantileEnquiry> OAIReportCreditReport::getMercantileEnquiries() const {
    return m_mercantile_enquiries;
}
void OAIReportCreditReport::setMercantileEnquiries(const QList<OAIMercantileEnquiry> &mercantile_enquiries) {
    m_mercantile_enquiries = mercantile_enquiries;
    m_mercantile_enquiries_isSet = true;
}

bool OAIReportCreditReport::is_mercantile_enquiries_Set() const{
    return m_mercantile_enquiries_isSet;
}

bool OAIReportCreditReport::is_mercantile_enquiries_Valid() const{
    return m_mercantile_enquiries_isValid;
}

QList<OAIPaymentDefault> OAIReportCreditReport::getPaymentDefaults() const {
    return m_payment_defaults;
}
void OAIReportCreditReport::setPaymentDefaults(const QList<OAIPaymentDefault> &payment_defaults) {
    m_payment_defaults = payment_defaults;
    m_payment_defaults_isSet = true;
}

bool OAIReportCreditReport::is_payment_defaults_Set() const{
    return m_payment_defaults_isSet;
}

bool OAIReportCreditReport::is_payment_defaults_Valid() const{
    return m_payment_defaults_isValid;
}

bool OAIReportCreditReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_court_judgements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_enquiries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insolvency_notices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mercantile_enquiries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_defaults.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportCreditReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
