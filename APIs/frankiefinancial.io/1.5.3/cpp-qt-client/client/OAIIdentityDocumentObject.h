/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentityDocumentObject.h
 *
 * 
 */

#ifndef OAIIdentityDocumentObject_H
#define OAIIdentityDocumentObject_H

#include <QJsonObject>

#include "OAIEnumDocumentStatus.h"
#include "OAIEnumIdType.h"
#include "OAIKeyValuePairObject.h"
#include "OAIScannedDocumentObject.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScannedDocumentObject;
class OAIKeyValuePairObject;

class OAIIdentityDocumentObject : public OAIObject {
public:
    OAIIdentityDocumentObject();
    OAIIdentityDocumentObject(QString json);
    ~OAIIdentityDocumentObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    bool isCreatedFromScan() const;
    void setCreatedFromScan(const bool &created_from_scan);
    bool is_created_from_scan_Set() const;
    bool is_created_from_scan_Valid() const;

    QList<OAIScannedDocumentObject> getDocScan() const;
    void setDocScan(const QList<OAIScannedDocumentObject> &doc_scan);
    bool is_doc_scan_Set() const;
    bool is_doc_scan_Valid() const;

    QString getDocumentId() const;
    void setDocumentId(const QString &document_id);
    bool is_document_id_Set() const;
    bool is_document_id_Valid() const;

    OAIEnumDocumentStatus getDocumentStatus() const;
    void setDocumentStatus(const OAIEnumDocumentStatus &document_status);
    bool is_document_status_Set() const;
    bool is_document_status_Valid() const;

    QList<OAIKeyValuePairObject> getExtraData() const;
    void setExtraData(const QList<OAIKeyValuePairObject> &extra_data);
    bool is_extra_data_Set() const;
    bool is_extra_data_Valid() const;

    QDate getIdExpiry() const;
    void setIdExpiry(const QDate &id_expiry);
    bool is_id_expiry_Set() const;
    bool is_id_expiry_Valid() const;

    QDate getIdIssued() const;
    void setIdIssued(const QDate &id_issued);
    bool is_id_issued_Set() const;
    bool is_id_issued_Valid() const;

    QString getIdNumber() const;
    void setIdNumber(const QString &id_number);
    bool is_id_number_Set() const;
    bool is_id_number_Valid() const;

    QString getIdSubType() const;
    void setIdSubType(const QString &id_sub_type);
    bool is_id_sub_type_Set() const;
    bool is_id_sub_type_Valid() const;

    OAIEnumIdType getIdType() const;
    void setIdType(const OAIEnumIdType &id_type);
    bool is_id_type_Set() const;
    bool is_id_type_Valid() const;

    bool isManuallyModified() const;
    void setManuallyModified(const bool &manually_modified);
    bool is_manually_modified_Set() const;
    bool is_manually_modified_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    bool m_created_from_scan;
    bool m_created_from_scan_isSet;
    bool m_created_from_scan_isValid;

    QList<OAIScannedDocumentObject> m_doc_scan;
    bool m_doc_scan_isSet;
    bool m_doc_scan_isValid;

    QString m_document_id;
    bool m_document_id_isSet;
    bool m_document_id_isValid;

    OAIEnumDocumentStatus m_document_status;
    bool m_document_status_isSet;
    bool m_document_status_isValid;

    QList<OAIKeyValuePairObject> m_extra_data;
    bool m_extra_data_isSet;
    bool m_extra_data_isValid;

    QDate m_id_expiry;
    bool m_id_expiry_isSet;
    bool m_id_expiry_isValid;

    QDate m_id_issued;
    bool m_id_issued_isSet;
    bool m_id_issued_isValid;

    QString m_id_number;
    bool m_id_number_isSet;
    bool m_id_number_isValid;

    QString m_id_sub_type;
    bool m_id_sub_type_isSet;
    bool m_id_sub_type_isValid;

    OAIEnumIdType m_id_type;
    bool m_id_type_isSet;
    bool m_id_type_isValid;

    bool m_manually_modified;
    bool m_manually_modified_isSet;
    bool m_manually_modified_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentityDocumentObject)

#endif // OAIIdentityDocumentObject_H
