/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUBOResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUBOResponse::OAIUBOResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUBOResponse::OAIUBOResponse() {
    this->initializeModel();
}

OAIUBOResponse::~OAIUBOResponse() {}

void OAIUBOResponse::initializeModel() {

    m_asic_search_timestamp_isSet = false;
    m_asic_search_timestamp_isValid = false;

    m_business_details_isSet = false;
    m_business_details_isValid = false;

    m_business_screening_result_isSet = false;
    m_business_screening_result_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_issues_list_isSet = false;
    m_issues_list_isValid = false;

    m_non_individual_beneficial_owners_isSet = false;
    m_non_individual_beneficial_owners_isValid = false;

    m_officeholders_isSet = false;
    m_officeholders_isValid = false;

    m_supplied_data_isSet = false;
    m_supplied_data_isValid = false;

    m_supplied_data_matches_isSet = false;
    m_supplied_data_matches_isValid = false;

    m_ubo_report_isSet = false;
    m_ubo_report_isValid = false;

    m_ultimate_beneficial_owners_isSet = false;
    m_ultimate_beneficial_owners_isValid = false;
}

void OAIUBOResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUBOResponse::fromJsonObject(QJsonObject json) {

    m_asic_search_timestamp_isValid = ::OpenAPI::fromJsonValue(m_asic_search_timestamp, json[QString("asic_search_timestamp")]);
    m_asic_search_timestamp_isSet = !json[QString("asic_search_timestamp")].isNull() && m_asic_search_timestamp_isValid;

    m_business_details_isValid = ::OpenAPI::fromJsonValue(m_business_details, json[QString("business_details")]);
    m_business_details_isSet = !json[QString("business_details")].isNull() && m_business_details_isValid;

    m_business_screening_result_isValid = ::OpenAPI::fromJsonValue(m_business_screening_result, json[QString("business_screening_result")]);
    m_business_screening_result_isSet = !json[QString("business_screening_result")].isNull() && m_business_screening_result_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_issues_list_isValid = ::OpenAPI::fromJsonValue(m_issues_list, json[QString("issues_list")]);
    m_issues_list_isSet = !json[QString("issues_list")].isNull() && m_issues_list_isValid;

    m_non_individual_beneficial_owners_isValid = ::OpenAPI::fromJsonValue(m_non_individual_beneficial_owners, json[QString("non_individual_beneficial_owners")]);
    m_non_individual_beneficial_owners_isSet = !json[QString("non_individual_beneficial_owners")].isNull() && m_non_individual_beneficial_owners_isValid;

    m_officeholders_isValid = ::OpenAPI::fromJsonValue(m_officeholders, json[QString("officeholders")]);
    m_officeholders_isSet = !json[QString("officeholders")].isNull() && m_officeholders_isValid;

    m_supplied_data_isValid = ::OpenAPI::fromJsonValue(m_supplied_data, json[QString("supplied_data")]);
    m_supplied_data_isSet = !json[QString("supplied_data")].isNull() && m_supplied_data_isValid;

    m_supplied_data_matches_isValid = ::OpenAPI::fromJsonValue(m_supplied_data_matches, json[QString("supplied_data_matches")]);
    m_supplied_data_matches_isSet = !json[QString("supplied_data_matches")].isNull() && m_supplied_data_matches_isValid;

    m_ubo_report_isValid = ::OpenAPI::fromJsonValue(m_ubo_report, json[QString("ubo_report")]);
    m_ubo_report_isSet = !json[QString("ubo_report")].isNull() && m_ubo_report_isValid;

    m_ultimate_beneficial_owners_isValid = ::OpenAPI::fromJsonValue(m_ultimate_beneficial_owners, json[QString("ultimate_beneficial_owners")]);
    m_ultimate_beneficial_owners_isSet = !json[QString("ultimate_beneficial_owners")].isNull() && m_ultimate_beneficial_owners_isValid;
}

QString OAIUBOResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUBOResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asic_search_timestamp_isSet) {
        obj.insert(QString("asic_search_timestamp"), ::OpenAPI::toJsonValue(m_asic_search_timestamp));
    }
    if (m_business_details.isSet()) {
        obj.insert(QString("business_details"), ::OpenAPI::toJsonValue(m_business_details));
    }
    if (m_business_screening_result.isSet()) {
        obj.insert(QString("business_screening_result"), ::OpenAPI::toJsonValue(m_business_screening_result));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_issues_list.size() > 0) {
        obj.insert(QString("issues_list"), ::OpenAPI::toJsonValue(m_issues_list));
    }
    if (m_non_individual_beneficial_owners.size() > 0) {
        obj.insert(QString("non_individual_beneficial_owners"), ::OpenAPI::toJsonValue(m_non_individual_beneficial_owners));
    }
    if (m_officeholders.size() > 0) {
        obj.insert(QString("officeholders"), ::OpenAPI::toJsonValue(m_officeholders));
    }
    if (m_supplied_data.isSet()) {
        obj.insert(QString("supplied_data"), ::OpenAPI::toJsonValue(m_supplied_data));
    }
    if (m_supplied_data_matches.isSet()) {
        obj.insert(QString("supplied_data_matches"), ::OpenAPI::toJsonValue(m_supplied_data_matches));
    }
    if (m_ubo_report_isSet) {
        obj.insert(QString("ubo_report"), ::OpenAPI::toJsonValue(m_ubo_report));
    }
    if (m_ultimate_beneficial_owners.size() > 0) {
        obj.insert(QString("ultimate_beneficial_owners"), ::OpenAPI::toJsonValue(m_ultimate_beneficial_owners));
    }
    return obj;
}

QDateTime OAIUBOResponse::getAsicSearchTimestamp() const {
    return m_asic_search_timestamp;
}
void OAIUBOResponse::setAsicSearchTimestamp(const QDateTime &asic_search_timestamp) {
    m_asic_search_timestamp = asic_search_timestamp;
    m_asic_search_timestamp_isSet = true;
}

bool OAIUBOResponse::is_asic_search_timestamp_Set() const{
    return m_asic_search_timestamp_isSet;
}

bool OAIUBOResponse::is_asic_search_timestamp_Valid() const{
    return m_asic_search_timestamp_isValid;
}

OAIBusinessDetails OAIUBOResponse::getBusinessDetails() const {
    return m_business_details;
}
void OAIUBOResponse::setBusinessDetails(const OAIBusinessDetails &business_details) {
    m_business_details = business_details;
    m_business_details_isSet = true;
}

bool OAIUBOResponse::is_business_details_Set() const{
    return m_business_details_isSet;
}

bool OAIUBOResponse::is_business_details_Valid() const{
    return m_business_details_isValid;
}

OAIScreeningResult OAIUBOResponse::getBusinessScreeningResult() const {
    return m_business_screening_result;
}
void OAIUBOResponse::setBusinessScreeningResult(const OAIScreeningResult &business_screening_result) {
    m_business_screening_result = business_screening_result;
    m_business_screening_result_isSet = true;
}

bool OAIUBOResponse::is_business_screening_result_Set() const{
    return m_business_screening_result_isSet;
}

bool OAIUBOResponse::is_business_screening_result_Valid() const{
    return m_business_screening_result_isValid;
}

QString OAIUBOResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIUBOResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUBOResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUBOResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<OAIIssueListItems> OAIUBOResponse::getIssuesList() const {
    return m_issues_list;
}
void OAIUBOResponse::setIssuesList(const QList<OAIIssueListItems> &issues_list) {
    m_issues_list = issues_list;
    m_issues_list_isSet = true;
}

bool OAIUBOResponse::is_issues_list_Set() const{
    return m_issues_list_isSet;
}

bool OAIUBOResponse::is_issues_list_Valid() const{
    return m_issues_list_isValid;
}

QList<OAINonIndividualBeneficialOwner> OAIUBOResponse::getNonIndividualBeneficialOwners() const {
    return m_non_individual_beneficial_owners;
}
void OAIUBOResponse::setNonIndividualBeneficialOwners(const QList<OAINonIndividualBeneficialOwner> &non_individual_beneficial_owners) {
    m_non_individual_beneficial_owners = non_individual_beneficial_owners;
    m_non_individual_beneficial_owners_isSet = true;
}

bool OAIUBOResponse::is_non_individual_beneficial_owners_Set() const{
    return m_non_individual_beneficial_owners_isSet;
}

bool OAIUBOResponse::is_non_individual_beneficial_owners_Valid() const{
    return m_non_individual_beneficial_owners_isValid;
}

QList<OAIIndividualData> OAIUBOResponse::getOfficeholders() const {
    return m_officeholders;
}
void OAIUBOResponse::setOfficeholders(const QList<OAIIndividualData> &officeholders) {
    m_officeholders = officeholders;
    m_officeholders_isSet = true;
}

bool OAIUBOResponse::is_officeholders_Set() const{
    return m_officeholders_isSet;
}

bool OAIUBOResponse::is_officeholders_Valid() const{
    return m_officeholders_isValid;
}

OAISuppliedData OAIUBOResponse::getSuppliedData() const {
    return m_supplied_data;
}
void OAIUBOResponse::setSuppliedData(const OAISuppliedData &supplied_data) {
    m_supplied_data = supplied_data;
    m_supplied_data_isSet = true;
}

bool OAIUBOResponse::is_supplied_data_Set() const{
    return m_supplied_data_isSet;
}

bool OAIUBOResponse::is_supplied_data_Valid() const{
    return m_supplied_data_isValid;
}

OAISuppliedDataMatches OAIUBOResponse::getSuppliedDataMatches() const {
    return m_supplied_data_matches;
}
void OAIUBOResponse::setSuppliedDataMatches(const OAISuppliedDataMatches &supplied_data_matches) {
    m_supplied_data_matches = supplied_data_matches;
    m_supplied_data_matches_isSet = true;
}

bool OAIUBOResponse::is_supplied_data_matches_Set() const{
    return m_supplied_data_matches_isSet;
}

bool OAIUBOResponse::is_supplied_data_matches_Valid() const{
    return m_supplied_data_matches_isValid;
}

QString OAIUBOResponse::getUboReport() const {
    return m_ubo_report;
}
void OAIUBOResponse::setUboReport(const QString &ubo_report) {
    m_ubo_report = ubo_report;
    m_ubo_report_isSet = true;
}

bool OAIUBOResponse::is_ubo_report_Set() const{
    return m_ubo_report_isSet;
}

bool OAIUBOResponse::is_ubo_report_Valid() const{
    return m_ubo_report_isValid;
}

QList<OAIIndividualData> OAIUBOResponse::getUltimateBeneficialOwners() const {
    return m_ultimate_beneficial_owners;
}
void OAIUBOResponse::setUltimateBeneficialOwners(const QList<OAIIndividualData> &ultimate_beneficial_owners) {
    m_ultimate_beneficial_owners = ultimate_beneficial_owners;
    m_ultimate_beneficial_owners_isSet = true;
}

bool OAIUBOResponse::is_ultimate_beneficial_owners_Set() const{
    return m_ultimate_beneficial_owners_isSet;
}

bool OAIUBOResponse::is_ultimate_beneficial_owners_Valid() const{
    return m_ultimate_beneficial_owners_isValid;
}

bool OAIUBOResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asic_search_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_screening_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_individual_beneficial_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_officeholders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplied_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplied_data_matches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ubo_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_beneficial_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUBOResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_supplied_data_isValid && true;
}

} // namespace OpenAPI
