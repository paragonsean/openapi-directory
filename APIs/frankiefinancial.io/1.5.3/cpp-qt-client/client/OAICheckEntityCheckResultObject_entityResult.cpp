/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckEntityCheckResultObject_entityResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckEntityCheckResultObject_entityResult::OAICheckEntityCheckResultObject_entityResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckEntityCheckResultObject_entityResult::OAICheckEntityCheckResultObject_entityResult() {
    this->initializeModel();
}

OAICheckEntityCheckResultObject_entityResult::~OAICheckEntityCheckResultObject_entityResult() {}

void OAICheckEntityCheckResultObject_entityResult::initializeModel() {

    m_addresses_check_isSet = false;
    m_addresses_check_isValid = false;

    m_adverse_media_check_isSet = false;
    m_adverse_media_check_isValid = false;

    m_aml_result_sets_isSet = false;
    m_aml_result_sets_isValid = false;

    m_date_of_birth_check_isSet = false;
    m_date_of_birth_check_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_gender_check_isSet = false;
    m_gender_check_isValid = false;

    m_identity_docs_check_isSet = false;
    m_identity_docs_check_isValid = false;

    m_name_check_isSet = false;
    m_name_check_isValid = false;

    m_pep_check_isSet = false;
    m_pep_check_isValid = false;

    m_sanctions_check_isSet = false;
    m_sanctions_check_isValid = false;

    m_watchlist_check_isSet = false;
    m_watchlist_check_isValid = false;
}

void OAICheckEntityCheckResultObject_entityResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckEntityCheckResultObject_entityResult::fromJsonObject(QJsonObject json) {

    m_addresses_check_isValid = ::OpenAPI::fromJsonValue(m_addresses_check, json[QString("addressesCheck")]);
    m_addresses_check_isSet = !json[QString("addressesCheck")].isNull() && m_addresses_check_isValid;

    m_adverse_media_check_isValid = ::OpenAPI::fromJsonValue(m_adverse_media_check, json[QString("adverseMediaCheck")]);
    m_adverse_media_check_isSet = !json[QString("adverseMediaCheck")].isNull() && m_adverse_media_check_isValid;

    m_aml_result_sets_isValid = ::OpenAPI::fromJsonValue(m_aml_result_sets, json[QString("amlResultSets")]);
    m_aml_result_sets_isSet = !json[QString("amlResultSets")].isNull() && m_aml_result_sets_isValid;

    m_date_of_birth_check_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth_check, json[QString("dateOfBirthCheck")]);
    m_date_of_birth_check_isSet = !json[QString("dateOfBirthCheck")].isNull() && m_date_of_birth_check_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_gender_check_isValid = ::OpenAPI::fromJsonValue(m_gender_check, json[QString("genderCheck")]);
    m_gender_check_isSet = !json[QString("genderCheck")].isNull() && m_gender_check_isValid;

    m_identity_docs_check_isValid = ::OpenAPI::fromJsonValue(m_identity_docs_check, json[QString("identityDocsCheck")]);
    m_identity_docs_check_isSet = !json[QString("identityDocsCheck")].isNull() && m_identity_docs_check_isValid;

    m_name_check_isValid = ::OpenAPI::fromJsonValue(m_name_check, json[QString("nameCheck")]);
    m_name_check_isSet = !json[QString("nameCheck")].isNull() && m_name_check_isValid;

    m_pep_check_isValid = ::OpenAPI::fromJsonValue(m_pep_check, json[QString("pepCheck")]);
    m_pep_check_isSet = !json[QString("pepCheck")].isNull() && m_pep_check_isValid;

    m_sanctions_check_isValid = ::OpenAPI::fromJsonValue(m_sanctions_check, json[QString("sanctionsCheck")]);
    m_sanctions_check_isSet = !json[QString("sanctionsCheck")].isNull() && m_sanctions_check_isValid;

    m_watchlist_check_isValid = ::OpenAPI::fromJsonValue(m_watchlist_check, json[QString("watchlistCheck")]);
    m_watchlist_check_isSet = !json[QString("watchlistCheck")].isNull() && m_watchlist_check_isValid;
}

QString OAICheckEntityCheckResultObject_entityResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckEntityCheckResultObject_entityResult::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses_check.size() > 0) {
        obj.insert(QString("addressesCheck"), ::OpenAPI::toJsonValue(m_addresses_check));
    }
    if (m_adverse_media_check.size() > 0) {
        obj.insert(QString("adverseMediaCheck"), ::OpenAPI::toJsonValue(m_adverse_media_check));
    }
    if (m_aml_result_sets.size() > 0) {
        obj.insert(QString("amlResultSets"), ::OpenAPI::toJsonValue(m_aml_result_sets));
    }
    if (m_date_of_birth_check.isSet()) {
        obj.insert(QString("dateOfBirthCheck"), ::OpenAPI::toJsonValue(m_date_of_birth_check));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_gender_check.isSet()) {
        obj.insert(QString("genderCheck"), ::OpenAPI::toJsonValue(m_gender_check));
    }
    if (m_identity_docs_check.size() > 0) {
        obj.insert(QString("identityDocsCheck"), ::OpenAPI::toJsonValue(m_identity_docs_check));
    }
    if (m_name_check.isSet()) {
        obj.insert(QString("nameCheck"), ::OpenAPI::toJsonValue(m_name_check));
    }
    if (m_pep_check.size() > 0) {
        obj.insert(QString("pepCheck"), ::OpenAPI::toJsonValue(m_pep_check));
    }
    if (m_sanctions_check.size() > 0) {
        obj.insert(QString("sanctionsCheck"), ::OpenAPI::toJsonValue(m_sanctions_check));
    }
    if (m_watchlist_check.size() > 0) {
        obj.insert(QString("watchlistCheck"), ::OpenAPI::toJsonValue(m_watchlist_check));
    }
    return obj;
}

QList<OAIAddressCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getAddressesCheck() const {
    return m_addresses_check;
}
void OAICheckEntityCheckResultObject_entityResult::setAddressesCheck(const QList<OAIAddressCheckResultObject> &addresses_check) {
    m_addresses_check = addresses_check;
    m_addresses_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_addresses_check_Set() const{
    return m_addresses_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_addresses_check_Valid() const{
    return m_addresses_check_isValid;
}

QList<OAIBackgroundCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getAdverseMediaCheck() const {
    return m_adverse_media_check;
}
void OAICheckEntityCheckResultObject_entityResult::setAdverseMediaCheck(const QList<OAIBackgroundCheckResultObject> &adverse_media_check) {
    m_adverse_media_check = adverse_media_check;
    m_adverse_media_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_adverse_media_check_Set() const{
    return m_adverse_media_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_adverse_media_check_Valid() const{
    return m_adverse_media_check_isValid;
}

QList<OAIAMLResultSet> OAICheckEntityCheckResultObject_entityResult::getAmlResultSets() const {
    return m_aml_result_sets;
}
void OAICheckEntityCheckResultObject_entityResult::setAmlResultSets(const QList<OAIAMLResultSet> &aml_result_sets) {
    m_aml_result_sets = aml_result_sets;
    m_aml_result_sets_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_aml_result_sets_Set() const{
    return m_aml_result_sets_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_aml_result_sets_Valid() const{
    return m_aml_result_sets_isValid;
}

OAIDOBCheckResultObject OAICheckEntityCheckResultObject_entityResult::getDateOfBirthCheck() const {
    return m_date_of_birth_check;
}
void OAICheckEntityCheckResultObject_entityResult::setDateOfBirthCheck(const OAIDOBCheckResultObject &date_of_birth_check) {
    m_date_of_birth_check = date_of_birth_check;
    m_date_of_birth_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_date_of_birth_check_Set() const{
    return m_date_of_birth_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_date_of_birth_check_Valid() const{
    return m_date_of_birth_check_isValid;
}

QString OAICheckEntityCheckResultObject_entityResult::getEntityId() const {
    return m_entity_id;
}
void OAICheckEntityCheckResultObject_entityResult::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIGenderCheckResultObject OAICheckEntityCheckResultObject_entityResult::getGenderCheck() const {
    return m_gender_check;
}
void OAICheckEntityCheckResultObject_entityResult::setGenderCheck(const OAIGenderCheckResultObject &gender_check) {
    m_gender_check = gender_check;
    m_gender_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_gender_check_Set() const{
    return m_gender_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_gender_check_Valid() const{
    return m_gender_check_isValid;
}

QList<OAIIdentityDocumentCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getIdentityDocsCheck() const {
    return m_identity_docs_check;
}
void OAICheckEntityCheckResultObject_entityResult::setIdentityDocsCheck(const QList<OAIIdentityDocumentCheckResultObject> &identity_docs_check) {
    m_identity_docs_check = identity_docs_check;
    m_identity_docs_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_identity_docs_check_Set() const{
    return m_identity_docs_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_identity_docs_check_Valid() const{
    return m_identity_docs_check_isValid;
}

OAIPersonalNameCheckResultObject OAICheckEntityCheckResultObject_entityResult::getNameCheck() const {
    return m_name_check;
}
void OAICheckEntityCheckResultObject_entityResult::setNameCheck(const OAIPersonalNameCheckResultObject &name_check) {
    m_name_check = name_check;
    m_name_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_name_check_Set() const{
    return m_name_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_name_check_Valid() const{
    return m_name_check_isValid;
}

QList<OAIBackgroundCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getPepCheck() const {
    return m_pep_check;
}
void OAICheckEntityCheckResultObject_entityResult::setPepCheck(const QList<OAIBackgroundCheckResultObject> &pep_check) {
    m_pep_check = pep_check;
    m_pep_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_pep_check_Set() const{
    return m_pep_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_pep_check_Valid() const{
    return m_pep_check_isValid;
}

QList<OAIBackgroundCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getSanctionsCheck() const {
    return m_sanctions_check;
}
void OAICheckEntityCheckResultObject_entityResult::setSanctionsCheck(const QList<OAIBackgroundCheckResultObject> &sanctions_check) {
    m_sanctions_check = sanctions_check;
    m_sanctions_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_sanctions_check_Set() const{
    return m_sanctions_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_sanctions_check_Valid() const{
    return m_sanctions_check_isValid;
}

QList<OAIBackgroundCheckResultObject> OAICheckEntityCheckResultObject_entityResult::getWatchlistCheck() const {
    return m_watchlist_check;
}
void OAICheckEntityCheckResultObject_entityResult::setWatchlistCheck(const QList<OAIBackgroundCheckResultObject> &watchlist_check) {
    m_watchlist_check = watchlist_check;
    m_watchlist_check_isSet = true;
}

bool OAICheckEntityCheckResultObject_entityResult::is_watchlist_check_Set() const{
    return m_watchlist_check_isSet;
}

bool OAICheckEntityCheckResultObject_entityResult::is_watchlist_check_Valid() const{
    return m_watchlist_check_isValid;
}

bool OAICheckEntityCheckResultObject_entityResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adverse_media_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aml_result_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_docs_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pep_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanctions_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_check.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckEntityCheckResultObject_entityResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
