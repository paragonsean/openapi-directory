/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlan::OAIPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlan::OAIPlan() {
    this->initializeModel();
}

OAIPlan::~OAIPlan() {}

void OAIPlan::initializeModel() {

    m_benefits_isSet = false;
    m_benefits_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_contract_isSet = false;
    m_contract_isValid = false;

    m_default_offer_message_isSet = false;
    m_default_offer_message_isValid = false;

    m_direct_debit_required_isSet = false;
    m_direct_debit_required_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_estimated_base_cost_isSet = false;
    m_estimated_base_cost_isValid = false;

    m_estimated_saving_isSet = false;
    m_estimated_saving_isValid = false;

    m_estimated_total_cost_isSet = false;
    m_estimated_total_cost_isValid = false;

    m_fees_and_charges_isSet = false;
    m_fees_and_charges_isValid = false;

    m_green_options_isSet = false;
    m_green_options_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pay_on_time_required_isSet = false;
    m_pay_on_time_required_isValid = false;

    m_payment_options_isSet = false;
    m_payment_options_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_retailer_isSet = false;
    m_retailer_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlan::fromJsonObject(QJsonObject json) {

    m_benefits_isValid = ::OpenAPI::fromJsonValue(m_benefits, json[QString("benefits")]);
    m_benefits_isSet = !json[QString("benefits")].isNull() && m_benefits_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_contract_isValid = ::OpenAPI::fromJsonValue(m_contract, json[QString("contract")]);
    m_contract_isSet = !json[QString("contract")].isNull() && m_contract_isValid;

    m_default_offer_message_isValid = ::OpenAPI::fromJsonValue(m_default_offer_message, json[QString("defaultOfferMessage")]);
    m_default_offer_message_isSet = !json[QString("defaultOfferMessage")].isNull() && m_default_offer_message_isValid;

    m_direct_debit_required_isValid = ::OpenAPI::fromJsonValue(m_direct_debit_required, json[QString("directDebitRequired")]);
    m_direct_debit_required_isSet = !json[QString("directDebitRequired")].isNull() && m_direct_debit_required_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_estimated_base_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_base_cost, json[QString("estimatedBaseCost")]);
    m_estimated_base_cost_isSet = !json[QString("estimatedBaseCost")].isNull() && m_estimated_base_cost_isValid;

    m_estimated_saving_isValid = ::OpenAPI::fromJsonValue(m_estimated_saving, json[QString("estimatedSaving")]);
    m_estimated_saving_isSet = !json[QString("estimatedSaving")].isNull() && m_estimated_saving_isValid;

    m_estimated_total_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_cost, json[QString("estimatedTotalCost")]);
    m_estimated_total_cost_isSet = !json[QString("estimatedTotalCost")].isNull() && m_estimated_total_cost_isValid;

    m_fees_and_charges_isValid = ::OpenAPI::fromJsonValue(m_fees_and_charges, json[QString("feesAndCharges")]);
    m_fees_and_charges_isSet = !json[QString("feesAndCharges")].isNull() && m_fees_and_charges_isValid;

    m_green_options_isValid = ::OpenAPI::fromJsonValue(m_green_options, json[QString("greenOptions")]);
    m_green_options_isSet = !json[QString("greenOptions")].isNull() && m_green_options_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pay_on_time_required_isValid = ::OpenAPI::fromJsonValue(m_pay_on_time_required, json[QString("payOnTimeRequired")]);
    m_pay_on_time_required_isSet = !json[QString("payOnTimeRequired")].isNull() && m_pay_on_time_required_isValid;

    m_payment_options_isValid = ::OpenAPI::fromJsonValue(m_payment_options, json[QString("paymentOptions")]);
    m_payment_options_isSet = !json[QString("paymentOptions")].isNull() && m_payment_options_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_retailer_isValid = ::OpenAPI::fromJsonValue(m_retailer, json[QString("retailer")]);
    m_retailer_isSet = !json[QString("retailer")].isNull() && m_retailer_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_benefits.isSet()) {
        obj.insert(QString("benefits"), ::OpenAPI::toJsonValue(m_benefits));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_contract.isSet()) {
        obj.insert(QString("contract"), ::OpenAPI::toJsonValue(m_contract));
    }
    if (m_default_offer_message_isSet) {
        obj.insert(QString("defaultOfferMessage"), ::OpenAPI::toJsonValue(m_default_offer_message));
    }
    if (m_direct_debit_required_isSet) {
        obj.insert(QString("directDebitRequired"), ::OpenAPI::toJsonValue(m_direct_debit_required));
    }
    if (m_discounts.isSet()) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_estimated_base_cost_isSet) {
        obj.insert(QString("estimatedBaseCost"), ::OpenAPI::toJsonValue(m_estimated_base_cost));
    }
    if (m_estimated_saving_isSet) {
        obj.insert(QString("estimatedSaving"), ::OpenAPI::toJsonValue(m_estimated_saving));
    }
    if (m_estimated_total_cost_isSet) {
        obj.insert(QString("estimatedTotalCost"), ::OpenAPI::toJsonValue(m_estimated_total_cost));
    }
    if (m_fees_and_charges.isSet()) {
        obj.insert(QString("feesAndCharges"), ::OpenAPI::toJsonValue(m_fees_and_charges));
    }
    if (m_green_options.isSet()) {
        obj.insert(QString("greenOptions"), ::OpenAPI::toJsonValue(m_green_options));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pay_on_time_required_isSet) {
        obj.insert(QString("payOnTimeRequired"), ::OpenAPI::toJsonValue(m_pay_on_time_required));
    }
    if (m_payment_options.isSet()) {
        obj.insert(QString("paymentOptions"), ::OpenAPI::toJsonValue(m_payment_options));
    }
    if (m_rates.isSet()) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_retailer.isSet()) {
        obj.insert(QString("retailer"), ::OpenAPI::toJsonValue(m_retailer));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIBenefits OAIPlan::getBenefits() const {
    return m_benefits;
}
void OAIPlan::setBenefits(const OAIBenefits &benefits) {
    m_benefits = benefits;
    m_benefits_isSet = true;
}

bool OAIPlan::is_benefits_Set() const{
    return m_benefits_isSet;
}

bool OAIPlan::is_benefits_Valid() const{
    return m_benefits_isValid;
}

OAIConditions OAIPlan::getConditions() const {
    return m_conditions;
}
void OAIPlan::setConditions(const OAIConditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIPlan::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIPlan::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIContract OAIPlan::getContract() const {
    return m_contract;
}
void OAIPlan::setContract(const OAIContract &contract) {
    m_contract = contract;
    m_contract_isSet = true;
}

bool OAIPlan::is_contract_Set() const{
    return m_contract_isSet;
}

bool OAIPlan::is_contract_Valid() const{
    return m_contract_isValid;
}

QString OAIPlan::getDefaultOfferMessage() const {
    return m_default_offer_message;
}
void OAIPlan::setDefaultOfferMessage(const QString &default_offer_message) {
    m_default_offer_message = default_offer_message;
    m_default_offer_message_isSet = true;
}

bool OAIPlan::is_default_offer_message_Set() const{
    return m_default_offer_message_isSet;
}

bool OAIPlan::is_default_offer_message_Valid() const{
    return m_default_offer_message_isValid;
}

bool OAIPlan::isDirectDebitRequired() const {
    return m_direct_debit_required;
}
void OAIPlan::setDirectDebitRequired(const bool &direct_debit_required) {
    m_direct_debit_required = direct_debit_required;
    m_direct_debit_required_isSet = true;
}

bool OAIPlan::is_direct_debit_required_Set() const{
    return m_direct_debit_required_isSet;
}

bool OAIPlan::is_direct_debit_required_Valid() const{
    return m_direct_debit_required_isValid;
}

OAIPlan_discounts OAIPlan::getDiscounts() const {
    return m_discounts;
}
void OAIPlan::setDiscounts(const OAIPlan_discounts &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIPlan::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIPlan::is_discounts_Valid() const{
    return m_discounts_isValid;
}

double OAIPlan::getEstimatedBaseCost() const {
    return m_estimated_base_cost;
}
void OAIPlan::setEstimatedBaseCost(const double &estimated_base_cost) {
    m_estimated_base_cost = estimated_base_cost;
    m_estimated_base_cost_isSet = true;
}

bool OAIPlan::is_estimated_base_cost_Set() const{
    return m_estimated_base_cost_isSet;
}

bool OAIPlan::is_estimated_base_cost_Valid() const{
    return m_estimated_base_cost_isValid;
}

double OAIPlan::getEstimatedSaving() const {
    return m_estimated_saving;
}
void OAIPlan::setEstimatedSaving(const double &estimated_saving) {
    m_estimated_saving = estimated_saving;
    m_estimated_saving_isSet = true;
}

bool OAIPlan::is_estimated_saving_Set() const{
    return m_estimated_saving_isSet;
}

bool OAIPlan::is_estimated_saving_Valid() const{
    return m_estimated_saving_isValid;
}

double OAIPlan::getEstimatedTotalCost() const {
    return m_estimated_total_cost;
}
void OAIPlan::setEstimatedTotalCost(const double &estimated_total_cost) {
    m_estimated_total_cost = estimated_total_cost;
    m_estimated_total_cost_isSet = true;
}

bool OAIPlan::is_estimated_total_cost_Set() const{
    return m_estimated_total_cost_isSet;
}

bool OAIPlan::is_estimated_total_cost_Valid() const{
    return m_estimated_total_cost_isValid;
}

OAIFees OAIPlan::getFeesAndCharges() const {
    return m_fees_and_charges;
}
void OAIPlan::setFeesAndCharges(const OAIFees &fees_and_charges) {
    m_fees_and_charges = fees_and_charges;
    m_fees_and_charges_isSet = true;
}

bool OAIPlan::is_fees_and_charges_Set() const{
    return m_fees_and_charges_isSet;
}

bool OAIPlan::is_fees_and_charges_Valid() const{
    return m_fees_and_charges_isValid;
}

OAINameValue OAIPlan::getGreenOptions() const {
    return m_green_options;
}
void OAIPlan::setGreenOptions(const OAINameValue &green_options) {
    m_green_options = green_options;
    m_green_options_isSet = true;
}

bool OAIPlan::is_green_options_Set() const{
    return m_green_options_isSet;
}

bool OAIPlan::is_green_options_Valid() const{
    return m_green_options_isValid;
}

qint32 OAIPlan::getId() const {
    return m_id;
}
void OAIPlan::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlan::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlan::getName() const {
    return m_name;
}
void OAIPlan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlan::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPlan::isPayOnTimeRequired() const {
    return m_pay_on_time_required;
}
void OAIPlan::setPayOnTimeRequired(const bool &pay_on_time_required) {
    m_pay_on_time_required = pay_on_time_required;
    m_pay_on_time_required_isSet = true;
}

bool OAIPlan::is_pay_on_time_required_Set() const{
    return m_pay_on_time_required_isSet;
}

bool OAIPlan::is_pay_on_time_required_Valid() const{
    return m_pay_on_time_required_isValid;
}

OAINameValue OAIPlan::getPaymentOptions() const {
    return m_payment_options;
}
void OAIPlan::setPaymentOptions(const OAINameValue &payment_options) {
    m_payment_options = payment_options;
    m_payment_options_isSet = true;
}

bool OAIPlan::is_payment_options_Set() const{
    return m_payment_options_isSet;
}

bool OAIPlan::is_payment_options_Valid() const{
    return m_payment_options_isValid;
}

OAIRates OAIPlan::getRates() const {
    return m_rates;
}
void OAIPlan::setRates(const OAIRates &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIPlan::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIPlan::is_rates_Valid() const{
    return m_rates_isValid;
}

OAIRetailer OAIPlan::getRetailer() const {
    return m_retailer;
}
void OAIPlan::setRetailer(const OAIRetailer &retailer) {
    m_retailer = retailer;
    m_retailer_isSet = true;
}

bool OAIPlan::is_retailer_Set() const{
    return m_retailer_isSet;
}

bool OAIPlan::is_retailer_Valid() const{
    return m_retailer_isValid;
}

QString OAIPlan::getType() const {
    return m_type;
}
void OAIPlan::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlan::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlan::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPlan::getUrl() const {
    return m_url;
}
void OAIPlan::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPlan::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPlan::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_offer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debit_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_base_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_saving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees_and_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_on_time_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retailer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_offer_message_isValid && m_direct_debit_required_isValid && m_estimated_base_cost_isValid && m_estimated_saving_isValid && m_estimated_total_cost_isValid && m_id_isValid && m_name_isValid && m_pay_on_time_required_isValid && m_rates_isValid && m_retailer_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
