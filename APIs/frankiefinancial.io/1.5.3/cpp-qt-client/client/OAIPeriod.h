/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPeriod.h
 *
 * Rates, by period, for the uploaded bill
 */

#ifndef OAIPeriod_H
#define OAIPeriod_H

#include <QJsonObject>

#include "OAIRateValue.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRateValue;

class OAIPeriod : public OAIObject {
public:
    OAIPeriod();
    OAIPeriod(QString json);
    ~OAIPeriod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRateValue getControlledLoad1() const;
    void setControlledLoad1(const OAIRateValue &controlled_load1);
    bool is_controlled_load1_Set() const;
    bool is_controlled_load1_Valid() const;

    OAIRateValue getControlledLoad2() const;
    void setControlledLoad2(const OAIRateValue &controlled_load2);
    bool is_controlled_load2_Set() const;
    bool is_controlled_load2_Valid() const;

    OAIRateValue getOffPeak() const;
    void setOffPeak(const OAIRateValue &off_peak);
    bool is_off_peak_Set() const;
    bool is_off_peak_Valid() const;

    OAIRateValue getOffPeakStep1() const;
    void setOffPeakStep1(const OAIRateValue &off_peak_step1);
    bool is_off_peak_step1_Set() const;
    bool is_off_peak_step1_Valid() const;

    OAIRateValue getOffPeakStep2() const;
    void setOffPeakStep2(const OAIRateValue &off_peak_step2);
    bool is_off_peak_step2_Set() const;
    bool is_off_peak_step2_Valid() const;

    OAIRateValue getPeak() const;
    void setPeak(const OAIRateValue &peak);
    bool is_peak_Set() const;
    bool is_peak_Valid() const;

    OAIRateValue getPeakStep1() const;
    void setPeakStep1(const OAIRateValue &peak_step1);
    bool is_peak_step1_Set() const;
    bool is_peak_step1_Valid() const;

    OAIRateValue getPeakStep2() const;
    void setPeakStep2(const OAIRateValue &peak_step2);
    bool is_peak_step2_Set() const;
    bool is_peak_step2_Valid() const;

    OAIRateValue getPeakStep3() const;
    void setPeakStep3(const OAIRateValue &peak_step3);
    bool is_peak_step3_Set() const;
    bool is_peak_step3_Valid() const;

    OAIRateValue getShoulder() const;
    void setShoulder(const OAIRateValue &shoulder);
    bool is_shoulder_Set() const;
    bool is_shoulder_Valid() const;

    OAIRateValue getSupplyCharge() const;
    void setSupplyCharge(const OAIRateValue &supply_charge);
    bool is_supply_charge_Set() const;
    bool is_supply_charge_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRateValue m_controlled_load1;
    bool m_controlled_load1_isSet;
    bool m_controlled_load1_isValid;

    OAIRateValue m_controlled_load2;
    bool m_controlled_load2_isSet;
    bool m_controlled_load2_isValid;

    OAIRateValue m_off_peak;
    bool m_off_peak_isSet;
    bool m_off_peak_isValid;

    OAIRateValue m_off_peak_step1;
    bool m_off_peak_step1_isSet;
    bool m_off_peak_step1_isValid;

    OAIRateValue m_off_peak_step2;
    bool m_off_peak_step2_isSet;
    bool m_off_peak_step2_isValid;

    OAIRateValue m_peak;
    bool m_peak_isSet;
    bool m_peak_isValid;

    OAIRateValue m_peak_step1;
    bool m_peak_step1_isSet;
    bool m_peak_step1_isValid;

    OAIRateValue m_peak_step2;
    bool m_peak_step2_isSet;
    bool m_peak_step2_isValid;

    OAIRateValue m_peak_step3;
    bool m_peak_step3_isSet;
    bool m_peak_step3_isValid;

    OAIRateValue m_shoulder;
    bool m_shoulder_isSet;
    bool m_shoulder_isValid;

    OAIRateValue m_supply_charge;
    bool m_supply_charge_isSet;
    bool m_supply_charge_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPeriod)

#endif // OAIPeriod_H
