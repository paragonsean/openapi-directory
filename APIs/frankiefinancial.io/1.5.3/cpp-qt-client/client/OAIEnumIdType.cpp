/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumIdType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumIdType::OAIEnumIdType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumIdType::OAIEnumIdType() {
    this->initializeModel();
}

OAIEnumIdType::~OAIEnumIdType() {}

void OAIEnumIdType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnumIdType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnumIdType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DRIVERS_LICENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::DRIVERS_LICENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASSPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::PASSPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VISA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::VISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMMIGRATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::IMMIGRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NATIONAL_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::NATIONAL_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAX_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::TAX_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NATIONAL_HEALTH_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::NATIONAL_HEALTH_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONCESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::CONCESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HEALTH_CONCESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::HEALTH_CONCESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::PENSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MILITARY_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::MILITARY_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIRTH_CERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::BIRTH_CERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CITIZENSHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::CITIZENSHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARRIAGE_CERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::MARRIAGE_CERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEATH_CERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::DEATH_CERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NAME_CHANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::NAME_CHANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MOBILE_PHONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::MOBILE_PHONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTILITY_BILL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::UTILITY_BILL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BANK_STATEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::BANK_STATEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BANK_ACCOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::BANK_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTENT_PROOF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::INTENT_PROOF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ATTESTATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::ATTESTATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELF_IMAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::SELF_IMAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL_ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::EMAIL_ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MSISDN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::MSISDN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VEHICLE_REGISTRATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::VEHICLE_REGISTRATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL_ADMIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::EXTERNAL_ADMIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHARGES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::CHARGES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRE_ASIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::PRE_ASIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANNUAL_RETURN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::ANNUAL_RETURN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::REPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHECK_RESULTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumIdType::CHECK_RESULTS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnumIdType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnumIdType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnumIdType::OTHER:
            val = "OTHER";
            break;
        case eOAIEnumIdType::DRIVERS_LICENCE:
            val = "DRIVERS_LICENCE";
            break;
        case eOAIEnumIdType::PASSPORT:
            val = "PASSPORT";
            break;
        case eOAIEnumIdType::VISA:
            val = "VISA";
            break;
        case eOAIEnumIdType::IMMIGRATION:
            val = "IMMIGRATION";
            break;
        case eOAIEnumIdType::NATIONAL_ID:
            val = "NATIONAL_ID";
            break;
        case eOAIEnumIdType::TAX_ID:
            val = "TAX_ID";
            break;
        case eOAIEnumIdType::NATIONAL_HEALTH_ID:
            val = "NATIONAL_HEALTH_ID";
            break;
        case eOAIEnumIdType::CONCESSION:
            val = "CONCESSION";
            break;
        case eOAIEnumIdType::HEALTH_CONCESSION:
            val = "HEALTH_CONCESSION";
            break;
        case eOAIEnumIdType::PENSION:
            val = "PENSION";
            break;
        case eOAIEnumIdType::MILITARY_ID:
            val = "MILITARY_ID";
            break;
        case eOAIEnumIdType::BIRTH_CERT:
            val = "BIRTH_CERT";
            break;
        case eOAIEnumIdType::CITIZENSHIP:
            val = "CITIZENSHIP";
            break;
        case eOAIEnumIdType::MARRIAGE_CERT:
            val = "MARRIAGE_CERT";
            break;
        case eOAIEnumIdType::DEATH_CERT:
            val = "DEATH_CERT";
            break;
        case eOAIEnumIdType::NAME_CHANGE:
            val = "NAME_CHANGE";
            break;
        case eOAIEnumIdType::MOBILE_PHONE:
            val = "MOBILE_PHONE";
            break;
        case eOAIEnumIdType::UTILITY_BILL:
            val = "UTILITY_BILL";
            break;
        case eOAIEnumIdType::BANK_STATEMENT:
            val = "BANK_STATEMENT";
            break;
        case eOAIEnumIdType::BANK_ACCOUNT:
            val = "BANK_ACCOUNT";
            break;
        case eOAIEnumIdType::INTENT_PROOF:
            val = "INTENT_PROOF";
            break;
        case eOAIEnumIdType::ATTESTATION:
            val = "ATTESTATION";
            break;
        case eOAIEnumIdType::SELF_IMAGE:
            val = "SELF_IMAGE";
            break;
        case eOAIEnumIdType::EMAIL_ADDRESS:
            val = "EMAIL_ADDRESS";
            break;
        case eOAIEnumIdType::MSISDN:
            val = "MSISDN";
            break;
        case eOAIEnumIdType::DEVICE:
            val = "DEVICE";
            break;
        case eOAIEnumIdType::VEHICLE_REGISTRATION:
            val = "VEHICLE_REGISTRATION";
            break;
        case eOAIEnumIdType::EXTERNAL_ADMIN:
            val = "EXTERNAL_ADMIN";
            break;
        case eOAIEnumIdType::CHARGES:
            val = "CHARGES";
            break;
        case eOAIEnumIdType::PRE_ASIC:
            val = "PRE_ASIC";
            break;
        case eOAIEnumIdType::ANNUAL_RETURN:
            val = "ANNUAL_RETURN";
            break;
        case eOAIEnumIdType::REPORT:
            val = "REPORT";
            break;
        case eOAIEnumIdType::CHECK_RESULTS:
            val = "CHECK_RESULTS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnumIdType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnumIdType::eOAIEnumIdType OAIEnumIdType::getValue() const {
    return m_value;
}

void OAIEnumIdType::setValue(const OAIEnumIdType::eOAIEnumIdType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnumIdType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnumIdType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
