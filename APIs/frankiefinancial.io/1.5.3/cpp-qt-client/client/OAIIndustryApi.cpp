/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndustryApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIIndustryApi::OAIIndustryApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIIndustryApi::~OAIIndustryApi() {
}

void OAIIndustryApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.demo.frankiefinancial.io/compliance/v1.2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createProcessIndustryUtilityDocument", defaultConf);
    _serverIndices.insert("createProcessIndustryUtilityDocument", 0);
    _serverConfigs.insert("updateProcessIndustryUtilityDocument", defaultConf);
    _serverIndices.insert("updateProcessIndustryUtilityDocument", 0);
    _serverConfigs.insert("updateProcessIndustryUtilityDocumentConsent", defaultConf);
    _serverIndices.insert("updateProcessIndustryUtilityDocumentConsent", 0);
    _serverConfigs.insert("updateProcessIndustryUtilityDocumentSwitch", defaultConf);
    _serverIndices.insert("updateProcessIndustryUtilityDocumentSwitch", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIIndustryApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIIndustryApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIIndustryApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIIndustryApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIIndustryApi::setUsername(const QString &username) {
    _username = username;
}

void OAIIndustryApi::setPassword(const QString &password) {
    _password = password;
}


void OAIIndustryApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIIndustryApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIIndustryApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIIndustryApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIndustryApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIIndustryApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIIndustryApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIIndustryApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIIndustryApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIIndustryApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIIndustryApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIIndustryApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIIndustryApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIIndustryApi::createProcessIndustryUtilityDocument(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<qint32> &plan_limit, const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document) {
    QString fullPath = QString(_serverConfigs["createProcessIndustryUtilityDocument"][_serverIndices.value("createProcessIndustryUtilityDocument")].URL()+"/document/new/utility/process/compare");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (plan_limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planLimit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planLimit")).append(querySuffix).append(QUrl::toPercentEncoding(plan_limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (document.hasValue()){

        
        QByteArray output = document.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIndustryApi::createProcessIndustryUtilityDocumentCallback);
    connect(this, &OAIIndustryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIndustryApi::createProcessIndustryUtilityDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentIndustryUtilityProcessResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createProcessIndustryUtilityDocumentSignal(output);
        Q_EMIT createProcessIndustryUtilityDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createProcessIndustryUtilityDocumentSignalE(output, error_type, error_str);
        Q_EMIT createProcessIndustryUtilityDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createProcessIndustryUtilityDocumentSignalError(output, error_type, error_str);
        Q_EMIT createProcessIndustryUtilityDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIndustryApi::updateProcessIndustryUtilityDocument(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<qint32> &plan_limit, const ::OpenAPI::OptionalParam<OAIIdentityDocumentObject> &document) {
    QString fullPath = QString(_serverConfigs["updateProcessIndustryUtilityDocument"][_serverIndices.value("updateProcessIndustryUtilityDocument")].URL()+"/document/{documentId}/utility/process/compare");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (plan_limit.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "planLimit", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("planLimit")).append(querySuffix).append(QUrl::toPercentEncoding(plan_limit.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (document.hasValue()){

        
        QByteArray output = document.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIndustryApi::updateProcessIndustryUtilityDocumentCallback);
    connect(this, &OAIIndustryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIndustryApi::updateProcessIndustryUtilityDocumentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentIndustryUtilityProcessResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProcessIndustryUtilityDocumentSignal(output);
        Q_EMIT updateProcessIndustryUtilityDocumentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentSignalE(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentSignalError(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIndustryApi::updateProcessIndustryUtilityDocumentConsent(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<OAIEICRequest> &consent_request) {
    QString fullPath = QString(_serverConfigs["updateProcessIndustryUtilityDocumentConsent"][_serverIndices.value("updateProcessIndustryUtilityDocumentConsent")].URL()+"/document/{documentId}/utility/process/consent");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (consent_request.hasValue()){

        
        QByteArray output = consent_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIndustryApi::updateProcessIndustryUtilityDocumentConsentCallback);
    connect(this, &OAIIndustryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIndustryApi::updateProcessIndustryUtilityDocumentConsentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentIndustryUtilityConsentResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignal(output);
        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignalE(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignalError(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentConsentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIndustryApi::updateProcessIndustryUtilityDocumentSwitch(const QString &x_frankie_customer_id, const QString &document_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<OAISwitchRequest> &switch_request) {
    QString fullPath = QString(_serverConfigs["updateProcessIndustryUtilityDocumentSwitch"][_serverIndices.value("updateProcessIndustryUtilityDocumentSwitch")].URL()+"/document/{documentId}/utility/process/switch");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString document_idPathParam("{");
        document_idPathParam.append("documentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "documentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"documentId"+pathSuffix : pathPrefix;
        fullPath.replace(document_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(document_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (switch_request.hasValue()){

        
        QByteArray output = switch_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIIndustryApi::updateProcessIndustryUtilityDocumentSwitchCallback);
    connect(this, &OAIIndustryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIIndustryApi::updateProcessIndustryUtilityDocumentSwitchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDocumentIndustryUtilitySwitchResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignal(output);
        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignalE(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignalError(output, error_type, error_str);
        Q_EMIT updateProcessIndustryUtilityDocumentSwitchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIIndustryApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
