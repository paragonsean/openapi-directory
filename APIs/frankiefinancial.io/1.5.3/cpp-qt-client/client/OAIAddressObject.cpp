/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressObject::OAIAddressObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressObject::OAIAddressObject() {
    this->initializeModel();
}

OAIAddressObject::~OAIAddressObject() {}

void OAIAddressObject::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_building_name_isSet = false;
    m_building_name_isValid = false;

    m_care_of_isSet = false;
    m_care_of_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_long_form_isSet = false;
    m_long_form_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_name_isSet = false;
    m_street_name_isValid = false;

    m_street_number_isSet = false;
    m_street_number_isValid = false;

    m_street_type_isSet = false;
    m_street_type_isValid = false;

    m_suburb_isSet = false;
    m_suburb_isValid = false;

    m_town_isSet = false;
    m_town_isValid = false;

    m_unit_number_isSet = false;
    m_unit_number_isValid = false;
}

void OAIAddressObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressObject::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_building_name_isValid = ::OpenAPI::fromJsonValue(m_building_name, json[QString("buildingName")]);
    m_building_name_isSet = !json[QString("buildingName")].isNull() && m_building_name_isValid;

    m_care_of_isValid = ::OpenAPI::fromJsonValue(m_care_of, json[QString("careOf")]);
    m_care_of_isSet = !json[QString("careOf")].isNull() && m_care_of_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_long_form_isValid = ::OpenAPI::fromJsonValue(m_long_form, json[QString("longForm")]);
    m_long_form_isSet = !json[QString("longForm")].isNull() && m_long_form_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_name_isValid = ::OpenAPI::fromJsonValue(m_street_name, json[QString("streetName")]);
    m_street_name_isSet = !json[QString("streetName")].isNull() && m_street_name_isValid;

    m_street_number_isValid = ::OpenAPI::fromJsonValue(m_street_number, json[QString("streetNumber")]);
    m_street_number_isSet = !json[QString("streetNumber")].isNull() && m_street_number_isValid;

    m_street_type_isValid = ::OpenAPI::fromJsonValue(m_street_type, json[QString("streetType")]);
    m_street_type_isSet = !json[QString("streetType")].isNull() && m_street_type_isValid;

    m_suburb_isValid = ::OpenAPI::fromJsonValue(m_suburb, json[QString("suburb")]);
    m_suburb_isSet = !json[QString("suburb")].isNull() && m_suburb_isValid;

    m_town_isValid = ::OpenAPI::fromJsonValue(m_town, json[QString("town")]);
    m_town_isSet = !json[QString("town")].isNull() && m_town_isValid;

    m_unit_number_isValid = ::OpenAPI::fromJsonValue(m_unit_number, json[QString("unitNumber")]);
    m_unit_number_isSet = !json[QString("unitNumber")].isNull() && m_unit_number_isValid;
}

QString OAIAddressObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressObject::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_address_type.isSet()) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_building_name_isSet) {
        obj.insert(QString("buildingName"), ::OpenAPI::toJsonValue(m_building_name));
    }
    if (m_care_of_isSet) {
        obj.insert(QString("careOf"), ::OpenAPI::toJsonValue(m_care_of));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_long_form_isSet) {
        obj.insert(QString("longForm"), ::OpenAPI::toJsonValue(m_long_form));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_name_isSet) {
        obj.insert(QString("streetName"), ::OpenAPI::toJsonValue(m_street_name));
    }
    if (m_street_number_isSet) {
        obj.insert(QString("streetNumber"), ::OpenAPI::toJsonValue(m_street_number));
    }
    if (m_street_type_isSet) {
        obj.insert(QString("streetType"), ::OpenAPI::toJsonValue(m_street_type));
    }
    if (m_suburb_isSet) {
        obj.insert(QString("suburb"), ::OpenAPI::toJsonValue(m_suburb));
    }
    if (m_town_isSet) {
        obj.insert(QString("town"), ::OpenAPI::toJsonValue(m_town));
    }
    if (m_unit_number_isSet) {
        obj.insert(QString("unitNumber"), ::OpenAPI::toJsonValue(m_unit_number));
    }
    return obj;
}

QString OAIAddressObject::getAddressId() const {
    return m_address_id;
}
void OAIAddressObject::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIAddressObject::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIAddressObject::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAIEnumAddressType OAIAddressObject::getAddressType() const {
    return m_address_type;
}
void OAIAddressObject::setAddressType(const OAIEnumAddressType &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAIAddressObject::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAIAddressObject::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAIAddressObject::getBuildingName() const {
    return m_building_name;
}
void OAIAddressObject::setBuildingName(const QString &building_name) {
    m_building_name = building_name;
    m_building_name_isSet = true;
}

bool OAIAddressObject::is_building_name_Set() const{
    return m_building_name_isSet;
}

bool OAIAddressObject::is_building_name_Valid() const{
    return m_building_name_isValid;
}

QString OAIAddressObject::getCareOf() const {
    return m_care_of;
}
void OAIAddressObject::setCareOf(const QString &care_of) {
    m_care_of = care_of;
    m_care_of_isSet = true;
}

bool OAIAddressObject::is_care_of_Set() const{
    return m_care_of_isSet;
}

bool OAIAddressObject::is_care_of_Valid() const{
    return m_care_of_isValid;
}

QString OAIAddressObject::getCountry() const {
    return m_country;
}
void OAIAddressObject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddressObject::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddressObject::is_country_Valid() const{
    return m_country_isValid;
}

QDate OAIAddressObject::getEndDate() const {
    return m_end_date;
}
void OAIAddressObject::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIAddressObject::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIAddressObject::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIAddressObject::getLongForm() const {
    return m_long_form;
}
void OAIAddressObject::setLongForm(const QString &long_form) {
    m_long_form = long_form;
    m_long_form_isSet = true;
}

bool OAIAddressObject::is_long_form_Set() const{
    return m_long_form_isSet;
}

bool OAIAddressObject::is_long_form_Valid() const{
    return m_long_form_isValid;
}

QString OAIAddressObject::getPostalCode() const {
    return m_postal_code;
}
void OAIAddressObject::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddressObject::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddressObject::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddressObject::getRegion() const {
    return m_region;
}
void OAIAddressObject::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddressObject::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddressObject::is_region_Valid() const{
    return m_region_isValid;
}

QDate OAIAddressObject::getStartDate() const {
    return m_start_date;
}
void OAIAddressObject::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIAddressObject::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIAddressObject::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIAddressObject::getState() const {
    return m_state;
}
void OAIAddressObject::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddressObject::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddressObject::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddressObject::getStreetName() const {
    return m_street_name;
}
void OAIAddressObject::setStreetName(const QString &street_name) {
    m_street_name = street_name;
    m_street_name_isSet = true;
}

bool OAIAddressObject::is_street_name_Set() const{
    return m_street_name_isSet;
}

bool OAIAddressObject::is_street_name_Valid() const{
    return m_street_name_isValid;
}

QString OAIAddressObject::getStreetNumber() const {
    return m_street_number;
}
void OAIAddressObject::setStreetNumber(const QString &street_number) {
    m_street_number = street_number;
    m_street_number_isSet = true;
}

bool OAIAddressObject::is_street_number_Set() const{
    return m_street_number_isSet;
}

bool OAIAddressObject::is_street_number_Valid() const{
    return m_street_number_isValid;
}

QString OAIAddressObject::getStreetType() const {
    return m_street_type;
}
void OAIAddressObject::setStreetType(const QString &street_type) {
    m_street_type = street_type;
    m_street_type_isSet = true;
}

bool OAIAddressObject::is_street_type_Set() const{
    return m_street_type_isSet;
}

bool OAIAddressObject::is_street_type_Valid() const{
    return m_street_type_isValid;
}

QString OAIAddressObject::getSuburb() const {
    return m_suburb;
}
void OAIAddressObject::setSuburb(const QString &suburb) {
    m_suburb = suburb;
    m_suburb_isSet = true;
}

bool OAIAddressObject::is_suburb_Set() const{
    return m_suburb_isSet;
}

bool OAIAddressObject::is_suburb_Valid() const{
    return m_suburb_isValid;
}

QString OAIAddressObject::getTown() const {
    return m_town;
}
void OAIAddressObject::setTown(const QString &town) {
    m_town = town;
    m_town_isSet = true;
}

bool OAIAddressObject::is_town_Set() const{
    return m_town_isSet;
}

bool OAIAddressObject::is_town_Valid() const{
    return m_town_isValid;
}

QString OAIAddressObject::getUnitNumber() const {
    return m_unit_number;
}
void OAIAddressObject::setUnitNumber(const QString &unit_number) {
    m_unit_number = unit_number;
    m_unit_number_isSet = true;
}

bool OAIAddressObject::is_unit_number_Set() const{
    return m_unit_number_isSet;
}

bool OAIAddressObject::is_unit_number_Valid() const{
    return m_unit_number_isValid;
}

bool OAIAddressObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_building_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_care_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suburb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_town_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
