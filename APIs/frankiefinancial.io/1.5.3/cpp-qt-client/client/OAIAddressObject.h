/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddressObject.h
 *
 * 
 */

#ifndef OAIAddressObject_H
#define OAIAddressObject_H

#include <QJsonObject>

#include "OAIEnumAddressType.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAddressObject : public OAIObject {
public:
    OAIAddressObject();
    OAIAddressObject(QString json);
    ~OAIAddressObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressId() const;
    void setAddressId(const QString &address_id);
    bool is_address_id_Set() const;
    bool is_address_id_Valid() const;

    OAIEnumAddressType getAddressType() const;
    void setAddressType(const OAIEnumAddressType &address_type);
    bool is_address_type_Set() const;
    bool is_address_type_Valid() const;

    QString getBuildingName() const;
    void setBuildingName(const QString &building_name);
    bool is_building_name_Set() const;
    bool is_building_name_Valid() const;

    QString getCareOf() const;
    void setCareOf(const QString &care_of);
    bool is_care_of_Set() const;
    bool is_care_of_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QDate getEndDate() const;
    void setEndDate(const QDate &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getLongForm() const;
    void setLongForm(const QString &long_form);
    bool is_long_form_Set() const;
    bool is_long_form_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStreetName() const;
    void setStreetName(const QString &street_name);
    bool is_street_name_Set() const;
    bool is_street_name_Valid() const;

    QString getStreetNumber() const;
    void setStreetNumber(const QString &street_number);
    bool is_street_number_Set() const;
    bool is_street_number_Valid() const;

    QString getStreetType() const;
    void setStreetType(const QString &street_type);
    bool is_street_type_Set() const;
    bool is_street_type_Valid() const;

    QString getSuburb() const;
    void setSuburb(const QString &suburb);
    bool is_suburb_Set() const;
    bool is_suburb_Valid() const;

    QString getTown() const;
    void setTown(const QString &town);
    bool is_town_Set() const;
    bool is_town_Valid() const;

    QString getUnitNumber() const;
    void setUnitNumber(const QString &unit_number);
    bool is_unit_number_Set() const;
    bool is_unit_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_id;
    bool m_address_id_isSet;
    bool m_address_id_isValid;

    OAIEnumAddressType m_address_type;
    bool m_address_type_isSet;
    bool m_address_type_isValid;

    QString m_building_name;
    bool m_building_name_isSet;
    bool m_building_name_isValid;

    QString m_care_of;
    bool m_care_of_isSet;
    bool m_care_of_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QDate m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_long_form;
    bool m_long_form_isSet;
    bool m_long_form_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_street_name;
    bool m_street_name_isSet;
    bool m_street_name_isValid;

    QString m_street_number;
    bool m_street_number_isSet;
    bool m_street_number_isValid;

    QString m_street_type;
    bool m_street_type_isSet;
    bool m_street_type_isValid;

    QString m_suburb;
    bool m_suburb_isSet;
    bool m_suburb_isValid;

    QString m_town;
    bool m_town_isSet;
    bool m_town_isValid;

    QString m_unit_number;
    bool m_unit_number_isSet;
    bool m_unit_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddressObject)

#endif // OAIAddressObject_H
