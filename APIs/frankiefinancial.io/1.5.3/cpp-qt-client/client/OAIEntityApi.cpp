/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEntityApi::OAIEntityApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEntityApi::~OAIEntityApi() {
}

void OAIEntityApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.demo.frankiefinancial.io/compliance/v1.2"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createCheckEntity", defaultConf);
    _serverIndices.insert("createCheckEntity", 0);
    _serverConfigs.insert("createCheckEntityPushToMobile", defaultConf);
    _serverIndices.insert("createCheckEntityPushToMobile", 0);
    _serverConfigs.insert("createEntity", defaultConf);
    _serverIndices.insert("createEntity", 0);
    _serverConfigs.insert("createEntityGetIDVToken", defaultConf);
    _serverIndices.insert("createEntityGetIDVToken", 0);
    _serverConfigs.insert("deleteEntity", defaultConf);
    _serverIndices.insert("deleteEntity", 0);
    _serverConfigs.insert("queryEntity", defaultConf);
    _serverIndices.insert("queryEntity", 0);
    _serverConfigs.insert("queryEntityChecks", defaultConf);
    _serverIndices.insert("queryEntityChecks", 0);
    _serverConfigs.insert("queryEntityFull", defaultConf);
    _serverIndices.insert("queryEntityFull", 0);
    _serverConfigs.insert("searchEntity", defaultConf);
    _serverIndices.insert("searchEntity", 0);
    _serverConfigs.insert("updateCheckClassResult", defaultConf);
    _serverIndices.insert("updateCheckClassResult", 0);
    _serverConfigs.insert("updateCheckClassResults", defaultConf);
    _serverIndices.insert("updateCheckClassResults", 0);
    _serverConfigs.insert("updateCheckEntity", defaultConf);
    _serverIndices.insert("updateCheckEntity", 0);
    _serverConfigs.insert("updateCheckEntityPushToMobile", defaultConf);
    _serverIndices.insert("updateCheckEntityPushToMobile", 0);
    _serverConfigs.insert("updateEntity", defaultConf);
    _serverIndices.insert("updateEntity", 0);
    _serverConfigs.insert("updateEntityGetIDVToken", defaultConf);
    _serverIndices.insert("updateEntityGetIDVToken", 0);
    _serverConfigs.insert("updateEntityInitIDVProcess", defaultConf);
    _serverIndices.insert("updateEntityInitIDVProcess", 0);
    _serverConfigs.insert("updateEntityState", defaultConf);
    _serverIndices.insert("updateEntityState", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEntityApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEntityApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEntityApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEntityApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEntityApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEntityApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEntityApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEntityApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEntityApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEntityApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEntityApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEntityApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEntityApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEntityApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEntityApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEntityApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEntityApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEntityApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEntityApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEntityApi::createCheckEntity(const QString &x_frankie_customer_id, const QString &check_type, const QString &result_level, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["createCheckEntity"][_serverIndices.value("createCheckEntity")].URL()+"/entity/new/verify/{checkType}/{resultLevel}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString check_typePathParam("{");
        check_typePathParam.append("checkType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkType"+pathSuffix : pathPrefix;
        fullPath.replace(check_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_type)));
    }
    
    {
        QString result_levelPathParam("{");
        result_levelPathParam.append("resultLevel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resultLevel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resultLevel"+pathSuffix : pathPrefix;
        fullPath.replace(result_levelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(result_level)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::createCheckEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::createCheckEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createCheckEntitySignal(output);
        Q_EMIT createCheckEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createCheckEntitySignalE(output, error_type, error_str);
        Q_EMIT createCheckEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createCheckEntitySignalError(output, error_type, error_str);
        Q_EMIT createCheckEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::createCheckEntityPushToMobile(const QString &x_frankie_customer_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<bool> &nopush) {
    QString fullPath = QString(_serverConfigs["createCheckEntityPushToMobile"][_serverIndices.value("createCheckEntityPushToMobile")].URL()+"/entity/new/verify/pushToMobile");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (nopush.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nopush", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nopush")).append(querySuffix).append(QUrl::toPercentEncoding(nopush.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::createCheckEntityPushToMobileCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::createCheckEntityPushToMobileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAcceptedEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createCheckEntityPushToMobileSignal(output);
        Q_EMIT createCheckEntityPushToMobileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createCheckEntityPushToMobileSignalE(output, error_type, error_str);
        Q_EMIT createCheckEntityPushToMobileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createCheckEntityPushToMobileSignalError(output, error_type, error_str);
        Q_EMIT createCheckEntityPushToMobileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::createEntity(const QString &x_frankie_customer_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<OAIEntityObject> &entity) {
    QString fullPath = QString(_serverConfigs["createEntity"][_serverIndices.value("createEntity")].URL()+"/entity");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (entity.hasValue()){

        
        QByteArray output = entity.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::createEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::createEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEntitySignal(output);
        Q_EMIT createEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEntitySignalE(output, error_type, error_str);
        Q_EMIT createEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEntitySignalError(output, error_type, error_str);
        Q_EMIT createEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::createEntityGetIDVToken(const QString &x_frankie_customer_id, const OAIEntityIDVDetailsObject &entity_idv_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["createEntityGetIDVToken"][_serverIndices.value("createEntityGetIDVToken")].URL()+"/entity/new/idvalidate/getToken");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_idv_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::createEntityGetIDVTokenCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::createEntityGetIDVTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityIDVResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEntityGetIDVTokenSignal(output);
        Q_EMIT createEntityGetIDVTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEntityGetIDVTokenSignalE(output, error_type, error_str);
        Q_EMIT createEntityGetIDVTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEntityGetIDVTokenSignalError(output, error_type, error_str);
        Q_EMIT createEntityGetIDVTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::deleteEntity(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background) {
    QString fullPath = QString(_serverConfigs["deleteEntity"][_serverIndices.value("deleteEntity")].URL()+"/entity/{entityId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::deleteEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::deleteEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIBasicStatusResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteEntitySignal(output);
        Q_EMIT deleteEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteEntitySignalE(output, error_type, error_str);
        Q_EMIT deleteEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteEntitySignalError(output, error_type, error_str);
        Q_EMIT deleteEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::queryEntity(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["queryEntity"][_serverIndices.value("queryEntity")].URL()+"/entity/{entityId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::queryEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::queryEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryEntitySignal(output);
        Q_EMIT queryEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryEntitySignalE(output, error_type, error_str);
        Q_EMIT queryEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryEntitySignalError(output, error_type, error_str);
        Q_EMIT queryEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::queryEntityChecks(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<bool> &alldata) {
    QString fullPath = QString(_serverConfigs["queryEntityChecks"][_serverIndices.value("queryEntityChecks")].URL()+"/entity/{entityId}/checks");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (alldata.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "alldata", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("alldata")).append(querySuffix).append(QUrl::toPercentEncoding(alldata.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::queryEntityChecksCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::queryEntityChecksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryEntityChecksSignal(output);
        Q_EMIT queryEntityChecksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryEntityChecksSignalE(output, error_type, error_str);
        Q_EMIT queryEntityChecksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryEntityChecksSignalError(output, error_type, error_str);
        Q_EMIT queryEntityChecksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::queryEntityFull(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["queryEntityFull"][_serverIndices.value("queryEntityFull")].URL()+"/entity/{entityId}/full");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::queryEntityFullCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::queryEntityFullCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryEntityFullSignal(output);
        Q_EMIT queryEntityFullSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryEntityFullSignalE(output, error_type, error_str);
        Q_EMIT queryEntityFullSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryEntityFullSignalError(output, error_type, error_str);
        Q_EMIT queryEntityFullSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::searchEntity(const QString &x_frankie_customer_id, const OAIEntityObject &search_entity, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["searchEntity"][_serverIndices.value("searchEntity")].URL()+"/entity/search");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = search_entity.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::searchEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::searchEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntitySearchResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT searchEntitySignal(output);
        Q_EMIT searchEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT searchEntitySignalE(output, error_type, error_str);
        Q_EMIT searchEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT searchEntitySignalError(output, error_type, error_str);
        Q_EMIT searchEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateCheckClassResult(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_id, const QString &check_class, const QString &check_class_id, const QString &status, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<bool> &undo) {
    QString fullPath = QString(_serverConfigs["updateCheckClassResult"][_serverIndices.value("updateCheckClassResult")].URL()+"/entity/{entityId}/check/{checkId}/{checkClass}/{checkClassId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString check_idPathParam("{");
        check_idPathParam.append("checkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkId"+pathSuffix : pathPrefix;
        fullPath.replace(check_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_id)));
    }
    
    {
        QString check_classPathParam("{");
        check_classPathParam.append("checkClass").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkClass", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkClass"+pathSuffix : pathPrefix;
        fullPath.replace(check_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_class)));
    }
    
    {
        QString check_class_idPathParam("{");
        check_class_idPathParam.append("checkClassId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkClassId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkClassId"+pathSuffix : pathPrefix;
        fullPath.replace(check_class_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_class_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(status));
    }
    if (undo.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "undo", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("undo")).append(querySuffix).append(QUrl::toPercentEncoding(undo.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateCheckClassResultCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateCheckClassResultCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCheckClassResultSignal(output);
        Q_EMIT updateCheckClassResultSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCheckClassResultSignalE(output, error_type, error_str);
        Q_EMIT updateCheckClassResultSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCheckClassResultSignalError(output, error_type, error_str);
        Q_EMIT updateCheckClassResultSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateCheckClassResults(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_id, const QString &check_class, const OAICheckResultUpdateObject &check_result_update, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["updateCheckClassResults"][_serverIndices.value("updateCheckClassResults")].URL()+"/entity/{entityId}/check/{checkId}/{checkClass}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString check_idPathParam("{");
        check_idPathParam.append("checkId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkId"+pathSuffix : pathPrefix;
        fullPath.replace(check_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_id)));
    }
    
    {
        QString check_classPathParam("{");
        check_classPathParam.append("checkClass").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkClass", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkClass"+pathSuffix : pathPrefix;
        fullPath.replace(check_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = check_result_update.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateCheckClassResultsCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateCheckClassResultsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCheckClassResultsSignal(output);
        Q_EMIT updateCheckClassResultsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCheckClassResultsSignalE(output, error_type, error_str);
        Q_EMIT updateCheckClassResultsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCheckClassResultsSignalError(output, error_type, error_str);
        Q_EMIT updateCheckClassResultsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateCheckEntity(const QString &x_frankie_customer_id, const QString &entity_id, const QString &check_type, const QString &result_level, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<bool> &force, const ::OpenAPI::OptionalParam<bool> &no_invalidate) {
    QString fullPath = QString(_serverConfigs["updateCheckEntity"][_serverIndices.value("updateCheckEntity")].URL()+"/entity/{entityId}/verify/{checkType}/{resultLevel}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    
    {
        QString check_typePathParam("{");
        check_typePathParam.append("checkType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "checkType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"checkType"+pathSuffix : pathPrefix;
        fullPath.replace(check_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(check_type)));
    }
    
    {
        QString result_levelPathParam("{");
        result_levelPathParam.append("resultLevel").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "resultLevel", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"resultLevel"+pathSuffix : pathPrefix;
        fullPath.replace(result_levelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(result_level)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (force.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "force", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("force")).append(querySuffix).append(QUrl::toPercentEncoding(force.stringValue()));
    }
    if (no_invalidate.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "noInvalidate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("noInvalidate")).append(querySuffix).append(QUrl::toPercentEncoding(no_invalidate.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateCheckEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateCheckEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCheckEntitySignal(output);
        Q_EMIT updateCheckEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCheckEntitySignalE(output, error_type, error_str);
        Q_EMIT updateCheckEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCheckEntitySignalError(output, error_type, error_str);
        Q_EMIT updateCheckEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateCheckEntityPushToMobile(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<bool> &nopush, const ::OpenAPI::OptionalParam<qint32> &phase) {
    QString fullPath = QString(_serverConfigs["updateCheckEntityPushToMobile"][_serverIndices.value("updateCheckEntityPushToMobile")].URL()+"/entity/{entityId}/verify/pushToMobile");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (nopush.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "nopush", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("nopush")).append(querySuffix).append(QUrl::toPercentEncoding(nopush.stringValue()));
    }
    if (phase.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "phase", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("phase")).append(querySuffix).append(QUrl::toPercentEncoding(phase.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateCheckEntityPushToMobileCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateCheckEntityPushToMobileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAcceptedEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateCheckEntityPushToMobileSignal(output);
        Q_EMIT updateCheckEntityPushToMobileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateCheckEntityPushToMobileSignalE(output, error_type, error_str);
        Q_EMIT updateCheckEntityPushToMobileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateCheckEntityPushToMobileSignalError(output, error_type, error_str);
        Q_EMIT updateCheckEntityPushToMobileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateEntity(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityObject &entity, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<qint32> &x_frankie_background, const ::OpenAPI::OptionalParam<bool> &no_invalidate) {
    QString fullPath = QString(_serverConfigs["updateEntity"][_serverIndices.value("updateEntity")].URL()+"/entity/{entityId}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (no_invalidate.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "noInvalidate", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("noInvalidate")).append(querySuffix).append(QUrl::toPercentEncoding(no_invalidate.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    if (x_frankie_background.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_background.value()).isEmpty()) {
            input.headers.insert("X-Frankie-Background", ::OpenAPI::toStringValue(x_frankie_background.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateEntityCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateEntityCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntitySignal(output);
        Q_EMIT updateEntitySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntitySignalE(output, error_type, error_str);
        Q_EMIT updateEntitySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntitySignalError(output, error_type, error_str);
        Q_EMIT updateEntitySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateEntityGetIDVToken(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityIDVDetailsObject &entity_idv_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["updateEntityGetIDVToken"][_serverIndices.value("updateEntityGetIDVToken")].URL()+"/entity/{entityId}/idvalidate/getToken");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_idv_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateEntityGetIDVTokenCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateEntityGetIDVTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityIDVResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntityGetIDVTokenSignal(output);
        Q_EMIT updateEntityGetIDVTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntityGetIDVTokenSignalE(output, error_type, error_str);
        Q_EMIT updateEntityGetIDVTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntityGetIDVTokenSignalError(output, error_type, error_str);
        Q_EMIT updateEntityGetIDVTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateEntityInitIDVProcess(const QString &x_frankie_customer_id, const QString &entity_id, const OAIEntityCheckDetailsObject &entity_details, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id) {
    QString fullPath = QString(_serverConfigs["updateEntityInitIDVProcess"][_serverIndices.value("updateEntityInitIDVProcess")].URL()+"/entity/{entityId}/idvalidate/initProcess");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = entity_details.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateEntityInitIDVProcessCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateEntityInitIDVProcessCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEntityIDVResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntityInitIDVProcessSignal(output);
        Q_EMIT updateEntityInitIDVProcessSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntityInitIDVProcessSignalE(output, error_type, error_str);
        Q_EMIT updateEntityInitIDVProcessSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntityInitIDVProcessSignalError(output, error_type, error_str);
        Q_EMIT updateEntityInitIDVProcessSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::updateEntityState(const QString &x_frankie_customer_id, const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id, const ::OpenAPI::OptionalParam<QString> &r_set, const ::OpenAPI::OptionalParam<QString> &risk, const ::OpenAPI::OptionalParam<QString> &comment) {
    QString fullPath = QString(_serverConfigs["updateEntityState"][_serverIndices.value("updateEntityState")].URL()+"/entity/{entityId}/status");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    
    {
        QString entity_idPathParam("{");
        entity_idPathParam.append("entityId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "entityId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"entityId"+pathSuffix : pathPrefix;
        fullPath.replace(entity_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(entity_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (r_set.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "set", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("set")).append(querySuffix).append(QUrl::toPercentEncoding(r_set.stringValue()));
    }
    if (risk.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "risk", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("risk")).append(querySuffix).append(QUrl::toPercentEncoding(risk.stringValue()));
    }
    if (comment.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "comment", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("comment")).append(querySuffix).append(QUrl::toPercentEncoding(comment.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_id).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerID", ::OpenAPI::toStringValue(x_frankie_customer_id));
        }
        }
    if (x_frankie_customer_child_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_frankie_customer_child_id.value()).isEmpty()) {
            input.headers.insert("X-Frankie-CustomerChildID", ::OpenAPI::toStringValue(x_frankie_customer_child_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEntityApi::updateEntityStateCallback);
    connect(this, &OAIEntityApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEntityApi::updateEntityStateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICheckEntityCheckResultObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEntityStateSignal(output);
        Q_EMIT updateEntityStateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEntityStateSignalE(output, error_type, error_str);
        Q_EMIT updateEntityStateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEntityStateSignalError(output, error_type, error_str);
        Q_EMIT updateEntityStateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEntityApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
