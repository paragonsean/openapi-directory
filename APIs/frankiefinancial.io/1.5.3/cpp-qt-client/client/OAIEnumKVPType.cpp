/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumKVPType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumKVPType::OAIEnumKVPType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumKVPType::OAIEnumKVPType() {
    this->initializeModel();
}

OAIEnumKVPType::~OAIEnumKVPType() {}

void OAIEnumKVPType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnumKVPType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnumKVPType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("defunct", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::DEFUNCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.string", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.integer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.float", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.bool", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_BOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.date", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("general.datetime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::GENERAL_DATETIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("raw.json.base64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::RAW_JSON_BASE64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("raw.xml.base64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::RAW_XML_BASE64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("raw.base64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::RAW_BASE64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("error.code", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ERROR_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("error.message", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ERROR_MESSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("result.code", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::RESULT_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("result.id", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::RESULT_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.external", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_EXTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.number.primary", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_NUMBER_PRIMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.number.additional", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_NUMBER_ADDITIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.msisdn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_MSISDN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.email", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id.device", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::ID_DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.name.full", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_NAME_FULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.name.familyname", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_NAME_FAMILYNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.name.givenname", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_NAME_GIVENNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.name.middlename", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_NAME_MIDDLENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.gender", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_GENDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.longform", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_LONGFORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.street1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_STREET1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.street2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_STREET2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.postalcode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_POSTALCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.town", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_TOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.suburb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_SUBURB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.region", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_REGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.state", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_STATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.address.country", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_ADDRESS_COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pii.dob", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::PII_DOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("transient.string", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnumKVPType::TRANSIENT_STRING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnumKVPType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnumKVPType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnumKVPType::DEFUNCT:
            val = "defunct";
            break;
        case eOAIEnumKVPType::GENERAL_STRING:
            val = "general.string";
            break;
        case eOAIEnumKVPType::GENERAL_INTEGER:
            val = "general.integer";
            break;
        case eOAIEnumKVPType::GENERAL_FLOAT:
            val = "general.float";
            break;
        case eOAIEnumKVPType::GENERAL_BOOL:
            val = "general.bool";
            break;
        case eOAIEnumKVPType::GENERAL_DATE:
            val = "general.date";
            break;
        case eOAIEnumKVPType::GENERAL_DATETIME:
            val = "general.datetime";
            break;
        case eOAIEnumKVPType::RAW_JSON_BASE64:
            val = "raw.json.base64";
            break;
        case eOAIEnumKVPType::RAW_XML_BASE64:
            val = "raw.xml.base64";
            break;
        case eOAIEnumKVPType::RAW_BASE64:
            val = "raw.base64";
            break;
        case eOAIEnumKVPType::ERROR_CODE:
            val = "error.code";
            break;
        case eOAIEnumKVPType::ERROR_MESSAGE:
            val = "error.message";
            break;
        case eOAIEnumKVPType::RESULT_CODE:
            val = "result.code";
            break;
        case eOAIEnumKVPType::RESULT_ID:
            val = "result.id";
            break;
        case eOAIEnumKVPType::ID_EXTERNAL:
            val = "id.external";
            break;
        case eOAIEnumKVPType::ID_NUMBER_PRIMARY:
            val = "id.number.primary";
            break;
        case eOAIEnumKVPType::ID_NUMBER_ADDITIONAL:
            val = "id.number.additional";
            break;
        case eOAIEnumKVPType::ID_MSISDN:
            val = "id.msisdn";
            break;
        case eOAIEnumKVPType::ID_EMAIL:
            val = "id.email";
            break;
        case eOAIEnumKVPType::ID_DEVICE:
            val = "id.device";
            break;
        case eOAIEnumKVPType::PII_NAME_FULL:
            val = "pii.name.full";
            break;
        case eOAIEnumKVPType::PII_NAME_FAMILYNAME:
            val = "pii.name.familyname";
            break;
        case eOAIEnumKVPType::PII_NAME_GIVENNAME:
            val = "pii.name.givenname";
            break;
        case eOAIEnumKVPType::PII_NAME_MIDDLENAME:
            val = "pii.name.middlename";
            break;
        case eOAIEnumKVPType::PII_GENDER:
            val = "pii.gender";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_LONGFORM:
            val = "pii.address.longform";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_STREET1:
            val = "pii.address.street1";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_STREET2:
            val = "pii.address.street2";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_POSTALCODE:
            val = "pii.address.postalcode";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_TOWN:
            val = "pii.address.town";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_SUBURB:
            val = "pii.address.suburb";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_REGION:
            val = "pii.address.region";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_STATE:
            val = "pii.address.state";
            break;
        case eOAIEnumKVPType::PII_ADDRESS_COUNTRY:
            val = "pii.address.country";
            break;
        case eOAIEnumKVPType::PII_DOB:
            val = "pii.dob";
            break;
        case eOAIEnumKVPType::TRANSIENT_STRING:
            val = "transient.string";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnumKVPType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnumKVPType::eOAIEnumKVPType OAIEnumKVPType::getValue() const {
    return m_value;
}

void OAIEnumKVPType::setValue(const OAIEnumKVPType::eOAIEnumKVPType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnumKVPType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnumKVPType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
