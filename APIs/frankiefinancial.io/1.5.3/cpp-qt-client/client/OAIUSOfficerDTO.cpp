/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUSOfficerDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUSOfficerDTO::OAIUSOfficerDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUSOfficerDTO::OAIUSOfficerDTO() {
    this->initializeModel();
}

OAIUSOfficerDTO::~OAIUSOfficerDTO() {}

void OAIUSOfficerDTO::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_address_isSet = false;
    m_business_address_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_mailing_address_isSet = false;
    m_mailing_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUSOfficerDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUSOfficerDTO::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_business_address_isValid = ::OpenAPI::fromJsonValue(m_business_address, json[QString("BusinessAddress")]);
    m_business_address_isSet = !json[QString("BusinessAddress")].isNull() && m_business_address_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_mailing_address_isValid = ::OpenAPI::fromJsonValue(m_mailing_address, json[QString("MailingAddress")]);
    m_mailing_address_isSet = !json[QString("MailingAddress")].isNull() && m_mailing_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIUSOfficerDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUSOfficerDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_address.isSet()) {
        obj.insert(QString("BusinessAddress"), ::OpenAPI::toJsonValue(m_business_address));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_mailing_address_isSet) {
        obj.insert(QString("MailingAddress"), ::OpenAPI::toJsonValue(m_mailing_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUSOfficerDTO::getAddress() const {
    return m_address;
}
void OAIUSOfficerDTO::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUSOfficerDTO::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUSOfficerDTO::is_address_Valid() const{
    return m_address_isValid;
}

OAIArrayOfString1 OAIUSOfficerDTO::getBusinessAddress() const {
    return m_business_address;
}
void OAIUSOfficerDTO::setBusinessAddress(const OAIArrayOfString1 &business_address) {
    m_business_address = business_address;
    m_business_address_isSet = true;
}

bool OAIUSOfficerDTO::is_business_address_Set() const{
    return m_business_address_isSet;
}

bool OAIUSOfficerDTO::is_business_address_Valid() const{
    return m_business_address_isValid;
}

QString OAIUSOfficerDTO::getDate() const {
    return m_date;
}
void OAIUSOfficerDTO::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIUSOfficerDTO::is_date_Set() const{
    return m_date_isSet;
}

bool OAIUSOfficerDTO::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIUSOfficerDTO::getMailingAddress() const {
    return m_mailing_address;
}
void OAIUSOfficerDTO::setMailingAddress(const QString &mailing_address) {
    m_mailing_address = mailing_address;
    m_mailing_address_isSet = true;
}

bool OAIUSOfficerDTO::is_mailing_address_Set() const{
    return m_mailing_address_isSet;
}

bool OAIUSOfficerDTO::is_mailing_address_Valid() const{
    return m_mailing_address_isValid;
}

QString OAIUSOfficerDTO::getName() const {
    return m_name;
}
void OAIUSOfficerDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUSOfficerDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUSOfficerDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUSOfficerDTO::getTitle() const {
    return m_title;
}
void OAIUSOfficerDTO::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUSOfficerDTO::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUSOfficerDTO::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUSOfficerDTO::getType() const {
    return m_type;
}
void OAIUSOfficerDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUSOfficerDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUSOfficerDTO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUSOfficerDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUSOfficerDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
