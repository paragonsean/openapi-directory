/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityObject::OAIEntityObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityObject::OAIEntityObject() {
    this->initializeModel();
}

OAIEntityObject::~OAIEntityObject() {}

void OAIEntityObject::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_profile_isSet = false;
    m_entity_profile_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_extra_data_isSet = false;
    m_extra_data_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_identity_docs_isSet = false;
    m_identity_docs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organisation_data_isSet = false;
    m_organisation_data_isValid = false;
}

void OAIEntityObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityObject::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_profile_isValid = ::OpenAPI::fromJsonValue(m_entity_profile, json[QString("entityProfile")]);
    m_entity_profile_isSet = !json[QString("entityProfile")].isNull() && m_entity_profile_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_extra_data_isValid = ::OpenAPI::fromJsonValue(m_extra_data, json[QString("extraData")]);
    m_extra_data_isSet = !json[QString("extraData")].isNull() && m_extra_data_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_identity_docs_isValid = ::OpenAPI::fromJsonValue(m_identity_docs, json[QString("identityDocs")]);
    m_identity_docs_isSet = !json[QString("identityDocs")].isNull() && m_identity_docs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organisation_data_isValid = ::OpenAPI::fromJsonValue(m_organisation_data, json[QString("organisationData")]);
    m_organisation_data_isSet = !json[QString("organisationData")].isNull() && m_organisation_data_isValid;
}

QString OAIEntityObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityObject::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_date_of_birth.isSet()) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_profile_isSet) {
        obj.insert(QString("entityProfile"), ::OpenAPI::toJsonValue(m_entity_profile));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_extra_data.size() > 0) {
        obj.insert(QString("extraData"), ::OpenAPI::toJsonValue(m_extra_data));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_gender.isSet()) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_identity_docs.size() > 0) {
        obj.insert(QString("identityDocs"), ::OpenAPI::toJsonValue(m_identity_docs));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organisation_data.isSet()) {
        obj.insert(QString("organisationData"), ::OpenAPI::toJsonValue(m_organisation_data));
    }
    return obj;
}

QList<OAIAddressObject> OAIEntityObject::getAddresses() const {
    return m_addresses;
}
void OAIEntityObject::setAddresses(const QList<OAIAddressObject> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIEntityObject::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIEntityObject::is_addresses_Valid() const{
    return m_addresses_isValid;
}

OAIDOBObject OAIEntityObject::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIEntityObject::setDateOfBirth(const OAIDOBObject &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIEntityObject::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIEntityObject::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIEntityObject::getEntityId() const {
    return m_entity_id;
}
void OAIEntityObject::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEntityObject::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEntityObject::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIEntityObject::getEntityProfile() const {
    return m_entity_profile;
}
void OAIEntityObject::setEntityProfile(const QString &entity_profile) {
    m_entity_profile = entity_profile;
    m_entity_profile_isSet = true;
}

bool OAIEntityObject::is_entity_profile_Set() const{
    return m_entity_profile_isSet;
}

bool OAIEntityObject::is_entity_profile_Valid() const{
    return m_entity_profile_isValid;
}

OAIEnumEntityType OAIEntityObject::getEntityType() const {
    return m_entity_type;
}
void OAIEntityObject::setEntityType(const OAIEnumEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEntityObject::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEntityObject::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QList<OAIKeyValuePairObject> OAIEntityObject::getExtraData() const {
    return m_extra_data;
}
void OAIEntityObject::setExtraData(const QList<OAIKeyValuePairObject> &extra_data) {
    m_extra_data = extra_data;
    m_extra_data_isSet = true;
}

bool OAIEntityObject::is_extra_data_Set() const{
    return m_extra_data_isSet;
}

bool OAIEntityObject::is_extra_data_Valid() const{
    return m_extra_data_isValid;
}

QList<OAIEntityFlagObject> OAIEntityObject::getFlags() const {
    return m_flags;
}
void OAIEntityObject::setFlags(const QList<OAIEntityFlagObject> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIEntityObject::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIEntityObject::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIEnumGender OAIEntityObject::getGender() const {
    return m_gender;
}
void OAIEntityObject::setGender(const OAIEnumGender &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIEntityObject::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIEntityObject::is_gender_Valid() const{
    return m_gender_isValid;
}

QList<OAIIdentityDocumentObject> OAIEntityObject::getIdentityDocs() const {
    return m_identity_docs;
}
void OAIEntityObject::setIdentityDocs(const QList<OAIIdentityDocumentObject> &identity_docs) {
    m_identity_docs = identity_docs;
    m_identity_docs_isSet = true;
}

bool OAIEntityObject::is_identity_docs_Set() const{
    return m_identity_docs_isSet;
}

bool OAIEntityObject::is_identity_docs_Valid() const{
    return m_identity_docs_isValid;
}

OAIPersonalNameObject OAIEntityObject::getName() const {
    return m_name;
}
void OAIEntityObject::setName(const OAIPersonalNameObject &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntityObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntityObject::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrganisationDataObject OAIEntityObject::getOrganisationData() const {
    return m_organisation_data;
}
void OAIEntityObject::setOrganisationData(const OAIOrganisationDataObject &organisation_data) {
    m_organisation_data = organisation_data;
    m_organisation_data_isSet = true;
}

bool OAIEntityObject::is_organisation_data_Set() const{
    return m_organisation_data_isSet;
}

bool OAIEntityObject::is_organisation_data_Valid() const{
    return m_organisation_data_isValid;
}

bool OAIEntityObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_docs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
