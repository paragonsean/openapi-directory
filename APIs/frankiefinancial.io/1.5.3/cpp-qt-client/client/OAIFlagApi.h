/**
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFlagApi_H
#define OAI_OAIFlagApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEntityResultObject.h"
#include "OAIErrorObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFlagApi : public QObject {
    Q_OBJECT

public:
    OAIFlagApi(const int timeOut = 0);
    ~OAIFlagApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  r_set bool [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  blocked_by QString [optional]
    * @param[in]  attribute QString [optional]
    * @param[in]  original_id QString [optional]
    */
    virtual void blacklistEntity(const QString &x_frankie_customer_id, const QString &entity_id, const bool &r_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &blocked_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &original_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  r_set bool [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void entityMonitoring(const QString &x_frankie_customer_id, const QString &entity_id, const bool &r_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  other_id QString [required]
    * @param[in]  r_set bool [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    */
    virtual void flagDuplicateEntity(const QString &x_frankie_customer_id, const QString &entity_id, const QString &other_id, const bool &r_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_frankie_customer_id QString [required]
    * @param[in]  entity_id QString [required]
    * @param[in]  r_set bool [required]
    * @param[in]  x_frankie_customer_child_id QString [optional]
    * @param[in]  reason QString [optional]
    * @param[in]  comment QString [optional]
    */
    virtual void watchlistEntity(const QString &x_frankie_customer_id, const QString &entity_id, const bool &r_set, const ::OpenAPI::OptionalParam<QString> &x_frankie_customer_child_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blacklistEntityCallback(OAIHttpRequestWorker *worker);
    void entityMonitoringCallback(OAIHttpRequestWorker *worker);
    void flagDuplicateEntityCallback(OAIHttpRequestWorker *worker);
    void watchlistEntityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blacklistEntitySignal(OAIEntityResultObject summary);
    void entityMonitoringSignal(OAIEntityResultObject summary);
    void flagDuplicateEntitySignal(OAIEntityResultObject summary);
    void watchlistEntitySignal(OAIEntityResultObject summary);


    void blacklistEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void entityMonitoringSignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void flagDuplicateEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);
    void watchlistEntitySignalFull(OAIHttpRequestWorker *worker, OAIEntityResultObject summary);

    Q_DECL_DEPRECATED_X("Use blacklistEntitySignalError() instead")
    void blacklistEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blacklistEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entityMonitoringSignalError() instead")
    void entityMonitoringSignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entityMonitoringSignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagDuplicateEntitySignalError() instead")
    void flagDuplicateEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flagDuplicateEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistEntitySignalError() instead")
    void watchlistEntitySignalE(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistEntitySignalError(OAIEntityResultObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blacklistEntitySignalErrorFull() instead")
    void blacklistEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blacklistEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entityMonitoringSignalErrorFull() instead")
    void entityMonitoringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entityMonitoringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagDuplicateEntitySignalErrorFull() instead")
    void flagDuplicateEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flagDuplicateEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistEntitySignalErrorFull() instead")
    void watchlistEntitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistEntitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
