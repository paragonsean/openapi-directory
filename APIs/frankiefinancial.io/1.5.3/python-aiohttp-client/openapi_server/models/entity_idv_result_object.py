# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_object import EntityObject
from openapi_server import util


class EntityIDVResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicant_id: str=None, entity: EntityObject=None, request_id: str=None, support_two_docs: bool=None, token: str=None):
        """EntityIDVResultObject - a model defined in OpenAPI

        :param applicant_id: The applicant_id of this EntityIDVResultObject.
        :param entity: The entity of this EntityIDVResultObject.
        :param request_id: The request_id of this EntityIDVResultObject.
        :param support_two_docs: The support_two_docs of this EntityIDVResultObject.
        :param token: The token of this EntityIDVResultObject.
        """
        self.openapi_types = {
            'applicant_id': str,
            'entity': EntityObject,
            'request_id': str,
            'support_two_docs': bool,
            'token': str
        }

        self.attribute_map = {
            'applicant_id': 'applicantId',
            'entity': 'entity',
            'request_id': 'requestId',
            'support_two_docs': 'supportTwoDocs',
            'token': 'token'
        }

        self._applicant_id = applicant_id
        self._entity = entity
        self._request_id = request_id
        self._support_two_docs = support_two_docs
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityIDVResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityIDVResultObject of this EntityIDVResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicant_id(self):
        """Gets the applicant_id of this EntityIDVResultObject.

        The applicantId is either the same one that was supplied in the request for a fresh token, or a new one. This ID must be supplied along with the token to your SDK so that it knows who any uploaded documents are for.  The latest applicant will also be written to the extraData of the entity as well for safe keeping. Older applicantIds will be overwritten. 

        :return: The applicant_id of this EntityIDVResultObject.
        :rtype: str
        """
        return self._applicant_id

    @applicant_id.setter
    def applicant_id(self, applicant_id):
        """Sets the applicant_id of this EntityIDVResultObject.

        The applicantId is either the same one that was supplied in the request for a fresh token, or a new one. This ID must be supplied along with the token to your SDK so that it knows who any uploaded documents are for.  The latest applicant will also be written to the extraData of the entity as well for safe keeping. Older applicantIds will be overwritten. 

        :param applicant_id: The applicant_id of this EntityIDVResultObject.
        :type applicant_id: str
        """
        if applicant_id is None:
            raise ValueError("Invalid value for `applicant_id`, must not be `None`")

        self._applicant_id = applicant_id

    @property
    def entity(self):
        """Gets the entity of this EntityIDVResultObject.


        :return: The entity of this EntityIDVResultObject.
        :rtype: EntityObject
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityIDVResultObject.


        :param entity: The entity of this EntityIDVResultObject.
        :type entity: EntityObject
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def request_id(self):
        """Gets the request_id of this EntityIDVResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this EntityIDVResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this EntityIDVResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this EntityIDVResultObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def support_two_docs(self):
        """Gets the support_two_docs of this EntityIDVResultObject.

        If the requesting customer can support requesting 2 documents.

        :return: The support_two_docs of this EntityIDVResultObject.
        :rtype: bool
        """
        return self._support_two_docs

    @support_two_docs.setter
    def support_two_docs(self, support_two_docs):
        """Sets the support_two_docs of this EntityIDVResultObject.

        If the requesting customer can support requesting 2 documents.

        :param support_two_docs: The support_two_docs of this EntityIDVResultObject.
        :type support_two_docs: bool
        """

        self._support_two_docs = support_two_docs

    @property
    def token(self):
        """Gets the token of this EntityIDVResultObject.

        Token to be used in the SDK to authenticate the applicant and application/referrer.  Tokens are time limited (1 hour) and can only be used with the applicantId supplied. 

        :return: The token of this EntityIDVResultObject.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EntityIDVResultObject.

        Token to be used in the SDK to authenticate the applicant and application/referrer.  Tokens are time limited (1 hour) and can only be used with the applicantId supplied. 

        :param token: The token of this EntityIDVResultObject.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
