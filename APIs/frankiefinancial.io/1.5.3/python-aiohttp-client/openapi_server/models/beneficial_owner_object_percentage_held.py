# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BeneficialOwnerObjectPercentageHeld(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beneficially: float=None, jointly: float=None, non_beneficially: float=None, total: float=None):
        """BeneficialOwnerObjectPercentageHeld - a model defined in OpenAPI

        :param beneficially: The beneficially of this BeneficialOwnerObjectPercentageHeld.
        :param jointly: The jointly of this BeneficialOwnerObjectPercentageHeld.
        :param non_beneficially: The non_beneficially of this BeneficialOwnerObjectPercentageHeld.
        :param total: The total of this BeneficialOwnerObjectPercentageHeld.
        """
        self.openapi_types = {
            'beneficially': float,
            'jointly': float,
            'non_beneficially': float,
            'total': float
        }

        self.attribute_map = {
            'beneficially': 'beneficially',
            'jointly': 'jointly',
            'non_beneficially': 'nonBeneficially',
            'total': 'total'
        }

        self._beneficially = beneficially
        self._jointly = jointly
        self._non_beneficially = non_beneficially
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeneficialOwnerObjectPercentageHeld':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeneficialOwnerObject_percentageHeld of this BeneficialOwnerObjectPercentageHeld.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beneficially(self):
        """Gets the beneficially of this BeneficialOwnerObjectPercentageHeld.


        :return: The beneficially of this BeneficialOwnerObjectPercentageHeld.
        :rtype: float
        """
        return self._beneficially

    @beneficially.setter
    def beneficially(self, beneficially):
        """Sets the beneficially of this BeneficialOwnerObjectPercentageHeld.


        :param beneficially: The beneficially of this BeneficialOwnerObjectPercentageHeld.
        :type beneficially: float
        """

        self._beneficially = beneficially

    @property
    def jointly(self):
        """Gets the jointly of this BeneficialOwnerObjectPercentageHeld.


        :return: The jointly of this BeneficialOwnerObjectPercentageHeld.
        :rtype: float
        """
        return self._jointly

    @jointly.setter
    def jointly(self, jointly):
        """Sets the jointly of this BeneficialOwnerObjectPercentageHeld.


        :param jointly: The jointly of this BeneficialOwnerObjectPercentageHeld.
        :type jointly: float
        """

        self._jointly = jointly

    @property
    def non_beneficially(self):
        """Gets the non_beneficially of this BeneficialOwnerObjectPercentageHeld.


        :return: The non_beneficially of this BeneficialOwnerObjectPercentageHeld.
        :rtype: float
        """
        return self._non_beneficially

    @non_beneficially.setter
    def non_beneficially(self, non_beneficially):
        """Sets the non_beneficially of this BeneficialOwnerObjectPercentageHeld.


        :param non_beneficially: The non_beneficially of this BeneficialOwnerObjectPercentageHeld.
        :type non_beneficially: float
        """

        self._non_beneficially = non_beneficially

    @property
    def total(self):
        """Gets the total of this BeneficialOwnerObjectPercentageHeld.


        :return: The total of this BeneficialOwnerObjectPercentageHeld.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BeneficialOwnerObjectPercentageHeld.


        :param total: The total of this BeneficialOwnerObjectPercentageHeld.
        :type total: float
        """

        self._total = total
