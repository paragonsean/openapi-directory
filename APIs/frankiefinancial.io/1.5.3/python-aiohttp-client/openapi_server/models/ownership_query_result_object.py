# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_object import EntityObject
from openapi_server.models.ownership_details_object import OwnershipDetailsObject
from openapi_server import util


class OwnershipQueryResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_entities: Dict[str, EntityObject]=None, blocking_entity_ids: List[str]=None, entity_id: str=None, ownership_details: Dict[str, OwnershipDetailsObject]=None):
        """OwnershipQueryResultObject - a model defined in OpenAPI

        :param associated_entities: The associated_entities of this OwnershipQueryResultObject.
        :param blocking_entity_ids: The blocking_entity_ids of this OwnershipQueryResultObject.
        :param entity_id: The entity_id of this OwnershipQueryResultObject.
        :param ownership_details: The ownership_details of this OwnershipQueryResultObject.
        """
        self.openapi_types = {
            'associated_entities': Dict[str, EntityObject],
            'blocking_entity_ids': List[str],
            'entity_id': str,
            'ownership_details': Dict[str, OwnershipDetailsObject]
        }

        self.attribute_map = {
            'associated_entities': 'associatedEntities',
            'blocking_entity_ids': 'blockingEntityIds',
            'entity_id': 'entityId',
            'ownership_details': 'ownershipDetails'
        }

        self._associated_entities = associated_entities
        self._blocking_entity_ids = blocking_entity_ids
        self._entity_id = entity_id
        self._ownership_details = ownership_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnershipQueryResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnershipQueryResultObject of this OwnershipQueryResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_entities(self):
        """Gets the associated_entities of this OwnershipQueryResultObject.

        List of all entities (both individuals and organisations) associated with this ownership result. These objects will be referenced by entityId in the shareholdings and officers lists in the following ownership details. 

        :return: The associated_entities of this OwnershipQueryResultObject.
        :rtype: Dict[str, EntityObject]
        """
        return self._associated_entities

    @associated_entities.setter
    def associated_entities(self, associated_entities):
        """Sets the associated_entities of this OwnershipQueryResultObject.

        List of all entities (both individuals and organisations) associated with this ownership result. These objects will be referenced by entityId in the shareholdings and officers lists in the following ownership details. 

        :param associated_entities: The associated_entities of this OwnershipQueryResultObject.
        :type associated_entities: Dict[str, EntityObject]
        """

        self._associated_entities = associated_entities

    @property
    def blocking_entity_ids(self):
        """Gets the blocking_entity_ids of this OwnershipQueryResultObject.

        List of entity IDs (that should be in the associatedEntities list) who blocked the ultimate beneficial ownership tree traversal. These are likely to be entities that cannot be checked automatically (such as trusts) or who have no UBO's of their own, such as public companies.  The presence of data in this array also signifies that the full UBO list is not complete. 

        :return: The blocking_entity_ids of this OwnershipQueryResultObject.
        :rtype: List[str]
        """
        return self._blocking_entity_ids

    @blocking_entity_ids.setter
    def blocking_entity_ids(self, blocking_entity_ids):
        """Sets the blocking_entity_ids of this OwnershipQueryResultObject.

        List of entity IDs (that should be in the associatedEntities list) who blocked the ultimate beneficial ownership tree traversal. These are likely to be entities that cannot be checked automatically (such as trusts) or who have no UBO's of their own, such as public companies.  The presence of data in this array also signifies that the full UBO list is not complete. 

        :param blocking_entity_ids: The blocking_entity_ids of this OwnershipQueryResultObject.
        :type blocking_entity_ids: List[str]
        """

        self._blocking_entity_ids = blocking_entity_ids

    @property
    def entity_id(self):
        """Gets the entity_id of this OwnershipQueryResultObject.

        The entityId of the organisation for which this result was created. The details will be in the ownershipDetails map with this ID as the key. 

        :return: The entity_id of this OwnershipQueryResultObject.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this OwnershipQueryResultObject.

        The entityId of the organisation for which this result was created. The details will be in the ownershipDetails map with this ID as the key. 

        :param entity_id: The entity_id of this OwnershipQueryResultObject.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def ownership_details(self):
        """Gets the ownership_details of this OwnershipQueryResultObject.

        A map of entityId to ownershipDetailsObjects with at least one entry being for the root organisation that the overall result relates to. Any remaining entries will be for further results for organisational owners referenced in the root ownershipDetailsObject and so on. 

        :return: The ownership_details of this OwnershipQueryResultObject.
        :rtype: Dict[str, OwnershipDetailsObject]
        """
        return self._ownership_details

    @ownership_details.setter
    def ownership_details(self, ownership_details):
        """Sets the ownership_details of this OwnershipQueryResultObject.

        A map of entityId to ownershipDetailsObjects with at least one entry being for the root organisation that the overall result relates to. Any remaining entries will be for further results for organisational owners referenced in the root ownershipDetailsObject and so on. 

        :param ownership_details: The ownership_details of this OwnershipQueryResultObject.
        :type ownership_details: Dict[str, OwnershipDetailsObject]
        """

        self._ownership_details = ownership_details
