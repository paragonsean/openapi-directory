# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuppliedData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abn: str=None, acn: str=None, company_type: str=None, customer_reference: str=None, name: str=None):
        """SuppliedData - a model defined in OpenAPI

        :param abn: The abn of this SuppliedData.
        :param acn: The acn of this SuppliedData.
        :param company_type: The company_type of this SuppliedData.
        :param customer_reference: The customer_reference of this SuppliedData.
        :param name: The name of this SuppliedData.
        """
        self.openapi_types = {
            'abn': str,
            'acn': str,
            'company_type': str,
            'customer_reference': str,
            'name': str
        }

        self.attribute_map = {
            'abn': 'abn',
            'acn': 'acn',
            'company_type': 'company_type',
            'customer_reference': 'customer_reference',
            'name': 'name'
        }

        self._abn = abn
        self._acn = acn
        self._company_type = company_type
        self._customer_reference = customer_reference
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuppliedData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuppliedData of this SuppliedData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abn(self):
        """Gets the abn of this SuppliedData.

        Australian Business Number - MUST be 11 digits. Can be supplied in lieu of the ACN 

        :return: The abn of this SuppliedData.
        :rtype: str
        """
        return self._abn

    @abn.setter
    def abn(self, abn):
        """Sets the abn of this SuppliedData.

        Australian Business Number - MUST be 11 digits. Can be supplied in lieu of the ACN 

        :param abn: The abn of this SuppliedData.
        :type abn: str
        """
        if abn is None:
            raise ValueError("Invalid value for `abn`, must not be `None`")

        self._abn = abn

    @property
    def acn(self):
        """Gets the acn of this SuppliedData.

        Australian Company Number on file - MUST be zero left-padded to 9 digits 

        :return: The acn of this SuppliedData.
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this SuppliedData.

        Australian Company Number on file - MUST be zero left-padded to 9 digits 

        :param acn: The acn of this SuppliedData.
        :type acn: str
        """
        if acn is None:
            raise ValueError("Invalid value for `acn`, must not be `None`")

        self._acn = acn

    @property
    def company_type(self):
        """Gets the company_type of this SuppliedData.

        The type of company on file. Use the ABR's company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 

        :return: The company_type of this SuppliedData.
        :rtype: str
        """
        return self._company_type

    @company_type.setter
    def company_type(self, company_type):
        """Sets the company_type of this SuppliedData.

        The type of company on file. Use the ABR's company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 

        :param company_type: The company_type of this SuppliedData.
        :type company_type: str
        """
        allowed_values = ["PRV", "PUB"]  # noqa: E501
        if company_type not in allowed_values:
            raise ValueError(
                "Invalid value for `company_type` ({0}), must be one of {1}"
                .format(company_type, allowed_values)
            )

        self._company_type = company_type

    @property
    def customer_reference(self):
        """Gets the customer_reference of this SuppliedData.

        Your reference number for this company

        :return: The customer_reference of this SuppliedData.
        :rtype: str
        """
        return self._customer_reference

    @customer_reference.setter
    def customer_reference(self, customer_reference):
        """Sets the customer_reference of this SuppliedData.

        Your reference number for this company

        :param customer_reference: The customer_reference of this SuppliedData.
        :type customer_reference: str
        """
        if customer_reference is None:
            raise ValueError("Invalid value for `customer_reference`, must not be `None`")

        self._customer_reference = customer_reference

    @property
    def name(self):
        """Gets the name of this SuppliedData.

        The name of the company to be verified 

        :return: The name of this SuppliedData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuppliedData.

        The name of the company to be verified 

        :param name: The name of this SuppliedData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
