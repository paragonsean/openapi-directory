# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StockExchangeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_exchange: bool=None, exchange: str=None, exchange_ticker: str=None, supporting_document_links: List[str]=None, supporting_evidence_in_pdf: bool=None):
        """StockExchangeData - a model defined in OpenAPI

        :param approved_exchange: The approved_exchange of this StockExchangeData.
        :param exchange: The exchange of this StockExchangeData.
        :param exchange_ticker: The exchange_ticker of this StockExchangeData.
        :param supporting_document_links: The supporting_document_links of this StockExchangeData.
        :param supporting_evidence_in_pdf: The supporting_evidence_in_pdf of this StockExchangeData.
        """
        self.openapi_types = {
            'approved_exchange': bool,
            'exchange': str,
            'exchange_ticker': str,
            'supporting_document_links': List[str],
            'supporting_evidence_in_pdf': bool
        }

        self.attribute_map = {
            'approved_exchange': 'approved_exchange',
            'exchange': 'exchange',
            'exchange_ticker': 'exchange_ticker',
            'supporting_document_links': 'supporting_document_links',
            'supporting_evidence_in_pdf': 'supporting_evidence_in_pdf'
        }

        self._approved_exchange = approved_exchange
        self._exchange = exchange
        self._exchange_ticker = exchange_ticker
        self._supporting_document_links = supporting_document_links
        self._supporting_evidence_in_pdf = supporting_evidence_in_pdf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StockExchangeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StockExchangeData of this StockExchangeData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_exchange(self):
        """Gets the approved_exchange of this StockExchangeData.


        :return: The approved_exchange of this StockExchangeData.
        :rtype: bool
        """
        return self._approved_exchange

    @approved_exchange.setter
    def approved_exchange(self, approved_exchange):
        """Sets the approved_exchange of this StockExchangeData.


        :param approved_exchange: The approved_exchange of this StockExchangeData.
        :type approved_exchange: bool
        """

        self._approved_exchange = approved_exchange

    @property
    def exchange(self):
        """Gets the exchange of this StockExchangeData.


        :return: The exchange of this StockExchangeData.
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this StockExchangeData.


        :param exchange: The exchange of this StockExchangeData.
        :type exchange: str
        """

        self._exchange = exchange

    @property
    def exchange_ticker(self):
        """Gets the exchange_ticker of this StockExchangeData.


        :return: The exchange_ticker of this StockExchangeData.
        :rtype: str
        """
        return self._exchange_ticker

    @exchange_ticker.setter
    def exchange_ticker(self, exchange_ticker):
        """Sets the exchange_ticker of this StockExchangeData.


        :param exchange_ticker: The exchange_ticker of this StockExchangeData.
        :type exchange_ticker: str
        """

        self._exchange_ticker = exchange_ticker

    @property
    def supporting_document_links(self):
        """Gets the supporting_document_links of this StockExchangeData.


        :return: The supporting_document_links of this StockExchangeData.
        :rtype: List[str]
        """
        return self._supporting_document_links

    @supporting_document_links.setter
    def supporting_document_links(self, supporting_document_links):
        """Sets the supporting_document_links of this StockExchangeData.


        :param supporting_document_links: The supporting_document_links of this StockExchangeData.
        :type supporting_document_links: List[str]
        """

        self._supporting_document_links = supporting_document_links

    @property
    def supporting_evidence_in_pdf(self):
        """Gets the supporting_evidence_in_pdf of this StockExchangeData.


        :return: The supporting_evidence_in_pdf of this StockExchangeData.
        :rtype: bool
        """
        return self._supporting_evidence_in_pdf

    @supporting_evidence_in_pdf.setter
    def supporting_evidence_in_pdf(self, supporting_evidence_in_pdf):
        """Sets the supporting_evidence_in_pdf of this StockExchangeData.


        :param supporting_evidence_in_pdf: The supporting_evidence_in_pdf of this StockExchangeData.
        :type supporting_evidence_in_pdf: bool
        """

        self._supporting_evidence_in_pdf = supporting_evidence_in_pdf
