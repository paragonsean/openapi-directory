# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_search_result_confidence import EnumSearchResultConfidence
from openapi_server import util


class SearchResultConfidenceObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, level: EnumSearchResultConfidence=None, notes: List[str]=None, score: int=None):
        """SearchResultConfidenceObject - a model defined in OpenAPI

        :param level: The level of this SearchResultConfidenceObject.
        :param notes: The notes of this SearchResultConfidenceObject.
        :param score: The score of this SearchResultConfidenceObject.
        """
        self.openapi_types = {
            'level': EnumSearchResultConfidence,
            'notes': List[str],
            'score': int
        }

        self.attribute_map = {
            'level': 'level',
            'notes': 'notes',
            'score': 'score'
        }

        self._level = level
        self._notes = notes
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResultConfidenceObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResultConfidenceObject of this SearchResultConfidenceObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self):
        """Gets the level of this SearchResultConfidenceObject.


        :return: The level of this SearchResultConfidenceObject.
        :rtype: EnumSearchResultConfidence
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SearchResultConfidenceObject.


        :param level: The level of this SearchResultConfidenceObject.
        :type level: EnumSearchResultConfidence
        """

        self._level = level

    @property
    def notes(self):
        """Gets the notes of this SearchResultConfidenceObject.

        Free-form list of descriptions around any partial matches 

        :return: The notes of this SearchResultConfidenceObject.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SearchResultConfidenceObject.

        Free-form list of descriptions around any partial matches 

        :param notes: The notes of this SearchResultConfidenceObject.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def score(self):
        """Gets the score of this SearchResultConfidenceObject.

        Numeric score on a scale of 0 (none) to 100 (as certain as possible) on which the confidence level is based. Whole integers only.

        :return: The score of this SearchResultConfidenceObject.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SearchResultConfidenceObject.

        Numeric score on a scale of 0 (none) to 100 (as certain as possible) on which the confidence level is based. Whole integers only.

        :param score: The score of this SearchResultConfidenceObject.
        :type score: int
        """
        if score is not None and score > 100:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `100`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score
