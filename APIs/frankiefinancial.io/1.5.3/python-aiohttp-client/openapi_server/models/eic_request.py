# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eic_details import EICDetails
from openapi_server import util


class EICRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id: str=None, details: EICDetails=None, plan_id: str=None):
        """EICRequest - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this EICRequest.
        :param details: The details of this EICRequest.
        :param plan_id: The plan_id of this EICRequest.
        """
        self.openapi_types = {
            'correlation_id': str,
            'details': EICDetails,
            'plan_id': str
        }

        self.attribute_map = {
            'correlation_id': 'correlationId',
            'details': 'details',
            'plan_id': 'planId'
        }

        self._correlation_id = correlation_id
        self._details = details
        self._plan_id = plan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EICRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EICRequest of this EICRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this EICRequest.

        Correlation ID as passed to comparison request

        :return: The correlation_id of this EICRequest.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this EICRequest.

        Correlation ID as passed to comparison request

        :param correlation_id: The correlation_id of this EICRequest.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def details(self):
        """Gets the details of this EICRequest.


        :return: The details of this EICRequest.
        :rtype: EICDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EICRequest.


        :param details: The details of this EICRequest.
        :type details: EICDetails
        """

        self._details = details

    @property
    def plan_id(self):
        """Gets the plan_id of this EICRequest.

        Unique ID of plan, selected from comparison results

        :return: The plan_id of this EICRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this EICRequest.

        Unique ID of plan, selected from comparison results

        :param plan_id: The plan_id of this EICRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id
