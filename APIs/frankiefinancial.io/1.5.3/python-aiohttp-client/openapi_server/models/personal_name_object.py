# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalNameObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, family_name: str=None, given_name: str=None, honourific: str=None, middle_name: str=None):
        """PersonalNameObject - a model defined in OpenAPI

        :param display_name: The display_name of this PersonalNameObject.
        :param family_name: The family_name of this PersonalNameObject.
        :param given_name: The given_name of this PersonalNameObject.
        :param honourific: The honourific of this PersonalNameObject.
        :param middle_name: The middle_name of this PersonalNameObject.
        """
        self.openapi_types = {
            'display_name': str,
            'family_name': str,
            'given_name': str,
            'honourific': str,
            'middle_name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'family_name': 'familyName',
            'given_name': 'givenName',
            'honourific': 'honourific',
            'middle_name': 'middleName'
        }

        self._display_name = display_name
        self._family_name = family_name
        self._given_name = given_name
        self._honourific = honourific
        self._middle_name = middle_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalNameObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalNameObject of this PersonalNameObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this PersonalNameObject.

        In some cases, the name will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible. 

        :return: The display_name of this PersonalNameObject.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PersonalNameObject.

        In some cases, the name will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible. 

        :param display_name: The display_name of this PersonalNameObject.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def family_name(self):
        """Gets the family_name of this PersonalNameObject.

        Family name / Surname of the individual.

        :return: The family_name of this PersonalNameObject.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this PersonalNameObject.

        Family name / Surname of the individual.

        :param family_name: The family_name of this PersonalNameObject.
        :type family_name: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this PersonalNameObject.

        First / Given name

        :return: The given_name of this PersonalNameObject.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this PersonalNameObject.

        First / Given name

        :param given_name: The given_name of this PersonalNameObject.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def honourific(self):
        """Gets the honourific of this PersonalNameObject.

        Mr/Ms/Dr/Dame/Dato/etc.

        :return: The honourific of this PersonalNameObject.
        :rtype: str
        """
        return self._honourific

    @honourific.setter
    def honourific(self, honourific):
        """Sets the honourific of this PersonalNameObject.

        Mr/Ms/Dr/Dame/Dato/etc.

        :param honourific: The honourific of this PersonalNameObject.
        :type honourific: str
        """

        self._honourific = honourific

    @property
    def middle_name(self):
        """Gets the middle_name of this PersonalNameObject.

        Middle name(s) / Initials

        :return: The middle_name of this PersonalNameObject.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this PersonalNameObject.

        Middle name(s) / Initials

        :param middle_name: The middle_name of this PersonalNameObject.
        :type middle_name: str
        """

        self._middle_name = middle_name
