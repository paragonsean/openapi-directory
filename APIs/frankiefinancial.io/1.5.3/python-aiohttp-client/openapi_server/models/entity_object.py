# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_object import AddressObject
from openapi_server.models.dob_object import DOBObject
from openapi_server.models.entity_flag_object import EntityFlagObject
from openapi_server.models.enum_entity_type import EnumEntityType
from openapi_server.models.enum_gender import EnumGender
from openapi_server.models.identity_document_object import IdentityDocumentObject
from openapi_server.models.key_value_pair_object import KeyValuePairObject
from openapi_server.models.organisation_data_object import OrganisationDataObject
from openapi_server.models.personal_name_object import PersonalNameObject
from openapi_server import util


class EntityObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[AddressObject]=None, date_of_birth: DOBObject=None, entity_id: str=None, entity_profile: str=None, entity_type: EnumEntityType=None, extra_data: List[KeyValuePairObject]=None, flags: List[EntityFlagObject]=None, gender: EnumGender=None, identity_docs: List[IdentityDocumentObject]=None, name: PersonalNameObject=None, organisation_data: OrganisationDataObject=None):
        """EntityObject - a model defined in OpenAPI

        :param addresses: The addresses of this EntityObject.
        :param date_of_birth: The date_of_birth of this EntityObject.
        :param entity_id: The entity_id of this EntityObject.
        :param entity_profile: The entity_profile of this EntityObject.
        :param entity_type: The entity_type of this EntityObject.
        :param extra_data: The extra_data of this EntityObject.
        :param flags: The flags of this EntityObject.
        :param gender: The gender of this EntityObject.
        :param identity_docs: The identity_docs of this EntityObject.
        :param name: The name of this EntityObject.
        :param organisation_data: The organisation_data of this EntityObject.
        """
        self.openapi_types = {
            'addresses': List[AddressObject],
            'date_of_birth': DOBObject,
            'entity_id': str,
            'entity_profile': str,
            'entity_type': EnumEntityType,
            'extra_data': List[KeyValuePairObject],
            'flags': List[EntityFlagObject],
            'gender': EnumGender,
            'identity_docs': List[IdentityDocumentObject],
            'name': PersonalNameObject,
            'organisation_data': OrganisationDataObject
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'date_of_birth': 'dateOfBirth',
            'entity_id': 'entityId',
            'entity_profile': 'entityProfile',
            'entity_type': 'entityType',
            'extra_data': 'extraData',
            'flags': 'flags',
            'gender': 'gender',
            'identity_docs': 'identityDocs',
            'name': 'name',
            'organisation_data': 'organisationData'
        }

        self._addresses = addresses
        self._date_of_birth = date_of_birth
        self._entity_id = entity_id
        self._entity_profile = entity_profile
        self._entity_type = entity_type
        self._extra_data = extra_data
        self._flags = flags
        self._gender = gender
        self._identity_docs = identity_docs
        self._name = name
        self._organisation_data = organisation_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityObject of this EntityObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this EntityObject.

        Collection of address objects.

        :return: The addresses of this EntityObject.
        :rtype: List[AddressObject]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this EntityObject.

        Collection of address objects.

        :param addresses: The addresses of this EntityObject.
        :type addresses: List[AddressObject]
        """

        self._addresses = addresses

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this EntityObject.


        :return: The date_of_birth of this EntityObject.
        :rtype: DOBObject
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this EntityObject.


        :param date_of_birth: The date_of_birth of this EntityObject.
        :type date_of_birth: DOBObject
        """

        self._date_of_birth = date_of_birth

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityObject.

        When an entity is first created, it is assigned an ID. When updating an entity, make sure you set the entityId One exception to this is when an entity is created from a document object. It is expected that this object would be passed into a /check or /entity call to set it. 

        :return: The entity_id of this EntityObject.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityObject.

        When an entity is first created, it is assigned an ID. When updating an entity, make sure you set the entityId One exception to this is when an entity is created from a document object. It is expected that this object would be passed into a /check or /entity call to set it. 

        :param entity_id: The entity_id of this EntityObject.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_profile(self):
        """Gets the entity_profile of this EntityObject.

        If the entity is using the new profiles feature, then their profile name will be found here.  Note: If setting a profile, you must ensure that the profile matches a known configuration.  Please contact Frankie developer support if you're unsure as to what valid values are. 

        :return: The entity_profile of this EntityObject.
        :rtype: str
        """
        return self._entity_profile

    @entity_profile.setter
    def entity_profile(self, entity_profile):
        """Sets the entity_profile of this EntityObject.

        If the entity is using the new profiles feature, then their profile name will be found here.  Note: If setting a profile, you must ensure that the profile matches a known configuration.  Please contact Frankie developer support if you're unsure as to what valid values are. 

        :param entity_profile: The entity_profile of this EntityObject.
        :type entity_profile: str
        """

        self._entity_profile = entity_profile

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityObject.


        :return: The entity_type of this EntityObject.
        :rtype: EnumEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityObject.


        :param entity_type: The entity_type of this EntityObject.
        :type entity_type: EnumEntityType
        """

        self._entity_type = entity_type

    @property
    def extra_data(self):
        """Gets the extra_data of this EntityObject.

        Set of key-value pairs that provide arbitrary additional type-specific data. You can use these fields to store external IDs, or other non-identity related items if you need to. If updating an existing entity, then existing values with the same name will be overwritten. New values will be added.  See here for more information about possible values you can use:   https://apidocs.frankiefinancial.com/docs/entity-extradata-key-value-pairs 

        :return: The extra_data of this EntityObject.
        :rtype: List[KeyValuePairObject]
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this EntityObject.

        Set of key-value pairs that provide arbitrary additional type-specific data. You can use these fields to store external IDs, or other non-identity related items if you need to. If updating an existing entity, then existing values with the same name will be overwritten. New values will be added.  See here for more information about possible values you can use:   https://apidocs.frankiefinancial.com/docs/entity-extradata-key-value-pairs 

        :param extra_data: The extra_data of this EntityObject.
        :type extra_data: List[KeyValuePairObject]
        """

        self._extra_data = extra_data

    @property
    def flags(self):
        """Gets the flags of this EntityObject.

        Used to set additional information flags with regards to this entity and for ongoing processing.  Flags might include having the entity (not) participate in regular pep/sanctions screening Others will follow over time. 

        :return: The flags of this EntityObject.
        :rtype: List[EntityFlagObject]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this EntityObject.

        Used to set additional information flags with regards to this entity and for ongoing processing.  Flags might include having the entity (not) participate in regular pep/sanctions screening Others will follow over time. 

        :param flags: The flags of this EntityObject.
        :type flags: List[EntityFlagObject]
        """

        self._flags = flags

    @property
    def gender(self):
        """Gets the gender of this EntityObject.


        :return: The gender of this EntityObject.
        :rtype: EnumGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this EntityObject.


        :param gender: The gender of this EntityObject.
        :type gender: EnumGender
        """

        self._gender = gender

    @property
    def identity_docs(self):
        """Gets the identity_docs of this EntityObject.

        Collection of identity documents (photos, scans, selfies, etc)

        :return: The identity_docs of this EntityObject.
        :rtype: List[IdentityDocumentObject]
        """
        return self._identity_docs

    @identity_docs.setter
    def identity_docs(self, identity_docs):
        """Sets the identity_docs of this EntityObject.

        Collection of identity documents (photos, scans, selfies, etc)

        :param identity_docs: The identity_docs of this EntityObject.
        :type identity_docs: List[IdentityDocumentObject]
        """

        self._identity_docs = identity_docs

    @property
    def name(self):
        """Gets the name of this EntityObject.


        :return: The name of this EntityObject.
        :rtype: PersonalNameObject
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityObject.


        :param name: The name of this EntityObject.
        :type name: PersonalNameObject
        """

        self._name = name

    @property
    def organisation_data(self):
        """Gets the organisation_data of this EntityObject.


        :return: The organisation_data of this EntityObject.
        :rtype: OrganisationDataObject
        """
        return self._organisation_data

    @organisation_data.setter
    def organisation_data(self, organisation_data):
        """Sets the organisation_data of this EntityObject.


        :param organisation_data: The organisation_data of this EntityObject.
        :type organisation_data: OrganisationDataObject
        """

        self._organisation_data = organisation_data
