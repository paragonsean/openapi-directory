# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_check_result_state import EnumCheckResultState
from openapi_server.models.key_value_pair_object import KeyValuePairObject
from openapi_server import util


class ProcessResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_date: datetime=None, check_id: str=None, check_performed_by: str=None, check_source: str=None, check_type: str=None, confidence_level: int=None, provider_check_id: str=None, result_notes: List[KeyValuePairObject]=None, result_state: EnumCheckResultState=None, risk_level: int=None):
        """ProcessResultObject - a model defined in OpenAPI

        :param check_date: The check_date of this ProcessResultObject.
        :param check_id: The check_id of this ProcessResultObject.
        :param check_performed_by: The check_performed_by of this ProcessResultObject.
        :param check_source: The check_source of this ProcessResultObject.
        :param check_type: The check_type of this ProcessResultObject.
        :param confidence_level: The confidence_level of this ProcessResultObject.
        :param provider_check_id: The provider_check_id of this ProcessResultObject.
        :param result_notes: The result_notes of this ProcessResultObject.
        :param result_state: The result_state of this ProcessResultObject.
        :param risk_level: The risk_level of this ProcessResultObject.
        """
        self.openapi_types = {
            'check_date': datetime,
            'check_id': str,
            'check_performed_by': str,
            'check_source': str,
            'check_type': str,
            'confidence_level': int,
            'provider_check_id': str,
            'result_notes': List[KeyValuePairObject],
            'result_state': EnumCheckResultState,
            'risk_level': int
        }

        self.attribute_map = {
            'check_date': 'checkDate',
            'check_id': 'checkId',
            'check_performed_by': 'checkPerformedBy',
            'check_source': 'checkSource',
            'check_type': 'checkType',
            'confidence_level': 'confidenceLevel',
            'provider_check_id': 'providerCheckID',
            'result_notes': 'resultNotes',
            'result_state': 'resultState',
            'risk_level': 'riskLevel'
        }

        self._check_date = check_date
        self._check_id = check_id
        self._check_performed_by = check_performed_by
        self._check_source = check_source
        self._check_type = check_type
        self._confidence_level = confidence_level
        self._provider_check_id = provider_check_id
        self._result_notes = result_notes
        self._result_state = result_state
        self._risk_level = risk_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessResultObject of this ProcessResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_date(self):
        """Gets the check_date of this ProcessResultObject.

        The date and time the item was checked to provide this result.

        :return: The check_date of this ProcessResultObject.
        :rtype: datetime
        """
        return self._check_date

    @check_date.setter
    def check_date(self, check_date):
        """Sets the check_date of this ProcessResultObject.

        The date and time the item was checked to provide this result.

        :param check_date: The check_date of this ProcessResultObject.
        :type check_date: datetime
        """

        self._check_date = check_date

    @property
    def check_id(self):
        """Gets the check_id of this ProcessResultObject.

        Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.

        :return: The check_id of this ProcessResultObject.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this ProcessResultObject.

        Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.

        :param check_id: The check_id of this ProcessResultObject.
        :type check_id: str
        """

        self._check_id = check_id

    @property
    def check_performed_by(self):
        """Gets the check_performed_by of this ProcessResultObject.

        Service provider that performed the check. Basically the name of the connector, without the leading con_ 

        :return: The check_performed_by of this ProcessResultObject.
        :rtype: str
        """
        return self._check_performed_by

    @check_performed_by.setter
    def check_performed_by(self, check_performed_by):
        """Sets the check_performed_by of this ProcessResultObject.

        Service provider that performed the check. Basically the name of the connector, without the leading con_ 

        :param check_performed_by: The check_performed_by of this ProcessResultObject.
        :type check_performed_by: str
        """

        self._check_performed_by = check_performed_by

    @property
    def check_source(self):
        """Gets the check_source of this ProcessResultObject.

        Code that can be used to determine the underlying nature or data source of the checks performed. This may or may not be known by the connector, or may be a provider specific type (e.g. type \"O\")  Note, this will actually be normalised by the core service into a standfardised result so that we're not accidentally counting sources twice. Original source will then be copied into the KVPs 

        :return: The check_source of this ProcessResultObject.
        :rtype: str
        """
        return self._check_source

    @check_source.setter
    def check_source(self, check_source):
        """Sets the check_source of this ProcessResultObject.

        Code that can be used to determine the underlying nature or data source of the checks performed. This may or may not be known by the connector, or may be a provider specific type (e.g. type \"O\")  Note, this will actually be normalised by the core service into a standfardised result so that we're not accidentally counting sources twice. Original source will then be copied into the KVPs 

        :param check_source: The check_source of this ProcessResultObject.
        :type check_source: str
        """

        self._check_source = check_source

    @property
    def check_type(self):
        """Gets the check_type of this ProcessResultObject.

        Short indication of the type of check that was done.   When used as a summary, it will the the checkType that was requested  For granular results, it will be the individual check performed. 

        :return: The check_type of this ProcessResultObject.
        :rtype: str
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this ProcessResultObject.

        Short indication of the type of check that was done.   When used as a summary, it will the the checkType that was requested  For granular results, it will be the individual check performed. 

        :param check_type: The check_type of this ProcessResultObject.
        :type check_type: str
        """

        self._check_type = check_type

    @property
    def confidence_level(self):
        """Gets the confidence_level of this ProcessResultObject.

        Confidence in the result on a scale of 0 (no match) to 100 (strong/identical match). Whole integers only.  Negative values are used to indicate untrusted results. 

        :return: The confidence_level of this ProcessResultObject.
        :rtype: int
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """Sets the confidence_level of this ProcessResultObject.

        Confidence in the result on a scale of 0 (no match) to 100 (strong/identical match). Whole integers only.  Negative values are used to indicate untrusted results. 

        :param confidence_level: The confidence_level of this ProcessResultObject.
        :type confidence_level: int
        """
        if confidence_level is not None and confidence_level > 100:
            raise ValueError("Invalid value for `confidence_level`, must be a value less than or equal to `100`")
        if confidence_level is not None and confidence_level < -100:
            raise ValueError("Invalid value for `confidence_level`, must be a value greater than or equal to `-100`")

        self._confidence_level = confidence_level

    @property
    def provider_check_id(self):
        """Gets the provider_check_id of this ProcessResultObject.

        The service provider will give us a receipt, transaction id, check number, or some such that gives us a unique id on their side that we can reconcile with 

        :return: The provider_check_id of this ProcessResultObject.
        :rtype: str
        """
        return self._provider_check_id

    @provider_check_id.setter
    def provider_check_id(self, provider_check_id):
        """Sets the provider_check_id of this ProcessResultObject.

        The service provider will give us a receipt, transaction id, check number, or some such that gives us a unique id on their side that we can reconcile with 

        :param provider_check_id: The provider_check_id of this ProcessResultObject.
        :type provider_check_id: str
        """

        self._provider_check_id = provider_check_id

    @property
    def result_notes(self):
        """Gets the result_notes of this ProcessResultObject.

        Any additional notes that may relate to the state. These are returned as typed KVPs

        :return: The result_notes of this ProcessResultObject.
        :rtype: List[KeyValuePairObject]
        """
        return self._result_notes

    @result_notes.setter
    def result_notes(self, result_notes):
        """Sets the result_notes of this ProcessResultObject.

        Any additional notes that may relate to the state. These are returned as typed KVPs

        :param result_notes: The result_notes of this ProcessResultObject.
        :type result_notes: List[KeyValuePairObject]
        """

        self._result_notes = result_notes

    @property
    def result_state(self):
        """Gets the result_state of this ProcessResultObject.


        :return: The result_state of this ProcessResultObject.
        :rtype: EnumCheckResultState
        """
        return self._result_state

    @result_state.setter
    def result_state(self, result_state):
        """Sets the result_state of this ProcessResultObject.


        :param result_state: The result_state of this ProcessResultObject.
        :type result_state: EnumCheckResultState
        """

        self._result_state = result_state

    @property
    def risk_level(self):
        """Gets the risk_level of this ProcessResultObject.

        Only supplied in a summary result. Used to indicate the ovall risk score for the entity at this point in time, based on configurable rules.  Some examples might include:    * Current level of ID checks passed   * Device ID scores   * Current PEP/Sanctions/etc checks   * Jurisdictional risk based on addresses, documents and other KVPs   * Fraud check results    In this case a higher score is a bad thing. General rule of thumb:    * 0 - 30 = Low Risk   * 31 - 50 = Medium Risk   * 50 - 75 = High Risk   * 75+ = Unacceptable 

        :return: The risk_level of this ProcessResultObject.
        :rtype: int
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """Sets the risk_level of this ProcessResultObject.

        Only supplied in a summary result. Used to indicate the ovall risk score for the entity at this point in time, based on configurable rules.  Some examples might include:    * Current level of ID checks passed   * Device ID scores   * Current PEP/Sanctions/etc checks   * Jurisdictional risk based on addresses, documents and other KVPs   * Fraud check results    In this case a higher score is a bad thing. General rule of thumb:    * 0 - 30 = Low Risk   * 31 - 50 = Medium Risk   * 50 - 75 = High Risk   * 75+ = Unacceptable 

        :param risk_level: The risk_level of this ProcessResultObject.
        :type risk_level: int
        """
        if risk_level is not None and risk_level > 100:
            raise ValueError("Invalid value for `risk_level`, must be a value less than or equal to `100`")
        if risk_level is not None and risk_level < 0:
            raise ValueError("Invalid value for `risk_level`, must be a value greater than or equal to `0`")

        self._risk_level = risk_level
