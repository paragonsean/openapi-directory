# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_mime_type import EnumMIMEType
from openapi_server.models.enum_scan_data_retrieval_state import EnumScanDataRetrievalState
from openapi_server.models.enum_scan_side import EnumScanSide
from openapi_server.models.enum_scan_type import EnumScanType
import re
from openapi_server import util


class ScannedDocumentObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scan_delete: bool=None, scan_created: datetime=None, scan_data: str=None, scan_data_retrieval_state: EnumScanDataRetrievalState=None, scan_doc_id: str=None, scan_filename: str=None, scan_mime: EnumMIMEType=None, scan_page_num: int=None, scan_side: EnumScanSide=None, scan_type: EnumScanType=None):
        """ScannedDocumentObject - a model defined in OpenAPI

        :param scan_delete: The scan_delete of this ScannedDocumentObject.
        :param scan_created: The scan_created of this ScannedDocumentObject.
        :param scan_data: The scan_data of this ScannedDocumentObject.
        :param scan_data_retrieval_state: The scan_data_retrieval_state of this ScannedDocumentObject.
        :param scan_doc_id: The scan_doc_id of this ScannedDocumentObject.
        :param scan_filename: The scan_filename of this ScannedDocumentObject.
        :param scan_mime: The scan_mime of this ScannedDocumentObject.
        :param scan_page_num: The scan_page_num of this ScannedDocumentObject.
        :param scan_side: The scan_side of this ScannedDocumentObject.
        :param scan_type: The scan_type of this ScannedDocumentObject.
        """
        self.openapi_types = {
            'scan_delete': bool,
            'scan_created': datetime,
            'scan_data': str,
            'scan_data_retrieval_state': EnumScanDataRetrievalState,
            'scan_doc_id': str,
            'scan_filename': str,
            'scan_mime': EnumMIMEType,
            'scan_page_num': int,
            'scan_side': EnumScanSide,
            'scan_type': EnumScanType
        }

        self.attribute_map = {
            'scan_delete': 'ScanDelete',
            'scan_created': 'scanCreated',
            'scan_data': 'scanData',
            'scan_data_retrieval_state': 'scanDataRetrievalState',
            'scan_doc_id': 'scanDocId',
            'scan_filename': 'scanFilename',
            'scan_mime': 'scanMIME',
            'scan_page_num': 'scanPageNum',
            'scan_side': 'scanSide',
            'scan_type': 'scanType'
        }

        self._scan_delete = scan_delete
        self._scan_created = scan_created
        self._scan_data = scan_data
        self._scan_data_retrieval_state = scan_data_retrieval_state
        self._scan_doc_id = scan_doc_id
        self._scan_filename = scan_filename
        self._scan_mime = scan_mime
        self._scan_page_num = scan_page_num
        self._scan_side = scan_side
        self._scan_type = scan_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScannedDocumentObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScannedDocumentObject of this ScannedDocumentObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scan_delete(self):
        """Gets the scan_delete of this ScannedDocumentObject.

        Used as a way of indicating to the service that the original scanned document is not to be kept after it has been processed. We will retain any metadata and the results of processing (where required by regulation or the customer), but the original file uploaded will eventually be remnoved once processing is complete.   If ScanDelete is set to true, any call with /full at the end will still not return the file contents, regardless of whether the file has been deleted yet (the deletion process is a background task that can take a few minutes to occur) 

        :return: The scan_delete of this ScannedDocumentObject.
        :rtype: bool
        """
        return self._scan_delete

    @scan_delete.setter
    def scan_delete(self, scan_delete):
        """Sets the scan_delete of this ScannedDocumentObject.

        Used as a way of indicating to the service that the original scanned document is not to be kept after it has been processed. We will retain any metadata and the results of processing (where required by regulation or the customer), but the original file uploaded will eventually be remnoved once processing is complete.   If ScanDelete is set to true, any call with /full at the end will still not return the file contents, regardless of whether the file has been deleted yet (the deletion process is a background task that can take a few minutes to occur) 

        :param scan_delete: The scan_delete of this ScannedDocumentObject.
        :type scan_delete: bool
        """

        self._scan_delete = scan_delete

    @property
    def scan_created(self):
        """Gets the scan_created of this ScannedDocumentObject.

        The date and time the scan was created. Not the date of the scanned document, which should be in the idIssued attribute of the document that owns this scan. 

        :return: The scan_created of this ScannedDocumentObject.
        :rtype: datetime
        """
        return self._scan_created

    @scan_created.setter
    def scan_created(self, scan_created):
        """Sets the scan_created of this ScannedDocumentObject.

        The date and time the scan was created. Not the date of the scanned document, which should be in the idIssued attribute of the document that owns this scan. 

        :param scan_created: The scan_created of this ScannedDocumentObject.
        :type scan_created: datetime
        """

        self._scan_created = scan_created

    @property
    def scan_data(self):
        """Gets the scan_data of this ScannedDocumentObject.

        Base64 encoded string of a photo or scan of an ID document to be verified. If supplied and of a supported type, the Frankie service will attempt to use OCR tech to extract the data from the scanned doc/image.  In a result message, this field will be left blank, unless the \"full\" action is requested. 

        :return: The scan_data of this ScannedDocumentObject.
        :rtype: str
        """
        return self._scan_data

    @scan_data.setter
    def scan_data(self, scan_data):
        """Sets the scan_data of this ScannedDocumentObject.

        Base64 encoded string of a photo or scan of an ID document to be verified. If supplied and of a supported type, the Frankie service will attempt to use OCR tech to extract the data from the scanned doc/image.  In a result message, this field will be left blank, unless the \"full\" action is requested. 

        :param scan_data: The scan_data of this ScannedDocumentObject.
        :type scan_data: str
        """
        if scan_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', scan_data):
            raise ValueError("Invalid value for `scan_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._scan_data = scan_data

    @property
    def scan_data_retrieval_state(self):
        """Gets the scan_data_retrieval_state of this ScannedDocumentObject.


        :return: The scan_data_retrieval_state of this ScannedDocumentObject.
        :rtype: EnumScanDataRetrievalState
        """
        return self._scan_data_retrieval_state

    @scan_data_retrieval_state.setter
    def scan_data_retrieval_state(self, scan_data_retrieval_state):
        """Sets the scan_data_retrieval_state of this ScannedDocumentObject.


        :param scan_data_retrieval_state: The scan_data_retrieval_state of this ScannedDocumentObject.
        :type scan_data_retrieval_state: EnumScanDataRetrievalState
        """

        self._scan_data_retrieval_state = scan_data_retrieval_state

    @property
    def scan_doc_id(self):
        """Gets the scan_doc_id of this ScannedDocumentObject.

        When an document scan is created/uploaded, it is assigned a scanDocId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 

        :return: The scan_doc_id of this ScannedDocumentObject.
        :rtype: str
        """
        return self._scan_doc_id

    @scan_doc_id.setter
    def scan_doc_id(self, scan_doc_id):
        """Sets the scan_doc_id of this ScannedDocumentObject.

        When an document scan is created/uploaded, it is assigned a scanDocId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 

        :param scan_doc_id: The scan_doc_id of this ScannedDocumentObject.
        :type scan_doc_id: str
        """

        self._scan_doc_id = scan_doc_id

    @property
    def scan_filename(self):
        """Gets the scan_filename of this ScannedDocumentObject.

        If you're uploading a file where it's important to keep the original filename, then you can provide that here. Otherwise the Frankie service will assign an arbitrary name based on the scanDocIdand an extension based on the MIME type 

        :return: The scan_filename of this ScannedDocumentObject.
        :rtype: str
        """
        return self._scan_filename

    @scan_filename.setter
    def scan_filename(self, scan_filename):
        """Sets the scan_filename of this ScannedDocumentObject.

        If you're uploading a file where it's important to keep the original filename, then you can provide that here. Otherwise the Frankie service will assign an arbitrary name based on the scanDocIdand an extension based on the MIME type 

        :param scan_filename: The scan_filename of this ScannedDocumentObject.
        :type scan_filename: str
        """

        self._scan_filename = scan_filename

    @property
    def scan_mime(self):
        """Gets the scan_mime of this ScannedDocumentObject.


        :return: The scan_mime of this ScannedDocumentObject.
        :rtype: EnumMIMEType
        """
        return self._scan_mime

    @scan_mime.setter
    def scan_mime(self, scan_mime):
        """Sets the scan_mime of this ScannedDocumentObject.


        :param scan_mime: The scan_mime of this ScannedDocumentObject.
        :type scan_mime: EnumMIMEType
        """

        self._scan_mime = scan_mime

    @property
    def scan_page_num(self):
        """Gets the scan_page_num of this ScannedDocumentObject.

        If uploading multiple pages - it's handy to keep a track of these. There is no enforcement of these numbers at all. You can have 10 page 1's and a page 29 if you wish. 

        :return: The scan_page_num of this ScannedDocumentObject.
        :rtype: int
        """
        return self._scan_page_num

    @scan_page_num.setter
    def scan_page_num(self, scan_page_num):
        """Sets the scan_page_num of this ScannedDocumentObject.

        If uploading multiple pages - it's handy to keep a track of these. There is no enforcement of these numbers at all. You can have 10 page 1's and a page 29 if you wish. 

        :param scan_page_num: The scan_page_num of this ScannedDocumentObject.
        :type scan_page_num: int
        """
        if scan_page_num is not None and scan_page_num < 0:
            raise ValueError("Invalid value for `scan_page_num`, must be a value greater than or equal to `0`")

        self._scan_page_num = scan_page_num

    @property
    def scan_side(self):
        """Gets the scan_side of this ScannedDocumentObject.


        :return: The scan_side of this ScannedDocumentObject.
        :rtype: EnumScanSide
        """
        return self._scan_side

    @scan_side.setter
    def scan_side(self, scan_side):
        """Sets the scan_side of this ScannedDocumentObject.


        :param scan_side: The scan_side of this ScannedDocumentObject.
        :type scan_side: EnumScanSide
        """

        self._scan_side = scan_side

    @property
    def scan_type(self):
        """Gets the scan_type of this ScannedDocumentObject.


        :return: The scan_type of this ScannedDocumentObject.
        :rtype: EnumScanType
        """
        return self._scan_type

    @scan_type.setter
    def scan_type(self, scan_type):
        """Sets the scan_type of this ScannedDocumentObject.


        :param scan_type: The scan_type of this ScannedDocumentObject.
        :type scan_type: EnumScanType
        """

        self._scan_type = scan_type
