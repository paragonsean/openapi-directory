# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasicStatusResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, status_msg: str=None):
        """BasicStatusResultObject - a model defined in OpenAPI

        :param request_id: The request_id of this BasicStatusResultObject.
        :param status_msg: The status_msg of this BasicStatusResultObject.
        """
        self.openapi_types = {
            'request_id': str,
            'status_msg': str
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'status_msg': 'statusMsg'
        }

        self._request_id = request_id
        self._status_msg = status_msg

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicStatusResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicStatusResultObject of this BasicStatusResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this BasicStatusResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this BasicStatusResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this BasicStatusResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this BasicStatusResultObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def status_msg(self):
        """Gets the status_msg of this BasicStatusResultObject.

        Simple message describing the final status of the process. Only to be used in success case responses. Otherwise, use the ErrorObject. 

        :return: The status_msg of this BasicStatusResultObject.
        :rtype: str
        """
        return self._status_msg

    @status_msg.setter
    def status_msg(self, status_msg):
        """Sets the status_msg of this BasicStatusResultObject.

        Simple message describing the final status of the process. Only to be used in success case responses. Otherwise, use the ErrorObject. 

        :param status_msg: The status_msg of this BasicStatusResultObject.
        :type status_msg: str
        """
        if status_msg is None:
            raise ValueError("Invalid value for `status_msg`, must not be `None`")

        self._status_msg = status_msg
