# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_industry_utility_consent_result_object_utility_consent_result import DocumentIndustryUtilityConsentResultObjectUtilityConsentResult
from openapi_server import util


class DocumentIndustryUtilityConsentResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_id: str=None, industry_process: str=None, request_id: str=None, utility_consent_result: DocumentIndustryUtilityConsentResultObjectUtilityConsentResult=None):
        """DocumentIndustryUtilityConsentResultObject - a model defined in OpenAPI

        :param document_id: The document_id of this DocumentIndustryUtilityConsentResultObject.
        :param industry_process: The industry_process of this DocumentIndustryUtilityConsentResultObject.
        :param request_id: The request_id of this DocumentIndustryUtilityConsentResultObject.
        :param utility_consent_result: The utility_consent_result of this DocumentIndustryUtilityConsentResultObject.
        """
        self.openapi_types = {
            'document_id': str,
            'industry_process': str,
            'request_id': str,
            'utility_consent_result': DocumentIndustryUtilityConsentResultObjectUtilityConsentResult
        }

        self.attribute_map = {
            'document_id': 'documentId',
            'industry_process': 'industryProcess',
            'request_id': 'requestId',
            'utility_consent_result': 'utilityConsentResult'
        }

        self._document_id = document_id
        self._industry_process = industry_process
        self._request_id = request_id
        self._utility_consent_result = utility_consent_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentIndustryUtilityConsentResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentIndustryUtilityConsentResultObject of this DocumentIndustryUtilityConsentResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_id(self):
        """Gets the document_id of this DocumentIndustryUtilityConsentResultObject.

        The document that was used to generate these results.

        :return: The document_id of this DocumentIndustryUtilityConsentResultObject.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentIndustryUtilityConsentResultObject.

        The document that was used to generate these results.

        :param document_id: The document_id of this DocumentIndustryUtilityConsentResultObject.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def industry_process(self):
        """Gets the industry_process of this DocumentIndustryUtilityConsentResultObject.


        :return: The industry_process of this DocumentIndustryUtilityConsentResultObject.
        :rtype: str
        """
        return self._industry_process

    @industry_process.setter
    def industry_process(self, industry_process):
        """Sets the industry_process of this DocumentIndustryUtilityConsentResultObject.


        :param industry_process: The industry_process of this DocumentIndustryUtilityConsentResultObject.
        :type industry_process: str
        """

        self._industry_process = industry_process

    @property
    def request_id(self):
        """Gets the request_id of this DocumentIndustryUtilityConsentResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this DocumentIndustryUtilityConsentResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DocumentIndustryUtilityConsentResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this DocumentIndustryUtilityConsentResultObject.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def utility_consent_result(self):
        """Gets the utility_consent_result of this DocumentIndustryUtilityConsentResultObject.


        :return: The utility_consent_result of this DocumentIndustryUtilityConsentResultObject.
        :rtype: DocumentIndustryUtilityConsentResultObjectUtilityConsentResult
        """
        return self._utility_consent_result

    @utility_consent_result.setter
    def utility_consent_result(self, utility_consent_result):
        """Sets the utility_consent_result of this DocumentIndustryUtilityConsentResultObject.


        :param utility_consent_result: The utility_consent_result of this DocumentIndustryUtilityConsentResultObject.
        :type utility_consent_result: DocumentIndustryUtilityConsentResultObjectUtilityConsentResult
        """

        self._utility_consent_result = utility_consent_result
