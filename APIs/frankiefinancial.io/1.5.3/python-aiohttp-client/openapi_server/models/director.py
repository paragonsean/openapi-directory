# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_of_directorship import ArrayOfDirectorship
from openapi_server import util


class Director(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, address4: str=None, address5: str=None, address6: str=None, birthdate: str=None, director_number: str=None, directorships: ArrayOfDirectorship=None, name: str=None, nationality: str=None, postcode: str=None, title: str=None):
        """Director - a model defined in OpenAPI

        :param address1: The address1 of this Director.
        :param address2: The address2 of this Director.
        :param address3: The address3 of this Director.
        :param address4: The address4 of this Director.
        :param address5: The address5 of this Director.
        :param address6: The address6 of this Director.
        :param birthdate: The birthdate of this Director.
        :param director_number: The director_number of this Director.
        :param directorships: The directorships of this Director.
        :param name: The name of this Director.
        :param nationality: The nationality of this Director.
        :param postcode: The postcode of this Director.
        :param title: The title of this Director.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'address4': str,
            'address5': str,
            'address6': str,
            'birthdate': str,
            'director_number': str,
            'directorships': ArrayOfDirectorship,
            'name': str,
            'nationality': str,
            'postcode': str,
            'title': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'address3': 'address3',
            'address4': 'address4',
            'address5': 'address5',
            'address6': 'address6',
            'birthdate': 'birthdate',
            'director_number': 'directorNumber',
            'directorships': 'directorships',
            'name': 'name',
            'nationality': 'nationality',
            'postcode': 'postcode',
            'title': 'title'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._address4 = address4
        self._address5 = address5
        self._address6 = address6
        self._birthdate = birthdate
        self._director_number = director_number
        self._directorships = directorships
        self._name = name
        self._nationality = nationality
        self._postcode = postcode
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Director':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Director of this Director.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this Director.


        :return: The address1 of this Director.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Director.


        :param address1: The address1 of this Director.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Director.


        :return: The address2 of this Director.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Director.


        :param address2: The address2 of this Director.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this Director.


        :return: The address3 of this Director.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this Director.


        :param address3: The address3 of this Director.
        :type address3: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this Director.


        :return: The address4 of this Director.
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this Director.


        :param address4: The address4 of this Director.
        :type address4: str
        """

        self._address4 = address4

    @property
    def address5(self):
        """Gets the address5 of this Director.


        :return: The address5 of this Director.
        :rtype: str
        """
        return self._address5

    @address5.setter
    def address5(self, address5):
        """Sets the address5 of this Director.


        :param address5: The address5 of this Director.
        :type address5: str
        """

        self._address5 = address5

    @property
    def address6(self):
        """Gets the address6 of this Director.


        :return: The address6 of this Director.
        :rtype: str
        """
        return self._address6

    @address6.setter
    def address6(self, address6):
        """Sets the address6 of this Director.


        :param address6: The address6 of this Director.
        :type address6: str
        """

        self._address6 = address6

    @property
    def birthdate(self):
        """Gets the birthdate of this Director.


        :return: The birthdate of this Director.
        :rtype: str
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this Director.


        :param birthdate: The birthdate of this Director.
        :type birthdate: str
        """

        self._birthdate = birthdate

    @property
    def director_number(self):
        """Gets the director_number of this Director.


        :return: The director_number of this Director.
        :rtype: str
        """
        return self._director_number

    @director_number.setter
    def director_number(self, director_number):
        """Sets the director_number of this Director.


        :param director_number: The director_number of this Director.
        :type director_number: str
        """

        self._director_number = director_number

    @property
    def directorships(self):
        """Gets the directorships of this Director.


        :return: The directorships of this Director.
        :rtype: ArrayOfDirectorship
        """
        return self._directorships

    @directorships.setter
    def directorships(self, directorships):
        """Sets the directorships of this Director.


        :param directorships: The directorships of this Director.
        :type directorships: ArrayOfDirectorship
        """

        self._directorships = directorships

    @property
    def name(self):
        """Gets the name of this Director.


        :return: The name of this Director.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Director.


        :param name: The name of this Director.
        :type name: str
        """

        self._name = name

    @property
    def nationality(self):
        """Gets the nationality of this Director.


        :return: The nationality of this Director.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Director.


        :param nationality: The nationality of this Director.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def postcode(self):
        """Gets the postcode of this Director.


        :return: The postcode of this Director.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Director.


        :param postcode: The postcode of this Director.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def title(self):
        """Gets the title of this Director.


        :return: The title of this Director.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Director.


        :param title: The title of this Director.
        :type title: str
        """

        self._title = title
