# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_search_result_list_item import EntitySearchResultListItem
from openapi_server import util


class EntitySearchResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_search_results: List[EntitySearchResultListItem]=None, request_id: str=None):
        """EntitySearchResultObject - a model defined in OpenAPI

        :param entity_search_results: The entity_search_results of this EntitySearchResultObject.
        :param request_id: The request_id of this EntitySearchResultObject.
        """
        self.openapi_types = {
            'entity_search_results': List[EntitySearchResultListItem],
            'request_id': str
        }

        self.attribute_map = {
            'entity_search_results': 'entitySearchResults',
            'request_id': 'requestId'
        }

        self._entity_search_results = entity_search_results
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntitySearchResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntitySearchResultObject of this EntitySearchResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_search_results(self):
        """Gets the entity_search_results of this EntitySearchResultObject.

        The list of (potentially) matching entities with confidence levels.  If you are the \"owner\" of the entity - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the entity and any owned documents will be returned, except for the contents of any attached scans.  If you are not the owner of the entity (or linked documents), then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET  /entity/{entityId}/checks and GET /document/{documentId}/checks) 

        :return: The entity_search_results of this EntitySearchResultObject.
        :rtype: List[EntitySearchResultListItem]
        """
        return self._entity_search_results

    @entity_search_results.setter
    def entity_search_results(self, entity_search_results):
        """Sets the entity_search_results of this EntitySearchResultObject.

        The list of (potentially) matching entities with confidence levels.  If you are the \"owner\" of the entity - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the entity and any owned documents will be returned, except for the contents of any attached scans.  If you are not the owner of the entity (or linked documents), then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET  /entity/{entityId}/checks and GET /document/{documentId}/checks) 

        :param entity_search_results: The entity_search_results of this EntitySearchResultObject.
        :type entity_search_results: List[EntitySearchResultListItem]
        """

        self._entity_search_results = entity_search_results

    @property
    def request_id(self):
        """Gets the request_id of this EntitySearchResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this EntitySearchResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this EntitySearchResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this EntitySearchResultObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
