# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityProfileItemMatchResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checked: bool=None, match_count: int=None, match_sources: List[str]=None, match_type: str=None, verified: bool=None):
        """EntityProfileItemMatchResultObject - a model defined in OpenAPI

        :param checked: The checked of this EntityProfileItemMatchResultObject.
        :param match_count: The match_count of this EntityProfileItemMatchResultObject.
        :param match_sources: The match_sources of this EntityProfileItemMatchResultObject.
        :param match_type: The match_type of this EntityProfileItemMatchResultObject.
        :param verified: The verified of this EntityProfileItemMatchResultObject.
        """
        self.openapi_types = {
            'checked': bool,
            'match_count': int,
            'match_sources': List[str],
            'match_type': str,
            'verified': bool
        }

        self.attribute_map = {
            'checked': 'checked',
            'match_count': 'matchCount',
            'match_sources': 'matchSources',
            'match_type': 'matchType',
            'verified': 'verified'
        }

        self._checked = checked
        self._match_count = match_count
        self._match_sources = match_sources
        self._match_type = match_type
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityProfileItemMatchResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityProfileItemMatchResultObject of this EntityProfileItemMatchResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checked(self):
        """Gets the checked of this EntityProfileItemMatchResultObject.

        True if an attempt was made to verify

        :return: The checked of this EntityProfileItemMatchResultObject.
        :rtype: bool
        """
        return self._checked

    @checked.setter
    def checked(self, checked):
        """Sets the checked of this EntityProfileItemMatchResultObject.

        True if an attempt was made to verify

        :param checked: The checked of this EntityProfileItemMatchResultObject.
        :type checked: bool
        """

        self._checked = checked

    @property
    def match_count(self):
        """Gets the match_count of this EntityProfileItemMatchResultObject.

        The number of distinct sources that matched this address or document

        :return: The match_count of this EntityProfileItemMatchResultObject.
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this EntityProfileItemMatchResultObject.

        The number of distinct sources that matched this address or document

        :param match_count: The match_count of this EntityProfileItemMatchResultObject.
        :type match_count: int
        """

        self._match_count = match_count

    @property
    def match_sources(self):
        """Gets the match_sources of this EntityProfileItemMatchResultObject.

        List of sources that matched. The matchCount will be the number of entries in this list. 

        :return: The match_sources of this EntityProfileItemMatchResultObject.
        :rtype: List[str]
        """
        return self._match_sources

    @match_sources.setter
    def match_sources(self, match_sources):
        """Sets the match_sources of this EntityProfileItemMatchResultObject.

        List of sources that matched. The matchCount will be the number of entries in this list. 

        :param match_sources: The match_sources of this EntityProfileItemMatchResultObject.
        :type match_sources: List[str]
        """

        self._match_sources = match_sources

    @property
    def match_type(self):
        """Gets the match_type of this EntityProfileItemMatchResultObject.

        The match type that this count and result refer to. For document matches this will be \"gov_id\" or \"other_id\". For addresses ir will be \"curr_addr\" or \"prev_addr\" depending on the status of the address at the time of the check. 

        :return: The match_type of this EntityProfileItemMatchResultObject.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this EntityProfileItemMatchResultObject.

        The match type that this count and result refer to. For document matches this will be \"gov_id\" or \"other_id\". For addresses ir will be \"curr_addr\" or \"prev_addr\" depending on the status of the address at the time of the check. 

        :param match_type: The match_type of this EntityProfileItemMatchResultObject.
        :type match_type: str
        """

        self._match_type = match_type

    @property
    def verified(self):
        """Gets the verified of this EntityProfileItemMatchResultObject.

        True if there is at least one match

        :return: The verified of this EntityProfileItemMatchResultObject.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this EntityProfileItemMatchResultObject.

        True if there is at least one match

        :param verified: The verified of this EntityProfileItemMatchResultObject.
        :type verified: bool
        """

        self._verified = verified
