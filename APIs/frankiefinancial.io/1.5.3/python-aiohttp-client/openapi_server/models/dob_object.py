# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DOBObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, date_of_birth: date=None, locality: str=None, year_of_birth: str=None):
        """DOBObject - a model defined in OpenAPI

        :param country: The country of this DOBObject.
        :param date_of_birth: The date_of_birth of this DOBObject.
        :param locality: The locality of this DOBObject.
        :param year_of_birth: The year_of_birth of this DOBObject.
        """
        self.openapi_types = {
            'country': str,
            'date_of_birth': date,
            'locality': str,
            'year_of_birth': str
        }

        self.attribute_map = {
            'country': 'country',
            'date_of_birth': 'dateOfBirth',
            'locality': 'locality',
            'year_of_birth': 'yearOfBirth'
        }

        self._country = country
        self._date_of_birth = date_of_birth
        self._locality = locality
        self._year_of_birth = year_of_birth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DOBObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DOBObject of this DOBObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this DOBObject.

        ISO-3166-1 code for the country of birth. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.  See https://en.wikipedia.org/wiki/ISO_3166-1 

        :return: The country of this DOBObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DOBObject.

        ISO-3166-1 code for the country of birth. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.  See https://en.wikipedia.org/wiki/ISO_3166-1 

        :param country: The country of this DOBObject.
        :type country: str
        """

        self._country = country

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this DOBObject.

        Date of Birth in YYYY-MM-DD format

        :return: The date_of_birth of this DOBObject.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this DOBObject.

        Date of Birth in YYYY-MM-DD format

        :param date_of_birth: The date_of_birth of this DOBObject.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def locality(self):
        """Gets the locality of this DOBObject.

        Place of birth other than country If locality is given, then country must also be provided. 

        :return: The locality of this DOBObject.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this DOBObject.

        Place of birth other than country If locality is given, then country must also be provided. 

        :param locality: The locality of this DOBObject.
        :type locality: str
        """

        self._locality = locality

    @property
    def year_of_birth(self):
        """Gets the year_of_birth of this DOBObject.

        Year of birth or \"unknown\". This will be autoextracted if dateOfBirth is supplied.

        :return: The year_of_birth of this DOBObject.
        :rtype: str
        """
        return self._year_of_birth

    @year_of_birth.setter
    def year_of_birth(self, year_of_birth):
        """Sets the year_of_birth of this DOBObject.

        Year of birth or \"unknown\". This will be autoextracted if dateOfBirth is supplied.

        :param year_of_birth: The year_of_birth of this DOBObject.
        :type year_of_birth: str
        """

        self._year_of_birth = year_of_birth
