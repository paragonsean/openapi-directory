# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_profile_check_result_message import EntityProfileCheckResultMessage
from openapi_server.models.entity_profile_item_match_result_object import EntityProfileItemMatchResultObject
from openapi_server.models.entity_profile_kyc_match_result_object import EntityProfileKYCMatchResultObject
from openapi_server import util


class EntityProfileResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_recommended: str=None, address_results: Dict[str, EntityProfileItemMatchResultObject]=None, check_id: str=None, check_results: List[EntityProfileCheckResultMessage]=None, check_type: str=None, credit_header_failures: List[str]=None, document_results: Dict[str, EntityProfileItemMatchResultObject]=None, entity_id: str=None, issue_list: List[str]=None, kyc_results: List[EntityProfileKYCMatchResultObject]=None, latest_check_date: datetime=None, manual_intervention: bool=None, policy_name: str=None, profile_name: str=None, resolver_recommended: str=None, risk_level: str=None, risk_policy: str=None):
        """EntityProfileResultObject - a model defined in OpenAPI

        :param action_recommended: The action_recommended of this EntityProfileResultObject.
        :param address_results: The address_results of this EntityProfileResultObject.
        :param check_id: The check_id of this EntityProfileResultObject.
        :param check_results: The check_results of this EntityProfileResultObject.
        :param check_type: The check_type of this EntityProfileResultObject.
        :param credit_header_failures: The credit_header_failures of this EntityProfileResultObject.
        :param document_results: The document_results of this EntityProfileResultObject.
        :param entity_id: The entity_id of this EntityProfileResultObject.
        :param issue_list: The issue_list of this EntityProfileResultObject.
        :param kyc_results: The kyc_results of this EntityProfileResultObject.
        :param latest_check_date: The latest_check_date of this EntityProfileResultObject.
        :param manual_intervention: The manual_intervention of this EntityProfileResultObject.
        :param policy_name: The policy_name of this EntityProfileResultObject.
        :param profile_name: The profile_name of this EntityProfileResultObject.
        :param resolver_recommended: The resolver_recommended of this EntityProfileResultObject.
        :param risk_level: The risk_level of this EntityProfileResultObject.
        :param risk_policy: The risk_policy of this EntityProfileResultObject.
        """
        self.openapi_types = {
            'action_recommended': str,
            'address_results': Dict[str, EntityProfileItemMatchResultObject],
            'check_id': str,
            'check_results': List[EntityProfileCheckResultMessage],
            'check_type': str,
            'credit_header_failures': List[str],
            'document_results': Dict[str, EntityProfileItemMatchResultObject],
            'entity_id': str,
            'issue_list': List[str],
            'kyc_results': List[EntityProfileKYCMatchResultObject],
            'latest_check_date': datetime,
            'manual_intervention': bool,
            'policy_name': str,
            'profile_name': str,
            'resolver_recommended': str,
            'risk_level': str,
            'risk_policy': str
        }

        self.attribute_map = {
            'action_recommended': 'actionRecommended',
            'address_results': 'addressResults',
            'check_id': 'checkId',
            'check_results': 'checkResults',
            'check_type': 'checkType',
            'credit_header_failures': 'creditHeaderFailures',
            'document_results': 'documentResults',
            'entity_id': 'entityId',
            'issue_list': 'issueList',
            'kyc_results': 'kycResults',
            'latest_check_date': 'latestCheckDate',
            'manual_intervention': 'manualIntervention',
            'policy_name': 'policyName',
            'profile_name': 'profileName',
            'resolver_recommended': 'resolverRecommended',
            'risk_level': 'riskLevel',
            'risk_policy': 'riskPolicy'
        }

        self._action_recommended = action_recommended
        self._address_results = address_results
        self._check_id = check_id
        self._check_results = check_results
        self._check_type = check_type
        self._credit_header_failures = credit_header_failures
        self._document_results = document_results
        self._entity_id = entity_id
        self._issue_list = issue_list
        self._kyc_results = kyc_results
        self._latest_check_date = latest_check_date
        self._manual_intervention = manual_intervention
        self._policy_name = policy_name
        self._profile_name = profile_name
        self._resolver_recommended = resolver_recommended
        self._risk_level = risk_level
        self._risk_policy = risk_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityProfileResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityProfileResultObject of this EntityProfileResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_recommended(self):
        """Gets the action_recommended of this EntityProfileResultObject.

        The recommended onboarding action for this entity after the profile check this result refers to. The action can also be an entity state set by you. - UNCHECKED: New entity with no checks applied - PASS - FAIL - PASS_MANUAL: Manual intervention was applied to achieve a pass - FAIL_MANUAL: Manual intervention was applied but the entity still fails - REFER: Manual intervention required - WAIT: Externally applied state, waiting for more entity details - ARCHIVED: Externally applied state, entity hidden from on onboarding list - INACTIVE: Externally applied state, entity hidden from on onboarding list, indexes and further changes will be blocked. 

        :return: The action_recommended of this EntityProfileResultObject.
        :rtype: str
        """
        return self._action_recommended

    @action_recommended.setter
    def action_recommended(self, action_recommended):
        """Sets the action_recommended of this EntityProfileResultObject.

        The recommended onboarding action for this entity after the profile check this result refers to. The action can also be an entity state set by you. - UNCHECKED: New entity with no checks applied - PASS - FAIL - PASS_MANUAL: Manual intervention was applied to achieve a pass - FAIL_MANUAL: Manual intervention was applied but the entity still fails - REFER: Manual intervention required - WAIT: Externally applied state, waiting for more entity details - ARCHIVED: Externally applied state, entity hidden from on onboarding list - INACTIVE: Externally applied state, entity hidden from on onboarding list, indexes and further changes will be blocked. 

        :param action_recommended: The action_recommended of this EntityProfileResultObject.
        :type action_recommended: str
        """

        self._action_recommended = action_recommended

    @property
    def address_results(self):
        """Gets the address_results of this EntityProfileResultObject.

        KYC match counts for each checked address, whether matched or not. The keys in this map are the address IDs. The match type in the value will be either \"curr_addr\" or \"prev_addr\". The resultant structure would look like:      \"addressResults\": {       \"addressId\": {         \"matchType\": \"curr_addr\",         \"matchCount\": 5,         \"verified\": true       },       \"addressId\": {         \"matchType\": \"prev_addr\",         \"matchCount\": 5,         \"verified\": true       }     } 

        :return: The address_results of this EntityProfileResultObject.
        :rtype: Dict[str, EntityProfileItemMatchResultObject]
        """
        return self._address_results

    @address_results.setter
    def address_results(self, address_results):
        """Sets the address_results of this EntityProfileResultObject.

        KYC match counts for each checked address, whether matched or not. The keys in this map are the address IDs. The match type in the value will be either \"curr_addr\" or \"prev_addr\". The resultant structure would look like:      \"addressResults\": {       \"addressId\": {         \"matchType\": \"curr_addr\",         \"matchCount\": 5,         \"verified\": true       },       \"addressId\": {         \"matchType\": \"prev_addr\",         \"matchCount\": 5,         \"verified\": true       }     } 

        :param address_results: The address_results of this EntityProfileResultObject.
        :type address_results: Dict[str, EntityProfileItemMatchResultObject]
        """

        self._address_results = address_results

    @property
    def check_id(self):
        """Gets the check_id of this EntityProfileResultObject.

        Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.

        :return: The check_id of this EntityProfileResultObject.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this EntityProfileResultObject.

        Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.

        :param check_id: The check_id of this EntityProfileResultObject.
        :type check_id: str
        """

        self._check_id = check_id

    @property
    def check_results(self):
        """Gets the check_results of this EntityProfileResultObject.

        The basic result for each check type required for the profile.  The results are listed in the order they are run so you can also see how far progressed through a check process you are. 

        :return: The check_results of this EntityProfileResultObject.
        :rtype: List[EntityProfileCheckResultMessage]
        """
        return self._check_results

    @check_results.setter
    def check_results(self, check_results):
        """Sets the check_results of this EntityProfileResultObject.

        The basic result for each check type required for the profile.  The results are listed in the order they are run so you can also see how far progressed through a check process you are. 

        :param check_results: The check_results of this EntityProfileResultObject.
        :type check_results: List[EntityProfileCheckResultMessage]
        """

        self._check_results = check_results

    @property
    def check_type(self):
        """Gets the check_type of this EntityProfileResultObject.

        Comma separated list of checks required for the entity profile.

        :return: The check_type of this EntityProfileResultObject.
        :rtype: str
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this EntityProfileResultObject.

        Comma separated list of checks required for the entity profile.

        :param check_type: The check_type of this EntityProfileResultObject.
        :type check_type: str
        """

        self._check_type = check_type

    @property
    def credit_header_failures(self):
        """Gets the credit_header_failures of this EntityProfileResultObject.

        List of vendors from failed credit header sources.

        :return: The credit_header_failures of this EntityProfileResultObject.
        :rtype: List[str]
        """
        return self._credit_header_failures

    @credit_header_failures.setter
    def credit_header_failures(self, credit_header_failures):
        """Sets the credit_header_failures of this EntityProfileResultObject.

        List of vendors from failed credit header sources.

        :param credit_header_failures: The credit_header_failures of this EntityProfileResultObject.
        :type credit_header_failures: List[str]
        """

        self._credit_header_failures = credit_header_failures

    @property
    def document_results(self):
        """Gets the document_results of this EntityProfileResultObject.

        KYC match counts for each checked document, whether matched or not. The keys in this map are the document IDs. The match type in the value will be either \"gov_id\" or \"other_id\". The resultant structure would look like:  documentResults: {     \"documentId\" : {       \"matchType\": \"gov_id\",       \"matchCount\": 5,       \"verified\": true     },     \"documentId\": {       \"matchType\": \"other_id\",       \"matchCount\": 5,       \"verified\": true     } } 

        :return: The document_results of this EntityProfileResultObject.
        :rtype: Dict[str, EntityProfileItemMatchResultObject]
        """
        return self._document_results

    @document_results.setter
    def document_results(self, document_results):
        """Sets the document_results of this EntityProfileResultObject.

        KYC match counts for each checked document, whether matched or not. The keys in this map are the document IDs. The match type in the value will be either \"gov_id\" or \"other_id\". The resultant structure would look like:  documentResults: {     \"documentId\" : {       \"matchType\": \"gov_id\",       \"matchCount\": 5,       \"verified\": true     },     \"documentId\": {       \"matchType\": \"other_id\",       \"matchCount\": 5,       \"verified\": true     } } 

        :param document_results: The document_results of this EntityProfileResultObject.
        :type document_results: Dict[str, EntityProfileItemMatchResultObject]
        """

        self._document_results = document_results

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityProfileResultObject.

        Unique ID for the entity. 

        :return: The entity_id of this EntityProfileResultObject.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityProfileResultObject.

        Unique ID for the entity. 

        :param entity_id: The entity_id of this EntityProfileResultObject.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def issue_list(self):
        """Gets the issue_list of this EntityProfileResultObject.


        :return: The issue_list of this EntityProfileResultObject.
        :rtype: List[str]
        """
        return self._issue_list

    @issue_list.setter
    def issue_list(self, issue_list):
        """Sets the issue_list of this EntityProfileResultObject.


        :param issue_list: The issue_list of this EntityProfileResultObject.
        :type issue_list: List[str]
        """

        self._issue_list = issue_list

    @property
    def kyc_results(self):
        """Gets the kyc_results of this EntityProfileResultObject.

        Summary of KYC match counts.

        :return: The kyc_results of this EntityProfileResultObject.
        :rtype: List[EntityProfileKYCMatchResultObject]
        """
        return self._kyc_results

    @kyc_results.setter
    def kyc_results(self, kyc_results):
        """Sets the kyc_results of this EntityProfileResultObject.

        Summary of KYC match counts.

        :param kyc_results: The kyc_results of this EntityProfileResultObject.
        :type kyc_results: List[EntityProfileKYCMatchResultObject]
        """

        self._kyc_results = kyc_results

    @property
    def latest_check_date(self):
        """Gets the latest_check_date of this EntityProfileResultObject.

        The date and time of the last check that contributed to this result.

        :return: The latest_check_date of this EntityProfileResultObject.
        :rtype: datetime
        """
        return self._latest_check_date

    @latest_check_date.setter
    def latest_check_date(self, latest_check_date):
        """Sets the latest_check_date of this EntityProfileResultObject.

        The date and time of the last check that contributed to this result.

        :param latest_check_date: The latest_check_date of this EntityProfileResultObject.
        :type latest_check_date: datetime
        """

        self._latest_check_date = latest_check_date

    @property
    def manual_intervention(self):
        """Gets the manual_intervention of this EntityProfileResultObject.

        Indicates if any manual actions have been involved in the check result.

        :return: The manual_intervention of this EntityProfileResultObject.
        :rtype: bool
        """
        return self._manual_intervention

    @manual_intervention.setter
    def manual_intervention(self, manual_intervention):
        """Sets the manual_intervention of this EntityProfileResultObject.

        Indicates if any manual actions have been involved in the check result.

        :param manual_intervention: The manual_intervention of this EntityProfileResultObject.
        :type manual_intervention: bool
        """

        self._manual_intervention = manual_intervention

    @property
    def policy_name(self):
        """Gets the policy_name of this EntityProfileResultObject.

        The name of the policy within the profile used for this check. This may or may not incorporate the 'riskPolicy' that is also an attribute in this object.

        :return: The policy_name of this EntityProfileResultObject.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this EntityProfileResultObject.

        The name of the policy within the profile used for this check. This may or may not incorporate the 'riskPolicy' that is also an attribute in this object.

        :param policy_name: The policy_name of this EntityProfileResultObject.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def profile_name(self):
        """Gets the profile_name of this EntityProfileResultObject.

        The name of the profile used for this check.

        :return: The profile_name of this EntityProfileResultObject.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this EntityProfileResultObject.

        The name of the profile used for this check.

        :param profile_name: The profile_name of this EntityProfileResultObject.
        :type profile_name: str
        """

        self._profile_name = profile_name

    @property
    def resolver_recommended(self):
        """Gets the resolver_recommended of this EntityProfileResultObject.

        Workflow hint by arrangement with Frankie

        :return: The resolver_recommended of this EntityProfileResultObject.
        :rtype: str
        """
        return self._resolver_recommended

    @resolver_recommended.setter
    def resolver_recommended(self, resolver_recommended):
        """Sets the resolver_recommended of this EntityProfileResultObject.

        Workflow hint by arrangement with Frankie

        :param resolver_recommended: The resolver_recommended of this EntityProfileResultObject.
        :type resolver_recommended: str
        """

        self._resolver_recommended = resolver_recommended

    @property
    def risk_level(self):
        """Gets the risk_level of this EntityProfileResultObject.

        Risk level. One of:  - LOW,  - MEDIUM,  - HIGH,  - UACCEPTABLE  - or UNKNOWN 

        :return: The risk_level of this EntityProfileResultObject.
        :rtype: str
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """Sets the risk_level of this EntityProfileResultObject.

        Risk level. One of:  - LOW,  - MEDIUM,  - HIGH,  - UACCEPTABLE  - or UNKNOWN 

        :param risk_level: The risk_level of this EntityProfileResultObject.
        :type risk_level: str
        """

        self._risk_level = risk_level

    @property
    def risk_policy(self):
        """Gets the risk_policy of this EntityProfileResultObject.

        Risk policy. Contents depend on account configuration but would typically be one of:  - SDD,  - CDD,  - EDD  - or FAIL 

        :return: The risk_policy of this EntityProfileResultObject.
        :rtype: str
        """
        return self._risk_policy

    @risk_policy.setter
    def risk_policy(self, risk_policy):
        """Sets the risk_policy of this EntityProfileResultObject.

        Risk policy. Contents depend on account configuration but would typically be one of:  - SDD,  - CDD,  - EDD  - or FAIL 

        :param risk_policy: The risk_policy of this EntityProfileResultObject.
        :type risk_policy: str
        """

        self._risk_policy = risk_policy
