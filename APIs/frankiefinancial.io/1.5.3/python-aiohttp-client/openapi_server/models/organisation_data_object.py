# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_description import CodeDescription
from openapi_server.models.organisation_data_object_registration import OrganisationDataObjectRegistration
from openapi_server.models.share_structure_object import ShareStructureObject
from openapi_server import util


class OrganisationDataObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adverse_credit_data_present: bool=None, _class: CodeDescription=None, disclosing_entity_indicator: bool=None, includes_non_beneficially_held: bool=None, kyc_customer_type: str=None, last_check_date: date=None, ownership_resolved: bool=None, registered_name: str=None, registration: OrganisationDataObjectRegistration=None, share_structure: List[ShareStructureObject]=None, start_date: date=None, status: CodeDescription=None, subclass: CodeDescription=None, type: CodeDescription=None):
        """OrganisationDataObject - a model defined in OpenAPI

        :param adverse_credit_data_present: The adverse_credit_data_present of this OrganisationDataObject.
        :param _class: The _class of this OrganisationDataObject.
        :param disclosing_entity_indicator: The disclosing_entity_indicator of this OrganisationDataObject.
        :param includes_non_beneficially_held: The includes_non_beneficially_held of this OrganisationDataObject.
        :param kyc_customer_type: The kyc_customer_type of this OrganisationDataObject.
        :param last_check_date: The last_check_date of this OrganisationDataObject.
        :param ownership_resolved: The ownership_resolved of this OrganisationDataObject.
        :param registered_name: The registered_name of this OrganisationDataObject.
        :param registration: The registration of this OrganisationDataObject.
        :param share_structure: The share_structure of this OrganisationDataObject.
        :param start_date: The start_date of this OrganisationDataObject.
        :param status: The status of this OrganisationDataObject.
        :param subclass: The subclass of this OrganisationDataObject.
        :param type: The type of this OrganisationDataObject.
        """
        self.openapi_types = {
            'adverse_credit_data_present': bool,
            '_class': CodeDescription,
            'disclosing_entity_indicator': bool,
            'includes_non_beneficially_held': bool,
            'kyc_customer_type': str,
            'last_check_date': date,
            'ownership_resolved': bool,
            'registered_name': str,
            'registration': OrganisationDataObjectRegistration,
            'share_structure': List[ShareStructureObject],
            'start_date': date,
            'status': CodeDescription,
            'subclass': CodeDescription,
            'type': CodeDescription
        }

        self.attribute_map = {
            'adverse_credit_data_present': 'adverseCreditDataPresent',
            '_class': 'class',
            'disclosing_entity_indicator': 'disclosingEntityIndicator',
            'includes_non_beneficially_held': 'includesNonBeneficiallyHeld',
            'kyc_customer_type': 'kycCustomerType',
            'last_check_date': 'lastCheckDate',
            'ownership_resolved': 'ownershipResolved',
            'registered_name': 'registeredName',
            'registration': 'registration',
            'share_structure': 'shareStructure',
            'start_date': 'startDate',
            'status': 'status',
            'subclass': 'subclass',
            'type': 'type'
        }

        self._adverse_credit_data_present = adverse_credit_data_present
        self.__class = _class
        self._disclosing_entity_indicator = disclosing_entity_indicator
        self._includes_non_beneficially_held = includes_non_beneficially_held
        self._kyc_customer_type = kyc_customer_type
        self._last_check_date = last_check_date
        self._ownership_resolved = ownership_resolved
        self._registered_name = registered_name
        self._registration = registration
        self._share_structure = share_structure
        self._start_date = start_date
        self._status = status
        self._subclass = subclass
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganisationDataObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganisationDataObject of this OrganisationDataObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adverse_credit_data_present(self):
        """Gets the adverse_credit_data_present of this OrganisationDataObject.


        :return: The adverse_credit_data_present of this OrganisationDataObject.
        :rtype: bool
        """
        return self._adverse_credit_data_present

    @adverse_credit_data_present.setter
    def adverse_credit_data_present(self, adverse_credit_data_present):
        """Sets the adverse_credit_data_present of this OrganisationDataObject.


        :param adverse_credit_data_present: The adverse_credit_data_present of this OrganisationDataObject.
        :type adverse_credit_data_present: bool
        """

        self._adverse_credit_data_present = adverse_credit_data_present

    @property
    def _class(self):
        """Gets the _class of this OrganisationDataObject.


        :return: The _class of this OrganisationDataObject.
        :rtype: CodeDescription
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this OrganisationDataObject.


        :param _class: The _class of this OrganisationDataObject.
        :type _class: CodeDescription
        """

        self.__class = _class

    @property
    def disclosing_entity_indicator(self):
        """Gets the disclosing_entity_indicator of this OrganisationDataObject.


        :return: The disclosing_entity_indicator of this OrganisationDataObject.
        :rtype: bool
        """
        return self._disclosing_entity_indicator

    @disclosing_entity_indicator.setter
    def disclosing_entity_indicator(self, disclosing_entity_indicator):
        """Sets the disclosing_entity_indicator of this OrganisationDataObject.


        :param disclosing_entity_indicator: The disclosing_entity_indicator of this OrganisationDataObject.
        :type disclosing_entity_indicator: bool
        """

        self._disclosing_entity_indicator = disclosing_entity_indicator

    @property
    def includes_non_beneficially_held(self):
        """Gets the includes_non_beneficially_held of this OrganisationDataObject.


        :return: The includes_non_beneficially_held of this OrganisationDataObject.
        :rtype: bool
        """
        return self._includes_non_beneficially_held

    @includes_non_beneficially_held.setter
    def includes_non_beneficially_held(self, includes_non_beneficially_held):
        """Sets the includes_non_beneficially_held of this OrganisationDataObject.


        :param includes_non_beneficially_held: The includes_non_beneficially_held of this OrganisationDataObject.
        :type includes_non_beneficially_held: bool
        """

        self._includes_non_beneficially_held = includes_non_beneficially_held

    @property
    def kyc_customer_type(self):
        """Gets the kyc_customer_type of this OrganisationDataObject.


        :return: The kyc_customer_type of this OrganisationDataObject.
        :rtype: str
        """
        return self._kyc_customer_type

    @kyc_customer_type.setter
    def kyc_customer_type(self, kyc_customer_type):
        """Sets the kyc_customer_type of this OrganisationDataObject.


        :param kyc_customer_type: The kyc_customer_type of this OrganisationDataObject.
        :type kyc_customer_type: str
        """

        self._kyc_customer_type = kyc_customer_type

    @property
    def last_check_date(self):
        """Gets the last_check_date of this OrganisationDataObject.


        :return: The last_check_date of this OrganisationDataObject.
        :rtype: date
        """
        return self._last_check_date

    @last_check_date.setter
    def last_check_date(self, last_check_date):
        """Sets the last_check_date of this OrganisationDataObject.


        :param last_check_date: The last_check_date of this OrganisationDataObject.
        :type last_check_date: date
        """

        self._last_check_date = last_check_date

    @property
    def ownership_resolved(self):
        """Gets the ownership_resolved of this OrganisationDataObject.


        :return: The ownership_resolved of this OrganisationDataObject.
        :rtype: bool
        """
        return self._ownership_resolved

    @ownership_resolved.setter
    def ownership_resolved(self, ownership_resolved):
        """Sets the ownership_resolved of this OrganisationDataObject.


        :param ownership_resolved: The ownership_resolved of this OrganisationDataObject.
        :type ownership_resolved: bool
        """

        self._ownership_resolved = ownership_resolved

    @property
    def registered_name(self):
        """Gets the registered_name of this OrganisationDataObject.


        :return: The registered_name of this OrganisationDataObject.
        :rtype: str
        """
        return self._registered_name

    @registered_name.setter
    def registered_name(self, registered_name):
        """Sets the registered_name of this OrganisationDataObject.


        :param registered_name: The registered_name of this OrganisationDataObject.
        :type registered_name: str
        """

        self._registered_name = registered_name

    @property
    def registration(self):
        """Gets the registration of this OrganisationDataObject.


        :return: The registration of this OrganisationDataObject.
        :rtype: OrganisationDataObjectRegistration
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this OrganisationDataObject.


        :param registration: The registration of this OrganisationDataObject.
        :type registration: OrganisationDataObjectRegistration
        """

        self._registration = registration

    @property
    def share_structure(self):
        """Gets the share_structure of this OrganisationDataObject.


        :return: The share_structure of this OrganisationDataObject.
        :rtype: List[ShareStructureObject]
        """
        return self._share_structure

    @share_structure.setter
    def share_structure(self, share_structure):
        """Sets the share_structure of this OrganisationDataObject.


        :param share_structure: The share_structure of this OrganisationDataObject.
        :type share_structure: List[ShareStructureObject]
        """

        self._share_structure = share_structure

    @property
    def start_date(self):
        """Gets the start_date of this OrganisationDataObject.


        :return: The start_date of this OrganisationDataObject.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this OrganisationDataObject.


        :param start_date: The start_date of this OrganisationDataObject.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this OrganisationDataObject.


        :return: The status of this OrganisationDataObject.
        :rtype: CodeDescription
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganisationDataObject.


        :param status: The status of this OrganisationDataObject.
        :type status: CodeDescription
        """

        self._status = status

    @property
    def subclass(self):
        """Gets the subclass of this OrganisationDataObject.


        :return: The subclass of this OrganisationDataObject.
        :rtype: CodeDescription
        """
        return self._subclass

    @subclass.setter
    def subclass(self, subclass):
        """Sets the subclass of this OrganisationDataObject.


        :param subclass: The subclass of this OrganisationDataObject.
        :type subclass: CodeDescription
        """

        self._subclass = subclass

    @property
    def type(self):
        """Gets the type of this OrganisationDataObject.


        :return: The type of this OrganisationDataObject.
        :rtype: CodeDescription
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganisationDataObject.


        :param type: The type of this OrganisationDataObject.
        :type type: CodeDescription
        """

        self._type = type
