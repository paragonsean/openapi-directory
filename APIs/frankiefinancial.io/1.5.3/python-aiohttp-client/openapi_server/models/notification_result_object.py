# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_function_status import EnumFunctionStatus
from openapi_server.models.enum_notification_type import EnumNotificationType
from openapi_server import util


class NotificationResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, document_id: str=None, entity_customer_reference: str=None, entity_id: str=None, function: str=None, function_result: EnumFunctionStatus=None, link_reference: str=None, message: str=None, notification_type: EnumNotificationType=None, request_id: str=None, username: str=None):
        """NotificationResultObject - a model defined in OpenAPI

        :param check_id: The check_id of this NotificationResultObject.
        :param document_id: The document_id of this NotificationResultObject.
        :param entity_customer_reference: The entity_customer_reference of this NotificationResultObject.
        :param entity_id: The entity_id of this NotificationResultObject.
        :param function: The function of this NotificationResultObject.
        :param function_result: The function_result of this NotificationResultObject.
        :param link_reference: The link_reference of this NotificationResultObject.
        :param message: The message of this NotificationResultObject.
        :param notification_type: The notification_type of this NotificationResultObject.
        :param request_id: The request_id of this NotificationResultObject.
        :param username: The username of this NotificationResultObject.
        """
        self.openapi_types = {
            'check_id': str,
            'document_id': str,
            'entity_customer_reference': str,
            'entity_id': str,
            'function': str,
            'function_result': EnumFunctionStatus,
            'link_reference': str,
            'message': str,
            'notification_type': EnumNotificationType,
            'request_id': str,
            'username': str
        }

        self.attribute_map = {
            'check_id': 'checkId',
            'document_id': 'documentId',
            'entity_customer_reference': 'entityCustomerReference',
            'entity_id': 'entityId',
            'function': 'function',
            'function_result': 'functionResult',
            'link_reference': 'linkReference',
            'message': 'message',
            'notification_type': 'notificationType',
            'request_id': 'requestId',
            'username': 'username'
        }

        self._check_id = check_id
        self._document_id = document_id
        self._entity_customer_reference = entity_customer_reference
        self._entity_id = entity_id
        self._function = function
        self._function_result = function_result
        self._link_reference = link_reference
        self._message = message
        self._notification_type = notification_type
        self._request_id = request_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationResultObject of this NotificationResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this NotificationResultObject.

        If you're calling a processing function of some kind, a check number will be issued. This field will only be present if the function you're calling would normally return a checkId (such as scan, verify, and compare). 

        :return: The check_id of this NotificationResultObject.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this NotificationResultObject.

        If you're calling a processing function of some kind, a check number will be issued. This field will only be present if the function you're calling would normally return a checkId (such as scan, verify, and compare). 

        :param check_id: The check_id of this NotificationResultObject.
        :type check_id: str
        """

        self._check_id = check_id

    @property
    def document_id(self):
        """Gets the document_id of this NotificationResultObject.

        Only supplied if the original request was tied to a document. This will be the same ID that was sent in the original acceptance. 

        :return: The document_id of this NotificationResultObject.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this NotificationResultObject.

        Only supplied if the original request was tied to a document. This will be the same ID that was sent in the original acceptance. 

        :param document_id: The document_id of this NotificationResultObject.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def entity_customer_reference(self):
        """Gets the entity_customer_reference of this NotificationResultObject.

        If the entity in entityId above has had an external service ID attached to it in the entity extraData with kvpKey = customer_reference, then this is that kvpValue 

        :return: The entity_customer_reference of this NotificationResultObject.
        :rtype: str
        """
        return self._entity_customer_reference

    @entity_customer_reference.setter
    def entity_customer_reference(self, entity_customer_reference):
        """Sets the entity_customer_reference of this NotificationResultObject.

        If the entity in entityId above has had an external service ID attached to it in the entity extraData with kvpKey = customer_reference, then this is that kvpValue 

        :param entity_customer_reference: The entity_customer_reference of this NotificationResultObject.
        :type entity_customer_reference: str
        """

        self._entity_customer_reference = entity_customer_reference

    @property
    def entity_id(self):
        """Gets the entity_id of this NotificationResultObject.

        Only supplied if the original request was tied to an entity. This will be the same ID that was sent in the original acceptance. 

        :return: The entity_id of this NotificationResultObject.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this NotificationResultObject.

        Only supplied if the original request was tied to an entity. This will be the same ID that was sent in the original acceptance. 

        :param entity_id: The entity_id of this NotificationResultObject.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def function(self):
        """Gets the function of this NotificationResultObject.

        Short description of the original function called, or function that was triggered. 

        :return: The function of this NotificationResultObject.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this NotificationResultObject.

        Short description of the original function called, or function that was triggered. 

        :param function: The function of this NotificationResultObject.
        :type function: str
        """

        self._function = function

    @property
    def function_result(self):
        """Gets the function_result of this NotificationResultObject.


        :return: The function_result of this NotificationResultObject.
        :rtype: EnumFunctionStatus
        """
        return self._function_result

    @function_result.setter
    def function_result(self, function_result):
        """Sets the function_result of this NotificationResultObject.


        :param function_result: The function_result of this NotificationResultObject.
        :type function_result: EnumFunctionStatus
        """

        self._function_result = function_result

    @property
    def link_reference(self):
        """Gets the link_reference of this NotificationResultObject.

        URI for resource containing more details about the reason for the notification. 

        :return: The link_reference of this NotificationResultObject.
        :rtype: str
        """
        return self._link_reference

    @link_reference.setter
    def link_reference(self, link_reference):
        """Sets the link_reference of this NotificationResultObject.

        URI for resource containing more details about the reason for the notification. 

        :param link_reference: The link_reference of this NotificationResultObject.
        :type link_reference: str
        """

        self._link_reference = link_reference

    @property
    def message(self):
        """Gets the message of this NotificationResultObject.

        A brief, human readable message describing the reason for the notification. 

        :return: The message of this NotificationResultObject.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationResultObject.

        A brief, human readable message describing the reason for the notification. 

        :param message: The message of this NotificationResultObject.
        :type message: str
        """

        self._message = message

    @property
    def notification_type(self):
        """Gets the notification_type of this NotificationResultObject.


        :return: The notification_type of this NotificationResultObject.
        :rtype: EnumNotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this NotificationResultObject.


        :param notification_type: The notification_type of this NotificationResultObject.
        :type notification_type: EnumNotificationType
        """

        self._notification_type = notification_type

    @property
    def request_id(self):
        """Gets the request_id of this NotificationResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this NotificationResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NotificationResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this NotificationResultObject.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def username(self):
        """Gets the username of this NotificationResultObject.

        The portal username that initiated the operation that led to this notification. If applicable and available. 

        :return: The username of this NotificationResultObject.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotificationResultObject.

        The portal username that initiated the operation that led to this notification. If applicable and available. 

        :param username: The username of this NotificationResultObject.
        :type username: str
        """

        self._username = username
