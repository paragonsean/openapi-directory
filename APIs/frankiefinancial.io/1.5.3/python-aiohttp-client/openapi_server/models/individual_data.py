# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_object import AddressObject
from openapi_server.models.screening_result import ScreeningResult
from openapi_server import util


class IndividualData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[AddressObject]=None, beneficially_held: bool=None, date_of_birth: date=None, name: str=None, percent_owned: float=None, role: str=None, screening_result: ScreeningResult=None):
        """IndividualData - a model defined in OpenAPI

        :param addresses: The addresses of this IndividualData.
        :param beneficially_held: The beneficially_held of this IndividualData.
        :param date_of_birth: The date_of_birth of this IndividualData.
        :param name: The name of this IndividualData.
        :param percent_owned: The percent_owned of this IndividualData.
        :param role: The role of this IndividualData.
        :param screening_result: The screening_result of this IndividualData.
        """
        self.openapi_types = {
            'addresses': List[AddressObject],
            'beneficially_held': bool,
            'date_of_birth': date,
            'name': str,
            'percent_owned': float,
            'role': str,
            'screening_result': ScreeningResult
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'beneficially_held': 'beneficially_held',
            'date_of_birth': 'date_of_birth',
            'name': 'name',
            'percent_owned': 'percent_owned',
            'role': 'role',
            'screening_result': 'screening_result'
        }

        self._addresses = addresses
        self._beneficially_held = beneficially_held
        self._date_of_birth = date_of_birth
        self._name = name
        self._percent_owned = percent_owned
        self._role = role
        self._screening_result = screening_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndividualData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndividualData of this IndividualData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this IndividualData.

        List of all found addresses associated with this person 

        :return: The addresses of this IndividualData.
        :rtype: List[AddressObject]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this IndividualData.

        List of all found addresses associated with this person 

        :param addresses: The addresses of this IndividualData.
        :type addresses: List[AddressObject]
        """

        self._addresses = addresses

    @property
    def beneficially_held(self):
        """Gets the beneficially_held of this IndividualData.

        If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 

        :return: The beneficially_held of this IndividualData.
        :rtype: bool
        """
        return self._beneficially_held

    @beneficially_held.setter
    def beneficially_held(self, beneficially_held):
        """Sets the beneficially_held of this IndividualData.

        If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 

        :param beneficially_held: The beneficially_held of this IndividualData.
        :type beneficially_held: bool
        """
        if beneficially_held is None:
            raise ValueError("Invalid value for `beneficially_held`, must not be `None`")

        self._beneficially_held = beneficially_held

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this IndividualData.

        RFC3339 formatted date

        :return: The date_of_birth of this IndividualData.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this IndividualData.

        RFC3339 formatted date

        :param date_of_birth: The date_of_birth of this IndividualData.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def name(self):
        """Gets the name of this IndividualData.

        Name of the individual 

        :return: The name of this IndividualData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndividualData.

        Name of the individual 

        :param name: The name of this IndividualData.
        :type name: str
        """

        self._name = name

    @property
    def percent_owned(self):
        """Gets the percent_owned of this IndividualData.

        If describing an (ultimate) beneficial owner, the percentage of the company owned by this Individual 

        :return: The percent_owned of this IndividualData.
        :rtype: float
        """
        return self._percent_owned

    @percent_owned.setter
    def percent_owned(self, percent_owned):
        """Sets the percent_owned of this IndividualData.

        If describing an (ultimate) beneficial owner, the percentage of the company owned by this Individual 

        :param percent_owned: The percent_owned of this IndividualData.
        :type percent_owned: float
        """
        if percent_owned is None:
            raise ValueError("Invalid value for `percent_owned`, must not be `None`")

        self._percent_owned = percent_owned

    @property
    def role(self):
        """Gets the role of this IndividualData.

        If this individual has a role as an officeholder, such as director, then this will be described here. May be blank. 

        :return: The role of this IndividualData.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this IndividualData.

        If this individual has a role as an officeholder, such as director, then this will be described here. May be blank. 

        :param role: The role of this IndividualData.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def screening_result(self):
        """Gets the screening_result of this IndividualData.


        :return: The screening_result of this IndividualData.
        :rtype: ScreeningResult
        """
        return self._screening_result

    @screening_result.setter
    def screening_result(self, screening_result):
        """Sets the screening_result of this IndividualData.


        :param screening_result: The screening_result of this IndividualData.
        :type screening_result: ScreeningResult
        """

        self._screening_result = screening_result
