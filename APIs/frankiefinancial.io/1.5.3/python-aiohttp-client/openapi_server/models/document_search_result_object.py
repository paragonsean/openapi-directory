# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_search_result_list_item import DocumentSearchResultListItem
from openapi_server import util


class DocumentSearchResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_search_results: List[DocumentSearchResultListItem]=None, request_id: str=None):
        """DocumentSearchResultObject - a model defined in OpenAPI

        :param document_search_results: The document_search_results of this DocumentSearchResultObject.
        :param request_id: The request_id of this DocumentSearchResultObject.
        """
        self.openapi_types = {
            'document_search_results': List[DocumentSearchResultListItem],
            'request_id': str
        }

        self.attribute_map = {
            'document_search_results': 'documentSearchResults',
            'request_id': 'requestId'
        }

        self._document_search_results = document_search_results
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSearchResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSearchResultObject of this DocumentSearchResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_search_results(self):
        """Gets the document_search_results of this DocumentSearchResultObject.

        The list of (potentially) matching documents with confidence levels.  If you are the \"owner\" of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks) 

        :return: The document_search_results of this DocumentSearchResultObject.
        :rtype: List[DocumentSearchResultListItem]
        """
        return self._document_search_results

    @document_search_results.setter
    def document_search_results(self, document_search_results):
        """Sets the document_search_results of this DocumentSearchResultObject.

        The list of (potentially) matching documents with confidence levels.  If you are the \"owner\" of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks) 

        :param document_search_results: The document_search_results of this DocumentSearchResultObject.
        :type document_search_results: List[DocumentSearchResultListItem]
        """

        self._document_search_results = document_search_results

    @property
    def request_id(self):
        """Gets the request_id of this DocumentSearchResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this DocumentSearchResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DocumentSearchResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this DocumentSearchResultObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
