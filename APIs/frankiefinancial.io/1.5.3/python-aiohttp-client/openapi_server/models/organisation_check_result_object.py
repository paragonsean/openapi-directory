# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_entity_check_result_object import CheckEntityCheckResultObject
from openapi_server.models.error_object import ErrorObject
from openapi_server import util


class OrganisationCheckResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_categories: Dict[str, List[str]]=None, entity_check_errors: Dict[str, ErrorObject]=None, entity_check_results: Dict[str, CheckEntityCheckResultObject]=None, entity_id: str=None, group_id: str=None):
        """OrganisationCheckResultObject - a model defined in OpenAPI

        :param entity_categories: The entity_categories of this OrganisationCheckResultObject.
        :param entity_check_errors: The entity_check_errors of this OrganisationCheckResultObject.
        :param entity_check_results: The entity_check_results of this OrganisationCheckResultObject.
        :param entity_id: The entity_id of this OrganisationCheckResultObject.
        :param group_id: The group_id of this OrganisationCheckResultObject.
        """
        self.openapi_types = {
            'entity_categories': Dict[str, List[str]],
            'entity_check_errors': Dict[str, ErrorObject],
            'entity_check_results': Dict[str, CheckEntityCheckResultObject],
            'entity_id': str,
            'group_id': str
        }

        self.attribute_map = {
            'entity_categories': 'entityCategories',
            'entity_check_errors': 'entityCheckErrors',
            'entity_check_results': 'entityCheckResults',
            'entity_id': 'entityId',
            'group_id': 'groupId'
        }

        self._entity_categories = entity_categories
        self._entity_check_errors = entity_check_errors
        self._entity_check_results = entity_check_results
        self._entity_id = entity_id
        self._group_id = group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganisationCheckResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganisationCheckResultObject of this OrganisationCheckResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_categories(self):
        """Gets the entity_categories of this OrganisationCheckResultObject.

        A map of the entity categories that were selected for checks and an array of the entity IDs for each. The results for each entity ID will be in either the entityCheckResults or entityCheckErrors maps. Entities may appear in more than one category. 

        :return: The entity_categories of this OrganisationCheckResultObject.
        :rtype: Dict[str, List[str]]
        """
        return self._entity_categories

    @entity_categories.setter
    def entity_categories(self, entity_categories):
        """Sets the entity_categories of this OrganisationCheckResultObject.

        A map of the entity categories that were selected for checks and an array of the entity IDs for each. The results for each entity ID will be in either the entityCheckResults or entityCheckErrors maps. Entities may appear in more than one category. 

        :param entity_categories: The entity_categories of this OrganisationCheckResultObject.
        :type entity_categories: Dict[str, List[str]]
        """

        self._entity_categories = entity_categories

    @property
    def entity_check_errors(self):
        """Gets the entity_check_errors of this OrganisationCheckResultObject.

        A map of outright errors (failure to generate any kind of result). These objects will be referenced by entity ID in the entity category map. 

        :return: The entity_check_errors of this OrganisationCheckResultObject.
        :rtype: Dict[str, ErrorObject]
        """
        return self._entity_check_errors

    @entity_check_errors.setter
    def entity_check_errors(self, entity_check_errors):
        """Sets the entity_check_errors of this OrganisationCheckResultObject.

        A map of outright errors (failure to generate any kind of result). These objects will be referenced by entity ID in the entity category map. 

        :param entity_check_errors: The entity_check_errors of this OrganisationCheckResultObject.
        :type entity_check_errors: Dict[str, ErrorObject]
        """

        self._entity_check_errors = entity_check_errors

    @property
    def entity_check_results(self):
        """Gets the entity_check_results of this OrganisationCheckResultObject.

        List of all entities check results (both individuals and organisations) other than outright errors. These objects will be referenced by entity ID in the entity category map. 

        :return: The entity_check_results of this OrganisationCheckResultObject.
        :rtype: Dict[str, CheckEntityCheckResultObject]
        """
        return self._entity_check_results

    @entity_check_results.setter
    def entity_check_results(self, entity_check_results):
        """Sets the entity_check_results of this OrganisationCheckResultObject.

        List of all entities check results (both individuals and organisations) other than outright errors. These objects will be referenced by entity ID in the entity category map. 

        :param entity_check_results: The entity_check_results of this OrganisationCheckResultObject.
        :type entity_check_results: Dict[str, CheckEntityCheckResultObject]
        """

        self._entity_check_results = entity_check_results

    @property
    def entity_id(self):
        """Gets the entity_id of this OrganisationCheckResultObject.

        The entityId of the organisation for which this result was created. 

        :return: The entity_id of this OrganisationCheckResultObject.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this OrganisationCheckResultObject.

        The entityId of the organisation for which this result was created. 

        :param entity_id: The entity_id of this OrganisationCheckResultObject.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def group_id(self):
        """Gets the group_id of this OrganisationCheckResultObject.

        The unique ID for grouping all new KYC/AML checks in this result. This is only for Frankie internal use. 

        :return: The group_id of this OrganisationCheckResultObject.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this OrganisationCheckResultObject.

        The unique ID for grouping all new KYC/AML checks in this result. This is only for Frankie internal use. 

        :param group_id: The group_id of this OrganisationCheckResultObject.
        :type group_id: str
        """

        self._group_id = group_id
