# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.benefits import Benefits
from openapi_server.models.conditions import Conditions
from openapi_server.models.contract import Contract
from openapi_server.models.fees import Fees
from openapi_server.models.name_value import NameValue
from openapi_server.models.plan_discounts import PlanDiscounts
from openapi_server.models.rates import Rates
from openapi_server.models.retailer import Retailer
from openapi_server import util


class Plan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefits: Benefits=None, conditions: Conditions=None, contract: Contract=None, default_offer_message: str=None, direct_debit_required: bool=None, discounts: PlanDiscounts=None, estimated_base_cost: float=None, estimated_saving: float=None, estimated_total_cost: float=None, fees_and_charges: Fees=None, green_options: NameValue=None, id: int=None, name: str=None, pay_on_time_required: bool=None, payment_options: NameValue=None, rates: Rates=None, retailer: Retailer=None, type: str=None, url: str=None):
        """Plan - a model defined in OpenAPI

        :param benefits: The benefits of this Plan.
        :param conditions: The conditions of this Plan.
        :param contract: The contract of this Plan.
        :param default_offer_message: The default_offer_message of this Plan.
        :param direct_debit_required: The direct_debit_required of this Plan.
        :param discounts: The discounts of this Plan.
        :param estimated_base_cost: The estimated_base_cost of this Plan.
        :param estimated_saving: The estimated_saving of this Plan.
        :param estimated_total_cost: The estimated_total_cost of this Plan.
        :param fees_and_charges: The fees_and_charges of this Plan.
        :param green_options: The green_options of this Plan.
        :param id: The id of this Plan.
        :param name: The name of this Plan.
        :param pay_on_time_required: The pay_on_time_required of this Plan.
        :param payment_options: The payment_options of this Plan.
        :param rates: The rates of this Plan.
        :param retailer: The retailer of this Plan.
        :param type: The type of this Plan.
        :param url: The url of this Plan.
        """
        self.openapi_types = {
            'benefits': Benefits,
            'conditions': Conditions,
            'contract': Contract,
            'default_offer_message': str,
            'direct_debit_required': bool,
            'discounts': PlanDiscounts,
            'estimated_base_cost': float,
            'estimated_saving': float,
            'estimated_total_cost': float,
            'fees_and_charges': Fees,
            'green_options': NameValue,
            'id': int,
            'name': str,
            'pay_on_time_required': bool,
            'payment_options': NameValue,
            'rates': Rates,
            'retailer': Retailer,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'benefits': 'benefits',
            'conditions': 'conditions',
            'contract': 'contract',
            'default_offer_message': 'defaultOfferMessage',
            'direct_debit_required': 'directDebitRequired',
            'discounts': 'discounts',
            'estimated_base_cost': 'estimatedBaseCost',
            'estimated_saving': 'estimatedSaving',
            'estimated_total_cost': 'estimatedTotalCost',
            'fees_and_charges': 'feesAndCharges',
            'green_options': 'greenOptions',
            'id': 'id',
            'name': 'name',
            'pay_on_time_required': 'payOnTimeRequired',
            'payment_options': 'paymentOptions',
            'rates': 'rates',
            'retailer': 'retailer',
            'type': 'type',
            'url': 'url'
        }

        self._benefits = benefits
        self._conditions = conditions
        self._contract = contract
        self._default_offer_message = default_offer_message
        self._direct_debit_required = direct_debit_required
        self._discounts = discounts
        self._estimated_base_cost = estimated_base_cost
        self._estimated_saving = estimated_saving
        self._estimated_total_cost = estimated_total_cost
        self._fees_and_charges = fees_and_charges
        self._green_options = green_options
        self._id = id
        self._name = name
        self._pay_on_time_required = pay_on_time_required
        self._payment_options = payment_options
        self._rates = rates
        self._retailer = retailer
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plan of this Plan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefits(self):
        """Gets the benefits of this Plan.


        :return: The benefits of this Plan.
        :rtype: Benefits
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this Plan.


        :param benefits: The benefits of this Plan.
        :type benefits: Benefits
        """

        self._benefits = benefits

    @property
    def conditions(self):
        """Gets the conditions of this Plan.


        :return: The conditions of this Plan.
        :rtype: Conditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Plan.


        :param conditions: The conditions of this Plan.
        :type conditions: Conditions
        """

        self._conditions = conditions

    @property
    def contract(self):
        """Gets the contract of this Plan.


        :return: The contract of this Plan.
        :rtype: Contract
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this Plan.


        :param contract: The contract of this Plan.
        :type contract: Contract
        """

        self._contract = contract

    @property
    def default_offer_message(self):
        """Gets the default_offer_message of this Plan.

        Default Offer (DMO/VDO) text to be displayed for this plan

        :return: The default_offer_message of this Plan.
        :rtype: str
        """
        return self._default_offer_message

    @default_offer_message.setter
    def default_offer_message(self, default_offer_message):
        """Sets the default_offer_message of this Plan.

        Default Offer (DMO/VDO) text to be displayed for this plan

        :param default_offer_message: The default_offer_message of this Plan.
        :type default_offer_message: str
        """
        if default_offer_message is None:
            raise ValueError("Invalid value for `default_offer_message`, must not be `None`")

        self._default_offer_message = default_offer_message

    @property
    def direct_debit_required(self):
        """Gets the direct_debit_required of this Plan.

        Is payment by direct debit required in order to subscribe to this plan

        :return: The direct_debit_required of this Plan.
        :rtype: bool
        """
        return self._direct_debit_required

    @direct_debit_required.setter
    def direct_debit_required(self, direct_debit_required):
        """Sets the direct_debit_required of this Plan.

        Is payment by direct debit required in order to subscribe to this plan

        :param direct_debit_required: The direct_debit_required of this Plan.
        :type direct_debit_required: bool
        """
        if direct_debit_required is None:
            raise ValueError("Invalid value for `direct_debit_required`, must not be `None`")

        self._direct_debit_required = direct_debit_required

    @property
    def discounts(self):
        """Gets the discounts of this Plan.


        :return: The discounts of this Plan.
        :rtype: PlanDiscounts
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Plan.


        :param discounts: The discounts of this Plan.
        :type discounts: PlanDiscounts
        """

        self._discounts = discounts

    @property
    def estimated_base_cost(self):
        """Gets the estimated_base_cost of this Plan.

        Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.

        :return: The estimated_base_cost of this Plan.
        :rtype: float
        """
        return self._estimated_base_cost

    @estimated_base_cost.setter
    def estimated_base_cost(self, estimated_base_cost):
        """Sets the estimated_base_cost of this Plan.

        Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.

        :param estimated_base_cost: The estimated_base_cost of this Plan.
        :type estimated_base_cost: float
        """
        if estimated_base_cost is None:
            raise ValueError("Invalid value for `estimated_base_cost`, must not be `None`")

        self._estimated_base_cost = estimated_base_cost

    @property
    def estimated_saving(self):
        """Gets the estimated_saving of this Plan.

        The estimated saving the customer could have realised if they had been on this plan during the billing period

        :return: The estimated_saving of this Plan.
        :rtype: float
        """
        return self._estimated_saving

    @estimated_saving.setter
    def estimated_saving(self, estimated_saving):
        """Sets the estimated_saving of this Plan.

        The estimated saving the customer could have realised if they had been on this plan during the billing period

        :param estimated_saving: The estimated_saving of this Plan.
        :type estimated_saving: float
        """
        if estimated_saving is None:
            raise ValueError("Invalid value for `estimated_saving`, must not be `None`")

        self._estimated_saving = estimated_saving

    @property
    def estimated_total_cost(self):
        """Gets the estimated_total_cost of this Plan.

        Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.

        :return: The estimated_total_cost of this Plan.
        :rtype: float
        """
        return self._estimated_total_cost

    @estimated_total_cost.setter
    def estimated_total_cost(self, estimated_total_cost):
        """Sets the estimated_total_cost of this Plan.

        Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.

        :param estimated_total_cost: The estimated_total_cost of this Plan.
        :type estimated_total_cost: float
        """
        if estimated_total_cost is None:
            raise ValueError("Invalid value for `estimated_total_cost`, must not be `None`")

        self._estimated_total_cost = estimated_total_cost

    @property
    def fees_and_charges(self):
        """Gets the fees_and_charges of this Plan.


        :return: The fees_and_charges of this Plan.
        :rtype: Fees
        """
        return self._fees_and_charges

    @fees_and_charges.setter
    def fees_and_charges(self, fees_and_charges):
        """Sets the fees_and_charges of this Plan.


        :param fees_and_charges: The fees_and_charges of this Plan.
        :type fees_and_charges: Fees
        """

        self._fees_and_charges = fees_and_charges

    @property
    def green_options(self):
        """Gets the green_options of this Plan.


        :return: The green_options of this Plan.
        :rtype: NameValue
        """
        return self._green_options

    @green_options.setter
    def green_options(self, green_options):
        """Sets the green_options of this Plan.


        :param green_options: The green_options of this Plan.
        :type green_options: NameValue
        """

        self._green_options = green_options

    @property
    def id(self):
        """Gets the id of this Plan.

        Unique identifier for this plan. This ID is passed when calling the switch API.

        :return: The id of this Plan.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.

        Unique identifier for this plan. This ID is passed when calling the switch API.

        :param id: The id of this Plan.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Plan.

        Name of the plan

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.

        Name of the plan

        :param name: The name of this Plan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pay_on_time_required(self):
        """Gets the pay_on_time_required of this Plan.

        Is pay on time required in order to subscribe to this plan

        :return: The pay_on_time_required of this Plan.
        :rtype: bool
        """
        return self._pay_on_time_required

    @pay_on_time_required.setter
    def pay_on_time_required(self, pay_on_time_required):
        """Sets the pay_on_time_required of this Plan.

        Is pay on time required in order to subscribe to this plan

        :param pay_on_time_required: The pay_on_time_required of this Plan.
        :type pay_on_time_required: bool
        """
        if pay_on_time_required is None:
            raise ValueError("Invalid value for `pay_on_time_required`, must not be `None`")

        self._pay_on_time_required = pay_on_time_required

    @property
    def payment_options(self):
        """Gets the payment_options of this Plan.


        :return: The payment_options of this Plan.
        :rtype: NameValue
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this Plan.


        :param payment_options: The payment_options of this Plan.
        :type payment_options: NameValue
        """

        self._payment_options = payment_options

    @property
    def rates(self):
        """Gets the rates of this Plan.


        :return: The rates of this Plan.
        :rtype: Rates
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this Plan.


        :param rates: The rates of this Plan.
        :type rates: Rates
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates

    @property
    def retailer(self):
        """Gets the retailer of this Plan.


        :return: The retailer of this Plan.
        :rtype: Retailer
        """
        return self._retailer

    @retailer.setter
    def retailer(self, retailer):
        """Sets the retailer of this Plan.


        :param retailer: The retailer of this Plan.
        :type retailer: Retailer
        """
        if retailer is None:
            raise ValueError("Invalid value for `retailer`, must not be `None`")

        self._retailer = retailer

    @property
    def type(self):
        """Gets the type of this Plan.

        The type of energy plan * `SR` - Single Rate * `TOU` - Time Of Use

        :return: The type of this Plan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Plan.

        The type of energy plan * `SR` - Single Rate * `TOU` - Time Of Use

        :param type: The type of this Plan.
        :type type: str
        """
        allowed_values = ["SR", "TOU"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Plan.

        Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))

        :return: The url of this Plan.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Plan.

        Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))

        :param url: The url of this Plan.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
