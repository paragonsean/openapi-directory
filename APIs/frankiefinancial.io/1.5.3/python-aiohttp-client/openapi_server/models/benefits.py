# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.benefits_discounts_inner import BenefitsDiscountsInner
from openapi_server.models.benefits_incentives_inner import BenefitsIncentivesInner
from openapi_server import util


class Benefits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discounts: List[BenefitsDiscountsInner]=None, incentives: List[BenefitsIncentivesInner]=None, name: str=None):
        """Benefits - a model defined in OpenAPI

        :param discounts: The discounts of this Benefits.
        :param incentives: The incentives of this Benefits.
        :param name: The name of this Benefits.
        """
        self.openapi_types = {
            'discounts': List[BenefitsDiscountsInner],
            'incentives': List[BenefitsIncentivesInner],
            'name': str
        }

        self.attribute_map = {
            'discounts': 'discounts',
            'incentives': 'incentives',
            'name': 'name'
        }

        self._discounts = discounts
        self._incentives = incentives
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Benefits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Benefits of this Benefits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discounts(self):
        """Gets the discounts of this Benefits.

        Discounts available for this plan

        :return: The discounts of this Benefits.
        :rtype: List[BenefitsDiscountsInner]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Benefits.

        Discounts available for this plan

        :param discounts: The discounts of this Benefits.
        :type discounts: List[BenefitsDiscountsInner]
        """
        if discounts is None:
            raise ValueError("Invalid value for `discounts`, must not be `None`")

        self._discounts = discounts

    @property
    def incentives(self):
        """Gets the incentives of this Benefits.

        Inventives available for this plan

        :return: The incentives of this Benefits.
        :rtype: List[BenefitsIncentivesInner]
        """
        return self._incentives

    @incentives.setter
    def incentives(self, incentives):
        """Sets the incentives of this Benefits.

        Inventives available for this plan

        :param incentives: The incentives of this Benefits.
        :type incentives: List[BenefitsIncentivesInner]
        """
        if incentives is None:
            raise ValueError("Invalid value for `incentives`, must not be `None`")

        self._incentives = incentives

    @property
    def name(self):
        """Gets the name of this Benefits.

        Name of this section when rendering

        :return: The name of this Benefits.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Benefits.

        Name of this section when rendering

        :param name: The name of this Benefits.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
