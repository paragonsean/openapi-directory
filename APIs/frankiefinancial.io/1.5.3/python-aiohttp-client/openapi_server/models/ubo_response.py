# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_details import BusinessDetails
from openapi_server.models.individual_data import IndividualData
from openapi_server.models.issue_list_items import IssueListItems
from openapi_server.models.non_individual_beneficial_owner import NonIndividualBeneficialOwner
from openapi_server.models.screening_result import ScreeningResult
from openapi_server.models.supplied_data import SuppliedData
from openapi_server.models.supplied_data_matches import SuppliedDataMatches
from openapi_server import util


class UBOResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asic_search_timestamp: datetime=None, business_details: BusinessDetails=None, business_screening_result: ScreeningResult=None, error_message: str=None, issues_list: List[IssueListItems]=None, non_individual_beneficial_owners: List[NonIndividualBeneficialOwner]=None, officeholders: List[IndividualData]=None, supplied_data: SuppliedData=None, supplied_data_matches: SuppliedDataMatches=None, ubo_report: str=None, ultimate_beneficial_owners: List[IndividualData]=None):
        """UBOResponse - a model defined in OpenAPI

        :param asic_search_timestamp: The asic_search_timestamp of this UBOResponse.
        :param business_details: The business_details of this UBOResponse.
        :param business_screening_result: The business_screening_result of this UBOResponse.
        :param error_message: The error_message of this UBOResponse.
        :param issues_list: The issues_list of this UBOResponse.
        :param non_individual_beneficial_owners: The non_individual_beneficial_owners of this UBOResponse.
        :param officeholders: The officeholders of this UBOResponse.
        :param supplied_data: The supplied_data of this UBOResponse.
        :param supplied_data_matches: The supplied_data_matches of this UBOResponse.
        :param ubo_report: The ubo_report of this UBOResponse.
        :param ultimate_beneficial_owners: The ultimate_beneficial_owners of this UBOResponse.
        """
        self.openapi_types = {
            'asic_search_timestamp': datetime,
            'business_details': BusinessDetails,
            'business_screening_result': ScreeningResult,
            'error_message': str,
            'issues_list': List[IssueListItems],
            'non_individual_beneficial_owners': List[NonIndividualBeneficialOwner],
            'officeholders': List[IndividualData],
            'supplied_data': SuppliedData,
            'supplied_data_matches': SuppliedDataMatches,
            'ubo_report': str,
            'ultimate_beneficial_owners': List[IndividualData]
        }

        self.attribute_map = {
            'asic_search_timestamp': 'asic_search_timestamp',
            'business_details': 'business_details',
            'business_screening_result': 'business_screening_result',
            'error_message': 'error_message',
            'issues_list': 'issues_list',
            'non_individual_beneficial_owners': 'non_individual_beneficial_owners',
            'officeholders': 'officeholders',
            'supplied_data': 'supplied_data',
            'supplied_data_matches': 'supplied_data_matches',
            'ubo_report': 'ubo_report',
            'ultimate_beneficial_owners': 'ultimate_beneficial_owners'
        }

        self._asic_search_timestamp = asic_search_timestamp
        self._business_details = business_details
        self._business_screening_result = business_screening_result
        self._error_message = error_message
        self._issues_list = issues_list
        self._non_individual_beneficial_owners = non_individual_beneficial_owners
        self._officeholders = officeholders
        self._supplied_data = supplied_data
        self._supplied_data_matches = supplied_data_matches
        self._ubo_report = ubo_report
        self._ultimate_beneficial_owners = ultimate_beneficial_owners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UBOResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UBOResponse of this UBOResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asic_search_timestamp(self):
        """Gets the asic_search_timestamp of this UBOResponse.

        If an ASIC search was conducted, what was the date/time in RFC-3339 format 

        :return: The asic_search_timestamp of this UBOResponse.
        :rtype: datetime
        """
        return self._asic_search_timestamp

    @asic_search_timestamp.setter
    def asic_search_timestamp(self, asic_search_timestamp):
        """Sets the asic_search_timestamp of this UBOResponse.

        If an ASIC search was conducted, what was the date/time in RFC-3339 format 

        :param asic_search_timestamp: The asic_search_timestamp of this UBOResponse.
        :type asic_search_timestamp: datetime
        """

        self._asic_search_timestamp = asic_search_timestamp

    @property
    def business_details(self):
        """Gets the business_details of this UBOResponse.


        :return: The business_details of this UBOResponse.
        :rtype: BusinessDetails
        """
        return self._business_details

    @business_details.setter
    def business_details(self, business_details):
        """Sets the business_details of this UBOResponse.


        :param business_details: The business_details of this UBOResponse.
        :type business_details: BusinessDetails
        """

        self._business_details = business_details

    @property
    def business_screening_result(self):
        """Gets the business_screening_result of this UBOResponse.


        :return: The business_screening_result of this UBOResponse.
        :rtype: ScreeningResult
        """
        return self._business_screening_result

    @business_screening_result.setter
    def business_screening_result(self, business_screening_result):
        """Sets the business_screening_result of this UBOResponse.


        :param business_screening_result: The business_screening_result of this UBOResponse.
        :type business_screening_result: ScreeningResult
        """

        self._business_screening_result = business_screening_result

    @property
    def error_message(self):
        """Gets the error_message of this UBOResponse.

        Only populated if there was an error whilst trying to initiate the UBO check.  Signifies that no other result data will be supplied 

        :return: The error_message of this UBOResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this UBOResponse.

        Only populated if there was an error whilst trying to initiate the UBO check.  Signifies that no other result data will be supplied 

        :param error_message: The error_message of this UBOResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def issues_list(self):
        """Gets the issues_list of this UBOResponse.

        A list of issues encountered whilst processing the UBO request and subsequent KYC/AML checks. 

        :return: The issues_list of this UBOResponse.
        :rtype: List[IssueListItems]
        """
        return self._issues_list

    @issues_list.setter
    def issues_list(self, issues_list):
        """Sets the issues_list of this UBOResponse.

        A list of issues encountered whilst processing the UBO request and subsequent KYC/AML checks. 

        :param issues_list: The issues_list of this UBOResponse.
        :type issues_list: List[IssueListItems]
        """

        self._issues_list = issues_list

    @property
    def non_individual_beneficial_owners(self):
        """Gets the non_individual_beneficial_owners of this UBOResponse.

        A list of organisations who have been determined to own a (potentially) beneficial interest the company.  The presence of non_individual_beneficial_owners indicates that not all individual ultimate beneficial owners could be determined.  Examples may include public companies, listed companies, foreign companies, corporate trusts or other entities whose beneficial owners are not readily available. 

        :return: The non_individual_beneficial_owners of this UBOResponse.
        :rtype: List[NonIndividualBeneficialOwner]
        """
        return self._non_individual_beneficial_owners

    @non_individual_beneficial_owners.setter
    def non_individual_beneficial_owners(self, non_individual_beneficial_owners):
        """Sets the non_individual_beneficial_owners of this UBOResponse.

        A list of organisations who have been determined to own a (potentially) beneficial interest the company.  The presence of non_individual_beneficial_owners indicates that not all individual ultimate beneficial owners could be determined.  Examples may include public companies, listed companies, foreign companies, corporate trusts or other entities whose beneficial owners are not readily available. 

        :param non_individual_beneficial_owners: The non_individual_beneficial_owners of this UBOResponse.
        :type non_individual_beneficial_owners: List[NonIndividualBeneficialOwner]
        """

        self._non_individual_beneficial_owners = non_individual_beneficial_owners

    @property
    def officeholders(self):
        """Gets the officeholders of this UBOResponse.

        A list of individuals who serve as current office holders the company 

        :return: The officeholders of this UBOResponse.
        :rtype: List[IndividualData]
        """
        return self._officeholders

    @officeholders.setter
    def officeholders(self, officeholders):
        """Sets the officeholders of this UBOResponse.

        A list of individuals who serve as current office holders the company 

        :param officeholders: The officeholders of this UBOResponse.
        :type officeholders: List[IndividualData]
        """

        self._officeholders = officeholders

    @property
    def supplied_data(self):
        """Gets the supplied_data of this UBOResponse.


        :return: The supplied_data of this UBOResponse.
        :rtype: SuppliedData
        """
        return self._supplied_data

    @supplied_data.setter
    def supplied_data(self, supplied_data):
        """Sets the supplied_data of this UBOResponse.


        :param supplied_data: The supplied_data of this UBOResponse.
        :type supplied_data: SuppliedData
        """
        if supplied_data is None:
            raise ValueError("Invalid value for `supplied_data`, must not be `None`")

        self._supplied_data = supplied_data

    @property
    def supplied_data_matches(self):
        """Gets the supplied_data_matches of this UBOResponse.


        :return: The supplied_data_matches of this UBOResponse.
        :rtype: SuppliedDataMatches
        """
        return self._supplied_data_matches

    @supplied_data_matches.setter
    def supplied_data_matches(self, supplied_data_matches):
        """Sets the supplied_data_matches of this UBOResponse.


        :param supplied_data_matches: The supplied_data_matches of this UBOResponse.
        :type supplied_data_matches: SuppliedDataMatches
        """

        self._supplied_data_matches = supplied_data_matches

    @property
    def ubo_report(self):
        """Gets the ubo_report of this UBOResponse.

        The full URI of the UBO report PDF created as a part of this process (if requested) 

        :return: The ubo_report of this UBOResponse.
        :rtype: str
        """
        return self._ubo_report

    @ubo_report.setter
    def ubo_report(self, ubo_report):
        """Sets the ubo_report of this UBOResponse.

        The full URI of the UBO report PDF created as a part of this process (if requested) 

        :param ubo_report: The ubo_report of this UBOResponse.
        :type ubo_report: str
        """

        self._ubo_report = ubo_report

    @property
    def ultimate_beneficial_owners(self):
        """Gets the ultimate_beneficial_owners of this UBOResponse.

        A list of individuals who have been determined to own, either directly or indirectly, 25% or more of the company 

        :return: The ultimate_beneficial_owners of this UBOResponse.
        :rtype: List[IndividualData]
        """
        return self._ultimate_beneficial_owners

    @ultimate_beneficial_owners.setter
    def ultimate_beneficial_owners(self, ultimate_beneficial_owners):
        """Sets the ultimate_beneficial_owners of this UBOResponse.

        A list of individuals who have been determined to own, either directly or indirectly, 25% or more of the company 

        :param ultimate_beneficial_owners: The ultimate_beneficial_owners of this UBOResponse.
        :type ultimate_beneficial_owners: List[IndividualData]
        """

        self._ultimate_beneficial_owners = ultimate_beneficial_owners
