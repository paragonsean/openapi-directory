# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Directorship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointed_date: str=None, company_name: str=None, company_number: str=None, company_status: str=None, function: str=None):
        """Directorship - a model defined in OpenAPI

        :param appointed_date: The appointed_date of this Directorship.
        :param company_name: The company_name of this Directorship.
        :param company_number: The company_number of this Directorship.
        :param company_status: The company_status of this Directorship.
        :param function: The function of this Directorship.
        """
        self.openapi_types = {
            'appointed_date': str,
            'company_name': str,
            'company_number': str,
            'company_status': str,
            'function': str
        }

        self.attribute_map = {
            'appointed_date': 'appointedDate',
            'company_name': 'companyName',
            'company_number': 'companyNumber',
            'company_status': 'companyStatus',
            'function': 'function'
        }

        self._appointed_date = appointed_date
        self._company_name = company_name
        self._company_number = company_number
        self._company_status = company_status
        self._function = function

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Directorship':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Directorship of this Directorship.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointed_date(self):
        """Gets the appointed_date of this Directorship.


        :return: The appointed_date of this Directorship.
        :rtype: str
        """
        return self._appointed_date

    @appointed_date.setter
    def appointed_date(self, appointed_date):
        """Sets the appointed_date of this Directorship.


        :param appointed_date: The appointed_date of this Directorship.
        :type appointed_date: str
        """

        self._appointed_date = appointed_date

    @property
    def company_name(self):
        """Gets the company_name of this Directorship.


        :return: The company_name of this Directorship.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Directorship.


        :param company_name: The company_name of this Directorship.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_number(self):
        """Gets the company_number of this Directorship.


        :return: The company_number of this Directorship.
        :rtype: str
        """
        return self._company_number

    @company_number.setter
    def company_number(self, company_number):
        """Sets the company_number of this Directorship.


        :param company_number: The company_number of this Directorship.
        :type company_number: str
        """

        self._company_number = company_number

    @property
    def company_status(self):
        """Gets the company_status of this Directorship.


        :return: The company_status of this Directorship.
        :rtype: str
        """
        return self._company_status

    @company_status.setter
    def company_status(self, company_status):
        """Sets the company_status of this Directorship.


        :param company_status: The company_status of this Directorship.
        :type company_status: str
        """

        self._company_status = company_status

    @property
    def function(self):
        """Gets the function of this Directorship.


        :return: The function of this Directorship.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Directorship.


        :param function: The function of this Directorship.
        :type function: str
        """

        self._function = function
