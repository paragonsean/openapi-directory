# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriversLicence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_date: str=None, number: str=None, state: str=None, type: str=None):
        """DriversLicence - a model defined in OpenAPI

        :param expiry_date: The expiry_date of this DriversLicence.
        :param number: The number of this DriversLicence.
        :param state: The state of this DriversLicence.
        :param type: The type of this DriversLicence.
        """
        self.openapi_types = {
            'expiry_date': str,
            'number': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'expiry_date': 'expiryDate',
            'number': 'number',
            'state': 'state',
            'type': 'type'
        }

        self._expiry_date = expiry_date
        self._number = number
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriversLicence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriversLicence of this DriversLicence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_date(self):
        """Gets the expiry_date of this DriversLicence.

        Expiry date of drivers licence

        :return: The expiry_date of this DriversLicence.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this DriversLicence.

        Expiry date of drivers licence

        :param expiry_date: The expiry_date of this DriversLicence.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def number(self):
        """Gets the number of this DriversLicence.

        Drivers Licence Number

        :return: The number of this DriversLicence.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DriversLicence.

        Drivers Licence Number

        :param number: The number of this DriversLicence.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def state(self):
        """Gets the state of this DriversLicence.

        State of Issue

        :return: The state of this DriversLicence.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DriversLicence.

        State of Issue

        :param state: The state of this DriversLicence.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def type(self):
        """Gets the type of this DriversLicence.

        Document identifier

        :return: The type of this DriversLicence.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DriversLicence.

        Document identifier

        :param type: The type of this DriversLicence.
        :type type: str
        """
        allowed_values = ["driverslicence"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
