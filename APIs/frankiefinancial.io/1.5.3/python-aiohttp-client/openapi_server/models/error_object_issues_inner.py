# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorObjectIssuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue: str=None, issue_location: str=None):
        """ErrorObjectIssuesInner - a model defined in OpenAPI

        :param issue: The issue of this ErrorObjectIssuesInner.
        :param issue_location: The issue_location of this ErrorObjectIssuesInner.
        """
        self.openapi_types = {
            'issue': str,
            'issue_location': str
        }

        self.attribute_map = {
            'issue': 'issue',
            'issue_location': 'issueLocation'
        }

        self._issue = issue
        self._issue_location = issue_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorObjectIssuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorObject_issues_inner of this ErrorObjectIssuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue(self):
        """Gets the issue of this ErrorObjectIssuesInner.

        Description of the problem

        :return: The issue of this ErrorObjectIssuesInner.
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this ErrorObjectIssuesInner.

        Description of the problem

        :param issue: The issue of this ErrorObjectIssuesInner.
        :type issue: str
        """

        self._issue = issue

    @property
    def issue_location(self):
        """Gets the issue_location of this ErrorObjectIssuesInner.

        Will describe the field or data location of the issue

        :return: The issue_location of this ErrorObjectIssuesInner.
        :rtype: str
        """
        return self._issue_location

    @issue_location.setter
    def issue_location(self, issue_location):
        """Sets the issue_location of this ErrorObjectIssuesInner.

        Will describe the field or data location of the issue

        :param issue_location: The issue_location of this ErrorObjectIssuesInner.
        :type issue_location: str
        """
        if issue_location is None:
            raise ValueError("Invalid value for `issue_location`, must not be `None`")

        self._issue_location = issue_location
