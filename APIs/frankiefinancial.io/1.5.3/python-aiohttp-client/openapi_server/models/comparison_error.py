# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComparisonError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_date: str=None, correlation_id: str=None, error_code: int=None, message: str=None, version: str=None):
        """ComparisonError - a model defined in OpenAPI

        :param comparison_date: The comparison_date of this ComparisonError.
        :param correlation_id: The correlation_id of this ComparisonError.
        :param error_code: The error_code of this ComparisonError.
        :param message: The message of this ComparisonError.
        :param version: The version of this ComparisonError.
        """
        self.openapi_types = {
            'comparison_date': str,
            'correlation_id': str,
            'error_code': int,
            'message': str,
            'version': str
        }

        self.attribute_map = {
            'comparison_date': 'comparisonDate',
            'correlation_id': 'correlationId',
            'error_code': 'errorCode',
            'message': 'message',
            'version': 'version'
        }

        self._comparison_date = comparison_date
        self._correlation_id = correlation_id
        self._error_code = error_code
        self._message = message
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComparisonError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComparisonError of this ComparisonError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_date(self):
        """Gets the comparison_date of this ComparisonError.

        Timestamp of when the attempted comparison took place

        :return: The comparison_date of this ComparisonError.
        :rtype: str
        """
        return self._comparison_date

    @comparison_date.setter
    def comparison_date(self, comparison_date):
        """Sets the comparison_date of this ComparisonError.

        Timestamp of when the attempted comparison took place

        :param comparison_date: The comparison_date of this ComparisonError.
        :type comparison_date: str
        """
        if comparison_date is None:
            raise ValueError("Invalid value for `comparison_date`, must not be `None`")

        self._comparison_date = comparison_date

    @property
    def correlation_id(self):
        """Gets the correlation_id of this ComparisonError.

        The correlationId as passed in the request

        :return: The correlation_id of this ComparisonError.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this ComparisonError.

        The correlationId as passed in the request

        :param correlation_id: The correlation_id of this ComparisonError.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def error_code(self):
        """Gets the error_code of this ComparisonError.

        * `1000` - Document not recognised (i.e. not valid pdf or image) * `1001` - Bill is not SME or Domestic * `1004` - Bill is gas (if to be excluded) * `1005` - Template Not Found – The document was a pdf but service did not recognise the uploaded document against any of it’s templates * `1008` - Unsupported distributor – bill is from jurisdiction that is unsupported * `1009` - Unsupported distributor – bill is from jurisdiction that is unsupported * `1030` - Invoice from date is missing * `1031` - Invoice to date is missing * `1033` - Supply address is missing * `1039` - NMI is missing * `1041` - Bill is a predictive plan making comparison hard * `1044` - Bill is on embedded network * `1045` - Incompatible charge item – manual comparison needed * `1062` - C&I Bill loaded * `1080` - API failed to reconcile bill usually meaning that not all cost items were picked up 

        :return: The error_code of this ComparisonError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ComparisonError.

        * `1000` - Document not recognised (i.e. not valid pdf or image) * `1001` - Bill is not SME or Domestic * `1004` - Bill is gas (if to be excluded) * `1005` - Template Not Found – The document was a pdf but service did not recognise the uploaded document against any of it’s templates * `1008` - Unsupported distributor – bill is from jurisdiction that is unsupported * `1009` - Unsupported distributor – bill is from jurisdiction that is unsupported * `1030` - Invoice from date is missing * `1031` - Invoice to date is missing * `1033` - Supply address is missing * `1039` - NMI is missing * `1041` - Bill is a predictive plan making comparison hard * `1044` - Bill is on embedded network * `1045` - Incompatible charge item – manual comparison needed * `1062` - C&I Bill loaded * `1080` - API failed to reconcile bill usually meaning that not all cost items were picked up 

        :param error_code: The error_code of this ComparisonError.
        :type error_code: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this ComparisonError.

        Description of error that can be displayed as user feedback. e.g. \"Uploaded document not a PDF\"

        :return: The message of this ComparisonError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ComparisonError.

        Description of error that can be displayed as user feedback. e.g. \"Uploaded document not a PDF\"

        :param message: The message of this ComparisonError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def version(self):
        """Gets the version of this ComparisonError.

        Version of the API on which the error took place. This value should be reported with any issue raised.

        :return: The version of this ComparisonError.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComparisonError.

        Version of the API on which the error took place. This value should be reported with any issue raised.

        :param version: The version of this ComparisonError.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
