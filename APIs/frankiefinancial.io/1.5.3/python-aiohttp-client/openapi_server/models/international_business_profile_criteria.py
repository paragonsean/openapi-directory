# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternationalBusinessProfileCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_code: str=None, country: str=None):
        """InternationalBusinessProfileCriteria - a model defined in OpenAPI

        :param company_code: The company_code of this InternationalBusinessProfileCriteria.
        :param country: The country of this InternationalBusinessProfileCriteria.
        """
        self.openapi_types = {
            'company_code': str,
            'country': str
        }

        self.attribute_map = {
            'company_code': 'company_code',
            'country': 'country'
        }

        self._company_code = company_code
        self._country = country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternationalBusinessProfileCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternationalBusinessProfileCriteria of this InternationalBusinessProfileCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_code(self):
        """Gets the company_code of this InternationalBusinessProfileCriteria.

        This is the company number returned in the search results  (InternationalBusinessSearchResponse.Companies.CompanyDTO[n].Code) 

        :return: The company_code of this InternationalBusinessProfileCriteria.
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """Sets the company_code of this InternationalBusinessProfileCriteria.

        This is the company number returned in the search results  (InternationalBusinessSearchResponse.Companies.CompanyDTO[n].Code) 

        :param company_code: The company_code of this InternationalBusinessProfileCriteria.
        :type company_code: str
        """

        self._company_code = company_code

    @property
    def country(self):
        """Gets the country of this InternationalBusinessProfileCriteria.

        The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 

        :return: The country of this InternationalBusinessProfileCriteria.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InternationalBusinessProfileCriteria.

        The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 

        :param country: The country of this InternationalBusinessProfileCriteria.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country
