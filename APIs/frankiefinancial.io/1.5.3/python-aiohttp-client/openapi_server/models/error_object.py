# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_object_issues_inner import ErrorObjectIssuesInner
from openapi_server import util


class ErrorObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: str=None, error_code: str=None, error_msg: str=None, http_status_code: int=None, issues: List[ErrorObjectIssuesInner]=None, request_id: str=None):
        """ErrorObject - a model defined in OpenAPI

        :param commit: The commit of this ErrorObject.
        :param error_code: The error_code of this ErrorObject.
        :param error_msg: The error_msg of this ErrorObject.
        :param http_status_code: The http_status_code of this ErrorObject.
        :param issues: The issues of this ErrorObject.
        :param request_id: The request_id of this ErrorObject.
        """
        self.openapi_types = {
            'commit': str,
            'error_code': str,
            'error_msg': str,
            'http_status_code': int,
            'issues': List[ErrorObjectIssuesInner],
            'request_id': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'error_code': 'errorCode',
            'error_msg': 'errorMsg',
            'http_status_code': 'httpStatusCode',
            'issues': 'issues',
            'request_id': 'requestId'
        }

        self._commit = commit
        self._error_code = error_code
        self._error_msg = error_msg
        self._http_status_code = http_status_code
        self._issues = issues
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorObject of this ErrorObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this ErrorObject.

        Server version indication

        :return: The commit of this ErrorObject.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this ErrorObject.

        Server version indication

        :param commit: The commit of this ErrorObject.
        :type commit: str
        """

        self._commit = commit

    @property
    def error_code(self):
        """Gets the error_code of this ErrorObject.

        Frankie error code

        :return: The error_code of this ErrorObject.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorObject.

        Frankie error code

        :param error_code: The error_code of this ErrorObject.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_msg(self):
        """Gets the error_msg of this ErrorObject.

        Will describe the error

        :return: The error_msg of this ErrorObject.
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this ErrorObject.

        Will describe the error

        :param error_msg: The error_msg of this ErrorObject.
        :type error_msg: str
        """
        if error_msg is None:
            raise ValueError("Invalid value for `error_msg`, must not be `None`")

        self._error_msg = error_msg

    @property
    def http_status_code(self):
        """Gets the http_status_code of this ErrorObject.

        Deprecated: HTTP status code. Same as that which is passed back in the header. 

        :return: The http_status_code of this ErrorObject.
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this ErrorObject.

        Deprecated: HTTP status code. Same as that which is passed back in the header. 

        :param http_status_code: The http_status_code of this ErrorObject.
        :type http_status_code: int
        """

        self._http_status_code = http_status_code

    @property
    def issues(self):
        """Gets the issues of this ErrorObject.


        :return: The issues of this ErrorObject.
        :rtype: List[ErrorObjectIssuesInner]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ErrorObject.


        :param issues: The issues of this ErrorObject.
        :type issues: List[ErrorObjectIssuesInner]
        """

        self._issues = issues

    @property
    def request_id(self):
        """Gets the request_id of this ErrorObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this ErrorObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ErrorObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this ErrorObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
