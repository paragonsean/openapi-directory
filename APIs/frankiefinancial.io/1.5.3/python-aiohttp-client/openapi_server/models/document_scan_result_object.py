# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_object import EntityObject
from openapi_server.models.identity_document_object import IdentityDocumentObject
from openapi_server.models.process_result_object import ProcessResultObject
from openapi_server import util


class DocumentScanResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extracted_document: IdentityDocumentObject=None, extracted_entity: EntityObject=None, process_result: ProcessResultObject=None, request_id: str=None):
        """DocumentScanResultObject - a model defined in OpenAPI

        :param extracted_document: The extracted_document of this DocumentScanResultObject.
        :param extracted_entity: The extracted_entity of this DocumentScanResultObject.
        :param process_result: The process_result of this DocumentScanResultObject.
        :param request_id: The request_id of this DocumentScanResultObject.
        """
        self.openapi_types = {
            'extracted_document': IdentityDocumentObject,
            'extracted_entity': EntityObject,
            'process_result': ProcessResultObject,
            'request_id': str
        }

        self.attribute_map = {
            'extracted_document': 'extractedDocument',
            'extracted_entity': 'extractedEntity',
            'process_result': 'processResult',
            'request_id': 'requestId'
        }

        self._extracted_document = extracted_document
        self._extracted_entity = extracted_entity
        self._process_result = process_result
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentScanResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentScanResultObject of this DocumentScanResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extracted_document(self):
        """Gets the extracted_document of this DocumentScanResultObject.


        :return: The extracted_document of this DocumentScanResultObject.
        :rtype: IdentityDocumentObject
        """
        return self._extracted_document

    @extracted_document.setter
    def extracted_document(self, extracted_document):
        """Sets the extracted_document of this DocumentScanResultObject.


        :param extracted_document: The extracted_document of this DocumentScanResultObject.
        :type extracted_document: IdentityDocumentObject
        """

        self._extracted_document = extracted_document

    @property
    def extracted_entity(self):
        """Gets the extracted_entity of this DocumentScanResultObject.


        :return: The extracted_entity of this DocumentScanResultObject.
        :rtype: EntityObject
        """
        return self._extracted_entity

    @extracted_entity.setter
    def extracted_entity(self, extracted_entity):
        """Sets the extracted_entity of this DocumentScanResultObject.


        :param extracted_entity: The extracted_entity of this DocumentScanResultObject.
        :type extracted_entity: EntityObject
        """

        self._extracted_entity = extracted_entity

    @property
    def process_result(self):
        """Gets the process_result of this DocumentScanResultObject.


        :return: The process_result of this DocumentScanResultObject.
        :rtype: ProcessResultObject
        """
        return self._process_result

    @process_result.setter
    def process_result(self, process_result):
        """Sets the process_result of this DocumentScanResultObject.


        :param process_result: The process_result of this DocumentScanResultObject.
        :type process_result: ProcessResultObject
        """
        if process_result is None:
            raise ValueError("Invalid value for `process_result`, must not be `None`")

        self._process_result = process_result

    @property
    def request_id(self):
        """Gets the request_id of this DocumentScanResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this DocumentScanResultObject.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this DocumentScanResultObject.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this DocumentScanResultObject.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
