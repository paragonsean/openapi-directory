# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_object import EntityObject
from openapi_server import util


class OwnershipQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organisation: EntityObject=None):
        """OwnershipQuery - a model defined in OpenAPI

        :param organisation: The organisation of this OwnershipQuery.
        """
        self.openapi_types = {
            'organisation': EntityObject
        }

        self.attribute_map = {
            'organisation': 'organisation'
        }

        self._organisation = organisation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnershipQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnershipQuery of this OwnershipQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organisation(self):
        """Gets the organisation of this OwnershipQuery.


        :return: The organisation of this OwnershipQuery.
        :rtype: EntityObject
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this OwnershipQuery.


        :param organisation: The organisation of this OwnershipQuery.
        :type organisation: EntityObject
        """
        if organisation is None:
            raise ValueError("Invalid value for `organisation`, must not be `None`")

        self._organisation = organisation
