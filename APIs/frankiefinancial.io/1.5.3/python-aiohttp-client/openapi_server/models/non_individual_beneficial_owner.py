# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stock_exchange_data import StockExchangeData
from openapi_server import util


class NonIndividualBeneficialOwner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beneficially_held: bool=None, entity_type: str=None, name: str=None, percent_owned: float=None, stock_exchange_data: StockExchangeData=None):
        """NonIndividualBeneficialOwner - a model defined in OpenAPI

        :param beneficially_held: The beneficially_held of this NonIndividualBeneficialOwner.
        :param entity_type: The entity_type of this NonIndividualBeneficialOwner.
        :param name: The name of this NonIndividualBeneficialOwner.
        :param percent_owned: The percent_owned of this NonIndividualBeneficialOwner.
        :param stock_exchange_data: The stock_exchange_data of this NonIndividualBeneficialOwner.
        """
        self.openapi_types = {
            'beneficially_held': bool,
            'entity_type': str,
            'name': str,
            'percent_owned': float,
            'stock_exchange_data': StockExchangeData
        }

        self.attribute_map = {
            'beneficially_held': 'beneficially_held',
            'entity_type': 'entity_type',
            'name': 'name',
            'percent_owned': 'percent_owned',
            'stock_exchange_data': 'stock_exchange_data'
        }

        self._beneficially_held = beneficially_held
        self._entity_type = entity_type
        self._name = name
        self._percent_owned = percent_owned
        self._stock_exchange_data = stock_exchange_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NonIndividualBeneficialOwner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NonIndividualBeneficialOwner of this NonIndividualBeneficialOwner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beneficially_held(self):
        """Gets the beneficially_held of this NonIndividualBeneficialOwner.

        If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 

        :return: The beneficially_held of this NonIndividualBeneficialOwner.
        :rtype: bool
        """
        return self._beneficially_held

    @beneficially_held.setter
    def beneficially_held(self, beneficially_held):
        """Sets the beneficially_held of this NonIndividualBeneficialOwner.

        If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \"false\" 

        :param beneficially_held: The beneficially_held of this NonIndividualBeneficialOwner.
        :type beneficially_held: bool
        """
        if beneficially_held is None:
            raise ValueError("Invalid value for `beneficially_held`, must not be `None`")

        self._beneficially_held = beneficially_held

    @property
    def entity_type(self):
        """Gets the entity_type of this NonIndividualBeneficialOwner.

        The ASIC type of the company/entity

        :return: The entity_type of this NonIndividualBeneficialOwner.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this NonIndividualBeneficialOwner.

        The ASIC type of the company/entity

        :param entity_type: The entity_type of this NonIndividualBeneficialOwner.
        :type entity_type: str
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this NonIndividualBeneficialOwner.

        Name of the company/entity

        :return: The name of this NonIndividualBeneficialOwner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NonIndividualBeneficialOwner.

        Name of the company/entity

        :param name: The name of this NonIndividualBeneficialOwner.
        :type name: str
        """

        self._name = name

    @property
    def percent_owned(self):
        """Gets the percent_owned of this NonIndividualBeneficialOwner.

        If describing an (ultimate) beneficial owner, the percentage of the company owned 

        :return: The percent_owned of this NonIndividualBeneficialOwner.
        :rtype: float
        """
        return self._percent_owned

    @percent_owned.setter
    def percent_owned(self, percent_owned):
        """Sets the percent_owned of this NonIndividualBeneficialOwner.

        If describing an (ultimate) beneficial owner, the percentage of the company owned 

        :param percent_owned: The percent_owned of this NonIndividualBeneficialOwner.
        :type percent_owned: float
        """
        if percent_owned is None:
            raise ValueError("Invalid value for `percent_owned`, must not be `None`")

        self._percent_owned = percent_owned

    @property
    def stock_exchange_data(self):
        """Gets the stock_exchange_data of this NonIndividualBeneficialOwner.


        :return: The stock_exchange_data of this NonIndividualBeneficialOwner.
        :rtype: StockExchangeData
        """
        return self._stock_exchange_data

    @stock_exchange_data.setter
    def stock_exchange_data(self, stock_exchange_data):
        """Sets the stock_exchange_data of this NonIndividualBeneficialOwner.


        :param stock_exchange_data: The stock_exchange_data of this NonIndividualBeneficialOwner.
        :type stock_exchange_data: StockExchangeData
        """

        self._stock_exchange_data = stock_exchange_data
