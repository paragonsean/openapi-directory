# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eic_details_concession_card import EICDetailsConcessionCard
from openapi_server.models.eic_details_vulnerabilities import EICDetailsVulnerabilities
from openapi_server import util


class EICDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concession_card: EICDetailsConcessionCard=None, vulnerabilities: EICDetailsVulnerabilities=None):
        """EICDetails - a model defined in OpenAPI

        :param concession_card: The concession_card of this EICDetails.
        :param vulnerabilities: The vulnerabilities of this EICDetails.
        """
        self.openapi_types = {
            'concession_card': EICDetailsConcessionCard,
            'vulnerabilities': EICDetailsVulnerabilities
        }

        self.attribute_map = {
            'concession_card': 'concessionCard',
            'vulnerabilities': 'vulnerabilities'
        }

        self._concession_card = concession_card
        self._vulnerabilities = vulnerabilities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EICDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EICDetails of this EICDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concession_card(self):
        """Gets the concession_card of this EICDetails.


        :return: The concession_card of this EICDetails.
        :rtype: EICDetailsConcessionCard
        """
        return self._concession_card

    @concession_card.setter
    def concession_card(self, concession_card):
        """Sets the concession_card of this EICDetails.


        :param concession_card: The concession_card of this EICDetails.
        :type concession_card: EICDetailsConcessionCard
        """

        self._concession_card = concession_card

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this EICDetails.


        :return: The vulnerabilities of this EICDetails.
        :rtype: EICDetailsVulnerabilities
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this EICDetails.


        :param vulnerabilities: The vulnerabilities of this EICDetails.
        :type vulnerabilities: EICDetailsVulnerabilities
        """

        self._vulnerabilities = vulnerabilities
