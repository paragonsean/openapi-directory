# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EICError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id: str=None, error_code: int=None, message: str=None, version: str=None):
        """EICError - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this EICError.
        :param error_code: The error_code of this EICError.
        :param message: The message of this EICError.
        :param version: The version of this EICError.
        """
        self.openapi_types = {
            'correlation_id': str,
            'error_code': int,
            'message': str,
            'version': str
        }

        self.attribute_map = {
            'correlation_id': 'correlationId',
            'error_code': 'errorCode',
            'message': 'message',
            'version': 'version'
        }

        self._correlation_id = correlation_id
        self._error_code = error_code
        self._message = message
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EICError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EICError of this EICError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this EICError.

        The correlationId as passed in the request

        :return: The correlation_id of this EICError.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this EICError.

        The correlationId as passed in the request

        :param correlation_id: The correlation_id of this EICError.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def error_code(self):
        """Gets the error_code of this EICError.

        * `400` - The request was malformed * `422` - Invalid request parameter 

        :return: The error_code of this EICError.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this EICError.

        * `400` - The request was malformed * `422` - Invalid request parameter 

        :param error_code: The error_code of this EICError.
        :type error_code: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this EICError.

        Text to provide more details on errorCode

        :return: The message of this EICError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EICError.

        Text to provide more details on errorCode

        :param message: The message of this EICError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def version(self):
        """Gets the version of this EICError.

        Version of the API on which the EIC request took place. This value should be reported with any issue raised.

        :return: The version of this EICError.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EICError.

        Version of the API on which the EIC request took place. This value should be reported with any issue raised.

        :param version: The version of this EICError.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
