# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KYCScreeningResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_match_count: int=None, check_result: str=None, dob_match_count: int=None, matching_sources: List[str]=None, name_match_count: int=None):
        """KYCScreeningResult - a model defined in OpenAPI

        :param address_match_count: The address_match_count of this KYCScreeningResult.
        :param check_result: The check_result of this KYCScreeningResult.
        :param dob_match_count: The dob_match_count of this KYCScreeningResult.
        :param matching_sources: The matching_sources of this KYCScreeningResult.
        :param name_match_count: The name_match_count of this KYCScreeningResult.
        """
        self.openapi_types = {
            'address_match_count': int,
            'check_result': str,
            'dob_match_count': int,
            'matching_sources': List[str],
            'name_match_count': int
        }

        self.attribute_map = {
            'address_match_count': 'address_match_count',
            'check_result': 'check_result',
            'dob_match_count': 'dob_match_count',
            'matching_sources': 'matching_sources',
            'name_match_count': 'name_match_count'
        }

        self._address_match_count = address_match_count
        self._check_result = check_result
        self._dob_match_count = dob_match_count
        self._matching_sources = matching_sources
        self._name_match_count = name_match_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KYCScreeningResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KYCScreeningResult of this KYCScreeningResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_match_count(self):
        """Gets the address_match_count of this KYCScreeningResult.

        The number of address matches

        :return: The address_match_count of this KYCScreeningResult.
        :rtype: int
        """
        return self._address_match_count

    @address_match_count.setter
    def address_match_count(self, address_match_count):
        """Sets the address_match_count of this KYCScreeningResult.

        The number of address matches

        :param address_match_count: The address_match_count of this KYCScreeningResult.
        :type address_match_count: int
        """
        if address_match_count is None:
            raise ValueError("Invalid value for `address_match_count`, must not be `None`")

        self._address_match_count = address_match_count

    @property
    def check_result(self):
        """Gets the check_result of this KYCScreeningResult.

        The disposition of the 2+2 Safe Harbour check 

        :return: The check_result of this KYCScreeningResult.
        :rtype: str
        """
        return self._check_result

    @check_result.setter
    def check_result(self, check_result):
        """Sets the check_result of this KYCScreeningResult.

        The disposition of the 2+2 Safe Harbour check 

        :param check_result: The check_result of this KYCScreeningResult.
        :type check_result: str
        """
        allowed_values = ["NOT_SCREENED", "PASS", "REFER", "FAIL"]  # noqa: E501
        if check_result not in allowed_values:
            raise ValueError(
                "Invalid value for `check_result` ({0}), must be one of {1}"
                .format(check_result, allowed_values)
            )

        self._check_result = check_result

    @property
    def dob_match_count(self):
        """Gets the dob_match_count of this KYCScreeningResult.

        The number of date of birth matches

        :return: The dob_match_count of this KYCScreeningResult.
        :rtype: int
        """
        return self._dob_match_count

    @dob_match_count.setter
    def dob_match_count(self, dob_match_count):
        """Sets the dob_match_count of this KYCScreeningResult.

        The number of date of birth matches

        :param dob_match_count: The dob_match_count of this KYCScreeningResult.
        :type dob_match_count: int
        """
        if dob_match_count is None:
            raise ValueError("Invalid value for `dob_match_count`, must not be `None`")

        self._dob_match_count = dob_match_count

    @property
    def matching_sources(self):
        """Gets the matching_sources of this KYCScreeningResult.

        The is of matching data sources that produced a success match for the person being screened Example given is not indicative of the actual sources available. 

        :return: The matching_sources of this KYCScreeningResult.
        :rtype: List[str]
        """
        return self._matching_sources

    @matching_sources.setter
    def matching_sources(self, matching_sources):
        """Sets the matching_sources of this KYCScreeningResult.

        The is of matching data sources that produced a success match for the person being screened Example given is not indicative of the actual sources available. 

        :param matching_sources: The matching_sources of this KYCScreeningResult.
        :type matching_sources: List[str]
        """

        self._matching_sources = matching_sources

    @property
    def name_match_count(self):
        """Gets the name_match_count of this KYCScreeningResult.

        The number of name matches

        :return: The name_match_count of this KYCScreeningResult.
        :rtype: int
        """
        return self._name_match_count

    @name_match_count.setter
    def name_match_count(self, name_match_count):
        """Sets the name_match_count of this KYCScreeningResult.

        The number of name matches

        :param name_match_count: The name_match_count of this KYCScreeningResult.
        :type name_match_count: int
        """
        if name_match_count is None:
            raise ValueError("Invalid value for `name_match_count`, must not be `None`")

        self._name_match_count = name_match_count
