# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessReportDetailsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_date_time: datetime=None, report_id: str=None, report_name: str=None, report_provider: str=None, report_run: bool=None, report_status: str=None):
        """BusinessReportDetailsObject - a model defined in OpenAPI

        :param report_date_time: The report_date_time of this BusinessReportDetailsObject.
        :param report_id: The report_id of this BusinessReportDetailsObject.
        :param report_name: The report_name of this BusinessReportDetailsObject.
        :param report_provider: The report_provider of this BusinessReportDetailsObject.
        :param report_run: The report_run of this BusinessReportDetailsObject.
        :param report_status: The report_status of this BusinessReportDetailsObject.
        """
        self.openapi_types = {
            'report_date_time': datetime,
            'report_id': str,
            'report_name': str,
            'report_provider': str,
            'report_run': bool,
            'report_status': str
        }

        self.attribute_map = {
            'report_date_time': 'reportDateTime',
            'report_id': 'reportId',
            'report_name': 'reportName',
            'report_provider': 'reportProvider',
            'report_run': 'reportRun',
            'report_status': 'reportStatus'
        }

        self._report_date_time = report_date_time
        self._report_id = report_id
        self._report_name = report_name
        self._report_provider = report_provider
        self._report_run = report_run
        self._report_status = report_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessReportDetailsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessReportDetailsObject of this BusinessReportDetailsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_date_time(self):
        """Gets the report_date_time of this BusinessReportDetailsObject.

        The ISO UTC date and time the report was generated 

        :return: The report_date_time of this BusinessReportDetailsObject.
        :rtype: datetime
        """
        return self._report_date_time

    @report_date_time.setter
    def report_date_time(self, report_date_time):
        """Sets the report_date_time of this BusinessReportDetailsObject.

        The ISO UTC date and time the report was generated 

        :param report_date_time: The report_date_time of this BusinessReportDetailsObject.
        :type report_date_time: datetime
        """

        self._report_date_time = report_date_time

    @property
    def report_id(self):
        """Gets the report_id of this BusinessReportDetailsObject.

        If the report provider generated an ID or recipt number for the report, it goes here

        :return: The report_id of this BusinessReportDetailsObject.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this BusinessReportDetailsObject.

        If the report provider generated an ID or recipt number for the report, it goes here

        :param report_id: The report_id of this BusinessReportDetailsObject.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def report_name(self):
        """Gets the report_name of this BusinessReportDetailsObject.

        The name of the requested report

        :return: The report_name of this BusinessReportDetailsObject.
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this BusinessReportDetailsObject.

        The name of the requested report

        :param report_name: The report_name of this BusinessReportDetailsObject.
        :type report_name: str
        """

        self._report_name = report_name

    @property
    def report_provider(self):
        """Gets the report_provider of this BusinessReportDetailsObject.

        The name of the service provider that generated the report. 

        :return: The report_provider of this BusinessReportDetailsObject.
        :rtype: str
        """
        return self._report_provider

    @report_provider.setter
    def report_provider(self, report_provider):
        """Sets the report_provider of this BusinessReportDetailsObject.

        The name of the service provider that generated the report. 

        :param report_provider: The report_provider of this BusinessReportDetailsObject.
        :type report_provider: str
        """

        self._report_provider = report_provider

    @property
    def report_run(self):
        """Gets the report_run of this BusinessReportDetailsObject.

        Whether the report was successfully run or not 

        :return: The report_run of this BusinessReportDetailsObject.
        :rtype: bool
        """
        return self._report_run

    @report_run.setter
    def report_run(self, report_run):
        """Sets the report_run of this BusinessReportDetailsObject.

        Whether the report was successfully run or not 

        :param report_run: The report_run of this BusinessReportDetailsObject.
        :type report_run: bool
        """

        self._report_run = report_run

    @property
    def report_status(self):
        """Gets the report_status of this BusinessReportDetailsObject.

        Any details of what is happening with the report of not run.  Will be one of:   - OK  (the report was run)   - LATER  (the report will be sent later as a response notification)   - An error message as to why the report did not work 

        :return: The report_status of this BusinessReportDetailsObject.
        :rtype: str
        """
        return self._report_status

    @report_status.setter
    def report_status(self, report_status):
        """Sets the report_status of this BusinessReportDetailsObject.

        Any details of what is happening with the report of not run.  Will be one of:   - OK  (the report was run)   - LATER  (the report will be sent later as a response notification)   - An error message as to why the report did not work 

        :param report_status: The report_status of this BusinessReportDetailsObject.
        :type report_status: str
        """

        self._report_status = report_status
