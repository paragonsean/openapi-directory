# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SwitchDetailsCustomerDetailsName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first: str=None, last: str=None, middle: str=None, title: str=None):
        """SwitchDetailsCustomerDetailsName - a model defined in OpenAPI

        :param first: The first of this SwitchDetailsCustomerDetailsName.
        :param last: The last of this SwitchDetailsCustomerDetailsName.
        :param middle: The middle of this SwitchDetailsCustomerDetailsName.
        :param title: The title of this SwitchDetailsCustomerDetailsName.
        """
        self.openapi_types = {
            'first': str,
            'last': str,
            'middle': str,
            'title': str
        }

        self.attribute_map = {
            'first': 'first',
            'last': 'last',
            'middle': 'middle',
            'title': 'title'
        }

        self._first = first
        self._last = last
        self._middle = middle
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchDetailsCustomerDetailsName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchDetails_customerDetails_name of this SwitchDetailsCustomerDetailsName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self):
        """Gets the first of this SwitchDetailsCustomerDetailsName.

        Customer's first name

        :return: The first of this SwitchDetailsCustomerDetailsName.
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this SwitchDetailsCustomerDetailsName.

        Customer's first name

        :param first: The first of this SwitchDetailsCustomerDetailsName.
        :type first: str
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")

        self._first = first

    @property
    def last(self):
        """Gets the last of this SwitchDetailsCustomerDetailsName.

        Customer's last name

        :return: The last of this SwitchDetailsCustomerDetailsName.
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this SwitchDetailsCustomerDetailsName.

        Customer's last name

        :param last: The last of this SwitchDetailsCustomerDetailsName.
        :type last: str
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")

        self._last = last

    @property
    def middle(self):
        """Gets the middle of this SwitchDetailsCustomerDetailsName.

        Customer's middle name

        :return: The middle of this SwitchDetailsCustomerDetailsName.
        :rtype: str
        """
        return self._middle

    @middle.setter
    def middle(self, middle):
        """Sets the middle of this SwitchDetailsCustomerDetailsName.

        Customer's middle name

        :param middle: The middle of this SwitchDetailsCustomerDetailsName.
        :type middle: str
        """

        self._middle = middle

    @property
    def title(self):
        """Gets the title of this SwitchDetailsCustomerDetailsName.

        Customers title (e.g. Mr, Mrs, Miss, Dr)

        :return: The title of this SwitchDetailsCustomerDetailsName.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SwitchDetailsCustomerDetailsName.

        Customers title (e.g. Mr, Mrs, Miss, Dr)

        :param title: The title of this SwitchDetailsCustomerDetailsName.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
