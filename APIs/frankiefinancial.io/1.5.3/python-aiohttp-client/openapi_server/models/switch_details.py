# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.switch_details_customer_details import SwitchDetailsCustomerDetails
from openapi_server import util


class SwitchDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_details: SwitchDetailsCustomerDetails=None):
        """SwitchDetails - a model defined in OpenAPI

        :param customer_details: The customer_details of this SwitchDetails.
        """
        self.openapi_types = {
            'customer_details': SwitchDetailsCustomerDetails
        }

        self.attribute_map = {
            'customer_details': 'customerDetails'
        }

        self._customer_details = customer_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchDetails of this SwitchDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_details(self):
        """Gets the customer_details of this SwitchDetails.


        :return: The customer_details of this SwitchDetails.
        :rtype: SwitchDetailsCustomerDetails
        """
        return self._customer_details

    @customer_details.setter
    def customer_details(self, customer_details):
        """Sets the customer_details of this SwitchDetails.


        :param customer_details: The customer_details of this SwitchDetails.
        :type customer_details: SwitchDetailsCustomerDetails
        """
        if customer_details is None:
            raise ValueError("Invalid value for `customer_details`, must not be `None`")

        self._customer_details = customer_details
