# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternationalBusinessSearchCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, organisation_name: str=None, organisation_number: str=None):
        """InternationalBusinessSearchCriteria - a model defined in OpenAPI

        :param country: The country of this InternationalBusinessSearchCriteria.
        :param organisation_name: The organisation_name of this InternationalBusinessSearchCriteria.
        :param organisation_number: The organisation_number of this InternationalBusinessSearchCriteria.
        """
        self.openapi_types = {
            'country': str,
            'organisation_name': str,
            'organisation_number': str
        }

        self.attribute_map = {
            'country': 'country',
            'organisation_name': 'organisation_name',
            'organisation_number': 'organisation_number'
        }

        self._country = country
        self._organisation_name = organisation_name
        self._organisation_number = organisation_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternationalBusinessSearchCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternationalBusinessSearchCriteria of this InternationalBusinessSearchCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this InternationalBusinessSearchCriteria.

        The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 

        :return: The country of this InternationalBusinessSearchCriteria.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InternationalBusinessSearchCriteria.

        The ISO 3166-1 alpha2 country code of country registry you wish to search. This is consistent for all countries except for:    - The United States which requires the state registry to query as well.     - As an example, for a Delaware query, the country code would be \"US-DE\".     - A Texas query would use \"US-TX\"   - Canada, which also requires you to supply a territory code too.     - A Yukon query would use CA-YU, Manitoba would use CA-MB     - You can do an all jurisdiction search with CA-ALL   - United Arab Emirates (UAE)     - For Abu Dhabi, use \"DI\"      - For Dubai, use \"DU\"    See details here:     https://apidocs.frankiefinancial.com/docs/country-codes-for-international-business-queries 

        :param country: The country of this InternationalBusinessSearchCriteria.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def organisation_name(self):
        """Gets the organisation_name of this InternationalBusinessSearchCriteria.

        Name or name fragment you wish to search for.   Note: The less you supply, the more, but less relevant results will be returned.  CRITICAL NOTE: This is *NOT* to be used as a progressive search function.  You must supply at least one of organisation_name and/or organisation_number. If you supply both, a name search will be conducted first, then the number will be checked against the result set and any remaining results returned. 

        :return: The organisation_name of this InternationalBusinessSearchCriteria.
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this InternationalBusinessSearchCriteria.

        Name or name fragment you wish to search for.   Note: The less you supply, the more, but less relevant results will be returned.  CRITICAL NOTE: This is *NOT* to be used as a progressive search function.  You must supply at least one of organisation_name and/or organisation_number. If you supply both, a name search will be conducted first, then the number will be checked against the result set and any remaining results returned. 

        :param organisation_name: The organisation_name of this InternationalBusinessSearchCriteria.
        :type organisation_name: str
        """

        self._organisation_name = organisation_name

    @property
    def organisation_number(self):
        """Gets the organisation_number of this InternationalBusinessSearchCriteria.

        The business number you wish to search on. This should be a unique corporate identifier as per the country registry you're searching. 

        :return: The organisation_number of this InternationalBusinessSearchCriteria.
        :rtype: str
        """
        return self._organisation_number

    @organisation_number.setter
    def organisation_number(self, organisation_number):
        """Sets the organisation_number of this InternationalBusinessSearchCriteria.

        The business number you wish to search on. This should be a unique corporate identifier as per the country registry you're searching. 

        :param organisation_number: The organisation_number of this InternationalBusinessSearchCriteria.
        :type organisation_number: str
        """

        self._organisation_number = organisation_number
