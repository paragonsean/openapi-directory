# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Passport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, expiry_date: str=None, number: str=None, type: str=None):
        """Passport - a model defined in OpenAPI

        :param country: The country of this Passport.
        :param expiry_date: The expiry_date of this Passport.
        :param number: The number of this Passport.
        :param type: The type of this Passport.
        """
        self.openapi_types = {
            'country': str,
            'expiry_date': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'country': 'country',
            'expiry_date': 'expiryDate',
            'number': 'number',
            'type': 'type'
        }

        self._country = country
        self._expiry_date = expiry_date
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Passport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Passport of this Passport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Passport.

        Country of Issue

        :return: The country of this Passport.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Passport.

        Country of Issue

        :param country: The country of this Passport.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Passport.

        Expiry date of passport

        :return: The expiry_date of this Passport.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Passport.

        Expiry date of passport

        :param expiry_date: The expiry_date of this Passport.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def number(self):
        """Gets the number of this Passport.

        Passport Number

        :return: The number of this Passport.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Passport.

        Passport Number

        :param number: The number of this Passport.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this Passport.

        Document identifier

        :return: The type of this Passport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Passport.

        Document identifier

        :param type: The type of this Passport.
        :type type: str
        """
        allowed_values = ["passport"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
