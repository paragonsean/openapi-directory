# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuppliedDataMatches(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matched_acn: bool=None, matched_company_type: bool=None, matched_name: bool=None):
        """SuppliedDataMatches - a model defined in OpenAPI

        :param matched_acn: The matched_acn of this SuppliedDataMatches.
        :param matched_company_type: The matched_company_type of this SuppliedDataMatches.
        :param matched_name: The matched_name of this SuppliedDataMatches.
        """
        self.openapi_types = {
            'matched_acn': bool,
            'matched_company_type': bool,
            'matched_name': bool
        }

        self.attribute_map = {
            'matched_acn': 'matched_acn',
            'matched_company_type': 'matched_company_type',
            'matched_name': 'matched_name'
        }

        self._matched_acn = matched_acn
        self._matched_company_type = matched_company_type
        self._matched_name = matched_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuppliedDataMatches':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuppliedDataMatches of this SuppliedDataMatches.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matched_acn(self):
        """Gets the matched_acn of this SuppliedDataMatches.

        Did the supplied ACN match the ACN on file with the ABR? Only truly relevant if ABN is supplied as well. 

        :return: The matched_acn of this SuppliedDataMatches.
        :rtype: bool
        """
        return self._matched_acn

    @matched_acn.setter
    def matched_acn(self, matched_acn):
        """Sets the matched_acn of this SuppliedDataMatches.

        Did the supplied ACN match the ACN on file with the ABR? Only truly relevant if ABN is supplied as well. 

        :param matched_acn: The matched_acn of this SuppliedDataMatches.
        :type matched_acn: bool
        """
        if matched_acn is None:
            raise ValueError("Invalid value for `matched_acn`, must not be `None`")

        self._matched_acn = matched_acn

    @property
    def matched_company_type(self):
        """Gets the matched_company_type of this SuppliedDataMatches.

        Did the supplied company type match the company type on file with the ABR? 

        :return: The matched_company_type of this SuppliedDataMatches.
        :rtype: bool
        """
        return self._matched_company_type

    @matched_company_type.setter
    def matched_company_type(self, matched_company_type):
        """Sets the matched_company_type of this SuppliedDataMatches.

        Did the supplied company type match the company type on file with the ABR? 

        :param matched_company_type: The matched_company_type of this SuppliedDataMatches.
        :type matched_company_type: bool
        """
        if matched_company_type is None:
            raise ValueError("Invalid value for `matched_company_type`, must not be `None`")

        self._matched_company_type = matched_company_type

    @property
    def matched_name(self):
        """Gets the matched_name of this SuppliedDataMatches.

        Did the supplied name match (or closely match) the name on file with the ABR 

        :return: The matched_name of this SuppliedDataMatches.
        :rtype: bool
        """
        return self._matched_name

    @matched_name.setter
    def matched_name(self, matched_name):
        """Sets the matched_name of this SuppliedDataMatches.

        Did the supplied name match (or closely match) the name on file with the ABR 

        :param matched_name: The matched_name of this SuppliedDataMatches.
        :type matched_name: bool
        """
        if matched_name is None:
            raise ValueError("Invalid value for `matched_name`, must not be `None`")

        self._matched_name = matched_name
