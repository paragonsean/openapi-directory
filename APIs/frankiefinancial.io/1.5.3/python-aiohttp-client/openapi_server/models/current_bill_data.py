# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.current_bill_data_solar_inner import CurrentBillDataSolarInner
from openapi_server.models.period import Period
from openapi_server.models.retailer import Retailer
from openapi_server import util


class CurrentBillData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_address: str=None, account_name: str=None, account_number: str=None, actual_plan_total_cost: float=None, bill_date_from: str=None, bill_date_to: str=None, days: int=None, discount: float=None, fuel_type: str=None, nmi: str=None, periods: List[Period]=None, retailer: Retailer=None, solar: List[CurrentBillDataSolarInner]=None, supply_address: str=None):
        """CurrentBillData - a model defined in OpenAPI

        :param account_address: The account_address of this CurrentBillData.
        :param account_name: The account_name of this CurrentBillData.
        :param account_number: The account_number of this CurrentBillData.
        :param actual_plan_total_cost: The actual_plan_total_cost of this CurrentBillData.
        :param bill_date_from: The bill_date_from of this CurrentBillData.
        :param bill_date_to: The bill_date_to of this CurrentBillData.
        :param days: The days of this CurrentBillData.
        :param discount: The discount of this CurrentBillData.
        :param fuel_type: The fuel_type of this CurrentBillData.
        :param nmi: The nmi of this CurrentBillData.
        :param periods: The periods of this CurrentBillData.
        :param retailer: The retailer of this CurrentBillData.
        :param solar: The solar of this CurrentBillData.
        :param supply_address: The supply_address of this CurrentBillData.
        """
        self.openapi_types = {
            'account_address': str,
            'account_name': str,
            'account_number': str,
            'actual_plan_total_cost': float,
            'bill_date_from': str,
            'bill_date_to': str,
            'days': int,
            'discount': float,
            'fuel_type': str,
            'nmi': str,
            'periods': List[Period],
            'retailer': Retailer,
            'solar': List[CurrentBillDataSolarInner],
            'supply_address': str
        }

        self.attribute_map = {
            'account_address': 'accountAddress',
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'actual_plan_total_cost': 'actualPlanTotalCost',
            'bill_date_from': 'billDateFrom',
            'bill_date_to': 'billDateTo',
            'days': 'days',
            'discount': 'discount',
            'fuel_type': 'fuelType',
            'nmi': 'nmi',
            'periods': 'periods',
            'retailer': 'retailer',
            'solar': 'solar',
            'supply_address': 'supplyAddress'
        }

        self._account_address = account_address
        self._account_name = account_name
        self._account_number = account_number
        self._actual_plan_total_cost = actual_plan_total_cost
        self._bill_date_from = bill_date_from
        self._bill_date_to = bill_date_to
        self._days = days
        self._discount = discount
        self._fuel_type = fuel_type
        self._nmi = nmi
        self._periods = periods
        self._retailer = retailer
        self._solar = solar
        self._supply_address = supply_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrentBillData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrentBillData of this CurrentBillData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_address(self):
        """Gets the account_address of this CurrentBillData.

        Account (Billing) address.

        :return: The account_address of this CurrentBillData.
        :rtype: str
        """
        return self._account_address

    @account_address.setter
    def account_address(self, account_address):
        """Sets the account_address of this CurrentBillData.

        Account (Billing) address.

        :param account_address: The account_address of this CurrentBillData.
        :type account_address: str
        """
        if account_address is None:
            raise ValueError("Invalid value for `account_address`, must not be `None`")

        self._account_address = account_address

    @property
    def account_name(self):
        """Gets the account_name of this CurrentBillData.

        Customer name.

        :return: The account_name of this CurrentBillData.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CurrentBillData.

        Customer name.

        :param account_name: The account_name of this CurrentBillData.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this CurrentBillData.

        Customer account number

        :return: The account_number of this CurrentBillData.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CurrentBillData.

        Customer account number

        :param account_number: The account_number of this CurrentBillData.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def actual_plan_total_cost(self):
        """Gets the actual_plan_total_cost of this CurrentBillData.

        Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.

        :return: The actual_plan_total_cost of this CurrentBillData.
        :rtype: float
        """
        return self._actual_plan_total_cost

    @actual_plan_total_cost.setter
    def actual_plan_total_cost(self, actual_plan_total_cost):
        """Sets the actual_plan_total_cost of this CurrentBillData.

        Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.

        :param actual_plan_total_cost: The actual_plan_total_cost of this CurrentBillData.
        :type actual_plan_total_cost: float
        """
        if actual_plan_total_cost is None:
            raise ValueError("Invalid value for `actual_plan_total_cost`, must not be `None`")

        self._actual_plan_total_cost = actual_plan_total_cost

    @property
    def bill_date_from(self):
        """Gets the bill_date_from of this CurrentBillData.

        Start date for billing period

        :return: The bill_date_from of this CurrentBillData.
        :rtype: str
        """
        return self._bill_date_from

    @bill_date_from.setter
    def bill_date_from(self, bill_date_from):
        """Sets the bill_date_from of this CurrentBillData.

        Start date for billing period

        :param bill_date_from: The bill_date_from of this CurrentBillData.
        :type bill_date_from: str
        """
        if bill_date_from is None:
            raise ValueError("Invalid value for `bill_date_from`, must not be `None`")

        self._bill_date_from = bill_date_from

    @property
    def bill_date_to(self):
        """Gets the bill_date_to of this CurrentBillData.

        End date for billing period

        :return: The bill_date_to of this CurrentBillData.
        :rtype: str
        """
        return self._bill_date_to

    @bill_date_to.setter
    def bill_date_to(self, bill_date_to):
        """Sets the bill_date_to of this CurrentBillData.

        End date for billing period

        :param bill_date_to: The bill_date_to of this CurrentBillData.
        :type bill_date_to: str
        """
        if bill_date_to is None:
            raise ValueError("Invalid value for `bill_date_to`, must not be `None`")

        self._bill_date_to = bill_date_to

    @property
    def days(self):
        """Gets the days of this CurrentBillData.

        Number of days in billing period (billDateTo - billDateFrom)

        :return: The days of this CurrentBillData.
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this CurrentBillData.

        Number of days in billing period (billDateTo - billDateFrom)

        :param days: The days of this CurrentBillData.
        :type days: int
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")

        self._days = days

    @property
    def discount(self):
        """Gets the discount of this CurrentBillData.

        Total value of all unconditional discounts applied to the bill

        :return: The discount of this CurrentBillData.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this CurrentBillData.

        Total value of all unconditional discounts applied to the bill

        :param discount: The discount of this CurrentBillData.
        :type discount: float
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")

        self._discount = discount

    @property
    def fuel_type(self):
        """Gets the fuel_type of this CurrentBillData.

        * `E` - Electricity 

        :return: The fuel_type of this CurrentBillData.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this CurrentBillData.

        * `E` - Electricity 

        :param fuel_type: The fuel_type of this CurrentBillData.
        :type fuel_type: str
        """
        allowed_values = ["E"]  # noqa: E501
        if fuel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel_type` ({0}), must be one of {1}"
                .format(fuel_type, allowed_values)
            )

        self._fuel_type = fuel_type

    @property
    def nmi(self):
        """Gets the nmi of this CurrentBillData.

        National Meter identifier (NMI)

        :return: The nmi of this CurrentBillData.
        :rtype: str
        """
        return self._nmi

    @nmi.setter
    def nmi(self, nmi):
        """Sets the nmi of this CurrentBillData.

        National Meter identifier (NMI)

        :param nmi: The nmi of this CurrentBillData.
        :type nmi: str
        """
        if nmi is None:
            raise ValueError("Invalid value for `nmi`, must not be `None`")

        self._nmi = nmi

    @property
    def periods(self):
        """Gets the periods of this CurrentBillData.

        Rates and charges for each period on the bill

        :return: The periods of this CurrentBillData.
        :rtype: List[Period]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this CurrentBillData.

        Rates and charges for each period on the bill

        :param periods: The periods of this CurrentBillData.
        :type periods: List[Period]
        """
        if periods is None:
            raise ValueError("Invalid value for `periods`, must not be `None`")

        self._periods = periods

    @property
    def retailer(self):
        """Gets the retailer of this CurrentBillData.


        :return: The retailer of this CurrentBillData.
        :rtype: Retailer
        """
        return self._retailer

    @retailer.setter
    def retailer(self, retailer):
        """Sets the retailer of this CurrentBillData.


        :param retailer: The retailer of this CurrentBillData.
        :type retailer: Retailer
        """
        if retailer is None:
            raise ValueError("Invalid value for `retailer`, must not be `None`")

        self._retailer = retailer

    @property
    def solar(self):
        """Gets the solar of this CurrentBillData.

        Array of rates and charges for solar on the bill, by period. If no solar is present on the uploaded bill this object will not be present.

        :return: The solar of this CurrentBillData.
        :rtype: List[CurrentBillDataSolarInner]
        """
        return self._solar

    @solar.setter
    def solar(self, solar):
        """Sets the solar of this CurrentBillData.

        Array of rates and charges for solar on the bill, by period. If no solar is present on the uploaded bill this object will not be present.

        :param solar: The solar of this CurrentBillData.
        :type solar: List[CurrentBillDataSolarInner]
        """

        self._solar = solar

    @property
    def supply_address(self):
        """Gets the supply_address of this CurrentBillData.

        Supply address. This may differ from account address if bill payers address is different from account address.

        :return: The supply_address of this CurrentBillData.
        :rtype: str
        """
        return self._supply_address

    @supply_address.setter
    def supply_address(self, supply_address):
        """Sets the supply_address of this CurrentBillData.

        Supply address. This may differ from account address if bill payers address is different from account address.

        :param supply_address: The supply_address of this CurrentBillData.
        :type supply_address: str
        """
        if supply_address is None:
            raise ValueError("Invalid value for `supply_address`, must not be `None`")

        self._supply_address = supply_address
