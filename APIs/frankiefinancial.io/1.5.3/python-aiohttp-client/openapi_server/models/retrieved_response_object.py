# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrievedResponseObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orig_htt_pstatus: int=None, payload: Dict[str, object]=None):
        """RetrievedResponseObject - a model defined in OpenAPI

        :param orig_htt_pstatus: The orig_htt_pstatus of this RetrievedResponseObject.
        :param payload: The payload of this RetrievedResponseObject.
        """
        self.openapi_types = {
            'orig_htt_pstatus': int,
            'payload': Dict[str, object]
        }

        self.attribute_map = {
            'orig_htt_pstatus': 'origHTTPstatus',
            'payload': 'payload'
        }

        self._orig_htt_pstatus = orig_htt_pstatus
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrievedResponseObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetrievedResponseObject of this RetrievedResponseObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orig_htt_pstatus(self):
        """Gets the orig_htt_pstatus of this RetrievedResponseObject.

        This will be the HTTP response code that was returned originally (200, 404, etc).   In the case where you're requesting the result of a callback (previously backgrounded call), then this is the response that would have been sent, had you waited for the call to finish. 

        :return: The orig_htt_pstatus of this RetrievedResponseObject.
        :rtype: int
        """
        return self._orig_htt_pstatus

    @orig_htt_pstatus.setter
    def orig_htt_pstatus(self, orig_htt_pstatus):
        """Sets the orig_htt_pstatus of this RetrievedResponseObject.

        This will be the HTTP response code that was returned originally (200, 404, etc).   In the case where you're requesting the result of a callback (previously backgrounded call), then this is the response that would have been sent, had you waited for the call to finish. 

        :param orig_htt_pstatus: The orig_htt_pstatus of this RetrievedResponseObject.
        :type orig_htt_pstatus: int
        """

        self._orig_htt_pstatus = orig_htt_pstatus

    @property
    def payload(self):
        """Gets the payload of this RetrievedResponseObject.

        This is a placeholder field. It will actually be a JSON object that is the payload that would have been returned (or was returned) in the original request. You'll need to process this as if it were the original response, and act accordingly. 

        :return: The payload of this RetrievedResponseObject.
        :rtype: Dict[str, object]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this RetrievedResponseObject.

        This is a placeholder field. It will actually be a JSON object that is the payload that would have been returned (or was returned) in the original request. You'll need to process this as if it were the original response, and act accordingly. 

        :param payload: The payload of this RetrievedResponseObject.
        :type payload: Dict[str, object]
        """

        self._payload = payload
