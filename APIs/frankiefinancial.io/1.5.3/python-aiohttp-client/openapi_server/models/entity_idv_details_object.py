# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_object import EntityObject
from openapi_server import util


class EntityIDVDetailsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicant_id: str=None, application_id: str=None, entity: EntityObject=None, referrer: str=None):
        """EntityIDVDetailsObject - a model defined in OpenAPI

        :param applicant_id: The applicant_id of this EntityIDVDetailsObject.
        :param application_id: The application_id of this EntityIDVDetailsObject.
        :param entity: The entity of this EntityIDVDetailsObject.
        :param referrer: The referrer of this EntityIDVDetailsObject.
        """
        self.openapi_types = {
            'applicant_id': str,
            'application_id': str,
            'entity': EntityObject,
            'referrer': str
        }

        self.attribute_map = {
            'applicant_id': 'applicantId',
            'application_id': 'applicationId',
            'entity': 'entity',
            'referrer': 'referrer'
        }

        self._applicant_id = applicant_id
        self._application_id = application_id
        self._entity = entity
        self._referrer = referrer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityIDVDetailsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityIDVDetailsObject of this EntityIDVDetailsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicant_id(self):
        """Gets the applicant_id of this EntityIDVDetailsObject.

        The applicantId previously supplied when creating a token for the first time for an entity. Only required if re-submitting for a fresh token on a previously created applicant. 

        :return: The applicant_id of this EntityIDVDetailsObject.
        :rtype: str
        """
        return self._applicant_id

    @applicant_id.setter
    def applicant_id(self, applicant_id):
        """Sets the applicant_id of this EntityIDVDetailsObject.

        The applicantId previously supplied when creating a token for the first time for an entity. Only required if re-submitting for a fresh token on a previously created applicant. 

        :param applicant_id: The applicant_id of this EntityIDVDetailsObject.
        :type applicant_id: str
        """

        self._applicant_id = applicant_id

    @property
    def application_id(self):
        """Gets the application_id of this EntityIDVDetailsObject.

        If this is for a native application SDK, then we need the applicationId as reported by the SDK. This will then be tied to the token so it cannot be used in another application or handset.  You must send either an applicationID or a referrer (see below) 

        :return: The application_id of this EntityIDVDetailsObject.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this EntityIDVDetailsObject.

        If this is for a native application SDK, then we need the applicationId as reported by the SDK. This will then be tied to the token so it cannot be used in another application or handset.  You must send either an applicationID or a referrer (see below) 

        :param application_id: The application_id of this EntityIDVDetailsObject.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def entity(self):
        """Gets the entity of this EntityIDVDetailsObject.


        :return: The entity of this EntityIDVDetailsObject.
        :rtype: EntityObject
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityIDVDetailsObject.


        :param entity: The entity of this EntityIDVDetailsObject.
        :type entity: EntityObject
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def referrer(self):
        """Gets the referrer of this EntityIDVDetailsObject.

        If this is for a web SDK, then you need to supply the referrer domain so that the token can be validated by the IDV service  You must send either a referrer or an applicationID (see above) 

        :return: The referrer of this EntityIDVDetailsObject.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this EntityIDVDetailsObject.

        If this is for a web SDK, then you need to supply the referrer domain so that the token can be validated by the IDV service  You must send either a referrer or an applicationID (see above) 

        :param referrer: The referrer of this EntityIDVDetailsObject.
        :type referrer: str
        """

        self._referrer = referrer
