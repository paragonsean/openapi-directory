# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_description import CodeDescription
from openapi_server import util


class CourtDetailsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_number: str=None, application_year: int=None, country: str=None, state: str=None, type: CodeDescription=None):
        """CourtDetailsObject - a model defined in OpenAPI

        :param application_number: The application_number of this CourtDetailsObject.
        :param application_year: The application_year of this CourtDetailsObject.
        :param country: The country of this CourtDetailsObject.
        :param state: The state of this CourtDetailsObject.
        :param type: The type of this CourtDetailsObject.
        """
        self.openapi_types = {
            'application_number': str,
            'application_year': int,
            'country': str,
            'state': str,
            'type': CodeDescription
        }

        self.attribute_map = {
            'application_number': 'applicationNumber',
            'application_year': 'applicationYear',
            'country': 'country',
            'state': 'state',
            'type': 'type'
        }

        self._application_number = application_number
        self._application_year = application_year
        self._country = country
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CourtDetailsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CourtDetailsObject of this CourtDetailsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_number(self):
        """Gets the application_number of this CourtDetailsObject.


        :return: The application_number of this CourtDetailsObject.
        :rtype: str
        """
        return self._application_number

    @application_number.setter
    def application_number(self, application_number):
        """Sets the application_number of this CourtDetailsObject.


        :param application_number: The application_number of this CourtDetailsObject.
        :type application_number: str
        """

        self._application_number = application_number

    @property
    def application_year(self):
        """Gets the application_year of this CourtDetailsObject.


        :return: The application_year of this CourtDetailsObject.
        :rtype: int
        """
        return self._application_year

    @application_year.setter
    def application_year(self, application_year):
        """Sets the application_year of this CourtDetailsObject.


        :param application_year: The application_year of this CourtDetailsObject.
        :type application_year: int
        """
        if application_year is not None and application_year > 2999:
            raise ValueError("Invalid value for `application_year`, must be a value less than or equal to `2999`")
        if application_year is not None and application_year < 1000:
            raise ValueError("Invalid value for `application_year`, must be a value greater than or equal to `1000`")

        self._application_year = application_year

    @property
    def country(self):
        """Gets the country of this CourtDetailsObject.


        :return: The country of this CourtDetailsObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CourtDetailsObject.


        :param country: The country of this CourtDetailsObject.
        :type country: str
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this CourtDetailsObject.


        :return: The state of this CourtDetailsObject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CourtDetailsObject.


        :param state: The state of this CourtDetailsObject.
        :type state: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this CourtDetailsObject.


        :return: The type of this CourtDetailsObject.
        :rtype: CodeDescription
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CourtDetailsObject.


        :param type: The type of this CourtDetailsObject.
        :type type: CodeDescription
        """

        self._type = type
