# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegulatoryInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, licence_details: str=None, licence_number: str=None, licence_verified: bool=None, regulatory_body: str=None):
        """RegulatoryInformation - a model defined in OpenAPI

        :param licence_details: The licence_details of this RegulatoryInformation.
        :param licence_number: The licence_number of this RegulatoryInformation.
        :param licence_verified: The licence_verified of this RegulatoryInformation.
        :param regulatory_body: The regulatory_body of this RegulatoryInformation.
        """
        self.openapi_types = {
            'licence_details': str,
            'licence_number': str,
            'licence_verified': bool,
            'regulatory_body': str
        }

        self.attribute_map = {
            'licence_details': 'licence_details',
            'licence_number': 'licence_number',
            'licence_verified': 'licence_verified',
            'regulatory_body': 'regulatory_body'
        }

        self._licence_details = licence_details
        self._licence_number = licence_number
        self._licence_verified = licence_verified
        self._regulatory_body = regulatory_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegulatoryInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegulatoryInformation of this RegulatoryInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def licence_details(self):
        """Gets the licence_details of this RegulatoryInformation.


        :return: The licence_details of this RegulatoryInformation.
        :rtype: str
        """
        return self._licence_details

    @licence_details.setter
    def licence_details(self, licence_details):
        """Sets the licence_details of this RegulatoryInformation.


        :param licence_details: The licence_details of this RegulatoryInformation.
        :type licence_details: str
        """

        self._licence_details = licence_details

    @property
    def licence_number(self):
        """Gets the licence_number of this RegulatoryInformation.


        :return: The licence_number of this RegulatoryInformation.
        :rtype: str
        """
        return self._licence_number

    @licence_number.setter
    def licence_number(self, licence_number):
        """Sets the licence_number of this RegulatoryInformation.


        :param licence_number: The licence_number of this RegulatoryInformation.
        :type licence_number: str
        """

        self._licence_number = licence_number

    @property
    def licence_verified(self):
        """Gets the licence_verified of this RegulatoryInformation.


        :return: The licence_verified of this RegulatoryInformation.
        :rtype: bool
        """
        return self._licence_verified

    @licence_verified.setter
    def licence_verified(self, licence_verified):
        """Sets the licence_verified of this RegulatoryInformation.


        :param licence_verified: The licence_verified of this RegulatoryInformation.
        :type licence_verified: bool
        """

        self._licence_verified = licence_verified

    @property
    def regulatory_body(self):
        """Gets the regulatory_body of this RegulatoryInformation.


        :return: The regulatory_body of this RegulatoryInformation.
        :rtype: str
        """
        return self._regulatory_body

    @regulatory_body.setter
    def regulatory_body(self, regulatory_body):
        """Sets the regulatory_body of this RegulatoryInformation.


        :param regulatory_body: The regulatory_body of this RegulatoryInformation.
        :type regulatory_body: str
        """

        self._regulatory_body = regulatory_body
