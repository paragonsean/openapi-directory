# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_mark_up_parameters_value import DisplayMarkUpParametersValue
from openapi_server import util


class DisplayMarkUp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, children: List[DisplayMarkUp]=None, confirmation: str=None, key: str=None, name: str=None, parameters: Dict[str, DisplayMarkUpParametersValue]=None, type: str=None, value: str=None):
        """DisplayMarkUp - a model defined in OpenAPI

        :param attribute: The attribute of this DisplayMarkUp.
        :param children: The children of this DisplayMarkUp.
        :param confirmation: The confirmation of this DisplayMarkUp.
        :param key: The key of this DisplayMarkUp.
        :param name: The name of this DisplayMarkUp.
        :param parameters: The parameters of this DisplayMarkUp.
        :param type: The type of this DisplayMarkUp.
        :param value: The value of this DisplayMarkUp.
        """
        self.openapi_types = {
            'attribute': str,
            'children': List[DisplayMarkUp],
            'confirmation': str,
            'key': str,
            'name': str,
            'parameters': Dict[str, DisplayMarkUpParametersValue],
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'children': 'children',
            'confirmation': 'confirmation',
            'key': 'key',
            'name': 'name',
            'parameters': 'parameters',
            'type': 'type',
            'value': 'value'
        }

        self._attribute = attribute
        self._children = children
        self._confirmation = confirmation
        self._key = key
        self._name = name
        self._parameters = parameters
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayMarkUp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayMarkUp of this DisplayMarkUp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this DisplayMarkUp.

        Comma seperated list of attributes to apply to value when rendering.

        :return: The attribute of this DisplayMarkUp.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this DisplayMarkUp.

        Comma seperated list of attributes to apply to value when rendering.

        :param attribute: The attribute of this DisplayMarkUp.
        :type attribute: str
        """
        allowed_values = ["bold"]  # noqa: E501
        if attribute not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute` ({0}), must be one of {1}"
                .format(attribute, allowed_values)
            )

        self._attribute = attribute

    @property
    def children(self):
        """Gets the children of this DisplayMarkUp.

        Children of element. This data structure is recursive with a DisplayMarkup  element having 0 or more DisplayMarkup children

        :return: The children of this DisplayMarkUp.
        :rtype: List[DisplayMarkUp]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this DisplayMarkUp.

        Children of element. This data structure is recursive with a DisplayMarkup  element having 0 or more DisplayMarkup children

        :param children: The children of this DisplayMarkUp.
        :type children: List[DisplayMarkUp]
        """

        self._children = children

    @property
    def confirmation(self):
        """Gets the confirmation of this DisplayMarkUp.

        Does this statement need to be confirmed (with a checkbox)? Confirmation can be mandatory or optional. When the confirmation element is present a key element must also be present. The keys of all confirmed statements must be sent in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.

        :return: The confirmation of this DisplayMarkUp.
        :rtype: str
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this DisplayMarkUp.

        Does this statement need to be confirmed (with a checkbox)? Confirmation can be mandatory or optional. When the confirmation element is present a key element must also be present. The keys of all confirmed statements must be sent in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.

        :param confirmation: The confirmation of this DisplayMarkUp.
        :type confirmation: str
        """
        allowed_values = ["optional", "mandatory"]  # noqa: E501
        if confirmation not in allowed_values:
            raise ValueError(
                "Invalid value for `confirmation` ({0}), must be one of {1}"
                .format(confirmation, allowed_values)
            )

        self._confirmation = confirmation

    @property
    def key(self):
        """Gets the key of this DisplayMarkUp.

        For elements that require confirmation, the key of each element that the user has accepted must be send in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.

        :return: The key of this DisplayMarkUp.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DisplayMarkUp.

        For elements that require confirmation, the key of each element that the user has accepted must be send in the switch request. The absence of any mandatory confirmation will result in an error response from the switch request.

        :param key: The key of this DisplayMarkUp.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this DisplayMarkUp.

        Text to display as header/title of value.

        :return: The name of this DisplayMarkUp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DisplayMarkUp.

        Text to display as header/title of value.

        :param name: The name of this DisplayMarkUp.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this DisplayMarkUp.

        Optional element which has a keyvalue pair associated with every data binding contained in the value element of the current object.

        :return: The parameters of this DisplayMarkUp.
        :rtype: Dict[str, DisplayMarkUpParametersValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DisplayMarkUp.

        Optional element which has a keyvalue pair associated with every data binding contained in the value element of the current object.

        :param parameters: The parameters of this DisplayMarkUp.
        :type parameters: Dict[str, DisplayMarkUpParametersValue]
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this DisplayMarkUp.

        Type of component to be used for rendering

        :return: The type of this DisplayMarkUp.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DisplayMarkUp.

        Type of component to be used for rendering

        :param type: The type of this DisplayMarkUp.
        :type type: str
        """
        allowed_values = ["text", "unorderedlist", "orderedlist"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this DisplayMarkUp.

        Data to be rendered. This data can contain data bindings (contained in {{ }}). If present in the string the parameters object will contain a key with the same name and the associated data (e.g a link).<br><br><div style=\"background-color:black;color:white;\">{<br>&nbsp;&nbsp;\"type\":&nbsp;\"text\",<br>&nbsp;&nbsp;\"value\":&nbsp;\"I&nbsp;accept&nbsp;the&nbsp;{{Terms&nbsp;and&nbsp;Conditions}}.\",<br>&nbsp;&nbsp;\"parameters\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Terms&nbsp;and&nbsp;Conditions\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"type\":&nbsp;\"link\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\":&nbsp;\"https://www.accurassi.com.au/sample-terms-and-conditions/\"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}</div>

        :return: The value of this DisplayMarkUp.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DisplayMarkUp.

        Data to be rendered. This data can contain data bindings (contained in {{ }}). If present in the string the parameters object will contain a key with the same name and the associated data (e.g a link).<br><br><div style=\"background-color:black;color:white;\">{<br>&nbsp;&nbsp;\"type\":&nbsp;\"text\",<br>&nbsp;&nbsp;\"value\":&nbsp;\"I&nbsp;accept&nbsp;the&nbsp;{{Terms&nbsp;and&nbsp;Conditions}}.\",<br>&nbsp;&nbsp;\"parameters\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Terms&nbsp;and&nbsp;Conditions\":&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"type\":&nbsp;\"link\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\":&nbsp;\"https://www.accurassi.com.au/sample-terms-and-conditions/\"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}</div>

        :param value: The value of this DisplayMarkUp.
        :type value: str
        """

        self._value = value
