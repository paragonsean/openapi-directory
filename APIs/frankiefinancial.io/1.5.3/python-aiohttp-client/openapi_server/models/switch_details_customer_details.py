# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.switch_details_customer_details_evidence_of_identity import SwitchDetailsCustomerDetailsEvidenceOfIdentity
from openapi_server.models.switch_details_customer_details_name import SwitchDetailsCustomerDetailsName
from openapi_server import util


class SwitchDetailsCustomerDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, date_of_birth: str=None, email: str=None, evidence_of_identity: SwitchDetailsCustomerDetailsEvidenceOfIdentity=None, mobile: str=None, name: SwitchDetailsCustomerDetailsName=None):
        """SwitchDetailsCustomerDetails - a model defined in OpenAPI

        :param address: The address of this SwitchDetailsCustomerDetails.
        :param date_of_birth: The date_of_birth of this SwitchDetailsCustomerDetails.
        :param email: The email of this SwitchDetailsCustomerDetails.
        :param evidence_of_identity: The evidence_of_identity of this SwitchDetailsCustomerDetails.
        :param mobile: The mobile of this SwitchDetailsCustomerDetails.
        :param name: The name of this SwitchDetailsCustomerDetails.
        """
        self.openapi_types = {
            'address': str,
            'date_of_birth': str,
            'email': str,
            'evidence_of_identity': SwitchDetailsCustomerDetailsEvidenceOfIdentity,
            'mobile': str,
            'name': SwitchDetailsCustomerDetailsName
        }

        self.attribute_map = {
            'address': 'address',
            'date_of_birth': 'dateOfBirth',
            'email': 'email',
            'evidence_of_identity': 'evidenceOfIdentity',
            'mobile': 'mobile',
            'name': 'name'
        }

        self._address = address
        self._date_of_birth = date_of_birth
        self._email = email
        self._evidence_of_identity = evidence_of_identity
        self._mobile = mobile
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchDetailsCustomerDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchDetails_customerDetails of this SwitchDetailsCustomerDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SwitchDetailsCustomerDetails.

        Customer's supply address address. If no address is passed, the supply address as read off the bill will be used

        :return: The address of this SwitchDetailsCustomerDetails.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SwitchDetailsCustomerDetails.

        Customer's supply address address. If no address is passed, the supply address as read off the bill will be used

        :param address: The address of this SwitchDetailsCustomerDetails.
        :type address: str
        """

        self._address = address

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SwitchDetailsCustomerDetails.

        Customer's date of birth

        :return: The date_of_birth of this SwitchDetailsCustomerDetails.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SwitchDetailsCustomerDetails.

        Customer's date of birth

        :param date_of_birth: The date_of_birth of this SwitchDetailsCustomerDetails.
        :type date_of_birth: str
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this SwitchDetailsCustomerDetails.

        Customer's email address

        :return: The email of this SwitchDetailsCustomerDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SwitchDetailsCustomerDetails.

        Customer's email address

        :param email: The email of this SwitchDetailsCustomerDetails.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def evidence_of_identity(self):
        """Gets the evidence_of_identity of this SwitchDetailsCustomerDetails.


        :return: The evidence_of_identity of this SwitchDetailsCustomerDetails.
        :rtype: SwitchDetailsCustomerDetailsEvidenceOfIdentity
        """
        return self._evidence_of_identity

    @evidence_of_identity.setter
    def evidence_of_identity(self, evidence_of_identity):
        """Sets the evidence_of_identity of this SwitchDetailsCustomerDetails.


        :param evidence_of_identity: The evidence_of_identity of this SwitchDetailsCustomerDetails.
        :type evidence_of_identity: SwitchDetailsCustomerDetailsEvidenceOfIdentity
        """
        if evidence_of_identity is None:
            raise ValueError("Invalid value for `evidence_of_identity`, must not be `None`")

        self._evidence_of_identity = evidence_of_identity

    @property
    def mobile(self):
        """Gets the mobile of this SwitchDetailsCustomerDetails.

        Customer's phone number

        :return: The mobile of this SwitchDetailsCustomerDetails.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this SwitchDetailsCustomerDetails.

        Customer's phone number

        :param mobile: The mobile of this SwitchDetailsCustomerDetails.
        :type mobile: str
        """
        if mobile is None:
            raise ValueError("Invalid value for `mobile`, must not be `None`")

        self._mobile = mobile

    @property
    def name(self):
        """Gets the name of this SwitchDetailsCustomerDetails.


        :return: The name of this SwitchDetailsCustomerDetails.
        :rtype: SwitchDetailsCustomerDetailsName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SwitchDetailsCustomerDetails.


        :param name: The name of this SwitchDetailsCustomerDetails.
        :type name: SwitchDetailsCustomerDetailsName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
