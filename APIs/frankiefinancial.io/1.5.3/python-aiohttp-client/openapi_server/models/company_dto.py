# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_of_address_dto import ArrayOfAddressDTO
from openapi_server.models.array_of_string import ArrayOfString
from openapi_server import util


class CompanyDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: ArrayOfAddressDTO=None, aliases: ArrayOfString=None, code: str=None, company_id: str=None, _date: str=None, function: str=None, legal_form: str=None, legal_status: str=None, more_key: str=None, name: str=None, official: bool=None, registration_authority: str=None, registration_authority_code: str=None, source: str=None, virtual_id: str=None):
        """CompanyDTO - a model defined in OpenAPI

        :param addresses: The addresses of this CompanyDTO.
        :param aliases: The aliases of this CompanyDTO.
        :param code: The code of this CompanyDTO.
        :param company_id: The company_id of this CompanyDTO.
        :param _date: The _date of this CompanyDTO.
        :param function: The function of this CompanyDTO.
        :param legal_form: The legal_form of this CompanyDTO.
        :param legal_status: The legal_status of this CompanyDTO.
        :param more_key: The more_key of this CompanyDTO.
        :param name: The name of this CompanyDTO.
        :param official: The official of this CompanyDTO.
        :param registration_authority: The registration_authority of this CompanyDTO.
        :param registration_authority_code: The registration_authority_code of this CompanyDTO.
        :param source: The source of this CompanyDTO.
        :param virtual_id: The virtual_id of this CompanyDTO.
        """
        self.openapi_types = {
            'addresses': ArrayOfAddressDTO,
            'aliases': ArrayOfString,
            'code': str,
            'company_id': str,
            '_date': str,
            'function': str,
            'legal_form': str,
            'legal_status': str,
            'more_key': str,
            'name': str,
            'official': bool,
            'registration_authority': str,
            'registration_authority_code': str,
            'source': str,
            'virtual_id': str
        }

        self.attribute_map = {
            'addresses': 'Addresses',
            'aliases': 'Aliases',
            'code': 'Code',
            'company_id': 'CompanyID',
            '_date': 'Date',
            'function': 'Function',
            'legal_form': 'LegalForm',
            'legal_status': 'LegalStatus',
            'more_key': 'MoreKey',
            'name': 'Name',
            'official': 'Official',
            'registration_authority': 'RegistrationAuthority',
            'registration_authority_code': 'RegistrationAuthorityCode',
            'source': 'Source',
            'virtual_id': 'VirtualID'
        }

        self._addresses = addresses
        self._aliases = aliases
        self._code = code
        self._company_id = company_id
        self.__date = _date
        self._function = function
        self._legal_form = legal_form
        self._legal_status = legal_status
        self._more_key = more_key
        self._name = name
        self._official = official
        self._registration_authority = registration_authority
        self._registration_authority_code = registration_authority_code
        self._source = source
        self._virtual_id = virtual_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyDTO of this CompanyDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this CompanyDTO.


        :return: The addresses of this CompanyDTO.
        :rtype: ArrayOfAddressDTO
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CompanyDTO.


        :param addresses: The addresses of this CompanyDTO.
        :type addresses: ArrayOfAddressDTO
        """

        self._addresses = addresses

    @property
    def aliases(self):
        """Gets the aliases of this CompanyDTO.


        :return: The aliases of this CompanyDTO.
        :rtype: ArrayOfString
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this CompanyDTO.


        :param aliases: The aliases of this CompanyDTO.
        :type aliases: ArrayOfString
        """

        self._aliases = aliases

    @property
    def code(self):
        """Gets the code of this CompanyDTO.


        :return: The code of this CompanyDTO.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CompanyDTO.


        :param code: The code of this CompanyDTO.
        :type code: str
        """

        self._code = code

    @property
    def company_id(self):
        """Gets the company_id of this CompanyDTO.


        :return: The company_id of this CompanyDTO.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyDTO.


        :param company_id: The company_id of this CompanyDTO.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def _date(self):
        """Gets the _date of this CompanyDTO.


        :return: The _date of this CompanyDTO.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CompanyDTO.


        :param _date: The _date of this CompanyDTO.
        :type _date: str
        """

        self.__date = _date

    @property
    def function(self):
        """Gets the function of this CompanyDTO.


        :return: The function of this CompanyDTO.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this CompanyDTO.


        :param function: The function of this CompanyDTO.
        :type function: str
        """

        self._function = function

    @property
    def legal_form(self):
        """Gets the legal_form of this CompanyDTO.


        :return: The legal_form of this CompanyDTO.
        :rtype: str
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this CompanyDTO.


        :param legal_form: The legal_form of this CompanyDTO.
        :type legal_form: str
        """

        self._legal_form = legal_form

    @property
    def legal_status(self):
        """Gets the legal_status of this CompanyDTO.


        :return: The legal_status of this CompanyDTO.
        :rtype: str
        """
        return self._legal_status

    @legal_status.setter
    def legal_status(self, legal_status):
        """Sets the legal_status of this CompanyDTO.


        :param legal_status: The legal_status of this CompanyDTO.
        :type legal_status: str
        """

        self._legal_status = legal_status

    @property
    def more_key(self):
        """Gets the more_key of this CompanyDTO.


        :return: The more_key of this CompanyDTO.
        :rtype: str
        """
        return self._more_key

    @more_key.setter
    def more_key(self, more_key):
        """Sets the more_key of this CompanyDTO.


        :param more_key: The more_key of this CompanyDTO.
        :type more_key: str
        """

        self._more_key = more_key

    @property
    def name(self):
        """Gets the name of this CompanyDTO.


        :return: The name of this CompanyDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyDTO.


        :param name: The name of this CompanyDTO.
        :type name: str
        """

        self._name = name

    @property
    def official(self):
        """Gets the official of this CompanyDTO.


        :return: The official of this CompanyDTO.
        :rtype: bool
        """
        return self._official

    @official.setter
    def official(self, official):
        """Sets the official of this CompanyDTO.


        :param official: The official of this CompanyDTO.
        :type official: bool
        """

        self._official = official

    @property
    def registration_authority(self):
        """Gets the registration_authority of this CompanyDTO.


        :return: The registration_authority of this CompanyDTO.
        :rtype: str
        """
        return self._registration_authority

    @registration_authority.setter
    def registration_authority(self, registration_authority):
        """Sets the registration_authority of this CompanyDTO.


        :param registration_authority: The registration_authority of this CompanyDTO.
        :type registration_authority: str
        """

        self._registration_authority = registration_authority

    @property
    def registration_authority_code(self):
        """Gets the registration_authority_code of this CompanyDTO.


        :return: The registration_authority_code of this CompanyDTO.
        :rtype: str
        """
        return self._registration_authority_code

    @registration_authority_code.setter
    def registration_authority_code(self, registration_authority_code):
        """Sets the registration_authority_code of this CompanyDTO.


        :param registration_authority_code: The registration_authority_code of this CompanyDTO.
        :type registration_authority_code: str
        """

        self._registration_authority_code = registration_authority_code

    @property
    def source(self):
        """Gets the source of this CompanyDTO.


        :return: The source of this CompanyDTO.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CompanyDTO.


        :param source: The source of this CompanyDTO.
        :type source: str
        """

        self._source = source

    @property
    def virtual_id(self):
        """Gets the virtual_id of this CompanyDTO.


        :return: The virtual_id of this CompanyDTO.
        :rtype: str
        """
        return self._virtual_id

    @virtual_id.setter
    def virtual_id(self, virtual_id):
        """Sets the virtual_id of this CompanyDTO.


        :param virtual_id: The virtual_id of this CompanyDTO.
        :type virtual_id: str
        """

        self._virtual_id = virtual_id
