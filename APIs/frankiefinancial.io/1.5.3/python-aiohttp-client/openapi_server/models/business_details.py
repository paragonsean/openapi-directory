# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_object import AddressObject
from openapi_server.models.regulatory_information import RegulatoryInformation
from openapi_server.models.stock_exchange_data import StockExchangeData
from openapi_server import util


class BusinessDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abn: str=None, acn: str=None, arbn: str=None, anzsic_code: str=None, asic_company_type: str=None, business_names: List[str]=None, date_registered_with_asic: date=None, entity_id: str=None, giin: str=None, place_of_business: AddressObject=None, public_company: bool=None, registered_name: str=None, registered_office: AddressObject=None, regulatory_information: RegulatoryInformation=None, state_registered_with_asic: str=None, stock_exchange_data: StockExchangeData=None, trading_names: List[str]=None):
        """BusinessDetails - a model defined in OpenAPI

        :param abn: The abn of this BusinessDetails.
        :param acn: The acn of this BusinessDetails.
        :param arbn: The arbn of this BusinessDetails.
        :param anzsic_code: The anzsic_code of this BusinessDetails.
        :param asic_company_type: The asic_company_type of this BusinessDetails.
        :param business_names: The business_names of this BusinessDetails.
        :param date_registered_with_asic: The date_registered_with_asic of this BusinessDetails.
        :param entity_id: The entity_id of this BusinessDetails.
        :param giin: The giin of this BusinessDetails.
        :param place_of_business: The place_of_business of this BusinessDetails.
        :param public_company: The public_company of this BusinessDetails.
        :param registered_name: The registered_name of this BusinessDetails.
        :param registered_office: The registered_office of this BusinessDetails.
        :param regulatory_information: The regulatory_information of this BusinessDetails.
        :param state_registered_with_asic: The state_registered_with_asic of this BusinessDetails.
        :param stock_exchange_data: The stock_exchange_data of this BusinessDetails.
        :param trading_names: The trading_names of this BusinessDetails.
        """
        self.openapi_types = {
            'abn': str,
            'acn': str,
            'arbn': str,
            'anzsic_code': str,
            'asic_company_type': str,
            'business_names': List[str],
            'date_registered_with_asic': date,
            'entity_id': str,
            'giin': str,
            'place_of_business': AddressObject,
            'public_company': bool,
            'registered_name': str,
            'registered_office': AddressObject,
            'regulatory_information': RegulatoryInformation,
            'state_registered_with_asic': str,
            'stock_exchange_data': StockExchangeData,
            'trading_names': List[str]
        }

        self.attribute_map = {
            'abn': 'ABN',
            'acn': 'ACN',
            'arbn': 'ARBN',
            'anzsic_code': 'anzsic_code',
            'asic_company_type': 'asic_company_type',
            'business_names': 'business_names',
            'date_registered_with_asic': 'date_registered_with_asic',
            'entity_id': 'entity_id',
            'giin': 'giin',
            'place_of_business': 'place_of_business',
            'public_company': 'public_company',
            'registered_name': 'registered_name',
            'registered_office': 'registered_office',
            'regulatory_information': 'regulatory_information',
            'state_registered_with_asic': 'state_registered_with_asic',
            'stock_exchange_data': 'stock_exchange_data',
            'trading_names': 'trading_names'
        }

        self._abn = abn
        self._acn = acn
        self._arbn = arbn
        self._anzsic_code = anzsic_code
        self._asic_company_type = asic_company_type
        self._business_names = business_names
        self._date_registered_with_asic = date_registered_with_asic
        self._entity_id = entity_id
        self._giin = giin
        self._place_of_business = place_of_business
        self._public_company = public_company
        self._registered_name = registered_name
        self._registered_office = registered_office
        self._regulatory_information = regulatory_information
        self._state_registered_with_asic = state_registered_with_asic
        self._stock_exchange_data = stock_exchange_data
        self._trading_names = trading_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessDetails of this BusinessDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abn(self):
        """Gets the abn of this BusinessDetails.


        :return: The abn of this BusinessDetails.
        :rtype: str
        """
        return self._abn

    @abn.setter
    def abn(self, abn):
        """Sets the abn of this BusinessDetails.


        :param abn: The abn of this BusinessDetails.
        :type abn: str
        """
        if abn is None:
            raise ValueError("Invalid value for `abn`, must not be `None`")

        self._abn = abn

    @property
    def acn(self):
        """Gets the acn of this BusinessDetails.


        :return: The acn of this BusinessDetails.
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this BusinessDetails.


        :param acn: The acn of this BusinessDetails.
        :type acn: str
        """
        if acn is None:
            raise ValueError("Invalid value for `acn`, must not be `None`")

        self._acn = acn

    @property
    def arbn(self):
        """Gets the arbn of this BusinessDetails.


        :return: The arbn of this BusinessDetails.
        :rtype: str
        """
        return self._arbn

    @arbn.setter
    def arbn(self, arbn):
        """Sets the arbn of this BusinessDetails.


        :param arbn: The arbn of this BusinessDetails.
        :type arbn: str
        """
        if arbn is None:
            raise ValueError("Invalid value for `arbn`, must not be `None`")

        self._arbn = arbn

    @property
    def anzsic_code(self):
        """Gets the anzsic_code of this BusinessDetails.


        :return: The anzsic_code of this BusinessDetails.
        :rtype: str
        """
        return self._anzsic_code

    @anzsic_code.setter
    def anzsic_code(self, anzsic_code):
        """Sets the anzsic_code of this BusinessDetails.


        :param anzsic_code: The anzsic_code of this BusinessDetails.
        :type anzsic_code: str
        """
        if anzsic_code is None:
            raise ValueError("Invalid value for `anzsic_code`, must not be `None`")

        self._anzsic_code = anzsic_code

    @property
    def asic_company_type(self):
        """Gets the asic_company_type of this BusinessDetails.


        :return: The asic_company_type of this BusinessDetails.
        :rtype: str
        """
        return self._asic_company_type

    @asic_company_type.setter
    def asic_company_type(self, asic_company_type):
        """Sets the asic_company_type of this BusinessDetails.


        :param asic_company_type: The asic_company_type of this BusinessDetails.
        :type asic_company_type: str
        """

        self._asic_company_type = asic_company_type

    @property
    def business_names(self):
        """Gets the business_names of this BusinessDetails.


        :return: The business_names of this BusinessDetails.
        :rtype: List[str]
        """
        return self._business_names

    @business_names.setter
    def business_names(self, business_names):
        """Sets the business_names of this BusinessDetails.


        :param business_names: The business_names of this BusinessDetails.
        :type business_names: List[str]
        """

        self._business_names = business_names

    @property
    def date_registered_with_asic(self):
        """Gets the date_registered_with_asic of this BusinessDetails.


        :return: The date_registered_with_asic of this BusinessDetails.
        :rtype: date
        """
        return self._date_registered_with_asic

    @date_registered_with_asic.setter
    def date_registered_with_asic(self, date_registered_with_asic):
        """Sets the date_registered_with_asic of this BusinessDetails.


        :param date_registered_with_asic: The date_registered_with_asic of this BusinessDetails.
        :type date_registered_with_asic: date
        """

        self._date_registered_with_asic = date_registered_with_asic

    @property
    def entity_id(self):
        """Gets the entity_id of this BusinessDetails.

        Frankie's unique identifier for the business.  Uses a non-versioned UUID format 

        :return: The entity_id of this BusinessDetails.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this BusinessDetails.

        Frankie's unique identifier for the business.  Uses a non-versioned UUID format 

        :param entity_id: The entity_id of this BusinessDetails.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def giin(self):
        """Gets the giin of this BusinessDetails.


        :return: The giin of this BusinessDetails.
        :rtype: str
        """
        return self._giin

    @giin.setter
    def giin(self, giin):
        """Sets the giin of this BusinessDetails.


        :param giin: The giin of this BusinessDetails.
        :type giin: str
        """
        if giin is None:
            raise ValueError("Invalid value for `giin`, must not be `None`")

        self._giin = giin

    @property
    def place_of_business(self):
        """Gets the place_of_business of this BusinessDetails.


        :return: The place_of_business of this BusinessDetails.
        :rtype: AddressObject
        """
        return self._place_of_business

    @place_of_business.setter
    def place_of_business(self, place_of_business):
        """Sets the place_of_business of this BusinessDetails.


        :param place_of_business: The place_of_business of this BusinessDetails.
        :type place_of_business: AddressObject
        """

        self._place_of_business = place_of_business

    @property
    def public_company(self):
        """Gets the public_company of this BusinessDetails.


        :return: The public_company of this BusinessDetails.
        :rtype: bool
        """
        return self._public_company

    @public_company.setter
    def public_company(self, public_company):
        """Sets the public_company of this BusinessDetails.


        :param public_company: The public_company of this BusinessDetails.
        :type public_company: bool
        """

        self._public_company = public_company

    @property
    def registered_name(self):
        """Gets the registered_name of this BusinessDetails.


        :return: The registered_name of this BusinessDetails.
        :rtype: str
        """
        return self._registered_name

    @registered_name.setter
    def registered_name(self, registered_name):
        """Sets the registered_name of this BusinessDetails.


        :param registered_name: The registered_name of this BusinessDetails.
        :type registered_name: str
        """
        if registered_name is None:
            raise ValueError("Invalid value for `registered_name`, must not be `None`")

        self._registered_name = registered_name

    @property
    def registered_office(self):
        """Gets the registered_office of this BusinessDetails.


        :return: The registered_office of this BusinessDetails.
        :rtype: AddressObject
        """
        return self._registered_office

    @registered_office.setter
    def registered_office(self, registered_office):
        """Sets the registered_office of this BusinessDetails.


        :param registered_office: The registered_office of this BusinessDetails.
        :type registered_office: AddressObject
        """

        self._registered_office = registered_office

    @property
    def regulatory_information(self):
        """Gets the regulatory_information of this BusinessDetails.


        :return: The regulatory_information of this BusinessDetails.
        :rtype: RegulatoryInformation
        """
        return self._regulatory_information

    @regulatory_information.setter
    def regulatory_information(self, regulatory_information):
        """Sets the regulatory_information of this BusinessDetails.


        :param regulatory_information: The regulatory_information of this BusinessDetails.
        :type regulatory_information: RegulatoryInformation
        """

        self._regulatory_information = regulatory_information

    @property
    def state_registered_with_asic(self):
        """Gets the state_registered_with_asic of this BusinessDetails.


        :return: The state_registered_with_asic of this BusinessDetails.
        :rtype: str
        """
        return self._state_registered_with_asic

    @state_registered_with_asic.setter
    def state_registered_with_asic(self, state_registered_with_asic):
        """Sets the state_registered_with_asic of this BusinessDetails.


        :param state_registered_with_asic: The state_registered_with_asic of this BusinessDetails.
        :type state_registered_with_asic: str
        """

        self._state_registered_with_asic = state_registered_with_asic

    @property
    def stock_exchange_data(self):
        """Gets the stock_exchange_data of this BusinessDetails.


        :return: The stock_exchange_data of this BusinessDetails.
        :rtype: StockExchangeData
        """
        return self._stock_exchange_data

    @stock_exchange_data.setter
    def stock_exchange_data(self, stock_exchange_data):
        """Sets the stock_exchange_data of this BusinessDetails.


        :param stock_exchange_data: The stock_exchange_data of this BusinessDetails.
        :type stock_exchange_data: StockExchangeData
        """

        self._stock_exchange_data = stock_exchange_data

    @property
    def trading_names(self):
        """Gets the trading_names of this BusinessDetails.


        :return: The trading_names of this BusinessDetails.
        :rtype: List[str]
        """
        return self._trading_names

    @trading_names.setter
    def trading_names(self, trading_names):
        """Sets the trading_names of this BusinessDetails.


        :param trading_names: The trading_names of this BusinessDetails.
        :type trading_names: List[str]
        """

        self._trading_names = trading_names
