# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EICDetailsConcessionCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concession_evidence_type: str=None, concession_type: str=None, customer_reference_number: str=None, end_date: date=None, first_name: str=None, last_name: str=None, start_date: date=None):
        """EICDetailsConcessionCard - a model defined in OpenAPI

        :param concession_evidence_type: The concession_evidence_type of this EICDetailsConcessionCard.
        :param concession_type: The concession_type of this EICDetailsConcessionCard.
        :param customer_reference_number: The customer_reference_number of this EICDetailsConcessionCard.
        :param end_date: The end_date of this EICDetailsConcessionCard.
        :param first_name: The first_name of this EICDetailsConcessionCard.
        :param last_name: The last_name of this EICDetailsConcessionCard.
        :param start_date: The start_date of this EICDetailsConcessionCard.
        """
        self.openapi_types = {
            'concession_evidence_type': str,
            'concession_type': str,
            'customer_reference_number': str,
            'end_date': date,
            'first_name': str,
            'last_name': str,
            'start_date': date
        }

        self.attribute_map = {
            'concession_evidence_type': 'concessionEvidenceType',
            'concession_type': 'concessionType',
            'customer_reference_number': 'customerReferenceNumber',
            'end_date': 'endDate',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'start_date': 'startDate'
        }

        self._concession_evidence_type = concession_evidence_type
        self._concession_type = concession_type
        self._customer_reference_number = customer_reference_number
        self._end_date = end_date
        self._first_name = first_name
        self._last_name = last_name
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EICDetailsConcessionCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EICDetails_concessionCard of this EICDetailsConcessionCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concession_evidence_type(self):
        """Gets the concession_evidence_type of this EICDetailsConcessionCard.

        The type of evidence used to prove eligibility for concessions

        :return: The concession_evidence_type of this EICDetailsConcessionCard.
        :rtype: str
        """
        return self._concession_evidence_type

    @concession_evidence_type.setter
    def concession_evidence_type(self, concession_evidence_type):
        """Sets the concession_evidence_type of this EICDetailsConcessionCard.

        The type of evidence used to prove eligibility for concessions

        :param concession_evidence_type: The concession_evidence_type of this EICDetailsConcessionCard.
        :type concession_evidence_type: str
        """
        allowed_values = ["Pensioner Concession Card", "Gold Repatriation Health Card", "Health Care Card", "NSW Life Support Rebate Without Concession Card", "Queensland Seniors Card"]  # noqa: E501
        if concession_evidence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `concession_evidence_type` ({0}), must be one of {1}"
                .format(concession_evidence_type, allowed_values)
            )

        self._concession_evidence_type = concession_evidence_type

    @property
    def concession_type(self):
        """Gets the concession_type of this EICDetailsConcessionCard.

        Concessions linked to the customer's concession card

        :return: The concession_type of this EICDetailsConcessionCard.
        :rtype: str
        """
        return self._concession_type

    @concession_type.setter
    def concession_type(self, concession_type):
        """Sets the concession_type of this EICDetailsConcessionCard.

        Concessions linked to the customer's concession card

        :param concession_type: The concession_type of this EICDetailsConcessionCard.
        :type concession_type: str
        """
        allowed_values = ["Life Support", "Medical Cooling", "Service to Property Charge", "Off-Peak Electricity", "Annual Electricity", "Transfer Fee Waiver", "Excess Electricity", "Controlled Load", "Low Income Household", "Medical Energy", "NSW Government Life Support Rebate", "Queensland Electricity Rebate", "Winter Gas", "Excess Gas Consumption"]  # noqa: E501
        if concession_type not in allowed_values:
            raise ValueError(
                "Invalid value for `concession_type` ({0}), must be one of {1}"
                .format(concession_type, allowed_values)
            )

        self._concession_type = concession_type

    @property
    def customer_reference_number(self):
        """Gets the customer_reference_number of this EICDetailsConcessionCard.

        Customer Reference Number (CRN) on the concession card

        :return: The customer_reference_number of this EICDetailsConcessionCard.
        :rtype: str
        """
        return self._customer_reference_number

    @customer_reference_number.setter
    def customer_reference_number(self, customer_reference_number):
        """Sets the customer_reference_number of this EICDetailsConcessionCard.

        Customer Reference Number (CRN) on the concession card

        :param customer_reference_number: The customer_reference_number of this EICDetailsConcessionCard.
        :type customer_reference_number: str
        """
        if customer_reference_number is None:
            raise ValueError("Invalid value for `customer_reference_number`, must not be `None`")

        self._customer_reference_number = customer_reference_number

    @property
    def end_date(self):
        """Gets the end_date of this EICDetailsConcessionCard.

        Concession card end expiry date

        :return: The end_date of this EICDetailsConcessionCard.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EICDetailsConcessionCard.

        Concession card end expiry date

        :param end_date: The end_date of this EICDetailsConcessionCard.
        :type end_date: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")

        self._end_date = end_date

    @property
    def first_name(self):
        """Gets the first_name of this EICDetailsConcessionCard.

        First name on the concession card

        :return: The first_name of this EICDetailsConcessionCard.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EICDetailsConcessionCard.

        First name on the concession card

        :param first_name: The first_name of this EICDetailsConcessionCard.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EICDetailsConcessionCard.

        Last name on the concession card

        :return: The last_name of this EICDetailsConcessionCard.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EICDetailsConcessionCard.

        Last name on the concession card

        :param last_name: The last_name of this EICDetailsConcessionCard.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def start_date(self):
        """Gets the start_date of this EICDetailsConcessionCard.

        Concession card start date

        :return: The start_date of this EICDetailsConcessionCard.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EICDetailsConcessionCard.

        Concession card start date

        :param start_date: The start_date of this EICDetailsConcessionCard.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
