# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_mark_up import DisplayMarkUp
from openapi_server.models.plan import Plan
from openapi_server import util


class SwitchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id: str=None, next_steps: List[DisplayMarkUp]=None, plan: Plan=None, reference: str=None, switch_date: str=None, version: str=None):
        """SwitchResponse - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this SwitchResponse.
        :param next_steps: The next_steps of this SwitchResponse.
        :param plan: The plan of this SwitchResponse.
        :param reference: The reference of this SwitchResponse.
        :param switch_date: The switch_date of this SwitchResponse.
        :param version: The version of this SwitchResponse.
        """
        self.openapi_types = {
            'correlation_id': str,
            'next_steps': List[DisplayMarkUp],
            'plan': Plan,
            'reference': str,
            'switch_date': str,
            'version': str
        }

        self.attribute_map = {
            'correlation_id': 'correlationId',
            'next_steps': 'nextSteps',
            'plan': 'plan',
            'reference': 'reference',
            'switch_date': 'switchDate',
            'version': 'version'
        }

        self._correlation_id = correlation_id
        self._next_steps = next_steps
        self._plan = plan
        self._reference = reference
        self._switch_date = switch_date
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchResponse of this SwitchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this SwitchResponse.

        The correlationId as passed in the request

        :return: The correlation_id of this SwitchResponse.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this SwitchResponse.

        The correlationId as passed in the request

        :param correlation_id: The correlation_id of this SwitchResponse.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def next_steps(self):
        """Gets the next_steps of this SwitchResponse.

        Hierarchical list of objects for rendering the next steps

        :return: The next_steps of this SwitchResponse.
        :rtype: List[DisplayMarkUp]
        """
        return self._next_steps

    @next_steps.setter
    def next_steps(self, next_steps):
        """Sets the next_steps of this SwitchResponse.

        Hierarchical list of objects for rendering the next steps

        :param next_steps: The next_steps of this SwitchResponse.
        :type next_steps: List[DisplayMarkUp]
        """

        self._next_steps = next_steps

    @property
    def plan(self):
        """Gets the plan of this SwitchResponse.


        :return: The plan of this SwitchResponse.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SwitchResponse.


        :param plan: The plan of this SwitchResponse.
        :type plan: Plan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def reference(self):
        """Gets the reference of this SwitchResponse.

        A unique reference for this switch request

        :return: The reference of this SwitchResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SwitchResponse.

        A unique reference for this switch request

        :param reference: The reference of this SwitchResponse.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def switch_date(self):
        """Gets the switch_date of this SwitchResponse.

        Timestamp of switch request

        :return: The switch_date of this SwitchResponse.
        :rtype: str
        """
        return self._switch_date

    @switch_date.setter
    def switch_date(self, switch_date):
        """Sets the switch_date of this SwitchResponse.

        Timestamp of switch request

        :param switch_date: The switch_date of this SwitchResponse.
        :type switch_date: str
        """
        if switch_date is None:
            raise ValueError("Invalid value for `switch_date`, must not be `None`")

        self._switch_date = switch_date

    @property
    def version(self):
        """Gets the version of this SwitchResponse.

        Version of the API on which the switch request took place. This value should be reported with any issue raised.

        :return: The version of this SwitchResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SwitchResponse.

        Version of the API on which the switch request took place. This value should be reported with any issue raised.

        :param version: The version of this SwitchResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
