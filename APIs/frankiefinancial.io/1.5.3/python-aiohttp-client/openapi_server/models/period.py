# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rate_value import RateValue
from openapi_server import util


class Period(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, controlled_load1: RateValue=None, controlled_load2: RateValue=None, off_peak: RateValue=None, off_peak_step1: RateValue=None, off_peak_step2: RateValue=None, peak: RateValue=None, peak_step1: RateValue=None, peak_step2: RateValue=None, peak_step3: RateValue=None, shoulder: RateValue=None, supply_charge: RateValue=None):
        """Period - a model defined in OpenAPI

        :param controlled_load1: The controlled_load1 of this Period.
        :param controlled_load2: The controlled_load2 of this Period.
        :param off_peak: The off_peak of this Period.
        :param off_peak_step1: The off_peak_step1 of this Period.
        :param off_peak_step2: The off_peak_step2 of this Period.
        :param peak: The peak of this Period.
        :param peak_step1: The peak_step1 of this Period.
        :param peak_step2: The peak_step2 of this Period.
        :param peak_step3: The peak_step3 of this Period.
        :param shoulder: The shoulder of this Period.
        :param supply_charge: The supply_charge of this Period.
        """
        self.openapi_types = {
            'controlled_load1': RateValue,
            'controlled_load2': RateValue,
            'off_peak': RateValue,
            'off_peak_step1': RateValue,
            'off_peak_step2': RateValue,
            'peak': RateValue,
            'peak_step1': RateValue,
            'peak_step2': RateValue,
            'peak_step3': RateValue,
            'shoulder': RateValue,
            'supply_charge': RateValue
        }

        self.attribute_map = {
            'controlled_load1': 'controlledLoad1',
            'controlled_load2': 'controlledLoad2',
            'off_peak': 'offPeak',
            'off_peak_step1': 'offPeakStep1',
            'off_peak_step2': 'offPeakStep2',
            'peak': 'peak',
            'peak_step1': 'peakStep1',
            'peak_step2': 'peakStep2',
            'peak_step3': 'peakStep3',
            'shoulder': 'shoulder',
            'supply_charge': 'supplyCharge'
        }

        self._controlled_load1 = controlled_load1
        self._controlled_load2 = controlled_load2
        self._off_peak = off_peak
        self._off_peak_step1 = off_peak_step1
        self._off_peak_step2 = off_peak_step2
        self._peak = peak
        self._peak_step1 = peak_step1
        self._peak_step2 = peak_step2
        self._peak_step3 = peak_step3
        self._shoulder = shoulder
        self._supply_charge = supply_charge

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Period':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Period of this Period.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def controlled_load1(self):
        """Gets the controlled_load1 of this Period.


        :return: The controlled_load1 of this Period.
        :rtype: RateValue
        """
        return self._controlled_load1

    @controlled_load1.setter
    def controlled_load1(self, controlled_load1):
        """Sets the controlled_load1 of this Period.


        :param controlled_load1: The controlled_load1 of this Period.
        :type controlled_load1: RateValue
        """

        self._controlled_load1 = controlled_load1

    @property
    def controlled_load2(self):
        """Gets the controlled_load2 of this Period.


        :return: The controlled_load2 of this Period.
        :rtype: RateValue
        """
        return self._controlled_load2

    @controlled_load2.setter
    def controlled_load2(self, controlled_load2):
        """Sets the controlled_load2 of this Period.


        :param controlled_load2: The controlled_load2 of this Period.
        :type controlled_load2: RateValue
        """

        self._controlled_load2 = controlled_load2

    @property
    def off_peak(self):
        """Gets the off_peak of this Period.


        :return: The off_peak of this Period.
        :rtype: RateValue
        """
        return self._off_peak

    @off_peak.setter
    def off_peak(self, off_peak):
        """Sets the off_peak of this Period.


        :param off_peak: The off_peak of this Period.
        :type off_peak: RateValue
        """

        self._off_peak = off_peak

    @property
    def off_peak_step1(self):
        """Gets the off_peak_step1 of this Period.


        :return: The off_peak_step1 of this Period.
        :rtype: RateValue
        """
        return self._off_peak_step1

    @off_peak_step1.setter
    def off_peak_step1(self, off_peak_step1):
        """Sets the off_peak_step1 of this Period.


        :param off_peak_step1: The off_peak_step1 of this Period.
        :type off_peak_step1: RateValue
        """

        self._off_peak_step1 = off_peak_step1

    @property
    def off_peak_step2(self):
        """Gets the off_peak_step2 of this Period.


        :return: The off_peak_step2 of this Period.
        :rtype: RateValue
        """
        return self._off_peak_step2

    @off_peak_step2.setter
    def off_peak_step2(self, off_peak_step2):
        """Sets the off_peak_step2 of this Period.


        :param off_peak_step2: The off_peak_step2 of this Period.
        :type off_peak_step2: RateValue
        """

        self._off_peak_step2 = off_peak_step2

    @property
    def peak(self):
        """Gets the peak of this Period.


        :return: The peak of this Period.
        :rtype: RateValue
        """
        return self._peak

    @peak.setter
    def peak(self, peak):
        """Sets the peak of this Period.


        :param peak: The peak of this Period.
        :type peak: RateValue
        """

        self._peak = peak

    @property
    def peak_step1(self):
        """Gets the peak_step1 of this Period.


        :return: The peak_step1 of this Period.
        :rtype: RateValue
        """
        return self._peak_step1

    @peak_step1.setter
    def peak_step1(self, peak_step1):
        """Sets the peak_step1 of this Period.


        :param peak_step1: The peak_step1 of this Period.
        :type peak_step1: RateValue
        """

        self._peak_step1 = peak_step1

    @property
    def peak_step2(self):
        """Gets the peak_step2 of this Period.


        :return: The peak_step2 of this Period.
        :rtype: RateValue
        """
        return self._peak_step2

    @peak_step2.setter
    def peak_step2(self, peak_step2):
        """Sets the peak_step2 of this Period.


        :param peak_step2: The peak_step2 of this Period.
        :type peak_step2: RateValue
        """

        self._peak_step2 = peak_step2

    @property
    def peak_step3(self):
        """Gets the peak_step3 of this Period.


        :return: The peak_step3 of this Period.
        :rtype: RateValue
        """
        return self._peak_step3

    @peak_step3.setter
    def peak_step3(self, peak_step3):
        """Sets the peak_step3 of this Period.


        :param peak_step3: The peak_step3 of this Period.
        :type peak_step3: RateValue
        """

        self._peak_step3 = peak_step3

    @property
    def shoulder(self):
        """Gets the shoulder of this Period.


        :return: The shoulder of this Period.
        :rtype: RateValue
        """
        return self._shoulder

    @shoulder.setter
    def shoulder(self, shoulder):
        """Sets the shoulder of this Period.


        :param shoulder: The shoulder of this Period.
        :type shoulder: RateValue
        """

        self._shoulder = shoulder

    @property
    def supply_charge(self):
        """Gets the supply_charge of this Period.


        :return: The supply_charge of this Period.
        :rtype: RateValue
        """
        return self._supply_charge

    @supply_charge.setter
    def supply_charge(self, supply_charge):
        """Sets the supply_charge of this Period.


        :param supply_charge: The supply_charge of this Period.
        :type supply_charge: RateValue
        """

        self._supply_charge = supply_charge
