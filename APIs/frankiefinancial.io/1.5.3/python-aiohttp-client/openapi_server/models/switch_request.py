# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.switch_details import SwitchDetails
from openapi_server import util


class SwitchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation: List[str]=None, correlation_id: str=None, details: SwitchDetails=None):
        """SwitchRequest - a model defined in OpenAPI

        :param confirmation: The confirmation of this SwitchRequest.
        :param correlation_id: The correlation_id of this SwitchRequest.
        :param details: The details of this SwitchRequest.
        """
        self.openapi_types = {
            'confirmation': List[str],
            'correlation_id': str,
            'details': SwitchDetails
        }

        self.attribute_map = {
            'confirmation': 'confirmation',
            'correlation_id': 'correlationId',
            'details': 'details'
        }

        self._confirmation = confirmation
        self._correlation_id = correlation_id
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchRequest of this SwitchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation(self):
        """Gets the confirmation of this SwitchRequest.

        Array of strings containing all the keys of the elements that required confirmation in the EIC. The absence of any key for a mandatory confirmation will result in an error response.

        :return: The confirmation of this SwitchRequest.
        :rtype: List[str]
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this SwitchRequest.

        Array of strings containing all the keys of the elements that required confirmation in the EIC. The absence of any key for a mandatory confirmation will result in an error response.

        :param confirmation: The confirmation of this SwitchRequest.
        :type confirmation: List[str]
        """

        self._confirmation = confirmation

    @property
    def correlation_id(self):
        """Gets the correlation_id of this SwitchRequest.

        Correlation ID as passed to comparison request

        :return: The correlation_id of this SwitchRequest.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this SwitchRequest.

        Correlation ID as passed to comparison request

        :param correlation_id: The correlation_id of this SwitchRequest.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def details(self):
        """Gets the details of this SwitchRequest.


        :return: The details of this SwitchRequest.
        :rtype: SwitchDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SwitchRequest.


        :param details: The details of this SwitchRequest.
        :type details: SwitchDetails
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details
