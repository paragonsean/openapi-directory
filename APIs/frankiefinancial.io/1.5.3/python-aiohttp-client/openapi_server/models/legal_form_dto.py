# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalFormDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basis: str=None, capital: str=None, comments: str=None, control: str=None, incorp: str=None, partner: str=None, responsibility: str=None, stocks: str=None):
        """LegalFormDTO - a model defined in OpenAPI

        :param basis: The basis of this LegalFormDTO.
        :param capital: The capital of this LegalFormDTO.
        :param comments: The comments of this LegalFormDTO.
        :param control: The control of this LegalFormDTO.
        :param incorp: The incorp of this LegalFormDTO.
        :param partner: The partner of this LegalFormDTO.
        :param responsibility: The responsibility of this LegalFormDTO.
        :param stocks: The stocks of this LegalFormDTO.
        """
        self.openapi_types = {
            'basis': str,
            'capital': str,
            'comments': str,
            'control': str,
            'incorp': str,
            'partner': str,
            'responsibility': str,
            'stocks': str
        }

        self.attribute_map = {
            'basis': 'Basis',
            'capital': 'Capital',
            'comments': 'Comments',
            'control': 'Control',
            'incorp': 'Incorp',
            'partner': 'Partner',
            'responsibility': 'Responsibility',
            'stocks': 'Stocks'
        }

        self._basis = basis
        self._capital = capital
        self._comments = comments
        self._control = control
        self._incorp = incorp
        self._partner = partner
        self._responsibility = responsibility
        self._stocks = stocks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalFormDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalFormDTO of this LegalFormDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basis(self):
        """Gets the basis of this LegalFormDTO.


        :return: The basis of this LegalFormDTO.
        :rtype: str
        """
        return self._basis

    @basis.setter
    def basis(self, basis):
        """Sets the basis of this LegalFormDTO.


        :param basis: The basis of this LegalFormDTO.
        :type basis: str
        """

        self._basis = basis

    @property
    def capital(self):
        """Gets the capital of this LegalFormDTO.


        :return: The capital of this LegalFormDTO.
        :rtype: str
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this LegalFormDTO.


        :param capital: The capital of this LegalFormDTO.
        :type capital: str
        """

        self._capital = capital

    @property
    def comments(self):
        """Gets the comments of this LegalFormDTO.


        :return: The comments of this LegalFormDTO.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this LegalFormDTO.


        :param comments: The comments of this LegalFormDTO.
        :type comments: str
        """

        self._comments = comments

    @property
    def control(self):
        """Gets the control of this LegalFormDTO.


        :return: The control of this LegalFormDTO.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this LegalFormDTO.


        :param control: The control of this LegalFormDTO.
        :type control: str
        """

        self._control = control

    @property
    def incorp(self):
        """Gets the incorp of this LegalFormDTO.


        :return: The incorp of this LegalFormDTO.
        :rtype: str
        """
        return self._incorp

    @incorp.setter
    def incorp(self, incorp):
        """Sets the incorp of this LegalFormDTO.


        :param incorp: The incorp of this LegalFormDTO.
        :type incorp: str
        """

        self._incorp = incorp

    @property
    def partner(self):
        """Gets the partner of this LegalFormDTO.


        :return: The partner of this LegalFormDTO.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this LegalFormDTO.


        :param partner: The partner of this LegalFormDTO.
        :type partner: str
        """

        self._partner = partner

    @property
    def responsibility(self):
        """Gets the responsibility of this LegalFormDTO.


        :return: The responsibility of this LegalFormDTO.
        :rtype: str
        """
        return self._responsibility

    @responsibility.setter
    def responsibility(self, responsibility):
        """Sets the responsibility of this LegalFormDTO.


        :param responsibility: The responsibility of this LegalFormDTO.
        :type responsibility: str
        """

        self._responsibility = responsibility

    @property
    def stocks(self):
        """Gets the stocks of this LegalFormDTO.


        :return: The stocks of this LegalFormDTO.
        :rtype: str
        """
        return self._stocks

    @stocks.setter
    def stocks(self, stocks):
        """Sets the stocks of this LegalFormDTO.


        :param stocks: The stocks of this LegalFormDTO.
        :type stocks: str
        """

        self._stocks = stocks
