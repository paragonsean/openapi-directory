# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MedicareCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_color: str=None, expiry_date: str=None, middle_name: str=None, number: str=None, reference_number: str=None, type: str=None):
        """MedicareCard - a model defined in OpenAPI

        :param card_color: The card_color of this MedicareCard.
        :param expiry_date: The expiry_date of this MedicareCard.
        :param middle_name: The middle_name of this MedicareCard.
        :param number: The number of this MedicareCard.
        :param reference_number: The reference_number of this MedicareCard.
        :param type: The type of this MedicareCard.
        """
        self.openapi_types = {
            'card_color': str,
            'expiry_date': str,
            'middle_name': str,
            'number': str,
            'reference_number': str,
            'type': str
        }

        self.attribute_map = {
            'card_color': 'cardColor',
            'expiry_date': 'expiryDate',
            'middle_name': 'middleName',
            'number': 'number',
            'reference_number': 'referenceNumber',
            'type': 'type'
        }

        self._card_color = card_color
        self._expiry_date = expiry_date
        self._middle_name = middle_name
        self._number = number
        self._reference_number = reference_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MedicareCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MedicareCard of this MedicareCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_color(self):
        """Gets the card_color of this MedicareCard.

        Card color

        :return: The card_color of this MedicareCard.
        :rtype: str
        """
        return self._card_color

    @card_color.setter
    def card_color(self, card_color):
        """Sets the card_color of this MedicareCard.

        Card color

        :param card_color: The card_color of this MedicareCard.
        :type card_color: str
        """
        allowed_values = ["green", "blue", "yellow"]  # noqa: E501
        if card_color not in allowed_values:
            raise ValueError(
                "Invalid value for `card_color` ({0}), must be one of {1}"
                .format(card_color, allowed_values)
            )

        self._card_color = card_color

    @property
    def expiry_date(self):
        """Gets the expiry_date of this MedicareCard.

        Expiry date of drivers licence

        :return: The expiry_date of this MedicareCard.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this MedicareCard.

        Expiry date of drivers licence

        :param expiry_date: The expiry_date of this MedicareCard.
        :type expiry_date: str
        """
        if expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")

        self._expiry_date = expiry_date

    @property
    def middle_name(self):
        """Gets the middle_name of this MedicareCard.

        Middle Name on Card

        :return: The middle_name of this MedicareCard.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this MedicareCard.

        Middle Name on Card

        :param middle_name: The middle_name of this MedicareCard.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def number(self):
        """Gets the number of this MedicareCard.

        Medicare Card Number

        :return: The number of this MedicareCard.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this MedicareCard.

        Medicare Card Number

        :param number: The number of this MedicareCard.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def reference_number(self):
        """Gets the reference_number of this MedicareCard.

        Medicare Card Reference Number

        :return: The reference_number of this MedicareCard.
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this MedicareCard.

        Medicare Card Reference Number

        :param reference_number: The reference_number of this MedicareCard.
        :type reference_number: str
        """

        self._reference_number = reference_number

    @property
    def type(self):
        """Gets the type of this MedicareCard.

        Document identifier

        :return: The type of this MedicareCard.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MedicareCard.

        Document identifier

        :param type: The type of this MedicareCard.
        :type type: str
        """
        allowed_values = ["medicare"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
