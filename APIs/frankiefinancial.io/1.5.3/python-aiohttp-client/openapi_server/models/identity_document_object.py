# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_document_status import EnumDocumentStatus
from openapi_server.models.enum_id_type import EnumIdType
from openapi_server.models.key_value_pair_object import KeyValuePairObject
from openapi_server.models.scanned_document_object import ScannedDocumentObject
from openapi_server import util


class IdentityDocumentObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, created_from_scan: bool=None, doc_scan: List[ScannedDocumentObject]=None, document_id: str=None, document_status: EnumDocumentStatus=None, extra_data: List[KeyValuePairObject]=None, id_expiry: date=None, id_issued: date=None, id_number: str=None, id_sub_type: str=None, id_type: EnumIdType=None, manually_modified: bool=None, region: str=None):
        """IdentityDocumentObject - a model defined in OpenAPI

        :param country: The country of this IdentityDocumentObject.
        :param created_from_scan: The created_from_scan of this IdentityDocumentObject.
        :param doc_scan: The doc_scan of this IdentityDocumentObject.
        :param document_id: The document_id of this IdentityDocumentObject.
        :param document_status: The document_status of this IdentityDocumentObject.
        :param extra_data: The extra_data of this IdentityDocumentObject.
        :param id_expiry: The id_expiry of this IdentityDocumentObject.
        :param id_issued: The id_issued of this IdentityDocumentObject.
        :param id_number: The id_number of this IdentityDocumentObject.
        :param id_sub_type: The id_sub_type of this IdentityDocumentObject.
        :param id_type: The id_type of this IdentityDocumentObject.
        :param manually_modified: The manually_modified of this IdentityDocumentObject.
        :param region: The region of this IdentityDocumentObject.
        """
        self.openapi_types = {
            'country': str,
            'created_from_scan': bool,
            'doc_scan': List[ScannedDocumentObject],
            'document_id': str,
            'document_status': EnumDocumentStatus,
            'extra_data': List[KeyValuePairObject],
            'id_expiry': date,
            'id_issued': date,
            'id_number': str,
            'id_sub_type': str,
            'id_type': EnumIdType,
            'manually_modified': bool,
            'region': str
        }

        self.attribute_map = {
            'country': 'country',
            'created_from_scan': 'createdFromScan',
            'doc_scan': 'docScan',
            'document_id': 'documentId',
            'document_status': 'documentStatus',
            'extra_data': 'extraData',
            'id_expiry': 'idExpiry',
            'id_issued': 'idIssued',
            'id_number': 'idNumber',
            'id_sub_type': 'idSubType',
            'id_type': 'idType',
            'manually_modified': 'manuallyModified',
            'region': 'region'
        }

        self._country = country
        self._created_from_scan = created_from_scan
        self._doc_scan = doc_scan
        self._document_id = document_id
        self._document_status = document_status
        self._extra_data = extra_data
        self._id_expiry = id_expiry
        self._id_issued = id_issued
        self._id_number = id_number
        self._id_sub_type = id_sub_type
        self._id_type = id_type
        self._manually_modified = manually_modified
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityDocumentObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityDocumentObject of this IdentityDocumentObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this IdentityDocumentObject.

        The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more 

        :return: The country of this IdentityDocumentObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IdentityDocumentObject.

        The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more 

        :param country: The country of this IdentityDocumentObject.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def created_from_scan(self):
        """Gets the created_from_scan of this IdentityDocumentObject.

        This document's data was initially created from scanned and processed images. The value cannot be set manually and any attempt to do so will just be ignored. 

        :return: The created_from_scan of this IdentityDocumentObject.
        :rtype: bool
        """
        return self._created_from_scan

    @created_from_scan.setter
    def created_from_scan(self, created_from_scan):
        """Sets the created_from_scan of this IdentityDocumentObject.

        This document's data was initially created from scanned and processed images. The value cannot be set manually and any attempt to do so will just be ignored. 

        :param created_from_scan: The created_from_scan of this IdentityDocumentObject.
        :type created_from_scan: bool
        """

        self._created_from_scan = created_from_scan

    @property
    def doc_scan(self):
        """Gets the doc_scan of this IdentityDocumentObject.

        Collection of one or more objects that describe scan(s) that need to be put through OCR or facial recognition. These should all be from the one ID document, such as front/back, or page 1, 2, 3, etc. You can upload multiple scans in a single call, or in multiple calls.     Note: if you do upload over multiple calls, make sure you include the documentId (see above), and indicate that this is happening with a \"more_data\" checkAction 

        :return: The doc_scan of this IdentityDocumentObject.
        :rtype: List[ScannedDocumentObject]
        """
        return self._doc_scan

    @doc_scan.setter
    def doc_scan(self, doc_scan):
        """Sets the doc_scan of this IdentityDocumentObject.

        Collection of one or more objects that describe scan(s) that need to be put through OCR or facial recognition. These should all be from the one ID document, such as front/back, or page 1, 2, 3, etc. You can upload multiple scans in a single call, or in multiple calls.     Note: if you do upload over multiple calls, make sure you include the documentId (see above), and indicate that this is happening with a \"more_data\" checkAction 

        :param doc_scan: The doc_scan of this IdentityDocumentObject.
        :type doc_scan: List[ScannedDocumentObject]
        """

        self._doc_scan = doc_scan

    @property
    def document_id(self):
        """Gets the document_id of this IdentityDocumentObject.

        When an ID document is created/uploaded, it is assigned a documentId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 

        :return: The document_id of this IdentityDocumentObject.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this IdentityDocumentObject.

        When an ID document is created/uploaded, it is assigned a documentId. You'll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you're uploading more/updated data. 

        :param document_id: The document_id of this IdentityDocumentObject.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def document_status(self):
        """Gets the document_status of this IdentityDocumentObject.


        :return: The document_status of this IdentityDocumentObject.
        :rtype: EnumDocumentStatus
        """
        return self._document_status

    @document_status.setter
    def document_status(self, document_status):
        """Sets the document_status of this IdentityDocumentObject.


        :param document_status: The document_status of this IdentityDocumentObject.
        :type document_status: EnumDocumentStatus
        """

        self._document_status = document_status

    @property
    def extra_data(self):
        """Gets the extra_data of this IdentityDocumentObject.

        Set of key-value pairs that provide ID type-specific data. If updating an existing document, then existing values with the same name will be overwritten. New values will be added.  If this document is scanned through OCR or similar processes, then extracted data will be found here (Some may be used to populate other fields like idNumber and idExpiry as well) 

        :return: The extra_data of this IdentityDocumentObject.
        :rtype: List[KeyValuePairObject]
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this IdentityDocumentObject.

        Set of key-value pairs that provide ID type-specific data. If updating an existing document, then existing values with the same name will be overwritten. New values will be added.  If this document is scanned through OCR or similar processes, then extracted data will be found here (Some may be used to populate other fields like idNumber and idExpiry as well) 

        :param extra_data: The extra_data of this IdentityDocumentObject.
        :type extra_data: List[KeyValuePairObject]
        """

        self._extra_data = extra_data

    @property
    def id_expiry(self):
        """Gets the id_expiry of this IdentityDocumentObject.

        The expiry date of the document (if known) in YYYY-MM-DD format.

        :return: The id_expiry of this IdentityDocumentObject.
        :rtype: date
        """
        return self._id_expiry

    @id_expiry.setter
    def id_expiry(self, id_expiry):
        """Sets the id_expiry of this IdentityDocumentObject.

        The expiry date of the document (if known) in YYYY-MM-DD format.

        :param id_expiry: The id_expiry of this IdentityDocumentObject.
        :type id_expiry: date
        """

        self._id_expiry = id_expiry

    @property
    def id_issued(self):
        """Gets the id_issued of this IdentityDocumentObject.

        The issued date of the document (if known) in YYYY-MM-DD format.

        :return: The id_issued of this IdentityDocumentObject.
        :rtype: date
        """
        return self._id_issued

    @id_issued.setter
    def id_issued(self, id_issued):
        """Sets the id_issued of this IdentityDocumentObject.

        The issued date of the document (if known) in YYYY-MM-DD format.

        :param id_issued: The id_issued of this IdentityDocumentObject.
        :type id_issued: date
        """

        self._id_issued = id_issued

    @property
    def id_number(self):
        """Gets the id_number of this IdentityDocumentObject.

        The ID number of the document (if known).

        :return: The id_number of this IdentityDocumentObject.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this IdentityDocumentObject.

        The ID number of the document (if known).

        :param id_number: The id_number of this IdentityDocumentObject.
        :type id_number: str
        """

        self._id_number = id_number

    @property
    def id_sub_type(self):
        """Gets the id_sub_type of this IdentityDocumentObject.

        The sub-type of identity document. Very document specific.

        :return: The id_sub_type of this IdentityDocumentObject.
        :rtype: str
        """
        return self._id_sub_type

    @id_sub_type.setter
    def id_sub_type(self, id_sub_type):
        """Sets the id_sub_type of this IdentityDocumentObject.

        The sub-type of identity document. Very document specific.

        :param id_sub_type: The id_sub_type of this IdentityDocumentObject.
        :type id_sub_type: str
        """

        self._id_sub_type = id_sub_type

    @property
    def id_type(self):
        """Gets the id_type of this IdentityDocumentObject.


        :return: The id_type of this IdentityDocumentObject.
        :rtype: EnumIdType
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this IdentityDocumentObject.


        :param id_type: The id_type of this IdentityDocumentObject.
        :type id_type: EnumIdType
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")

        self._id_type = id_type

    @property
    def manually_modified(self):
        """Gets the manually_modified of this IdentityDocumentObject.

        If this document was originally populated from scanned data, then manually adjusted (e.g. if the scan's results weren't 100% correct or data was missing), then this will be set to true. The value cannot be set manually and any attempt to do so will just be ignored. 

        :return: The manually_modified of this IdentityDocumentObject.
        :rtype: bool
        """
        return self._manually_modified

    @manually_modified.setter
    def manually_modified(self, manually_modified):
        """Sets the manually_modified of this IdentityDocumentObject.

        If this document was originally populated from scanned data, then manually adjusted (e.g. if the scan's results weren't 100% correct or data was missing), then this will be set to true. The value cannot be set manually and any attempt to do so will just be ignored. 

        :param manually_modified: The manually_modified of this IdentityDocumentObject.
        :type manually_modified: bool
        """

        self._manually_modified = manually_modified

    @property
    def region(self):
        """Gets the region of this IdentityDocumentObject.

        Regional variant of the ID (e.g. VIC drivers licence)  You should always use the local abbreviation for this. E.g.   - VIC for The Australian state of Victoria   - MA for the US state of Massachusetts   - etc 

        :return: The region of this IdentityDocumentObject.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IdentityDocumentObject.

        Regional variant of the ID (e.g. VIC drivers licence)  You should always use the local abbreviation for this. E.g.   - VIC for The Australian state of Victoria   - MA for the US state of Massachusetts   - etc 

        :param region: The region of this IdentityDocumentObject.
        :type region: str
        """

        self._region = region
