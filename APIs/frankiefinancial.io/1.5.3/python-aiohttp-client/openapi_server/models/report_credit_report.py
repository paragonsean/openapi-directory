# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.court_judgement import CourtJudgement
from openapi_server.models.insolvency_notice import InsolvencyNotice
from openapi_server.models.loan import Loan
from openapi_server.models.mercantile_enquiry import MercantileEnquiry
from openapi_server.models.payment_default import PaymentDefault
from openapi_server import util


class ReportCreditReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, court_judgements: List[CourtJudgement]=None, credit_enquiries: int=None, insolvency_notices: List[InsolvencyNotice]=None, loans: List[Loan]=None, mercantile_enquiries: List[MercantileEnquiry]=None, payment_defaults: List[PaymentDefault]=None):
        """ReportCreditReport - a model defined in OpenAPI

        :param court_judgements: The court_judgements of this ReportCreditReport.
        :param credit_enquiries: The credit_enquiries of this ReportCreditReport.
        :param insolvency_notices: The insolvency_notices of this ReportCreditReport.
        :param loans: The loans of this ReportCreditReport.
        :param mercantile_enquiries: The mercantile_enquiries of this ReportCreditReport.
        :param payment_defaults: The payment_defaults of this ReportCreditReport.
        """
        self.openapi_types = {
            'court_judgements': List[CourtJudgement],
            'credit_enquiries': int,
            'insolvency_notices': List[InsolvencyNotice],
            'loans': List[Loan],
            'mercantile_enquiries': List[MercantileEnquiry],
            'payment_defaults': List[PaymentDefault]
        }

        self.attribute_map = {
            'court_judgements': 'courtJudgements',
            'credit_enquiries': 'creditEnquiries',
            'insolvency_notices': 'insolvencyNotices',
            'loans': 'loans',
            'mercantile_enquiries': 'mercantileEnquiries',
            'payment_defaults': 'paymentDefaults'
        }

        self._court_judgements = court_judgements
        self._credit_enquiries = credit_enquiries
        self._insolvency_notices = insolvency_notices
        self._loans = loans
        self._mercantile_enquiries = mercantile_enquiries
        self._payment_defaults = payment_defaults

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportCreditReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportCreditReport of this ReportCreditReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def court_judgements(self):
        """Gets the court_judgements of this ReportCreditReport.

        CreditorWatch aggregate data from courts around Australia to provide a summary of court actions against an entity. When available, details of the action include location, case number, state, plaintiff, nature of the claim, action type and dollar amount.

        :return: The court_judgements of this ReportCreditReport.
        :rtype: List[CourtJudgement]
        """
        return self._court_judgements

    @court_judgements.setter
    def court_judgements(self, court_judgements):
        """Sets the court_judgements of this ReportCreditReport.

        CreditorWatch aggregate data from courts around Australia to provide a summary of court actions against an entity. When available, details of the action include location, case number, state, plaintiff, nature of the claim, action type and dollar amount.

        :param court_judgements: The court_judgements of this ReportCreditReport.
        :type court_judgements: List[CourtJudgement]
        """

        self._court_judgements = court_judgements

    @property
    def credit_enquiries(self):
        """Gets the credit_enquiries of this ReportCreditReport.

        Credit enquiries provide an indication of the number of times an entity's credit file has been accessed.

        :return: The credit_enquiries of this ReportCreditReport.
        :rtype: int
        """
        return self._credit_enquiries

    @credit_enquiries.setter
    def credit_enquiries(self, credit_enquiries):
        """Sets the credit_enquiries of this ReportCreditReport.

        Credit enquiries provide an indication of the number of times an entity's credit file has been accessed.

        :param credit_enquiries: The credit_enquiries of this ReportCreditReport.
        :type credit_enquiries: int
        """

        self._credit_enquiries = credit_enquiries

    @property
    def insolvency_notices(self):
        """Gets the insolvency_notices of this ReportCreditReport.

        Insolvency and other published notices are provided by ASIC. These published notices provide details on external administrations, winding up applications (voluntary or by a court) and proposed company deregistrations, amongst other things. The notices contain important contact details and dates for creditors. These notices are provided directly from the ASIC insolvency notices website. If you require further information, visit:     https://insolvencynotices.asic.gov.au.

        :return: The insolvency_notices of this ReportCreditReport.
        :rtype: List[InsolvencyNotice]
        """
        return self._insolvency_notices

    @insolvency_notices.setter
    def insolvency_notices(self, insolvency_notices):
        """Sets the insolvency_notices of this ReportCreditReport.

        Insolvency and other published notices are provided by ASIC. These published notices provide details on external administrations, winding up applications (voluntary or by a court) and proposed company deregistrations, amongst other things. The notices contain important contact details and dates for creditors. These notices are provided directly from the ASIC insolvency notices website. If you require further information, visit:     https://insolvencynotices.asic.gov.au.

        :param insolvency_notices: The insolvency_notices of this ReportCreditReport.
        :type insolvency_notices: List[InsolvencyNotice]
        """

        self._insolvency_notices = insolvency_notices

    @property
    def loans(self):
        """Gets the loans of this ReportCreditReport.


        :return: The loans of this ReportCreditReport.
        :rtype: List[Loan]
        """
        return self._loans

    @loans.setter
    def loans(self, loans):
        """Sets the loans of this ReportCreditReport.


        :param loans: The loans of this ReportCreditReport.
        :type loans: List[Loan]
        """

        self._loans = loans

    @property
    def mercantile_enquiries(self):
        """Gets the mercantile_enquiries of this ReportCreditReport.

        A Mercantile enquiry is an indication that a mercantile agency (or debt collection agency) has conducted an enquiry on this entity for the purpose of debt collection.

        :return: The mercantile_enquiries of this ReportCreditReport.
        :rtype: List[MercantileEnquiry]
        """
        return self._mercantile_enquiries

    @mercantile_enquiries.setter
    def mercantile_enquiries(self, mercantile_enquiries):
        """Sets the mercantile_enquiries of this ReportCreditReport.

        A Mercantile enquiry is an indication that a mercantile agency (or debt collection agency) has conducted an enquiry on this entity for the purpose of debt collection.

        :param mercantile_enquiries: The mercantile_enquiries of this ReportCreditReport.
        :type mercantile_enquiries: List[MercantileEnquiry]
        """

        self._mercantile_enquiries = mercantile_enquiries

    @property
    def payment_defaults(self):
        """Gets the payment_defaults of this ReportCreditReport.

        A default indicates that the debtor has failed to make a payment for goods or services. Payment Defaults are unique to CreditorWatch and  can have one of three statuses:    - outstanding   - partial payment   - settled. 

        :return: The payment_defaults of this ReportCreditReport.
        :rtype: List[PaymentDefault]
        """
        return self._payment_defaults

    @payment_defaults.setter
    def payment_defaults(self, payment_defaults):
        """Sets the payment_defaults of this ReportCreditReport.

        A default indicates that the debtor has failed to make a payment for goods or services. Payment Defaults are unique to CreditorWatch and  can have one of three statuses:    - outstanding   - partial payment   - settled. 

        :param payment_defaults: The payment_defaults of this ReportCreditReport.
        :type payment_defaults: List[PaymentDefault]
        """

        self._payment_defaults = payment_defaults
