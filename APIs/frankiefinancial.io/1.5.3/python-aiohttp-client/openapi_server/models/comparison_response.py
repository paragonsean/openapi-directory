# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_response_market_disclosure import ComparisonResponseMarketDisclosure
from openapi_server.models.current_bill_data import CurrentBillData
from openapi_server.models.default_offer import DefaultOffer
from openapi_server.models.plan import Plan
from openapi_server import util


class ComparisonResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_date: str=None, correlation_id: str=None, current_bill_data: CurrentBillData=None, default_offer: DefaultOffer=None, market_disclosure: ComparisonResponseMarketDisclosure=None, maximum_saving: float=None, plans: List[Plan]=None, version: str=None):
        """ComparisonResponse - a model defined in OpenAPI

        :param comparison_date: The comparison_date of this ComparisonResponse.
        :param correlation_id: The correlation_id of this ComparisonResponse.
        :param current_bill_data: The current_bill_data of this ComparisonResponse.
        :param default_offer: The default_offer of this ComparisonResponse.
        :param market_disclosure: The market_disclosure of this ComparisonResponse.
        :param maximum_saving: The maximum_saving of this ComparisonResponse.
        :param plans: The plans of this ComparisonResponse.
        :param version: The version of this ComparisonResponse.
        """
        self.openapi_types = {
            'comparison_date': str,
            'correlation_id': str,
            'current_bill_data': CurrentBillData,
            'default_offer': DefaultOffer,
            'market_disclosure': ComparisonResponseMarketDisclosure,
            'maximum_saving': float,
            'plans': List[Plan],
            'version': str
        }

        self.attribute_map = {
            'comparison_date': 'comparisonDate',
            'correlation_id': 'correlationId',
            'current_bill_data': 'currentBillData',
            'default_offer': 'defaultOffer',
            'market_disclosure': 'marketDisclosure',
            'maximum_saving': 'maximumSaving',
            'plans': 'plans',
            'version': 'version'
        }

        self._comparison_date = comparison_date
        self._correlation_id = correlation_id
        self._current_bill_data = current_bill_data
        self._default_offer = default_offer
        self._market_disclosure = market_disclosure
        self._maximum_saving = maximum_saving
        self._plans = plans
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComparisonResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComparisonResponse of this ComparisonResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_date(self):
        """Gets the comparison_date of this ComparisonResponse.

        Timestamp of when the comparison took place

        :return: The comparison_date of this ComparisonResponse.
        :rtype: str
        """
        return self._comparison_date

    @comparison_date.setter
    def comparison_date(self, comparison_date):
        """Sets the comparison_date of this ComparisonResponse.

        Timestamp of when the comparison took place

        :param comparison_date: The comparison_date of this ComparisonResponse.
        :type comparison_date: str
        """
        if comparison_date is None:
            raise ValueError("Invalid value for `comparison_date`, must not be `None`")

        self._comparison_date = comparison_date

    @property
    def correlation_id(self):
        """Gets the correlation_id of this ComparisonResponse.

        The correlationId as passed in the request

        :return: The correlation_id of this ComparisonResponse.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this ComparisonResponse.

        The correlationId as passed in the request

        :param correlation_id: The correlation_id of this ComparisonResponse.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def current_bill_data(self):
        """Gets the current_bill_data of this ComparisonResponse.


        :return: The current_bill_data of this ComparisonResponse.
        :rtype: CurrentBillData
        """
        return self._current_bill_data

    @current_bill_data.setter
    def current_bill_data(self, current_bill_data):
        """Sets the current_bill_data of this ComparisonResponse.


        :param current_bill_data: The current_bill_data of this ComparisonResponse.
        :type current_bill_data: CurrentBillData
        """
        if current_bill_data is None:
            raise ValueError("Invalid value for `current_bill_data`, must not be `None`")

        self._current_bill_data = current_bill_data

    @property
    def default_offer(self):
        """Gets the default_offer of this ComparisonResponse.


        :return: The default_offer of this ComparisonResponse.
        :rtype: DefaultOffer
        """
        return self._default_offer

    @default_offer.setter
    def default_offer(self, default_offer):
        """Sets the default_offer of this ComparisonResponse.


        :param default_offer: The default_offer of this ComparisonResponse.
        :type default_offer: DefaultOffer
        """
        if default_offer is None:
            raise ValueError("Invalid value for `default_offer`, must not be `None`")

        self._default_offer = default_offer

    @property
    def market_disclosure(self):
        """Gets the market_disclosure of this ComparisonResponse.


        :return: The market_disclosure of this ComparisonResponse.
        :rtype: ComparisonResponseMarketDisclosure
        """
        return self._market_disclosure

    @market_disclosure.setter
    def market_disclosure(self, market_disclosure):
        """Sets the market_disclosure of this ComparisonResponse.


        :param market_disclosure: The market_disclosure of this ComparisonResponse.
        :type market_disclosure: ComparisonResponseMarketDisclosure
        """

        self._market_disclosure = market_disclosure

    @property
    def maximum_saving(self):
        """Gets the maximum_saving of this ComparisonResponse.

        What is the maximum saving that can be achieved if the user switches to a new plan. This number may be negative if the user is already on the best plan for their usage and no saving can be found.

        :return: The maximum_saving of this ComparisonResponse.
        :rtype: float
        """
        return self._maximum_saving

    @maximum_saving.setter
    def maximum_saving(self, maximum_saving):
        """Sets the maximum_saving of this ComparisonResponse.

        What is the maximum saving that can be achieved if the user switches to a new plan. This number may be negative if the user is already on the best plan for their usage and no saving can be found.

        :param maximum_saving: The maximum_saving of this ComparisonResponse.
        :type maximum_saving: float
        """
        if maximum_saving is None:
            raise ValueError("Invalid value for `maximum_saving`, must not be `None`")

        self._maximum_saving = maximum_saving

    @property
    def plans(self):
        """Gets the plans of this ComparisonResponse.

        Array of plans, sorted from best to worst saving, for the uploaded bill

        :return: The plans of this ComparisonResponse.
        :rtype: List[Plan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this ComparisonResponse.

        Array of plans, sorted from best to worst saving, for the uploaded bill

        :param plans: The plans of this ComparisonResponse.
        :type plans: List[Plan]
        """
        if plans is None:
            raise ValueError("Invalid value for `plans`, must not be `None`")

        self._plans = plans

    @property
    def version(self):
        """Gets the version of this ComparisonResponse.

        Version of the API on which the comparison took place. This value should be reported with any issue raised.

        :return: The version of this ComparisonResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComparisonResponse.

        Version of the API on which the comparison took place. This value should be reported with any issue raised.

        :param version: The version of this ComparisonResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
