# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_report_response_object import BusinessReportResponseObject
from openapi_server.models.entity_object import EntityObject
from openapi_server import util


class BusinessReportResponseDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, entity: EntityObject=None, reports: List[BusinessReportResponseObject]=None, request_id: str=None):
        """BusinessReportResponseDetails - a model defined in OpenAPI

        :param check_id: The check_id of this BusinessReportResponseDetails.
        :param entity: The entity of this BusinessReportResponseDetails.
        :param reports: The reports of this BusinessReportResponseDetails.
        :param request_id: The request_id of this BusinessReportResponseDetails.
        """
        self.openapi_types = {
            'check_id': str,
            'entity': EntityObject,
            'reports': List[BusinessReportResponseObject],
            'request_id': str
        }

        self.attribute_map = {
            'check_id': 'checkId',
            'entity': 'entity',
            'reports': 'reports',
            'request_id': 'requestId'
        }

        self._check_id = check_id
        self._entity = entity
        self._reports = reports
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessReportResponseDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessReportResponseDetails of this BusinessReportResponseDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this BusinessReportResponseDetails.

        Unique identifier for the report operation. 

        :return: The check_id of this BusinessReportResponseDetails.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this BusinessReportResponseDetails.

        Unique identifier for the report operation. 

        :param check_id: The check_id of this BusinessReportResponseDetails.
        :type check_id: str
        """

        self._check_id = check_id

    @property
    def entity(self):
        """Gets the entity of this BusinessReportResponseDetails.


        :return: The entity of this BusinessReportResponseDetails.
        :rtype: EntityObject
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this BusinessReportResponseDetails.


        :param entity: The entity of this BusinessReportResponseDetails.
        :type entity: EntityObject
        """

        self._entity = entity

    @property
    def reports(self):
        """Gets the reports of this BusinessReportResponseDetails.

        The collection of requested business reports. 

        :return: The reports of this BusinessReportResponseDetails.
        :rtype: List[BusinessReportResponseObject]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this BusinessReportResponseDetails.

        The collection of requested business reports. 

        :param reports: The reports of this BusinessReportResponseDetails.
        :type reports: List[BusinessReportResponseObject]
        """

        self._reports = reports

    @property
    def request_id(self):
        """Gets the request_id of this BusinessReportResponseDetails.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :return: The request_id of this BusinessReportResponseDetails.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this BusinessReportResponseDetails.

        Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 

        :param request_id: The request_id of this BusinessReportResponseDetails.
        :type request_id: str
        """

        self._request_id = request_id
