# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_profile_kyc_match_result_object_match_types_value import EntityProfileKYCMatchResultObjectMatchTypesValue
from openapi_server import util


class EntityProfileKYCMatchResultObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_count: int=None, match_count_required: int=None, match_types: Dict[str, EntityProfileKYCMatchResultObjectMatchTypesValue]=None, verified: bool=None):
        """EntityProfileKYCMatchResultObject - a model defined in OpenAPI

        :param match_count: The match_count of this EntityProfileKYCMatchResultObject.
        :param match_count_required: The match_count_required of this EntityProfileKYCMatchResultObject.
        :param match_types: The match_types of this EntityProfileKYCMatchResultObject.
        :param verified: The verified of this EntityProfileKYCMatchResultObject.
        """
        self.openapi_types = {
            'match_count': int,
            'match_count_required': int,
            'match_types': Dict[str, EntityProfileKYCMatchResultObjectMatchTypesValue],
            'verified': bool
        }

        self.attribute_map = {
            'match_count': 'matchCount',
            'match_count_required': 'matchCountRequired',
            'match_types': 'matchTypes',
            'verified': 'verified'
        }

        self._match_count = match_count
        self._match_count_required = match_count_required
        self._match_types = match_types
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityProfileKYCMatchResultObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityProfileKYCMatchResultObject of this EntityProfileKYCMatchResultObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_count(self):
        """Gets the match_count of this EntityProfileKYCMatchResultObject.

        Number of matches for this set of match types. In other words the sum of the matchCounts in the matchTypes map. Note that for match sets that include government ID (gov_id) this will not neccessaily be the count of matched sources. 

        :return: The match_count of this EntityProfileKYCMatchResultObject.
        :rtype: int
        """
        return self._match_count

    @match_count.setter
    def match_count(self, match_count):
        """Sets the match_count of this EntityProfileKYCMatchResultObject.

        Number of matches for this set of match types. In other words the sum of the matchCounts in the matchTypes map. Note that for match sets that include government ID (gov_id) this will not neccessaily be the count of matched sources. 

        :param match_count: The match_count of this EntityProfileKYCMatchResultObject.
        :type match_count: int
        """

        self._match_count = match_count

    @property
    def match_count_required(self):
        """Gets the match_count_required of this EntityProfileKYCMatchResultObject.

        Number of distinct matches (sources and/or matched government ID documents) required for this set of match types. 

        :return: The match_count_required of this EntityProfileKYCMatchResultObject.
        :rtype: int
        """
        return self._match_count_required

    @match_count_required.setter
    def match_count_required(self, match_count_required):
        """Sets the match_count_required of this EntityProfileKYCMatchResultObject.

        Number of distinct matches (sources and/or matched government ID documents) required for this set of match types. 

        :param match_count_required: The match_count_required of this EntityProfileKYCMatchResultObject.
        :type match_count_required: int
        """

        self._match_count_required = match_count_required

    @property
    def match_types(self):
        """Gets the match_types of this EntityProfileKYCMatchResultObject.

        The match types that this overall count and result refer to. Currently one or more of: - name - address - dob - gender - gov_id - other_id  These will be keys in a map whose values hold the values for the individual match types. The resultant structure would look like the following. Here dob has zero matches and is not verfied but it was check, so other than the checked flag the value object is simply empty. A completely empty object would imply that match type was not checked.      \"matchTypes\": {       \"address\": {         \"matchCount\": 1,         \"matchSources\": [ \"au-elec-roll\" ],         \"checked\": true,         \"verified\": true       },       \"dob\": {         \"checked\": true       }     }  So for a one_plus KYC check there will be two EntityProfileKYCMatchResultObject records. One for 'name' and one for 'address, dob' (like the sample above). 

        :return: The match_types of this EntityProfileKYCMatchResultObject.
        :rtype: Dict[str, EntityProfileKYCMatchResultObjectMatchTypesValue]
        """
        return self._match_types

    @match_types.setter
    def match_types(self, match_types):
        """Sets the match_types of this EntityProfileKYCMatchResultObject.

        The match types that this overall count and result refer to. Currently one or more of: - name - address - dob - gender - gov_id - other_id  These will be keys in a map whose values hold the values for the individual match types. The resultant structure would look like the following. Here dob has zero matches and is not verfied but it was check, so other than the checked flag the value object is simply empty. A completely empty object would imply that match type was not checked.      \"matchTypes\": {       \"address\": {         \"matchCount\": 1,         \"matchSources\": [ \"au-elec-roll\" ],         \"checked\": true,         \"verified\": true       },       \"dob\": {         \"checked\": true       }     }  So for a one_plus KYC check there will be two EntityProfileKYCMatchResultObject records. One for 'name' and one for 'address, dob' (like the sample above). 

        :param match_types: The match_types of this EntityProfileKYCMatchResultObject.
        :type match_types: Dict[str, EntityProfileKYCMatchResultObjectMatchTypesValue]
        """

        self._match_types = match_types

    @property
    def verified(self):
        """Gets the verified of this EntityProfileKYCMatchResultObject.

        True if there are enough matches to meet the requirement

        :return: The verified of this EntityProfileKYCMatchResultObject.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this EntityProfileKYCMatchResultObject.

        True if there are enough matches to meet the requirement

        :param verified: The verified of this EntityProfileKYCMatchResultObject.
        :type verified: bool
        """

        self._verified = verified
