# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enum_address_type import EnumAddressType
from openapi_server import util


class AddressObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: str=None, address_type: EnumAddressType=None, building_name: str=None, care_of: str=None, country: str=None, end_date: date=None, long_form: str=None, postal_code: str=None, region: str=None, start_date: date=None, state: str=None, street_name: str=None, street_number: str=None, street_type: str=None, suburb: str=None, town: str=None, unit_number: str=None):
        """AddressObject - a model defined in OpenAPI

        :param address_id: The address_id of this AddressObject.
        :param address_type: The address_type of this AddressObject.
        :param building_name: The building_name of this AddressObject.
        :param care_of: The care_of of this AddressObject.
        :param country: The country of this AddressObject.
        :param end_date: The end_date of this AddressObject.
        :param long_form: The long_form of this AddressObject.
        :param postal_code: The postal_code of this AddressObject.
        :param region: The region of this AddressObject.
        :param start_date: The start_date of this AddressObject.
        :param state: The state of this AddressObject.
        :param street_name: The street_name of this AddressObject.
        :param street_number: The street_number of this AddressObject.
        :param street_type: The street_type of this AddressObject.
        :param suburb: The suburb of this AddressObject.
        :param town: The town of this AddressObject.
        :param unit_number: The unit_number of this AddressObject.
        """
        self.openapi_types = {
            'address_id': str,
            'address_type': EnumAddressType,
            'building_name': str,
            'care_of': str,
            'country': str,
            'end_date': date,
            'long_form': str,
            'postal_code': str,
            'region': str,
            'start_date': date,
            'state': str,
            'street_name': str,
            'street_number': str,
            'street_type': str,
            'suburb': str,
            'town': str,
            'unit_number': str
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'address_type': 'addressType',
            'building_name': 'buildingName',
            'care_of': 'careOf',
            'country': 'country',
            'end_date': 'endDate',
            'long_form': 'longForm',
            'postal_code': 'postalCode',
            'region': 'region',
            'start_date': 'startDate',
            'state': 'state',
            'street_name': 'streetName',
            'street_number': 'streetNumber',
            'street_type': 'streetType',
            'suburb': 'suburb',
            'town': 'town',
            'unit_number': 'unitNumber'
        }

        self._address_id = address_id
        self._address_type = address_type
        self._building_name = building_name
        self._care_of = care_of
        self._country = country
        self._end_date = end_date
        self._long_form = long_form
        self._postal_code = postal_code
        self._region = region
        self._start_date = start_date
        self._state = state
        self._street_name = street_name
        self._street_number = street_number
        self._street_type = street_type
        self._suburb = suburb
        self._town = town
        self._unit_number = unit_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressObject of this AddressObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this AddressObject.

        As addresses are added to an entity, they're assigned an id to assist with tracking.   If you're adjusting an address, you will need to include the addressId so as to be able to reference it correctly in the list. 

        :return: The address_id of this AddressObject.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this AddressObject.

        As addresses are added to an entity, they're assigned an id to assist with tracking.   If you're adjusting an address, you will need to include the addressId so as to be able to reference it correctly in the list. 

        :param address_id: The address_id of this AddressObject.
        :type address_id: str
        """

        self._address_id = address_id

    @property
    def address_type(self):
        """Gets the address_type of this AddressObject.


        :return: The address_type of this AddressObject.
        :rtype: EnumAddressType
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this AddressObject.


        :param address_type: The address_type of this AddressObject.
        :type address_type: EnumAddressType
        """

        self._address_type = address_type

    @property
    def building_name(self):
        """Gets the building_name of this AddressObject.

        The name of the building, apartment block, condo, etc

        :return: The building_name of this AddressObject.
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this AddressObject.

        The name of the building, apartment block, condo, etc

        :param building_name: The building_name of this AddressObject.
        :type building_name: str
        """

        self._building_name = building_name

    @property
    def care_of(self):
        """Gets the care_of of this AddressObject.

        Individual or business name at this address if not the same as the name of the entity to which this address belongs. 

        :return: The care_of of this AddressObject.
        :rtype: str
        """
        return self._care_of

    @care_of.setter
    def care_of(self, care_of):
        """Sets the care_of of this AddressObject.

        Individual or business name at this address if not the same as the name of the entity to which this address belongs. 

        :param care_of: The care_of of this AddressObject.
        :type care_of: str
        """

        self._care_of = care_of

    @property
    def country(self):
        """Gets the country of this AddressObject.

        The ISO-3166-1 country. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.   See: https://en.wikipedia.org/wiki/ISO_3166-1 

        :return: The country of this AddressObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressObject.

        The ISO-3166-1 country. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We'll convert as needed.   See: https://en.wikipedia.org/wiki/ISO_3166-1 

        :param country: The country of this AddressObject.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def end_date(self):
        """Gets the end_date of this AddressObject.

        The date this address was no longer used (if available). Used mostly with business addresses. 

        :return: The end_date of this AddressObject.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AddressObject.

        The date this address was no longer used (if available). Used mostly with business addresses. 

        :param end_date: The end_date of this AddressObject.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def long_form(self):
        """Gets the long_form of this AddressObject.

        In some cases, the address will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible.  WARNING: Use of longForm is not guaranteed to produce perfect results, due to the variety of potential formats. You've been warned.  Failure to break down or disambiguate the address will result in an error. 

        :return: The long_form of this AddressObject.
        :rtype: str
        """
        return self._long_form

    @long_form.setter
    def long_form(self, long_form):
        """Sets the long_form of this AddressObject.

        In some cases, the address will need to be supplied in \"long form\", such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it's constituent parts where possible.  WARNING: Use of longForm is not guaranteed to produce perfect results, due to the variety of potential formats. You've been warned.  Failure to break down or disambiguate the address will result in an error. 

        :param long_form: The long_form of this AddressObject.
        :type long_form: str
        """

        self._long_form = long_form

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressObject.

        The post code of the address.

        :return: The postal_code of this AddressObject.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressObject.

        The post code of the address.

        :param postal_code: The postal_code of this AddressObject.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this AddressObject.

        The county, province, cantonment

        :return: The region of this AddressObject.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressObject.

        The county, province, cantonment

        :param region: The region of this AddressObject.
        :type region: str
        """

        self._region = region

    @property
    def start_date(self):
        """Gets the start_date of this AddressObject.

        The date this address first because active. Used mostly with business addresses. 

        :return: The start_date of this AddressObject.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AddressObject.

        The date this address first because active. Used mostly with business addresses. 

        :param start_date: The start_date of this AddressObject.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this AddressObject.

        The state. Use local abbreviations, such as VIC(toria) or TX (Texas)

        :return: The state of this AddressObject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressObject.

        The state. Use local abbreviations, such as VIC(toria) or TX (Texas)

        :param state: The state of this AddressObject.
        :type state: str
        """

        self._state = state

    @property
    def street_name(self):
        """Gets the street_name of this AddressObject.

        The name of the street  This field can in fact be a bit flexible, potentially containing the streetNumber and streetType as well. Most services in use can work it out.  If this field has been auto-populated by Google (see writeup here:  https://apidocs.frankiefinancial.com/docs/working-with-addresses then the bulk of the address will be in this field.  If you can avoid it though, please try and keep things separate. 

        :return: The street_name of this AddressObject.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this AddressObject.

        The name of the street  This field can in fact be a bit flexible, potentially containing the streetNumber and streetType as well. Most services in use can work it out.  If this field has been auto-populated by Google (see writeup here:  https://apidocs.frankiefinancial.com/docs/working-with-addresses then the bulk of the address will be in this field.  If you can avoid it though, please try and keep things separate. 

        :param street_name: The street_name of this AddressObject.
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this AddressObject.

        The number on the street. Generally a number, but can also be alphanumeric (e.g. 3A) 

        :return: The street_number of this AddressObject.
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this AddressObject.

        The number on the street. Generally a number, but can also be alphanumeric (e.g. 3A) 

        :param street_number: The street_number of this AddressObject.
        :type street_number: str
        """

        self._street_number = street_number

    @property
    def street_type(self):
        """Gets the street_type of this AddressObject.

        The street \"type\" - e.g. Road, St, Ave, Circuit, etc

        :return: The street_type of this AddressObject.
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this AddressObject.

        The street \"type\" - e.g. Road, St, Ave, Circuit, etc

        :param street_type: The street_type of this AddressObject.
        :type street_type: str
        """

        self._street_type = street_type

    @property
    def suburb(self):
        """Gets the suburb of this AddressObject.

        The suburb in the town/city. Only use this if you require a suburb AND a town/city, otherwise, just use the \"town\" parameter.

        :return: The suburb of this AddressObject.
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this AddressObject.

        The suburb in the town/city. Only use this if you require a suburb AND a town/city, otherwise, just use the \"town\" parameter.

        :param suburb: The suburb of this AddressObject.
        :type suburb: str
        """

        self._suburb = suburb

    @property
    def town(self):
        """Gets the town of this AddressObject.

        The town/village/suburb/city

        :return: The town of this AddressObject.
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this AddressObject.

        The town/village/suburb/city

        :param town: The town of this AddressObject.
        :type town: str
        """

        self._town = town

    @property
    def unit_number(self):
        """Gets the unit_number of this AddressObject.

        Unit/Apartment/Flat/Suite/etc number

        :return: The unit_number of this AddressObject.
        :rtype: str
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this AddressObject.

        Unit/Apartment/Flat/Suite/etc number

        :param unit_number: The unit_number of this AddressObject.
        :type unit_number: str
        """

        self._unit_number = unit_number
