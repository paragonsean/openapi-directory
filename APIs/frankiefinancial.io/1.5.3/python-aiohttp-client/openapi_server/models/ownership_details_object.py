# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beneficial_owner_object import BeneficialOwnerObject
from openapi_server.models.entity_object import EntityObject
from openapi_server.models.officer_object import OfficerObject
from openapi_server.models.shareholding_object import ShareholdingObject
from openapi_server import util


class OwnershipDetailsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beneficial_owners: List[BeneficialOwnerObject]=None, officers: List[OfficerObject]=None, organisation: EntityObject=None, shareholdings: List[ShareholdingObject]=None, ultimate_beneficial_owners: List[BeneficialOwnerObject]=None):
        """OwnershipDetailsObject - a model defined in OpenAPI

        :param beneficial_owners: The beneficial_owners of this OwnershipDetailsObject.
        :param officers: The officers of this OwnershipDetailsObject.
        :param organisation: The organisation of this OwnershipDetailsObject.
        :param shareholdings: The shareholdings of this OwnershipDetailsObject.
        :param ultimate_beneficial_owners: The ultimate_beneficial_owners of this OwnershipDetailsObject.
        """
        self.openapi_types = {
            'beneficial_owners': List[BeneficialOwnerObject],
            'officers': List[OfficerObject],
            'organisation': EntityObject,
            'shareholdings': List[ShareholdingObject],
            'ultimate_beneficial_owners': List[BeneficialOwnerObject]
        }

        self.attribute_map = {
            'beneficial_owners': 'beneficialOwners',
            'officers': 'officers',
            'organisation': 'organisation',
            'shareholdings': 'shareholdings',
            'ultimate_beneficial_owners': 'ultimateBeneficialOwners'
        }

        self._beneficial_owners = beneficial_owners
        self._officers = officers
        self._organisation = organisation
        self._shareholdings = shareholdings
        self._ultimate_beneficial_owners = ultimate_beneficial_owners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnershipDetailsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnershipDetailsObject of this OwnershipDetailsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beneficial_owners(self):
        """Gets the beneficial_owners of this OwnershipDetailsObject.

        The beneficial owners of the company, who aren't necessarily UBO's. 

        :return: The beneficial_owners of this OwnershipDetailsObject.
        :rtype: List[BeneficialOwnerObject]
        """
        return self._beneficial_owners

    @beneficial_owners.setter
    def beneficial_owners(self, beneficial_owners):
        """Sets the beneficial_owners of this OwnershipDetailsObject.

        The beneficial owners of the company, who aren't necessarily UBO's. 

        :param beneficial_owners: The beneficial_owners of this OwnershipDetailsObject.
        :type beneficial_owners: List[BeneficialOwnerObject]
        """

        self._beneficial_owners = beneficial_owners

    @property
    def officers(self):
        """Gets the officers of this OwnershipDetailsObject.

        Company office holders. 

        :return: The officers of this OwnershipDetailsObject.
        :rtype: List[OfficerObject]
        """
        return self._officers

    @officers.setter
    def officers(self, officers):
        """Sets the officers of this OwnershipDetailsObject.

        Company office holders. 

        :param officers: The officers of this OwnershipDetailsObject.
        :type officers: List[OfficerObject]
        """

        self._officers = officers

    @property
    def organisation(self):
        """Gets the organisation of this OwnershipDetailsObject.


        :return: The organisation of this OwnershipDetailsObject.
        :rtype: EntityObject
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this OwnershipDetailsObject.


        :param organisation: The organisation of this OwnershipDetailsObject.
        :type organisation: EntityObject
        """

        self._organisation = organisation

    @property
    def shareholdings(self):
        """Gets the shareholdings of this OwnershipDetailsObject.

        Parcels of shares held by one or more shareholders. 

        :return: The shareholdings of this OwnershipDetailsObject.
        :rtype: List[ShareholdingObject]
        """
        return self._shareholdings

    @shareholdings.setter
    def shareholdings(self, shareholdings):
        """Sets the shareholdings of this OwnershipDetailsObject.

        Parcels of shares held by one or more shareholders. 

        :param shareholdings: The shareholdings of this OwnershipDetailsObject.
        :type shareholdings: List[ShareholdingObject]
        """

        self._shareholdings = shareholdings

    @property
    def ultimate_beneficial_owners(self):
        """Gets the ultimate_beneficial_owners of this OwnershipDetailsObject.

        The ultimate beneficial owners of the company. 

        :return: The ultimate_beneficial_owners of this OwnershipDetailsObject.
        :rtype: List[BeneficialOwnerObject]
        """
        return self._ultimate_beneficial_owners

    @ultimate_beneficial_owners.setter
    def ultimate_beneficial_owners(self, ultimate_beneficial_owners):
        """Sets the ultimate_beneficial_owners of this OwnershipDetailsObject.

        The ultimate beneficial owners of the company. 

        :param ultimate_beneficial_owners: The ultimate_beneficial_owners of this OwnershipDetailsObject.
        :type ultimate_beneficial_owners: List[BeneficialOwnerObject]
        """

        self._ultimate_beneficial_owners = ultimate_beneficial_owners
