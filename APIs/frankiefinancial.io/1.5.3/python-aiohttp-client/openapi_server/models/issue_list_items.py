# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueListItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_description: str=None, issue_location: str=None, issue_severity: str=None):
        """IssueListItems - a model defined in OpenAPI

        :param issue_description: The issue_description of this IssueListItems.
        :param issue_location: The issue_location of this IssueListItems.
        :param issue_severity: The issue_severity of this IssueListItems.
        """
        self.openapi_types = {
            'issue_description': str,
            'issue_location': str,
            'issue_severity': str
        }

        self.attribute_map = {
            'issue_description': 'issue_description',
            'issue_location': 'issue_location',
            'issue_severity': 'issue_severity'
        }

        self._issue_description = issue_description
        self._issue_location = issue_location
        self._issue_severity = issue_severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueListItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueListItems of this IssueListItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_description(self):
        """Gets the issue_description of this IssueListItems.

        Human readable description of the issue 

        :return: The issue_description of this IssueListItems.
        :rtype: str
        """
        return self._issue_description

    @issue_description.setter
    def issue_description(self, issue_description):
        """Sets the issue_description of this IssueListItems.

        Human readable description of the issue 

        :param issue_description: The issue_description of this IssueListItems.
        :type issue_description: str
        """

        self._issue_description = issue_description

    @property
    def issue_location(self):
        """Gets the issue_location of this IssueListItems.

        Where the issue occured. It will describe a location in the response structure 

        :return: The issue_location of this IssueListItems.
        :rtype: str
        """
        return self._issue_location

    @issue_location.setter
    def issue_location(self, issue_location):
        """Sets the issue_location of this IssueListItems.

        Where the issue occured. It will describe a location in the response structure 

        :param issue_location: The issue_location of this IssueListItems.
        :type issue_location: str
        """

        self._issue_location = issue_location

    @property
    def issue_severity(self):
        """Gets the issue_severity of this IssueListItems.

        The impact of the issue on the process.   Is it just informational, such as a trivial different in a name match? Is it a warning to highlight something that is important, but did not prevent the process from completing? Is it a critical issue that prevented the check from completing successfully? Is it a stop condition that prevented the checks from being run at all? 

        :return: The issue_severity of this IssueListItems.
        :rtype: str
        """
        return self._issue_severity

    @issue_severity.setter
    def issue_severity(self, issue_severity):
        """Sets the issue_severity of this IssueListItems.

        The impact of the issue on the process.   Is it just informational, such as a trivial different in a name match? Is it a warning to highlight something that is important, but did not prevent the process from completing? Is it a critical issue that prevented the check from completing successfully? Is it a stop condition that prevented the checks from being run at all? 

        :param issue_severity: The issue_severity of this IssueListItems.
        :type issue_severity: str
        """
        allowed_values = ["INFO", "WARN", "CRIT", "STOP"]  # noqa: E501
        if issue_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_severity` ({0}), must be one of {1}"
                .format(issue_severity, allowed_values)
            )

        self._issue_severity = issue_severity
