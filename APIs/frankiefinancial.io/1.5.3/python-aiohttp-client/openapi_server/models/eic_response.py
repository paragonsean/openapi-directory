# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_mark_up import DisplayMarkUp
from openapi_server.models.plan import Plan
from openapi_server import util


class EICResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_id: str=None, eic: List[DisplayMarkUp]=None, plan: Plan=None, version: str=None):
        """EICResponse - a model defined in OpenAPI

        :param correlation_id: The correlation_id of this EICResponse.
        :param eic: The eic of this EICResponse.
        :param plan: The plan of this EICResponse.
        :param version: The version of this EICResponse.
        """
        self.openapi_types = {
            'correlation_id': str,
            'eic': List[DisplayMarkUp],
            'plan': Plan,
            'version': str
        }

        self.attribute_map = {
            'correlation_id': 'correlationId',
            'eic': 'eic',
            'plan': 'plan',
            'version': 'version'
        }

        self._correlation_id = correlation_id
        self._eic = eic
        self._plan = plan
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EICResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EICResponse of this EICResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_id(self):
        """Gets the correlation_id of this EICResponse.

        The correlationId as passed in the request

        :return: The correlation_id of this EICResponse.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this EICResponse.

        The correlationId as passed in the request

        :param correlation_id: The correlation_id of this EICResponse.
        :type correlation_id: str
        """
        if correlation_id is None:
            raise ValueError("Invalid value for `correlation_id`, must not be `None`")

        self._correlation_id = correlation_id

    @property
    def eic(self):
        """Gets the eic of this EICResponse.

        Hierarchical list of objects for rendering EIC statement and Terms and Conditions

        :return: The eic of this EICResponse.
        :rtype: List[DisplayMarkUp]
        """
        return self._eic

    @eic.setter
    def eic(self, eic):
        """Sets the eic of this EICResponse.

        Hierarchical list of objects for rendering EIC statement and Terms and Conditions

        :param eic: The eic of this EICResponse.
        :type eic: List[DisplayMarkUp]
        """
        if eic is None:
            raise ValueError("Invalid value for `eic`, must not be `None`")

        self._eic = eic

    @property
    def plan(self):
        """Gets the plan of this EICResponse.


        :return: The plan of this EICResponse.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this EICResponse.


        :param plan: The plan of this EICResponse.
        :type plan: Plan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def version(self):
        """Gets the version of this EICResponse.

        Version of the API on which the EIC request took place. This value should be reported with any issue raised.

        :return: The version of this EICResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EICResponse.

        Version of the API on which the EIC request took place. This value should be reported with any issue raised.

        :param version: The version of this EICResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
