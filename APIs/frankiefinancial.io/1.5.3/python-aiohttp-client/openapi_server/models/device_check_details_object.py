# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_pair_object import KeyValuePairObject
from openapi_server import util


class DeviceCheckDetailsObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: str=None, additional_data: List[KeyValuePairObject]=None, check_session_key: str=None, check_type: str=None):
        """DeviceCheckDetailsObject - a model defined in OpenAPI

        :param activity_type: The activity_type of this DeviceCheckDetailsObject.
        :param additional_data: The additional_data of this DeviceCheckDetailsObject.
        :param check_session_key: The check_session_key of this DeviceCheckDetailsObject.
        :param check_type: The check_type of this DeviceCheckDetailsObject.
        """
        self.openapi_types = {
            'activity_type': str,
            'additional_data': List[KeyValuePairObject],
            'check_session_key': str,
            'check_type': str
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'additional_data': 'additionalData',
            'check_session_key': 'checkSessionKey',
            'check_type': 'checkType'
        }

        self._activity_type = activity_type
        self._additional_data = additional_data
        self._check_session_key = check_session_key
        self._check_type = check_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCheckDetailsObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCheckDetailsObject of this DeviceCheckDetailsObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this DeviceCheckDetailsObject.

        The type of activity we're checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch's LOGIN_3 type, you can send \"_LOGIN_3\" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. 

        :return: The activity_type of this DeviceCheckDetailsObject.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this DeviceCheckDetailsObject.

        The type of activity we're checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they're still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch's LOGIN_3 type, you can send \"_LOGIN_3\" as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. 

        :param activity_type: The activity_type of this DeviceCheckDetailsObject.
        :type activity_type: str
        """
        allowed_values = ["SIGNUP", "LOGIN", "PAYMENT", "CONFIRMATION", "_<Vendor Specific List>"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def additional_data(self):
        """Gets the additional_data of this DeviceCheckDetailsObject.

        Collection of additional data points you wish to add to the activity check. These are defined in conjunction with the Customer and the device checking service being used.  Standard values are supplied upon request:  | kvpKey | kvpType | kvpValue | | ------- | -------- | -------- | | detectedIp | general.string | The IP address you detect the transaction coming from | | accountId.src | id.external | Your account identifier. Can be a SHA hash or similar | | accountId.dst | id.external | Target/payee account identifier. Can be a SHA hash or similar | | entityId | id.external | Use this to override the Frankie entityID that would be used to identify | | amount | general.float | Amount involved in the transaction  | | platform  | general.string | One of APP, WEB, MOBILE_WEB. Assumes APP if not supplied | |   |   |   Like the activityType, you can also specify vendor specific additional data parameters by adding a leading underscore \"_\" to the kvpKey. You can set the kvpType to one of the available types, or just use general.string (recommended) 

        :return: The additional_data of this DeviceCheckDetailsObject.
        :rtype: List[KeyValuePairObject]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this DeviceCheckDetailsObject.

        Collection of additional data points you wish to add to the activity check. These are defined in conjunction with the Customer and the device checking service being used.  Standard values are supplied upon request:  | kvpKey | kvpType | kvpValue | | ------- | -------- | -------- | | detectedIp | general.string | The IP address you detect the transaction coming from | | accountId.src | id.external | Your account identifier. Can be a SHA hash or similar | | accountId.dst | id.external | Target/payee account identifier. Can be a SHA hash or similar | | entityId | id.external | Use this to override the Frankie entityID that would be used to identify | | amount | general.float | Amount involved in the transaction  | | platform  | general.string | One of APP, WEB, MOBILE_WEB. Assumes APP if not supplied | |   |   |   Like the activityType, you can also specify vendor specific additional data parameters by adding a leading underscore \"_\" to the kvpKey. You can set the kvpType to one of the available types, or just use general.string (recommended) 

        :param additional_data: The additional_data of this DeviceCheckDetailsObject.
        :type additional_data: List[KeyValuePairObject]
        """

        self._additional_data = additional_data

    @property
    def check_session_key(self):
        """Gets the check_session_key of this DeviceCheckDetailsObject.

        the unique session based ID that will be checked against the service.

        :return: The check_session_key of this DeviceCheckDetailsObject.
        :rtype: str
        """
        return self._check_session_key

    @check_session_key.setter
    def check_session_key(self, check_session_key):
        """Sets the check_session_key of this DeviceCheckDetailsObject.

        the unique session based ID that will be checked against the service.

        :param check_session_key: The check_session_key of this DeviceCheckDetailsObject.
        :type check_session_key: str
        """

        self._check_session_key = check_session_key

    @property
    def check_type(self):
        """Gets the check_type of this DeviceCheckDetailsObject.

        Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics 

        :return: The check_type of this DeviceCheckDetailsObject.
        :rtype: str
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this DeviceCheckDetailsObject.

        Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics 

        :param check_type: The check_type of this DeviceCheckDetailsObject.
        :type check_type: str
        """
        allowed_values = ["DEVICE", "BIOMETRIC"]  # noqa: E501
        if check_type not in allowed_values:
            raise ValueError(
                "Invalid value for `check_type` ({0}), must be one of {1}"
                .format(check_type, allowed_values)
            )

        self._check_type = check_type
