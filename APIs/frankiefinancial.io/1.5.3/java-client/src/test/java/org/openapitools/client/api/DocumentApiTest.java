/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptedDocumentResultObject;
import org.openapitools.client.model.BasicStatusResultObject;
import org.openapitools.client.model.ComparisonSet;
import org.openapitools.client.model.DocumentChecksResultObject;
import org.openapitools.client.model.DocumentCompareResultObject;
import org.openapitools.client.model.DocumentResultObject;
import org.openapitools.client.model.DocumentScanResultObject;
import org.openapitools.client.model.DocumentSearchResultObject;
import org.openapitools.client.model.DocumentVerify;
import org.openapitools.client.model.DocumentVerifyResultObject;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.IdentityDocumentObject;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Disabled
public class DocumentApiTest {

    private final DocumentApi api = new DocumentApi();

    /**
     * Create Document and Compare to Original.
     *
     * Creates a new document from the \&quot;toDocument\&quot; parameter (usual rules apply in that it must be a valid document, with no existing documentId). The compareDocument can be an existing documentId, or it too can be new as well.   * If existing (i.e. a valid DocumentId is supplied), it will be updated with any new data supplied before being sent to the comparison process.   * If new, then a new document will be created too, and the ID returned in the result.    The document scans are then sent for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compareDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        ComparisonSet comparisonSet = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentCompareResultObject response = api.compareDocument(xFrankieCustomerID, comparisonSet, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Create New Document.
     *
     * Create a document object. A document object can be used to simply store data around a given identity or similar document. You can attach scans, PDFs, photos, videos, etc to the objectif you wish and these may be processed later (using the /scan function) to extract useful information. Or you can manually supply the extracted information if you choose. Document objects can be used to create an entity, based on extracted or supplied data; or it may be attached to an existing entity, either directly or through an ID check. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID xFrankieCustomerChildID = null;
        IdentityDocumentObject document = null;
        DocumentResultObject response = api.createDocument(xFrankieCustomerID, xFrankieCustomerChildID, document);
        // TODO: test validations
    }

    /**
     * Create and OCR Scan Document.
     *
     * Create a document object. This is then processed to extract useful information and create an entity; or it may be attached to an entity, either directly or through an ID check. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScanDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        IdentityDocumentObject document = null;
        DocumentScanResultObject response = api.createScanDocument(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, document);
        // TODO: test validations
    }

    /**
     * Delete Document.
     *
     * Mark this document as deleted. It will then become effectively invisible to all queries, but will be available in anonymised form for a past check. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        BasicStatusResultObject response = api.deleteDocument(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Retrieve Document Details
     *
     * Query the current status and details of a given documentId. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        DocumentResultObject response = api.queryDocument(xFrankieCustomerID, documentId, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Retrieve Document Verification Check Details. 
     *
     * Get the complete list of all checks that have been performed upon a given document, including the checks that have been performed by others (in those cases you just get the id, status and date run, none of the details). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryDocumentChecksTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentChecksResultObject response = api.queryDocumentChecks(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Retrieve Document and Scan Data
     *
     * Query the current status and details of a given documentId. Also returns all document file data, not just the metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryDocumentFullTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        DocumentResultObject response = api.queryDocumentFull(xFrankieCustomerID, documentId, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Search For a Document !! EXPERIMENTAL !!
     *
     *  Search for an existing document that matches the criteria supplied  There are of course limits to what can be searched upon. For a document search to work, you must supply at a minimum:    * idType   * country   * idNumber  The service will return a list of matching documents with confidence levels.  If you are the \&quot;owner\&quot; of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks)  Note: At this time, we cannot perform searches on document scans. But, you can supply extraData KVPs if they&#39;re known. These will help doublecheck search results with ambiguous results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        IdentityDocumentObject searchDocument = null;
        UUID xFrankieCustomerChildID = null;
        DocumentSearchResultObject response = api.searchDocument(xFrankieCustomerID, searchDocument, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Update Document and Compare to Original.
     *
     * Send the attached document scans to an external service for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompareDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        ComparisonSet comparisonSet = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentCompareResultObject response = api.updateCompareDocument(xFrankieCustomerID, documentId, comparisonSet, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Update Existing Document.
     *
     * Using a previously uploaded but incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        IdentityDocumentObject document = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        Boolean noInvalidate = null;
        DocumentResultObject response = api.updateDocument(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, noInvalidate);
        // TODO: test validations
    }

    /**
     * Update and OCR Scan Document
     *
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating OCR processing proceedures immediately. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScanDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        IdentityDocumentObject document = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentScanResultObject response = api.updateScanDocument(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Update and Verify Document.
     *
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating verification proceedures immediately.  Sends the updated document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVerifyDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        DocumentVerify processDocument = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentVerifyResultObject response = api.updateVerifyDocument(xFrankieCustomerID, documentId, processDocument, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

    /**
     * Create and Verify Document.
     *
     * Send the document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        DocumentVerify processDocument = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        DocumentVerifyResultObject response = api.verifyDocument(xFrankieCustomerID, processDocument, xFrankieCustomerChildID, xFrankieBackground);
        // TODO: test validations
    }

}
