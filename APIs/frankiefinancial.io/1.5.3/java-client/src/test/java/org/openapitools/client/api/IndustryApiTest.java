/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptedDocumentResultObject;
import org.openapitools.client.model.DocumentIndustryUtilityConsentResultObject;
import org.openapitools.client.model.DocumentIndustryUtilityProcessResultObject;
import org.openapitools.client.model.DocumentIndustryUtilitySwitchResultObject;
import org.openapitools.client.model.EICRequest;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.IdentityDocumentObject;
import org.openapitools.client.model.SwitchRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IndustryApi
 */
@Disabled
public class IndustryApiTest {

    private final IndustryApi api = new IndustryApi();

    /**
     * Create Document and Run Utility Price Comparison.
     *
     * Create a document object. This is then processed to extract useful information, just like a normal OCR scan. The service will then push the document through an industry specific comparison process, where the details are used to find a better plan, based on the bill.  100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProcessIndustryUtilityDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        Integer planLimit = null;
        IdentityDocumentObject document = null;
        DocumentIndustryUtilityProcessResultObject response = api.createProcessIndustryUtilityDocument(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, planLimit, document);
        // TODO: test validations
    }

    /**
     * Update Document and Run Utility Price Comparison.
     *
     * Using a previously uploaded but incomplete document, you can optionally supply updated details or simply request that the document be re-processed through the industry comparison service.   100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProcessIndustryUtilityDocumentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        Integer planLimit = null;
        IdentityDocumentObject document = null;
        DocumentIndustryUtilityProcessResultObject response = api.updateProcessIndustryUtilityDocument(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, planLimit, document);
        // TODO: test validations
    }

    /**
     * Provide Explicit Consent to Switch Utility Plans.
     *
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   Before entering into a contract with a new energy retailer, consumers are first obliged to review the retailer&#39;s contractual terms and conditions, confirm they understand these terms as well as give explicit, informed consent (EIC) for the switch to occur. This API call retrieves all information        that must be displayed in order for a compliant EIC to be captured from a consumer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProcessIndustryUtilityDocumentConsentTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        EICRequest consentRequest = null;
        DocumentIndustryUtilityConsentResultObject response = api.updateProcessIndustryUtilityDocumentConsent(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, consentRequest);
        // TODO: test validations
    }

    /**
     * Initiate Switching of Utility Plan.
     *
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   The bill payer has uploaded their current bill, selected a new plan, accepted the terms and conditions and given their consent for the switch to occur. This API call will finalise the switch request and send all the customers data along with the requested plan to the selected retailer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProcessIndustryUtilityDocumentSwitchTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID documentId = null;
        UUID xFrankieCustomerChildID = null;
        Integer xFrankieBackground = null;
        SwitchRequest switchRequest = null;
        DocumentIndustryUtilitySwitchResultObject response = api.updateProcessIndustryUtilityDocumentSwitch(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, switchRequest);
        // TODO: test validations
    }

}
