/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptedEntityResultObject;
import org.openapitools.client.model.BusinessReportResponseDetails;
import org.openapitools.client.model.EntityObject;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.InternationalBusinessProfileCriteria;
import org.openapitools.client.model.InternationalBusinessProfileResponse;
import org.openapitools.client.model.InternationalBusinessSearchCriteria;
import org.openapitools.client.model.InternationalBusinessSearchResponse;
import org.openapitools.client.model.OrganisationCheckResponseObject;
import org.openapitools.client.model.OwnershipQuery;
import java.util.Set;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BusinessApi
 */
@Disabled
public class BusinessApiTest {

    private final BusinessApi api = new BusinessApi();

    /**
     * Create Business Entity and Query UBO (AUS Only)
     *
     * Process a request for ownership details for an Australian organisation.  See below for more generic international queries.  At a minimum, you just need to supply an ACN or ABN and we can retrieve the rest. You also have the option of supplying company name, type (as per ABR types) and both ABN/ACN and we&#39;ll attempt to verfy that that data matches what is on record before attempting any further verification and validation.  KYC/AML for a selection of entities associated with an organisation and/or the organisation itself can optionally be run, but not by default. To enable KYC/AML checks one or more entity categories must be provided. If such a list of entity categories is given then default checks based on configuration will be run for those categories. If a check type is also provided in the request then that type will be used for entities representing individual entities, and the AML subset of that check will be used for organisations if any. Specifying a check type without an entity category will result in an error.  NOTE: This query will always run asynchronously and you will only ever be returned a 202 ACCEPT response, or an error. Results will be pushed using the Push Notification API below and you will be able to retrieve the results using the Retrieve API.  We have supplied the 200 response in the definition below only so what will be sent to you when you later retrieve the details.  More details on how to use this API and interpret the results can be found here:      https://apidocs.frankiefinancial.com/docs/which-function-to-use 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void businessOwnershipQueryTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        OwnershipQuery query = null;
        UUID xFrankieCustomerChildID = null;
        Set<String> checkType = null;
        Set<String> entityCategories = null;
        String resultLevel = null;
        String validation = null;
        String generateReport = null;
        Boolean includeHistorical = null;
        Boolean onlyProfile = null;
        OrganisationCheckResponseObject response = api.businessOwnershipQuery(xFrankieCustomerID, query, xFrankieCustomerChildID, checkType, entityCategories, resultLevel, validation, generateReport, includeHistorical, onlyProfile);
        // TODO: test validations
    }

    /**
     * Run KYC/AML Checks on Organisation and/or Associated Individuals.
     *
     * Run KYC/AML for a selection of entities associated with an organisation and/or the organisation itself based on a previous ownership query. By default AML will be checked for just the organisation itself. If a list of entity categories is given then default checks based on configuration will be run for those categories. If a check type is also provided in the request then that type will be used for entities representing individual entities, and the AML subset of that check will be used for organisations if any. If no ownership query has been run, then this operation will return an error. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkOrganisationTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID entityId = null;
        UUID xFrankieCustomerChildID = null;
        Set<String> checkType = null;
        Set<String> entityCategories = null;
        String resultLevel = null;
        String generateReport = null;
        AcceptedEntityResultObject response = api.checkOrganisation(xFrankieCustomerID, entityId, xFrankieCustomerChildID, checkType, entityCategories, resultLevel, generateReport);
        // TODO: test validations
    }

    /**
     * Retrieve a business profile from any country (AUS included).
     *
     * Using the Company Code retrieved from the search response (see above) you can pull back the details of the company.  The Frankie platform will save the details of the response as an ORGANISATION type entity with the profile attached as a report which you can potentially re-retrieve later if you wish. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void internationalBusinessProfileTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        InternationalBusinessProfileCriteria organisation = null;
        UUID xFrankieCustomerChildID = null;
        InternationalBusinessProfileResponse response = api.internationalBusinessProfile(xFrankieCustomerID, organisation, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Search for a business from any country (AUS included).
     *
     * Search for a given business name or business number across international business registers.  The search will return a list of matching companies that you can then potentially query using the international profile query (see below). Each search result will have a CompanyCode that you use to retrieve the specific company details using the profile function.  This process will not save any details from the search results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void internationalBusinessSearchTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        InternationalBusinessSearchCriteria organisation = null;
        UUID xFrankieCustomerChildID = null;
        InternationalBusinessSearchResponse response = api.internationalBusinessSearch(xFrankieCustomerID, organisation, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Run Report(s) against a new or existing organisation entity (AUS Only).
     *
     * NOTE: Australian companies ONLY. Create or find and update an ORGANISATION type entity, then run the requested reports. Reports include:  - Credit Report  - Credit Score  At a minimum, you just need to supply an ACN and/or ABN and an entity type set to ORGANISATION. Alternatively the entity ID of an existing ORGANISATION entity gan be given in the request body  Note: these reports are different to the Ultimate Beneficial Owner and Business Detail requests - these reports are independent data and analysis over and above company information and verification details.  You can request multiple reports to be run at once and they will be returned as a group (where feasible).  If a report can only be generated over time, then a temporary response will be returned and a webhook notification will be pushed later once the report has been completed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runBusinessReportsTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        String reportTypes = null;
        EntityObject organisation = null;
        UUID xFrankieCustomerChildID = null;
        BusinessReportResponseDetails response = api.runBusinessReports(xFrankieCustomerID, reportTypes, organisation, xFrankieCustomerChildID);
        // TODO: test validations
    }

}
