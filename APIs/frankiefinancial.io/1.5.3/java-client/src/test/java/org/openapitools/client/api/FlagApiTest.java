/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EntityResultObject;
import org.openapitools.client.model.ErrorObject;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlagApi
 */
@Disabled
public class FlagApiTest {

    private final FlagApi api = new FlagApi();

    /**
     * Set Entity Blacklist State.
     *
     * Mark the entity as blacklisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blacklistEntityTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID entityId = null;
        Boolean set = null;
        UUID xFrankieCustomerChildID = null;
        String reason = null;
        String blockedBy = null;
        String attribute = null;
        String originalId = null;
        EntityResultObject response = api.blacklistEntity(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, blockedBy, attribute, originalId);
        // TODO: test validations
    }

    /**
     * Set Entity Ongoing AML Monitoring Status.
     *
     * Mark the entity as being monitored or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entityMonitoringTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID entityId = null;
        Boolean set = null;
        UUID xFrankieCustomerChildID = null;
        EntityResultObject response = api.entityMonitoring(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Resolve Duplicate States.
     *
     * Resolve the state of a pair of duplicate entities with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. Setting duplicate to &#39;true&#39; will make entityId invisible for most purposes and otherId will continue to function as normal. Setting duplicate to &#39;false&#39; means the two entities are in fact separate but similar and they will both continue to exist independently but will no longer be identified as duplicates of eachother. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flagDuplicateEntityTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID entityId = null;
        UUID otherId = null;
        Boolean set = null;
        UUID xFrankieCustomerChildID = null;
        EntityResultObject response = api.flagDuplicateEntity(xFrankieCustomerID, entityId, otherId, set, xFrankieCustomerChildID);
        // TODO: test validations
    }

    /**
     * Set Entity Watchlist State.
     *
     * Mark the entity as watchlisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void watchlistEntityTest() throws ApiException {
        UUID xFrankieCustomerID = null;
        UUID entityId = null;
        Boolean set = null;
        UUID xFrankieCustomerChildID = null;
        String reason = null;
        String comment = null;
        EntityResultObject response = api.watchlistEntity(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, comment);
        // TODO: test validations
    }

}
