/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AddressObject;
import org.openapitools.client.model.DOBObject;
import org.openapitools.client.model.EntityFlagObject;
import org.openapitools.client.model.EnumEntityType;
import org.openapitools.client.model.EnumGender;
import org.openapitools.client.model.IdentityDocumentObject;
import org.openapitools.client.model.KeyValuePairObject;
import org.openapitools.client.model.OrganisationDataObject;
import org.openapitools.client.model.PersonalNameObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes all of the data being used to verify an entity. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityObject {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<AddressObject> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private DOBObject dateOfBirth;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_ENTITY_PROFILE = "entityProfile";
  @SerializedName(SERIALIZED_NAME_ENTITY_PROFILE)
  private String entityProfile;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EnumEntityType entityType;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "extraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private List<KeyValuePairObject> extraData = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<EntityFlagObject> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private EnumGender gender;

  public static final String SERIALIZED_NAME_IDENTITY_DOCS = "identityDocs";
  @SerializedName(SERIALIZED_NAME_IDENTITY_DOCS)
  private List<IdentityDocumentObject> identityDocs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private PersonalNameObject name;

  public static final String SERIALIZED_NAME_ORGANISATION_DATA = "organisationData";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_DATA)
  private OrganisationDataObject organisationData;

  public EntityObject() {
  }

  public EntityObject addresses(List<AddressObject> addresses) {
    this.addresses = addresses;
    return this;
  }

  public EntityObject addAddressesItem(AddressObject addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Collection of address objects.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<AddressObject> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<AddressObject> addresses) {
    this.addresses = addresses;
  }


  public EntityObject dateOfBirth(DOBObject dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Get dateOfBirth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public DOBObject getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(DOBObject dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public EntityObject entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * When an entity is first created, it is assigned an ID. When updating an entity, make sure you set the entityId One exception to this is when an entity is created from a document object. It is expected that this object would be passed into a /check or /entity call to set it. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public EntityObject entityProfile(String entityProfile) {
    this.entityProfile = entityProfile;
    return this;
  }

  /**
   * If the entity is using the new profiles feature, then their profile name will be found here.  Note: If setting a profile, you must ensure that the profile matches a known configuration.  Please contact Frankie developer support if you&#39;re unsure as to what valid values are. 
   * @return entityProfile
   */
  @javax.annotation.Nullable
  public String getEntityProfile() {
    return entityProfile;
  }

  public void setEntityProfile(String entityProfile) {
    this.entityProfile = entityProfile;
  }


  public EntityObject entityType(EnumEntityType entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public EnumEntityType getEntityType() {
    return entityType;
  }

  public void setEntityType(EnumEntityType entityType) {
    this.entityType = entityType;
  }


  public EntityObject extraData(List<KeyValuePairObject> extraData) {
    this.extraData = extraData;
    return this;
  }

  public EntityObject addExtraDataItem(KeyValuePairObject extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

  /**
   * Set of key-value pairs that provide arbitrary additional type-specific data. You can use these fields to store external IDs, or other non-identity related items if you need to. If updating an existing entity, then existing values with the same name will be overwritten. New values will be added.  See here for more information about possible values you can use:   https://apidocs.frankiefinancial.com/docs/entity-extradata-key-value-pairs 
   * @return extraData
   */
  @javax.annotation.Nullable
  public List<KeyValuePairObject> getExtraData() {
    return extraData;
  }

  public void setExtraData(List<KeyValuePairObject> extraData) {
    this.extraData = extraData;
  }


  public EntityObject flags(List<EntityFlagObject> flags) {
    this.flags = flags;
    return this;
  }

  public EntityObject addFlagsItem(EntityFlagObject flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * Used to set additional information flags with regards to this entity and for ongoing processing.  Flags might include having the entity (not) participate in regular pep/sanctions screening Others will follow over time. 
   * @return flags
   */
  @javax.annotation.Nullable
  public List<EntityFlagObject> getFlags() {
    return flags;
  }

  public void setFlags(List<EntityFlagObject> flags) {
    this.flags = flags;
  }


  public EntityObject gender(EnumGender gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public EnumGender getGender() {
    return gender;
  }

  public void setGender(EnumGender gender) {
    this.gender = gender;
  }


  public EntityObject identityDocs(List<IdentityDocumentObject> identityDocs) {
    this.identityDocs = identityDocs;
    return this;
  }

  public EntityObject addIdentityDocsItem(IdentityDocumentObject identityDocsItem) {
    if (this.identityDocs == null) {
      this.identityDocs = new ArrayList<>();
    }
    this.identityDocs.add(identityDocsItem);
    return this;
  }

  /**
   * Collection of identity documents (photos, scans, selfies, etc)
   * @return identityDocs
   */
  @javax.annotation.Nullable
  public List<IdentityDocumentObject> getIdentityDocs() {
    return identityDocs;
  }

  public void setIdentityDocs(List<IdentityDocumentObject> identityDocs) {
    this.identityDocs = identityDocs;
  }


  public EntityObject name(PersonalNameObject name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public PersonalNameObject getName() {
    return name;
  }

  public void setName(PersonalNameObject name) {
    this.name = name;
  }


  public EntityObject organisationData(OrganisationDataObject organisationData) {
    this.organisationData = organisationData;
    return this;
  }

  /**
   * Get organisationData
   * @return organisationData
   */
  @javax.annotation.Nullable
  public OrganisationDataObject getOrganisationData() {
    return organisationData;
  }

  public void setOrganisationData(OrganisationDataObject organisationData) {
    this.organisationData = organisationData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityObject entityObject = (EntityObject) o;
    return Objects.equals(this.addresses, entityObject.addresses) &&
        Objects.equals(this.dateOfBirth, entityObject.dateOfBirth) &&
        Objects.equals(this.entityId, entityObject.entityId) &&
        Objects.equals(this.entityProfile, entityObject.entityProfile) &&
        Objects.equals(this.entityType, entityObject.entityType) &&
        Objects.equals(this.extraData, entityObject.extraData) &&
        Objects.equals(this.flags, entityObject.flags) &&
        Objects.equals(this.gender, entityObject.gender) &&
        Objects.equals(this.identityDocs, entityObject.identityDocs) &&
        Objects.equals(this.name, entityObject.name) &&
        Objects.equals(this.organisationData, entityObject.organisationData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, dateOfBirth, entityId, entityProfile, entityType, extraData, flags, gender, identityDocs, name, organisationData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityObject {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityProfile: ").append(toIndentedString(entityProfile)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    identityDocs: ").append(toIndentedString(identityDocs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organisationData: ").append(toIndentedString(organisationData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("dateOfBirth");
    openapiFields.add("entityId");
    openapiFields.add("entityProfile");
    openapiFields.add("entityType");
    openapiFields.add("extraData");
    openapiFields.add("flags");
    openapiFields.add("gender");
    openapiFields.add("identityDocs");
    openapiFields.add("name");
    openapiFields.add("organisationData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityObject is not found in the empty JSON string", EntityObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            AddressObject.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      // validate the optional field `dateOfBirth`
      if (jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) {
        DOBObject.validateJsonElement(jsonObj.get("dateOfBirth"));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityProfile") != null && !jsonObj.get("entityProfile").isJsonNull()) && !jsonObj.get("entityProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityProfile").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EnumEntityType.validateJsonElement(jsonObj.get("entityType"));
      }
      if (jsonObj.get("extraData") != null && !jsonObj.get("extraData").isJsonNull()) {
        JsonArray jsonArrayextraData = jsonObj.getAsJsonArray("extraData");
        if (jsonArrayextraData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extraData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extraData` to be an array in the JSON string but got `%s`", jsonObj.get("extraData").toString()));
          }

          // validate the optional field `extraData` (array)
          for (int i = 0; i < jsonArrayextraData.size(); i++) {
            KeyValuePairObject.validateJsonElement(jsonArrayextraData.get(i));
          };
        }
      }
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) {
        JsonArray jsonArrayflags = jsonObj.getAsJsonArray("flags");
        if (jsonArrayflags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
          }

          // validate the optional field `flags` (array)
          for (int i = 0; i < jsonArrayflags.size(); i++) {
            EntityFlagObject.validateJsonElement(jsonArrayflags.get(i));
          };
        }
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        EnumGender.validateJsonElement(jsonObj.get("gender"));
      }
      if (jsonObj.get("identityDocs") != null && !jsonObj.get("identityDocs").isJsonNull()) {
        JsonArray jsonArrayidentityDocs = jsonObj.getAsJsonArray("identityDocs");
        if (jsonArrayidentityDocs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityDocs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityDocs` to be an array in the JSON string but got `%s`", jsonObj.get("identityDocs").toString()));
          }

          // validate the optional field `identityDocs` (array)
          for (int i = 0; i < jsonArrayidentityDocs.size(); i++) {
            IdentityDocumentObject.validateJsonElement(jsonArrayidentityDocs.get(i));
          };
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        PersonalNameObject.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `organisationData`
      if (jsonObj.get("organisationData") != null && !jsonObj.get("organisationData").isJsonNull()) {
        OrganisationDataObject.validateJsonElement(jsonObj.get("organisationData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityObject.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityObject>() {
           @Override
           public void write(JsonWriter out, EntityObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityObject
   * @throws IOException if the JSON string is invalid with respect to EntityObject
   */
  public static EntityObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityObject.class);
  }

  /**
   * Convert an instance of EntityObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

