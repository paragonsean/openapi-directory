/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreditScoreHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreditScoreObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreditScoreObject {
  public static final String SERIALIZED_NAME_CREDIT_SCORE_HISTORY = "creditScoreHistory";
  @SerializedName(SERIALIZED_NAME_CREDIT_SCORE_HISTORY)
  private List<CreditScoreHistory> creditScoreHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_CREDIT_SCORE = "currentCreditScore";
  @SerializedName(SERIALIZED_NAME_CURRENT_CREDIT_SCORE)
  private Integer currentCreditScore;

  public CreditScoreObject() {
  }

  public CreditScoreObject creditScoreHistory(List<CreditScoreHistory> creditScoreHistory) {
    this.creditScoreHistory = creditScoreHistory;
    return this;
  }

  public CreditScoreObject addCreditScoreHistoryItem(CreditScoreHistory creditScoreHistoryItem) {
    if (this.creditScoreHistory == null) {
      this.creditScoreHistory = new ArrayList<>();
    }
    this.creditScoreHistory.add(creditScoreHistoryItem);
    return this;
  }

  /**
   * Shows the credit score for every month over the last year for this business
   * @return creditScoreHistory
   */
  @javax.annotation.Nullable
  public List<CreditScoreHistory> getCreditScoreHistory() {
    return creditScoreHistory;
  }

  public void setCreditScoreHistory(List<CreditScoreHistory> creditScoreHistory) {
    this.creditScoreHistory = creditScoreHistory;
  }


  public CreditScoreObject currentCreditScore(Integer currentCreditScore) {
    this.currentCreditScore = currentCreditScore;
    return this;
  }

  /**
   * The score ultimately ranks entities based on their riskiness and is designed to assist you in making more informed and consistent credit decisions.  The score is based between 0 and 850 index points with a higher score considered lower risk while lower scores are deemed to be riskier entities. It should be used in partnership with your internal credit procedures and policies. Please note that the score and recommendation should be used in partnership with your company&#39;s internal credit procedures and policies. The score should not be used as the sole reason in making a decision about the entity.  0 &#x3D; Critical (ACN deregistered or ABN cancelled)  1 - 125 &#x3D; Entity has a critical status and significant adverse information present. Trading eligibility must be considered.)  126 - 250 &#x3D; Very High (Entity has a critical status and significant adverse information present. Trading eligibility must be considered)  251 - 450 &#x3D; High (Entity has a below average creditworthiness score and some adverse information may be present. Trade with caution, monitor closely and consider your payment terms)
   * @return currentCreditScore
   */
  @javax.annotation.Nullable
  public Integer getCurrentCreditScore() {
    return currentCreditScore;
  }

  public void setCurrentCreditScore(Integer currentCreditScore) {
    this.currentCreditScore = currentCreditScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditScoreObject creditScoreObject = (CreditScoreObject) o;
    return Objects.equals(this.creditScoreHistory, creditScoreObject.creditScoreHistory) &&
        Objects.equals(this.currentCreditScore, creditScoreObject.currentCreditScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditScoreHistory, currentCreditScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditScoreObject {\n");
    sb.append("    creditScoreHistory: ").append(toIndentedString(creditScoreHistory)).append("\n");
    sb.append("    currentCreditScore: ").append(toIndentedString(currentCreditScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creditScoreHistory");
    openapiFields.add("currentCreditScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditScoreObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditScoreObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditScoreObject is not found in the empty JSON string", CreditScoreObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditScoreObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditScoreObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("creditScoreHistory") != null && !jsonObj.get("creditScoreHistory").isJsonNull()) {
        JsonArray jsonArraycreditScoreHistory = jsonObj.getAsJsonArray("creditScoreHistory");
        if (jsonArraycreditScoreHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creditScoreHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creditScoreHistory` to be an array in the JSON string but got `%s`", jsonObj.get("creditScoreHistory").toString()));
          }

          // validate the optional field `creditScoreHistory` (array)
          for (int i = 0; i < jsonArraycreditScoreHistory.size(); i++) {
            CreditScoreHistory.validateJsonElement(jsonArraycreditScoreHistory.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditScoreObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditScoreObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditScoreObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditScoreObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditScoreObject>() {
           @Override
           public void write(JsonWriter out, CreditScoreObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditScoreObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditScoreObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditScoreObject
   * @throws IOException if the JSON string is invalid with respect to CreditScoreObject
   */
  public static CreditScoreObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditScoreObject.class);
  }

  /**
   * Convert an instance of CreditScoreObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

