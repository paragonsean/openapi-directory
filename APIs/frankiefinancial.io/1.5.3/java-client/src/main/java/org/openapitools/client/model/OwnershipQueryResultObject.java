/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.EntityObject;
import org.openapitools.client.model.OwnershipDetailsObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OwnershipQueryResultObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OwnershipQueryResultObject {
  public static final String SERIALIZED_NAME_ASSOCIATED_ENTITIES = "associatedEntities";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_ENTITIES)
  private Map<String, EntityObject> associatedEntities = new HashMap<>();

  public static final String SERIALIZED_NAME_BLOCKING_ENTITY_IDS = "blockingEntityIds";
  @SerializedName(SERIALIZED_NAME_BLOCKING_ENTITY_IDS)
  private List<UUID> blockingEntityIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_OWNERSHIP_DETAILS = "ownershipDetails";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_DETAILS)
  private Map<String, OwnershipDetailsObject> ownershipDetails = new HashMap<>();

  public OwnershipQueryResultObject() {
  }

  public OwnershipQueryResultObject associatedEntities(Map<String, EntityObject> associatedEntities) {
    this.associatedEntities = associatedEntities;
    return this;
  }

  public OwnershipQueryResultObject putAssociatedEntitiesItem(String key, EntityObject associatedEntitiesItem) {
    if (this.associatedEntities == null) {
      this.associatedEntities = new HashMap<>();
    }
    this.associatedEntities.put(key, associatedEntitiesItem);
    return this;
  }

  /**
   * List of all entities (both individuals and organisations) associated with this ownership result. These objects will be referenced by entityId in the shareholdings and officers lists in the following ownership details. 
   * @return associatedEntities
   */
  @javax.annotation.Nullable
  public Map<String, EntityObject> getAssociatedEntities() {
    return associatedEntities;
  }

  public void setAssociatedEntities(Map<String, EntityObject> associatedEntities) {
    this.associatedEntities = associatedEntities;
  }


  public OwnershipQueryResultObject blockingEntityIds(List<UUID> blockingEntityIds) {
    this.blockingEntityIds = blockingEntityIds;
    return this;
  }

  public OwnershipQueryResultObject addBlockingEntityIdsItem(UUID blockingEntityIdsItem) {
    if (this.blockingEntityIds == null) {
      this.blockingEntityIds = new ArrayList<>();
    }
    this.blockingEntityIds.add(blockingEntityIdsItem);
    return this;
  }

  /**
   * List of entity IDs (that should be in the associatedEntities list) who blocked the ultimate beneficial ownership tree traversal. These are likely to be entities that cannot be checked automatically (such as trusts) or who have no UBO&#39;s of their own, such as public companies.  The presence of data in this array also signifies that the full UBO list is not complete. 
   * @return blockingEntityIds
   */
  @javax.annotation.Nullable
  public List<UUID> getBlockingEntityIds() {
    return blockingEntityIds;
  }

  public void setBlockingEntityIds(List<UUID> blockingEntityIds) {
    this.blockingEntityIds = blockingEntityIds;
  }


  public OwnershipQueryResultObject entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The entityId of the organisation for which this result was created. The details will be in the ownershipDetails map with this ID as the key. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public OwnershipQueryResultObject ownershipDetails(Map<String, OwnershipDetailsObject> ownershipDetails) {
    this.ownershipDetails = ownershipDetails;
    return this;
  }

  public OwnershipQueryResultObject putOwnershipDetailsItem(String key, OwnershipDetailsObject ownershipDetailsItem) {
    if (this.ownershipDetails == null) {
      this.ownershipDetails = new HashMap<>();
    }
    this.ownershipDetails.put(key, ownershipDetailsItem);
    return this;
  }

  /**
   * A map of entityId to ownershipDetailsObjects with at least one entry being for the root organisation that the overall result relates to. Any remaining entries will be for further results for organisational owners referenced in the root ownershipDetailsObject and so on. 
   * @return ownershipDetails
   */
  @javax.annotation.Nullable
  public Map<String, OwnershipDetailsObject> getOwnershipDetails() {
    return ownershipDetails;
  }

  public void setOwnershipDetails(Map<String, OwnershipDetailsObject> ownershipDetails) {
    this.ownershipDetails = ownershipDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OwnershipQueryResultObject ownershipQueryResultObject = (OwnershipQueryResultObject) o;
    return Objects.equals(this.associatedEntities, ownershipQueryResultObject.associatedEntities) &&
        Objects.equals(this.blockingEntityIds, ownershipQueryResultObject.blockingEntityIds) &&
        Objects.equals(this.entityId, ownershipQueryResultObject.entityId) &&
        Objects.equals(this.ownershipDetails, ownershipQueryResultObject.ownershipDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedEntities, blockingEntityIds, entityId, ownershipDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OwnershipQueryResultObject {\n");
    sb.append("    associatedEntities: ").append(toIndentedString(associatedEntities)).append("\n");
    sb.append("    blockingEntityIds: ").append(toIndentedString(blockingEntityIds)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    ownershipDetails: ").append(toIndentedString(ownershipDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedEntities");
    openapiFields.add("blockingEntityIds");
    openapiFields.add("entityId");
    openapiFields.add("ownershipDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OwnershipQueryResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OwnershipQueryResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OwnershipQueryResultObject is not found in the empty JSON string", OwnershipQueryResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OwnershipQueryResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OwnershipQueryResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockingEntityIds") != null && !jsonObj.get("blockingEntityIds").isJsonNull() && !jsonObj.get("blockingEntityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingEntityIds` to be an array in the JSON string but got `%s`", jsonObj.get("blockingEntityIds").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OwnershipQueryResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OwnershipQueryResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OwnershipQueryResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OwnershipQueryResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OwnershipQueryResultObject>() {
           @Override
           public void write(JsonWriter out, OwnershipQueryResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OwnershipQueryResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OwnershipQueryResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OwnershipQueryResultObject
   * @throws IOException if the JSON string is invalid with respect to OwnershipQueryResultObject
   */
  public static OwnershipQueryResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OwnershipQueryResultObject.class);
  }

  /**
   * Convert an instance of OwnershipQueryResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

