/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BeneficialOwnerObject;
import org.openapitools.client.model.EntityObject;
import org.openapitools.client.model.OfficerObject;
import org.openapitools.client.model.ShareholdingObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ownership details for one organisation. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OwnershipDetailsObject {
  public static final String SERIALIZED_NAME_BENEFICIAL_OWNERS = "beneficialOwners";
  @SerializedName(SERIALIZED_NAME_BENEFICIAL_OWNERS)
  private List<BeneficialOwnerObject> beneficialOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFICERS = "officers";
  @SerializedName(SERIALIZED_NAME_OFFICERS)
  private List<OfficerObject> officers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANISATION = "organisation";
  @SerializedName(SERIALIZED_NAME_ORGANISATION)
  private EntityObject organisation;

  public static final String SERIALIZED_NAME_SHAREHOLDINGS = "shareholdings";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDINGS)
  private List<ShareholdingObject> shareholdings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ULTIMATE_BENEFICIAL_OWNERS = "ultimateBeneficialOwners";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_BENEFICIAL_OWNERS)
  private List<BeneficialOwnerObject> ultimateBeneficialOwners = new ArrayList<>();

  public OwnershipDetailsObject() {
  }

  public OwnershipDetailsObject beneficialOwners(List<BeneficialOwnerObject> beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
    return this;
  }

  public OwnershipDetailsObject addBeneficialOwnersItem(BeneficialOwnerObject beneficialOwnersItem) {
    if (this.beneficialOwners == null) {
      this.beneficialOwners = new ArrayList<>();
    }
    this.beneficialOwners.add(beneficialOwnersItem);
    return this;
  }

  /**
   * The beneficial owners of the company, who aren&#39;t necessarily UBO&#39;s. 
   * @return beneficialOwners
   */
  @javax.annotation.Nullable
  public List<BeneficialOwnerObject> getBeneficialOwners() {
    return beneficialOwners;
  }

  public void setBeneficialOwners(List<BeneficialOwnerObject> beneficialOwners) {
    this.beneficialOwners = beneficialOwners;
  }


  public OwnershipDetailsObject officers(List<OfficerObject> officers) {
    this.officers = officers;
    return this;
  }

  public OwnershipDetailsObject addOfficersItem(OfficerObject officersItem) {
    if (this.officers == null) {
      this.officers = new ArrayList<>();
    }
    this.officers.add(officersItem);
    return this;
  }

  /**
   * Company office holders. 
   * @return officers
   */
  @javax.annotation.Nullable
  public List<OfficerObject> getOfficers() {
    return officers;
  }

  public void setOfficers(List<OfficerObject> officers) {
    this.officers = officers;
  }


  public OwnershipDetailsObject organisation(EntityObject organisation) {
    this.organisation = organisation;
    return this;
  }

  /**
   * Get organisation
   * @return organisation
   */
  @javax.annotation.Nullable
  public EntityObject getOrganisation() {
    return organisation;
  }

  public void setOrganisation(EntityObject organisation) {
    this.organisation = organisation;
  }


  public OwnershipDetailsObject shareholdings(List<ShareholdingObject> shareholdings) {
    this.shareholdings = shareholdings;
    return this;
  }

  public OwnershipDetailsObject addShareholdingsItem(ShareholdingObject shareholdingsItem) {
    if (this.shareholdings == null) {
      this.shareholdings = new ArrayList<>();
    }
    this.shareholdings.add(shareholdingsItem);
    return this;
  }

  /**
   * Parcels of shares held by one or more shareholders. 
   * @return shareholdings
   */
  @javax.annotation.Nullable
  public List<ShareholdingObject> getShareholdings() {
    return shareholdings;
  }

  public void setShareholdings(List<ShareholdingObject> shareholdings) {
    this.shareholdings = shareholdings;
  }


  public OwnershipDetailsObject ultimateBeneficialOwners(List<BeneficialOwnerObject> ultimateBeneficialOwners) {
    this.ultimateBeneficialOwners = ultimateBeneficialOwners;
    return this;
  }

  public OwnershipDetailsObject addUltimateBeneficialOwnersItem(BeneficialOwnerObject ultimateBeneficialOwnersItem) {
    if (this.ultimateBeneficialOwners == null) {
      this.ultimateBeneficialOwners = new ArrayList<>();
    }
    this.ultimateBeneficialOwners.add(ultimateBeneficialOwnersItem);
    return this;
  }

  /**
   * The ultimate beneficial owners of the company. 
   * @return ultimateBeneficialOwners
   */
  @javax.annotation.Nullable
  public List<BeneficialOwnerObject> getUltimateBeneficialOwners() {
    return ultimateBeneficialOwners;
  }

  public void setUltimateBeneficialOwners(List<BeneficialOwnerObject> ultimateBeneficialOwners) {
    this.ultimateBeneficialOwners = ultimateBeneficialOwners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OwnershipDetailsObject ownershipDetailsObject = (OwnershipDetailsObject) o;
    return Objects.equals(this.beneficialOwners, ownershipDetailsObject.beneficialOwners) &&
        Objects.equals(this.officers, ownershipDetailsObject.officers) &&
        Objects.equals(this.organisation, ownershipDetailsObject.organisation) &&
        Objects.equals(this.shareholdings, ownershipDetailsObject.shareholdings) &&
        Objects.equals(this.ultimateBeneficialOwners, ownershipDetailsObject.ultimateBeneficialOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beneficialOwners, officers, organisation, shareholdings, ultimateBeneficialOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OwnershipDetailsObject {\n");
    sb.append("    beneficialOwners: ").append(toIndentedString(beneficialOwners)).append("\n");
    sb.append("    officers: ").append(toIndentedString(officers)).append("\n");
    sb.append("    organisation: ").append(toIndentedString(organisation)).append("\n");
    sb.append("    shareholdings: ").append(toIndentedString(shareholdings)).append("\n");
    sb.append("    ultimateBeneficialOwners: ").append(toIndentedString(ultimateBeneficialOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beneficialOwners");
    openapiFields.add("officers");
    openapiFields.add("organisation");
    openapiFields.add("shareholdings");
    openapiFields.add("ultimateBeneficialOwners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OwnershipDetailsObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OwnershipDetailsObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OwnershipDetailsObject is not found in the empty JSON string", OwnershipDetailsObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OwnershipDetailsObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OwnershipDetailsObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("beneficialOwners") != null && !jsonObj.get("beneficialOwners").isJsonNull()) {
        JsonArray jsonArraybeneficialOwners = jsonObj.getAsJsonArray("beneficialOwners");
        if (jsonArraybeneficialOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("beneficialOwners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `beneficialOwners` to be an array in the JSON string but got `%s`", jsonObj.get("beneficialOwners").toString()));
          }

          // validate the optional field `beneficialOwners` (array)
          for (int i = 0; i < jsonArraybeneficialOwners.size(); i++) {
            BeneficialOwnerObject.validateJsonElement(jsonArraybeneficialOwners.get(i));
          };
        }
      }
      if (jsonObj.get("officers") != null && !jsonObj.get("officers").isJsonNull()) {
        JsonArray jsonArrayofficers = jsonObj.getAsJsonArray("officers");
        if (jsonArrayofficers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("officers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `officers` to be an array in the JSON string but got `%s`", jsonObj.get("officers").toString()));
          }

          // validate the optional field `officers` (array)
          for (int i = 0; i < jsonArrayofficers.size(); i++) {
            OfficerObject.validateJsonElement(jsonArrayofficers.get(i));
          };
        }
      }
      // validate the optional field `organisation`
      if (jsonObj.get("organisation") != null && !jsonObj.get("organisation").isJsonNull()) {
        EntityObject.validateJsonElement(jsonObj.get("organisation"));
      }
      if (jsonObj.get("shareholdings") != null && !jsonObj.get("shareholdings").isJsonNull()) {
        JsonArray jsonArrayshareholdings = jsonObj.getAsJsonArray("shareholdings");
        if (jsonArrayshareholdings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareholdings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareholdings` to be an array in the JSON string but got `%s`", jsonObj.get("shareholdings").toString()));
          }

          // validate the optional field `shareholdings` (array)
          for (int i = 0; i < jsonArrayshareholdings.size(); i++) {
            ShareholdingObject.validateJsonElement(jsonArrayshareholdings.get(i));
          };
        }
      }
      if (jsonObj.get("ultimateBeneficialOwners") != null && !jsonObj.get("ultimateBeneficialOwners").isJsonNull()) {
        JsonArray jsonArrayultimateBeneficialOwners = jsonObj.getAsJsonArray("ultimateBeneficialOwners");
        if (jsonArrayultimateBeneficialOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ultimateBeneficialOwners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ultimateBeneficialOwners` to be an array in the JSON string but got `%s`", jsonObj.get("ultimateBeneficialOwners").toString()));
          }

          // validate the optional field `ultimateBeneficialOwners` (array)
          for (int i = 0; i < jsonArrayultimateBeneficialOwners.size(); i++) {
            BeneficialOwnerObject.validateJsonElement(jsonArrayultimateBeneficialOwners.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OwnershipDetailsObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OwnershipDetailsObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OwnershipDetailsObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OwnershipDetailsObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OwnershipDetailsObject>() {
           @Override
           public void write(JsonWriter out, OwnershipDetailsObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OwnershipDetailsObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OwnershipDetailsObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OwnershipDetailsObject
   * @throws IOException if the JSON string is invalid with respect to OwnershipDetailsObject
   */
  public static OwnershipDetailsObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OwnershipDetailsObject.class);
  }

  /**
   * Convert an instance of OwnershipDetailsObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

