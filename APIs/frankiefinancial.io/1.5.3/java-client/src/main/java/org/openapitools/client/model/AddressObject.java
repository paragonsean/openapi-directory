/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EnumAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddressObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddressObject {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private UUID addressId;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private EnumAddressType addressType;

  public static final String SERIALIZED_NAME_BUILDING_NAME = "buildingName";
  @SerializedName(SERIALIZED_NAME_BUILDING_NAME)
  private String buildingName;

  public static final String SERIALIZED_NAME_CARE_OF = "careOf";
  @SerializedName(SERIALIZED_NAME_CARE_OF)
  private String careOf;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_LONG_FORM = "longForm";
  @SerializedName(SERIALIZED_NAME_LONG_FORM)
  private String longForm;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET_NAME = "streetName";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public static final String SERIALIZED_NAME_STREET_NUMBER = "streetNumber";
  @SerializedName(SERIALIZED_NAME_STREET_NUMBER)
  private String streetNumber;

  public static final String SERIALIZED_NAME_STREET_TYPE = "streetType";
  @SerializedName(SERIALIZED_NAME_STREET_TYPE)
  private String streetType;

  public static final String SERIALIZED_NAME_SUBURB = "suburb";
  @SerializedName(SERIALIZED_NAME_SUBURB)
  private String suburb;

  public static final String SERIALIZED_NAME_TOWN = "town";
  @SerializedName(SERIALIZED_NAME_TOWN)
  private String town;

  public static final String SERIALIZED_NAME_UNIT_NUMBER = "unitNumber";
  @SerializedName(SERIALIZED_NAME_UNIT_NUMBER)
  private String unitNumber;

  public AddressObject() {
  }

  public AddressObject addressId(UUID addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * As addresses are added to an entity, they&#39;re assigned an id to assist with tracking.   If you&#39;re adjusting an address, you will need to include the addressId so as to be able to reference it correctly in the list. 
   * @return addressId
   */
  @javax.annotation.Nullable
  public UUID getAddressId() {
    return addressId;
  }

  public void setAddressId(UUID addressId) {
    this.addressId = addressId;
  }


  public AddressObject addressType(EnumAddressType addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Get addressType
   * @return addressType
   */
  @javax.annotation.Nullable
  public EnumAddressType getAddressType() {
    return addressType;
  }

  public void setAddressType(EnumAddressType addressType) {
    this.addressType = addressType;
  }


  public AddressObject buildingName(String buildingName) {
    this.buildingName = buildingName;
    return this;
  }

  /**
   * The name of the building, apartment block, condo, etc
   * @return buildingName
   */
  @javax.annotation.Nullable
  public String getBuildingName() {
    return buildingName;
  }

  public void setBuildingName(String buildingName) {
    this.buildingName = buildingName;
  }


  public AddressObject careOf(String careOf) {
    this.careOf = careOf;
    return this;
  }

  /**
   * Individual or business name at this address if not the same as the name of the entity to which this address belongs. 
   * @return careOf
   */
  @javax.annotation.Nullable
  public String getCareOf() {
    return careOf;
  }

  public void setCareOf(String careOf) {
    this.careOf = careOf;
  }


  public AddressObject country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The ISO-3166-1 country. You must use the alpha3 country code (e.g. AUS, USA, IDR, KOR, etc) We&#39;ll convert as needed.   See: https://en.wikipedia.org/wiki/ISO_3166-1 
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AddressObject endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The date this address was no longer used (if available). Used mostly with business addresses. 
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public AddressObject longForm(String longForm) {
    this.longForm = longForm;
    return this;
  }

  /**
   * In some cases, the address will need to be supplied in \&quot;long form\&quot;, such as when it is determined from a document scan, or is un-parsable in some way. The service will attempt to convert it to it&#39;s constituent parts where possible.  WARNING: Use of longForm is not guaranteed to produce perfect results, due to the variety of potential formats. You&#39;ve been warned.  Failure to break down or disambiguate the address will result in an error. 
   * @return longForm
   */
  @javax.annotation.Nullable
  public String getLongForm() {
    return longForm;
  }

  public void setLongForm(String longForm) {
    this.longForm = longForm;
  }


  public AddressObject postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The post code of the address.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public AddressObject region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The county, province, cantonment
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public AddressObject startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date this address first because active. Used mostly with business addresses. 
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public AddressObject state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state. Use local abbreviations, such as VIC(toria) or TX (Texas)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public AddressObject streetName(String streetName) {
    this.streetName = streetName;
    return this;
  }

  /**
   * The name of the street  This field can in fact be a bit flexible, potentially containing the streetNumber and streetType as well. Most services in use can work it out.  If this field has been auto-populated by Google (see writeup here:  https://apidocs.frankiefinancial.com/docs/working-with-addresses then the bulk of the address will be in this field.  If you can avoid it though, please try and keep things separate. 
   * @return streetName
   */
  @javax.annotation.Nullable
  public String getStreetName() {
    return streetName;
  }

  public void setStreetName(String streetName) {
    this.streetName = streetName;
  }


  public AddressObject streetNumber(String streetNumber) {
    this.streetNumber = streetNumber;
    return this;
  }

  /**
   * The number on the street. Generally a number, but can also be alphanumeric (e.g. 3A) 
   * @return streetNumber
   */
  @javax.annotation.Nullable
  public String getStreetNumber() {
    return streetNumber;
  }

  public void setStreetNumber(String streetNumber) {
    this.streetNumber = streetNumber;
  }


  public AddressObject streetType(String streetType) {
    this.streetType = streetType;
    return this;
  }

  /**
   * The street \&quot;type\&quot; - e.g. Road, St, Ave, Circuit, etc
   * @return streetType
   */
  @javax.annotation.Nullable
  public String getStreetType() {
    return streetType;
  }

  public void setStreetType(String streetType) {
    this.streetType = streetType;
  }


  public AddressObject suburb(String suburb) {
    this.suburb = suburb;
    return this;
  }

  /**
   * The suburb in the town/city. Only use this if you require a suburb AND a town/city, otherwise, just use the \&quot;town\&quot; parameter.
   * @return suburb
   */
  @javax.annotation.Nullable
  public String getSuburb() {
    return suburb;
  }

  public void setSuburb(String suburb) {
    this.suburb = suburb;
  }


  public AddressObject town(String town) {
    this.town = town;
    return this;
  }

  /**
   * The town/village/suburb/city
   * @return town
   */
  @javax.annotation.Nullable
  public String getTown() {
    return town;
  }

  public void setTown(String town) {
    this.town = town;
  }


  public AddressObject unitNumber(String unitNumber) {
    this.unitNumber = unitNumber;
    return this;
  }

  /**
   * Unit/Apartment/Flat/Suite/etc number
   * @return unitNumber
   */
  @javax.annotation.Nullable
  public String getUnitNumber() {
    return unitNumber;
  }

  public void setUnitNumber(String unitNumber) {
    this.unitNumber = unitNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressObject addressObject = (AddressObject) o;
    return Objects.equals(this.addressId, addressObject.addressId) &&
        Objects.equals(this.addressType, addressObject.addressType) &&
        Objects.equals(this.buildingName, addressObject.buildingName) &&
        Objects.equals(this.careOf, addressObject.careOf) &&
        Objects.equals(this.country, addressObject.country) &&
        Objects.equals(this.endDate, addressObject.endDate) &&
        Objects.equals(this.longForm, addressObject.longForm) &&
        Objects.equals(this.postalCode, addressObject.postalCode) &&
        Objects.equals(this.region, addressObject.region) &&
        Objects.equals(this.startDate, addressObject.startDate) &&
        Objects.equals(this.state, addressObject.state) &&
        Objects.equals(this.streetName, addressObject.streetName) &&
        Objects.equals(this.streetNumber, addressObject.streetNumber) &&
        Objects.equals(this.streetType, addressObject.streetType) &&
        Objects.equals(this.suburb, addressObject.suburb) &&
        Objects.equals(this.town, addressObject.town) &&
        Objects.equals(this.unitNumber, addressObject.unitNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, addressType, buildingName, careOf, country, endDate, longForm, postalCode, region, startDate, state, streetName, streetNumber, streetType, suburb, town, unitNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressObject {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    buildingName: ").append(toIndentedString(buildingName)).append("\n");
    sb.append("    careOf: ").append(toIndentedString(careOf)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    longForm: ").append(toIndentedString(longForm)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    streetNumber: ").append(toIndentedString(streetNumber)).append("\n");
    sb.append("    streetType: ").append(toIndentedString(streetType)).append("\n");
    sb.append("    suburb: ").append(toIndentedString(suburb)).append("\n");
    sb.append("    town: ").append(toIndentedString(town)).append("\n");
    sb.append("    unitNumber: ").append(toIndentedString(unitNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("addressType");
    openapiFields.add("buildingName");
    openapiFields.add("careOf");
    openapiFields.add("country");
    openapiFields.add("endDate");
    openapiFields.add("longForm");
    openapiFields.add("postalCode");
    openapiFields.add("region");
    openapiFields.add("startDate");
    openapiFields.add("state");
    openapiFields.add("streetName");
    openapiFields.add("streetNumber");
    openapiFields.add("streetType");
    openapiFields.add("suburb");
    openapiFields.add("town");
    openapiFields.add("unitNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressObject is not found in the empty JSON string", AddressObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddressObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      // validate the optional field `addressType`
      if (jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) {
        EnumAddressType.validateJsonElement(jsonObj.get("addressType"));
      }
      if ((jsonObj.get("buildingName") != null && !jsonObj.get("buildingName").isJsonNull()) && !jsonObj.get("buildingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildingName").toString()));
      }
      if ((jsonObj.get("careOf") != null && !jsonObj.get("careOf").isJsonNull()) && !jsonObj.get("careOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `careOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("careOf").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("longForm") != null && !jsonObj.get("longForm").isJsonNull()) && !jsonObj.get("longForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longForm").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("streetName") != null && !jsonObj.get("streetName").isJsonNull()) && !jsonObj.get("streetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetName").toString()));
      }
      if ((jsonObj.get("streetNumber") != null && !jsonObj.get("streetNumber").isJsonNull()) && !jsonObj.get("streetNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetNumber").toString()));
      }
      if ((jsonObj.get("streetType") != null && !jsonObj.get("streetType").isJsonNull()) && !jsonObj.get("streetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetType").toString()));
      }
      if ((jsonObj.get("suburb") != null && !jsonObj.get("suburb").isJsonNull()) && !jsonObj.get("suburb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suburb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suburb").toString()));
      }
      if ((jsonObj.get("town") != null && !jsonObj.get("town").isJsonNull()) && !jsonObj.get("town").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `town` to be a primitive type in the JSON string but got `%s`", jsonObj.get("town").toString()));
      }
      if ((jsonObj.get("unitNumber") != null && !jsonObj.get("unitNumber").isJsonNull()) && !jsonObj.get("unitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressObject>() {
           @Override
           public void write(JsonWriter out, AddressObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressObject
   * @throws IOException if the JSON string is invalid with respect to AddressObject
   */
  public static AddressObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressObject.class);
  }

  /**
   * Convert an instance of AddressObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

