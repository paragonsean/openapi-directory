/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.CheckEntityCheckResultObject;
import org.openapitools.client.model.ErrorObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The results of KYC/AML check on a organisation with a prior ownership query. This will be retrived via GET /retrieve/response/{requestId} after you receive a notification that the results are ready. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganisationCheckResultObject {
  public static final String SERIALIZED_NAME_ENTITY_CATEGORIES = "entityCategories";
  @SerializedName(SERIALIZED_NAME_ENTITY_CATEGORIES)
  private Map<String, List<UUID>> entityCategories = new HashMap<>();

  public static final String SERIALIZED_NAME_ENTITY_CHECK_ERRORS = "entityCheckErrors";
  @SerializedName(SERIALIZED_NAME_ENTITY_CHECK_ERRORS)
  private Map<String, ErrorObject> entityCheckErrors = new HashMap<>();

  public static final String SERIALIZED_NAME_ENTITY_CHECK_RESULTS = "entityCheckResults";
  @SerializedName(SERIALIZED_NAME_ENTITY_CHECK_RESULTS)
  private Map<String, CheckEntityCheckResultObject> entityCheckResults = new HashMap<>();

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private UUID groupId;

  public OrganisationCheckResultObject() {
  }

  public OrganisationCheckResultObject entityCategories(Map<String, List<UUID>> entityCategories) {
    this.entityCategories = entityCategories;
    return this;
  }

  public OrganisationCheckResultObject putEntityCategoriesItem(String key, List<UUID> entityCategoriesItem) {
    if (this.entityCategories == null) {
      this.entityCategories = new HashMap<>();
    }
    this.entityCategories.put(key, entityCategoriesItem);
    return this;
  }

  /**
   * A map of the entity categories that were selected for checks and an array of the entity IDs for each. The results for each entity ID will be in either the entityCheckResults or entityCheckErrors maps. Entities may appear in more than one category. 
   * @return entityCategories
   */
  @javax.annotation.Nullable
  public Map<String, List<UUID>> getEntityCategories() {
    return entityCategories;
  }

  public void setEntityCategories(Map<String, List<UUID>> entityCategories) {
    this.entityCategories = entityCategories;
  }


  public OrganisationCheckResultObject entityCheckErrors(Map<String, ErrorObject> entityCheckErrors) {
    this.entityCheckErrors = entityCheckErrors;
    return this;
  }

  public OrganisationCheckResultObject putEntityCheckErrorsItem(String key, ErrorObject entityCheckErrorsItem) {
    if (this.entityCheckErrors == null) {
      this.entityCheckErrors = new HashMap<>();
    }
    this.entityCheckErrors.put(key, entityCheckErrorsItem);
    return this;
  }

  /**
   * A map of outright errors (failure to generate any kind of result). These objects will be referenced by entity ID in the entity category map. 
   * @return entityCheckErrors
   */
  @javax.annotation.Nullable
  public Map<String, ErrorObject> getEntityCheckErrors() {
    return entityCheckErrors;
  }

  public void setEntityCheckErrors(Map<String, ErrorObject> entityCheckErrors) {
    this.entityCheckErrors = entityCheckErrors;
  }


  public OrganisationCheckResultObject entityCheckResults(Map<String, CheckEntityCheckResultObject> entityCheckResults) {
    this.entityCheckResults = entityCheckResults;
    return this;
  }

  public OrganisationCheckResultObject putEntityCheckResultsItem(String key, CheckEntityCheckResultObject entityCheckResultsItem) {
    if (this.entityCheckResults == null) {
      this.entityCheckResults = new HashMap<>();
    }
    this.entityCheckResults.put(key, entityCheckResultsItem);
    return this;
  }

  /**
   * List of all entities check results (both individuals and organisations) other than outright errors. These objects will be referenced by entity ID in the entity category map. 
   * @return entityCheckResults
   */
  @javax.annotation.Nullable
  public Map<String, CheckEntityCheckResultObject> getEntityCheckResults() {
    return entityCheckResults;
  }

  public void setEntityCheckResults(Map<String, CheckEntityCheckResultObject> entityCheckResults) {
    this.entityCheckResults = entityCheckResults;
  }


  public OrganisationCheckResultObject entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * The entityId of the organisation for which this result was created. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public OrganisationCheckResultObject groupId(UUID groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * The unique ID for grouping all new KYC/AML checks in this result. This is only for Frankie internal use. 
   * @return groupId
   */
  @javax.annotation.Nullable
  public UUID getGroupId() {
    return groupId;
  }

  public void setGroupId(UUID groupId) {
    this.groupId = groupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganisationCheckResultObject organisationCheckResultObject = (OrganisationCheckResultObject) o;
    return Objects.equals(this.entityCategories, organisationCheckResultObject.entityCategories) &&
        Objects.equals(this.entityCheckErrors, organisationCheckResultObject.entityCheckErrors) &&
        Objects.equals(this.entityCheckResults, organisationCheckResultObject.entityCheckResults) &&
        Objects.equals(this.entityId, organisationCheckResultObject.entityId) &&
        Objects.equals(this.groupId, organisationCheckResultObject.groupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityCategories, entityCheckErrors, entityCheckResults, entityId, groupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganisationCheckResultObject {\n");
    sb.append("    entityCategories: ").append(toIndentedString(entityCategories)).append("\n");
    sb.append("    entityCheckErrors: ").append(toIndentedString(entityCheckErrors)).append("\n");
    sb.append("    entityCheckResults: ").append(toIndentedString(entityCheckResults)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityCategories");
    openapiFields.add("entityCheckErrors");
    openapiFields.add("entityCheckResults");
    openapiFields.add("entityId");
    openapiFields.add("groupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganisationCheckResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganisationCheckResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganisationCheckResultObject is not found in the empty JSON string", OrganisationCheckResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganisationCheckResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganisationCheckResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("groupId") != null && !jsonObj.get("groupId").isJsonNull()) && !jsonObj.get("groupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganisationCheckResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganisationCheckResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganisationCheckResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganisationCheckResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganisationCheckResultObject>() {
           @Override
           public void write(JsonWriter out, OrganisationCheckResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganisationCheckResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganisationCheckResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganisationCheckResultObject
   * @throws IOException if the JSON string is invalid with respect to OrganisationCheckResultObject
   */
  public static OrganisationCheckResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganisationCheckResultObject.class);
  }

  /**
   * Convert an instance of OrganisationCheckResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

