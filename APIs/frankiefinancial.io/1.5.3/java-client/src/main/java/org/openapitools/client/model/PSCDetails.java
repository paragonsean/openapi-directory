/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayOfString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PSCDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PSCDetails {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CEASED_ON = "CeasedOn";
  @SerializedName(SERIALIZED_NAME_CEASED_ON)
  private String ceasedOn;

  public static final String SERIALIZED_NAME_COUNTRY_OF_RESIDENCE = "CountryOfResidence";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_RESIDENCE)
  private String countryOfResidence;

  public static final String SERIALIZED_NAME_DO_B_DAY = "DOBDay";
  @SerializedName(SERIALIZED_NAME_DO_B_DAY)
  private Long doBDay;

  public static final String SERIALIZED_NAME_DO_B_MONTH = "DOBMonth";
  @SerializedName(SERIALIZED_NAME_DO_B_MONTH)
  private Long doBMonth;

  public static final String SERIALIZED_NAME_DO_B_YEAR = "DOBYear";
  @SerializedName(SERIALIZED_NAME_DO_B_YEAR)
  private Long doBYear;

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONALITY = "Nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_NATURE_OF_CONTROL = "NatureOfControl";
  @SerializedName(SERIALIZED_NAME_NATURE_OF_CONTROL)
  private ArrayOfString natureOfControl;

  public static final String SERIALIZED_NAME_NOTIFIED_ON = "NotifiedOn";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_ON)
  private String notifiedOn;

  public PSCDetails() {
  }

  public PSCDetails address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public PSCDetails ceasedOn(String ceasedOn) {
    this.ceasedOn = ceasedOn;
    return this;
  }

  /**
   * Get ceasedOn
   * @return ceasedOn
   */
  @javax.annotation.Nullable
  public String getCeasedOn() {
    return ceasedOn;
  }

  public void setCeasedOn(String ceasedOn) {
    this.ceasedOn = ceasedOn;
  }


  public PSCDetails countryOfResidence(String countryOfResidence) {
    this.countryOfResidence = countryOfResidence;
    return this;
  }

  /**
   * Get countryOfResidence
   * @return countryOfResidence
   */
  @javax.annotation.Nullable
  public String getCountryOfResidence() {
    return countryOfResidence;
  }

  public void setCountryOfResidence(String countryOfResidence) {
    this.countryOfResidence = countryOfResidence;
  }


  public PSCDetails doBDay(Long doBDay) {
    this.doBDay = doBDay;
    return this;
  }

  /**
   * Get doBDay
   * @return doBDay
   */
  @javax.annotation.Nullable
  public Long getDoBDay() {
    return doBDay;
  }

  public void setDoBDay(Long doBDay) {
    this.doBDay = doBDay;
  }


  public PSCDetails doBMonth(Long doBMonth) {
    this.doBMonth = doBMonth;
    return this;
  }

  /**
   * Get doBMonth
   * @return doBMonth
   */
  @javax.annotation.Nullable
  public Long getDoBMonth() {
    return doBMonth;
  }

  public void setDoBMonth(Long doBMonth) {
    this.doBMonth = doBMonth;
  }


  public PSCDetails doBYear(Long doBYear) {
    this.doBYear = doBYear;
    return this;
  }

  /**
   * Get doBYear
   * @return doBYear
   */
  @javax.annotation.Nullable
  public Long getDoBYear() {
    return doBYear;
  }

  public void setDoBYear(Long doBYear) {
    this.doBYear = doBYear;
  }


  public PSCDetails kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PSCDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PSCDetails nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Get nationality
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public PSCDetails natureOfControl(ArrayOfString natureOfControl) {
    this.natureOfControl = natureOfControl;
    return this;
  }

  /**
   * Get natureOfControl
   * @return natureOfControl
   */
  @javax.annotation.Nullable
  public ArrayOfString getNatureOfControl() {
    return natureOfControl;
  }

  public void setNatureOfControl(ArrayOfString natureOfControl) {
    this.natureOfControl = natureOfControl;
  }


  public PSCDetails notifiedOn(String notifiedOn) {
    this.notifiedOn = notifiedOn;
    return this;
  }

  /**
   * Get notifiedOn
   * @return notifiedOn
   */
  @javax.annotation.Nullable
  public String getNotifiedOn() {
    return notifiedOn;
  }

  public void setNotifiedOn(String notifiedOn) {
    this.notifiedOn = notifiedOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PSCDetails psCDetails = (PSCDetails) o;
    return Objects.equals(this.address, psCDetails.address) &&
        Objects.equals(this.ceasedOn, psCDetails.ceasedOn) &&
        Objects.equals(this.countryOfResidence, psCDetails.countryOfResidence) &&
        Objects.equals(this.doBDay, psCDetails.doBDay) &&
        Objects.equals(this.doBMonth, psCDetails.doBMonth) &&
        Objects.equals(this.doBYear, psCDetails.doBYear) &&
        Objects.equals(this.kind, psCDetails.kind) &&
        Objects.equals(this.name, psCDetails.name) &&
        Objects.equals(this.nationality, psCDetails.nationality) &&
        Objects.equals(this.natureOfControl, psCDetails.natureOfControl) &&
        Objects.equals(this.notifiedOn, psCDetails.notifiedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, ceasedOn, countryOfResidence, doBDay, doBMonth, doBYear, kind, name, nationality, natureOfControl, notifiedOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PSCDetails {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    ceasedOn: ").append(toIndentedString(ceasedOn)).append("\n");
    sb.append("    countryOfResidence: ").append(toIndentedString(countryOfResidence)).append("\n");
    sb.append("    doBDay: ").append(toIndentedString(doBDay)).append("\n");
    sb.append("    doBMonth: ").append(toIndentedString(doBMonth)).append("\n");
    sb.append("    doBYear: ").append(toIndentedString(doBYear)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    natureOfControl: ").append(toIndentedString(natureOfControl)).append("\n");
    sb.append("    notifiedOn: ").append(toIndentedString(notifiedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("CeasedOn");
    openapiFields.add("CountryOfResidence");
    openapiFields.add("DOBDay");
    openapiFields.add("DOBMonth");
    openapiFields.add("DOBYear");
    openapiFields.add("Kind");
    openapiFields.add("Name");
    openapiFields.add("Nationality");
    openapiFields.add("NatureOfControl");
    openapiFields.add("NotifiedOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PSCDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PSCDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PSCDetails is not found in the empty JSON string", PSCDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PSCDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PSCDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if ((jsonObj.get("CeasedOn") != null && !jsonObj.get("CeasedOn").isJsonNull()) && !jsonObj.get("CeasedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CeasedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CeasedOn").toString()));
      }
      if ((jsonObj.get("CountryOfResidence") != null && !jsonObj.get("CountryOfResidence").isJsonNull()) && !jsonObj.get("CountryOfResidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryOfResidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryOfResidence").toString()));
      }
      if ((jsonObj.get("Kind") != null && !jsonObj.get("Kind").isJsonNull()) && !jsonObj.get("Kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Kind").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Nationality") != null && !jsonObj.get("Nationality").isJsonNull()) && !jsonObj.get("Nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Nationality").toString()));
      }
      // validate the optional field `NatureOfControl`
      if (jsonObj.get("NatureOfControl") != null && !jsonObj.get("NatureOfControl").isJsonNull()) {
        ArrayOfString.validateJsonElement(jsonObj.get("NatureOfControl"));
      }
      if ((jsonObj.get("NotifiedOn") != null && !jsonObj.get("NotifiedOn").isJsonNull()) && !jsonObj.get("NotifiedOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NotifiedOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NotifiedOn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PSCDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PSCDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PSCDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PSCDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PSCDetails>() {
           @Override
           public void write(JsonWriter out, PSCDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PSCDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PSCDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PSCDetails
   * @throws IOException if the JSON string is invalid with respect to PSCDetails
   */
  public static PSCDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PSCDetails.class);
  }

  /**
   * Convert an instance of PSCDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

