/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodeDescription;
import org.openapitools.client.model.OrganisationDataObjectRegistration;
import org.openapitools.client.model.ShareStructureObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Organisation details for entities. Returned from an ASIC report. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganisationDataObject {
  public static final String SERIALIZED_NAME_ADVERSE_CREDIT_DATA_PRESENT = "adverseCreditDataPresent";
  @SerializedName(SERIALIZED_NAME_ADVERSE_CREDIT_DATA_PRESENT)
  private Boolean adverseCreditDataPresent;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private CodeDescription propertyClass;

  public static final String SERIALIZED_NAME_DISCLOSING_ENTITY_INDICATOR = "disclosingEntityIndicator";
  @SerializedName(SERIALIZED_NAME_DISCLOSING_ENTITY_INDICATOR)
  private Boolean disclosingEntityIndicator;

  public static final String SERIALIZED_NAME_INCLUDES_NON_BENEFICIALLY_HELD = "includesNonBeneficiallyHeld";
  @SerializedName(SERIALIZED_NAME_INCLUDES_NON_BENEFICIALLY_HELD)
  private Boolean includesNonBeneficiallyHeld;

  public static final String SERIALIZED_NAME_KYC_CUSTOMER_TYPE = "kycCustomerType";
  @SerializedName(SERIALIZED_NAME_KYC_CUSTOMER_TYPE)
  private String kycCustomerType;

  public static final String SERIALIZED_NAME_LAST_CHECK_DATE = "lastCheckDate";
  @SerializedName(SERIALIZED_NAME_LAST_CHECK_DATE)
  private LocalDate lastCheckDate;

  public static final String SERIALIZED_NAME_OWNERSHIP_RESOLVED = "ownershipResolved";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_RESOLVED)
  private Boolean ownershipResolved;

  public static final String SERIALIZED_NAME_REGISTERED_NAME = "registeredName";
  @SerializedName(SERIALIZED_NAME_REGISTERED_NAME)
  private String registeredName;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private OrganisationDataObjectRegistration registration;

  public static final String SERIALIZED_NAME_SHARE_STRUCTURE = "shareStructure";
  @SerializedName(SERIALIZED_NAME_SHARE_STRUCTURE)
  private List<ShareStructureObject> shareStructure = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CodeDescription status;

  public static final String SERIALIZED_NAME_SUBCLASS = "subclass";
  @SerializedName(SERIALIZED_NAME_SUBCLASS)
  private CodeDescription subclass;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CodeDescription type;

  public OrganisationDataObject() {
  }

  public OrganisationDataObject adverseCreditDataPresent(Boolean adverseCreditDataPresent) {
    this.adverseCreditDataPresent = adverseCreditDataPresent;
    return this;
  }

  /**
   * Get adverseCreditDataPresent
   * @return adverseCreditDataPresent
   */
  @javax.annotation.Nullable
  public Boolean getAdverseCreditDataPresent() {
    return adverseCreditDataPresent;
  }

  public void setAdverseCreditDataPresent(Boolean adverseCreditDataPresent) {
    this.adverseCreditDataPresent = adverseCreditDataPresent;
  }


  public OrganisationDataObject propertyClass(CodeDescription propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public CodeDescription getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(CodeDescription propertyClass) {
    this.propertyClass = propertyClass;
  }


  public OrganisationDataObject disclosingEntityIndicator(Boolean disclosingEntityIndicator) {
    this.disclosingEntityIndicator = disclosingEntityIndicator;
    return this;
  }

  /**
   * Get disclosingEntityIndicator
   * @return disclosingEntityIndicator
   */
  @javax.annotation.Nullable
  public Boolean getDisclosingEntityIndicator() {
    return disclosingEntityIndicator;
  }

  public void setDisclosingEntityIndicator(Boolean disclosingEntityIndicator) {
    this.disclosingEntityIndicator = disclosingEntityIndicator;
  }


  public OrganisationDataObject includesNonBeneficiallyHeld(Boolean includesNonBeneficiallyHeld) {
    this.includesNonBeneficiallyHeld = includesNonBeneficiallyHeld;
    return this;
  }

  /**
   * Get includesNonBeneficiallyHeld
   * @return includesNonBeneficiallyHeld
   */
  @javax.annotation.Nullable
  public Boolean getIncludesNonBeneficiallyHeld() {
    return includesNonBeneficiallyHeld;
  }

  public void setIncludesNonBeneficiallyHeld(Boolean includesNonBeneficiallyHeld) {
    this.includesNonBeneficiallyHeld = includesNonBeneficiallyHeld;
  }


  public OrganisationDataObject kycCustomerType(String kycCustomerType) {
    this.kycCustomerType = kycCustomerType;
    return this;
  }

  /**
   * Get kycCustomerType
   * @return kycCustomerType
   */
  @javax.annotation.Nullable
  public String getKycCustomerType() {
    return kycCustomerType;
  }

  public void setKycCustomerType(String kycCustomerType) {
    this.kycCustomerType = kycCustomerType;
  }


  public OrganisationDataObject lastCheckDate(LocalDate lastCheckDate) {
    this.lastCheckDate = lastCheckDate;
    return this;
  }

  /**
   * Get lastCheckDate
   * @return lastCheckDate
   */
  @javax.annotation.Nullable
  public LocalDate getLastCheckDate() {
    return lastCheckDate;
  }

  public void setLastCheckDate(LocalDate lastCheckDate) {
    this.lastCheckDate = lastCheckDate;
  }


  public OrganisationDataObject ownershipResolved(Boolean ownershipResolved) {
    this.ownershipResolved = ownershipResolved;
    return this;
  }

  /**
   * Get ownershipResolved
   * @return ownershipResolved
   */
  @javax.annotation.Nullable
  public Boolean getOwnershipResolved() {
    return ownershipResolved;
  }

  public void setOwnershipResolved(Boolean ownershipResolved) {
    this.ownershipResolved = ownershipResolved;
  }


  public OrganisationDataObject registeredName(String registeredName) {
    this.registeredName = registeredName;
    return this;
  }

  /**
   * Get registeredName
   * @return registeredName
   */
  @javax.annotation.Nullable
  public String getRegisteredName() {
    return registeredName;
  }

  public void setRegisteredName(String registeredName) {
    this.registeredName = registeredName;
  }


  public OrganisationDataObject registration(OrganisationDataObjectRegistration registration) {
    this.registration = registration;
    return this;
  }

  /**
   * Get registration
   * @return registration
   */
  @javax.annotation.Nullable
  public OrganisationDataObjectRegistration getRegistration() {
    return registration;
  }

  public void setRegistration(OrganisationDataObjectRegistration registration) {
    this.registration = registration;
  }


  public OrganisationDataObject shareStructure(List<ShareStructureObject> shareStructure) {
    this.shareStructure = shareStructure;
    return this;
  }

  public OrganisationDataObject addShareStructureItem(ShareStructureObject shareStructureItem) {
    if (this.shareStructure == null) {
      this.shareStructure = new ArrayList<>();
    }
    this.shareStructure.add(shareStructureItem);
    return this;
  }

  /**
   * Get shareStructure
   * @return shareStructure
   */
  @javax.annotation.Nullable
  public List<ShareStructureObject> getShareStructure() {
    return shareStructure;
  }

  public void setShareStructure(List<ShareStructureObject> shareStructure) {
    this.shareStructure = shareStructure;
  }


  public OrganisationDataObject startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public OrganisationDataObject status(CodeDescription status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CodeDescription getStatus() {
    return status;
  }

  public void setStatus(CodeDescription status) {
    this.status = status;
  }


  public OrganisationDataObject subclass(CodeDescription subclass) {
    this.subclass = subclass;
    return this;
  }

  /**
   * Get subclass
   * @return subclass
   */
  @javax.annotation.Nullable
  public CodeDescription getSubclass() {
    return subclass;
  }

  public void setSubclass(CodeDescription subclass) {
    this.subclass = subclass;
  }


  public OrganisationDataObject type(CodeDescription type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CodeDescription getType() {
    return type;
  }

  public void setType(CodeDescription type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganisationDataObject organisationDataObject = (OrganisationDataObject) o;
    return Objects.equals(this.adverseCreditDataPresent, organisationDataObject.adverseCreditDataPresent) &&
        Objects.equals(this.propertyClass, organisationDataObject.propertyClass) &&
        Objects.equals(this.disclosingEntityIndicator, organisationDataObject.disclosingEntityIndicator) &&
        Objects.equals(this.includesNonBeneficiallyHeld, organisationDataObject.includesNonBeneficiallyHeld) &&
        Objects.equals(this.kycCustomerType, organisationDataObject.kycCustomerType) &&
        Objects.equals(this.lastCheckDate, organisationDataObject.lastCheckDate) &&
        Objects.equals(this.ownershipResolved, organisationDataObject.ownershipResolved) &&
        Objects.equals(this.registeredName, organisationDataObject.registeredName) &&
        Objects.equals(this.registration, organisationDataObject.registration) &&
        Objects.equals(this.shareStructure, organisationDataObject.shareStructure) &&
        Objects.equals(this.startDate, organisationDataObject.startDate) &&
        Objects.equals(this.status, organisationDataObject.status) &&
        Objects.equals(this.subclass, organisationDataObject.subclass) &&
        Objects.equals(this.type, organisationDataObject.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adverseCreditDataPresent, propertyClass, disclosingEntityIndicator, includesNonBeneficiallyHeld, kycCustomerType, lastCheckDate, ownershipResolved, registeredName, registration, shareStructure, startDate, status, subclass, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganisationDataObject {\n");
    sb.append("    adverseCreditDataPresent: ").append(toIndentedString(adverseCreditDataPresent)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    disclosingEntityIndicator: ").append(toIndentedString(disclosingEntityIndicator)).append("\n");
    sb.append("    includesNonBeneficiallyHeld: ").append(toIndentedString(includesNonBeneficiallyHeld)).append("\n");
    sb.append("    kycCustomerType: ").append(toIndentedString(kycCustomerType)).append("\n");
    sb.append("    lastCheckDate: ").append(toIndentedString(lastCheckDate)).append("\n");
    sb.append("    ownershipResolved: ").append(toIndentedString(ownershipResolved)).append("\n");
    sb.append("    registeredName: ").append(toIndentedString(registeredName)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    shareStructure: ").append(toIndentedString(shareStructure)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subclass: ").append(toIndentedString(subclass)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adverseCreditDataPresent");
    openapiFields.add("class");
    openapiFields.add("disclosingEntityIndicator");
    openapiFields.add("includesNonBeneficiallyHeld");
    openapiFields.add("kycCustomerType");
    openapiFields.add("lastCheckDate");
    openapiFields.add("ownershipResolved");
    openapiFields.add("registeredName");
    openapiFields.add("registration");
    openapiFields.add("shareStructure");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("subclass");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganisationDataObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganisationDataObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganisationDataObject is not found in the empty JSON string", OrganisationDataObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganisationDataObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganisationDataObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `class`
      if (jsonObj.get("class") != null && !jsonObj.get("class").isJsonNull()) {
        CodeDescription.validateJsonElement(jsonObj.get("class"));
      }
      if ((jsonObj.get("kycCustomerType") != null && !jsonObj.get("kycCustomerType").isJsonNull()) && !jsonObj.get("kycCustomerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kycCustomerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kycCustomerType").toString()));
      }
      if ((jsonObj.get("registeredName") != null && !jsonObj.get("registeredName").isJsonNull()) && !jsonObj.get("registeredName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registeredName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registeredName").toString()));
      }
      // validate the optional field `registration`
      if (jsonObj.get("registration") != null && !jsonObj.get("registration").isJsonNull()) {
        OrganisationDataObjectRegistration.validateJsonElement(jsonObj.get("registration"));
      }
      if (jsonObj.get("shareStructure") != null && !jsonObj.get("shareStructure").isJsonNull()) {
        JsonArray jsonArrayshareStructure = jsonObj.getAsJsonArray("shareStructure");
        if (jsonArrayshareStructure != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareStructure").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareStructure` to be an array in the JSON string but got `%s`", jsonObj.get("shareStructure").toString()));
          }

          // validate the optional field `shareStructure` (array)
          for (int i = 0; i < jsonArrayshareStructure.size(); i++) {
            ShareStructureObject.validateJsonElement(jsonArrayshareStructure.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CodeDescription.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `subclass`
      if (jsonObj.get("subclass") != null && !jsonObj.get("subclass").isJsonNull()) {
        CodeDescription.validateJsonElement(jsonObj.get("subclass"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CodeDescription.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganisationDataObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganisationDataObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganisationDataObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganisationDataObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganisationDataObject>() {
           @Override
           public void write(JsonWriter out, OrganisationDataObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganisationDataObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganisationDataObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganisationDataObject
   * @throws IOException if the JSON string is invalid with respect to OrganisationDataObject
   */
  public static OrganisationDataObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganisationDataObject.class);
  }

  /**
   * Convert an instance of OrganisationDataObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

