/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BusinessReportResultObject;
import org.openapitools.client.model.EntityFlagObject;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.OrganisationCheckResultObject;
import org.openapitools.client.model.OwnershipQueryResultObject;
import org.openapitools.client.model.UBOResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of an /business/ownership/query call retrieved via GET /retrieve/response/{requestId} after you receive a notification that the result is ready. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganisationCheckResponseObject {
  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<EntityFlagObject> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANISATION_CHECK_ID = "organisationCheckId";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_CHECK_ID)
  private UUID organisationCheckId;

  public static final String SERIALIZED_NAME_ORGANISATION_CHECK_RESULT = "organisationCheckResult";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_CHECK_RESULT)
  private OrganisationCheckResultObject organisationCheckResult;

  public static final String SERIALIZED_NAME_OWNERSHIP_CHECK_DATE = "ownershipCheckDate";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_CHECK_DATE)
  private OffsetDateTime ownershipCheckDate;

  public static final String SERIALIZED_NAME_OWNERSHIP_CHECK_ID = "ownershipCheckId";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_CHECK_ID)
  private UUID ownershipCheckId;

  public static final String SERIALIZED_NAME_OWNERSHIP_QUERY_ERROR = "ownershipQueryError";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_QUERY_ERROR)
  private ErrorObject ownershipQueryError;

  public static final String SERIALIZED_NAME_OWNERSHIP_QUERY_RESULT = "ownershipQueryResult";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_QUERY_RESULT)
  private OwnershipQueryResultObject ownershipQueryResult;

  public static final String SERIALIZED_NAME_REPORT_ERROR = "reportError";
  @SerializedName(SERIALIZED_NAME_REPORT_ERROR)
  private ErrorObject reportError;

  public static final String SERIALIZED_NAME_REPORT_RESULT = "reportResult";
  @SerializedName(SERIALIZED_NAME_REPORT_RESULT)
  private BusinessReportResultObject reportResult;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_UBO_RESPONSE = "uboResponse";
  @SerializedName(SERIALIZED_NAME_UBO_RESPONSE)
  private UBOResponse uboResponse;

  public OrganisationCheckResponseObject() {
  }

  public OrganisationCheckResponseObject flags(List<EntityFlagObject> flags) {
    this.flags = flags;
    return this;
  }

  public OrganisationCheckResponseObject addFlagsItem(EntityFlagObject flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * Used to set additional information flags for this response. 
   * @return flags
   */
  @javax.annotation.Nullable
  public List<EntityFlagObject> getFlags() {
    return flags;
  }

  public void setFlags(List<EntityFlagObject> flags) {
    this.flags = flags;
  }


  public OrganisationCheckResponseObject organisationCheckId(UUID organisationCheckId) {
    this.organisationCheckId = organisationCheckId;
    return this;
  }

  /**
   * Batch identifier for the KYC/AML check results if any. 
   * @return organisationCheckId
   */
  @javax.annotation.Nullable
  public UUID getOrganisationCheckId() {
    return organisationCheckId;
  }

  public void setOrganisationCheckId(UUID organisationCheckId) {
    this.organisationCheckId = organisationCheckId;
  }


  public OrganisationCheckResponseObject organisationCheckResult(OrganisationCheckResultObject organisationCheckResult) {
    this.organisationCheckResult = organisationCheckResult;
    return this;
  }

  /**
   * Get organisationCheckResult
   * @return organisationCheckResult
   */
  @javax.annotation.Nullable
  public OrganisationCheckResultObject getOrganisationCheckResult() {
    return organisationCheckResult;
  }

  public void setOrganisationCheckResult(OrganisationCheckResultObject organisationCheckResult) {
    this.organisationCheckResult = organisationCheckResult;
  }


  public OrganisationCheckResponseObject ownershipCheckDate(OffsetDateTime ownershipCheckDate) {
    this.ownershipCheckDate = ownershipCheckDate;
    return this;
  }

  /**
   * If an ownership result is provided in this response then this is the date and time the service provided that result. 
   * @return ownershipCheckDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOwnershipCheckDate() {
    return ownershipCheckDate;
  }

  public void setOwnershipCheckDate(OffsetDateTime ownershipCheckDate) {
    this.ownershipCheckDate = ownershipCheckDate;
  }


  public OrganisationCheckResponseObject ownershipCheckId(UUID ownershipCheckId) {
    this.ownershipCheckId = ownershipCheckId;
    return this;
  }

  /**
   * Unique identifier for the ownership check. 
   * @return ownershipCheckId
   */
  @javax.annotation.Nullable
  public UUID getOwnershipCheckId() {
    return ownershipCheckId;
  }

  public void setOwnershipCheckId(UUID ownershipCheckId) {
    this.ownershipCheckId = ownershipCheckId;
  }


  public OrganisationCheckResponseObject ownershipQueryError(ErrorObject ownershipQueryError) {
    this.ownershipQueryError = ownershipQueryError;
    return this;
  }

  /**
   * Get ownershipQueryError
   * @return ownershipQueryError
   */
  @javax.annotation.Nullable
  public ErrorObject getOwnershipQueryError() {
    return ownershipQueryError;
  }

  public void setOwnershipQueryError(ErrorObject ownershipQueryError) {
    this.ownershipQueryError = ownershipQueryError;
  }


  public OrganisationCheckResponseObject ownershipQueryResult(OwnershipQueryResultObject ownershipQueryResult) {
    this.ownershipQueryResult = ownershipQueryResult;
    return this;
  }

  /**
   * Get ownershipQueryResult
   * @return ownershipQueryResult
   */
  @javax.annotation.Nullable
  public OwnershipQueryResultObject getOwnershipQueryResult() {
    return ownershipQueryResult;
  }

  public void setOwnershipQueryResult(OwnershipQueryResultObject ownershipQueryResult) {
    this.ownershipQueryResult = ownershipQueryResult;
  }


  public OrganisationCheckResponseObject reportError(ErrorObject reportError) {
    this.reportError = reportError;
    return this;
  }

  /**
   * Get reportError
   * @return reportError
   */
  @javax.annotation.Nullable
  public ErrorObject getReportError() {
    return reportError;
  }

  public void setReportError(ErrorObject reportError) {
    this.reportError = reportError;
  }


  public OrganisationCheckResponseObject reportResult(BusinessReportResultObject reportResult) {
    this.reportResult = reportResult;
    return this;
  }

  /**
   * Get reportResult
   * @return reportResult
   */
  @javax.annotation.Nullable
  public BusinessReportResultObject getReportResult() {
    return reportResult;
  }

  public void setReportResult(BusinessReportResultObject reportResult) {
    this.reportResult = reportResult;
  }


  public OrganisationCheckResponseObject requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public OrganisationCheckResponseObject uboResponse(UBOResponse uboResponse) {
    this.uboResponse = uboResponse;
    return this;
  }

  /**
   * Get uboResponse
   * @return uboResponse
   */
  @javax.annotation.Nullable
  public UBOResponse getUboResponse() {
    return uboResponse;
  }

  public void setUboResponse(UBOResponse uboResponse) {
    this.uboResponse = uboResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganisationCheckResponseObject organisationCheckResponseObject = (OrganisationCheckResponseObject) o;
    return Objects.equals(this.flags, organisationCheckResponseObject.flags) &&
        Objects.equals(this.organisationCheckId, organisationCheckResponseObject.organisationCheckId) &&
        Objects.equals(this.organisationCheckResult, organisationCheckResponseObject.organisationCheckResult) &&
        Objects.equals(this.ownershipCheckDate, organisationCheckResponseObject.ownershipCheckDate) &&
        Objects.equals(this.ownershipCheckId, organisationCheckResponseObject.ownershipCheckId) &&
        Objects.equals(this.ownershipQueryError, organisationCheckResponseObject.ownershipQueryError) &&
        Objects.equals(this.ownershipQueryResult, organisationCheckResponseObject.ownershipQueryResult) &&
        Objects.equals(this.reportError, organisationCheckResponseObject.reportError) &&
        Objects.equals(this.reportResult, organisationCheckResponseObject.reportResult) &&
        Objects.equals(this.requestId, organisationCheckResponseObject.requestId) &&
        Objects.equals(this.uboResponse, organisationCheckResponseObject.uboResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flags, organisationCheckId, organisationCheckResult, ownershipCheckDate, ownershipCheckId, ownershipQueryError, ownershipQueryResult, reportError, reportResult, requestId, uboResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganisationCheckResponseObject {\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    organisationCheckId: ").append(toIndentedString(organisationCheckId)).append("\n");
    sb.append("    organisationCheckResult: ").append(toIndentedString(organisationCheckResult)).append("\n");
    sb.append("    ownershipCheckDate: ").append(toIndentedString(ownershipCheckDate)).append("\n");
    sb.append("    ownershipCheckId: ").append(toIndentedString(ownershipCheckId)).append("\n");
    sb.append("    ownershipQueryError: ").append(toIndentedString(ownershipQueryError)).append("\n");
    sb.append("    ownershipQueryResult: ").append(toIndentedString(ownershipQueryResult)).append("\n");
    sb.append("    reportError: ").append(toIndentedString(reportError)).append("\n");
    sb.append("    reportResult: ").append(toIndentedString(reportResult)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    uboResponse: ").append(toIndentedString(uboResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flags");
    openapiFields.add("organisationCheckId");
    openapiFields.add("organisationCheckResult");
    openapiFields.add("ownershipCheckDate");
    openapiFields.add("ownershipCheckId");
    openapiFields.add("ownershipQueryError");
    openapiFields.add("ownershipQueryResult");
    openapiFields.add("reportError");
    openapiFields.add("reportResult");
    openapiFields.add("requestId");
    openapiFields.add("uboResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganisationCheckResponseObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganisationCheckResponseObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganisationCheckResponseObject is not found in the empty JSON string", OrganisationCheckResponseObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganisationCheckResponseObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganisationCheckResponseObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) {
        JsonArray jsonArrayflags = jsonObj.getAsJsonArray("flags");
        if (jsonArrayflags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
          }

          // validate the optional field `flags` (array)
          for (int i = 0; i < jsonArrayflags.size(); i++) {
            EntityFlagObject.validateJsonElement(jsonArrayflags.get(i));
          };
        }
      }
      if ((jsonObj.get("organisationCheckId") != null && !jsonObj.get("organisationCheckId").isJsonNull()) && !jsonObj.get("organisationCheckId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationCheckId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationCheckId").toString()));
      }
      // validate the optional field `organisationCheckResult`
      if (jsonObj.get("organisationCheckResult") != null && !jsonObj.get("organisationCheckResult").isJsonNull()) {
        OrganisationCheckResultObject.validateJsonElement(jsonObj.get("organisationCheckResult"));
      }
      if ((jsonObj.get("ownershipCheckId") != null && !jsonObj.get("ownershipCheckId").isJsonNull()) && !jsonObj.get("ownershipCheckId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipCheckId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipCheckId").toString()));
      }
      // validate the optional field `ownershipQueryError`
      if (jsonObj.get("ownershipQueryError") != null && !jsonObj.get("ownershipQueryError").isJsonNull()) {
        ErrorObject.validateJsonElement(jsonObj.get("ownershipQueryError"));
      }
      // validate the optional field `ownershipQueryResult`
      if (jsonObj.get("ownershipQueryResult") != null && !jsonObj.get("ownershipQueryResult").isJsonNull()) {
        OwnershipQueryResultObject.validateJsonElement(jsonObj.get("ownershipQueryResult"));
      }
      // validate the optional field `reportError`
      if (jsonObj.get("reportError") != null && !jsonObj.get("reportError").isJsonNull()) {
        ErrorObject.validateJsonElement(jsonObj.get("reportError"));
      }
      // validate the optional field `reportResult`
      if (jsonObj.get("reportResult") != null && !jsonObj.get("reportResult").isJsonNull()) {
        BusinessReportResultObject.validateJsonElement(jsonObj.get("reportResult"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `uboResponse`
      if (jsonObj.get("uboResponse") != null && !jsonObj.get("uboResponse").isJsonNull()) {
        UBOResponse.validateJsonElement(jsonObj.get("uboResponse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganisationCheckResponseObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganisationCheckResponseObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganisationCheckResponseObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganisationCheckResponseObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganisationCheckResponseObject>() {
           @Override
           public void write(JsonWriter out, OrganisationCheckResponseObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganisationCheckResponseObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganisationCheckResponseObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganisationCheckResponseObject
   * @throws IOException if the JSON string is invalid with respect to OrganisationCheckResponseObject
   */
  public static OrganisationCheckResponseObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganisationCheckResponseObject.class);
  }

  /**
   * Convert an instance of OrganisationCheckResponseObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

