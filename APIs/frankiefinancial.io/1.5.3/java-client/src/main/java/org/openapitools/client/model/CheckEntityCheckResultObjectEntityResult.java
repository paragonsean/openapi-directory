/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AMLResultSet;
import org.openapitools.client.model.AddressCheckResultObject;
import org.openapitools.client.model.BackgroundCheckResultObject;
import org.openapitools.client.model.DOBCheckResultObject;
import org.openapitools.client.model.GenderCheckResultObject;
import org.openapitools.client.model.IdentityDocumentCheckResultObject;
import org.openapitools.client.model.PersonalNameCheckResultObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This will hold all of the check results that were performed against the 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckEntityCheckResultObjectEntityResult {
  public static final String SERIALIZED_NAME_ADDRESSES_CHECK = "addressesCheck";
  @SerializedName(SERIALIZED_NAME_ADDRESSES_CHECK)
  private List<AddressCheckResultObject> addressesCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADVERSE_MEDIA_CHECK = "adverseMediaCheck";
  @SerializedName(SERIALIZED_NAME_ADVERSE_MEDIA_CHECK)
  private List<BackgroundCheckResultObject> adverseMediaCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_AML_RESULT_SETS = "amlResultSets";
  @SerializedName(SERIALIZED_NAME_AML_RESULT_SETS)
  private List<AMLResultSet> amlResultSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH_CHECK = "dateOfBirthCheck";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH_CHECK)
  private DOBCheckResultObject dateOfBirthCheck;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_GENDER_CHECK = "genderCheck";
  @SerializedName(SERIALIZED_NAME_GENDER_CHECK)
  private GenderCheckResultObject genderCheck;

  public static final String SERIALIZED_NAME_IDENTITY_DOCS_CHECK = "identityDocsCheck";
  @SerializedName(SERIALIZED_NAME_IDENTITY_DOCS_CHECK)
  private List<IdentityDocumentCheckResultObject> identityDocsCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME_CHECK = "nameCheck";
  @SerializedName(SERIALIZED_NAME_NAME_CHECK)
  private PersonalNameCheckResultObject nameCheck;

  public static final String SERIALIZED_NAME_PEP_CHECK = "pepCheck";
  @SerializedName(SERIALIZED_NAME_PEP_CHECK)
  private List<BackgroundCheckResultObject> pepCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_SANCTIONS_CHECK = "sanctionsCheck";
  @SerializedName(SERIALIZED_NAME_SANCTIONS_CHECK)
  private List<BackgroundCheckResultObject> sanctionsCheck = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHLIST_CHECK = "watchlistCheck";
  @SerializedName(SERIALIZED_NAME_WATCHLIST_CHECK)
  private List<BackgroundCheckResultObject> watchlistCheck = new ArrayList<>();

  public CheckEntityCheckResultObjectEntityResult() {
  }

  public CheckEntityCheckResultObjectEntityResult addressesCheck(List<AddressCheckResultObject> addressesCheck) {
    this.addressesCheck = addressesCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addAddressesCheckItem(AddressCheckResultObject addressesCheckItem) {
    if (this.addressesCheck == null) {
      this.addressesCheck = new ArrayList<>();
    }
    this.addressesCheck.add(addressesCheckItem);
    return this;
  }

  /**
   * Collection of address objects.
   * @return addressesCheck
   */
  @javax.annotation.Nullable
  public List<AddressCheckResultObject> getAddressesCheck() {
    return addressesCheck;
  }

  public void setAddressesCheck(List<AddressCheckResultObject> addressesCheck) {
    this.addressesCheck = addressesCheck;
  }


  public CheckEntityCheckResultObjectEntityResult adverseMediaCheck(List<BackgroundCheckResultObject> adverseMediaCheck) {
    this.adverseMediaCheck = adverseMediaCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addAdverseMediaCheckItem(BackgroundCheckResultObject adverseMediaCheckItem) {
    if (this.adverseMediaCheck == null) {
      this.adverseMediaCheck = new ArrayList<>();
    }
    this.adverseMediaCheck.add(adverseMediaCheckItem);
    return this;
  }

  /**
   * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being found in any adverse media  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
   * @return adverseMediaCheck
   */
  @javax.annotation.Nullable
  public List<BackgroundCheckResultObject> getAdverseMediaCheck() {
    return adverseMediaCheck;
  }

  public void setAdverseMediaCheck(List<BackgroundCheckResultObject> adverseMediaCheck) {
    this.adverseMediaCheck = adverseMediaCheck;
  }


  public CheckEntityCheckResultObjectEntityResult amlResultSets(List<AMLResultSet> amlResultSets) {
    this.amlResultSets = amlResultSets;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addAmlResultSetsItem(AMLResultSet amlResultSetsItem) {
    if (this.amlResultSets == null) {
      this.amlResultSets = new ArrayList<>();
    }
    this.amlResultSets.add(amlResultSetsItem);
    return this;
  }

  /**
   * An array of Collections of PEP/Sanctions/WL/Media objects, as AML providers can return multiple results 
   * @return amlResultSets
   */
  @javax.annotation.Nullable
  public List<AMLResultSet> getAmlResultSets() {
    return amlResultSets;
  }

  public void setAmlResultSets(List<AMLResultSet> amlResultSets) {
    this.amlResultSets = amlResultSets;
  }


  public CheckEntityCheckResultObjectEntityResult dateOfBirthCheck(DOBCheckResultObject dateOfBirthCheck) {
    this.dateOfBirthCheck = dateOfBirthCheck;
    return this;
  }

  /**
   * Get dateOfBirthCheck
   * @return dateOfBirthCheck
   */
  @javax.annotation.Nullable
  public DOBCheckResultObject getDateOfBirthCheck() {
    return dateOfBirthCheck;
  }

  public void setDateOfBirthCheck(DOBCheckResultObject dateOfBirthCheck) {
    this.dateOfBirthCheck = dateOfBirthCheck;
  }


  public CheckEntityCheckResultObjectEntityResult entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Unique ID for the entity. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public CheckEntityCheckResultObjectEntityResult genderCheck(GenderCheckResultObject genderCheck) {
    this.genderCheck = genderCheck;
    return this;
  }

  /**
   * Get genderCheck
   * @return genderCheck
   */
  @javax.annotation.Nullable
  public GenderCheckResultObject getGenderCheck() {
    return genderCheck;
  }

  public void setGenderCheck(GenderCheckResultObject genderCheck) {
    this.genderCheck = genderCheck;
  }


  public CheckEntityCheckResultObjectEntityResult identityDocsCheck(List<IdentityDocumentCheckResultObject> identityDocsCheck) {
    this.identityDocsCheck = identityDocsCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addIdentityDocsCheckItem(IdentityDocumentCheckResultObject identityDocsCheckItem) {
    if (this.identityDocsCheck == null) {
      this.identityDocsCheck = new ArrayList<>();
    }
    this.identityDocsCheck.add(identityDocsCheckItem);
    return this;
  }

  /**
   * Collection of identity documents (photos, scans, selfies, etc), and their check results
   * @return identityDocsCheck
   */
  @javax.annotation.Nullable
  public List<IdentityDocumentCheckResultObject> getIdentityDocsCheck() {
    return identityDocsCheck;
  }

  public void setIdentityDocsCheck(List<IdentityDocumentCheckResultObject> identityDocsCheck) {
    this.identityDocsCheck = identityDocsCheck;
  }


  public CheckEntityCheckResultObjectEntityResult nameCheck(PersonalNameCheckResultObject nameCheck) {
    this.nameCheck = nameCheck;
    return this;
  }

  /**
   * Get nameCheck
   * @return nameCheck
   */
  @javax.annotation.Nullable
  public PersonalNameCheckResultObject getNameCheck() {
    return nameCheck;
  }

  public void setNameCheck(PersonalNameCheckResultObject nameCheck) {
    this.nameCheck = nameCheck;
  }


  public CheckEntityCheckResultObjectEntityResult pepCheck(List<BackgroundCheckResultObject> pepCheck) {
    this.pepCheck = pepCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addPepCheckItem(BackgroundCheckResultObject pepCheckItem) {
    if (this.pepCheck == null) {
      this.pepCheck = new ArrayList<>();
    }
    this.pepCheck.add(pepCheckItem);
    return this;
  }

  /**
   * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being a Politically Exposed Person  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
   * @return pepCheck
   */
  @javax.annotation.Nullable
  public List<BackgroundCheckResultObject> getPepCheck() {
    return pepCheck;
  }

  public void setPepCheck(List<BackgroundCheckResultObject> pepCheck) {
    this.pepCheck = pepCheck;
  }


  public CheckEntityCheckResultObjectEntityResult sanctionsCheck(List<BackgroundCheckResultObject> sanctionsCheck) {
    this.sanctionsCheck = sanctionsCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addSanctionsCheckItem(BackgroundCheckResultObject sanctionsCheckItem) {
    if (this.sanctionsCheck == null) {
      this.sanctionsCheck = new ArrayList<>();
    }
    this.sanctionsCheck.add(sanctionsCheckItem);
    return this;
  }

  /**
   * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a sanctions list  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
   * @return sanctionsCheck
   */
  @javax.annotation.Nullable
  public List<BackgroundCheckResultObject> getSanctionsCheck() {
    return sanctionsCheck;
  }

  public void setSanctionsCheck(List<BackgroundCheckResultObject> sanctionsCheck) {
    this.sanctionsCheck = sanctionsCheck;
  }


  public CheckEntityCheckResultObjectEntityResult watchlistCheck(List<BackgroundCheckResultObject> watchlistCheck) {
    this.watchlistCheck = watchlistCheck;
    return this;
  }

  public CheckEntityCheckResultObjectEntityResult addWatchlistCheckItem(BackgroundCheckResultObject watchlistCheckItem) {
    if (this.watchlistCheck == null) {
      this.watchlistCheck = new ArrayList<>();
    }
    this.watchlistCheck.add(watchlistCheckItem);
    return this;
  }

  /**
   * !!!!! DEPRECATED !!!!! Please use the multi-result AMLResultSets structure instead.  Note: This single check result structure will be retired in v1.3 !!!!! DEPRECATED !!!!!  Collection of check results for the entity being on a watchlist  An array sorted by type, then reverse chronological order of some/all background checks done on this entity. Older checks may have been previously done by you or another institution, and if so, these will be listed and appropriately anonymised/obfuscated. 
   * @return watchlistCheck
   */
  @javax.annotation.Nullable
  public List<BackgroundCheckResultObject> getWatchlistCheck() {
    return watchlistCheck;
  }

  public void setWatchlistCheck(List<BackgroundCheckResultObject> watchlistCheck) {
    this.watchlistCheck = watchlistCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckEntityCheckResultObjectEntityResult checkEntityCheckResultObjectEntityResult = (CheckEntityCheckResultObjectEntityResult) o;
    return Objects.equals(this.addressesCheck, checkEntityCheckResultObjectEntityResult.addressesCheck) &&
        Objects.equals(this.adverseMediaCheck, checkEntityCheckResultObjectEntityResult.adverseMediaCheck) &&
        Objects.equals(this.amlResultSets, checkEntityCheckResultObjectEntityResult.amlResultSets) &&
        Objects.equals(this.dateOfBirthCheck, checkEntityCheckResultObjectEntityResult.dateOfBirthCheck) &&
        Objects.equals(this.entityId, checkEntityCheckResultObjectEntityResult.entityId) &&
        Objects.equals(this.genderCheck, checkEntityCheckResultObjectEntityResult.genderCheck) &&
        Objects.equals(this.identityDocsCheck, checkEntityCheckResultObjectEntityResult.identityDocsCheck) &&
        Objects.equals(this.nameCheck, checkEntityCheckResultObjectEntityResult.nameCheck) &&
        Objects.equals(this.pepCheck, checkEntityCheckResultObjectEntityResult.pepCheck) &&
        Objects.equals(this.sanctionsCheck, checkEntityCheckResultObjectEntityResult.sanctionsCheck) &&
        Objects.equals(this.watchlistCheck, checkEntityCheckResultObjectEntityResult.watchlistCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressesCheck, adverseMediaCheck, amlResultSets, dateOfBirthCheck, entityId, genderCheck, identityDocsCheck, nameCheck, pepCheck, sanctionsCheck, watchlistCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckEntityCheckResultObjectEntityResult {\n");
    sb.append("    addressesCheck: ").append(toIndentedString(addressesCheck)).append("\n");
    sb.append("    adverseMediaCheck: ").append(toIndentedString(adverseMediaCheck)).append("\n");
    sb.append("    amlResultSets: ").append(toIndentedString(amlResultSets)).append("\n");
    sb.append("    dateOfBirthCheck: ").append(toIndentedString(dateOfBirthCheck)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    genderCheck: ").append(toIndentedString(genderCheck)).append("\n");
    sb.append("    identityDocsCheck: ").append(toIndentedString(identityDocsCheck)).append("\n");
    sb.append("    nameCheck: ").append(toIndentedString(nameCheck)).append("\n");
    sb.append("    pepCheck: ").append(toIndentedString(pepCheck)).append("\n");
    sb.append("    sanctionsCheck: ").append(toIndentedString(sanctionsCheck)).append("\n");
    sb.append("    watchlistCheck: ").append(toIndentedString(watchlistCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressesCheck");
    openapiFields.add("adverseMediaCheck");
    openapiFields.add("amlResultSets");
    openapiFields.add("dateOfBirthCheck");
    openapiFields.add("entityId");
    openapiFields.add("genderCheck");
    openapiFields.add("identityDocsCheck");
    openapiFields.add("nameCheck");
    openapiFields.add("pepCheck");
    openapiFields.add("sanctionsCheck");
    openapiFields.add("watchlistCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckEntityCheckResultObjectEntityResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckEntityCheckResultObjectEntityResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckEntityCheckResultObjectEntityResult is not found in the empty JSON string", CheckEntityCheckResultObjectEntityResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckEntityCheckResultObjectEntityResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckEntityCheckResultObjectEntityResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addressesCheck") != null && !jsonObj.get("addressesCheck").isJsonNull()) {
        JsonArray jsonArrayaddressesCheck = jsonObj.getAsJsonArray("addressesCheck");
        if (jsonArrayaddressesCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressesCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressesCheck` to be an array in the JSON string but got `%s`", jsonObj.get("addressesCheck").toString()));
          }

          // validate the optional field `addressesCheck` (array)
          for (int i = 0; i < jsonArrayaddressesCheck.size(); i++) {
            AddressCheckResultObject.validateJsonElement(jsonArrayaddressesCheck.get(i));
          };
        }
      }
      if (jsonObj.get("adverseMediaCheck") != null && !jsonObj.get("adverseMediaCheck").isJsonNull()) {
        JsonArray jsonArrayadverseMediaCheck = jsonObj.getAsJsonArray("adverseMediaCheck");
        if (jsonArrayadverseMediaCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adverseMediaCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adverseMediaCheck` to be an array in the JSON string but got `%s`", jsonObj.get("adverseMediaCheck").toString()));
          }

          // validate the optional field `adverseMediaCheck` (array)
          for (int i = 0; i < jsonArrayadverseMediaCheck.size(); i++) {
            BackgroundCheckResultObject.validateJsonElement(jsonArrayadverseMediaCheck.get(i));
          };
        }
      }
      if (jsonObj.get("amlResultSets") != null && !jsonObj.get("amlResultSets").isJsonNull()) {
        JsonArray jsonArrayamlResultSets = jsonObj.getAsJsonArray("amlResultSets");
        if (jsonArrayamlResultSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amlResultSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amlResultSets` to be an array in the JSON string but got `%s`", jsonObj.get("amlResultSets").toString()));
          }

          // validate the optional field `amlResultSets` (array)
          for (int i = 0; i < jsonArrayamlResultSets.size(); i++) {
            AMLResultSet.validateJsonElement(jsonArrayamlResultSets.get(i));
          };
        }
      }
      // validate the optional field `dateOfBirthCheck`
      if (jsonObj.get("dateOfBirthCheck") != null && !jsonObj.get("dateOfBirthCheck").isJsonNull()) {
        DOBCheckResultObject.validateJsonElement(jsonObj.get("dateOfBirthCheck"));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      // validate the optional field `genderCheck`
      if (jsonObj.get("genderCheck") != null && !jsonObj.get("genderCheck").isJsonNull()) {
        GenderCheckResultObject.validateJsonElement(jsonObj.get("genderCheck"));
      }
      if (jsonObj.get("identityDocsCheck") != null && !jsonObj.get("identityDocsCheck").isJsonNull()) {
        JsonArray jsonArrayidentityDocsCheck = jsonObj.getAsJsonArray("identityDocsCheck");
        if (jsonArrayidentityDocsCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identityDocsCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identityDocsCheck` to be an array in the JSON string but got `%s`", jsonObj.get("identityDocsCheck").toString()));
          }

          // validate the optional field `identityDocsCheck` (array)
          for (int i = 0; i < jsonArrayidentityDocsCheck.size(); i++) {
            IdentityDocumentCheckResultObject.validateJsonElement(jsonArrayidentityDocsCheck.get(i));
          };
        }
      }
      // validate the optional field `nameCheck`
      if (jsonObj.get("nameCheck") != null && !jsonObj.get("nameCheck").isJsonNull()) {
        PersonalNameCheckResultObject.validateJsonElement(jsonObj.get("nameCheck"));
      }
      if (jsonObj.get("pepCheck") != null && !jsonObj.get("pepCheck").isJsonNull()) {
        JsonArray jsonArraypepCheck = jsonObj.getAsJsonArray("pepCheck");
        if (jsonArraypepCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pepCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pepCheck` to be an array in the JSON string but got `%s`", jsonObj.get("pepCheck").toString()));
          }

          // validate the optional field `pepCheck` (array)
          for (int i = 0; i < jsonArraypepCheck.size(); i++) {
            BackgroundCheckResultObject.validateJsonElement(jsonArraypepCheck.get(i));
          };
        }
      }
      if (jsonObj.get("sanctionsCheck") != null && !jsonObj.get("sanctionsCheck").isJsonNull()) {
        JsonArray jsonArraysanctionsCheck = jsonObj.getAsJsonArray("sanctionsCheck");
        if (jsonArraysanctionsCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sanctionsCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sanctionsCheck` to be an array in the JSON string but got `%s`", jsonObj.get("sanctionsCheck").toString()));
          }

          // validate the optional field `sanctionsCheck` (array)
          for (int i = 0; i < jsonArraysanctionsCheck.size(); i++) {
            BackgroundCheckResultObject.validateJsonElement(jsonArraysanctionsCheck.get(i));
          };
        }
      }
      if (jsonObj.get("watchlistCheck") != null && !jsonObj.get("watchlistCheck").isJsonNull()) {
        JsonArray jsonArraywatchlistCheck = jsonObj.getAsJsonArray("watchlistCheck");
        if (jsonArraywatchlistCheck != null) {
          // ensure the json data is an array
          if (!jsonObj.get("watchlistCheck").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `watchlistCheck` to be an array in the JSON string but got `%s`", jsonObj.get("watchlistCheck").toString()));
          }

          // validate the optional field `watchlistCheck` (array)
          for (int i = 0; i < jsonArraywatchlistCheck.size(); i++) {
            BackgroundCheckResultObject.validateJsonElement(jsonArraywatchlistCheck.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckEntityCheckResultObjectEntityResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckEntityCheckResultObjectEntityResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckEntityCheckResultObjectEntityResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckEntityCheckResultObjectEntityResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckEntityCheckResultObjectEntityResult>() {
           @Override
           public void write(JsonWriter out, CheckEntityCheckResultObjectEntityResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckEntityCheckResultObjectEntityResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckEntityCheckResultObjectEntityResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckEntityCheckResultObjectEntityResult
   * @throws IOException if the JSON string is invalid with respect to CheckEntityCheckResultObjectEntityResult
   */
  public static CheckEntityCheckResultObjectEntityResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckEntityCheckResultObjectEntityResult.class);
  }

  /**
   * Convert an instance of CheckEntityCheckResultObjectEntityResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

