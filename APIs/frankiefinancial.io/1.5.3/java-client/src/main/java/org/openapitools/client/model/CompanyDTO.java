/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayOfAddressDTO;
import org.openapitools.client.model.ArrayOfString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyDTO {
  public static final String SERIALIZED_NAME_ADDRESSES = "Addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private ArrayOfAddressDTO addresses;

  public static final String SERIALIZED_NAME_ALIASES = "Aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private ArrayOfString aliases;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY_I_D = "CompanyID";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D)
  private String companyID;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FUNCTION = "Function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  public static final String SERIALIZED_NAME_LEGAL_FORM = "LegalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  private String legalForm;

  public static final String SERIALIZED_NAME_LEGAL_STATUS = "LegalStatus";
  @SerializedName(SERIALIZED_NAME_LEGAL_STATUS)
  private String legalStatus;

  public static final String SERIALIZED_NAME_MORE_KEY = "MoreKey";
  @SerializedName(SERIALIZED_NAME_MORE_KEY)
  private String moreKey;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICIAL = "Official";
  @SerializedName(SERIALIZED_NAME_OFFICIAL)
  private Boolean official;

  public static final String SERIALIZED_NAME_REGISTRATION_AUTHORITY = "RegistrationAuthority";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_AUTHORITY)
  private String registrationAuthority;

  public static final String SERIALIZED_NAME_REGISTRATION_AUTHORITY_CODE = "RegistrationAuthorityCode";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_AUTHORITY_CODE)
  private String registrationAuthorityCode;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VIRTUAL_I_D = "VirtualID";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_I_D)
  private String virtualID;

  public CompanyDTO() {
  }

  public CompanyDTO addresses(ArrayOfAddressDTO addresses) {
    this.addresses = addresses;
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public ArrayOfAddressDTO getAddresses() {
    return addresses;
  }

  public void setAddresses(ArrayOfAddressDTO addresses) {
    this.addresses = addresses;
  }


  public CompanyDTO aliases(ArrayOfString aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public ArrayOfString getAliases() {
    return aliases;
  }

  public void setAliases(ArrayOfString aliases) {
    this.aliases = aliases;
  }


  public CompanyDTO code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CompanyDTO companyID(String companyID) {
    this.companyID = companyID;
    return this;
  }

  /**
   * Get companyID
   * @return companyID
   */
  @javax.annotation.Nullable
  public String getCompanyID() {
    return companyID;
  }

  public void setCompanyID(String companyID) {
    this.companyID = companyID;
  }


  public CompanyDTO date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public CompanyDTO function(String function) {
    this.function = function;
    return this;
  }

  /**
   * Get function
   * @return function
   */
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public CompanyDTO legalForm(String legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * Get legalForm
   * @return legalForm
   */
  @javax.annotation.Nullable
  public String getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(String legalForm) {
    this.legalForm = legalForm;
  }


  public CompanyDTO legalStatus(String legalStatus) {
    this.legalStatus = legalStatus;
    return this;
  }

  /**
   * Get legalStatus
   * @return legalStatus
   */
  @javax.annotation.Nullable
  public String getLegalStatus() {
    return legalStatus;
  }

  public void setLegalStatus(String legalStatus) {
    this.legalStatus = legalStatus;
  }


  public CompanyDTO moreKey(String moreKey) {
    this.moreKey = moreKey;
    return this;
  }

  /**
   * Get moreKey
   * @return moreKey
   */
  @javax.annotation.Nullable
  public String getMoreKey() {
    return moreKey;
  }

  public void setMoreKey(String moreKey) {
    this.moreKey = moreKey;
  }


  public CompanyDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CompanyDTO official(Boolean official) {
    this.official = official;
    return this;
  }

  /**
   * Get official
   * @return official
   */
  @javax.annotation.Nullable
  public Boolean getOfficial() {
    return official;
  }

  public void setOfficial(Boolean official) {
    this.official = official;
  }


  public CompanyDTO registrationAuthority(String registrationAuthority) {
    this.registrationAuthority = registrationAuthority;
    return this;
  }

  /**
   * Get registrationAuthority
   * @return registrationAuthority
   */
  @javax.annotation.Nullable
  public String getRegistrationAuthority() {
    return registrationAuthority;
  }

  public void setRegistrationAuthority(String registrationAuthority) {
    this.registrationAuthority = registrationAuthority;
  }


  public CompanyDTO registrationAuthorityCode(String registrationAuthorityCode) {
    this.registrationAuthorityCode = registrationAuthorityCode;
    return this;
  }

  /**
   * Get registrationAuthorityCode
   * @return registrationAuthorityCode
   */
  @javax.annotation.Nullable
  public String getRegistrationAuthorityCode() {
    return registrationAuthorityCode;
  }

  public void setRegistrationAuthorityCode(String registrationAuthorityCode) {
    this.registrationAuthorityCode = registrationAuthorityCode;
  }


  public CompanyDTO source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public CompanyDTO virtualID(String virtualID) {
    this.virtualID = virtualID;
    return this;
  }

  /**
   * Get virtualID
   * @return virtualID
   */
  @javax.annotation.Nullable
  public String getVirtualID() {
    return virtualID;
  }

  public void setVirtualID(String virtualID) {
    this.virtualID = virtualID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyDTO companyDTO = (CompanyDTO) o;
    return Objects.equals(this.addresses, companyDTO.addresses) &&
        Objects.equals(this.aliases, companyDTO.aliases) &&
        Objects.equals(this.code, companyDTO.code) &&
        Objects.equals(this.companyID, companyDTO.companyID) &&
        Objects.equals(this.date, companyDTO.date) &&
        Objects.equals(this.function, companyDTO.function) &&
        Objects.equals(this.legalForm, companyDTO.legalForm) &&
        Objects.equals(this.legalStatus, companyDTO.legalStatus) &&
        Objects.equals(this.moreKey, companyDTO.moreKey) &&
        Objects.equals(this.name, companyDTO.name) &&
        Objects.equals(this.official, companyDTO.official) &&
        Objects.equals(this.registrationAuthority, companyDTO.registrationAuthority) &&
        Objects.equals(this.registrationAuthorityCode, companyDTO.registrationAuthorityCode) &&
        Objects.equals(this.source, companyDTO.source) &&
        Objects.equals(this.virtualID, companyDTO.virtualID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, aliases, code, companyID, date, function, legalForm, legalStatus, moreKey, name, official, registrationAuthority, registrationAuthorityCode, source, virtualID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyDTO {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    companyID: ").append(toIndentedString(companyID)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    legalStatus: ").append(toIndentedString(legalStatus)).append("\n");
    sb.append("    moreKey: ").append(toIndentedString(moreKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    registrationAuthority: ").append(toIndentedString(registrationAuthority)).append("\n");
    sb.append("    registrationAuthorityCode: ").append(toIndentedString(registrationAuthorityCode)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    virtualID: ").append(toIndentedString(virtualID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Addresses");
    openapiFields.add("Aliases");
    openapiFields.add("Code");
    openapiFields.add("CompanyID");
    openapiFields.add("Date");
    openapiFields.add("Function");
    openapiFields.add("LegalForm");
    openapiFields.add("LegalStatus");
    openapiFields.add("MoreKey");
    openapiFields.add("Name");
    openapiFields.add("Official");
    openapiFields.add("RegistrationAuthority");
    openapiFields.add("RegistrationAuthorityCode");
    openapiFields.add("Source");
    openapiFields.add("VirtualID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyDTO is not found in the empty JSON string", CompanyDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Addresses`
      if (jsonObj.get("Addresses") != null && !jsonObj.get("Addresses").isJsonNull()) {
        ArrayOfAddressDTO.validateJsonElement(jsonObj.get("Addresses"));
      }
      // validate the optional field `Aliases`
      if (jsonObj.get("Aliases") != null && !jsonObj.get("Aliases").isJsonNull()) {
        ArrayOfString.validateJsonElement(jsonObj.get("Aliases"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("CompanyID") != null && !jsonObj.get("CompanyID").isJsonNull()) && !jsonObj.get("CompanyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyID").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("Function") != null && !jsonObj.get("Function").isJsonNull()) && !jsonObj.get("Function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Function").toString()));
      }
      if ((jsonObj.get("LegalForm") != null && !jsonObj.get("LegalForm").isJsonNull()) && !jsonObj.get("LegalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalForm").toString()));
      }
      if ((jsonObj.get("LegalStatus") != null && !jsonObj.get("LegalStatus").isJsonNull()) && !jsonObj.get("LegalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalStatus").toString()));
      }
      if ((jsonObj.get("MoreKey") != null && !jsonObj.get("MoreKey").isJsonNull()) && !jsonObj.get("MoreKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MoreKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MoreKey").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RegistrationAuthority") != null && !jsonObj.get("RegistrationAuthority").isJsonNull()) && !jsonObj.get("RegistrationAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationAuthority").toString()));
      }
      if ((jsonObj.get("RegistrationAuthorityCode") != null && !jsonObj.get("RegistrationAuthorityCode").isJsonNull()) && !jsonObj.get("RegistrationAuthorityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationAuthorityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationAuthorityCode").toString()));
      }
      if ((jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) && !jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if ((jsonObj.get("VirtualID") != null && !jsonObj.get("VirtualID").isJsonNull()) && !jsonObj.get("VirtualID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VirtualID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VirtualID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyDTO>() {
           @Override
           public void write(JsonWriter out, CompanyDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyDTO
   * @throws IOException if the JSON string is invalid with respect to CompanyDTO
   */
  public static CompanyDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyDTO.class);
  }

  /**
   * Convert an instance of CompanyDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

