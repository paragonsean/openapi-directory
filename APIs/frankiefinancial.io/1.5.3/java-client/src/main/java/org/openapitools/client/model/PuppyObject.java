/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All valid customers get a puppy. Otherwise, no puppy for you!
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PuppyObject {
  public static final String SERIALIZED_NAME_ASKNICELY1 = "asknicely1";
  @SerializedName(SERIALIZED_NAME_ASKNICELY1)
  private String asknicely1;

  public static final String SERIALIZED_NAME_ASKNICELY2 = "asknicely2";
  @SerializedName(SERIALIZED_NAME_ASKNICELY2)
  private String asknicely2;

  public static final String SERIALIZED_NAME_ASKNICELY3 = "asknicely3";
  @SerializedName(SERIALIZED_NAME_ASKNICELY3)
  private String asknicely3;

  public static final String SERIALIZED_NAME_ASKNICELY4 = "asknicely4";
  @SerializedName(SERIALIZED_NAME_ASKNICELY4)
  private String asknicely4;

  public static final String SERIALIZED_NAME_ASKNICELY5 = "asknicely5";
  @SerializedName(SERIALIZED_NAME_ASKNICELY5)
  private String asknicely5;

  public static final String SERIALIZED_NAME_ASKNICELY6 = "asknicely6";
  @SerializedName(SERIALIZED_NAME_ASKNICELY6)
  private String asknicely6;

  public static final String SERIALIZED_NAME_ASKNICELY7 = "asknicely7";
  @SerializedName(SERIALIZED_NAME_ASKNICELY7)
  private String asknicely7;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private String commit;

  public static final String SERIALIZED_NAME_PUPPY = "puppy";
  @SerializedName(SERIALIZED_NAME_PUPPY)
  private Boolean puppy = true;

  public PuppyObject() {
  }

  public PuppyObject asknicely1(String asknicely1) {
    this.asknicely1 = asknicely1;
    return this;
  }

  /**
   * Get asknicely1
   * @return asknicely1
   */
  @javax.annotation.Nullable
  public String getAsknicely1() {
    return asknicely1;
  }

  public void setAsknicely1(String asknicely1) {
    this.asknicely1 = asknicely1;
  }


  public PuppyObject asknicely2(String asknicely2) {
    this.asknicely2 = asknicely2;
    return this;
  }

  /**
   * Get asknicely2
   * @return asknicely2
   */
  @javax.annotation.Nullable
  public String getAsknicely2() {
    return asknicely2;
  }

  public void setAsknicely2(String asknicely2) {
    this.asknicely2 = asknicely2;
  }


  public PuppyObject asknicely3(String asknicely3) {
    this.asknicely3 = asknicely3;
    return this;
  }

  /**
   * Get asknicely3
   * @return asknicely3
   */
  @javax.annotation.Nullable
  public String getAsknicely3() {
    return asknicely3;
  }

  public void setAsknicely3(String asknicely3) {
    this.asknicely3 = asknicely3;
  }


  public PuppyObject asknicely4(String asknicely4) {
    this.asknicely4 = asknicely4;
    return this;
  }

  /**
   * Get asknicely4
   * @return asknicely4
   */
  @javax.annotation.Nullable
  public String getAsknicely4() {
    return asknicely4;
  }

  public void setAsknicely4(String asknicely4) {
    this.asknicely4 = asknicely4;
  }


  public PuppyObject asknicely5(String asknicely5) {
    this.asknicely5 = asknicely5;
    return this;
  }

  /**
   * Get asknicely5
   * @return asknicely5
   */
  @javax.annotation.Nullable
  public String getAsknicely5() {
    return asknicely5;
  }

  public void setAsknicely5(String asknicely5) {
    this.asknicely5 = asknicely5;
  }


  public PuppyObject asknicely6(String asknicely6) {
    this.asknicely6 = asknicely6;
    return this;
  }

  /**
   * Get asknicely6
   * @return asknicely6
   */
  @javax.annotation.Nullable
  public String getAsknicely6() {
    return asknicely6;
  }

  public void setAsknicely6(String asknicely6) {
    this.asknicely6 = asknicely6;
  }


  public PuppyObject asknicely7(String asknicely7) {
    this.asknicely7 = asknicely7;
    return this;
  }

  /**
   * Get asknicely7
   * @return asknicely7
   */
  @javax.annotation.Nullable
  public String getAsknicely7() {
    return asknicely7;
  }

  public void setAsknicely7(String asknicely7) {
    this.asknicely7 = asknicely7;
  }


  public PuppyObject commit(String commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Server version indication
   * @return commit
   */
  @javax.annotation.Nullable
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }


  public PuppyObject puppy(Boolean puppy) {
    this.puppy = puppy;
    return this;
  }

  /**
   * Get puppy
   * @return puppy
   */
  @javax.annotation.Nonnull
  public Boolean getPuppy() {
    return puppy;
  }

  public void setPuppy(Boolean puppy) {
    this.puppy = puppy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PuppyObject puppyObject = (PuppyObject) o;
    return Objects.equals(this.asknicely1, puppyObject.asknicely1) &&
        Objects.equals(this.asknicely2, puppyObject.asknicely2) &&
        Objects.equals(this.asknicely3, puppyObject.asknicely3) &&
        Objects.equals(this.asknicely4, puppyObject.asknicely4) &&
        Objects.equals(this.asknicely5, puppyObject.asknicely5) &&
        Objects.equals(this.asknicely6, puppyObject.asknicely6) &&
        Objects.equals(this.asknicely7, puppyObject.asknicely7) &&
        Objects.equals(this.commit, puppyObject.commit) &&
        Objects.equals(this.puppy, puppyObject.puppy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asknicely1, asknicely2, asknicely3, asknicely4, asknicely5, asknicely6, asknicely7, commit, puppy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PuppyObject {\n");
    sb.append("    asknicely1: ").append(toIndentedString(asknicely1)).append("\n");
    sb.append("    asknicely2: ").append(toIndentedString(asknicely2)).append("\n");
    sb.append("    asknicely3: ").append(toIndentedString(asknicely3)).append("\n");
    sb.append("    asknicely4: ").append(toIndentedString(asknicely4)).append("\n");
    sb.append("    asknicely5: ").append(toIndentedString(asknicely5)).append("\n");
    sb.append("    asknicely6: ").append(toIndentedString(asknicely6)).append("\n");
    sb.append("    asknicely7: ").append(toIndentedString(asknicely7)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    puppy: ").append(toIndentedString(puppy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asknicely1");
    openapiFields.add("asknicely2");
    openapiFields.add("asknicely3");
    openapiFields.add("asknicely4");
    openapiFields.add("asknicely5");
    openapiFields.add("asknicely6");
    openapiFields.add("asknicely7");
    openapiFields.add("commit");
    openapiFields.add("puppy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("puppy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PuppyObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PuppyObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PuppyObject is not found in the empty JSON string", PuppyObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PuppyObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PuppyObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PuppyObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asknicely1") != null && !jsonObj.get("asknicely1").isJsonNull()) && !jsonObj.get("asknicely1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely1").toString()));
      }
      if ((jsonObj.get("asknicely2") != null && !jsonObj.get("asknicely2").isJsonNull()) && !jsonObj.get("asknicely2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely2").toString()));
      }
      if ((jsonObj.get("asknicely3") != null && !jsonObj.get("asknicely3").isJsonNull()) && !jsonObj.get("asknicely3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely3").toString()));
      }
      if ((jsonObj.get("asknicely4") != null && !jsonObj.get("asknicely4").isJsonNull()) && !jsonObj.get("asknicely4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely4").toString()));
      }
      if ((jsonObj.get("asknicely5") != null && !jsonObj.get("asknicely5").isJsonNull()) && !jsonObj.get("asknicely5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely5").toString()));
      }
      if ((jsonObj.get("asknicely6") != null && !jsonObj.get("asknicely6").isJsonNull()) && !jsonObj.get("asknicely6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely6").toString()));
      }
      if ((jsonObj.get("asknicely7") != null && !jsonObj.get("asknicely7").isJsonNull()) && !jsonObj.get("asknicely7").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asknicely7` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asknicely7").toString()));
      }
      if ((jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) && !jsonObj.get("commit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PuppyObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PuppyObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PuppyObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PuppyObject.class));

       return (TypeAdapter<T>) new TypeAdapter<PuppyObject>() {
           @Override
           public void write(JsonWriter out, PuppyObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PuppyObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PuppyObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PuppyObject
   * @throws IOException if the JSON string is invalid with respect to PuppyObject
   */
  public static PuppyObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PuppyObject.class);
  }

  /**
   * Convert an instance of PuppyObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

