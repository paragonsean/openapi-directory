/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessDetails;
import org.openapitools.client.model.IndividualData;
import org.openapitools.client.model.IssueListItems;
import org.openapitools.client.model.NonIndividualBeneficialOwner;
import org.openapitools.client.model.ScreeningResult;
import org.openapitools.client.model.SuppliedData;
import org.openapitools.client.model.SuppliedDataMatches;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UBOResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UBOResponse {
  public static final String SERIALIZED_NAME_ASIC_SEARCH_TIMESTAMP = "asic_search_timestamp";
  @SerializedName(SERIALIZED_NAME_ASIC_SEARCH_TIMESTAMP)
  private OffsetDateTime asicSearchTimestamp;

  public static final String SERIALIZED_NAME_BUSINESS_DETAILS = "business_details";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DETAILS)
  private BusinessDetails businessDetails;

  public static final String SERIALIZED_NAME_BUSINESS_SCREENING_RESULT = "business_screening_result";
  @SerializedName(SERIALIZED_NAME_BUSINESS_SCREENING_RESULT)
  private ScreeningResult businessScreeningResult;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ISSUES_LIST = "issues_list";
  @SerializedName(SERIALIZED_NAME_ISSUES_LIST)
  private List<IssueListItems> issuesList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NON_INDIVIDUAL_BENEFICIAL_OWNERS = "non_individual_beneficial_owners";
  @SerializedName(SERIALIZED_NAME_NON_INDIVIDUAL_BENEFICIAL_OWNERS)
  private List<NonIndividualBeneficialOwner> nonIndividualBeneficialOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFICEHOLDERS = "officeholders";
  @SerializedName(SERIALIZED_NAME_OFFICEHOLDERS)
  private List<IndividualData> officeholders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPLIED_DATA = "supplied_data";
  @SerializedName(SERIALIZED_NAME_SUPPLIED_DATA)
  private SuppliedData suppliedData;

  public static final String SERIALIZED_NAME_SUPPLIED_DATA_MATCHES = "supplied_data_matches";
  @SerializedName(SERIALIZED_NAME_SUPPLIED_DATA_MATCHES)
  private SuppliedDataMatches suppliedDataMatches;

  public static final String SERIALIZED_NAME_UBO_REPORT = "ubo_report";
  @SerializedName(SERIALIZED_NAME_UBO_REPORT)
  private String uboReport;

  public static final String SERIALIZED_NAME_ULTIMATE_BENEFICIAL_OWNERS = "ultimate_beneficial_owners";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_BENEFICIAL_OWNERS)
  private List<IndividualData> ultimateBeneficialOwners = new ArrayList<>();

  public UBOResponse() {
  }

  public UBOResponse asicSearchTimestamp(OffsetDateTime asicSearchTimestamp) {
    this.asicSearchTimestamp = asicSearchTimestamp;
    return this;
  }

  /**
   * If an ASIC search was conducted, what was the date/time in RFC-3339 format 
   * @return asicSearchTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAsicSearchTimestamp() {
    return asicSearchTimestamp;
  }

  public void setAsicSearchTimestamp(OffsetDateTime asicSearchTimestamp) {
    this.asicSearchTimestamp = asicSearchTimestamp;
  }


  public UBOResponse businessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
    return this;
  }

  /**
   * Get businessDetails
   * @return businessDetails
   */
  @javax.annotation.Nullable
  public BusinessDetails getBusinessDetails() {
    return businessDetails;
  }

  public void setBusinessDetails(BusinessDetails businessDetails) {
    this.businessDetails = businessDetails;
  }


  public UBOResponse businessScreeningResult(ScreeningResult businessScreeningResult) {
    this.businessScreeningResult = businessScreeningResult;
    return this;
  }

  /**
   * Get businessScreeningResult
   * @return businessScreeningResult
   */
  @javax.annotation.Nullable
  public ScreeningResult getBusinessScreeningResult() {
    return businessScreeningResult;
  }

  public void setBusinessScreeningResult(ScreeningResult businessScreeningResult) {
    this.businessScreeningResult = businessScreeningResult;
  }


  public UBOResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Only populated if there was an error whilst trying to initiate the UBO check.  Signifies that no other result data will be supplied 
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public UBOResponse issuesList(List<IssueListItems> issuesList) {
    this.issuesList = issuesList;
    return this;
  }

  public UBOResponse addIssuesListItem(IssueListItems issuesListItem) {
    if (this.issuesList == null) {
      this.issuesList = new ArrayList<>();
    }
    this.issuesList.add(issuesListItem);
    return this;
  }

  /**
   * A list of issues encountered whilst processing the UBO request and subsequent KYC/AML checks. 
   * @return issuesList
   */
  @javax.annotation.Nullable
  public List<IssueListItems> getIssuesList() {
    return issuesList;
  }

  public void setIssuesList(List<IssueListItems> issuesList) {
    this.issuesList = issuesList;
  }


  public UBOResponse nonIndividualBeneficialOwners(List<NonIndividualBeneficialOwner> nonIndividualBeneficialOwners) {
    this.nonIndividualBeneficialOwners = nonIndividualBeneficialOwners;
    return this;
  }

  public UBOResponse addNonIndividualBeneficialOwnersItem(NonIndividualBeneficialOwner nonIndividualBeneficialOwnersItem) {
    if (this.nonIndividualBeneficialOwners == null) {
      this.nonIndividualBeneficialOwners = new ArrayList<>();
    }
    this.nonIndividualBeneficialOwners.add(nonIndividualBeneficialOwnersItem);
    return this;
  }

  /**
   * A list of organisations who have been determined to own a (potentially) beneficial interest the company.  The presence of non_individual_beneficial_owners indicates that not all individual ultimate beneficial owners could be determined.  Examples may include public companies, listed companies, foreign companies, corporate trusts or other entities whose beneficial owners are not readily available. 
   * @return nonIndividualBeneficialOwners
   */
  @javax.annotation.Nullable
  public List<NonIndividualBeneficialOwner> getNonIndividualBeneficialOwners() {
    return nonIndividualBeneficialOwners;
  }

  public void setNonIndividualBeneficialOwners(List<NonIndividualBeneficialOwner> nonIndividualBeneficialOwners) {
    this.nonIndividualBeneficialOwners = nonIndividualBeneficialOwners;
  }


  public UBOResponse officeholders(List<IndividualData> officeholders) {
    this.officeholders = officeholders;
    return this;
  }

  public UBOResponse addOfficeholdersItem(IndividualData officeholdersItem) {
    if (this.officeholders == null) {
      this.officeholders = new ArrayList<>();
    }
    this.officeholders.add(officeholdersItem);
    return this;
  }

  /**
   * A list of individuals who serve as current office holders the company 
   * @return officeholders
   */
  @javax.annotation.Nullable
  public List<IndividualData> getOfficeholders() {
    return officeholders;
  }

  public void setOfficeholders(List<IndividualData> officeholders) {
    this.officeholders = officeholders;
  }


  public UBOResponse suppliedData(SuppliedData suppliedData) {
    this.suppliedData = suppliedData;
    return this;
  }

  /**
   * Get suppliedData
   * @return suppliedData
   */
  @javax.annotation.Nonnull
  public SuppliedData getSuppliedData() {
    return suppliedData;
  }

  public void setSuppliedData(SuppliedData suppliedData) {
    this.suppliedData = suppliedData;
  }


  public UBOResponse suppliedDataMatches(SuppliedDataMatches suppliedDataMatches) {
    this.suppliedDataMatches = suppliedDataMatches;
    return this;
  }

  /**
   * Get suppliedDataMatches
   * @return suppliedDataMatches
   */
  @javax.annotation.Nullable
  public SuppliedDataMatches getSuppliedDataMatches() {
    return suppliedDataMatches;
  }

  public void setSuppliedDataMatches(SuppliedDataMatches suppliedDataMatches) {
    this.suppliedDataMatches = suppliedDataMatches;
  }


  public UBOResponse uboReport(String uboReport) {
    this.uboReport = uboReport;
    return this;
  }

  /**
   * The full URI of the UBO report PDF created as a part of this process (if requested) 
   * @return uboReport
   */
  @javax.annotation.Nullable
  public String getUboReport() {
    return uboReport;
  }

  public void setUboReport(String uboReport) {
    this.uboReport = uboReport;
  }


  public UBOResponse ultimateBeneficialOwners(List<IndividualData> ultimateBeneficialOwners) {
    this.ultimateBeneficialOwners = ultimateBeneficialOwners;
    return this;
  }

  public UBOResponse addUltimateBeneficialOwnersItem(IndividualData ultimateBeneficialOwnersItem) {
    if (this.ultimateBeneficialOwners == null) {
      this.ultimateBeneficialOwners = new ArrayList<>();
    }
    this.ultimateBeneficialOwners.add(ultimateBeneficialOwnersItem);
    return this;
  }

  /**
   * A list of individuals who have been determined to own, either directly or indirectly, 25% or more of the company 
   * @return ultimateBeneficialOwners
   */
  @javax.annotation.Nullable
  public List<IndividualData> getUltimateBeneficialOwners() {
    return ultimateBeneficialOwners;
  }

  public void setUltimateBeneficialOwners(List<IndividualData> ultimateBeneficialOwners) {
    this.ultimateBeneficialOwners = ultimateBeneficialOwners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UBOResponse ubOResponse = (UBOResponse) o;
    return Objects.equals(this.asicSearchTimestamp, ubOResponse.asicSearchTimestamp) &&
        Objects.equals(this.businessDetails, ubOResponse.businessDetails) &&
        Objects.equals(this.businessScreeningResult, ubOResponse.businessScreeningResult) &&
        Objects.equals(this.errorMessage, ubOResponse.errorMessage) &&
        Objects.equals(this.issuesList, ubOResponse.issuesList) &&
        Objects.equals(this.nonIndividualBeneficialOwners, ubOResponse.nonIndividualBeneficialOwners) &&
        Objects.equals(this.officeholders, ubOResponse.officeholders) &&
        Objects.equals(this.suppliedData, ubOResponse.suppliedData) &&
        Objects.equals(this.suppliedDataMatches, ubOResponse.suppliedDataMatches) &&
        Objects.equals(this.uboReport, ubOResponse.uboReport) &&
        Objects.equals(this.ultimateBeneficialOwners, ubOResponse.ultimateBeneficialOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asicSearchTimestamp, businessDetails, businessScreeningResult, errorMessage, issuesList, nonIndividualBeneficialOwners, officeholders, suppliedData, suppliedDataMatches, uboReport, ultimateBeneficialOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UBOResponse {\n");
    sb.append("    asicSearchTimestamp: ").append(toIndentedString(asicSearchTimestamp)).append("\n");
    sb.append("    businessDetails: ").append(toIndentedString(businessDetails)).append("\n");
    sb.append("    businessScreeningResult: ").append(toIndentedString(businessScreeningResult)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    issuesList: ").append(toIndentedString(issuesList)).append("\n");
    sb.append("    nonIndividualBeneficialOwners: ").append(toIndentedString(nonIndividualBeneficialOwners)).append("\n");
    sb.append("    officeholders: ").append(toIndentedString(officeholders)).append("\n");
    sb.append("    suppliedData: ").append(toIndentedString(suppliedData)).append("\n");
    sb.append("    suppliedDataMatches: ").append(toIndentedString(suppliedDataMatches)).append("\n");
    sb.append("    uboReport: ").append(toIndentedString(uboReport)).append("\n");
    sb.append("    ultimateBeneficialOwners: ").append(toIndentedString(ultimateBeneficialOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asic_search_timestamp");
    openapiFields.add("business_details");
    openapiFields.add("business_screening_result");
    openapiFields.add("error_message");
    openapiFields.add("issues_list");
    openapiFields.add("non_individual_beneficial_owners");
    openapiFields.add("officeholders");
    openapiFields.add("supplied_data");
    openapiFields.add("supplied_data_matches");
    openapiFields.add("ubo_report");
    openapiFields.add("ultimate_beneficial_owners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("supplied_data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UBOResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UBOResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UBOResponse is not found in the empty JSON string", UBOResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UBOResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UBOResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UBOResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `business_details`
      if (jsonObj.get("business_details") != null && !jsonObj.get("business_details").isJsonNull()) {
        BusinessDetails.validateJsonElement(jsonObj.get("business_details"));
      }
      // validate the optional field `business_screening_result`
      if (jsonObj.get("business_screening_result") != null && !jsonObj.get("business_screening_result").isJsonNull()) {
        ScreeningResult.validateJsonElement(jsonObj.get("business_screening_result"));
      }
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if (jsonObj.get("issues_list") != null && !jsonObj.get("issues_list").isJsonNull()) {
        JsonArray jsonArrayissuesList = jsonObj.getAsJsonArray("issues_list");
        if (jsonArrayissuesList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues_list` to be an array in the JSON string but got `%s`", jsonObj.get("issues_list").toString()));
          }

          // validate the optional field `issues_list` (array)
          for (int i = 0; i < jsonArrayissuesList.size(); i++) {
            IssueListItems.validateJsonElement(jsonArrayissuesList.get(i));
          };
        }
      }
      if (jsonObj.get("non_individual_beneficial_owners") != null && !jsonObj.get("non_individual_beneficial_owners").isJsonNull()) {
        JsonArray jsonArraynonIndividualBeneficialOwners = jsonObj.getAsJsonArray("non_individual_beneficial_owners");
        if (jsonArraynonIndividualBeneficialOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("non_individual_beneficial_owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `non_individual_beneficial_owners` to be an array in the JSON string but got `%s`", jsonObj.get("non_individual_beneficial_owners").toString()));
          }

          // validate the optional field `non_individual_beneficial_owners` (array)
          for (int i = 0; i < jsonArraynonIndividualBeneficialOwners.size(); i++) {
            NonIndividualBeneficialOwner.validateJsonElement(jsonArraynonIndividualBeneficialOwners.get(i));
          };
        }
      }
      if (jsonObj.get("officeholders") != null && !jsonObj.get("officeholders").isJsonNull()) {
        JsonArray jsonArrayofficeholders = jsonObj.getAsJsonArray("officeholders");
        if (jsonArrayofficeholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("officeholders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `officeholders` to be an array in the JSON string but got `%s`", jsonObj.get("officeholders").toString()));
          }

          // validate the optional field `officeholders` (array)
          for (int i = 0; i < jsonArrayofficeholders.size(); i++) {
            IndividualData.validateJsonElement(jsonArrayofficeholders.get(i));
          };
        }
      }
      // validate the required field `supplied_data`
      SuppliedData.validateJsonElement(jsonObj.get("supplied_data"));
      // validate the optional field `supplied_data_matches`
      if (jsonObj.get("supplied_data_matches") != null && !jsonObj.get("supplied_data_matches").isJsonNull()) {
        SuppliedDataMatches.validateJsonElement(jsonObj.get("supplied_data_matches"));
      }
      if ((jsonObj.get("ubo_report") != null && !jsonObj.get("ubo_report").isJsonNull()) && !jsonObj.get("ubo_report").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ubo_report` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ubo_report").toString()));
      }
      if (jsonObj.get("ultimate_beneficial_owners") != null && !jsonObj.get("ultimate_beneficial_owners").isJsonNull()) {
        JsonArray jsonArrayultimateBeneficialOwners = jsonObj.getAsJsonArray("ultimate_beneficial_owners");
        if (jsonArrayultimateBeneficialOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ultimate_beneficial_owners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ultimate_beneficial_owners` to be an array in the JSON string but got `%s`", jsonObj.get("ultimate_beneficial_owners").toString()));
          }

          // validate the optional field `ultimate_beneficial_owners` (array)
          for (int i = 0; i < jsonArrayultimateBeneficialOwners.size(); i++) {
            IndividualData.validateJsonElement(jsonArrayultimateBeneficialOwners.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UBOResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UBOResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UBOResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UBOResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UBOResponse>() {
           @Override
           public void write(JsonWriter out, UBOResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UBOResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UBOResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UBOResponse
   * @throws IOException if the JSON string is invalid with respect to UBOResponse
   */
  public static UBOResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UBOResponse.class);
  }

  /**
   * Convert an instance of UBOResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

