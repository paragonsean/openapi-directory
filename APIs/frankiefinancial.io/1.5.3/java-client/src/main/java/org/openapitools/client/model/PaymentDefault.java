/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentDefault
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentDefault {
  public static final String SERIALIZED_NAME_ABN = "abn";
  @SerializedName(SERIALIZED_NAME_ABN)
  private String abn;

  public static final String SERIALIZED_NAME_ACCOUNT_ADDITIONAL_ABN = "accountAdditionalAbn";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ADDITIONAL_ABN)
  private String accountAdditionalAbn;

  public static final String SERIALIZED_NAME_ACCOUNT_VERIFIED_DATE = "accountVerifiedDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_VERIFIED_DATE)
  private OffsetDateTime accountVerifiedDate;

  public static final String SERIALIZED_NAME_AMOUNT_OUTSTANDING = "amountOutstanding";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OUTSTANDING)
  private Float amountOutstanding;

  public static final String SERIALIZED_NAME_APPROVED_DATE = "approvedDate";
  @SerializedName(SERIALIZED_NAME_APPROVED_DATE)
  private OffsetDateTime approvedDate;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_DEFAULT_SETTLED = "defaultSettled";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SETTLED)
  private Boolean defaultSettled;

  public static final String SERIALIZED_NAME_DOCTYPE = "doctype";
  @SerializedName(SERIALIZED_NAME_DOCTYPE)
  private String doctype;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private String documentType;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_ORIGINAL_INVOICE_DATE = "originalInvoiceDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_INVOICE_DATE)
  private OffsetDateTime originalInvoiceDate;

  public static final String SERIALIZED_NAME_PART_PAYMENT_MADE = "partPaymentMade";
  @SerializedName(SERIALIZED_NAME_PART_PAYMENT_MADE)
  private Boolean partPaymentMade;

  public static final String SERIALIZED_NAME_PARTPAYMENT = "partpayment";
  @SerializedName(SERIALIZED_NAME_PARTPAYMENT)
  private Boolean partpayment;

  public static final String SERIALIZED_NAME_PAYMENT_DUE_DATE = "paymentDueDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DUE_DATE)
  private OffsetDateTime paymentDueDate;

  public static final String SERIALIZED_NAME_POSTER_ABN = "posterAbn";
  @SerializedName(SERIALIZED_NAME_POSTER_ABN)
  private String posterAbn;

  public static final String SERIALIZED_NAME_POSTER_NAME = "posterName";
  @SerializedName(SERIALIZED_NAME_POSTER_NAME)
  private String posterName;

  public static final String SERIALIZED_NAME_SETTLED = "settled";
  @SerializedName(SERIALIZED_NAME_SETTLED)
  private Boolean settled;

  public static final String SERIALIZED_NAME_UPLOADED_DATE = "uploadedDate";
  @SerializedName(SERIALIZED_NAME_UPLOADED_DATE)
  private OffsetDateTime uploadedDate;

  public PaymentDefault() {
  }

  public PaymentDefault abn(String abn) {
    this.abn = abn;
    return this;
  }

  /**
   * Get abn
   * @return abn
   */
  @javax.annotation.Nullable
  public String getAbn() {
    return abn;
  }

  public void setAbn(String abn) {
    this.abn = abn;
  }


  public PaymentDefault accountAdditionalAbn(String accountAdditionalAbn) {
    this.accountAdditionalAbn = accountAdditionalAbn;
    return this;
  }

  /**
   * Get accountAdditionalAbn
   * @return accountAdditionalAbn
   */
  @javax.annotation.Nullable
  public String getAccountAdditionalAbn() {
    return accountAdditionalAbn;
  }

  public void setAccountAdditionalAbn(String accountAdditionalAbn) {
    this.accountAdditionalAbn = accountAdditionalAbn;
  }


  public PaymentDefault accountVerifiedDate(OffsetDateTime accountVerifiedDate) {
    this.accountVerifiedDate = accountVerifiedDate;
    return this;
  }

  /**
   * Get accountVerifiedDate
   * @return accountVerifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccountVerifiedDate() {
    return accountVerifiedDate;
  }

  public void setAccountVerifiedDate(OffsetDateTime accountVerifiedDate) {
    this.accountVerifiedDate = accountVerifiedDate;
  }


  public PaymentDefault amountOutstanding(Float amountOutstanding) {
    this.amountOutstanding = amountOutstanding;
    return this;
  }

  /**
   * Get amountOutstanding
   * @return amountOutstanding
   */
  @javax.annotation.Nullable
  public Float getAmountOutstanding() {
    return amountOutstanding;
  }

  public void setAmountOutstanding(Float amountOutstanding) {
    this.amountOutstanding = amountOutstanding;
  }


  public PaymentDefault approvedDate(OffsetDateTime approvedDate) {
    this.approvedDate = approvedDate;
    return this;
  }

  /**
   * Get approvedDate
   * @return approvedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovedDate() {
    return approvedDate;
  }

  public void setApprovedDate(OffsetDateTime approvedDate) {
    this.approvedDate = approvedDate;
  }


  public PaymentDefault company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public PaymentDefault defaultSettled(Boolean defaultSettled) {
    this.defaultSettled = defaultSettled;
    return this;
  }

  /**
   * Get defaultSettled
   * @return defaultSettled
   */
  @javax.annotation.Nullable
  public Boolean getDefaultSettled() {
    return defaultSettled;
  }

  public void setDefaultSettled(Boolean defaultSettled) {
    this.defaultSettled = defaultSettled;
  }


  public PaymentDefault doctype(String doctype) {
    this.doctype = doctype;
    return this;
  }

  /**
   * Get doctype
   * @return doctype
   */
  @javax.annotation.Nullable
  public String getDoctype() {
    return doctype;
  }

  public void setDoctype(String doctype) {
    this.doctype = doctype;
  }


  public PaymentDefault documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }


  public PaymentDefault lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public PaymentDefault originalInvoiceDate(OffsetDateTime originalInvoiceDate) {
    this.originalInvoiceDate = originalInvoiceDate;
    return this;
  }

  /**
   * Get originalInvoiceDate
   * @return originalInvoiceDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOriginalInvoiceDate() {
    return originalInvoiceDate;
  }

  public void setOriginalInvoiceDate(OffsetDateTime originalInvoiceDate) {
    this.originalInvoiceDate = originalInvoiceDate;
  }


  public PaymentDefault partPaymentMade(Boolean partPaymentMade) {
    this.partPaymentMade = partPaymentMade;
    return this;
  }

  /**
   * Get partPaymentMade
   * @return partPaymentMade
   */
  @javax.annotation.Nullable
  public Boolean getPartPaymentMade() {
    return partPaymentMade;
  }

  public void setPartPaymentMade(Boolean partPaymentMade) {
    this.partPaymentMade = partPaymentMade;
  }


  public PaymentDefault partpayment(Boolean partpayment) {
    this.partpayment = partpayment;
    return this;
  }

  /**
   * Get partpayment
   * @return partpayment
   */
  @javax.annotation.Nullable
  public Boolean getPartpayment() {
    return partpayment;
  }

  public void setPartpayment(Boolean partpayment) {
    this.partpayment = partpayment;
  }


  public PaymentDefault paymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
    return this;
  }

  /**
   * Get paymentDueDate
   * @return paymentDueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaymentDueDate() {
    return paymentDueDate;
  }

  public void setPaymentDueDate(OffsetDateTime paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
  }


  public PaymentDefault posterAbn(String posterAbn) {
    this.posterAbn = posterAbn;
    return this;
  }

  /**
   * Get posterAbn
   * @return posterAbn
   */
  @javax.annotation.Nullable
  public String getPosterAbn() {
    return posterAbn;
  }

  public void setPosterAbn(String posterAbn) {
    this.posterAbn = posterAbn;
  }


  public PaymentDefault posterName(String posterName) {
    this.posterName = posterName;
    return this;
  }

  /**
   * Get posterName
   * @return posterName
   */
  @javax.annotation.Nullable
  public String getPosterName() {
    return posterName;
  }

  public void setPosterName(String posterName) {
    this.posterName = posterName;
  }


  public PaymentDefault settled(Boolean settled) {
    this.settled = settled;
    return this;
  }

  /**
   * Get settled
   * @return settled
   */
  @javax.annotation.Nullable
  public Boolean getSettled() {
    return settled;
  }

  public void setSettled(Boolean settled) {
    this.settled = settled;
  }


  public PaymentDefault uploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
    return this;
  }

  /**
   * Get uploadedDate
   * @return uploadedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadedDate() {
    return uploadedDate;
  }

  public void setUploadedDate(OffsetDateTime uploadedDate) {
    this.uploadedDate = uploadedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDefault paymentDefault = (PaymentDefault) o;
    return Objects.equals(this.abn, paymentDefault.abn) &&
        Objects.equals(this.accountAdditionalAbn, paymentDefault.accountAdditionalAbn) &&
        Objects.equals(this.accountVerifiedDate, paymentDefault.accountVerifiedDate) &&
        Objects.equals(this.amountOutstanding, paymentDefault.amountOutstanding) &&
        Objects.equals(this.approvedDate, paymentDefault.approvedDate) &&
        Objects.equals(this.company, paymentDefault.company) &&
        Objects.equals(this.defaultSettled, paymentDefault.defaultSettled) &&
        Objects.equals(this.doctype, paymentDefault.doctype) &&
        Objects.equals(this.documentType, paymentDefault.documentType) &&
        Objects.equals(this.lastUpdated, paymentDefault.lastUpdated) &&
        Objects.equals(this.originalInvoiceDate, paymentDefault.originalInvoiceDate) &&
        Objects.equals(this.partPaymentMade, paymentDefault.partPaymentMade) &&
        Objects.equals(this.partpayment, paymentDefault.partpayment) &&
        Objects.equals(this.paymentDueDate, paymentDefault.paymentDueDate) &&
        Objects.equals(this.posterAbn, paymentDefault.posterAbn) &&
        Objects.equals(this.posterName, paymentDefault.posterName) &&
        Objects.equals(this.settled, paymentDefault.settled) &&
        Objects.equals(this.uploadedDate, paymentDefault.uploadedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abn, accountAdditionalAbn, accountVerifiedDate, amountOutstanding, approvedDate, company, defaultSettled, doctype, documentType, lastUpdated, originalInvoiceDate, partPaymentMade, partpayment, paymentDueDate, posterAbn, posterName, settled, uploadedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDefault {\n");
    sb.append("    abn: ").append(toIndentedString(abn)).append("\n");
    sb.append("    accountAdditionalAbn: ").append(toIndentedString(accountAdditionalAbn)).append("\n");
    sb.append("    accountVerifiedDate: ").append(toIndentedString(accountVerifiedDate)).append("\n");
    sb.append("    amountOutstanding: ").append(toIndentedString(amountOutstanding)).append("\n");
    sb.append("    approvedDate: ").append(toIndentedString(approvedDate)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    defaultSettled: ").append(toIndentedString(defaultSettled)).append("\n");
    sb.append("    doctype: ").append(toIndentedString(doctype)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    originalInvoiceDate: ").append(toIndentedString(originalInvoiceDate)).append("\n");
    sb.append("    partPaymentMade: ").append(toIndentedString(partPaymentMade)).append("\n");
    sb.append("    partpayment: ").append(toIndentedString(partpayment)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    posterAbn: ").append(toIndentedString(posterAbn)).append("\n");
    sb.append("    posterName: ").append(toIndentedString(posterName)).append("\n");
    sb.append("    settled: ").append(toIndentedString(settled)).append("\n");
    sb.append("    uploadedDate: ").append(toIndentedString(uploadedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abn");
    openapiFields.add("accountAdditionalAbn");
    openapiFields.add("accountVerifiedDate");
    openapiFields.add("amountOutstanding");
    openapiFields.add("approvedDate");
    openapiFields.add("company");
    openapiFields.add("defaultSettled");
    openapiFields.add("doctype");
    openapiFields.add("documentType");
    openapiFields.add("lastUpdated");
    openapiFields.add("originalInvoiceDate");
    openapiFields.add("partPaymentMade");
    openapiFields.add("partpayment");
    openapiFields.add("paymentDueDate");
    openapiFields.add("posterAbn");
    openapiFields.add("posterName");
    openapiFields.add("settled");
    openapiFields.add("uploadedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentDefault
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentDefault.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDefault is not found in the empty JSON string", PaymentDefault.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentDefault.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentDefault` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abn") != null && !jsonObj.get("abn").isJsonNull()) && !jsonObj.get("abn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abn").toString()));
      }
      if ((jsonObj.get("accountAdditionalAbn") != null && !jsonObj.get("accountAdditionalAbn").isJsonNull()) && !jsonObj.get("accountAdditionalAbn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAdditionalAbn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAdditionalAbn").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("doctype") != null && !jsonObj.get("doctype").isJsonNull()) && !jsonObj.get("doctype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doctype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doctype").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      if ((jsonObj.get("posterAbn") != null && !jsonObj.get("posterAbn").isJsonNull()) && !jsonObj.get("posterAbn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posterAbn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posterAbn").toString()));
      }
      if ((jsonObj.get("posterName") != null && !jsonObj.get("posterName").isJsonNull()) && !jsonObj.get("posterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posterName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDefault.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDefault' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDefault> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDefault.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDefault>() {
           @Override
           public void write(JsonWriter out, PaymentDefault value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDefault read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentDefault given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentDefault
   * @throws IOException if the JSON string is invalid with respect to PaymentDefault
   */
  public static PaymentDefault fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDefault.class);
  }

  /**
   * Convert an instance of PaymentDefault to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

