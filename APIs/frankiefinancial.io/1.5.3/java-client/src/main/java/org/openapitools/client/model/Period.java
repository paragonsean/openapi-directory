/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RateValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rates, by period, for the uploaded bill
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Period {
  public static final String SERIALIZED_NAME_CONTROLLED_LOAD1 = "controlledLoad1";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_LOAD1)
  private RateValue controlledLoad1;

  public static final String SERIALIZED_NAME_CONTROLLED_LOAD2 = "controlledLoad2";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_LOAD2)
  private RateValue controlledLoad2;

  public static final String SERIALIZED_NAME_OFF_PEAK = "offPeak";
  @SerializedName(SERIALIZED_NAME_OFF_PEAK)
  private RateValue offPeak;

  public static final String SERIALIZED_NAME_OFF_PEAK_STEP1 = "offPeakStep1";
  @SerializedName(SERIALIZED_NAME_OFF_PEAK_STEP1)
  private RateValue offPeakStep1;

  public static final String SERIALIZED_NAME_OFF_PEAK_STEP2 = "offPeakStep2";
  @SerializedName(SERIALIZED_NAME_OFF_PEAK_STEP2)
  private RateValue offPeakStep2;

  public static final String SERIALIZED_NAME_PEAK = "peak";
  @SerializedName(SERIALIZED_NAME_PEAK)
  private RateValue peak;

  public static final String SERIALIZED_NAME_PEAK_STEP1 = "peakStep1";
  @SerializedName(SERIALIZED_NAME_PEAK_STEP1)
  private RateValue peakStep1;

  public static final String SERIALIZED_NAME_PEAK_STEP2 = "peakStep2";
  @SerializedName(SERIALIZED_NAME_PEAK_STEP2)
  private RateValue peakStep2;

  public static final String SERIALIZED_NAME_PEAK_STEP3 = "peakStep3";
  @SerializedName(SERIALIZED_NAME_PEAK_STEP3)
  private RateValue peakStep3;

  public static final String SERIALIZED_NAME_SHOULDER = "shoulder";
  @SerializedName(SERIALIZED_NAME_SHOULDER)
  private RateValue shoulder;

  public static final String SERIALIZED_NAME_SUPPLY_CHARGE = "supplyCharge";
  @SerializedName(SERIALIZED_NAME_SUPPLY_CHARGE)
  private RateValue supplyCharge;

  public Period() {
  }

  public Period controlledLoad1(RateValue controlledLoad1) {
    this.controlledLoad1 = controlledLoad1;
    return this;
  }

  /**
   * Get controlledLoad1
   * @return controlledLoad1
   */
  @javax.annotation.Nullable
  public RateValue getControlledLoad1() {
    return controlledLoad1;
  }

  public void setControlledLoad1(RateValue controlledLoad1) {
    this.controlledLoad1 = controlledLoad1;
  }


  public Period controlledLoad2(RateValue controlledLoad2) {
    this.controlledLoad2 = controlledLoad2;
    return this;
  }

  /**
   * Get controlledLoad2
   * @return controlledLoad2
   */
  @javax.annotation.Nullable
  public RateValue getControlledLoad2() {
    return controlledLoad2;
  }

  public void setControlledLoad2(RateValue controlledLoad2) {
    this.controlledLoad2 = controlledLoad2;
  }


  public Period offPeak(RateValue offPeak) {
    this.offPeak = offPeak;
    return this;
  }

  /**
   * Get offPeak
   * @return offPeak
   */
  @javax.annotation.Nullable
  public RateValue getOffPeak() {
    return offPeak;
  }

  public void setOffPeak(RateValue offPeak) {
    this.offPeak = offPeak;
  }


  public Period offPeakStep1(RateValue offPeakStep1) {
    this.offPeakStep1 = offPeakStep1;
    return this;
  }

  /**
   * Get offPeakStep1
   * @return offPeakStep1
   */
  @javax.annotation.Nullable
  public RateValue getOffPeakStep1() {
    return offPeakStep1;
  }

  public void setOffPeakStep1(RateValue offPeakStep1) {
    this.offPeakStep1 = offPeakStep1;
  }


  public Period offPeakStep2(RateValue offPeakStep2) {
    this.offPeakStep2 = offPeakStep2;
    return this;
  }

  /**
   * Get offPeakStep2
   * @return offPeakStep2
   */
  @javax.annotation.Nullable
  public RateValue getOffPeakStep2() {
    return offPeakStep2;
  }

  public void setOffPeakStep2(RateValue offPeakStep2) {
    this.offPeakStep2 = offPeakStep2;
  }


  public Period peak(RateValue peak) {
    this.peak = peak;
    return this;
  }

  /**
   * Get peak
   * @return peak
   */
  @javax.annotation.Nullable
  public RateValue getPeak() {
    return peak;
  }

  public void setPeak(RateValue peak) {
    this.peak = peak;
  }


  public Period peakStep1(RateValue peakStep1) {
    this.peakStep1 = peakStep1;
    return this;
  }

  /**
   * Get peakStep1
   * @return peakStep1
   */
  @javax.annotation.Nullable
  public RateValue getPeakStep1() {
    return peakStep1;
  }

  public void setPeakStep1(RateValue peakStep1) {
    this.peakStep1 = peakStep1;
  }


  public Period peakStep2(RateValue peakStep2) {
    this.peakStep2 = peakStep2;
    return this;
  }

  /**
   * Get peakStep2
   * @return peakStep2
   */
  @javax.annotation.Nullable
  public RateValue getPeakStep2() {
    return peakStep2;
  }

  public void setPeakStep2(RateValue peakStep2) {
    this.peakStep2 = peakStep2;
  }


  public Period peakStep3(RateValue peakStep3) {
    this.peakStep3 = peakStep3;
    return this;
  }

  /**
   * Get peakStep3
   * @return peakStep3
   */
  @javax.annotation.Nullable
  public RateValue getPeakStep3() {
    return peakStep3;
  }

  public void setPeakStep3(RateValue peakStep3) {
    this.peakStep3 = peakStep3;
  }


  public Period shoulder(RateValue shoulder) {
    this.shoulder = shoulder;
    return this;
  }

  /**
   * Get shoulder
   * @return shoulder
   */
  @javax.annotation.Nullable
  public RateValue getShoulder() {
    return shoulder;
  }

  public void setShoulder(RateValue shoulder) {
    this.shoulder = shoulder;
  }


  public Period supplyCharge(RateValue supplyCharge) {
    this.supplyCharge = supplyCharge;
    return this;
  }

  /**
   * Get supplyCharge
   * @return supplyCharge
   */
  @javax.annotation.Nullable
  public RateValue getSupplyCharge() {
    return supplyCharge;
  }

  public void setSupplyCharge(RateValue supplyCharge) {
    this.supplyCharge = supplyCharge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Period period = (Period) o;
    return Objects.equals(this.controlledLoad1, period.controlledLoad1) &&
        Objects.equals(this.controlledLoad2, period.controlledLoad2) &&
        Objects.equals(this.offPeak, period.offPeak) &&
        Objects.equals(this.offPeakStep1, period.offPeakStep1) &&
        Objects.equals(this.offPeakStep2, period.offPeakStep2) &&
        Objects.equals(this.peak, period.peak) &&
        Objects.equals(this.peakStep1, period.peakStep1) &&
        Objects.equals(this.peakStep2, period.peakStep2) &&
        Objects.equals(this.peakStep3, period.peakStep3) &&
        Objects.equals(this.shoulder, period.shoulder) &&
        Objects.equals(this.supplyCharge, period.supplyCharge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlledLoad1, controlledLoad2, offPeak, offPeakStep1, offPeakStep2, peak, peakStep1, peakStep2, peakStep3, shoulder, supplyCharge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Period {\n");
    sb.append("    controlledLoad1: ").append(toIndentedString(controlledLoad1)).append("\n");
    sb.append("    controlledLoad2: ").append(toIndentedString(controlledLoad2)).append("\n");
    sb.append("    offPeak: ").append(toIndentedString(offPeak)).append("\n");
    sb.append("    offPeakStep1: ").append(toIndentedString(offPeakStep1)).append("\n");
    sb.append("    offPeakStep2: ").append(toIndentedString(offPeakStep2)).append("\n");
    sb.append("    peak: ").append(toIndentedString(peak)).append("\n");
    sb.append("    peakStep1: ").append(toIndentedString(peakStep1)).append("\n");
    sb.append("    peakStep2: ").append(toIndentedString(peakStep2)).append("\n");
    sb.append("    peakStep3: ").append(toIndentedString(peakStep3)).append("\n");
    sb.append("    shoulder: ").append(toIndentedString(shoulder)).append("\n");
    sb.append("    supplyCharge: ").append(toIndentedString(supplyCharge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controlledLoad1");
    openapiFields.add("controlledLoad2");
    openapiFields.add("offPeak");
    openapiFields.add("offPeakStep1");
    openapiFields.add("offPeakStep2");
    openapiFields.add("peak");
    openapiFields.add("peakStep1");
    openapiFields.add("peakStep2");
    openapiFields.add("peakStep3");
    openapiFields.add("shoulder");
    openapiFields.add("supplyCharge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Period
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Period.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Period is not found in the empty JSON string", Period.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Period.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Period` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `controlledLoad1`
      if (jsonObj.get("controlledLoad1") != null && !jsonObj.get("controlledLoad1").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("controlledLoad1"));
      }
      // validate the optional field `controlledLoad2`
      if (jsonObj.get("controlledLoad2") != null && !jsonObj.get("controlledLoad2").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("controlledLoad2"));
      }
      // validate the optional field `offPeak`
      if (jsonObj.get("offPeak") != null && !jsonObj.get("offPeak").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("offPeak"));
      }
      // validate the optional field `offPeakStep1`
      if (jsonObj.get("offPeakStep1") != null && !jsonObj.get("offPeakStep1").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("offPeakStep1"));
      }
      // validate the optional field `offPeakStep2`
      if (jsonObj.get("offPeakStep2") != null && !jsonObj.get("offPeakStep2").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("offPeakStep2"));
      }
      // validate the optional field `peak`
      if (jsonObj.get("peak") != null && !jsonObj.get("peak").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("peak"));
      }
      // validate the optional field `peakStep1`
      if (jsonObj.get("peakStep1") != null && !jsonObj.get("peakStep1").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("peakStep1"));
      }
      // validate the optional field `peakStep2`
      if (jsonObj.get("peakStep2") != null && !jsonObj.get("peakStep2").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("peakStep2"));
      }
      // validate the optional field `peakStep3`
      if (jsonObj.get("peakStep3") != null && !jsonObj.get("peakStep3").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("peakStep3"));
      }
      // validate the optional field `shoulder`
      if (jsonObj.get("shoulder") != null && !jsonObj.get("shoulder").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("shoulder"));
      }
      // validate the optional field `supplyCharge`
      if (jsonObj.get("supplyCharge") != null && !jsonObj.get("supplyCharge").isJsonNull()) {
        RateValue.validateJsonElement(jsonObj.get("supplyCharge"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Period.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Period' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Period> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Period.class));

       return (TypeAdapter<T>) new TypeAdapter<Period>() {
           @Override
           public void write(JsonWriter out, Period value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Period read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Period given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Period
   * @throws IOException if the JSON string is invalid with respect to Period
   */
  public static Period fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Period.class);
  }

  /**
   * Convert an instance of Period to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

