/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The results of the comparison of the supplied data (above) to that found on file with the ABR. If the value is missing, then the comparison was not run. There will likely be an issue highlighted in the issues_list 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuppliedDataMatches {
  public static final String SERIALIZED_NAME_MATCHED_ACN = "matched_acn";
  @SerializedName(SERIALIZED_NAME_MATCHED_ACN)
  private Boolean matchedAcn;

  public static final String SERIALIZED_NAME_MATCHED_COMPANY_TYPE = "matched_company_type";
  @SerializedName(SERIALIZED_NAME_MATCHED_COMPANY_TYPE)
  private Boolean matchedCompanyType;

  public static final String SERIALIZED_NAME_MATCHED_NAME = "matched_name";
  @SerializedName(SERIALIZED_NAME_MATCHED_NAME)
  private Boolean matchedName;

  public SuppliedDataMatches() {
  }

  public SuppliedDataMatches matchedAcn(Boolean matchedAcn) {
    this.matchedAcn = matchedAcn;
    return this;
  }

  /**
   * Did the supplied ACN match the ACN on file with the ABR? Only truly relevant if ABN is supplied as well. 
   * @return matchedAcn
   */
  @javax.annotation.Nonnull
  public Boolean getMatchedAcn() {
    return matchedAcn;
  }

  public void setMatchedAcn(Boolean matchedAcn) {
    this.matchedAcn = matchedAcn;
  }


  public SuppliedDataMatches matchedCompanyType(Boolean matchedCompanyType) {
    this.matchedCompanyType = matchedCompanyType;
    return this;
  }

  /**
   * Did the supplied company type match the company type on file with the ABR? 
   * @return matchedCompanyType
   */
  @javax.annotation.Nonnull
  public Boolean getMatchedCompanyType() {
    return matchedCompanyType;
  }

  public void setMatchedCompanyType(Boolean matchedCompanyType) {
    this.matchedCompanyType = matchedCompanyType;
  }


  public SuppliedDataMatches matchedName(Boolean matchedName) {
    this.matchedName = matchedName;
    return this;
  }

  /**
   * Did the supplied name match (or closely match) the name on file with the ABR 
   * @return matchedName
   */
  @javax.annotation.Nonnull
  public Boolean getMatchedName() {
    return matchedName;
  }

  public void setMatchedName(Boolean matchedName) {
    this.matchedName = matchedName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuppliedDataMatches suppliedDataMatches = (SuppliedDataMatches) o;
    return Objects.equals(this.matchedAcn, suppliedDataMatches.matchedAcn) &&
        Objects.equals(this.matchedCompanyType, suppliedDataMatches.matchedCompanyType) &&
        Objects.equals(this.matchedName, suppliedDataMatches.matchedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchedAcn, matchedCompanyType, matchedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuppliedDataMatches {\n");
    sb.append("    matchedAcn: ").append(toIndentedString(matchedAcn)).append("\n");
    sb.append("    matchedCompanyType: ").append(toIndentedString(matchedCompanyType)).append("\n");
    sb.append("    matchedName: ").append(toIndentedString(matchedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matched_acn");
    openapiFields.add("matched_company_type");
    openapiFields.add("matched_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matched_acn");
    openapiRequiredFields.add("matched_company_type");
    openapiRequiredFields.add("matched_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuppliedDataMatches
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuppliedDataMatches.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuppliedDataMatches is not found in the empty JSON string", SuppliedDataMatches.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuppliedDataMatches.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuppliedDataMatches` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuppliedDataMatches.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuppliedDataMatches.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuppliedDataMatches' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuppliedDataMatches> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuppliedDataMatches.class));

       return (TypeAdapter<T>) new TypeAdapter<SuppliedDataMatches>() {
           @Override
           public void write(JsonWriter out, SuppliedDataMatches value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuppliedDataMatches read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuppliedDataMatches given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuppliedDataMatches
   * @throws IOException if the JSON string is invalid with respect to SuppliedDataMatches
   */
  public static SuppliedDataMatches fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuppliedDataMatches.class);
  }

  /**
   * Convert an instance of SuppliedDataMatches to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

