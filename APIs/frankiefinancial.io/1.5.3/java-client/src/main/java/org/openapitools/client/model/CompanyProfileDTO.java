/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayOfActivityDTO;
import org.openapitools.client.model.ArrayOfActivityDeclarationDTO;
import org.openapitools.client.model.ArrayOfAddressDTO;
import org.openapitools.client.model.ArrayOfCapitalDTO;
import org.openapitools.client.model.ArrayOfString;
import org.openapitools.client.model.ArrayOfUSOfficerDTO;
import org.openapitools.client.model.DirectorAndShareDetails;
import org.openapitools.client.model.LegalFormDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyProfileDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyProfileDTO {
  public static final String SERIALIZED_NAME_ACTIVITY = "Activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private ArrayOfActivityDTO activity;

  public static final String SERIALIZED_NAME_ACTIVITY_DECLARATION = "ActivityDeclaration";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DECLARATION)
  private ArrayOfActivityDeclarationDTO activityDeclaration;

  public static final String SERIALIZED_NAME_ADDRESSES = "Addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private ArrayOfAddressDTO addresses;

  public static final String SERIALIZED_NAME_AGENT_ADDRESS = "AgentAddress";
  @SerializedName(SERIALIZED_NAME_AGENT_ADDRESS)
  private String agentAddress;

  public static final String SERIALIZED_NAME_AGENT_NAME = "AgentName";
  @SerializedName(SERIALIZED_NAME_AGENT_NAME)
  private String agentName;

  public static final String SERIALIZED_NAME_ALIASES = "Aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private ArrayOfString aliases;

  public static final String SERIALIZED_NAME_APPOINTMENT_DATE_OF_OFFICIAL = "AppointmentDateOfOfficial";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_DATE_OF_OFFICIAL)
  private String appointmentDateOfOfficial;

  public static final String SERIALIZED_NAME_CAPITAL = "Capital";
  @SerializedName(SERIALIZED_NAME_CAPITAL)
  private ArrayOfCapitalDTO capital;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY_NAME_IN_ENGLISH = "CompanyNameInEnglish";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME_IN_ENGLISH)
  private String companyNameInEnglish;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX_NUMBER = "FaxNumber";
  @SerializedName(SERIALIZED_NAME_FAX_NUMBER)
  private String faxNumber;

  public static final String SERIALIZED_NAME_FISCAL_CODE = "FiscalCode";
  @SerializedName(SERIALIZED_NAME_FISCAL_CODE)
  private String fiscalCode;

  public static final String SERIALIZED_NAME_FOUNDATION_DATE = "FoundationDate";
  @SerializedName(SERIALIZED_NAME_FOUNDATION_DATE)
  private String foundationDate;

  public static final String SERIALIZED_NAME_FUNCTIONS = "Functions";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS)
  private ArrayOfString functions;

  public static final String SERIALIZED_NAME_HEADQUARTERS = "Headquarters";
  @SerializedName(SERIALIZED_NAME_HEADQUARTERS)
  private String headquarters;

  public static final String SERIALIZED_NAME_KEY_FIGURES = "KeyFigures";
  @SerializedName(SERIALIZED_NAME_KEY_FIGURES)
  private ArrayOfString keyFigures;

  public static final String SERIALIZED_NAME_LAST_ANNUAL_ACCOUNT_DATE = "LastAnnualAccountDate";
  @SerializedName(SERIALIZED_NAME_LAST_ANNUAL_ACCOUNT_DATE)
  private String lastAnnualAccountDate;

  public static final String SERIALIZED_NAME_LEGAL_FORM = "LegalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  private String legalForm;

  public static final String SERIALIZED_NAME_LEGAL_FORM_DECLARATION = "LegalFormDeclaration";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM_DECLARATION)
  private String legalFormDeclaration;

  public static final String SERIALIZED_NAME_LEGAL_FORM_DETAILS = "LegalFormDetails";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM_DETAILS)
  private LegalFormDTO legalFormDetails;

  public static final String SERIALIZED_NAME_LEGAL_STATUS = "LegalStatus";
  @SerializedName(SERIALIZED_NAME_LEGAL_STATUS)
  private String legalStatus;

  public static final String SERIALIZED_NAME_MAILING_ADDRESS = "MailingAddress";
  @SerializedName(SERIALIZED_NAME_MAILING_ADDRESS)
  private String mailingAddress;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICIAL = "Official";
  @SerializedName(SERIALIZED_NAME_OFFICIAL)
  private Boolean official;

  public static final String SERIALIZED_NAME_REGISTRATION_AUTHORITY = "RegistrationAuthority";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_AUTHORITY)
  private String registrationAuthority;

  public static final String SERIALIZED_NAME_REGISTRATION_AUTHORITY_CODE = "RegistrationAuthorityCode";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_AUTHORITY_CODE)
  private String registrationAuthorityCode;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "RegistrationDate";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private String registrationDate;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "RegistrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SIGNING_DECLARATION = "SigningDeclaration";
  @SerializedName(SERIALIZED_NAME_SIGNING_DECLARATION)
  private String signingDeclaration;

  public static final String SERIALIZED_NAME_SIGNING_DECLARATION_DESCRIPTION = "SigningDeclarationDescription";
  @SerializedName(SERIALIZED_NAME_SIGNING_DECLARATION_DESCRIPTION)
  private String signingDeclarationDescription;

  public static final String SERIALIZED_NAME_SIGNING_LANGUAGE = "SigningLanguage";
  @SerializedName(SERIALIZED_NAME_SIGNING_LANGUAGE)
  private String signingLanguage;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATE_OF_INCORPORATION = "StateOfIncorporation";
  @SerializedName(SERIALIZED_NAME_STATE_OF_INCORPORATION)
  private String stateOfIncorporation;

  public static final String SERIALIZED_NAME_TELEPHONE_NUMBER = "TelephoneNumber";
  @SerializedName(SERIALIZED_NAME_TELEPHONE_NUMBER)
  private String telephoneNumber;

  public static final String SERIALIZED_NAME_VAT_NUMBER = "VatNumber";
  @SerializedName(SERIALIZED_NAME_VAT_NUMBER)
  private String vatNumber;

  public static final String SERIALIZED_NAME_VIRTUAL_ID = "VirtualId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ID)
  private String virtualId;

  public static final String SERIALIZED_NAME_WEBSITE_U_R_L = "WebsiteURL";
  @SerializedName(SERIALIZED_NAME_WEBSITE_U_R_L)
  private String websiteURL;

  public static final String SERIALIZED_NAME_DIRECTOR_AND_SHARE_DETAILS = "directorAndShareDetails";
  @SerializedName(SERIALIZED_NAME_DIRECTOR_AND_SHARE_DETAILS)
  private DirectorAndShareDetails directorAndShareDetails;

  public static final String SERIALIZED_NAME_OFFICERS = "officers";
  @SerializedName(SERIALIZED_NAME_OFFICERS)
  private ArrayOfUSOfficerDTO officers;

  public CompanyProfileDTO() {
  }

  public CompanyProfileDTO activity(ArrayOfActivityDTO activity) {
    this.activity = activity;
    return this;
  }

  /**
   * Get activity
   * @return activity
   */
  @javax.annotation.Nullable
  public ArrayOfActivityDTO getActivity() {
    return activity;
  }

  public void setActivity(ArrayOfActivityDTO activity) {
    this.activity = activity;
  }


  public CompanyProfileDTO activityDeclaration(ArrayOfActivityDeclarationDTO activityDeclaration) {
    this.activityDeclaration = activityDeclaration;
    return this;
  }

  /**
   * Get activityDeclaration
   * @return activityDeclaration
   */
  @javax.annotation.Nullable
  public ArrayOfActivityDeclarationDTO getActivityDeclaration() {
    return activityDeclaration;
  }

  public void setActivityDeclaration(ArrayOfActivityDeclarationDTO activityDeclaration) {
    this.activityDeclaration = activityDeclaration;
  }


  public CompanyProfileDTO addresses(ArrayOfAddressDTO addresses) {
    this.addresses = addresses;
    return this;
  }

  /**
   * Get addresses
   * @return addresses
   */
  @javax.annotation.Nullable
  public ArrayOfAddressDTO getAddresses() {
    return addresses;
  }

  public void setAddresses(ArrayOfAddressDTO addresses) {
    this.addresses = addresses;
  }


  public CompanyProfileDTO agentAddress(String agentAddress) {
    this.agentAddress = agentAddress;
    return this;
  }

  /**
   * Get agentAddress
   * @return agentAddress
   */
  @javax.annotation.Nullable
  public String getAgentAddress() {
    return agentAddress;
  }

  public void setAgentAddress(String agentAddress) {
    this.agentAddress = agentAddress;
  }


  public CompanyProfileDTO agentName(String agentName) {
    this.agentName = agentName;
    return this;
  }

  /**
   * Get agentName
   * @return agentName
   */
  @javax.annotation.Nullable
  public String getAgentName() {
    return agentName;
  }

  public void setAgentName(String agentName) {
    this.agentName = agentName;
  }


  public CompanyProfileDTO aliases(ArrayOfString aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public ArrayOfString getAliases() {
    return aliases;
  }

  public void setAliases(ArrayOfString aliases) {
    this.aliases = aliases;
  }


  public CompanyProfileDTO appointmentDateOfOfficial(String appointmentDateOfOfficial) {
    this.appointmentDateOfOfficial = appointmentDateOfOfficial;
    return this;
  }

  /**
   * Get appointmentDateOfOfficial
   * @return appointmentDateOfOfficial
   */
  @javax.annotation.Nullable
  public String getAppointmentDateOfOfficial() {
    return appointmentDateOfOfficial;
  }

  public void setAppointmentDateOfOfficial(String appointmentDateOfOfficial) {
    this.appointmentDateOfOfficial = appointmentDateOfOfficial;
  }


  public CompanyProfileDTO capital(ArrayOfCapitalDTO capital) {
    this.capital = capital;
    return this;
  }

  /**
   * Get capital
   * @return capital
   */
  @javax.annotation.Nullable
  public ArrayOfCapitalDTO getCapital() {
    return capital;
  }

  public void setCapital(ArrayOfCapitalDTO capital) {
    this.capital = capital;
  }


  public CompanyProfileDTO code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CompanyProfileDTO companyNameInEnglish(String companyNameInEnglish) {
    this.companyNameInEnglish = companyNameInEnglish;
    return this;
  }

  /**
   * Get companyNameInEnglish
   * @return companyNameInEnglish
   */
  @javax.annotation.Nullable
  public String getCompanyNameInEnglish() {
    return companyNameInEnglish;
  }

  public void setCompanyNameInEnglish(String companyNameInEnglish) {
    this.companyNameInEnglish = companyNameInEnglish;
  }


  public CompanyProfileDTO date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public CompanyProfileDTO email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CompanyProfileDTO faxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
    return this;
  }

  /**
   * Get faxNumber
   * @return faxNumber
   */
  @javax.annotation.Nullable
  public String getFaxNumber() {
    return faxNumber;
  }

  public void setFaxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
  }


  public CompanyProfileDTO fiscalCode(String fiscalCode) {
    this.fiscalCode = fiscalCode;
    return this;
  }

  /**
   * Get fiscalCode
   * @return fiscalCode
   */
  @javax.annotation.Nullable
  public String getFiscalCode() {
    return fiscalCode;
  }

  public void setFiscalCode(String fiscalCode) {
    this.fiscalCode = fiscalCode;
  }


  public CompanyProfileDTO foundationDate(String foundationDate) {
    this.foundationDate = foundationDate;
    return this;
  }

  /**
   * Get foundationDate
   * @return foundationDate
   */
  @javax.annotation.Nullable
  public String getFoundationDate() {
    return foundationDate;
  }

  public void setFoundationDate(String foundationDate) {
    this.foundationDate = foundationDate;
  }


  public CompanyProfileDTO functions(ArrayOfString functions) {
    this.functions = functions;
    return this;
  }

  /**
   * Get functions
   * @return functions
   */
  @javax.annotation.Nullable
  public ArrayOfString getFunctions() {
    return functions;
  }

  public void setFunctions(ArrayOfString functions) {
    this.functions = functions;
  }


  public CompanyProfileDTO headquarters(String headquarters) {
    this.headquarters = headquarters;
    return this;
  }

  /**
   * Get headquarters
   * @return headquarters
   */
  @javax.annotation.Nullable
  public String getHeadquarters() {
    return headquarters;
  }

  public void setHeadquarters(String headquarters) {
    this.headquarters = headquarters;
  }


  public CompanyProfileDTO keyFigures(ArrayOfString keyFigures) {
    this.keyFigures = keyFigures;
    return this;
  }

  /**
   * Get keyFigures
   * @return keyFigures
   */
  @javax.annotation.Nullable
  public ArrayOfString getKeyFigures() {
    return keyFigures;
  }

  public void setKeyFigures(ArrayOfString keyFigures) {
    this.keyFigures = keyFigures;
  }


  public CompanyProfileDTO lastAnnualAccountDate(String lastAnnualAccountDate) {
    this.lastAnnualAccountDate = lastAnnualAccountDate;
    return this;
  }

  /**
   * Get lastAnnualAccountDate
   * @return lastAnnualAccountDate
   */
  @javax.annotation.Nullable
  public String getLastAnnualAccountDate() {
    return lastAnnualAccountDate;
  }

  public void setLastAnnualAccountDate(String lastAnnualAccountDate) {
    this.lastAnnualAccountDate = lastAnnualAccountDate;
  }


  public CompanyProfileDTO legalForm(String legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * Get legalForm
   * @return legalForm
   */
  @javax.annotation.Nullable
  public String getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(String legalForm) {
    this.legalForm = legalForm;
  }


  public CompanyProfileDTO legalFormDeclaration(String legalFormDeclaration) {
    this.legalFormDeclaration = legalFormDeclaration;
    return this;
  }

  /**
   * Get legalFormDeclaration
   * @return legalFormDeclaration
   */
  @javax.annotation.Nullable
  public String getLegalFormDeclaration() {
    return legalFormDeclaration;
  }

  public void setLegalFormDeclaration(String legalFormDeclaration) {
    this.legalFormDeclaration = legalFormDeclaration;
  }


  public CompanyProfileDTO legalFormDetails(LegalFormDTO legalFormDetails) {
    this.legalFormDetails = legalFormDetails;
    return this;
  }

  /**
   * Get legalFormDetails
   * @return legalFormDetails
   */
  @javax.annotation.Nullable
  public LegalFormDTO getLegalFormDetails() {
    return legalFormDetails;
  }

  public void setLegalFormDetails(LegalFormDTO legalFormDetails) {
    this.legalFormDetails = legalFormDetails;
  }


  public CompanyProfileDTO legalStatus(String legalStatus) {
    this.legalStatus = legalStatus;
    return this;
  }

  /**
   * Get legalStatus
   * @return legalStatus
   */
  @javax.annotation.Nullable
  public String getLegalStatus() {
    return legalStatus;
  }

  public void setLegalStatus(String legalStatus) {
    this.legalStatus = legalStatus;
  }


  public CompanyProfileDTO mailingAddress(String mailingAddress) {
    this.mailingAddress = mailingAddress;
    return this;
  }

  /**
   * Get mailingAddress
   * @return mailingAddress
   */
  @javax.annotation.Nullable
  public String getMailingAddress() {
    return mailingAddress;
  }

  public void setMailingAddress(String mailingAddress) {
    this.mailingAddress = mailingAddress;
  }


  public CompanyProfileDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CompanyProfileDTO official(Boolean official) {
    this.official = official;
    return this;
  }

  /**
   * Get official
   * @return official
   */
  @javax.annotation.Nullable
  public Boolean getOfficial() {
    return official;
  }

  public void setOfficial(Boolean official) {
    this.official = official;
  }


  public CompanyProfileDTO registrationAuthority(String registrationAuthority) {
    this.registrationAuthority = registrationAuthority;
    return this;
  }

  /**
   * Get registrationAuthority
   * @return registrationAuthority
   */
  @javax.annotation.Nullable
  public String getRegistrationAuthority() {
    return registrationAuthority;
  }

  public void setRegistrationAuthority(String registrationAuthority) {
    this.registrationAuthority = registrationAuthority;
  }


  public CompanyProfileDTO registrationAuthorityCode(String registrationAuthorityCode) {
    this.registrationAuthorityCode = registrationAuthorityCode;
    return this;
  }

  /**
   * Get registrationAuthorityCode
   * @return registrationAuthorityCode
   */
  @javax.annotation.Nullable
  public String getRegistrationAuthorityCode() {
    return registrationAuthorityCode;
  }

  public void setRegistrationAuthorityCode(String registrationAuthorityCode) {
    this.registrationAuthorityCode = registrationAuthorityCode;
  }


  public CompanyProfileDTO registrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

  /**
   * Get registrationDate
   * @return registrationDate
   */
  @javax.annotation.Nullable
  public String getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(String registrationDate) {
    this.registrationDate = registrationDate;
  }


  public CompanyProfileDTO registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Get registrationNumber
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public CompanyProfileDTO signingDeclaration(String signingDeclaration) {
    this.signingDeclaration = signingDeclaration;
    return this;
  }

  /**
   * Get signingDeclaration
   * @return signingDeclaration
   */
  @javax.annotation.Nullable
  public String getSigningDeclaration() {
    return signingDeclaration;
  }

  public void setSigningDeclaration(String signingDeclaration) {
    this.signingDeclaration = signingDeclaration;
  }


  public CompanyProfileDTO signingDeclarationDescription(String signingDeclarationDescription) {
    this.signingDeclarationDescription = signingDeclarationDescription;
    return this;
  }

  /**
   * Get signingDeclarationDescription
   * @return signingDeclarationDescription
   */
  @javax.annotation.Nullable
  public String getSigningDeclarationDescription() {
    return signingDeclarationDescription;
  }

  public void setSigningDeclarationDescription(String signingDeclarationDescription) {
    this.signingDeclarationDescription = signingDeclarationDescription;
  }


  public CompanyProfileDTO signingLanguage(String signingLanguage) {
    this.signingLanguage = signingLanguage;
    return this;
  }

  /**
   * Get signingLanguage
   * @return signingLanguage
   */
  @javax.annotation.Nullable
  public String getSigningLanguage() {
    return signingLanguage;
  }

  public void setSigningLanguage(String signingLanguage) {
    this.signingLanguage = signingLanguage;
  }


  public CompanyProfileDTO source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public CompanyProfileDTO stateOfIncorporation(String stateOfIncorporation) {
    this.stateOfIncorporation = stateOfIncorporation;
    return this;
  }

  /**
   * Get stateOfIncorporation
   * @return stateOfIncorporation
   */
  @javax.annotation.Nullable
  public String getStateOfIncorporation() {
    return stateOfIncorporation;
  }

  public void setStateOfIncorporation(String stateOfIncorporation) {
    this.stateOfIncorporation = stateOfIncorporation;
  }


  public CompanyProfileDTO telephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
    return this;
  }

  /**
   * Get telephoneNumber
   * @return telephoneNumber
   */
  @javax.annotation.Nullable
  public String getTelephoneNumber() {
    return telephoneNumber;
  }

  public void setTelephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
  }


  public CompanyProfileDTO vatNumber(String vatNumber) {
    this.vatNumber = vatNumber;
    return this;
  }

  /**
   * Get vatNumber
   * @return vatNumber
   */
  @javax.annotation.Nullable
  public String getVatNumber() {
    return vatNumber;
  }

  public void setVatNumber(String vatNumber) {
    this.vatNumber = vatNumber;
  }


  public CompanyProfileDTO virtualId(String virtualId) {
    this.virtualId = virtualId;
    return this;
  }

  /**
   * Get virtualId
   * @return virtualId
   */
  @javax.annotation.Nullable
  public String getVirtualId() {
    return virtualId;
  }

  public void setVirtualId(String virtualId) {
    this.virtualId = virtualId;
  }


  public CompanyProfileDTO websiteURL(String websiteURL) {
    this.websiteURL = websiteURL;
    return this;
  }

  /**
   * Get websiteURL
   * @return websiteURL
   */
  @javax.annotation.Nullable
  public String getWebsiteURL() {
    return websiteURL;
  }

  public void setWebsiteURL(String websiteURL) {
    this.websiteURL = websiteURL;
  }


  public CompanyProfileDTO directorAndShareDetails(DirectorAndShareDetails directorAndShareDetails) {
    this.directorAndShareDetails = directorAndShareDetails;
    return this;
  }

  /**
   * Get directorAndShareDetails
   * @return directorAndShareDetails
   */
  @javax.annotation.Nullable
  public DirectorAndShareDetails getDirectorAndShareDetails() {
    return directorAndShareDetails;
  }

  public void setDirectorAndShareDetails(DirectorAndShareDetails directorAndShareDetails) {
    this.directorAndShareDetails = directorAndShareDetails;
  }


  public CompanyProfileDTO officers(ArrayOfUSOfficerDTO officers) {
    this.officers = officers;
    return this;
  }

  /**
   * Get officers
   * @return officers
   */
  @javax.annotation.Nullable
  public ArrayOfUSOfficerDTO getOfficers() {
    return officers;
  }

  public void setOfficers(ArrayOfUSOfficerDTO officers) {
    this.officers = officers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyProfileDTO companyProfileDTO = (CompanyProfileDTO) o;
    return Objects.equals(this.activity, companyProfileDTO.activity) &&
        Objects.equals(this.activityDeclaration, companyProfileDTO.activityDeclaration) &&
        Objects.equals(this.addresses, companyProfileDTO.addresses) &&
        Objects.equals(this.agentAddress, companyProfileDTO.agentAddress) &&
        Objects.equals(this.agentName, companyProfileDTO.agentName) &&
        Objects.equals(this.aliases, companyProfileDTO.aliases) &&
        Objects.equals(this.appointmentDateOfOfficial, companyProfileDTO.appointmentDateOfOfficial) &&
        Objects.equals(this.capital, companyProfileDTO.capital) &&
        Objects.equals(this.code, companyProfileDTO.code) &&
        Objects.equals(this.companyNameInEnglish, companyProfileDTO.companyNameInEnglish) &&
        Objects.equals(this.date, companyProfileDTO.date) &&
        Objects.equals(this.email, companyProfileDTO.email) &&
        Objects.equals(this.faxNumber, companyProfileDTO.faxNumber) &&
        Objects.equals(this.fiscalCode, companyProfileDTO.fiscalCode) &&
        Objects.equals(this.foundationDate, companyProfileDTO.foundationDate) &&
        Objects.equals(this.functions, companyProfileDTO.functions) &&
        Objects.equals(this.headquarters, companyProfileDTO.headquarters) &&
        Objects.equals(this.keyFigures, companyProfileDTO.keyFigures) &&
        Objects.equals(this.lastAnnualAccountDate, companyProfileDTO.lastAnnualAccountDate) &&
        Objects.equals(this.legalForm, companyProfileDTO.legalForm) &&
        Objects.equals(this.legalFormDeclaration, companyProfileDTO.legalFormDeclaration) &&
        Objects.equals(this.legalFormDetails, companyProfileDTO.legalFormDetails) &&
        Objects.equals(this.legalStatus, companyProfileDTO.legalStatus) &&
        Objects.equals(this.mailingAddress, companyProfileDTO.mailingAddress) &&
        Objects.equals(this.name, companyProfileDTO.name) &&
        Objects.equals(this.official, companyProfileDTO.official) &&
        Objects.equals(this.registrationAuthority, companyProfileDTO.registrationAuthority) &&
        Objects.equals(this.registrationAuthorityCode, companyProfileDTO.registrationAuthorityCode) &&
        Objects.equals(this.registrationDate, companyProfileDTO.registrationDate) &&
        Objects.equals(this.registrationNumber, companyProfileDTO.registrationNumber) &&
        Objects.equals(this.signingDeclaration, companyProfileDTO.signingDeclaration) &&
        Objects.equals(this.signingDeclarationDescription, companyProfileDTO.signingDeclarationDescription) &&
        Objects.equals(this.signingLanguage, companyProfileDTO.signingLanguage) &&
        Objects.equals(this.source, companyProfileDTO.source) &&
        Objects.equals(this.stateOfIncorporation, companyProfileDTO.stateOfIncorporation) &&
        Objects.equals(this.telephoneNumber, companyProfileDTO.telephoneNumber) &&
        Objects.equals(this.vatNumber, companyProfileDTO.vatNumber) &&
        Objects.equals(this.virtualId, companyProfileDTO.virtualId) &&
        Objects.equals(this.websiteURL, companyProfileDTO.websiteURL) &&
        Objects.equals(this.directorAndShareDetails, companyProfileDTO.directorAndShareDetails) &&
        Objects.equals(this.officers, companyProfileDTO.officers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, activityDeclaration, addresses, agentAddress, agentName, aliases, appointmentDateOfOfficial, capital, code, companyNameInEnglish, date, email, faxNumber, fiscalCode, foundationDate, functions, headquarters, keyFigures, lastAnnualAccountDate, legalForm, legalFormDeclaration, legalFormDetails, legalStatus, mailingAddress, name, official, registrationAuthority, registrationAuthorityCode, registrationDate, registrationNumber, signingDeclaration, signingDeclarationDescription, signingLanguage, source, stateOfIncorporation, telephoneNumber, vatNumber, virtualId, websiteURL, directorAndShareDetails, officers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyProfileDTO {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    activityDeclaration: ").append(toIndentedString(activityDeclaration)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    agentAddress: ").append(toIndentedString(agentAddress)).append("\n");
    sb.append("    agentName: ").append(toIndentedString(agentName)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    appointmentDateOfOfficial: ").append(toIndentedString(appointmentDateOfOfficial)).append("\n");
    sb.append("    capital: ").append(toIndentedString(capital)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    companyNameInEnglish: ").append(toIndentedString(companyNameInEnglish)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    faxNumber: ").append(toIndentedString(faxNumber)).append("\n");
    sb.append("    fiscalCode: ").append(toIndentedString(fiscalCode)).append("\n");
    sb.append("    foundationDate: ").append(toIndentedString(foundationDate)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    headquarters: ").append(toIndentedString(headquarters)).append("\n");
    sb.append("    keyFigures: ").append(toIndentedString(keyFigures)).append("\n");
    sb.append("    lastAnnualAccountDate: ").append(toIndentedString(lastAnnualAccountDate)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    legalFormDeclaration: ").append(toIndentedString(legalFormDeclaration)).append("\n");
    sb.append("    legalFormDetails: ").append(toIndentedString(legalFormDetails)).append("\n");
    sb.append("    legalStatus: ").append(toIndentedString(legalStatus)).append("\n");
    sb.append("    mailingAddress: ").append(toIndentedString(mailingAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    registrationAuthority: ").append(toIndentedString(registrationAuthority)).append("\n");
    sb.append("    registrationAuthorityCode: ").append(toIndentedString(registrationAuthorityCode)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    signingDeclaration: ").append(toIndentedString(signingDeclaration)).append("\n");
    sb.append("    signingDeclarationDescription: ").append(toIndentedString(signingDeclarationDescription)).append("\n");
    sb.append("    signingLanguage: ").append(toIndentedString(signingLanguage)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    stateOfIncorporation: ").append(toIndentedString(stateOfIncorporation)).append("\n");
    sb.append("    telephoneNumber: ").append(toIndentedString(telephoneNumber)).append("\n");
    sb.append("    vatNumber: ").append(toIndentedString(vatNumber)).append("\n");
    sb.append("    virtualId: ").append(toIndentedString(virtualId)).append("\n");
    sb.append("    websiteURL: ").append(toIndentedString(websiteURL)).append("\n");
    sb.append("    directorAndShareDetails: ").append(toIndentedString(directorAndShareDetails)).append("\n");
    sb.append("    officers: ").append(toIndentedString(officers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Activity");
    openapiFields.add("ActivityDeclaration");
    openapiFields.add("Addresses");
    openapiFields.add("AgentAddress");
    openapiFields.add("AgentName");
    openapiFields.add("Aliases");
    openapiFields.add("AppointmentDateOfOfficial");
    openapiFields.add("Capital");
    openapiFields.add("Code");
    openapiFields.add("CompanyNameInEnglish");
    openapiFields.add("Date");
    openapiFields.add("Email");
    openapiFields.add("FaxNumber");
    openapiFields.add("FiscalCode");
    openapiFields.add("FoundationDate");
    openapiFields.add("Functions");
    openapiFields.add("Headquarters");
    openapiFields.add("KeyFigures");
    openapiFields.add("LastAnnualAccountDate");
    openapiFields.add("LegalForm");
    openapiFields.add("LegalFormDeclaration");
    openapiFields.add("LegalFormDetails");
    openapiFields.add("LegalStatus");
    openapiFields.add("MailingAddress");
    openapiFields.add("Name");
    openapiFields.add("Official");
    openapiFields.add("RegistrationAuthority");
    openapiFields.add("RegistrationAuthorityCode");
    openapiFields.add("RegistrationDate");
    openapiFields.add("RegistrationNumber");
    openapiFields.add("SigningDeclaration");
    openapiFields.add("SigningDeclarationDescription");
    openapiFields.add("SigningLanguage");
    openapiFields.add("Source");
    openapiFields.add("StateOfIncorporation");
    openapiFields.add("TelephoneNumber");
    openapiFields.add("VatNumber");
    openapiFields.add("VirtualId");
    openapiFields.add("WebsiteURL");
    openapiFields.add("directorAndShareDetails");
    openapiFields.add("officers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyProfileDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyProfileDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyProfileDTO is not found in the empty JSON string", CompanyProfileDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyProfileDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyProfileDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Activity`
      if (jsonObj.get("Activity") != null && !jsonObj.get("Activity").isJsonNull()) {
        ArrayOfActivityDTO.validateJsonElement(jsonObj.get("Activity"));
      }
      // validate the optional field `ActivityDeclaration`
      if (jsonObj.get("ActivityDeclaration") != null && !jsonObj.get("ActivityDeclaration").isJsonNull()) {
        ArrayOfActivityDeclarationDTO.validateJsonElement(jsonObj.get("ActivityDeclaration"));
      }
      // validate the optional field `Addresses`
      if (jsonObj.get("Addresses") != null && !jsonObj.get("Addresses").isJsonNull()) {
        ArrayOfAddressDTO.validateJsonElement(jsonObj.get("Addresses"));
      }
      if ((jsonObj.get("AgentAddress") != null && !jsonObj.get("AgentAddress").isJsonNull()) && !jsonObj.get("AgentAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentAddress").toString()));
      }
      if ((jsonObj.get("AgentName") != null && !jsonObj.get("AgentName").isJsonNull()) && !jsonObj.get("AgentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgentName").toString()));
      }
      // validate the optional field `Aliases`
      if (jsonObj.get("Aliases") != null && !jsonObj.get("Aliases").isJsonNull()) {
        ArrayOfString.validateJsonElement(jsonObj.get("Aliases"));
      }
      if ((jsonObj.get("AppointmentDateOfOfficial") != null && !jsonObj.get("AppointmentDateOfOfficial").isJsonNull()) && !jsonObj.get("AppointmentDateOfOfficial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppointmentDateOfOfficial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppointmentDateOfOfficial").toString()));
      }
      // validate the optional field `Capital`
      if (jsonObj.get("Capital") != null && !jsonObj.get("Capital").isJsonNull()) {
        ArrayOfCapitalDTO.validateJsonElement(jsonObj.get("Capital"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("CompanyNameInEnglish") != null && !jsonObj.get("CompanyNameInEnglish").isJsonNull()) && !jsonObj.get("CompanyNameInEnglish").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyNameInEnglish` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyNameInEnglish").toString()));
      }
      if ((jsonObj.get("Date") != null && !jsonObj.get("Date").isJsonNull()) && !jsonObj.get("Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Date").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("FaxNumber") != null && !jsonObj.get("FaxNumber").isJsonNull()) && !jsonObj.get("FaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaxNumber").toString()));
      }
      if ((jsonObj.get("FiscalCode") != null && !jsonObj.get("FiscalCode").isJsonNull()) && !jsonObj.get("FiscalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FiscalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FiscalCode").toString()));
      }
      if ((jsonObj.get("FoundationDate") != null && !jsonObj.get("FoundationDate").isJsonNull()) && !jsonObj.get("FoundationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FoundationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FoundationDate").toString()));
      }
      // validate the optional field `Functions`
      if (jsonObj.get("Functions") != null && !jsonObj.get("Functions").isJsonNull()) {
        ArrayOfString.validateJsonElement(jsonObj.get("Functions"));
      }
      if ((jsonObj.get("Headquarters") != null && !jsonObj.get("Headquarters").isJsonNull()) && !jsonObj.get("Headquarters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Headquarters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Headquarters").toString()));
      }
      // validate the optional field `KeyFigures`
      if (jsonObj.get("KeyFigures") != null && !jsonObj.get("KeyFigures").isJsonNull()) {
        ArrayOfString.validateJsonElement(jsonObj.get("KeyFigures"));
      }
      if ((jsonObj.get("LastAnnualAccountDate") != null && !jsonObj.get("LastAnnualAccountDate").isJsonNull()) && !jsonObj.get("LastAnnualAccountDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastAnnualAccountDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastAnnualAccountDate").toString()));
      }
      if ((jsonObj.get("LegalForm") != null && !jsonObj.get("LegalForm").isJsonNull()) && !jsonObj.get("LegalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalForm").toString()));
      }
      if ((jsonObj.get("LegalFormDeclaration") != null && !jsonObj.get("LegalFormDeclaration").isJsonNull()) && !jsonObj.get("LegalFormDeclaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalFormDeclaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalFormDeclaration").toString()));
      }
      // validate the optional field `LegalFormDetails`
      if (jsonObj.get("LegalFormDetails") != null && !jsonObj.get("LegalFormDetails").isJsonNull()) {
        LegalFormDTO.validateJsonElement(jsonObj.get("LegalFormDetails"));
      }
      if ((jsonObj.get("LegalStatus") != null && !jsonObj.get("LegalStatus").isJsonNull()) && !jsonObj.get("LegalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalStatus").toString()));
      }
      if ((jsonObj.get("MailingAddress") != null && !jsonObj.get("MailingAddress").isJsonNull()) && !jsonObj.get("MailingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MailingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MailingAddress").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RegistrationAuthority") != null && !jsonObj.get("RegistrationAuthority").isJsonNull()) && !jsonObj.get("RegistrationAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationAuthority").toString()));
      }
      if ((jsonObj.get("RegistrationAuthorityCode") != null && !jsonObj.get("RegistrationAuthorityCode").isJsonNull()) && !jsonObj.get("RegistrationAuthorityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationAuthorityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationAuthorityCode").toString()));
      }
      if ((jsonObj.get("RegistrationDate") != null && !jsonObj.get("RegistrationDate").isJsonNull()) && !jsonObj.get("RegistrationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationDate").toString()));
      }
      if ((jsonObj.get("RegistrationNumber") != null && !jsonObj.get("RegistrationNumber").isJsonNull()) && !jsonObj.get("RegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationNumber").toString()));
      }
      if ((jsonObj.get("SigningDeclaration") != null && !jsonObj.get("SigningDeclaration").isJsonNull()) && !jsonObj.get("SigningDeclaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SigningDeclaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SigningDeclaration").toString()));
      }
      if ((jsonObj.get("SigningDeclarationDescription") != null && !jsonObj.get("SigningDeclarationDescription").isJsonNull()) && !jsonObj.get("SigningDeclarationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SigningDeclarationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SigningDeclarationDescription").toString()));
      }
      if ((jsonObj.get("SigningLanguage") != null && !jsonObj.get("SigningLanguage").isJsonNull()) && !jsonObj.get("SigningLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SigningLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SigningLanguage").toString()));
      }
      if ((jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) && !jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if ((jsonObj.get("StateOfIncorporation") != null && !jsonObj.get("StateOfIncorporation").isJsonNull()) && !jsonObj.get("StateOfIncorporation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateOfIncorporation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateOfIncorporation").toString()));
      }
      if ((jsonObj.get("TelephoneNumber") != null && !jsonObj.get("TelephoneNumber").isJsonNull()) && !jsonObj.get("TelephoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TelephoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TelephoneNumber").toString()));
      }
      if ((jsonObj.get("VatNumber") != null && !jsonObj.get("VatNumber").isJsonNull()) && !jsonObj.get("VatNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VatNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VatNumber").toString()));
      }
      if ((jsonObj.get("VirtualId") != null && !jsonObj.get("VirtualId").isJsonNull()) && !jsonObj.get("VirtualId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VirtualId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VirtualId").toString()));
      }
      if ((jsonObj.get("WebsiteURL") != null && !jsonObj.get("WebsiteURL").isJsonNull()) && !jsonObj.get("WebsiteURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebsiteURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebsiteURL").toString()));
      }
      // validate the optional field `directorAndShareDetails`
      if (jsonObj.get("directorAndShareDetails") != null && !jsonObj.get("directorAndShareDetails").isJsonNull()) {
        DirectorAndShareDetails.validateJsonElement(jsonObj.get("directorAndShareDetails"));
      }
      // validate the optional field `officers`
      if (jsonObj.get("officers") != null && !jsonObj.get("officers").isJsonNull()) {
        ArrayOfUSOfficerDTO.validateJsonElement(jsonObj.get("officers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyProfileDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyProfileDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyProfileDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyProfileDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyProfileDTO>() {
           @Override
           public void write(JsonWriter out, CompanyProfileDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyProfileDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyProfileDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyProfileDTO
   * @throws IOException if the JSON string is invalid with respect to CompanyProfileDTO
   */
  public static CompanyProfileDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyProfileDTO.class);
  }

  /**
   * Convert an instance of CompanyProfileDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

