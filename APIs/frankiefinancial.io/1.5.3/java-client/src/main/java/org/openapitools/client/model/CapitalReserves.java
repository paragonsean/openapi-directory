/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CapitalReserves
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CapitalReserves {
  public static final String SERIALIZED_NAME_CAPITALRESERVES = "capitalreserves";
  @SerializedName(SERIALIZED_NAME_CAPITALRESERVES)
  private String capitalreserves;

  public static final String SERIALIZED_NAME_NETWORTH = "networth";
  @SerializedName(SERIALIZED_NAME_NETWORTH)
  private String networth;

  public static final String SERIALIZED_NAME_PAIDUPEQUITY = "paidupequity";
  @SerializedName(SERIALIZED_NAME_PAIDUPEQUITY)
  private String paidupequity;

  public static final String SERIALIZED_NAME_PROFITLOSSRESERVE = "profitlossreserve";
  @SerializedName(SERIALIZED_NAME_PROFITLOSSRESERVE)
  private String profitlossreserve;

  public static final String SERIALIZED_NAME_RESERVES = "reserves";
  @SerializedName(SERIALIZED_NAME_RESERVES)
  private String reserves;

  public static final String SERIALIZED_NAME_REVALUTATIONRESERVE = "revalutationreserve";
  @SerializedName(SERIALIZED_NAME_REVALUTATIONRESERVE)
  private String revalutationreserve;

  public static final String SERIALIZED_NAME_SHAREHOLDERFUNDS = "shareholderfunds";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDERFUNDS)
  private String shareholderfunds;

  public static final String SERIALIZED_NAME_SUNDRYRESERVES = "sundryreserves";
  @SerializedName(SERIALIZED_NAME_SUNDRYRESERVES)
  private String sundryreserves;

  public CapitalReserves() {
  }

  public CapitalReserves capitalreserves(String capitalreserves) {
    this.capitalreserves = capitalreserves;
    return this;
  }

  /**
   * Get capitalreserves
   * @return capitalreserves
   */
  @javax.annotation.Nullable
  public String getCapitalreserves() {
    return capitalreserves;
  }

  public void setCapitalreserves(String capitalreserves) {
    this.capitalreserves = capitalreserves;
  }


  public CapitalReserves networth(String networth) {
    this.networth = networth;
    return this;
  }

  /**
   * Get networth
   * @return networth
   */
  @javax.annotation.Nullable
  public String getNetworth() {
    return networth;
  }

  public void setNetworth(String networth) {
    this.networth = networth;
  }


  public CapitalReserves paidupequity(String paidupequity) {
    this.paidupequity = paidupequity;
    return this;
  }

  /**
   * Get paidupequity
   * @return paidupequity
   */
  @javax.annotation.Nullable
  public String getPaidupequity() {
    return paidupequity;
  }

  public void setPaidupequity(String paidupequity) {
    this.paidupequity = paidupequity;
  }


  public CapitalReserves profitlossreserve(String profitlossreserve) {
    this.profitlossreserve = profitlossreserve;
    return this;
  }

  /**
   * Get profitlossreserve
   * @return profitlossreserve
   */
  @javax.annotation.Nullable
  public String getProfitlossreserve() {
    return profitlossreserve;
  }

  public void setProfitlossreserve(String profitlossreserve) {
    this.profitlossreserve = profitlossreserve;
  }


  public CapitalReserves reserves(String reserves) {
    this.reserves = reserves;
    return this;
  }

  /**
   * Get reserves
   * @return reserves
   */
  @javax.annotation.Nullable
  public String getReserves() {
    return reserves;
  }

  public void setReserves(String reserves) {
    this.reserves = reserves;
  }


  public CapitalReserves revalutationreserve(String revalutationreserve) {
    this.revalutationreserve = revalutationreserve;
    return this;
  }

  /**
   * Get revalutationreserve
   * @return revalutationreserve
   */
  @javax.annotation.Nullable
  public String getRevalutationreserve() {
    return revalutationreserve;
  }

  public void setRevalutationreserve(String revalutationreserve) {
    this.revalutationreserve = revalutationreserve;
  }


  public CapitalReserves shareholderfunds(String shareholderfunds) {
    this.shareholderfunds = shareholderfunds;
    return this;
  }

  /**
   * Get shareholderfunds
   * @return shareholderfunds
   */
  @javax.annotation.Nullable
  public String getShareholderfunds() {
    return shareholderfunds;
  }

  public void setShareholderfunds(String shareholderfunds) {
    this.shareholderfunds = shareholderfunds;
  }


  public CapitalReserves sundryreserves(String sundryreserves) {
    this.sundryreserves = sundryreserves;
    return this;
  }

  /**
   * Get sundryreserves
   * @return sundryreserves
   */
  @javax.annotation.Nullable
  public String getSundryreserves() {
    return sundryreserves;
  }

  public void setSundryreserves(String sundryreserves) {
    this.sundryreserves = sundryreserves;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapitalReserves capitalReserves = (CapitalReserves) o;
    return Objects.equals(this.capitalreserves, capitalReserves.capitalreserves) &&
        Objects.equals(this.networth, capitalReserves.networth) &&
        Objects.equals(this.paidupequity, capitalReserves.paidupequity) &&
        Objects.equals(this.profitlossreserve, capitalReserves.profitlossreserve) &&
        Objects.equals(this.reserves, capitalReserves.reserves) &&
        Objects.equals(this.revalutationreserve, capitalReserves.revalutationreserve) &&
        Objects.equals(this.shareholderfunds, capitalReserves.shareholderfunds) &&
        Objects.equals(this.sundryreserves, capitalReserves.sundryreserves);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capitalreserves, networth, paidupequity, profitlossreserve, reserves, revalutationreserve, shareholderfunds, sundryreserves);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapitalReserves {\n");
    sb.append("    capitalreserves: ").append(toIndentedString(capitalreserves)).append("\n");
    sb.append("    networth: ").append(toIndentedString(networth)).append("\n");
    sb.append("    paidupequity: ").append(toIndentedString(paidupequity)).append("\n");
    sb.append("    profitlossreserve: ").append(toIndentedString(profitlossreserve)).append("\n");
    sb.append("    reserves: ").append(toIndentedString(reserves)).append("\n");
    sb.append("    revalutationreserve: ").append(toIndentedString(revalutationreserve)).append("\n");
    sb.append("    shareholderfunds: ").append(toIndentedString(shareholderfunds)).append("\n");
    sb.append("    sundryreserves: ").append(toIndentedString(sundryreserves)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capitalreserves");
    openapiFields.add("networth");
    openapiFields.add("paidupequity");
    openapiFields.add("profitlossreserve");
    openapiFields.add("reserves");
    openapiFields.add("revalutationreserve");
    openapiFields.add("shareholderfunds");
    openapiFields.add("sundryreserves");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CapitalReserves
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapitalReserves.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapitalReserves is not found in the empty JSON string", CapitalReserves.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CapitalReserves.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapitalReserves` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capitalreserves") != null && !jsonObj.get("capitalreserves").isJsonNull()) && !jsonObj.get("capitalreserves").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capitalreserves` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capitalreserves").toString()));
      }
      if ((jsonObj.get("networth") != null && !jsonObj.get("networth").isJsonNull()) && !jsonObj.get("networth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networth").toString()));
      }
      if ((jsonObj.get("paidupequity") != null && !jsonObj.get("paidupequity").isJsonNull()) && !jsonObj.get("paidupequity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paidupequity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paidupequity").toString()));
      }
      if ((jsonObj.get("profitlossreserve") != null && !jsonObj.get("profitlossreserve").isJsonNull()) && !jsonObj.get("profitlossreserve").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profitlossreserve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profitlossreserve").toString()));
      }
      if ((jsonObj.get("reserves") != null && !jsonObj.get("reserves").isJsonNull()) && !jsonObj.get("reserves").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reserves` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reserves").toString()));
      }
      if ((jsonObj.get("revalutationreserve") != null && !jsonObj.get("revalutationreserve").isJsonNull()) && !jsonObj.get("revalutationreserve").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revalutationreserve` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revalutationreserve").toString()));
      }
      if ((jsonObj.get("shareholderfunds") != null && !jsonObj.get("shareholderfunds").isJsonNull()) && !jsonObj.get("shareholderfunds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderfunds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderfunds").toString()));
      }
      if ((jsonObj.get("sundryreserves") != null && !jsonObj.get("sundryreserves").isJsonNull()) && !jsonObj.get("sundryreserves").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sundryreserves` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sundryreserves").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapitalReserves.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapitalReserves' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapitalReserves> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapitalReserves.class));

       return (TypeAdapter<T>) new TypeAdapter<CapitalReserves>() {
           @Override
           public void write(JsonWriter out, CapitalReserves value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapitalReserves read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CapitalReserves given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CapitalReserves
   * @throws IOException if the JSON string is invalid with respect to CapitalReserves
   */
  public static CapitalReserves fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapitalReserves.class);
  }

  /**
   * Convert an instance of CapitalReserves to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

