/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer concession card details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EICDetailsConcessionCard {
  /**
   * The type of evidence used to prove eligibility for concessions
   */
  @JsonAdapter(ConcessionEvidenceTypeEnum.Adapter.class)
  public enum ConcessionEvidenceTypeEnum {
    PENSIONER_CONCESSION_CARD("Pensioner Concession Card"),
    
    GOLD_REPATRIATION_HEALTH_CARD("Gold Repatriation Health Card"),
    
    HEALTH_CARE_CARD("Health Care Card"),
    
    NSW_LIFE_SUPPORT_REBATE_WITHOUT_CONCESSION_CARD("NSW Life Support Rebate Without Concession Card"),
    
    QUEENSLAND_SENIORS_CARD("Queensland Seniors Card");

    private String value;

    ConcessionEvidenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcessionEvidenceTypeEnum fromValue(String value) {
      for (ConcessionEvidenceTypeEnum b : ConcessionEvidenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConcessionEvidenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcessionEvidenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcessionEvidenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConcessionEvidenceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConcessionEvidenceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCESSION_EVIDENCE_TYPE = "concessionEvidenceType";
  @SerializedName(SERIALIZED_NAME_CONCESSION_EVIDENCE_TYPE)
  private ConcessionEvidenceTypeEnum concessionEvidenceType;

  /**
   * Concessions linked to the customer&#39;s concession card
   */
  @JsonAdapter(ConcessionTypeEnum.Adapter.class)
  public enum ConcessionTypeEnum {
    LIFE_SUPPORT("Life Support"),
    
    MEDICAL_COOLING("Medical Cooling"),
    
    SERVICE_TO_PROPERTY_CHARGE("Service to Property Charge"),
    
    OFF_PEAK_ELECTRICITY("Off-Peak Electricity"),
    
    ANNUAL_ELECTRICITY("Annual Electricity"),
    
    TRANSFER_FEE_WAIVER("Transfer Fee Waiver"),
    
    EXCESS_ELECTRICITY("Excess Electricity"),
    
    CONTROLLED_LOAD("Controlled Load"),
    
    LOW_INCOME_HOUSEHOLD("Low Income Household"),
    
    MEDICAL_ENERGY("Medical Energy"),
    
    NSW_GOVERNMENT_LIFE_SUPPORT_REBATE("NSW Government Life Support Rebate"),
    
    QUEENSLAND_ELECTRICITY_REBATE("Queensland Electricity Rebate"),
    
    WINTER_GAS("Winter Gas"),
    
    EXCESS_GAS_CONSUMPTION("Excess Gas Consumption");

    private String value;

    ConcessionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConcessionTypeEnum fromValue(String value) {
      for (ConcessionTypeEnum b : ConcessionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConcessionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConcessionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConcessionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConcessionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConcessionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCESSION_TYPE = "concessionType";
  @SerializedName(SERIALIZED_NAME_CONCESSION_TYPE)
  private ConcessionTypeEnum concessionType;

  public static final String SERIALIZED_NAME_CUSTOMER_REFERENCE_NUMBER = "customerReferenceNumber";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REFERENCE_NUMBER)
  private String customerReferenceNumber;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public EICDetailsConcessionCard() {
  }

  public EICDetailsConcessionCard concessionEvidenceType(ConcessionEvidenceTypeEnum concessionEvidenceType) {
    this.concessionEvidenceType = concessionEvidenceType;
    return this;
  }

  /**
   * The type of evidence used to prove eligibility for concessions
   * @return concessionEvidenceType
   */
  @javax.annotation.Nonnull
  public ConcessionEvidenceTypeEnum getConcessionEvidenceType() {
    return concessionEvidenceType;
  }

  public void setConcessionEvidenceType(ConcessionEvidenceTypeEnum concessionEvidenceType) {
    this.concessionEvidenceType = concessionEvidenceType;
  }


  public EICDetailsConcessionCard concessionType(ConcessionTypeEnum concessionType) {
    this.concessionType = concessionType;
    return this;
  }

  /**
   * Concessions linked to the customer&#39;s concession card
   * @return concessionType
   */
  @javax.annotation.Nonnull
  public ConcessionTypeEnum getConcessionType() {
    return concessionType;
  }

  public void setConcessionType(ConcessionTypeEnum concessionType) {
    this.concessionType = concessionType;
  }


  public EICDetailsConcessionCard customerReferenceNumber(String customerReferenceNumber) {
    this.customerReferenceNumber = customerReferenceNumber;
    return this;
  }

  /**
   * Customer Reference Number (CRN) on the concession card
   * @return customerReferenceNumber
   */
  @javax.annotation.Nonnull
  public String getCustomerReferenceNumber() {
    return customerReferenceNumber;
  }

  public void setCustomerReferenceNumber(String customerReferenceNumber) {
    this.customerReferenceNumber = customerReferenceNumber;
  }


  public EICDetailsConcessionCard endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Concession card end expiry date
   * @return endDate
   */
  @javax.annotation.Nonnull
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public EICDetailsConcessionCard firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name on the concession card
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public EICDetailsConcessionCard lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name on the concession card
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public EICDetailsConcessionCard startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Concession card start date
   * @return startDate
   */
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EICDetailsConcessionCard eiCDetailsConcessionCard = (EICDetailsConcessionCard) o;
    return Objects.equals(this.concessionEvidenceType, eiCDetailsConcessionCard.concessionEvidenceType) &&
        Objects.equals(this.concessionType, eiCDetailsConcessionCard.concessionType) &&
        Objects.equals(this.customerReferenceNumber, eiCDetailsConcessionCard.customerReferenceNumber) &&
        Objects.equals(this.endDate, eiCDetailsConcessionCard.endDate) &&
        Objects.equals(this.firstName, eiCDetailsConcessionCard.firstName) &&
        Objects.equals(this.lastName, eiCDetailsConcessionCard.lastName) &&
        Objects.equals(this.startDate, eiCDetailsConcessionCard.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concessionEvidenceType, concessionType, customerReferenceNumber, endDate, firstName, lastName, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EICDetailsConcessionCard {\n");
    sb.append("    concessionEvidenceType: ").append(toIndentedString(concessionEvidenceType)).append("\n");
    sb.append("    concessionType: ").append(toIndentedString(concessionType)).append("\n");
    sb.append("    customerReferenceNumber: ").append(toIndentedString(customerReferenceNumber)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concessionEvidenceType");
    openapiFields.add("concessionType");
    openapiFields.add("customerReferenceNumber");
    openapiFields.add("endDate");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("concessionEvidenceType");
    openapiRequiredFields.add("concessionType");
    openapiRequiredFields.add("customerReferenceNumber");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("startDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EICDetailsConcessionCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EICDetailsConcessionCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EICDetailsConcessionCard is not found in the empty JSON string", EICDetailsConcessionCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EICDetailsConcessionCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EICDetailsConcessionCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EICDetailsConcessionCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("concessionEvidenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concessionEvidenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concessionEvidenceType").toString()));
      }
      // validate the required field `concessionEvidenceType`
      ConcessionEvidenceTypeEnum.validateJsonElement(jsonObj.get("concessionEvidenceType"));
      if (!jsonObj.get("concessionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `concessionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("concessionType").toString()));
      }
      // validate the required field `concessionType`
      ConcessionTypeEnum.validateJsonElement(jsonObj.get("concessionType"));
      if (!jsonObj.get("customerReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerReferenceNumber").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EICDetailsConcessionCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EICDetailsConcessionCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EICDetailsConcessionCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EICDetailsConcessionCard.class));

       return (TypeAdapter<T>) new TypeAdapter<EICDetailsConcessionCard>() {
           @Override
           public void write(JsonWriter out, EICDetailsConcessionCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EICDetailsConcessionCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EICDetailsConcessionCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EICDetailsConcessionCard
   * @throws IOException if the JSON string is invalid with respect to EICDetailsConcessionCard
   */
  public static EICDetailsConcessionCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EICDetailsConcessionCard.class);
  }

  /**
   * Convert an instance of EICDetailsConcessionCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

