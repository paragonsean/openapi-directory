/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptedDocumentResultObject;
import org.openapitools.client.model.DocumentIndustryUtilityConsentResultObject;
import org.openapitools.client.model.DocumentIndustryUtilityProcessResultObject;
import org.openapitools.client.model.DocumentIndustryUtilitySwitchResultObject;
import org.openapitools.client.model.EICRequest;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.IdentityDocumentObject;
import org.openapitools.client.model.SwitchRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndustryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IndustryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndustryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProcessIndustryUtilityDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProcessIndustryUtilityDocumentCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/new/utility/process/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planLimit", planLimit));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProcessIndustryUtilityDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling createProcessIndustryUtilityDocument(Async)");
        }

        return createProcessIndustryUtilityDocumentCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, _callback);

    }

    /**
     * Create Document and Run Utility Price Comparison.
     * Create a document object. This is then processed to extract useful information, just like a normal OCR scan. The service will then push the document through an industry specific comparison process, where the details are used to find a better plan, based on the bill.  100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @return DocumentIndustryUtilityProcessResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentIndustryUtilityProcessResultObject createProcessIndustryUtilityDocument(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document) throws ApiException {
        ApiResponse<DocumentIndustryUtilityProcessResultObject> localVarResp = createProcessIndustryUtilityDocumentWithHttpInfo(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, planLimit, document);
        return localVarResp.getData();
    }

    /**
     * Create Document and Run Utility Price Comparison.
     * Create a document object. This is then processed to extract useful information, just like a normal OCR scan. The service will then push the document through an industry specific comparison process, where the details are used to find a better plan, based on the bill.  100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @return ApiResponse&lt;DocumentIndustryUtilityProcessResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentIndustryUtilityProcessResultObject> createProcessIndustryUtilityDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document) throws ApiException {
        okhttp3.Call localVarCall = createProcessIndustryUtilityDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, null);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityProcessResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Document and Run Utility Price Comparison. (asynchronously)
     * Create a document object. This is then processed to extract useful information, just like a normal OCR scan. The service will then push the document through an industry specific comparison process, where the details are used to find a better plan, based on the bill.  100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProcessIndustryUtilityDocumentAsync(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback<DocumentIndustryUtilityProcessResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProcessIndustryUtilityDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, _callback);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityProcessResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProcessIndustryUtilityDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/{documentId}/utility/process/compare"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planLimit", planLimit));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcessIndustryUtilityDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocument(Async)");
        }

        return updateProcessIndustryUtilityDocumentCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, _callback);

    }

    /**
     * Update Document and Run Utility Price Comparison.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details or simply request that the document be re-processed through the industry comparison service.   100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @return DocumentIndustryUtilityProcessResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentIndustryUtilityProcessResultObject updateProcessIndustryUtilityDocument(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document) throws ApiException {
        ApiResponse<DocumentIndustryUtilityProcessResultObject> localVarResp = updateProcessIndustryUtilityDocumentWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, planLimit, document);
        return localVarResp.getData();
    }

    /**
     * Update Document and Run Utility Price Comparison.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details or simply request that the document be re-processed through the industry comparison service.   100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @return ApiResponse&lt;DocumentIndustryUtilityProcessResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentIndustryUtilityProcessResultObject> updateProcessIndustryUtilityDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document) throws ApiException {
        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, null);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityProcessResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Document and Run Utility Price Comparison. (asynchronously)
     * Using a previously uploaded but incomplete document, you can optionally supply updated details or simply request that the document be re-processed through the industry comparison service.   100&#39;s of datapoints are accurately extracted from the uploaded document. This data is then used to compare the bill against the whole market. A personalised comparison is returned that is a best fit for the customer&#39;s energy profile.  * NOTE: It is expected that the type of document being uploaded will be a PDF and the idType is UTILITY_BILL. (These values will be set automatically if not supplied).    You can optionally include the utility name (e.g. Origin Energy) in the idSubType if you wish. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param planLimit The maximum number of plans to return (optional, default to 30)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors.  Returns the results of the utility comparison directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Integer planLimit, IdentityDocumentObject document, final ApiCallback<DocumentIndustryUtilityProcessResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, planLimit, document, _callback);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityProcessResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProcessIndustryUtilityDocumentConsent
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param consentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider.  Returns the results of the provision of explicit informed consent directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentConsentCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, EICRequest consentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentRequest;

        // create path and map variables
        String localVarPath = "/document/{documentId}/utility/process/consent"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcessIndustryUtilityDocumentConsentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, EICRequest consentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocumentConsent(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocumentConsent(Async)");
        }

        return updateProcessIndustryUtilityDocumentConsentCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, consentRequest, _callback);

    }

    /**
     * Provide Explicit Consent to Switch Utility Plans.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   Before entering into a contract with a new energy retailer, consumers are first obliged to review the retailer&#39;s contractual terms and conditions, confirm they understand these terms as well as give explicit, informed consent (EIC) for the switch to occur. This API call retrieves all information        that must be displayed in order for a compliant EIC to be captured from a consumer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param consentRequest  (optional)
     * @return DocumentIndustryUtilityConsentResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider.  Returns the results of the provision of explicit informed consent directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentIndustryUtilityConsentResultObject updateProcessIndustryUtilityDocumentConsent(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, EICRequest consentRequest) throws ApiException {
        ApiResponse<DocumentIndustryUtilityConsentResultObject> localVarResp = updateProcessIndustryUtilityDocumentConsentWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, consentRequest);
        return localVarResp.getData();
    }

    /**
     * Provide Explicit Consent to Switch Utility Plans.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   Before entering into a contract with a new energy retailer, consumers are first obliged to review the retailer&#39;s contractual terms and conditions, confirm they understand these terms as well as give explicit, informed consent (EIC) for the switch to occur. This API call retrieves all information        that must be displayed in order for a compliant EIC to be captured from a consumer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param consentRequest  (optional)
     * @return ApiResponse&lt;DocumentIndustryUtilityConsentResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider.  Returns the results of the provision of explicit informed consent directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentIndustryUtilityConsentResultObject> updateProcessIndustryUtilityDocumentConsentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, EICRequest consentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentConsentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, consentRequest, null);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityConsentResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide Explicit Consent to Switch Utility Plans. (asynchronously)
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   Before entering into a contract with a new energy retailer, consumers are first obliged to review the retailer&#39;s contractual terms and conditions, confirm they understand these terms as well as give explicit, informed consent (EIC) for the switch to occur. This API call retrieves all information        that must be displayed in order for a compliant EIC to be captured from a consumer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param consentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider.  Returns the results of the provision of explicit informed consent directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentConsentAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, EICRequest consentRequest, final ApiCallback<DocumentIndustryUtilityConsentResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentConsentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, consentRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilityConsentResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProcessIndustryUtilityDocumentSwitch
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param switchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider. Returns the results of the utility switch over directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentSwitchCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, SwitchRequest switchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = switchRequest;

        // create path and map variables
        String localVarPath = "/document/{documentId}/utility/process/switch"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcessIndustryUtilityDocumentSwitchValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, SwitchRequest switchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateProcessIndustryUtilityDocumentSwitch(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateProcessIndustryUtilityDocumentSwitch(Async)");
        }

        return updateProcessIndustryUtilityDocumentSwitchCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, switchRequest, _callback);

    }

    /**
     * Initiate Switching of Utility Plan.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   The bill payer has uploaded their current bill, selected a new plan, accepted the terms and conditions and given their consent for the switch to occur. This API call will finalise the switch request and send all the customers data along with the requested plan to the selected retailer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param switchRequest  (optional)
     * @return DocumentIndustryUtilitySwitchResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider. Returns the results of the utility switch over directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentIndustryUtilitySwitchResultObject updateProcessIndustryUtilityDocumentSwitch(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, SwitchRequest switchRequest) throws ApiException {
        ApiResponse<DocumentIndustryUtilitySwitchResultObject> localVarResp = updateProcessIndustryUtilityDocumentSwitchWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, switchRequest);
        return localVarResp.getData();
    }

    /**
     * Initiate Switching of Utility Plan.
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   The bill payer has uploaded their current bill, selected a new plan, accepted the terms and conditions and given their consent for the switch to occur. This API call will finalise the switch request and send all the customers data along with the requested plan to the selected retailer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param switchRequest  (optional)
     * @return ApiResponse&lt;DocumentIndustryUtilitySwitchResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider. Returns the results of the utility switch over directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentIndustryUtilitySwitchResultObject> updateProcessIndustryUtilityDocumentSwitchWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, SwitchRequest switchRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentSwitchValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, switchRequest, null);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilitySwitchResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Switching of Utility Plan. (asynchronously)
     * Using a previously uploaded and processed document, the user must provide explicit consent before being able to call the /switch function.   The bill payer has uploaded their current bill, selected a new plan, accepted the terms and conditions and given their consent for the switch to occur. This API call will finalise the switch request and send all the customers data along with the requested plan to the selected retailer.  * NOTE: as part of this call, you must provide a previously returned corellationId that is associated with this document and the returned plan options. Failure to do so will result in an error response. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param switchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results directly from the service provider. Returns the results of the utility switch over directly from the service provider.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProcessIndustryUtilityDocumentSwitchAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, SwitchRequest switchRequest, final ApiCallback<DocumentIndustryUtilitySwitchResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProcessIndustryUtilityDocumentSwitchValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, switchRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentIndustryUtilitySwitchResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
