/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EntityProfileKYCMatchResultObjectMatchTypesValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of all KYC matches
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityProfileKYCMatchResultObject {
  public static final String SERIALIZED_NAME_MATCH_COUNT = "matchCount";
  @SerializedName(SERIALIZED_NAME_MATCH_COUNT)
  private Integer matchCount;

  public static final String SERIALIZED_NAME_MATCH_COUNT_REQUIRED = "matchCountRequired";
  @SerializedName(SERIALIZED_NAME_MATCH_COUNT_REQUIRED)
  private Integer matchCountRequired;

  public static final String SERIALIZED_NAME_MATCH_TYPES = "matchTypes";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPES)
  private Map<String, EntityProfileKYCMatchResultObjectMatchTypesValue> matchTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public EntityProfileKYCMatchResultObject() {
  }

  public EntityProfileKYCMatchResultObject matchCount(Integer matchCount) {
    this.matchCount = matchCount;
    return this;
  }

  /**
   * Number of matches for this set of match types. In other words the sum of the matchCounts in the matchTypes map. Note that for match sets that include government ID (gov_id) this will not neccessaily be the count of matched sources. 
   * @return matchCount
   */
  @javax.annotation.Nullable
  public Integer getMatchCount() {
    return matchCount;
  }

  public void setMatchCount(Integer matchCount) {
    this.matchCount = matchCount;
  }


  public EntityProfileKYCMatchResultObject matchCountRequired(Integer matchCountRequired) {
    this.matchCountRequired = matchCountRequired;
    return this;
  }

  /**
   * Number of distinct matches (sources and/or matched government ID documents) required for this set of match types. 
   * @return matchCountRequired
   */
  @javax.annotation.Nullable
  public Integer getMatchCountRequired() {
    return matchCountRequired;
  }

  public void setMatchCountRequired(Integer matchCountRequired) {
    this.matchCountRequired = matchCountRequired;
  }


  public EntityProfileKYCMatchResultObject matchTypes(Map<String, EntityProfileKYCMatchResultObjectMatchTypesValue> matchTypes) {
    this.matchTypes = matchTypes;
    return this;
  }

  public EntityProfileKYCMatchResultObject putMatchTypesItem(String key, EntityProfileKYCMatchResultObjectMatchTypesValue matchTypesItem) {
    if (this.matchTypes == null) {
      this.matchTypes = new HashMap<>();
    }
    this.matchTypes.put(key, matchTypesItem);
    return this;
  }

  /**
   * The match types that this overall count and result refer to. Currently one or more of: - name - address - dob - gender - gov_id - other_id  These will be keys in a map whose values hold the values for the individual match types. The resultant structure would look like the following. Here dob has zero matches and is not verfied but it was check, so other than the checked flag the value object is simply empty. A completely empty object would imply that match type was not checked.      \&quot;matchTypes\&quot;: {       \&quot;address\&quot;: {         \&quot;matchCount\&quot;: 1,         \&quot;matchSources\&quot;: [ \&quot;au-elec-roll\&quot; ],         \&quot;checked\&quot;: true,         \&quot;verified\&quot;: true       },       \&quot;dob\&quot;: {         \&quot;checked\&quot;: true       }     }  So for a one_plus KYC check there will be two EntityProfileKYCMatchResultObject records. One for &#39;name&#39; and one for &#39;address, dob&#39; (like the sample above). 
   * @return matchTypes
   */
  @javax.annotation.Nullable
  public Map<String, EntityProfileKYCMatchResultObjectMatchTypesValue> getMatchTypes() {
    return matchTypes;
  }

  public void setMatchTypes(Map<String, EntityProfileKYCMatchResultObjectMatchTypesValue> matchTypes) {
    this.matchTypes = matchTypes;
  }


  public EntityProfileKYCMatchResultObject verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * True if there are enough matches to meet the requirement
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityProfileKYCMatchResultObject entityProfileKYCMatchResultObject = (EntityProfileKYCMatchResultObject) o;
    return Objects.equals(this.matchCount, entityProfileKYCMatchResultObject.matchCount) &&
        Objects.equals(this.matchCountRequired, entityProfileKYCMatchResultObject.matchCountRequired) &&
        Objects.equals(this.matchTypes, entityProfileKYCMatchResultObject.matchTypes) &&
        Objects.equals(this.verified, entityProfileKYCMatchResultObject.verified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchCount, matchCountRequired, matchTypes, verified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityProfileKYCMatchResultObject {\n");
    sb.append("    matchCount: ").append(toIndentedString(matchCount)).append("\n");
    sb.append("    matchCountRequired: ").append(toIndentedString(matchCountRequired)).append("\n");
    sb.append("    matchTypes: ").append(toIndentedString(matchTypes)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchCount");
    openapiFields.add("matchCountRequired");
    openapiFields.add("matchTypes");
    openapiFields.add("verified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityProfileKYCMatchResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityProfileKYCMatchResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityProfileKYCMatchResultObject is not found in the empty JSON string", EntityProfileKYCMatchResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityProfileKYCMatchResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityProfileKYCMatchResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityProfileKYCMatchResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityProfileKYCMatchResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityProfileKYCMatchResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityProfileKYCMatchResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityProfileKYCMatchResultObject>() {
           @Override
           public void write(JsonWriter out, EntityProfileKYCMatchResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityProfileKYCMatchResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityProfileKYCMatchResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityProfileKYCMatchResultObject
   * @throws IOException if the JSON string is invalid with respect to EntityProfileKYCMatchResultObject
   */
  public static EntityProfileKYCMatchResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityProfileKYCMatchResultObject.class);
  }

  /**
   * Convert an instance of EntityProfileKYCMatchResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

