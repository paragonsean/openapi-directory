/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Benefits;
import org.openapitools.client.model.Conditions;
import org.openapitools.client.model.Contract;
import org.openapitools.client.model.Fees;
import org.openapitools.client.model.NameValue;
import org.openapitools.client.model.PlanDiscounts;
import org.openapitools.client.model.Rates;
import org.openapitools.client.model.Retailer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All information associated with a given plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Plan {
  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private Benefits benefits;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private Conditions conditions;

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private Contract contract;

  public static final String SERIALIZED_NAME_DEFAULT_OFFER_MESSAGE = "defaultOfferMessage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_OFFER_MESSAGE)
  private String defaultOfferMessage;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_REQUIRED = "directDebitRequired";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_REQUIRED)
  private Boolean directDebitRequired;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private PlanDiscounts discounts;

  public static final String SERIALIZED_NAME_ESTIMATED_BASE_COST = "estimatedBaseCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_BASE_COST)
  private BigDecimal estimatedBaseCost;

  public static final String SERIALIZED_NAME_ESTIMATED_SAVING = "estimatedSaving";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SAVING)
  private BigDecimal estimatedSaving;

  public static final String SERIALIZED_NAME_ESTIMATED_TOTAL_COST = "estimatedTotalCost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TOTAL_COST)
  private BigDecimal estimatedTotalCost;

  public static final String SERIALIZED_NAME_FEES_AND_CHARGES = "feesAndCharges";
  @SerializedName(SERIALIZED_NAME_FEES_AND_CHARGES)
  private Fees feesAndCharges;

  public static final String SERIALIZED_NAME_GREEN_OPTIONS = "greenOptions";
  @SerializedName(SERIALIZED_NAME_GREEN_OPTIONS)
  private NameValue greenOptions;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAY_ON_TIME_REQUIRED = "payOnTimeRequired";
  @SerializedName(SERIALIZED_NAME_PAY_ON_TIME_REQUIRED)
  private Boolean payOnTimeRequired;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private NameValue paymentOptions;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private Rates rates;

  public static final String SERIALIZED_NAME_RETAILER = "retailer";
  @SerializedName(SERIALIZED_NAME_RETAILER)
  private Retailer retailer;

  /**
   * The type of energy plan * &#x60;SR&#x60; - Single Rate * &#x60;TOU&#x60; - Time Of Use
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SR("SR"),
    
    TOU("TOU");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Plan() {
  }

  public Plan benefits(Benefits benefits) {
    this.benefits = benefits;
    return this;
  }

  /**
   * Get benefits
   * @return benefits
   */
  @javax.annotation.Nullable
  public Benefits getBenefits() {
    return benefits;
  }

  public void setBenefits(Benefits benefits) {
    this.benefits = benefits;
  }


  public Plan conditions(Conditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public Conditions getConditions() {
    return conditions;
  }

  public void setConditions(Conditions conditions) {
    this.conditions = conditions;
  }


  public Plan contract(Contract contract) {
    this.contract = contract;
    return this;
  }

  /**
   * Get contract
   * @return contract
   */
  @javax.annotation.Nullable
  public Contract getContract() {
    return contract;
  }

  public void setContract(Contract contract) {
    this.contract = contract;
  }


  public Plan defaultOfferMessage(String defaultOfferMessage) {
    this.defaultOfferMessage = defaultOfferMessage;
    return this;
  }

  /**
   * Default Offer (DMO/VDO) text to be displayed for this plan
   * @return defaultOfferMessage
   */
  @javax.annotation.Nonnull
  public String getDefaultOfferMessage() {
    return defaultOfferMessage;
  }

  public void setDefaultOfferMessage(String defaultOfferMessage) {
    this.defaultOfferMessage = defaultOfferMessage;
  }


  public Plan directDebitRequired(Boolean directDebitRequired) {
    this.directDebitRequired = directDebitRequired;
    return this;
  }

  /**
   * Is payment by direct debit required in order to subscribe to this plan
   * @return directDebitRequired
   */
  @javax.annotation.Nonnull
  public Boolean getDirectDebitRequired() {
    return directDebitRequired;
  }

  public void setDirectDebitRequired(Boolean directDebitRequired) {
    this.directDebitRequired = directDebitRequired;
  }


  public Plan discounts(PlanDiscounts discounts) {
    this.discounts = discounts;
    return this;
  }

  /**
   * Get discounts
   * @return discounts
   */
  @javax.annotation.Nullable
  public PlanDiscounts getDiscounts() {
    return discounts;
  }

  public void setDiscounts(PlanDiscounts discounts) {
    this.discounts = discounts;
  }


  public Plan estimatedBaseCost(BigDecimal estimatedBaseCost) {
    this.estimatedBaseCost = estimatedBaseCost;
    return this;
  }

  /**
   * Estimated cost of this plan, based on the usage from the uploaded bill, with no conditional discounts applied. If this plan offers no conditional discounts the estimatedTotalCost and the estimatedBaseCost will be the same.
   * @return estimatedBaseCost
   */
  @javax.annotation.Nonnull
  public BigDecimal getEstimatedBaseCost() {
    return estimatedBaseCost;
  }

  public void setEstimatedBaseCost(BigDecimal estimatedBaseCost) {
    this.estimatedBaseCost = estimatedBaseCost;
  }


  public Plan estimatedSaving(BigDecimal estimatedSaving) {
    this.estimatedSaving = estimatedSaving;
    return this;
  }

  /**
   * The estimated saving the customer could have realised if they had been on this plan during the billing period
   * @return estimatedSaving
   */
  @javax.annotation.Nonnull
  public BigDecimal getEstimatedSaving() {
    return estimatedSaving;
  }

  public void setEstimatedSaving(BigDecimal estimatedSaving) {
    this.estimatedSaving = estimatedSaving;
  }


  public Plan estimatedTotalCost(BigDecimal estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
    return this;
  }

  /**
   * Estimated cost of this plan, based on the usage from uploaded bill, with all conditional discounts applied.
   * @return estimatedTotalCost
   */
  @javax.annotation.Nonnull
  public BigDecimal getEstimatedTotalCost() {
    return estimatedTotalCost;
  }

  public void setEstimatedTotalCost(BigDecimal estimatedTotalCost) {
    this.estimatedTotalCost = estimatedTotalCost;
  }


  public Plan feesAndCharges(Fees feesAndCharges) {
    this.feesAndCharges = feesAndCharges;
    return this;
  }

  /**
   * Get feesAndCharges
   * @return feesAndCharges
   */
  @javax.annotation.Nullable
  public Fees getFeesAndCharges() {
    return feesAndCharges;
  }

  public void setFeesAndCharges(Fees feesAndCharges) {
    this.feesAndCharges = feesAndCharges;
  }


  public Plan greenOptions(NameValue greenOptions) {
    this.greenOptions = greenOptions;
    return this;
  }

  /**
   * Get greenOptions
   * @return greenOptions
   */
  @javax.annotation.Nullable
  public NameValue getGreenOptions() {
    return greenOptions;
  }

  public void setGreenOptions(NameValue greenOptions) {
    this.greenOptions = greenOptions;
  }


  public Plan id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this plan. This ID is passed when calling the switch API.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Plan name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the plan
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Plan payOnTimeRequired(Boolean payOnTimeRequired) {
    this.payOnTimeRequired = payOnTimeRequired;
    return this;
  }

  /**
   * Is pay on time required in order to subscribe to this plan
   * @return payOnTimeRequired
   */
  @javax.annotation.Nonnull
  public Boolean getPayOnTimeRequired() {
    return payOnTimeRequired;
  }

  public void setPayOnTimeRequired(Boolean payOnTimeRequired) {
    this.payOnTimeRequired = payOnTimeRequired;
  }


  public Plan paymentOptions(NameValue paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  /**
   * Get paymentOptions
   * @return paymentOptions
   */
  @javax.annotation.Nullable
  public NameValue getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(NameValue paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public Plan rates(Rates rates) {
    this.rates = rates;
    return this;
  }

  /**
   * Get rates
   * @return rates
   */
  @javax.annotation.Nonnull
  public Rates getRates() {
    return rates;
  }

  public void setRates(Rates rates) {
    this.rates = rates;
  }


  public Plan retailer(Retailer retailer) {
    this.retailer = retailer;
    return this;
  }

  /**
   * Get retailer
   * @return retailer
   */
  @javax.annotation.Nonnull
  public Retailer getRetailer() {
    return retailer;
  }

  public void setRetailer(Retailer retailer) {
    this.retailer = retailer;
  }


  public Plan type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of energy plan * &#x60;SR&#x60; - Single Rate * &#x60;TOU&#x60; - Time Of Use
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Plan url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to BPID (Basic Plan Information Document (NSW, SA, QLD, ACT)) or EPFS (Energy Price Fact Sheet (VIC))
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plan plan = (Plan) o;
    return Objects.equals(this.benefits, plan.benefits) &&
        Objects.equals(this.conditions, plan.conditions) &&
        Objects.equals(this.contract, plan.contract) &&
        Objects.equals(this.defaultOfferMessage, plan.defaultOfferMessage) &&
        Objects.equals(this.directDebitRequired, plan.directDebitRequired) &&
        Objects.equals(this.discounts, plan.discounts) &&
        Objects.equals(this.estimatedBaseCost, plan.estimatedBaseCost) &&
        Objects.equals(this.estimatedSaving, plan.estimatedSaving) &&
        Objects.equals(this.estimatedTotalCost, plan.estimatedTotalCost) &&
        Objects.equals(this.feesAndCharges, plan.feesAndCharges) &&
        Objects.equals(this.greenOptions, plan.greenOptions) &&
        Objects.equals(this.id, plan.id) &&
        Objects.equals(this.name, plan.name) &&
        Objects.equals(this.payOnTimeRequired, plan.payOnTimeRequired) &&
        Objects.equals(this.paymentOptions, plan.paymentOptions) &&
        Objects.equals(this.rates, plan.rates) &&
        Objects.equals(this.retailer, plan.retailer) &&
        Objects.equals(this.type, plan.type) &&
        Objects.equals(this.url, plan.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefits, conditions, contract, defaultOfferMessage, directDebitRequired, discounts, estimatedBaseCost, estimatedSaving, estimatedTotalCost, feesAndCharges, greenOptions, id, name, payOnTimeRequired, paymentOptions, rates, retailer, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plan {\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    defaultOfferMessage: ").append(toIndentedString(defaultOfferMessage)).append("\n");
    sb.append("    directDebitRequired: ").append(toIndentedString(directDebitRequired)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    estimatedBaseCost: ").append(toIndentedString(estimatedBaseCost)).append("\n");
    sb.append("    estimatedSaving: ").append(toIndentedString(estimatedSaving)).append("\n");
    sb.append("    estimatedTotalCost: ").append(toIndentedString(estimatedTotalCost)).append("\n");
    sb.append("    feesAndCharges: ").append(toIndentedString(feesAndCharges)).append("\n");
    sb.append("    greenOptions: ").append(toIndentedString(greenOptions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    payOnTimeRequired: ").append(toIndentedString(payOnTimeRequired)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    retailer: ").append(toIndentedString(retailer)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefits");
    openapiFields.add("conditions");
    openapiFields.add("contract");
    openapiFields.add("defaultOfferMessage");
    openapiFields.add("directDebitRequired");
    openapiFields.add("discounts");
    openapiFields.add("estimatedBaseCost");
    openapiFields.add("estimatedSaving");
    openapiFields.add("estimatedTotalCost");
    openapiFields.add("feesAndCharges");
    openapiFields.add("greenOptions");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("payOnTimeRequired");
    openapiFields.add("paymentOptions");
    openapiFields.add("rates");
    openapiFields.add("retailer");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultOfferMessage");
    openapiRequiredFields.add("directDebitRequired");
    openapiRequiredFields.add("estimatedBaseCost");
    openapiRequiredFields.add("estimatedSaving");
    openapiRequiredFields.add("estimatedTotalCost");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("payOnTimeRequired");
    openapiRequiredFields.add("rates");
    openapiRequiredFields.add("retailer");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Plan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Plan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Plan is not found in the empty JSON string", Plan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Plan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Plan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Plan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `benefits`
      if (jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) {
        Benefits.validateJsonElement(jsonObj.get("benefits"));
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        Conditions.validateJsonElement(jsonObj.get("conditions"));
      }
      // validate the optional field `contract`
      if (jsonObj.get("contract") != null && !jsonObj.get("contract").isJsonNull()) {
        Contract.validateJsonElement(jsonObj.get("contract"));
      }
      if (!jsonObj.get("defaultOfferMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultOfferMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultOfferMessage").toString()));
      }
      // validate the optional field `discounts`
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        PlanDiscounts.validateJsonElement(jsonObj.get("discounts"));
      }
      // validate the optional field `feesAndCharges`
      if (jsonObj.get("feesAndCharges") != null && !jsonObj.get("feesAndCharges").isJsonNull()) {
        Fees.validateJsonElement(jsonObj.get("feesAndCharges"));
      }
      // validate the optional field `greenOptions`
      if (jsonObj.get("greenOptions") != null && !jsonObj.get("greenOptions").isJsonNull()) {
        NameValue.validateJsonElement(jsonObj.get("greenOptions"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `paymentOptions`
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull()) {
        NameValue.validateJsonElement(jsonObj.get("paymentOptions"));
      }
      // validate the required field `rates`
      Rates.validateJsonElement(jsonObj.get("rates"));
      // validate the required field `retailer`
      Retailer.validateJsonElement(jsonObj.get("retailer"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Plan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Plan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Plan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Plan.class));

       return (TypeAdapter<T>) new TypeAdapter<Plan>() {
           @Override
           public void write(JsonWriter out, Plan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Plan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Plan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Plan
   * @throws IOException if the JSON string is invalid with respect to Plan
   */
  public static Plan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Plan.class);
  }

  /**
   * Convert an instance of Plan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

