/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The reason why the scanData in a response is missing. - \&quot;NORMAL\&quot;: The scanData was retrieved and is included. If it is empty then it was never provided or was provided empty. - \&quot;EXCLUDED\&quot;: The retrieval request was not for &#39;full&#39; data, or the object has &#39;ScanDelete&#39; set so the scanData is not included - \&quot;FAILED\&quot;: The scanData could not be retrieved from the secure document store.  The enumScanDataRetrievalState will not usually be set in a request. If a ScannedDocumentObject in a response has a &#39;FAILED&#39; retrieval state then that object should not be sent back in a future possible update. It should either be omitted or the original data should be resent if it is available from another source. However it is safe to send the object in an update with the state received in a response. Any state other than &#39;NORMAL&#39; (or &#39;&#39;) will cause the blank scanData to be ignored, but other fields in the object will be updated if needed. 
 */
@JsonAdapter(EnumScanDataRetrievalState.Adapter.class)
public enum EnumScanDataRetrievalState {
  
  NORMAL("NORMAL"),
  
  EXCLUDED("EXCLUDED"),
  
  FAILED("FAILED");

  private String value;

  EnumScanDataRetrievalState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnumScanDataRetrievalState fromValue(String value) {
    for (EnumScanDataRetrievalState b : EnumScanDataRetrievalState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnumScanDataRetrievalState> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnumScanDataRetrievalState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnumScanDataRetrievalState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnumScanDataRetrievalState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EnumScanDataRetrievalState.fromValue(value);
  }
}

