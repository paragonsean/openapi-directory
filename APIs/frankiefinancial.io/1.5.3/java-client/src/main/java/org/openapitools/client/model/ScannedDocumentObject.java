/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EnumMIMEType;
import org.openapitools.client.model.EnumScanDataRetrievalState;
import org.openapitools.client.model.EnumScanSide;
import org.openapitools.client.model.EnumScanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * the document to be attached and optionally scanned (if supported)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScannedDocumentObject {
  public static final String SERIALIZED_NAME_SCAN_DELETE = "ScanDelete";
  @SerializedName(SERIALIZED_NAME_SCAN_DELETE)
  private Boolean scanDelete;

  public static final String SERIALIZED_NAME_SCAN_CREATED = "scanCreated";
  @SerializedName(SERIALIZED_NAME_SCAN_CREATED)
  private OffsetDateTime scanCreated;

  public static final String SERIALIZED_NAME_SCAN_DATA = "scanData";
  @SerializedName(SERIALIZED_NAME_SCAN_DATA)
  private byte[] scanData;

  public static final String SERIALIZED_NAME_SCAN_DATA_RETRIEVAL_STATE = "scanDataRetrievalState";
  @SerializedName(SERIALIZED_NAME_SCAN_DATA_RETRIEVAL_STATE)
  private EnumScanDataRetrievalState scanDataRetrievalState;

  public static final String SERIALIZED_NAME_SCAN_DOC_ID = "scanDocId";
  @SerializedName(SERIALIZED_NAME_SCAN_DOC_ID)
  private UUID scanDocId;

  public static final String SERIALIZED_NAME_SCAN_FILENAME = "scanFilename";
  @SerializedName(SERIALIZED_NAME_SCAN_FILENAME)
  private String scanFilename;

  public static final String SERIALIZED_NAME_SCAN_M_I_M_E = "scanMIME";
  @SerializedName(SERIALIZED_NAME_SCAN_M_I_M_E)
  private EnumMIMEType scanMIME;

  public static final String SERIALIZED_NAME_SCAN_PAGE_NUM = "scanPageNum";
  @SerializedName(SERIALIZED_NAME_SCAN_PAGE_NUM)
  private Integer scanPageNum;

  public static final String SERIALIZED_NAME_SCAN_SIDE = "scanSide";
  @SerializedName(SERIALIZED_NAME_SCAN_SIDE)
  private EnumScanSide scanSide;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "scanType";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private EnumScanType scanType;

  public ScannedDocumentObject() {
  }

  public ScannedDocumentObject scanDelete(Boolean scanDelete) {
    this.scanDelete = scanDelete;
    return this;
  }

  /**
   * Used as a way of indicating to the service that the original scanned document is not to be kept after it has been processed. We will retain any metadata and the results of processing (where required by regulation or the customer), but the original file uploaded will eventually be remnoved once processing is complete.   If ScanDelete is set to true, any call with /full at the end will still not return the file contents, regardless of whether the file has been deleted yet (the deletion process is a background task that can take a few minutes to occur) 
   * @return scanDelete
   */
  @javax.annotation.Nullable
  public Boolean getScanDelete() {
    return scanDelete;
  }

  public void setScanDelete(Boolean scanDelete) {
    this.scanDelete = scanDelete;
  }


  public ScannedDocumentObject scanCreated(OffsetDateTime scanCreated) {
    this.scanCreated = scanCreated;
    return this;
  }

  /**
   * The date and time the scan was created. Not the date of the scanned document, which should be in the idIssued attribute of the document that owns this scan. 
   * @return scanCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScanCreated() {
    return scanCreated;
  }

  public void setScanCreated(OffsetDateTime scanCreated) {
    this.scanCreated = scanCreated;
  }


  public ScannedDocumentObject scanData(byte[] scanData) {
    this.scanData = scanData;
    return this;
  }

  /**
   * Base64 encoded string of a photo or scan of an ID document to be verified. If supplied and of a supported type, the Frankie service will attempt to use OCR tech to extract the data from the scanned doc/image.  In a result message, this field will be left blank, unless the \&quot;full\&quot; action is requested. 
   * @return scanData
   */
  @javax.annotation.Nullable
  public byte[] getScanData() {
    return scanData;
  }

  public void setScanData(byte[] scanData) {
    this.scanData = scanData;
  }


  public ScannedDocumentObject scanDataRetrievalState(EnumScanDataRetrievalState scanDataRetrievalState) {
    this.scanDataRetrievalState = scanDataRetrievalState;
    return this;
  }

  /**
   * Get scanDataRetrievalState
   * @return scanDataRetrievalState
   */
  @javax.annotation.Nullable
  public EnumScanDataRetrievalState getScanDataRetrievalState() {
    return scanDataRetrievalState;
  }

  public void setScanDataRetrievalState(EnumScanDataRetrievalState scanDataRetrievalState) {
    this.scanDataRetrievalState = scanDataRetrievalState;
  }


  public ScannedDocumentObject scanDocId(UUID scanDocId) {
    this.scanDocId = scanDocId;
    return this;
  }

  /**
   * When an document scan is created/uploaded, it is assigned a scanDocId. You&#39;ll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you&#39;re uploading more/updated data. 
   * @return scanDocId
   */
  @javax.annotation.Nullable
  public UUID getScanDocId() {
    return scanDocId;
  }

  public void setScanDocId(UUID scanDocId) {
    this.scanDocId = scanDocId;
  }


  public ScannedDocumentObject scanFilename(String scanFilename) {
    this.scanFilename = scanFilename;
    return this;
  }

  /**
   * If you&#39;re uploading a file where it&#39;s important to keep the original filename, then you can provide that here. Otherwise the Frankie service will assign an arbitrary name based on the scanDocIdand an extension based on the MIME type 
   * @return scanFilename
   */
  @javax.annotation.Nullable
  public String getScanFilename() {
    return scanFilename;
  }

  public void setScanFilename(String scanFilename) {
    this.scanFilename = scanFilename;
  }


  public ScannedDocumentObject scanMIME(EnumMIMEType scanMIME) {
    this.scanMIME = scanMIME;
    return this;
  }

  /**
   * Get scanMIME
   * @return scanMIME
   */
  @javax.annotation.Nullable
  public EnumMIMEType getScanMIME() {
    return scanMIME;
  }

  public void setScanMIME(EnumMIMEType scanMIME) {
    this.scanMIME = scanMIME;
  }


  public ScannedDocumentObject scanPageNum(Integer scanPageNum) {
    this.scanPageNum = scanPageNum;
    return this;
  }

  /**
   * If uploading multiple pages - it&#39;s handy to keep a track of these. There is no enforcement of these numbers at all. You can have 10 page 1&#39;s and a page 29 if you wish. 
   * minimum: 0
   * @return scanPageNum
   */
  @javax.annotation.Nullable
  public Integer getScanPageNum() {
    return scanPageNum;
  }

  public void setScanPageNum(Integer scanPageNum) {
    this.scanPageNum = scanPageNum;
  }


  public ScannedDocumentObject scanSide(EnumScanSide scanSide) {
    this.scanSide = scanSide;
    return this;
  }

  /**
   * Get scanSide
   * @return scanSide
   */
  @javax.annotation.Nullable
  public EnumScanSide getScanSide() {
    return scanSide;
  }

  public void setScanSide(EnumScanSide scanSide) {
    this.scanSide = scanSide;
  }


  public ScannedDocumentObject scanType(EnumScanType scanType) {
    this.scanType = scanType;
    return this;
  }

  /**
   * Get scanType
   * @return scanType
   */
  @javax.annotation.Nullable
  public EnumScanType getScanType() {
    return scanType;
  }

  public void setScanType(EnumScanType scanType) {
    this.scanType = scanType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScannedDocumentObject scannedDocumentObject = (ScannedDocumentObject) o;
    return Objects.equals(this.scanDelete, scannedDocumentObject.scanDelete) &&
        Objects.equals(this.scanCreated, scannedDocumentObject.scanCreated) &&
        Arrays.equals(this.scanData, scannedDocumentObject.scanData) &&
        Objects.equals(this.scanDataRetrievalState, scannedDocumentObject.scanDataRetrievalState) &&
        Objects.equals(this.scanDocId, scannedDocumentObject.scanDocId) &&
        Objects.equals(this.scanFilename, scannedDocumentObject.scanFilename) &&
        Objects.equals(this.scanMIME, scannedDocumentObject.scanMIME) &&
        Objects.equals(this.scanPageNum, scannedDocumentObject.scanPageNum) &&
        Objects.equals(this.scanSide, scannedDocumentObject.scanSide) &&
        Objects.equals(this.scanType, scannedDocumentObject.scanType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scanDelete, scanCreated, Arrays.hashCode(scanData), scanDataRetrievalState, scanDocId, scanFilename, scanMIME, scanPageNum, scanSide, scanType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScannedDocumentObject {\n");
    sb.append("    scanDelete: ").append(toIndentedString(scanDelete)).append("\n");
    sb.append("    scanCreated: ").append(toIndentedString(scanCreated)).append("\n");
    sb.append("    scanData: ").append(toIndentedString(scanData)).append("\n");
    sb.append("    scanDataRetrievalState: ").append(toIndentedString(scanDataRetrievalState)).append("\n");
    sb.append("    scanDocId: ").append(toIndentedString(scanDocId)).append("\n");
    sb.append("    scanFilename: ").append(toIndentedString(scanFilename)).append("\n");
    sb.append("    scanMIME: ").append(toIndentedString(scanMIME)).append("\n");
    sb.append("    scanPageNum: ").append(toIndentedString(scanPageNum)).append("\n");
    sb.append("    scanSide: ").append(toIndentedString(scanSide)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ScanDelete");
    openapiFields.add("scanCreated");
    openapiFields.add("scanData");
    openapiFields.add("scanDataRetrievalState");
    openapiFields.add("scanDocId");
    openapiFields.add("scanFilename");
    openapiFields.add("scanMIME");
    openapiFields.add("scanPageNum");
    openapiFields.add("scanSide");
    openapiFields.add("scanType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScannedDocumentObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScannedDocumentObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScannedDocumentObject is not found in the empty JSON string", ScannedDocumentObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScannedDocumentObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScannedDocumentObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `scanDataRetrievalState`
      if (jsonObj.get("scanDataRetrievalState") != null && !jsonObj.get("scanDataRetrievalState").isJsonNull()) {
        EnumScanDataRetrievalState.validateJsonElement(jsonObj.get("scanDataRetrievalState"));
      }
      if ((jsonObj.get("scanDocId") != null && !jsonObj.get("scanDocId").isJsonNull()) && !jsonObj.get("scanDocId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanDocId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanDocId").toString()));
      }
      if ((jsonObj.get("scanFilename") != null && !jsonObj.get("scanFilename").isJsonNull()) && !jsonObj.get("scanFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanFilename").toString()));
      }
      // validate the optional field `scanMIME`
      if (jsonObj.get("scanMIME") != null && !jsonObj.get("scanMIME").isJsonNull()) {
        EnumMIMEType.validateJsonElement(jsonObj.get("scanMIME"));
      }
      // validate the optional field `scanSide`
      if (jsonObj.get("scanSide") != null && !jsonObj.get("scanSide").isJsonNull()) {
        EnumScanSide.validateJsonElement(jsonObj.get("scanSide"));
      }
      // validate the optional field `scanType`
      if (jsonObj.get("scanType") != null && !jsonObj.get("scanType").isJsonNull()) {
        EnumScanType.validateJsonElement(jsonObj.get("scanType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScannedDocumentObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScannedDocumentObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScannedDocumentObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScannedDocumentObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ScannedDocumentObject>() {
           @Override
           public void write(JsonWriter out, ScannedDocumentObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScannedDocumentObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScannedDocumentObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScannedDocumentObject
   * @throws IOException if the JSON string is invalid with respect to ScannedDocumentObject
   */
  public static ScannedDocumentObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScannedDocumentObject.class);
  }

  /**
   * Convert an instance of ScannedDocumentObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

