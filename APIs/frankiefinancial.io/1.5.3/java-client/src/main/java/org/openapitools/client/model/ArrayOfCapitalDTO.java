/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapitalDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArrayOfCapitalDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArrayOfCapitalDTO {
  public static final String SERIALIZED_NAME_CAPITAL_D_T_O = "CapitalDTO";
  @SerializedName(SERIALIZED_NAME_CAPITAL_D_T_O)
  private List<CapitalDTO> capitalDTO = new ArrayList<>();

  public ArrayOfCapitalDTO() {
  }

  public ArrayOfCapitalDTO capitalDTO(List<CapitalDTO> capitalDTO) {
    this.capitalDTO = capitalDTO;
    return this;
  }

  public ArrayOfCapitalDTO addCapitalDTOItem(CapitalDTO capitalDTOItem) {
    if (this.capitalDTO == null) {
      this.capitalDTO = new ArrayList<>();
    }
    this.capitalDTO.add(capitalDTOItem);
    return this;
  }

  /**
   * Get capitalDTO
   * @return capitalDTO
   */
  @javax.annotation.Nullable
  public List<CapitalDTO> getCapitalDTO() {
    return capitalDTO;
  }

  public void setCapitalDTO(List<CapitalDTO> capitalDTO) {
    this.capitalDTO = capitalDTO;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArrayOfCapitalDTO arrayOfCapitalDTO = (ArrayOfCapitalDTO) o;
    return Objects.equals(this.capitalDTO, arrayOfCapitalDTO.capitalDTO);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capitalDTO);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArrayOfCapitalDTO {\n");
    sb.append("    capitalDTO: ").append(toIndentedString(capitalDTO)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CapitalDTO");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArrayOfCapitalDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArrayOfCapitalDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArrayOfCapitalDTO is not found in the empty JSON string", ArrayOfCapitalDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArrayOfCapitalDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArrayOfCapitalDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("CapitalDTO") != null && !jsonObj.get("CapitalDTO").isJsonNull()) {
        JsonArray jsonArraycapitalDTO = jsonObj.getAsJsonArray("CapitalDTO");
        if (jsonArraycapitalDTO != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CapitalDTO").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CapitalDTO` to be an array in the JSON string but got `%s`", jsonObj.get("CapitalDTO").toString()));
          }

          // validate the optional field `CapitalDTO` (array)
          for (int i = 0; i < jsonArraycapitalDTO.size(); i++) {
            CapitalDTO.validateJsonElement(jsonArraycapitalDTO.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArrayOfCapitalDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArrayOfCapitalDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArrayOfCapitalDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArrayOfCapitalDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ArrayOfCapitalDTO>() {
           @Override
           public void write(JsonWriter out, ArrayOfCapitalDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArrayOfCapitalDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArrayOfCapitalDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArrayOfCapitalDTO
   * @throws IOException if the JSON string is invalid with respect to ArrayOfCapitalDTO
   */
  public static ArrayOfCapitalDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArrayOfCapitalDTO.class);
  }

  /**
   * Convert an instance of ArrayOfCapitalDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

