/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComparisonError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComparisonError {
  public static final String SERIALIZED_NAME_COMPARISON_DATE = "comparisonDate";
  @SerializedName(SERIALIZED_NAME_COMPARISON_DATE)
  private String comparisonDate;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private UUID correlationId;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ComparisonError() {
  }

  public ComparisonError comparisonDate(String comparisonDate) {
    this.comparisonDate = comparisonDate;
    return this;
  }

  /**
   * Timestamp of when the attempted comparison took place
   * @return comparisonDate
   */
  @javax.annotation.Nonnull
  public String getComparisonDate() {
    return comparisonDate;
  }

  public void setComparisonDate(String comparisonDate) {
    this.comparisonDate = comparisonDate;
  }


  public ComparisonError correlationId(UUID correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * The correlationId as passed in the request
   * @return correlationId
   */
  @javax.annotation.Nonnull
  public UUID getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(UUID correlationId) {
    this.correlationId = correlationId;
  }


  public ComparisonError errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * * &#x60;1000&#x60; - Document not recognised (i.e. not valid pdf or image) * &#x60;1001&#x60; - Bill is not SME or Domestic * &#x60;1004&#x60; - Bill is gas (if to be excluded) * &#x60;1005&#x60; - Template Not Found – The document was a pdf but service did not recognise the uploaded document against any of it’s templates * &#x60;1008&#x60; - Unsupported distributor – bill is from jurisdiction that is unsupported * &#x60;1009&#x60; - Unsupported distributor – bill is from jurisdiction that is unsupported * &#x60;1030&#x60; - Invoice from date is missing * &#x60;1031&#x60; - Invoice to date is missing * &#x60;1033&#x60; - Supply address is missing * &#x60;1039&#x60; - NMI is missing * &#x60;1041&#x60; - Bill is a predictive plan making comparison hard * &#x60;1044&#x60; - Bill is on embedded network * &#x60;1045&#x60; - Incompatible charge item – manual comparison needed * &#x60;1062&#x60; - C&amp;I Bill loaded * &#x60;1080&#x60; - API failed to reconcile bill usually meaning that not all cost items were picked up 
   * @return errorCode
   */
  @javax.annotation.Nonnull
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public ComparisonError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Description of error that can be displayed as user feedback. e.g. \&quot;Uploaded document not a PDF\&quot;
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ComparisonError version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the API on which the error took place. This value should be reported with any issue raised.
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComparisonError comparisonError = (ComparisonError) o;
    return Objects.equals(this.comparisonDate, comparisonError.comparisonDate) &&
        Objects.equals(this.correlationId, comparisonError.correlationId) &&
        Objects.equals(this.errorCode, comparisonError.errorCode) &&
        Objects.equals(this.message, comparisonError.message) &&
        Objects.equals(this.version, comparisonError.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonDate, correlationId, errorCode, message, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComparisonError {\n");
    sb.append("    comparisonDate: ").append(toIndentedString(comparisonDate)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonDate");
    openapiFields.add("correlationId");
    openapiFields.add("errorCode");
    openapiFields.add("message");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comparisonDate");
    openapiRequiredFields.add("correlationId");
    openapiRequiredFields.add("errorCode");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComparisonError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComparisonError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComparisonError is not found in the empty JSON string", ComparisonError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComparisonError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComparisonError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComparisonError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("comparisonDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonDate").toString()));
      }
      if (!jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComparisonError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComparisonError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComparisonError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComparisonError.class));

       return (TypeAdapter<T>) new TypeAdapter<ComparisonError>() {
           @Override
           public void write(JsonWriter out, ComparisonError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComparisonError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComparisonError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComparisonError
   * @throws IOException if the JSON string is invalid with respect to ComparisonError
   */
  public static ComparisonError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComparisonError.class);
  }

  /**
   * Convert an instance of ComparisonError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

