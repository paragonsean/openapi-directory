/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddressObject;
import org.openapitools.client.model.ScreeningResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * x
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndividualData {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<AddressObject> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_BENEFICIALLY_HELD = "beneficially_held";
  @SerializedName(SERIALIZED_NAME_BENEFICIALLY_HELD)
  private Boolean beneficiallyHeld;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENT_OWNED = "percent_owned";
  @SerializedName(SERIALIZED_NAME_PERCENT_OWNED)
  private Float percentOwned;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SCREENING_RESULT = "screening_result";
  @SerializedName(SERIALIZED_NAME_SCREENING_RESULT)
  private ScreeningResult screeningResult;

  public IndividualData() {
  }

  public IndividualData addresses(List<AddressObject> addresses) {
    this.addresses = addresses;
    return this;
  }

  public IndividualData addAddressesItem(AddressObject addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * List of all found addresses associated with this person 
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<AddressObject> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<AddressObject> addresses) {
    this.addresses = addresses;
  }


  public IndividualData beneficiallyHeld(Boolean beneficiallyHeld) {
    this.beneficiallyHeld = beneficiallyHeld;
    return this;
  }

  /**
   * If describing an (ultimate) beneficial owner, then if any of the shared held are not benefially held, this field will be set to \&quot;false\&quot; 
   * @return beneficiallyHeld
   */
  @javax.annotation.Nonnull
  public Boolean getBeneficiallyHeld() {
    return beneficiallyHeld;
  }

  public void setBeneficiallyHeld(Boolean beneficiallyHeld) {
    this.beneficiallyHeld = beneficiallyHeld;
  }


  public IndividualData dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * RFC3339 formatted date
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public IndividualData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the individual 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IndividualData percentOwned(Float percentOwned) {
    this.percentOwned = percentOwned;
    return this;
  }

  /**
   * If describing an (ultimate) beneficial owner, the percentage of the company owned by this Individual 
   * @return percentOwned
   */
  @javax.annotation.Nonnull
  public Float getPercentOwned() {
    return percentOwned;
  }

  public void setPercentOwned(Float percentOwned) {
    this.percentOwned = percentOwned;
  }


  public IndividualData role(String role) {
    this.role = role;
    return this;
  }

  /**
   * If this individual has a role as an officeholder, such as director, then this will be described here. May be blank. 
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public IndividualData screeningResult(ScreeningResult screeningResult) {
    this.screeningResult = screeningResult;
    return this;
  }

  /**
   * Get screeningResult
   * @return screeningResult
   */
  @javax.annotation.Nullable
  public ScreeningResult getScreeningResult() {
    return screeningResult;
  }

  public void setScreeningResult(ScreeningResult screeningResult) {
    this.screeningResult = screeningResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualData individualData = (IndividualData) o;
    return Objects.equals(this.addresses, individualData.addresses) &&
        Objects.equals(this.beneficiallyHeld, individualData.beneficiallyHeld) &&
        Objects.equals(this.dateOfBirth, individualData.dateOfBirth) &&
        Objects.equals(this.name, individualData.name) &&
        Objects.equals(this.percentOwned, individualData.percentOwned) &&
        Objects.equals(this.role, individualData.role) &&
        Objects.equals(this.screeningResult, individualData.screeningResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, beneficiallyHeld, dateOfBirth, name, percentOwned, role, screeningResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualData {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    beneficiallyHeld: ").append(toIndentedString(beneficiallyHeld)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentOwned: ").append(toIndentedString(percentOwned)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    screeningResult: ").append(toIndentedString(screeningResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("beneficially_held");
    openapiFields.add("date_of_birth");
    openapiFields.add("name");
    openapiFields.add("percent_owned");
    openapiFields.add("role");
    openapiFields.add("screening_result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beneficially_held");
    openapiRequiredFields.add("percent_owned");
    openapiRequiredFields.add("role");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndividualData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndividualData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndividualData is not found in the empty JSON string", IndividualData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndividualData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndividualData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndividualData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            AddressObject.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `screening_result`
      if (jsonObj.get("screening_result") != null && !jsonObj.get("screening_result").isJsonNull()) {
        ScreeningResult.validateJsonElement(jsonObj.get("screening_result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndividualData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndividualData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndividualData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndividualData.class));

       return (TypeAdapter<T>) new TypeAdapter<IndividualData>() {
           @Override
           public void write(JsonWriter out, IndividualData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndividualData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndividualData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndividualData
   * @throws IOException if the JSON string is invalid with respect to IndividualData
   */
  public static IndividualData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndividualData.class);
  }

  /**
   * Convert an instance of IndividualData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

