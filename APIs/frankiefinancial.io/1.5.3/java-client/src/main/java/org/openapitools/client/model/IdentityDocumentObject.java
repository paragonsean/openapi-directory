/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EnumDocumentStatus;
import org.openapitools.client.model.EnumIdType;
import org.openapitools.client.model.KeyValuePairObject;
import org.openapitools.client.model.ScannedDocumentObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IdentityDocumentObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityDocumentObject {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATED_FROM_SCAN = "createdFromScan";
  @SerializedName(SERIALIZED_NAME_CREATED_FROM_SCAN)
  private Boolean createdFromScan;

  public static final String SERIALIZED_NAME_DOC_SCAN = "docScan";
  @SerializedName(SERIALIZED_NAME_DOC_SCAN)
  private List<ScannedDocumentObject> docScan = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private UUID documentId;

  public static final String SERIALIZED_NAME_DOCUMENT_STATUS = "documentStatus";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_STATUS)
  private EnumDocumentStatus documentStatus;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "extraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private List<KeyValuePairObject> extraData = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_EXPIRY = "idExpiry";
  @SerializedName(SERIALIZED_NAME_ID_EXPIRY)
  private LocalDate idExpiry;

  public static final String SERIALIZED_NAME_ID_ISSUED = "idIssued";
  @SerializedName(SERIALIZED_NAME_ID_ISSUED)
  private LocalDate idIssued;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_ID_SUB_TYPE = "idSubType";
  @SerializedName(SERIALIZED_NAME_ID_SUB_TYPE)
  private String idSubType;

  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  private EnumIdType idType;

  public static final String SERIALIZED_NAME_MANUALLY_MODIFIED = "manuallyModified";
  @SerializedName(SERIALIZED_NAME_MANUALLY_MODIFIED)
  private Boolean manuallyModified;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public IdentityDocumentObject() {
  }

  public IdentityDocumentObject(
     Boolean createdFromScan, 
     Boolean manuallyModified
  ) {
    this();
    this.createdFromScan = createdFromScan;
    this.manuallyModified = manuallyModified;
  }

  public IdentityDocumentObject country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The ISO-3166-alpha3 country code of the issuing national. Once set, this cannot be changed.  See https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes for more 
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  /**
   * This document&#39;s data was initially created from scanned and processed images. The value cannot be set manually and any attempt to do so will just be ignored. 
   * @return createdFromScan
   */
  @javax.annotation.Nullable
  public Boolean getCreatedFromScan() {
    return createdFromScan;
  }



  public IdentityDocumentObject docScan(List<ScannedDocumentObject> docScan) {
    this.docScan = docScan;
    return this;
  }

  public IdentityDocumentObject addDocScanItem(ScannedDocumentObject docScanItem) {
    if (this.docScan == null) {
      this.docScan = new ArrayList<>();
    }
    this.docScan.add(docScanItem);
    return this;
  }

  /**
   * Collection of one or more objects that describe scan(s) that need to be put through OCR or facial recognition. These should all be from the one ID document, such as front/back, or page 1, 2, 3, etc. You can upload multiple scans in a single call, or in multiple calls.     Note: if you do upload over multiple calls, make sure you include the documentId (see above), and indicate that this is happening with a \&quot;more_data\&quot; checkAction 
   * @return docScan
   */
  @javax.annotation.Nullable
  public List<ScannedDocumentObject> getDocScan() {
    return docScan;
  }

  public void setDocScan(List<ScannedDocumentObject> docScan) {
    this.docScan = docScan;
  }


  public IdentityDocumentObject documentId(UUID documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * When an ID document is created/uploaded, it is assigned a documentId. You&#39;ll see this in a successful response or successfully accepted response. This can then be referenced in subsequent calls if you&#39;re uploading more/updated data. 
   * @return documentId
   */
  @javax.annotation.Nullable
  public UUID getDocumentId() {
    return documentId;
  }

  public void setDocumentId(UUID documentId) {
    this.documentId = documentId;
  }


  public IdentityDocumentObject documentStatus(EnumDocumentStatus documentStatus) {
    this.documentStatus = documentStatus;
    return this;
  }

  /**
   * Get documentStatus
   * @return documentStatus
   */
  @javax.annotation.Nullable
  public EnumDocumentStatus getDocumentStatus() {
    return documentStatus;
  }

  public void setDocumentStatus(EnumDocumentStatus documentStatus) {
    this.documentStatus = documentStatus;
  }


  public IdentityDocumentObject extraData(List<KeyValuePairObject> extraData) {
    this.extraData = extraData;
    return this;
  }

  public IdentityDocumentObject addExtraDataItem(KeyValuePairObject extraDataItem) {
    if (this.extraData == null) {
      this.extraData = new ArrayList<>();
    }
    this.extraData.add(extraDataItem);
    return this;
  }

  /**
   * Set of key-value pairs that provide ID type-specific data. If updating an existing document, then existing values with the same name will be overwritten. New values will be added.  If this document is scanned through OCR or similar processes, then extracted data will be found here (Some may be used to populate other fields like idNumber and idExpiry as well) 
   * @return extraData
   */
  @javax.annotation.Nullable
  public List<KeyValuePairObject> getExtraData() {
    return extraData;
  }

  public void setExtraData(List<KeyValuePairObject> extraData) {
    this.extraData = extraData;
  }


  public IdentityDocumentObject idExpiry(LocalDate idExpiry) {
    this.idExpiry = idExpiry;
    return this;
  }

  /**
   * The expiry date of the document (if known) in YYYY-MM-DD format.
   * @return idExpiry
   */
  @javax.annotation.Nullable
  public LocalDate getIdExpiry() {
    return idExpiry;
  }

  public void setIdExpiry(LocalDate idExpiry) {
    this.idExpiry = idExpiry;
  }


  public IdentityDocumentObject idIssued(LocalDate idIssued) {
    this.idIssued = idIssued;
    return this;
  }

  /**
   * The issued date of the document (if known) in YYYY-MM-DD format.
   * @return idIssued
   */
  @javax.annotation.Nullable
  public LocalDate getIdIssued() {
    return idIssued;
  }

  public void setIdIssued(LocalDate idIssued) {
    this.idIssued = idIssued;
  }


  public IdentityDocumentObject idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * The ID number of the document (if known).
   * @return idNumber
   */
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public IdentityDocumentObject idSubType(String idSubType) {
    this.idSubType = idSubType;
    return this;
  }

  /**
   * The sub-type of identity document. Very document specific.
   * @return idSubType
   */
  @javax.annotation.Nullable
  public String getIdSubType() {
    return idSubType;
  }

  public void setIdSubType(String idSubType) {
    this.idSubType = idSubType;
  }


  public IdentityDocumentObject idType(EnumIdType idType) {
    this.idType = idType;
    return this;
  }

  /**
   * Get idType
   * @return idType
   */
  @javax.annotation.Nonnull
  public EnumIdType getIdType() {
    return idType;
  }

  public void setIdType(EnumIdType idType) {
    this.idType = idType;
  }


  /**
   * If this document was originally populated from scanned data, then manually adjusted (e.g. if the scan&#39;s results weren&#39;t 100% correct or data was missing), then this will be set to true. The value cannot be set manually and any attempt to do so will just be ignored. 
   * @return manuallyModified
   */
  @javax.annotation.Nullable
  public Boolean getManuallyModified() {
    return manuallyModified;
  }



  public IdentityDocumentObject region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Regional variant of the ID (e.g. VIC drivers licence)  You should always use the local abbreviation for this. E.g.   - VIC for The Australian state of Victoria   - MA for the US state of Massachusetts   - etc 
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityDocumentObject identityDocumentObject = (IdentityDocumentObject) o;
    return Objects.equals(this.country, identityDocumentObject.country) &&
        Objects.equals(this.createdFromScan, identityDocumentObject.createdFromScan) &&
        Objects.equals(this.docScan, identityDocumentObject.docScan) &&
        Objects.equals(this.documentId, identityDocumentObject.documentId) &&
        Objects.equals(this.documentStatus, identityDocumentObject.documentStatus) &&
        Objects.equals(this.extraData, identityDocumentObject.extraData) &&
        Objects.equals(this.idExpiry, identityDocumentObject.idExpiry) &&
        Objects.equals(this.idIssued, identityDocumentObject.idIssued) &&
        Objects.equals(this.idNumber, identityDocumentObject.idNumber) &&
        Objects.equals(this.idSubType, identityDocumentObject.idSubType) &&
        Objects.equals(this.idType, identityDocumentObject.idType) &&
        Objects.equals(this.manuallyModified, identityDocumentObject.manuallyModified) &&
        Objects.equals(this.region, identityDocumentObject.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, createdFromScan, docScan, documentId, documentStatus, extraData, idExpiry, idIssued, idNumber, idSubType, idType, manuallyModified, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityDocumentObject {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createdFromScan: ").append(toIndentedString(createdFromScan)).append("\n");
    sb.append("    docScan: ").append(toIndentedString(docScan)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentStatus: ").append(toIndentedString(documentStatus)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    idExpiry: ").append(toIndentedString(idExpiry)).append("\n");
    sb.append("    idIssued: ").append(toIndentedString(idIssued)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    idSubType: ").append(toIndentedString(idSubType)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    manuallyModified: ").append(toIndentedString(manuallyModified)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("createdFromScan");
    openapiFields.add("docScan");
    openapiFields.add("documentId");
    openapiFields.add("documentStatus");
    openapiFields.add("extraData");
    openapiFields.add("idExpiry");
    openapiFields.add("idIssued");
    openapiFields.add("idNumber");
    openapiFields.add("idSubType");
    openapiFields.add("idType");
    openapiFields.add("manuallyModified");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("idType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityDocumentObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityDocumentObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityDocumentObject is not found in the empty JSON string", IdentityDocumentObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityDocumentObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityDocumentObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentityDocumentObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("docScan") != null && !jsonObj.get("docScan").isJsonNull()) {
        JsonArray jsonArraydocScan = jsonObj.getAsJsonArray("docScan");
        if (jsonArraydocScan != null) {
          // ensure the json data is an array
          if (!jsonObj.get("docScan").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `docScan` to be an array in the JSON string but got `%s`", jsonObj.get("docScan").toString()));
          }

          // validate the optional field `docScan` (array)
          for (int i = 0; i < jsonArraydocScan.size(); i++) {
            ScannedDocumentObject.validateJsonElement(jsonArraydocScan.get(i));
          };
        }
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      // validate the optional field `documentStatus`
      if (jsonObj.get("documentStatus") != null && !jsonObj.get("documentStatus").isJsonNull()) {
        EnumDocumentStatus.validateJsonElement(jsonObj.get("documentStatus"));
      }
      if (jsonObj.get("extraData") != null && !jsonObj.get("extraData").isJsonNull()) {
        JsonArray jsonArrayextraData = jsonObj.getAsJsonArray("extraData");
        if (jsonArrayextraData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extraData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extraData` to be an array in the JSON string but got `%s`", jsonObj.get("extraData").toString()));
          }

          // validate the optional field `extraData` (array)
          for (int i = 0; i < jsonArrayextraData.size(); i++) {
            KeyValuePairObject.validateJsonElement(jsonArrayextraData.get(i));
          };
        }
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      if ((jsonObj.get("idSubType") != null && !jsonObj.get("idSubType").isJsonNull()) && !jsonObj.get("idSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idSubType").toString()));
      }
      // validate the required field `idType`
      EnumIdType.validateJsonElement(jsonObj.get("idType"));
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityDocumentObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityDocumentObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityDocumentObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityDocumentObject.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityDocumentObject>() {
           @Override
           public void write(JsonWriter out, IdentityDocumentObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityDocumentObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityDocumentObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityDocumentObject
   * @throws IOException if the JSON string is invalid with respect to IdentityDocumentObject
   */
  public static IdentityDocumentObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityDocumentObject.class);
  }

  /**
   * Convert an instance of IdentityDocumentObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

