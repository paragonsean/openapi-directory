/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a shareholding as returned from an ASIC report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareholdingObject {
  public static final String SERIALIZED_NAME_BENEFICIALLY_OWNED = "beneficiallyOwned";
  @SerializedName(SERIALIZED_NAME_BENEFICIALLY_OWNED)
  private Boolean beneficiallyOwned;

  public static final String SERIALIZED_NAME_DOC_NUMBER = "docNumber";
  @SerializedName(SERIALIZED_NAME_DOC_NUMBER)
  private String docNumber;

  public static final String SERIALIZED_NAME_DOC_NUMBER_QUALIFIER = "docNumberQualifier";
  @SerializedName(SERIALIZED_NAME_DOC_NUMBER_QUALIFIER)
  private String docNumberQualifier;

  public static final String SERIALIZED_NAME_FULLY_PAID = "fullyPaid";
  @SerializedName(SERIALIZED_NAME_FULLY_PAID)
  private Boolean fullyPaid;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<UUID> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_HELD = "numberHeld";
  @SerializedName(SERIALIZED_NAME_NUMBER_HELD)
  private Integer numberHeld;

  public static final String SERIALIZED_NAME_SHARE_CAPITAL_CLASS_CODE = "shareCapitalClassCode";
  @SerializedName(SERIALIZED_NAME_SHARE_CAPITAL_CLASS_CODE)
  private String shareCapitalClassCode;

  public ShareholdingObject() {
  }

  public ShareholdingObject beneficiallyOwned(Boolean beneficiallyOwned) {
    this.beneficiallyOwned = beneficiallyOwned;
    return this;
  }

  /**
   * Get beneficiallyOwned
   * @return beneficiallyOwned
   */
  @javax.annotation.Nullable
  public Boolean getBeneficiallyOwned() {
    return beneficiallyOwned;
  }

  public void setBeneficiallyOwned(Boolean beneficiallyOwned) {
    this.beneficiallyOwned = beneficiallyOwned;
  }


  public ShareholdingObject docNumber(String docNumber) {
    this.docNumber = docNumber;
    return this;
  }

  /**
   * Get docNumber
   * @return docNumber
   */
  @javax.annotation.Nullable
  public String getDocNumber() {
    return docNumber;
  }

  public void setDocNumber(String docNumber) {
    this.docNumber = docNumber;
  }


  public ShareholdingObject docNumberQualifier(String docNumberQualifier) {
    this.docNumberQualifier = docNumberQualifier;
    return this;
  }

  /**
   * Get docNumberQualifier
   * @return docNumberQualifier
   */
  @javax.annotation.Nullable
  public String getDocNumberQualifier() {
    return docNumberQualifier;
  }

  public void setDocNumberQualifier(String docNumberQualifier) {
    this.docNumberQualifier = docNumberQualifier;
  }


  public ShareholdingObject fullyPaid(Boolean fullyPaid) {
    this.fullyPaid = fullyPaid;
    return this;
  }

  /**
   * Get fullyPaid
   * @return fullyPaid
   */
  @javax.annotation.Nullable
  public Boolean getFullyPaid() {
    return fullyPaid;
  }

  public void setFullyPaid(Boolean fullyPaid) {
    this.fullyPaid = fullyPaid;
  }


  public ShareholdingObject members(List<UUID> members) {
    this.members = members;
    return this;
  }

  public ShareholdingObject addMembersItem(UUID membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public List<UUID> getMembers() {
    return members;
  }

  public void setMembers(List<UUID> members) {
    this.members = members;
  }


  public ShareholdingObject numberHeld(Integer numberHeld) {
    this.numberHeld = numberHeld;
    return this;
  }

  /**
   * Get numberHeld
   * @return numberHeld
   */
  @javax.annotation.Nullable
  public Integer getNumberHeld() {
    return numberHeld;
  }

  public void setNumberHeld(Integer numberHeld) {
    this.numberHeld = numberHeld;
  }


  public ShareholdingObject shareCapitalClassCode(String shareCapitalClassCode) {
    this.shareCapitalClassCode = shareCapitalClassCode;
    return this;
  }

  /**
   * Get shareCapitalClassCode
   * @return shareCapitalClassCode
   */
  @javax.annotation.Nullable
  public String getShareCapitalClassCode() {
    return shareCapitalClassCode;
  }

  public void setShareCapitalClassCode(String shareCapitalClassCode) {
    this.shareCapitalClassCode = shareCapitalClassCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareholdingObject shareholdingObject = (ShareholdingObject) o;
    return Objects.equals(this.beneficiallyOwned, shareholdingObject.beneficiallyOwned) &&
        Objects.equals(this.docNumber, shareholdingObject.docNumber) &&
        Objects.equals(this.docNumberQualifier, shareholdingObject.docNumberQualifier) &&
        Objects.equals(this.fullyPaid, shareholdingObject.fullyPaid) &&
        Objects.equals(this.members, shareholdingObject.members) &&
        Objects.equals(this.numberHeld, shareholdingObject.numberHeld) &&
        Objects.equals(this.shareCapitalClassCode, shareholdingObject.shareCapitalClassCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beneficiallyOwned, docNumber, docNumberQualifier, fullyPaid, members, numberHeld, shareCapitalClassCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareholdingObject {\n");
    sb.append("    beneficiallyOwned: ").append(toIndentedString(beneficiallyOwned)).append("\n");
    sb.append("    docNumber: ").append(toIndentedString(docNumber)).append("\n");
    sb.append("    docNumberQualifier: ").append(toIndentedString(docNumberQualifier)).append("\n");
    sb.append("    fullyPaid: ").append(toIndentedString(fullyPaid)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    numberHeld: ").append(toIndentedString(numberHeld)).append("\n");
    sb.append("    shareCapitalClassCode: ").append(toIndentedString(shareCapitalClassCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beneficiallyOwned");
    openapiFields.add("docNumber");
    openapiFields.add("docNumberQualifier");
    openapiFields.add("fullyPaid");
    openapiFields.add("members");
    openapiFields.add("numberHeld");
    openapiFields.add("shareCapitalClassCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareholdingObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareholdingObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareholdingObject is not found in the empty JSON string", ShareholdingObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareholdingObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareholdingObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("docNumber") != null && !jsonObj.get("docNumber").isJsonNull()) && !jsonObj.get("docNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNumber").toString()));
      }
      if ((jsonObj.get("docNumberQualifier") != null && !jsonObj.get("docNumberQualifier").isJsonNull()) && !jsonObj.get("docNumberQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNumberQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNumberQualifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull() && !jsonObj.get("members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      if ((jsonObj.get("shareCapitalClassCode") != null && !jsonObj.get("shareCapitalClassCode").isJsonNull()) && !jsonObj.get("shareCapitalClassCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareCapitalClassCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareCapitalClassCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareholdingObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareholdingObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareholdingObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareholdingObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareholdingObject>() {
           @Override
           public void write(JsonWriter out, ShareholdingObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareholdingObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareholdingObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareholdingObject
   * @throws IOException if the JSON string is invalid with respect to ShareholdingObject
   */
  public static ShareholdingObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareholdingObject.class);
  }

  /**
   * Convert an instance of ShareholdingObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

