/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShareholderDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareholderDetails {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ALL_INFO = "allInfo";
  @SerializedName(SERIALIZED_NAME_ALL_INFO)
  private String allInfo;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_NOMINAL_VALUE = "nominalValue";
  @SerializedName(SERIALIZED_NAME_NOMINAL_VALUE)
  private String nominalValue;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private String percentage;

  public static final String SERIALIZED_NAME_SHARE_CLASS = "shareClass";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS)
  private String shareClass;

  public static final String SERIALIZED_NAME_SHARE_COUNT = "shareCount";
  @SerializedName(SERIALIZED_NAME_SHARE_COUNT)
  private Long shareCount;

  public static final String SERIALIZED_NAME_SHARE_TYPE = "shareType";
  @SerializedName(SERIALIZED_NAME_SHARE_TYPE)
  private String shareType;

  public static final String SERIALIZED_NAME_SHAREHOLDER_TYPE = "shareholderType";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_TYPE)
  private String shareholderType;

  public static final String SERIALIZED_NAME_TOTAL_SHARE_COUNT = "totalShareCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHARE_COUNT)
  private Long totalShareCount;

  public static final String SERIALIZED_NAME_TOTAL_SHARE_VALUE = "totalShareValue";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHARE_VALUE)
  private Long totalShareValue;

  public static final String SERIALIZED_NAME_TOTAL_SHARES = "totalShares";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHARES)
  private Long totalShares;

  public ShareholderDetails() {
  }

  public ShareholderDetails address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ShareholderDetails allInfo(String allInfo) {
    this.allInfo = allInfo;
    return this;
  }

  /**
   * Get allInfo
   * @return allInfo
   */
  @javax.annotation.Nullable
  public String getAllInfo() {
    return allInfo;
  }

  public void setAllInfo(String allInfo) {
    this.allInfo = allInfo;
  }


  public ShareholderDetails currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ShareholderDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ShareholderDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ShareholderDetails nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Get nationality
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public ShareholderDetails nominalValue(String nominalValue) {
    this.nominalValue = nominalValue;
    return this;
  }

  /**
   * Get nominalValue
   * @return nominalValue
   */
  @javax.annotation.Nullable
  public String getNominalValue() {
    return nominalValue;
  }

  public void setNominalValue(String nominalValue) {
    this.nominalValue = nominalValue;
  }


  public ShareholderDetails percentage(String percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * @return percentage
   */
  @javax.annotation.Nullable
  public String getPercentage() {
    return percentage;
  }

  public void setPercentage(String percentage) {
    this.percentage = percentage;
  }


  public ShareholderDetails shareClass(String shareClass) {
    this.shareClass = shareClass;
    return this;
  }

  /**
   * Get shareClass
   * @return shareClass
   */
  @javax.annotation.Nullable
  public String getShareClass() {
    return shareClass;
  }

  public void setShareClass(String shareClass) {
    this.shareClass = shareClass;
  }


  public ShareholderDetails shareCount(Long shareCount) {
    this.shareCount = shareCount;
    return this;
  }

  /**
   * Get shareCount
   * @return shareCount
   */
  @javax.annotation.Nullable
  public Long getShareCount() {
    return shareCount;
  }

  public void setShareCount(Long shareCount) {
    this.shareCount = shareCount;
  }


  public ShareholderDetails shareType(String shareType) {
    this.shareType = shareType;
    return this;
  }

  /**
   * Get shareType
   * @return shareType
   */
  @javax.annotation.Nullable
  public String getShareType() {
    return shareType;
  }

  public void setShareType(String shareType) {
    this.shareType = shareType;
  }


  public ShareholderDetails shareholderType(String shareholderType) {
    this.shareholderType = shareholderType;
    return this;
  }

  /**
   * Get shareholderType
   * @return shareholderType
   */
  @javax.annotation.Nullable
  public String getShareholderType() {
    return shareholderType;
  }

  public void setShareholderType(String shareholderType) {
    this.shareholderType = shareholderType;
  }


  public ShareholderDetails totalShareCount(Long totalShareCount) {
    this.totalShareCount = totalShareCount;
    return this;
  }

  /**
   * Get totalShareCount
   * @return totalShareCount
   */
  @javax.annotation.Nullable
  public Long getTotalShareCount() {
    return totalShareCount;
  }

  public void setTotalShareCount(Long totalShareCount) {
    this.totalShareCount = totalShareCount;
  }


  public ShareholderDetails totalShareValue(Long totalShareValue) {
    this.totalShareValue = totalShareValue;
    return this;
  }

  /**
   * Get totalShareValue
   * @return totalShareValue
   */
  @javax.annotation.Nullable
  public Long getTotalShareValue() {
    return totalShareValue;
  }

  public void setTotalShareValue(Long totalShareValue) {
    this.totalShareValue = totalShareValue;
  }


  public ShareholderDetails totalShares(Long totalShares) {
    this.totalShares = totalShares;
    return this;
  }

  /**
   * Get totalShares
   * @return totalShares
   */
  @javax.annotation.Nullable
  public Long getTotalShares() {
    return totalShares;
  }

  public void setTotalShares(Long totalShares) {
    this.totalShares = totalShares;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareholderDetails shareholderDetails = (ShareholderDetails) o;
    return Objects.equals(this.address, shareholderDetails.address) &&
        Objects.equals(this.allInfo, shareholderDetails.allInfo) &&
        Objects.equals(this.currency, shareholderDetails.currency) &&
        Objects.equals(this.id, shareholderDetails.id) &&
        Objects.equals(this.name, shareholderDetails.name) &&
        Objects.equals(this.nationality, shareholderDetails.nationality) &&
        Objects.equals(this.nominalValue, shareholderDetails.nominalValue) &&
        Objects.equals(this.percentage, shareholderDetails.percentage) &&
        Objects.equals(this.shareClass, shareholderDetails.shareClass) &&
        Objects.equals(this.shareCount, shareholderDetails.shareCount) &&
        Objects.equals(this.shareType, shareholderDetails.shareType) &&
        Objects.equals(this.shareholderType, shareholderDetails.shareholderType) &&
        Objects.equals(this.totalShareCount, shareholderDetails.totalShareCount) &&
        Objects.equals(this.totalShareValue, shareholderDetails.totalShareValue) &&
        Objects.equals(this.totalShares, shareholderDetails.totalShares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, allInfo, currency, id, name, nationality, nominalValue, percentage, shareClass, shareCount, shareType, shareholderType, totalShareCount, totalShareValue, totalShares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareholderDetails {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    allInfo: ").append(toIndentedString(allInfo)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    nominalValue: ").append(toIndentedString(nominalValue)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    shareClass: ").append(toIndentedString(shareClass)).append("\n");
    sb.append("    shareCount: ").append(toIndentedString(shareCount)).append("\n");
    sb.append("    shareType: ").append(toIndentedString(shareType)).append("\n");
    sb.append("    shareholderType: ").append(toIndentedString(shareholderType)).append("\n");
    sb.append("    totalShareCount: ").append(toIndentedString(totalShareCount)).append("\n");
    sb.append("    totalShareValue: ").append(toIndentedString(totalShareValue)).append("\n");
    sb.append("    totalShares: ").append(toIndentedString(totalShares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("allInfo");
    openapiFields.add("currency");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("nationality");
    openapiFields.add("nominalValue");
    openapiFields.add("percentage");
    openapiFields.add("shareClass");
    openapiFields.add("shareCount");
    openapiFields.add("shareType");
    openapiFields.add("shareholderType");
    openapiFields.add("totalShareCount");
    openapiFields.add("totalShareValue");
    openapiFields.add("totalShares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareholderDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareholderDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareholderDetails is not found in the empty JSON string", ShareholderDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareholderDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareholderDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("allInfo") != null && !jsonObj.get("allInfo").isJsonNull()) && !jsonObj.get("allInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allInfo").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("nominalValue") != null && !jsonObj.get("nominalValue").isJsonNull()) && !jsonObj.get("nominalValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nominalValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nominalValue").toString()));
      }
      if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull()) && !jsonObj.get("percentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage").toString()));
      }
      if ((jsonObj.get("shareClass") != null && !jsonObj.get("shareClass").isJsonNull()) && !jsonObj.get("shareClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareClass").toString()));
      }
      if ((jsonObj.get("shareType") != null && !jsonObj.get("shareType").isJsonNull()) && !jsonObj.get("shareType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareType").toString()));
      }
      if ((jsonObj.get("shareholderType") != null && !jsonObj.get("shareholderType").isJsonNull()) && !jsonObj.get("shareholderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareholderDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareholderDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareholderDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareholderDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareholderDetails>() {
           @Override
           public void write(JsonWriter out, ShareholderDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareholderDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareholderDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareholderDetails
   * @throws IOException if the JSON string is invalid with respect to ShareholderDetails
   */
  public static ShareholderDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareholderDetails.class);
  }

  /**
   * Convert an instance of ShareholderDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

