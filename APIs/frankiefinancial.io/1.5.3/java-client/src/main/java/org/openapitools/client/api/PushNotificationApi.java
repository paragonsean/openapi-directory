/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotificationResultObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PushNotificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PushNotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PushNotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notifyResult
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param notifcationResult  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Customer has accepted the notification and we don&#39;t need to retry sending it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The notification represents a type of notification the customer was not expecting, or can accept. No retry. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Customer cannot accept the notification at this time. Please resend again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyResultCall(String requestId, NotificationResultObject notifcationResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notifcationResult;

        // create path and map variables
        String localVarPath = "/your/configured/path/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyResultValidateBeforeCall(String requestId, NotificationResultObject notifcationResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling notifyResult(Async)");
        }

        return notifyResultCall(requestId, notifcationResult, _callback);

    }

    /**
     * Push Notification Payload
     * Whenever you request that a transaction be put into the background, there needs to be a mechanism for notifying you that the request has been completed. This notification will push you the high-level details of the result, and you can then query the results at your leisiure.  The same notification process will also be used to push alerts to your system. This means that RequestIDs may not match your records 
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param notifcationResult  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Customer has accepted the notification and we don&#39;t need to retry sending it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The notification represents a type of notification the customer was not expecting, or can accept. No retry. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Customer cannot accept the notification at this time. Please resend again later </td><td>  -  </td></tr>
     </table>
     */
    public void notifyResult(String requestId, NotificationResultObject notifcationResult) throws ApiException {
        notifyResultWithHttpInfo(requestId, notifcationResult);
    }

    /**
     * Push Notification Payload
     * Whenever you request that a transaction be put into the background, there needs to be a mechanism for notifying you that the request has been completed. This notification will push you the high-level details of the result, and you can then query the results at your leisiure.  The same notification process will also be used to push alerts to your system. This means that RequestIDs may not match your records 
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param notifcationResult  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Customer has accepted the notification and we don&#39;t need to retry sending it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The notification represents a type of notification the customer was not expecting, or can accept. No retry. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Customer cannot accept the notification at this time. Please resend again later </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notifyResultWithHttpInfo(String requestId, NotificationResultObject notifcationResult) throws ApiException {
        okhttp3.Call localVarCall = notifyResultValidateBeforeCall(requestId, notifcationResult, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Push Notification Payload (asynchronously)
     * Whenever you request that a transaction be put into the background, there needs to be a mechanism for notifying you that the request has been completed. This notification will push you the high-level details of the result, and you can then query the results at your leisiure.  The same notification process will also be used to push alerts to your system. This means that RequestIDs may not match your records 
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param notifcationResult  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Customer has accepted the notification and we don&#39;t need to retry sending it. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The notification represents a type of notification the customer was not expecting, or can accept. No retry. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Customer cannot accept the notification at this time. Please resend again later </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyResultAsync(String requestId, NotificationResultObject notifcationResult, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyResultValidateBeforeCall(requestId, notifcationResult, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
