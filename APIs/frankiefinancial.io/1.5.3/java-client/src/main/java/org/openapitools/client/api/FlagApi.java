/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EntityResultObject;
import org.openapitools.client.model.ErrorObject;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlagApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlagApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlagApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blacklistEntity
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for blacklisting. Valid values are:   - \&quot;NO_REASON_SUPPLIED\&quot;   - \&quot;FABRICATED_IDENTITY\&quot;   - \&quot;IDENTITY_TAKEOVER\&quot;   - \&quot;FALSIFIED_ID_DOCUMENTS\&quot;   - \&quot;STOLEN_ID_DOCUMENTS\&quot;   - \&quot;MERCHANT_FRAUD\&quot;   - \&quot;NEVER_PAY_BUST_OUT\&quot;   - \&quot;CONFLICTING_DATA_PROVIDED\&quot;   - \&quot;MONEY_MULE\&quot;   - \&quot;FALSE_FRAUD_CLAIM\&quot;   - \&quot;FRAUDULENT_3RD_PARTY\&quot;   - \&quot;COMPANY_TAKEOVER\&quot;   - \&quot;FICTITIOUS_EMPLOYER\&quot;   - \&quot;COLLUSIVE_EMPLOYER\&quot;   - \&quot;OVER_VALUATION_OF_ASSETS\&quot;   - \&quot;FALSIFIED_EMPLOYMENT_DETAILS\&quot;   - \&quot;MANIPULATED_IDENTITY\&quot;   - \&quot;SYNDICATED_FRAUD\&quot;   - \&quot;INTERNAL_FRAUD\&quot;   - \&quot;BANK_FRAUD\&quot;   - \&quot;UNDISCLOSED_DATA\&quot;   - \&quot;FALSE_HARDSHIP\&quot;   - \&quot;SMR_REPORT_LODGED\&quot;   - \&quot;2X_SMR_REPORTS_LODGED\&quot;  (optional)
     * @param blockedBy Specify who is setting the entity as blacklisted.  (optional)
     * @param attribute Specify the blacklisted attribute. Valid values are:   - \&quot;ENTIRE_PROFILE\&quot;   - \&quot;FULL_NAME\&quot;   - \&quot;EMAIL_ADDRESS\&quot;   - \&quot;PHONE_NUMBER\&quot;   - \&quot;ID_DOCUMENT\&quot;   - \&quot;MAILING_ADDRESS\&quot;   - \&quot;RESIDENTIAL_ADDRESS\&quot;     (optional)
     * @param originalId Specify the Id of the matching blacklisted entity or single data-point.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blacklistEntityCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String blockedBy, String attribute, String originalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entityId}/flag/blacklist"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (set != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set", set));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (blockedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockedBy", blockedBy));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute", attribute));
        }

        if (originalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalId", originalId));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blacklistEntityValidateBeforeCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String blockedBy, String attribute, String originalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling blacklistEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling blacklistEntity(Async)");
        }

        // verify the required parameter 'set' is set
        if (set == null) {
            throw new ApiException("Missing the required parameter 'set' when calling blacklistEntity(Async)");
        }

        return blacklistEntityCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, blockedBy, attribute, originalId, _callback);

    }

    /**
     * Set Entity Blacklist State.
     * Mark the entity as blacklisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for blacklisting. Valid values are:   - \&quot;NO_REASON_SUPPLIED\&quot;   - \&quot;FABRICATED_IDENTITY\&quot;   - \&quot;IDENTITY_TAKEOVER\&quot;   - \&quot;FALSIFIED_ID_DOCUMENTS\&quot;   - \&quot;STOLEN_ID_DOCUMENTS\&quot;   - \&quot;MERCHANT_FRAUD\&quot;   - \&quot;NEVER_PAY_BUST_OUT\&quot;   - \&quot;CONFLICTING_DATA_PROVIDED\&quot;   - \&quot;MONEY_MULE\&quot;   - \&quot;FALSE_FRAUD_CLAIM\&quot;   - \&quot;FRAUDULENT_3RD_PARTY\&quot;   - \&quot;COMPANY_TAKEOVER\&quot;   - \&quot;FICTITIOUS_EMPLOYER\&quot;   - \&quot;COLLUSIVE_EMPLOYER\&quot;   - \&quot;OVER_VALUATION_OF_ASSETS\&quot;   - \&quot;FALSIFIED_EMPLOYMENT_DETAILS\&quot;   - \&quot;MANIPULATED_IDENTITY\&quot;   - \&quot;SYNDICATED_FRAUD\&quot;   - \&quot;INTERNAL_FRAUD\&quot;   - \&quot;BANK_FRAUD\&quot;   - \&quot;UNDISCLOSED_DATA\&quot;   - \&quot;FALSE_HARDSHIP\&quot;   - \&quot;SMR_REPORT_LODGED\&quot;   - \&quot;2X_SMR_REPORTS_LODGED\&quot;  (optional)
     * @param blockedBy Specify who is setting the entity as blacklisted.  (optional)
     * @param attribute Specify the blacklisted attribute. Valid values are:   - \&quot;ENTIRE_PROFILE\&quot;   - \&quot;FULL_NAME\&quot;   - \&quot;EMAIL_ADDRESS\&quot;   - \&quot;PHONE_NUMBER\&quot;   - \&quot;ID_DOCUMENT\&quot;   - \&quot;MAILING_ADDRESS\&quot;   - \&quot;RESIDENTIAL_ADDRESS\&quot;     (optional)
     * @param originalId Specify the Id of the matching blacklisted entity or single data-point.  (optional)
     * @return EntityResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public EntityResultObject blacklistEntity(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String blockedBy, String attribute, String originalId) throws ApiException {
        ApiResponse<EntityResultObject> localVarResp = blacklistEntityWithHttpInfo(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, blockedBy, attribute, originalId);
        return localVarResp.getData();
    }

    /**
     * Set Entity Blacklist State.
     * Mark the entity as blacklisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for blacklisting. Valid values are:   - \&quot;NO_REASON_SUPPLIED\&quot;   - \&quot;FABRICATED_IDENTITY\&quot;   - \&quot;IDENTITY_TAKEOVER\&quot;   - \&quot;FALSIFIED_ID_DOCUMENTS\&quot;   - \&quot;STOLEN_ID_DOCUMENTS\&quot;   - \&quot;MERCHANT_FRAUD\&quot;   - \&quot;NEVER_PAY_BUST_OUT\&quot;   - \&quot;CONFLICTING_DATA_PROVIDED\&quot;   - \&quot;MONEY_MULE\&quot;   - \&quot;FALSE_FRAUD_CLAIM\&quot;   - \&quot;FRAUDULENT_3RD_PARTY\&quot;   - \&quot;COMPANY_TAKEOVER\&quot;   - \&quot;FICTITIOUS_EMPLOYER\&quot;   - \&quot;COLLUSIVE_EMPLOYER\&quot;   - \&quot;OVER_VALUATION_OF_ASSETS\&quot;   - \&quot;FALSIFIED_EMPLOYMENT_DETAILS\&quot;   - \&quot;MANIPULATED_IDENTITY\&quot;   - \&quot;SYNDICATED_FRAUD\&quot;   - \&quot;INTERNAL_FRAUD\&quot;   - \&quot;BANK_FRAUD\&quot;   - \&quot;UNDISCLOSED_DATA\&quot;   - \&quot;FALSE_HARDSHIP\&quot;   - \&quot;SMR_REPORT_LODGED\&quot;   - \&quot;2X_SMR_REPORTS_LODGED\&quot;  (optional)
     * @param blockedBy Specify who is setting the entity as blacklisted.  (optional)
     * @param attribute Specify the blacklisted attribute. Valid values are:   - \&quot;ENTIRE_PROFILE\&quot;   - \&quot;FULL_NAME\&quot;   - \&quot;EMAIL_ADDRESS\&quot;   - \&quot;PHONE_NUMBER\&quot;   - \&quot;ID_DOCUMENT\&quot;   - \&quot;MAILING_ADDRESS\&quot;   - \&quot;RESIDENTIAL_ADDRESS\&quot;     (optional)
     * @param originalId Specify the Id of the matching blacklisted entity or single data-point.  (optional)
     * @return ApiResponse&lt;EntityResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResultObject> blacklistEntityWithHttpInfo(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String blockedBy, String attribute, String originalId) throws ApiException {
        okhttp3.Call localVarCall = blacklistEntityValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, blockedBy, attribute, originalId, null);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Entity Blacklist State. (asynchronously)
     * Mark the entity as blacklisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for blacklisting. Valid values are:   - \&quot;NO_REASON_SUPPLIED\&quot;   - \&quot;FABRICATED_IDENTITY\&quot;   - \&quot;IDENTITY_TAKEOVER\&quot;   - \&quot;FALSIFIED_ID_DOCUMENTS\&quot;   - \&quot;STOLEN_ID_DOCUMENTS\&quot;   - \&quot;MERCHANT_FRAUD\&quot;   - \&quot;NEVER_PAY_BUST_OUT\&quot;   - \&quot;CONFLICTING_DATA_PROVIDED\&quot;   - \&quot;MONEY_MULE\&quot;   - \&quot;FALSE_FRAUD_CLAIM\&quot;   - \&quot;FRAUDULENT_3RD_PARTY\&quot;   - \&quot;COMPANY_TAKEOVER\&quot;   - \&quot;FICTITIOUS_EMPLOYER\&quot;   - \&quot;COLLUSIVE_EMPLOYER\&quot;   - \&quot;OVER_VALUATION_OF_ASSETS\&quot;   - \&quot;FALSIFIED_EMPLOYMENT_DETAILS\&quot;   - \&quot;MANIPULATED_IDENTITY\&quot;   - \&quot;SYNDICATED_FRAUD\&quot;   - \&quot;INTERNAL_FRAUD\&quot;   - \&quot;BANK_FRAUD\&quot;   - \&quot;UNDISCLOSED_DATA\&quot;   - \&quot;FALSE_HARDSHIP\&quot;   - \&quot;SMR_REPORT_LODGED\&quot;   - \&quot;2X_SMR_REPORTS_LODGED\&quot;  (optional)
     * @param blockedBy Specify who is setting the entity as blacklisted.  (optional)
     * @param attribute Specify the blacklisted attribute. Valid values are:   - \&quot;ENTIRE_PROFILE\&quot;   - \&quot;FULL_NAME\&quot;   - \&quot;EMAIL_ADDRESS\&quot;   - \&quot;PHONE_NUMBER\&quot;   - \&quot;ID_DOCUMENT\&quot;   - \&quot;MAILING_ADDRESS\&quot;   - \&quot;RESIDENTIAL_ADDRESS\&quot;     (optional)
     * @param originalId Specify the Id of the matching blacklisted entity or single data-point.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blacklistEntityAsync(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String blockedBy, String attribute, String originalId, final ApiCallback<EntityResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = blacklistEntityValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, blockedBy, attribute, originalId, _callback);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entityMonitoring
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityMonitoringCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entityId}/flag/monitor"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (set != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set", set));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityMonitoringValidateBeforeCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling entityMonitoring(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling entityMonitoring(Async)");
        }

        // verify the required parameter 'set' is set
        if (set == null) {
            throw new ApiException("Missing the required parameter 'set' when calling entityMonitoring(Async)");
        }

        return entityMonitoringCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, _callback);

    }

    /**
     * Set Entity Ongoing AML Monitoring Status.
     * Mark the entity as being monitored or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return EntityResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public EntityResultObject entityMonitoring(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID) throws ApiException {
        ApiResponse<EntityResultObject> localVarResp = entityMonitoringWithHttpInfo(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID);
        return localVarResp.getData();
    }

    /**
     * Set Entity Ongoing AML Monitoring Status.
     * Mark the entity as being monitored or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return ApiResponse&lt;EntityResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResultObject> entityMonitoringWithHttpInfo(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID) throws ApiException {
        okhttp3.Call localVarCall = entityMonitoringValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, null);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Entity Ongoing AML Monitoring Status. (asynchronously)
     * Mark the entity as being monitored or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entityMonitoringAsync(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback<EntityResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityMonitoringValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, _callback);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagDuplicateEntity
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param otherId An entityId returned previously from an earlier call to /check or /entity. Used when an operation requires two entityIds (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagDuplicateEntityCall(UUID xFrankieCustomerID, UUID entityId, UUID otherId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entityId}/flag/duplicate/{otherId}"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "otherId" + "}", localVarApiClient.escapeString(otherId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (set != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set", set));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagDuplicateEntityValidateBeforeCall(UUID xFrankieCustomerID, UUID entityId, UUID otherId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling flagDuplicateEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling flagDuplicateEntity(Async)");
        }

        // verify the required parameter 'otherId' is set
        if (otherId == null) {
            throw new ApiException("Missing the required parameter 'otherId' when calling flagDuplicateEntity(Async)");
        }

        // verify the required parameter 'set' is set
        if (set == null) {
            throw new ApiException("Missing the required parameter 'set' when calling flagDuplicateEntity(Async)");
        }

        return flagDuplicateEntityCall(xFrankieCustomerID, entityId, otherId, set, xFrankieCustomerChildID, _callback);

    }

    /**
     * Resolve Duplicate States.
     * Resolve the state of a pair of duplicate entities with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. Setting duplicate to &#39;true&#39; will make entityId invisible for most purposes and otherId will continue to function as normal. Setting duplicate to &#39;false&#39; means the two entities are in fact separate but similar and they will both continue to exist independently but will no longer be identified as duplicates of eachother. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param otherId An entityId returned previously from an earlier call to /check or /entity. Used when an operation requires two entityIds (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return EntityResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public EntityResultObject flagDuplicateEntity(UUID xFrankieCustomerID, UUID entityId, UUID otherId, Boolean set, UUID xFrankieCustomerChildID) throws ApiException {
        ApiResponse<EntityResultObject> localVarResp = flagDuplicateEntityWithHttpInfo(xFrankieCustomerID, entityId, otherId, set, xFrankieCustomerChildID);
        return localVarResp.getData();
    }

    /**
     * Resolve Duplicate States.
     * Resolve the state of a pair of duplicate entities with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. Setting duplicate to &#39;true&#39; will make entityId invisible for most purposes and otherId will continue to function as normal. Setting duplicate to &#39;false&#39; means the two entities are in fact separate but similar and they will both continue to exist independently but will no longer be identified as duplicates of eachother. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param otherId An entityId returned previously from an earlier call to /check or /entity. Used when an operation requires two entityIds (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return ApiResponse&lt;EntityResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResultObject> flagDuplicateEntityWithHttpInfo(UUID xFrankieCustomerID, UUID entityId, UUID otherId, Boolean set, UUID xFrankieCustomerChildID) throws ApiException {
        okhttp3.Call localVarCall = flagDuplicateEntityValidateBeforeCall(xFrankieCustomerID, entityId, otherId, set, xFrankieCustomerChildID, null);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resolve Duplicate States. (asynchronously)
     * Resolve the state of a pair of duplicate entities with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. Setting duplicate to &#39;true&#39; will make entityId invisible for most purposes and otherId will continue to function as normal. Setting duplicate to &#39;false&#39; means the two entities are in fact separate but similar and they will both continue to exist independently but will no longer be identified as duplicates of eachother. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param otherId An entityId returned previously from an earlier call to /check or /entity. Used when an operation requires two entityIds (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagDuplicateEntityAsync(UUID xFrankieCustomerID, UUID entityId, UUID otherId, Boolean set, UUID xFrankieCustomerChildID, final ApiCallback<EntityResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagDuplicateEntityValidateBeforeCall(xFrankieCustomerID, entityId, otherId, set, xFrankieCustomerChildID, _callback);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistEntity
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for watchlisting. Valid values are:  - \&quot;WAS_BLACKLISTED\&quot;  (optional)
     * @param comment A comment describing the reason for a request.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call watchlistEntityCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/{entityId}/flag/watchlist"
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (set != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set", set));
        }

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistEntityValidateBeforeCall(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling watchlistEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling watchlistEntity(Async)");
        }

        // verify the required parameter 'set' is set
        if (set == null) {
            throw new ApiException("Missing the required parameter 'set' when calling watchlistEntity(Async)");
        }

        return watchlistEntityCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, comment, _callback);

    }

    /**
     * Set Entity Watchlist State.
     * Mark the entity as watchlisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for watchlisting. Valid values are:  - \&quot;WAS_BLACKLISTED\&quot;  (optional)
     * @param comment A comment describing the reason for a request.  (optional)
     * @return EntityResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public EntityResultObject watchlistEntity(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String comment) throws ApiException {
        ApiResponse<EntityResultObject> localVarResp = watchlistEntityWithHttpInfo(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, comment);
        return localVarResp.getData();
    }

    /**
     * Set Entity Watchlist State.
     * Mark the entity as watchlisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for watchlisting. Valid values are:  - \&quot;WAS_BLACKLISTED\&quot;  (optional)
     * @param comment A comment describing the reason for a request.  (optional)
     * @return ApiResponse&lt;EntityResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityResultObject> watchlistEntityWithHttpInfo(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String comment) throws ApiException {
        okhttp3.Call localVarCall = watchlistEntityValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, comment, null);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Entity Watchlist State. (asynchronously)
     * Mark the entity as watchlisted or not with the &#39;?set&#x3D;&#39; query parameter as &#39;true&#39; or &#39;false&#39;. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param entityId The entityId returned previously from an earlier call to /check or /entity (required)
     * @param set Set the value of an entity flag.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param reason Set the reason for watchlisting. Valid values are:  - \&quot;WAS_BLACKLISTED\&quot;  (optional)
     * @param comment A comment describing the reason for a request.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the entity object as it stands now. No docScan file data from any attached ID documents will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call watchlistEntityAsync(UUID xFrankieCustomerID, UUID entityId, Boolean set, UUID xFrankieCustomerChildID, String reason, String comment, final ApiCallback<EntityResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistEntityValidateBeforeCall(xFrankieCustomerID, entityId, set, xFrankieCustomerChildID, reason, comment, _callback);
        Type localVarReturnType = new TypeToken<EntityResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
