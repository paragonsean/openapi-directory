/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CourtJudgement;
import org.openapitools.client.model.InsolvencyNotice;
import org.openapitools.client.model.Loan;
import org.openapitools.client.model.MercantileEnquiry;
import org.openapitools.client.model.PaymentDefault;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportCreditReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportCreditReport {
  public static final String SERIALIZED_NAME_COURT_JUDGEMENTS = "courtJudgements";
  @SerializedName(SERIALIZED_NAME_COURT_JUDGEMENTS)
  private List<CourtJudgement> courtJudgements = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDIT_ENQUIRIES = "creditEnquiries";
  @SerializedName(SERIALIZED_NAME_CREDIT_ENQUIRIES)
  private Integer creditEnquiries;

  public static final String SERIALIZED_NAME_INSOLVENCY_NOTICES = "insolvencyNotices";
  @SerializedName(SERIALIZED_NAME_INSOLVENCY_NOTICES)
  private List<InsolvencyNotice> insolvencyNotices = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOANS = "loans";
  @SerializedName(SERIALIZED_NAME_LOANS)
  private List<Loan> loans = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCANTILE_ENQUIRIES = "mercantileEnquiries";
  @SerializedName(SERIALIZED_NAME_MERCANTILE_ENQUIRIES)
  private List<MercantileEnquiry> mercantileEnquiries = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_DEFAULTS = "paymentDefaults";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DEFAULTS)
  private List<PaymentDefault> paymentDefaults = new ArrayList<>();

  public ReportCreditReport() {
  }

  public ReportCreditReport courtJudgements(List<CourtJudgement> courtJudgements) {
    this.courtJudgements = courtJudgements;
    return this;
  }

  public ReportCreditReport addCourtJudgementsItem(CourtJudgement courtJudgementsItem) {
    if (this.courtJudgements == null) {
      this.courtJudgements = new ArrayList<>();
    }
    this.courtJudgements.add(courtJudgementsItem);
    return this;
  }

  /**
   * CreditorWatch aggregate data from courts around Australia to provide a summary of court actions against an entity. When available, details of the action include location, case number, state, plaintiff, nature of the claim, action type and dollar amount.
   * @return courtJudgements
   */
  @javax.annotation.Nullable
  public List<CourtJudgement> getCourtJudgements() {
    return courtJudgements;
  }

  public void setCourtJudgements(List<CourtJudgement> courtJudgements) {
    this.courtJudgements = courtJudgements;
  }


  public ReportCreditReport creditEnquiries(Integer creditEnquiries) {
    this.creditEnquiries = creditEnquiries;
    return this;
  }

  /**
   * Credit enquiries provide an indication of the number of times an entity&#39;s credit file has been accessed.
   * @return creditEnquiries
   */
  @javax.annotation.Nullable
  public Integer getCreditEnquiries() {
    return creditEnquiries;
  }

  public void setCreditEnquiries(Integer creditEnquiries) {
    this.creditEnquiries = creditEnquiries;
  }


  public ReportCreditReport insolvencyNotices(List<InsolvencyNotice> insolvencyNotices) {
    this.insolvencyNotices = insolvencyNotices;
    return this;
  }

  public ReportCreditReport addInsolvencyNoticesItem(InsolvencyNotice insolvencyNoticesItem) {
    if (this.insolvencyNotices == null) {
      this.insolvencyNotices = new ArrayList<>();
    }
    this.insolvencyNotices.add(insolvencyNoticesItem);
    return this;
  }

  /**
   * Insolvency and other published notices are provided by ASIC. These published notices provide details on external administrations, winding up applications (voluntary or by a court) and proposed company deregistrations, amongst other things. The notices contain important contact details and dates for creditors. These notices are provided directly from the ASIC insolvency notices website. If you require further information, visit:     https://insolvencynotices.asic.gov.au.
   * @return insolvencyNotices
   */
  @javax.annotation.Nullable
  public List<InsolvencyNotice> getInsolvencyNotices() {
    return insolvencyNotices;
  }

  public void setInsolvencyNotices(List<InsolvencyNotice> insolvencyNotices) {
    this.insolvencyNotices = insolvencyNotices;
  }


  public ReportCreditReport loans(List<Loan> loans) {
    this.loans = loans;
    return this;
  }

  public ReportCreditReport addLoansItem(Loan loansItem) {
    if (this.loans == null) {
      this.loans = new ArrayList<>();
    }
    this.loans.add(loansItem);
    return this;
  }

  /**
   * Get loans
   * @return loans
   */
  @javax.annotation.Nullable
  public List<Loan> getLoans() {
    return loans;
  }

  public void setLoans(List<Loan> loans) {
    this.loans = loans;
  }


  public ReportCreditReport mercantileEnquiries(List<MercantileEnquiry> mercantileEnquiries) {
    this.mercantileEnquiries = mercantileEnquiries;
    return this;
  }

  public ReportCreditReport addMercantileEnquiriesItem(MercantileEnquiry mercantileEnquiriesItem) {
    if (this.mercantileEnquiries == null) {
      this.mercantileEnquiries = new ArrayList<>();
    }
    this.mercantileEnquiries.add(mercantileEnquiriesItem);
    return this;
  }

  /**
   * A Mercantile enquiry is an indication that a mercantile agency (or debt collection agency) has conducted an enquiry on this entity for the purpose of debt collection.
   * @return mercantileEnquiries
   */
  @javax.annotation.Nullable
  public List<MercantileEnquiry> getMercantileEnquiries() {
    return mercantileEnquiries;
  }

  public void setMercantileEnquiries(List<MercantileEnquiry> mercantileEnquiries) {
    this.mercantileEnquiries = mercantileEnquiries;
  }


  public ReportCreditReport paymentDefaults(List<PaymentDefault> paymentDefaults) {
    this.paymentDefaults = paymentDefaults;
    return this;
  }

  public ReportCreditReport addPaymentDefaultsItem(PaymentDefault paymentDefaultsItem) {
    if (this.paymentDefaults == null) {
      this.paymentDefaults = new ArrayList<>();
    }
    this.paymentDefaults.add(paymentDefaultsItem);
    return this;
  }

  /**
   * A default indicates that the debtor has failed to make a payment for goods or services. Payment Defaults are unique to CreditorWatch and  can have one of three statuses:    - outstanding   - partial payment   - settled. 
   * @return paymentDefaults
   */
  @javax.annotation.Nullable
  public List<PaymentDefault> getPaymentDefaults() {
    return paymentDefaults;
  }

  public void setPaymentDefaults(List<PaymentDefault> paymentDefaults) {
    this.paymentDefaults = paymentDefaults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportCreditReport reportCreditReport = (ReportCreditReport) o;
    return Objects.equals(this.courtJudgements, reportCreditReport.courtJudgements) &&
        Objects.equals(this.creditEnquiries, reportCreditReport.creditEnquiries) &&
        Objects.equals(this.insolvencyNotices, reportCreditReport.insolvencyNotices) &&
        Objects.equals(this.loans, reportCreditReport.loans) &&
        Objects.equals(this.mercantileEnquiries, reportCreditReport.mercantileEnquiries) &&
        Objects.equals(this.paymentDefaults, reportCreditReport.paymentDefaults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courtJudgements, creditEnquiries, insolvencyNotices, loans, mercantileEnquiries, paymentDefaults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportCreditReport {\n");
    sb.append("    courtJudgements: ").append(toIndentedString(courtJudgements)).append("\n");
    sb.append("    creditEnquiries: ").append(toIndentedString(creditEnquiries)).append("\n");
    sb.append("    insolvencyNotices: ").append(toIndentedString(insolvencyNotices)).append("\n");
    sb.append("    loans: ").append(toIndentedString(loans)).append("\n");
    sb.append("    mercantileEnquiries: ").append(toIndentedString(mercantileEnquiries)).append("\n");
    sb.append("    paymentDefaults: ").append(toIndentedString(paymentDefaults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courtJudgements");
    openapiFields.add("creditEnquiries");
    openapiFields.add("insolvencyNotices");
    openapiFields.add("loans");
    openapiFields.add("mercantileEnquiries");
    openapiFields.add("paymentDefaults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportCreditReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportCreditReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportCreditReport is not found in the empty JSON string", ReportCreditReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportCreditReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportCreditReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("courtJudgements") != null && !jsonObj.get("courtJudgements").isJsonNull()) {
        JsonArray jsonArraycourtJudgements = jsonObj.getAsJsonArray("courtJudgements");
        if (jsonArraycourtJudgements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("courtJudgements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `courtJudgements` to be an array in the JSON string but got `%s`", jsonObj.get("courtJudgements").toString()));
          }

          // validate the optional field `courtJudgements` (array)
          for (int i = 0; i < jsonArraycourtJudgements.size(); i++) {
            CourtJudgement.validateJsonElement(jsonArraycourtJudgements.get(i));
          };
        }
      }
      if (jsonObj.get("insolvencyNotices") != null && !jsonObj.get("insolvencyNotices").isJsonNull()) {
        JsonArray jsonArrayinsolvencyNotices = jsonObj.getAsJsonArray("insolvencyNotices");
        if (jsonArrayinsolvencyNotices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("insolvencyNotices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `insolvencyNotices` to be an array in the JSON string but got `%s`", jsonObj.get("insolvencyNotices").toString()));
          }

          // validate the optional field `insolvencyNotices` (array)
          for (int i = 0; i < jsonArrayinsolvencyNotices.size(); i++) {
            InsolvencyNotice.validateJsonElement(jsonArrayinsolvencyNotices.get(i));
          };
        }
      }
      if (jsonObj.get("loans") != null && !jsonObj.get("loans").isJsonNull()) {
        JsonArray jsonArrayloans = jsonObj.getAsJsonArray("loans");
        if (jsonArrayloans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loans` to be an array in the JSON string but got `%s`", jsonObj.get("loans").toString()));
          }

          // validate the optional field `loans` (array)
          for (int i = 0; i < jsonArrayloans.size(); i++) {
            Loan.validateJsonElement(jsonArrayloans.get(i));
          };
        }
      }
      if (jsonObj.get("mercantileEnquiries") != null && !jsonObj.get("mercantileEnquiries").isJsonNull()) {
        JsonArray jsonArraymercantileEnquiries = jsonObj.getAsJsonArray("mercantileEnquiries");
        if (jsonArraymercantileEnquiries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mercantileEnquiries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mercantileEnquiries` to be an array in the JSON string but got `%s`", jsonObj.get("mercantileEnquiries").toString()));
          }

          // validate the optional field `mercantileEnquiries` (array)
          for (int i = 0; i < jsonArraymercantileEnquiries.size(); i++) {
            MercantileEnquiry.validateJsonElement(jsonArraymercantileEnquiries.get(i));
          };
        }
      }
      if (jsonObj.get("paymentDefaults") != null && !jsonObj.get("paymentDefaults").isJsonNull()) {
        JsonArray jsonArraypaymentDefaults = jsonObj.getAsJsonArray("paymentDefaults");
        if (jsonArraypaymentDefaults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentDefaults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentDefaults` to be an array in the JSON string but got `%s`", jsonObj.get("paymentDefaults").toString()));
          }

          // validate the optional field `paymentDefaults` (array)
          for (int i = 0; i < jsonArraypaymentDefaults.size(); i++) {
            PaymentDefault.validateJsonElement(jsonArraypaymentDefaults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportCreditReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportCreditReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportCreditReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportCreditReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportCreditReport>() {
           @Override
           public void write(JsonWriter out, ReportCreditReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportCreditReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportCreditReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportCreditReport
   * @throws IOException if the JSON string is invalid with respect to ReportCreditReport
   */
  public static ReportCreditReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportCreditReport.class);
  }

  /**
   * Convert an instance of ReportCreditReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

