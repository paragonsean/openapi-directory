/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.RetrievedResponseObject;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RetrieveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RetrieveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RetrieveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retrieveResult
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param payload Specifies the type of the payload field in the retrieved response. Default is &#39;string&#39;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveResultCall(UUID xFrankieCustomerID, String requestId, UUID xFrankieCustomerChildID, String payload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retrieve/response/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payload", payload));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveResultValidateBeforeCall(UUID xFrankieCustomerID, String requestId, UUID xFrankieCustomerChildID, String payload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling retrieveResult(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling retrieveResult(Async)");
        }

        return retrieveResultCall(xFrankieCustomerID, requestId, xFrankieCustomerChildID, payload, _callback);

    }

    /**
     * (Re)retrieve Response Result.
     * If you&#39;ve received a notification that you previously backgrounded transaction has completed, or you wish to re-retrive a result from an earlier transaction, then you can simply request the result from our encrypted cache  The response will return the original HTTP code, along with the payload that would have been returned in the original request. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param payload Specifies the type of the payload field in the retrieved response. Default is &#39;string&#39;.  (optional)
     * @return RetrievedResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public RetrievedResponseObject retrieveResult(UUID xFrankieCustomerID, String requestId, UUID xFrankieCustomerChildID, String payload) throws ApiException {
        ApiResponse<RetrievedResponseObject> localVarResp = retrieveResultWithHttpInfo(xFrankieCustomerID, requestId, xFrankieCustomerChildID, payload);
        return localVarResp.getData();
    }

    /**
     * (Re)retrieve Response Result.
     * If you&#39;ve received a notification that you previously backgrounded transaction has completed, or you wish to re-retrive a result from an earlier transaction, then you can simply request the result from our encrypted cache  The response will return the original HTTP code, along with the payload that would have been returned in the original request. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param payload Specifies the type of the payload field in the retrieved response. Default is &#39;string&#39;.  (optional)
     * @return ApiResponse&lt;RetrievedResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrievedResponseObject> retrieveResultWithHttpInfo(UUID xFrankieCustomerID, String requestId, UUID xFrankieCustomerChildID, String payload) throws ApiException {
        okhttp3.Call localVarCall = retrieveResultValidateBeforeCall(xFrankieCustomerID, requestId, xFrankieCustomerChildID, payload, null);
        Type localVarReturnType = new TypeToken<RetrievedResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Re)retrieve Response Result. (asynchronously)
     * If you&#39;ve received a notification that you previously backgrounded transaction has completed, or you wish to re-retrive a result from an earlier transaction, then you can simply request the result from our encrypted cache  The response will return the original HTTP code, along with the payload that would have been returned in the original request. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param requestId This will be the same RequestId that was sent in the 202 acceptance response.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param payload Specifies the type of the payload field in the retrieved response. Default is &#39;string&#39;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveResultAsync(UUID xFrankieCustomerID, String requestId, UUID xFrankieCustomerChildID, String payload, final ApiCallback<RetrievedResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveResultValidateBeforeCall(xFrankieCustomerID, requestId, xFrankieCustomerChildID, payload, _callback);
        Type localVarReturnType = new TypeToken<RetrievedResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
