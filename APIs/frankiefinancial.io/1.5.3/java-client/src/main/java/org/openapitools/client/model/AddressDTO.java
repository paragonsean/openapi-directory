/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayOfAddressLineDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddressDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddressDTO {
  public static final String SERIALIZED_NAME_ADDRESS_IN_ONE_LINE = "AddressInOneLine";
  @SerializedName(SERIALIZED_NAME_ADDRESS_IN_ONE_LINE)
  private String addressInOneLine;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "AddressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "AddressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_LINE3 = "AddressLine3";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE3)
  private String addressLine3;

  public static final String SERIALIZED_NAME_ADDRESS_LINE4 = "AddressLine4";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE4)
  private String addressLine4;

  public static final String SERIALIZED_NAME_ADDRESS_LINE5 = "AddressLine5";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE5)
  private String addressLine5;

  public static final String SERIALIZED_NAME_CITY_TOWN = "CityTown";
  @SerializedName(SERIALIZED_NAME_CITY_TOWN)
  private String cityTown;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FAX_NUMBER = "FaxNumber";
  @SerializedName(SERIALIZED_NAME_FAX_NUMBER)
  private String faxNumber;

  public static final String SERIALIZED_NAME_LINE = "Line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private ArrayOfAddressLineDTO line;

  public static final String SERIALIZED_NAME_POSTCODE = "Postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_REGION_STATE = "RegionState";
  @SerializedName(SERIALIZED_NAME_REGION_STATE)
  private String regionState;

  public static final String SERIALIZED_NAME_TELEPHONE_NUMBER = "TelephoneNumber";
  @SerializedName(SERIALIZED_NAME_TELEPHONE_NUMBER)
  private String telephoneNumber;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_CODE = "TypeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private String typeCode;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "WebsiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public AddressDTO() {
  }

  public AddressDTO addressInOneLine(String addressInOneLine) {
    this.addressInOneLine = addressInOneLine;
    return this;
  }

  /**
   * Get addressInOneLine
   * @return addressInOneLine
   */
  @javax.annotation.Nullable
  public String getAddressInOneLine() {
    return addressInOneLine;
  }

  public void setAddressInOneLine(String addressInOneLine) {
    this.addressInOneLine = addressInOneLine;
  }


  public AddressDTO addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public AddressDTO addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public AddressDTO addressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
    return this;
  }

  /**
   * Get addressLine3
   * @return addressLine3
   */
  @javax.annotation.Nullable
  public String getAddressLine3() {
    return addressLine3;
  }

  public void setAddressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
  }


  public AddressDTO addressLine4(String addressLine4) {
    this.addressLine4 = addressLine4;
    return this;
  }

  /**
   * Get addressLine4
   * @return addressLine4
   */
  @javax.annotation.Nullable
  public String getAddressLine4() {
    return addressLine4;
  }

  public void setAddressLine4(String addressLine4) {
    this.addressLine4 = addressLine4;
  }


  public AddressDTO addressLine5(String addressLine5) {
    this.addressLine5 = addressLine5;
    return this;
  }

  /**
   * Get addressLine5
   * @return addressLine5
   */
  @javax.annotation.Nullable
  public String getAddressLine5() {
    return addressLine5;
  }

  public void setAddressLine5(String addressLine5) {
    this.addressLine5 = addressLine5;
  }


  public AddressDTO cityTown(String cityTown) {
    this.cityTown = cityTown;
    return this;
  }

  /**
   * Get cityTown
   * @return cityTown
   */
  @javax.annotation.Nullable
  public String getCityTown() {
    return cityTown;
  }

  public void setCityTown(String cityTown) {
    this.cityTown = cityTown;
  }


  public AddressDTO country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AddressDTO email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AddressDTO faxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
    return this;
  }

  /**
   * Get faxNumber
   * @return faxNumber
   */
  @javax.annotation.Nullable
  public String getFaxNumber() {
    return faxNumber;
  }

  public void setFaxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
  }


  public AddressDTO line(ArrayOfAddressLineDTO line) {
    this.line = line;
    return this;
  }

  /**
   * Get line
   * @return line
   */
  @javax.annotation.Nullable
  public ArrayOfAddressLineDTO getLine() {
    return line;
  }

  public void setLine(ArrayOfAddressLineDTO line) {
    this.line = line;
  }


  public AddressDTO postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public AddressDTO regionState(String regionState) {
    this.regionState = regionState;
    return this;
  }

  /**
   * Get regionState
   * @return regionState
   */
  @javax.annotation.Nullable
  public String getRegionState() {
    return regionState;
  }

  public void setRegionState(String regionState) {
    this.regionState = regionState;
  }


  public AddressDTO telephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
    return this;
  }

  /**
   * Get telephoneNumber
   * @return telephoneNumber
   */
  @javax.annotation.Nullable
  public String getTelephoneNumber() {
    return telephoneNumber;
  }

  public void setTelephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
  }


  public AddressDTO type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AddressDTO typeCode(String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * Get typeCode
   * @return typeCode
   */
  @javax.annotation.Nullable
  public String getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(String typeCode) {
    this.typeCode = typeCode;
  }


  public AddressDTO websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Get websiteUrl
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressDTO addressDTO = (AddressDTO) o;
    return Objects.equals(this.addressInOneLine, addressDTO.addressInOneLine) &&
        Objects.equals(this.addressLine1, addressDTO.addressLine1) &&
        Objects.equals(this.addressLine2, addressDTO.addressLine2) &&
        Objects.equals(this.addressLine3, addressDTO.addressLine3) &&
        Objects.equals(this.addressLine4, addressDTO.addressLine4) &&
        Objects.equals(this.addressLine5, addressDTO.addressLine5) &&
        Objects.equals(this.cityTown, addressDTO.cityTown) &&
        Objects.equals(this.country, addressDTO.country) &&
        Objects.equals(this.email, addressDTO.email) &&
        Objects.equals(this.faxNumber, addressDTO.faxNumber) &&
        Objects.equals(this.line, addressDTO.line) &&
        Objects.equals(this.postcode, addressDTO.postcode) &&
        Objects.equals(this.regionState, addressDTO.regionState) &&
        Objects.equals(this.telephoneNumber, addressDTO.telephoneNumber) &&
        Objects.equals(this.type, addressDTO.type) &&
        Objects.equals(this.typeCode, addressDTO.typeCode) &&
        Objects.equals(this.websiteUrl, addressDTO.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressInOneLine, addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, cityTown, country, email, faxNumber, line, postcode, regionState, telephoneNumber, type, typeCode, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressDTO {\n");
    sb.append("    addressInOneLine: ").append(toIndentedString(addressInOneLine)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressLine3: ").append(toIndentedString(addressLine3)).append("\n");
    sb.append("    addressLine4: ").append(toIndentedString(addressLine4)).append("\n");
    sb.append("    addressLine5: ").append(toIndentedString(addressLine5)).append("\n");
    sb.append("    cityTown: ").append(toIndentedString(cityTown)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    faxNumber: ").append(toIndentedString(faxNumber)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    regionState: ").append(toIndentedString(regionState)).append("\n");
    sb.append("    telephoneNumber: ").append(toIndentedString(telephoneNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddressInOneLine");
    openapiFields.add("AddressLine1");
    openapiFields.add("AddressLine2");
    openapiFields.add("AddressLine3");
    openapiFields.add("AddressLine4");
    openapiFields.add("AddressLine5");
    openapiFields.add("CityTown");
    openapiFields.add("Country");
    openapiFields.add("Email");
    openapiFields.add("FaxNumber");
    openapiFields.add("Line");
    openapiFields.add("Postcode");
    openapiFields.add("RegionState");
    openapiFields.add("TelephoneNumber");
    openapiFields.add("Type");
    openapiFields.add("TypeCode");
    openapiFields.add("WebsiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressDTO is not found in the empty JSON string", AddressDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AddressInOneLine") != null && !jsonObj.get("AddressInOneLine").isJsonNull()) && !jsonObj.get("AddressInOneLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressInOneLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressInOneLine").toString()));
      }
      if ((jsonObj.get("AddressLine1") != null && !jsonObj.get("AddressLine1").isJsonNull()) && !jsonObj.get("AddressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressLine1").toString()));
      }
      if ((jsonObj.get("AddressLine2") != null && !jsonObj.get("AddressLine2").isJsonNull()) && !jsonObj.get("AddressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressLine2").toString()));
      }
      if ((jsonObj.get("AddressLine3") != null && !jsonObj.get("AddressLine3").isJsonNull()) && !jsonObj.get("AddressLine3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressLine3").toString()));
      }
      if ((jsonObj.get("AddressLine4") != null && !jsonObj.get("AddressLine4").isJsonNull()) && !jsonObj.get("AddressLine4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressLine4").toString()));
      }
      if ((jsonObj.get("AddressLine5") != null && !jsonObj.get("AddressLine5").isJsonNull()) && !jsonObj.get("AddressLine5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressLine5").toString()));
      }
      if ((jsonObj.get("CityTown") != null && !jsonObj.get("CityTown").isJsonNull()) && !jsonObj.get("CityTown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CityTown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CityTown").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("FaxNumber") != null && !jsonObj.get("FaxNumber").isJsonNull()) && !jsonObj.get("FaxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaxNumber").toString()));
      }
      // validate the optional field `Line`
      if (jsonObj.get("Line") != null && !jsonObj.get("Line").isJsonNull()) {
        ArrayOfAddressLineDTO.validateJsonElement(jsonObj.get("Line"));
      }
      if ((jsonObj.get("Postcode") != null && !jsonObj.get("Postcode").isJsonNull()) && !jsonObj.get("Postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Postcode").toString()));
      }
      if ((jsonObj.get("RegionState") != null && !jsonObj.get("RegionState").isJsonNull()) && !jsonObj.get("RegionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegionState").toString()));
      }
      if ((jsonObj.get("TelephoneNumber") != null && !jsonObj.get("TelephoneNumber").isJsonNull()) && !jsonObj.get("TelephoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TelephoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TelephoneNumber").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("TypeCode") != null && !jsonObj.get("TypeCode").isJsonNull()) && !jsonObj.get("TypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeCode").toString()));
      }
      if ((jsonObj.get("WebsiteUrl") != null && !jsonObj.get("WebsiteUrl").isJsonNull()) && !jsonObj.get("WebsiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebsiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebsiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressDTO>() {
           @Override
           public void write(JsonWriter out, AddressDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressDTO
   * @throws IOException if the JSON string is invalid with respect to AddressDTO
   */
  public static AddressDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressDTO.class);
  }

  /**
   * Convert an instance of AddressDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

