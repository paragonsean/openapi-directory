/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.CourtDetailsObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Officer details as returned from an ASIC report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfficerObject {
  public static final String SERIALIZED_NAME_APPOINTMENT_DATE = "appointmentDate";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_DATE)
  private LocalDate appointmentDate;

  public static final String SERIALIZED_NAME_COURT_DETAILS = "courtDetails";
  @SerializedName(SERIALIZED_NAME_COURT_DETAILS)
  private CourtDetailsObject courtDetails;

  public static final String SERIALIZED_NAME_DOC_NUMBER = "docNumber";
  @SerializedName(SERIALIZED_NAME_DOC_NUMBER)
  private String docNumber;

  public static final String SERIALIZED_NAME_DOC_NUMBER_QUALIFIER = "docNumberQualifier";
  @SerializedName(SERIALIZED_NAME_DOC_NUMBER_QUALIFIER)
  private String docNumberQualifier;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_DESCRIPTION = "typeDescription";
  @SerializedName(SERIALIZED_NAME_TYPE_DESCRIPTION)
  private String typeDescription;

  public OfficerObject() {
  }

  public OfficerObject appointmentDate(LocalDate appointmentDate) {
    this.appointmentDate = appointmentDate;
    return this;
  }

  /**
   * Get appointmentDate
   * @return appointmentDate
   */
  @javax.annotation.Nullable
  public LocalDate getAppointmentDate() {
    return appointmentDate;
  }

  public void setAppointmentDate(LocalDate appointmentDate) {
    this.appointmentDate = appointmentDate;
  }


  public OfficerObject courtDetails(CourtDetailsObject courtDetails) {
    this.courtDetails = courtDetails;
    return this;
  }

  /**
   * Get courtDetails
   * @return courtDetails
   */
  @javax.annotation.Nullable
  public CourtDetailsObject getCourtDetails() {
    return courtDetails;
  }

  public void setCourtDetails(CourtDetailsObject courtDetails) {
    this.courtDetails = courtDetails;
  }


  public OfficerObject docNumber(String docNumber) {
    this.docNumber = docNumber;
    return this;
  }

  /**
   * Get docNumber
   * @return docNumber
   */
  @javax.annotation.Nullable
  public String getDocNumber() {
    return docNumber;
  }

  public void setDocNumber(String docNumber) {
    this.docNumber = docNumber;
  }


  public OfficerObject docNumberQualifier(String docNumberQualifier) {
    this.docNumberQualifier = docNumberQualifier;
    return this;
  }

  /**
   * Get docNumberQualifier
   * @return docNumberQualifier
   */
  @javax.annotation.Nullable
  public String getDocNumberQualifier() {
    return docNumberQualifier;
  }

  public void setDocNumberQualifier(String docNumberQualifier) {
    this.docNumberQualifier = docNumberQualifier;
  }


  public OfficerObject entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public OfficerObject status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public OfficerObject type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OfficerObject typeDescription(String typeDescription) {
    this.typeDescription = typeDescription;
    return this;
  }

  /**
   * Get typeDescription
   * @return typeDescription
   */
  @javax.annotation.Nullable
  public String getTypeDescription() {
    return typeDescription;
  }

  public void setTypeDescription(String typeDescription) {
    this.typeDescription = typeDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfficerObject officerObject = (OfficerObject) o;
    return Objects.equals(this.appointmentDate, officerObject.appointmentDate) &&
        Objects.equals(this.courtDetails, officerObject.courtDetails) &&
        Objects.equals(this.docNumber, officerObject.docNumber) &&
        Objects.equals(this.docNumberQualifier, officerObject.docNumberQualifier) &&
        Objects.equals(this.entityId, officerObject.entityId) &&
        Objects.equals(this.status, officerObject.status) &&
        Objects.equals(this.type, officerObject.type) &&
        Objects.equals(this.typeDescription, officerObject.typeDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentDate, courtDetails, docNumber, docNumberQualifier, entityId, status, type, typeDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfficerObject {\n");
    sb.append("    appointmentDate: ").append(toIndentedString(appointmentDate)).append("\n");
    sb.append("    courtDetails: ").append(toIndentedString(courtDetails)).append("\n");
    sb.append("    docNumber: ").append(toIndentedString(docNumber)).append("\n");
    sb.append("    docNumberQualifier: ").append(toIndentedString(docNumberQualifier)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appointmentDate");
    openapiFields.add("courtDetails");
    openapiFields.add("docNumber");
    openapiFields.add("docNumberQualifier");
    openapiFields.add("entityId");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("typeDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfficerObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfficerObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfficerObject is not found in the empty JSON string", OfficerObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfficerObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfficerObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `courtDetails`
      if (jsonObj.get("courtDetails") != null && !jsonObj.get("courtDetails").isJsonNull()) {
        CourtDetailsObject.validateJsonElement(jsonObj.get("courtDetails"));
      }
      if ((jsonObj.get("docNumber") != null && !jsonObj.get("docNumber").isJsonNull()) && !jsonObj.get("docNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNumber").toString()));
      }
      if ((jsonObj.get("docNumberQualifier") != null && !jsonObj.get("docNumberQualifier").isJsonNull()) && !jsonObj.get("docNumberQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docNumberQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docNumberQualifier").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("typeDescription") != null && !jsonObj.get("typeDescription").isJsonNull()) && !jsonObj.get("typeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfficerObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfficerObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfficerObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfficerObject.class));

       return (TypeAdapter<T>) new TypeAdapter<OfficerObject>() {
           @Override
           public void write(JsonWriter out, OfficerObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfficerObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfficerObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfficerObject
   * @throws IOException if the JSON string is invalid with respect to OfficerObject
   */
  public static OfficerObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfficerObject.class);
  }

  /**
   * Convert an instance of OfficerObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

