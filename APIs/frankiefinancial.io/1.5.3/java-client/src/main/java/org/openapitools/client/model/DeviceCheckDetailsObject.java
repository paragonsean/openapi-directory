/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyValuePairObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains any/all details we want to pass on to the device/biometric checking service as part of an activity / transaction. A transaction isn&#39;t just a payment, but can represent a number of different interaction types. See below for more. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceCheckDetailsObject {
  /**
   * The type of activity we&#39;re checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they&#39;re still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch&#39;s LOGIN_3 type, you can send \&quot;_LOGIN_3\&quot; as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. 
   */
  @JsonAdapter(ActivityTypeEnum.Adapter.class)
  public enum ActivityTypeEnum {
    SIGNUP("SIGNUP"),
    
    LOGIN("LOGIN"),
    
    PAYMENT("PAYMENT"),
    
    CONFIRMATION("CONFIRMATION"),
    
    __VENDOR_SPECIFIC_LIST_("_<Vendor Specific List>");

    private String value;

    ActivityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityTypeEnum fromValue(String value) {
      for (ActivityTypeEnum b : ActivityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private ActivityTypeEnum activityType;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private List<KeyValuePairObject> additionalData = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_SESSION_KEY = "checkSessionKey";
  @SerializedName(SERIALIZED_NAME_CHECK_SESSION_KEY)
  private String checkSessionKey;

  /**
   * Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics 
   */
  @JsonAdapter(CheckTypeEnum.Adapter.class)
  public enum CheckTypeEnum {
    DEVICE("DEVICE"),
    
    BIOMETRIC("BIOMETRIC");

    private String value;

    CheckTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckTypeEnum fromValue(String value) {
      for (CheckTypeEnum b : CheckTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CheckTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECK_TYPE = "checkType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private CheckTypeEnum checkType;

  public DeviceCheckDetailsObject() {
  }

  public DeviceCheckDetailsObject activityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * The type of activity we&#39;re checking. Choices are:   - SIGNUP: Used when an entity is signing up to your service  - LOGIN: Used when an already registered entity is logging in to your service  - PAYMENT: Used when you wish to check that all is well for a payment  - CONFIRMATION: User has confirmed an action and you wish to double check they&#39;re still legitimate    You can also supply vendor specific activityTypes if you know them. To do this, make the first character an underscore _.   So for example, to use BioCatch&#39;s LOGIN_3 type, you can send \&quot;_LOGIN_3\&quot; as a value. Note, if you do this, there is no error checking on the Frankie side, and thus if you supply an incorrect value, the call will fail. 
   * @return activityType
   */
  @javax.annotation.Nullable
  public ActivityTypeEnum getActivityType() {
    return activityType;
  }

  public void setActivityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
  }


  public DeviceCheckDetailsObject additionalData(List<KeyValuePairObject> additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  public DeviceCheckDetailsObject addAdditionalDataItem(KeyValuePairObject additionalDataItem) {
    if (this.additionalData == null) {
      this.additionalData = new ArrayList<>();
    }
    this.additionalData.add(additionalDataItem);
    return this;
  }

  /**
   * Collection of additional data points you wish to add to the activity check. These are defined in conjunction with the Customer and the device checking service being used.  Standard values are supplied upon request:  | kvpKey | kvpType | kvpValue | | ------- | -------- | -------- | | detectedIp | general.string | The IP address you detect the transaction coming from | | accountId.src | id.external | Your account identifier. Can be a SHA hash or similar | | accountId.dst | id.external | Target/payee account identifier. Can be a SHA hash or similar | | entityId | id.external | Use this to override the Frankie entityID that would be used to identify | | amount | general.float | Amount involved in the transaction  | | platform  | general.string | One of APP, WEB, MOBILE_WEB. Assumes APP if not supplied | |   |   |   Like the activityType, you can also specify vendor specific additional data parameters by adding a leading underscore \&quot;_\&quot; to the kvpKey. You can set the kvpType to one of the available types, or just use general.string (recommended) 
   * @return additionalData
   */
  @javax.annotation.Nullable
  public List<KeyValuePairObject> getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(List<KeyValuePairObject> additionalData) {
    this.additionalData = additionalData;
  }


  public DeviceCheckDetailsObject checkSessionKey(String checkSessionKey) {
    this.checkSessionKey = checkSessionKey;
    return this;
  }

  /**
   * the unique session based ID that will be checked against the service.
   * @return checkSessionKey
   */
  @javax.annotation.Nullable
  public String getCheckSessionKey() {
    return checkSessionKey;
  }

  public void setCheckSessionKey(String checkSessionKey) {
    this.checkSessionKey = checkSessionKey;
  }


  public DeviceCheckDetailsObject checkType(CheckTypeEnum checkType) {
    this.checkType = checkType;
    return this;
  }

  /**
   * Describes the type of check service we need to verify with. Choices are:    - DEVICE: Services that will be checking device characteristics   - BIOMETRIC: Services that will be checking biomentric characteristics 
   * @return checkType
   */
  @javax.annotation.Nullable
  public CheckTypeEnum getCheckType() {
    return checkType;
  }

  public void setCheckType(CheckTypeEnum checkType) {
    this.checkType = checkType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCheckDetailsObject deviceCheckDetailsObject = (DeviceCheckDetailsObject) o;
    return Objects.equals(this.activityType, deviceCheckDetailsObject.activityType) &&
        Objects.equals(this.additionalData, deviceCheckDetailsObject.additionalData) &&
        Objects.equals(this.checkSessionKey, deviceCheckDetailsObject.checkSessionKey) &&
        Objects.equals(this.checkType, deviceCheckDetailsObject.checkType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, additionalData, checkSessionKey, checkType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCheckDetailsObject {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    checkSessionKey: ").append(toIndentedString(checkSessionKey)).append("\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityType");
    openapiFields.add("additionalData");
    openapiFields.add("checkSessionKey");
    openapiFields.add("checkType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceCheckDetailsObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceCheckDetailsObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceCheckDetailsObject is not found in the empty JSON string", DeviceCheckDetailsObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceCheckDetailsObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceCheckDetailsObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) && !jsonObj.get("activityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityType").toString()));
      }
      // validate the optional field `activityType`
      if (jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) {
        ActivityTypeEnum.validateJsonElement(jsonObj.get("activityType"));
      }
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull()) {
        JsonArray jsonArrayadditionalData = jsonObj.getAsJsonArray("additionalData");
        if (jsonArrayadditionalData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalData` to be an array in the JSON string but got `%s`", jsonObj.get("additionalData").toString()));
          }

          // validate the optional field `additionalData` (array)
          for (int i = 0; i < jsonArrayadditionalData.size(); i++) {
            KeyValuePairObject.validateJsonElement(jsonArrayadditionalData.get(i));
          };
        }
      }
      if ((jsonObj.get("checkSessionKey") != null && !jsonObj.get("checkSessionKey").isJsonNull()) && !jsonObj.get("checkSessionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkSessionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkSessionKey").toString()));
      }
      if ((jsonObj.get("checkType") != null && !jsonObj.get("checkType").isJsonNull()) && !jsonObj.get("checkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkType").toString()));
      }
      // validate the optional field `checkType`
      if (jsonObj.get("checkType") != null && !jsonObj.get("checkType").isJsonNull()) {
        CheckTypeEnum.validateJsonElement(jsonObj.get("checkType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceCheckDetailsObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceCheckDetailsObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceCheckDetailsObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceCheckDetailsObject.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceCheckDetailsObject>() {
           @Override
           public void write(JsonWriter out, DeviceCheckDetailsObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceCheckDetailsObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceCheckDetailsObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceCheckDetailsObject
   * @throws IOException if the JSON string is invalid with respect to DeviceCheckDetailsObject
   */
  public static DeviceCheckDetailsObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceCheckDetailsObject.class);
  }

  /**
   * Convert an instance of DeviceCheckDetailsObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

