/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.EnumFunctionStatus;
import org.openapitools.client.model.EnumNotificationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The following fields represent the data you need in order to retrieve the results of the requested function. See the details of the notification API for more. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationResultObject {
  public static final String SERIALIZED_NAME_CHECK_ID = "checkId";
  @SerializedName(SERIALIZED_NAME_CHECK_ID)
  private UUID checkId;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private UUID documentId;

  public static final String SERIALIZED_NAME_ENTITY_CUSTOMER_REFERENCE = "entityCustomerReference";
  @SerializedName(SERIALIZED_NAME_ENTITY_CUSTOMER_REFERENCE)
  private String entityCustomerReference;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private UUID entityId;

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  public static final String SERIALIZED_NAME_FUNCTION_RESULT = "functionResult";
  @SerializedName(SERIALIZED_NAME_FUNCTION_RESULT)
  private EnumFunctionStatus functionResult;

  public static final String SERIALIZED_NAME_LINK_REFERENCE = "linkReference";
  @SerializedName(SERIALIZED_NAME_LINK_REFERENCE)
  private URI linkReference;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private EnumNotificationType notificationType;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public NotificationResultObject() {
  }

  public NotificationResultObject checkId(UUID checkId) {
    this.checkId = checkId;
    return this;
  }

  /**
   * If you&#39;re calling a processing function of some kind, a check number will be issued. This field will only be present if the function you&#39;re calling would normally return a checkId (such as scan, verify, and compare). 
   * @return checkId
   */
  @javax.annotation.Nullable
  public UUID getCheckId() {
    return checkId;
  }

  public void setCheckId(UUID checkId) {
    this.checkId = checkId;
  }


  public NotificationResultObject documentId(UUID documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Only supplied if the original request was tied to a document. This will be the same ID that was sent in the original acceptance. 
   * @return documentId
   */
  @javax.annotation.Nullable
  public UUID getDocumentId() {
    return documentId;
  }

  public void setDocumentId(UUID documentId) {
    this.documentId = documentId;
  }


  public NotificationResultObject entityCustomerReference(String entityCustomerReference) {
    this.entityCustomerReference = entityCustomerReference;
    return this;
  }

  /**
   * If the entity in entityId above has had an external service ID attached to it in the entity extraData with kvpKey &#x3D; customer_reference, then this is that kvpValue 
   * @return entityCustomerReference
   */
  @javax.annotation.Nullable
  public String getEntityCustomerReference() {
    return entityCustomerReference;
  }

  public void setEntityCustomerReference(String entityCustomerReference) {
    this.entityCustomerReference = entityCustomerReference;
  }


  public NotificationResultObject entityId(UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Only supplied if the original request was tied to an entity. This will be the same ID that was sent in the original acceptance. 
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(UUID entityId) {
    this.entityId = entityId;
  }


  public NotificationResultObject function(String function) {
    this.function = function;
    return this;
  }

  /**
   * Short description of the original function called, or function that was triggered. 
   * @return function
   */
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public NotificationResultObject functionResult(EnumFunctionStatus functionResult) {
    this.functionResult = functionResult;
    return this;
  }

  /**
   * Get functionResult
   * @return functionResult
   */
  @javax.annotation.Nullable
  public EnumFunctionStatus getFunctionResult() {
    return functionResult;
  }

  public void setFunctionResult(EnumFunctionStatus functionResult) {
    this.functionResult = functionResult;
  }


  public NotificationResultObject linkReference(URI linkReference) {
    this.linkReference = linkReference;
    return this;
  }

  /**
   * URI for resource containing more details about the reason for the notification. 
   * @return linkReference
   */
  @javax.annotation.Nullable
  public URI getLinkReference() {
    return linkReference;
  }

  public void setLinkReference(URI linkReference) {
    this.linkReference = linkReference;
  }


  public NotificationResultObject message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A brief, human readable message describing the reason for the notification. 
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NotificationResultObject notificationType(EnumNotificationType notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nullable
  public EnumNotificationType getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(EnumNotificationType notificationType) {
    this.notificationType = notificationType;
  }


  public NotificationResultObject requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Unique identifier for every request. Can be used for tracking down answers with technical support.   Uses the ULID format (a time-based, sortable UUID)  Note: this will be different for every request. 
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public NotificationResultObject username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The portal username that initiated the operation that led to this notification. If applicable and available. 
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationResultObject notificationResultObject = (NotificationResultObject) o;
    return Objects.equals(this.checkId, notificationResultObject.checkId) &&
        Objects.equals(this.documentId, notificationResultObject.documentId) &&
        Objects.equals(this.entityCustomerReference, notificationResultObject.entityCustomerReference) &&
        Objects.equals(this.entityId, notificationResultObject.entityId) &&
        Objects.equals(this.function, notificationResultObject.function) &&
        Objects.equals(this.functionResult, notificationResultObject.functionResult) &&
        Objects.equals(this.linkReference, notificationResultObject.linkReference) &&
        Objects.equals(this.message, notificationResultObject.message) &&
        Objects.equals(this.notificationType, notificationResultObject.notificationType) &&
        Objects.equals(this.requestId, notificationResultObject.requestId) &&
        Objects.equals(this.username, notificationResultObject.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkId, documentId, entityCustomerReference, entityId, function, functionResult, linkReference, message, notificationType, requestId, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationResultObject {\n");
    sb.append("    checkId: ").append(toIndentedString(checkId)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    entityCustomerReference: ").append(toIndentedString(entityCustomerReference)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    functionResult: ").append(toIndentedString(functionResult)).append("\n");
    sb.append("    linkReference: ").append(toIndentedString(linkReference)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkId");
    openapiFields.add("documentId");
    openapiFields.add("entityCustomerReference");
    openapiFields.add("entityId");
    openapiFields.add("function");
    openapiFields.add("functionResult");
    openapiFields.add("linkReference");
    openapiFields.add("message");
    openapiFields.add("notificationType");
    openapiFields.add("requestId");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationResultObject is not found in the empty JSON string", NotificationResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checkId") != null && !jsonObj.get("checkId").isJsonNull()) && !jsonObj.get("checkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkId").toString()));
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("entityCustomerReference") != null && !jsonObj.get("entityCustomerReference").isJsonNull()) && !jsonObj.get("entityCustomerReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityCustomerReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityCustomerReference").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      // validate the optional field `functionResult`
      if (jsonObj.get("functionResult") != null && !jsonObj.get("functionResult").isJsonNull()) {
        EnumFunctionStatus.validateJsonElement(jsonObj.get("functionResult"));
      }
      if ((jsonObj.get("linkReference") != null && !jsonObj.get("linkReference").isJsonNull()) && !jsonObj.get("linkReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkReference").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `notificationType`
      if (jsonObj.get("notificationType") != null && !jsonObj.get("notificationType").isJsonNull()) {
        EnumNotificationType.validateJsonElement(jsonObj.get("notificationType"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationResultObject>() {
           @Override
           public void write(JsonWriter out, NotificationResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationResultObject
   * @throws IOException if the JSON string is invalid with respect to NotificationResultObject
   */
  public static NotificationResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationResultObject.class);
  }

  /**
   * Convert an instance of NotificationResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

