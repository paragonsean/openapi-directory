/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data that was initially supplied to check in the batch file 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuppliedData {
  public static final String SERIALIZED_NAME_ABN = "abn";
  @SerializedName(SERIALIZED_NAME_ABN)
  private String abn;

  public static final String SERIALIZED_NAME_ACN = "acn";
  @SerializedName(SERIALIZED_NAME_ACN)
  private String acn;

  /**
   * The type of company on file. Use the ABR&#39;s company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 
   */
  @JsonAdapter(CompanyTypeEnum.Adapter.class)
  public enum CompanyTypeEnum {
    PRV("PRV"),
    
    PUB("PUB");

    private String value;

    CompanyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompanyTypeEnum fromValue(String value) {
      for (CompanyTypeEnum b : CompanyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompanyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompanyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompanyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompanyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompanyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPANY_TYPE = "company_type";
  @SerializedName(SERIALIZED_NAME_COMPANY_TYPE)
  private CompanyTypeEnum companyType;

  public static final String SERIALIZED_NAME_CUSTOMER_REFERENCE = "customer_reference";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REFERENCE)
  private String customerReference;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public SuppliedData() {
  }

  public SuppliedData abn(String abn) {
    this.abn = abn;
    return this;
  }

  /**
   * Australian Business Number - MUST be 11 digits. Can be supplied in lieu of the ACN 
   * @return abn
   */
  @javax.annotation.Nonnull
  public String getAbn() {
    return abn;
  }

  public void setAbn(String abn) {
    this.abn = abn;
  }


  public SuppliedData acn(String acn) {
    this.acn = acn;
    return this;
  }

  /**
   * Australian Company Number on file - MUST be zero left-padded to 9 digits 
   * @return acn
   */
  @javax.annotation.Nonnull
  public String getAcn() {
    return acn;
  }

  public void setAcn(String acn) {
    this.acn = acn;
  }


  public SuppliedData companyType(CompanyTypeEnum companyType) {
    this.companyType = companyType;
    return this;
  }

  /**
   * The type of company on file. Use the ABR&#39;s company types, as given here:  https://abr.business.gov.au/Documentation/ReferenceData (entity types) 
   * @return companyType
   */
  @javax.annotation.Nonnull
  public CompanyTypeEnum getCompanyType() {
    return companyType;
  }

  public void setCompanyType(CompanyTypeEnum companyType) {
    this.companyType = companyType;
  }


  public SuppliedData customerReference(String customerReference) {
    this.customerReference = customerReference;
    return this;
  }

  /**
   * Your reference number for this company
   * @return customerReference
   */
  @javax.annotation.Nonnull
  public String getCustomerReference() {
    return customerReference;
  }

  public void setCustomerReference(String customerReference) {
    this.customerReference = customerReference;
  }


  public SuppliedData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the company to be verified 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuppliedData suppliedData = (SuppliedData) o;
    return Objects.equals(this.abn, suppliedData.abn) &&
        Objects.equals(this.acn, suppliedData.acn) &&
        Objects.equals(this.companyType, suppliedData.companyType) &&
        Objects.equals(this.customerReference, suppliedData.customerReference) &&
        Objects.equals(this.name, suppliedData.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abn, acn, companyType, customerReference, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuppliedData {\n");
    sb.append("    abn: ").append(toIndentedString(abn)).append("\n");
    sb.append("    acn: ").append(toIndentedString(acn)).append("\n");
    sb.append("    companyType: ").append(toIndentedString(companyType)).append("\n");
    sb.append("    customerReference: ").append(toIndentedString(customerReference)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abn");
    openapiFields.add("acn");
    openapiFields.add("company_type");
    openapiFields.add("customer_reference");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("abn");
    openapiRequiredFields.add("acn");
    openapiRequiredFields.add("company_type");
    openapiRequiredFields.add("customer_reference");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuppliedData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuppliedData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuppliedData is not found in the empty JSON string", SuppliedData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuppliedData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuppliedData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SuppliedData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("abn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abn").toString()));
      }
      if (!jsonObj.get("acn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acn").toString()));
      }
      if (!jsonObj.get("company_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_type").toString()));
      }
      // validate the required field `company_type`
      CompanyTypeEnum.validateJsonElement(jsonObj.get("company_type"));
      if (!jsonObj.get("customer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_reference").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuppliedData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuppliedData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuppliedData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuppliedData.class));

       return (TypeAdapter<T>) new TypeAdapter<SuppliedData>() {
           @Override
           public void write(JsonWriter out, SuppliedData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuppliedData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuppliedData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuppliedData
   * @throws IOException if the JSON string is invalid with respect to SuppliedData
   */
  public static SuppliedData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuppliedData.class);
  }

  /**
   * Convert an instance of SuppliedData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

