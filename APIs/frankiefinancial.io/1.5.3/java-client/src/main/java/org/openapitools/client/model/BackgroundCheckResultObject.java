/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EnumBackgroundCheckFrequency;
import org.openapitools.client.model.EnumBackgroundCheckState;
import org.openapitools.client.model.EnumBackgroundCheckType;
import org.openapitools.client.model.KeyValuePairObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of a background check for a given entity. Background checks include Politically Exposed Person (PEP), sanctions lists, watchlists and adverse media.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackgroundCheckResultObject {
  public static final String SERIALIZED_NAME_BACKGROUND_CHECK_TYPE = "backgroundCheckType";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_CHECK_TYPE)
  private EnumBackgroundCheckType backgroundCheckType;

  public static final String SERIALIZED_NAME_CHECK_DETAILS = "checkDetails";
  @SerializedName(SERIALIZED_NAME_CHECK_DETAILS)
  private List<KeyValuePairObject> checkDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_FREQUENCY = "checkFrequency";
  @SerializedName(SERIALIZED_NAME_CHECK_FREQUENCY)
  private EnumBackgroundCheckFrequency checkFrequency;

  public static final String SERIALIZED_NAME_CHECK_ID = "checkId";
  @SerializedName(SERIALIZED_NAME_CHECK_ID)
  private UUID checkId;

  public static final String SERIALIZED_NAME_CHECK_PERFORMED_BY = "checkPerformedBy";
  @SerializedName(SERIALIZED_NAME_CHECK_PERFORMED_BY)
  private String checkPerformedBy;

  public static final String SERIALIZED_NAME_CHECK_SOURCE = "checkSource";
  @SerializedName(SERIALIZED_NAME_CHECK_SOURCE)
  private String checkSource;

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidenceLevel";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private Integer confidenceLevel;

  public static final String SERIALIZED_NAME_CURRENT_STATE = "currentState";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE)
  private EnumBackgroundCheckState currentState;

  public static final String SERIALIZED_NAME_FIRST_CHECK_DATE = "firstCheckDate";
  @SerializedName(SERIALIZED_NAME_FIRST_CHECK_DATE)
  private OffsetDateTime firstCheckDate;

  public static final String SERIALIZED_NAME_LATEST_CHECK_DATE = "latestCheckDate";
  @SerializedName(SERIALIZED_NAME_LATEST_CHECK_DATE)
  private OffsetDateTime latestCheckDate;

  public BackgroundCheckResultObject() {
  }

  public BackgroundCheckResultObject backgroundCheckType(EnumBackgroundCheckType backgroundCheckType) {
    this.backgroundCheckType = backgroundCheckType;
    return this;
  }

  /**
   * Get backgroundCheckType
   * @return backgroundCheckType
   */
  @javax.annotation.Nullable
  public EnumBackgroundCheckType getBackgroundCheckType() {
    return backgroundCheckType;
  }

  public void setBackgroundCheckType(EnumBackgroundCheckType backgroundCheckType) {
    this.backgroundCheckType = backgroundCheckType;
  }


  public BackgroundCheckResultObject checkDetails(List<KeyValuePairObject> checkDetails) {
    this.checkDetails = checkDetails;
    return this;
  }

  public BackgroundCheckResultObject addCheckDetailsItem(KeyValuePairObject checkDetailsItem) {
    if (this.checkDetails == null) {
      this.checkDetails = new ArrayList<>();
    }
    this.checkDetails.add(checkDetailsItem);
    return this;
  }

  /**
   * Any additional notes that may relate to the state. Free form notes that may contain JSON blobs needing further interpretation.
   * @return checkDetails
   */
  @javax.annotation.Nullable
  public List<KeyValuePairObject> getCheckDetails() {
    return checkDetails;
  }

  public void setCheckDetails(List<KeyValuePairObject> checkDetails) {
    this.checkDetails = checkDetails;
  }


  public BackgroundCheckResultObject checkFrequency(EnumBackgroundCheckFrequency checkFrequency) {
    this.checkFrequency = checkFrequency;
    return this;
  }

  /**
   * Get checkFrequency
   * @return checkFrequency
   */
  @javax.annotation.Nullable
  public EnumBackgroundCheckFrequency getCheckFrequency() {
    return checkFrequency;
  }

  public void setCheckFrequency(EnumBackgroundCheckFrequency checkFrequency) {
    this.checkFrequency = checkFrequency;
  }


  public BackgroundCheckResultObject checkId(UUID checkId) {
    this.checkId = checkId;
    return this;
  }

  /**
   * Unique identifier for every check/comparison/verification. Make sure you reference this ID whenever updating check details. This ID will also be used when pushing check results back to you.
   * @return checkId
   */
  @javax.annotation.Nullable
  public UUID getCheckId() {
    return checkId;
  }

  public void setCheckId(UUID checkId) {
    this.checkId = checkId;
  }


  public BackgroundCheckResultObject checkPerformedBy(String checkPerformedBy) {
    this.checkPerformedBy = checkPerformedBy;
    return this;
  }

  /**
   * Service provider that performed the check. Basically the name of the connector, without the leading con_ 
   * @return checkPerformedBy
   */
  @javax.annotation.Nullable
  public String getCheckPerformedBy() {
    return checkPerformedBy;
  }

  public void setCheckPerformedBy(String checkPerformedBy) {
    this.checkPerformedBy = checkPerformedBy;
  }


  public BackgroundCheckResultObject checkSource(String checkSource) {
    this.checkSource = checkSource;
    return this;
  }

  /**
   * Code that can be used to determine the underlying nature or data source of the checks performed. This may or may not be known by the connector, or may be a provider specific type (e.g. type \&quot;O\&quot;) 
   * @return checkSource
   */
  @javax.annotation.Nullable
  public String getCheckSource() {
    return checkSource;
  }

  public void setCheckSource(String checkSource) {
    this.checkSource = checkSource;
  }


  public BackgroundCheckResultObject confidenceLevel(Integer confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

  /**
   * Confidence in the current results on a scale of 0 (none) to 100 (as certain as possible). Whole integers only.
   * minimum: 0
   * maximum: 100
   * @return confidenceLevel
   */
  @javax.annotation.Nullable
  public Integer getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(Integer confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public BackgroundCheckResultObject currentState(EnumBackgroundCheckState currentState) {
    this.currentState = currentState;
    return this;
  }

  /**
   * Get currentState
   * @return currentState
   */
  @javax.annotation.Nullable
  public EnumBackgroundCheckState getCurrentState() {
    return currentState;
  }

  public void setCurrentState(EnumBackgroundCheckState currentState) {
    this.currentState = currentState;
  }


  public BackgroundCheckResultObject firstCheckDate(OffsetDateTime firstCheckDate) {
    this.firstCheckDate = firstCheckDate;
    return this;
  }

  /**
   * The date and time the item was first checked.
   * @return firstCheckDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstCheckDate() {
    return firstCheckDate;
  }

  public void setFirstCheckDate(OffsetDateTime firstCheckDate) {
    this.firstCheckDate = firstCheckDate;
  }


  public BackgroundCheckResultObject latestCheckDate(OffsetDateTime latestCheckDate) {
    this.latestCheckDate = latestCheckDate;
    return this;
  }

  /**
   * The date and time the item was last checked to provide this result.
   * @return latestCheckDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestCheckDate() {
    return latestCheckDate;
  }

  public void setLatestCheckDate(OffsetDateTime latestCheckDate) {
    this.latestCheckDate = latestCheckDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundCheckResultObject backgroundCheckResultObject = (BackgroundCheckResultObject) o;
    return Objects.equals(this.backgroundCheckType, backgroundCheckResultObject.backgroundCheckType) &&
        Objects.equals(this.checkDetails, backgroundCheckResultObject.checkDetails) &&
        Objects.equals(this.checkFrequency, backgroundCheckResultObject.checkFrequency) &&
        Objects.equals(this.checkId, backgroundCheckResultObject.checkId) &&
        Objects.equals(this.checkPerformedBy, backgroundCheckResultObject.checkPerformedBy) &&
        Objects.equals(this.checkSource, backgroundCheckResultObject.checkSource) &&
        Objects.equals(this.confidenceLevel, backgroundCheckResultObject.confidenceLevel) &&
        Objects.equals(this.currentState, backgroundCheckResultObject.currentState) &&
        Objects.equals(this.firstCheckDate, backgroundCheckResultObject.firstCheckDate) &&
        Objects.equals(this.latestCheckDate, backgroundCheckResultObject.latestCheckDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundCheckType, checkDetails, checkFrequency, checkId, checkPerformedBy, checkSource, confidenceLevel, currentState, firstCheckDate, latestCheckDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundCheckResultObject {\n");
    sb.append("    backgroundCheckType: ").append(toIndentedString(backgroundCheckType)).append("\n");
    sb.append("    checkDetails: ").append(toIndentedString(checkDetails)).append("\n");
    sb.append("    checkFrequency: ").append(toIndentedString(checkFrequency)).append("\n");
    sb.append("    checkId: ").append(toIndentedString(checkId)).append("\n");
    sb.append("    checkPerformedBy: ").append(toIndentedString(checkPerformedBy)).append("\n");
    sb.append("    checkSource: ").append(toIndentedString(checkSource)).append("\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    firstCheckDate: ").append(toIndentedString(firstCheckDate)).append("\n");
    sb.append("    latestCheckDate: ").append(toIndentedString(latestCheckDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundCheckType");
    openapiFields.add("checkDetails");
    openapiFields.add("checkFrequency");
    openapiFields.add("checkId");
    openapiFields.add("checkPerformedBy");
    openapiFields.add("checkSource");
    openapiFields.add("confidenceLevel");
    openapiFields.add("currentState");
    openapiFields.add("firstCheckDate");
    openapiFields.add("latestCheckDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackgroundCheckResultObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackgroundCheckResultObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackgroundCheckResultObject is not found in the empty JSON string", BackgroundCheckResultObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackgroundCheckResultObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackgroundCheckResultObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundCheckType`
      if (jsonObj.get("backgroundCheckType") != null && !jsonObj.get("backgroundCheckType").isJsonNull()) {
        EnumBackgroundCheckType.validateJsonElement(jsonObj.get("backgroundCheckType"));
      }
      if (jsonObj.get("checkDetails") != null && !jsonObj.get("checkDetails").isJsonNull()) {
        JsonArray jsonArraycheckDetails = jsonObj.getAsJsonArray("checkDetails");
        if (jsonArraycheckDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkDetails` to be an array in the JSON string but got `%s`", jsonObj.get("checkDetails").toString()));
          }

          // validate the optional field `checkDetails` (array)
          for (int i = 0; i < jsonArraycheckDetails.size(); i++) {
            KeyValuePairObject.validateJsonElement(jsonArraycheckDetails.get(i));
          };
        }
      }
      // validate the optional field `checkFrequency`
      if (jsonObj.get("checkFrequency") != null && !jsonObj.get("checkFrequency").isJsonNull()) {
        EnumBackgroundCheckFrequency.validateJsonElement(jsonObj.get("checkFrequency"));
      }
      if ((jsonObj.get("checkId") != null && !jsonObj.get("checkId").isJsonNull()) && !jsonObj.get("checkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkId").toString()));
      }
      if ((jsonObj.get("checkPerformedBy") != null && !jsonObj.get("checkPerformedBy").isJsonNull()) && !jsonObj.get("checkPerformedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkPerformedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkPerformedBy").toString()));
      }
      if ((jsonObj.get("checkSource") != null && !jsonObj.get("checkSource").isJsonNull()) && !jsonObj.get("checkSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkSource").toString()));
      }
      // validate the optional field `currentState`
      if (jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) {
        EnumBackgroundCheckState.validateJsonElement(jsonObj.get("currentState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackgroundCheckResultObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackgroundCheckResultObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackgroundCheckResultObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackgroundCheckResultObject.class));

       return (TypeAdapter<T>) new TypeAdapter<BackgroundCheckResultObject>() {
           @Override
           public void write(JsonWriter out, BackgroundCheckResultObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackgroundCheckResultObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackgroundCheckResultObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackgroundCheckResultObject
   * @throws IOException if the JSON string is invalid with respect to BackgroundCheckResultObject
   */
  public static BackgroundCheckResultObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackgroundCheckResultObject.class);
  }

  /**
   * Convert an instance of BackgroundCheckResultObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

