/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptedDocumentResultObject;
import org.openapitools.client.model.BasicStatusResultObject;
import org.openapitools.client.model.ComparisonSet;
import org.openapitools.client.model.DocumentChecksResultObject;
import org.openapitools.client.model.DocumentCompareResultObject;
import org.openapitools.client.model.DocumentResultObject;
import org.openapitools.client.model.DocumentScanResultObject;
import org.openapitools.client.model.DocumentSearchResultObject;
import org.openapitools.client.model.DocumentVerify;
import org.openapitools.client.model.DocumentVerifyResultObject;
import org.openapitools.client.model.ErrorObject;
import org.openapitools.client.model.IdentityDocumentObject;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for compareDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument)  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareDocumentCall(UUID xFrankieCustomerID, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comparisonSet;

        // create path and map variables
        String localVarPath = "/document/new/compare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareDocumentValidateBeforeCall(UUID xFrankieCustomerID, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling compareDocument(Async)");
        }

        // verify the required parameter 'comparisonSet' is set
        if (comparisonSet == null) {
            throw new ApiException("Missing the required parameter 'comparisonSet' when calling compareDocument(Async)");
        }

        return compareDocumentCall(xFrankieCustomerID, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Create Document and Compare to Original.
     * Creates a new document from the \&quot;toDocument\&quot; parameter (usual rules apply in that it must be a valid document, with no existing documentId). The compareDocument can be an existing documentId, or it too can be new as well.   * If existing (i.e. a valid DocumentId is supplied), it will be updated with any new data supplied before being sent to the comparison process.   * If new, then a new document will be created too, and the ID returned in the result.    The document scans are then sent for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument)  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentCompareResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCompareResultObject compareDocument(UUID xFrankieCustomerID, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentCompareResultObject> localVarResp = compareDocumentWithHttpInfo(xFrankieCustomerID, comparisonSet, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Create Document and Compare to Original.
     * Creates a new document from the \&quot;toDocument\&quot; parameter (usual rules apply in that it must be a valid document, with no existing documentId). The compareDocument can be an existing documentId, or it too can be new as well.   * If existing (i.e. a valid DocumentId is supplied), it will be updated with any new data supplied before being sent to the comparison process.   * If new, then a new document will be created too, and the ID returned in the result.    The document scans are then sent for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument)  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentCompareResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCompareResultObject> compareDocumentWithHttpInfo(UUID xFrankieCustomerID, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = compareDocumentValidateBeforeCall(xFrankieCustomerID, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentCompareResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Document and Compare to Original. (asynchronously)
     * Creates a new document from the \&quot;toDocument\&quot; parameter (usual rules apply in that it must be a valid document, with no existing documentId). The compareDocument can be an existing documentId, or it too can be new as well.   * If existing (i.e. a valid DocumentId is supplied), it will be updated with any new data supplied before being sent to the comparison process.   * If new, then a new document will be created too, and the ID returned in the result.    The document scans are then sent for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument)  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareDocumentAsync(UUID xFrankieCustomerID, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentCompareResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareDocumentValidateBeforeCall(xFrankieCustomerID, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentCompareResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling createDocument(Async)");
        }

        return createDocumentCall(xFrankieCustomerID, xFrankieCustomerChildID, document, _callback);

    }

    /**
     * Create New Document.
     * Create a document object. A document object can be used to simply store data around a given identity or similar document. You can attach scans, PDFs, photos, videos, etc to the objectif you wish and these may be processed later (using the /scan function) to extract useful information. Or you can manually supply the extracted information if you choose. Document objects can be used to create an entity, based on extracted or supplied data; or it may be attached to an existing entity, either directly or through an ID check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param document  (optional)
     * @return DocumentResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResultObject createDocument(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, IdentityDocumentObject document) throws ApiException {
        ApiResponse<DocumentResultObject> localVarResp = createDocumentWithHttpInfo(xFrankieCustomerID, xFrankieCustomerChildID, document);
        return localVarResp.getData();
    }

    /**
     * Create New Document.
     * Create a document object. A document object can be used to simply store data around a given identity or similar document. You can attach scans, PDFs, photos, videos, etc to the objectif you wish and these may be processed later (using the /scan function) to extract useful information. Or you can manually supply the extracted information if you choose. Document objects can be used to create an entity, based on extracted or supplied data; or it may be attached to an existing entity, either directly or through an ID check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param document  (optional)
     * @return ApiResponse&lt;DocumentResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResultObject> createDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, IdentityDocumentObject document) throws ApiException {
        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, document, null);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create New Document. (asynchronously)
     * Create a document object. A document object can be used to simply store data around a given identity or similar document. You can attach scans, PDFs, photos, videos, etc to the objectif you wish and these may be processed later (using the /scan function) to extract useful information. Or you can manually supply the extracted information if you choose. Document objects can be used to create an entity, based on extracted or supplied data; or it may be attached to an existing entity, either directly or through an ID check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentAsync(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, IdentityDocumentObject document, final ApiCallback<DocumentResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, document, _callback);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createScanDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScanDocumentCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/new/scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createScanDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, IdentityDocumentObject document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling createScanDocument(Async)");
        }

        return createScanDocumentCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, document, _callback);

    }

    /**
     * Create and OCR Scan Document.
     * Create a document object. This is then processed to extract useful information and create an entity; or it may be attached to an entity, either directly or through an ID check. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param document  (optional)
     * @return DocumentScanResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentScanResultObject createScanDocument(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, IdentityDocumentObject document) throws ApiException {
        ApiResponse<DocumentScanResultObject> localVarResp = createScanDocumentWithHttpInfo(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, document);
        return localVarResp.getData();
    }

    /**
     * Create and OCR Scan Document.
     * Create a document object. This is then processed to extract useful information and create an entity; or it may be attached to an entity, either directly or through an ID check. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param document  (optional)
     * @return ApiResponse&lt;DocumentScanResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentScanResultObject> createScanDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, IdentityDocumentObject document) throws ApiException {
        okhttp3.Call localVarCall = createScanDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, document, null);
        Type localVarReturnType = new TypeToken<DocumentScanResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create and OCR Scan Document. (asynchronously)
     * Create a document object. This is then processed to extract useful information and create an entity; or it may be attached to an entity, either directly or through an ID check. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createScanDocumentAsync(UUID xFrankieCustomerID, UUID xFrankieCustomerChildID, Integer xFrankieBackground, IdentityDocumentObject document, final ApiCallback<DocumentScanResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createScanDocumentValidateBeforeCall(xFrankieCustomerID, xFrankieCustomerChildID, xFrankieBackground, document, _callback);
        Type localVarReturnType = new TypeToken<DocumentScanResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a simple status to indicate that the deletion has taken place.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling deleteDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Delete Document.
     * Mark this document as deleted. It will then become effectively invisible to all queries, but will be available in anonymised form for a past check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return BasicStatusResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a simple status to indicate that the deletion has taken place.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public BasicStatusResultObject deleteDocument(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<BasicStatusResultObject> localVarResp = deleteDocumentWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Delete Document.
     * Mark this document as deleted. It will then become effectively invisible to all queries, but will be available in anonymised form for a past check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;BasicStatusResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a simple status to indicate that the deletion has taken place.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicStatusResultObject> deleteDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<BasicStatusResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Document. (asynchronously)
     * Mark this document as deleted. It will then become effectively invisible to all queries, but will be available in anonymised form for a past check. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a simple status to indicate that the deletion has taken place.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<BasicStatusResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<BasicStatusResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling queryDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling queryDocument(Async)");
        }

        return queryDocumentCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, _callback);

    }

    /**
     * Retrieve Document Details
     * Query the current status and details of a given documentId. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return DocumentResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResultObject queryDocument(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID) throws ApiException {
        ApiResponse<DocumentResultObject> localVarResp = queryDocumentWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Document Details
     * Query the current status and details of a given documentId. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return ApiResponse&lt;DocumentResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResultObject> queryDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID) throws ApiException {
        okhttp3.Call localVarCall = queryDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, null);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Document Details (asynchronously)
     * Query the current status and details of a given documentId. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback<DocumentResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDocumentValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDocumentChecks
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of all checks carried out upon this document.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentChecksCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{documentId}/checks"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDocumentChecksValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling queryDocumentChecks(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling queryDocumentChecks(Async)");
        }

        return queryDocumentChecksCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Retrieve Document Verification Check Details. 
     * Get the complete list of all checks that have been performed upon a given document, including the checks that have been performed by others (in those cases you just get the id, status and date run, none of the details). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentChecksResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of all checks carried out upon this document.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentChecksResultObject queryDocumentChecks(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentChecksResultObject> localVarResp = queryDocumentChecksWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Retrieve Document Verification Check Details. 
     * Get the complete list of all checks that have been performed upon a given document, including the checks that have been performed by others (in those cases you just get the id, status and date run, none of the details). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentChecksResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of all checks carried out upon this document.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentChecksResultObject> queryDocumentChecksWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = queryDocumentChecksValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentChecksResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Document Verification Check Details.  (asynchronously)
     * Get the complete list of all checks that have been performed upon a given document, including the checks that have been performed by others (in those cases you just get the id, status and date run, none of the details). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of all checks carried out upon this document.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentChecksAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentChecksResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDocumentChecksValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentChecksResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryDocumentFull
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentFullCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/document/{documentId}/full"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryDocumentFullValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling queryDocumentFull(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling queryDocumentFull(Async)");
        }

        return queryDocumentFullCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, _callback);

    }

    /**
     * Retrieve Document and Scan Data
     * Query the current status and details of a given documentId. Also returns all document file data, not just the metadata. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return DocumentResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResultObject queryDocumentFull(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID) throws ApiException {
        ApiResponse<DocumentResultObject> localVarResp = queryDocumentFullWithHttpInfo(xFrankieCustomerID, documentId, xFrankieCustomerChildID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Document and Scan Data
     * Query the current status and details of a given documentId. Also returns all document file data, not just the metadata. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return ApiResponse&lt;DocumentResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResultObject> queryDocumentFullWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID) throws ApiException {
        okhttp3.Call localVarCall = queryDocumentFullValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, null);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Document and Scan Data (asynchronously)
     * Query the current status and details of a given documentId. Also returns all document file data, not just the metadata. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryDocumentFullAsync(UUID xFrankieCustomerID, UUID documentId, UUID xFrankieCustomerChildID, final ApiCallback<DocumentResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryDocumentFullValidateBeforeCall(xFrankieCustomerID, documentId, xFrankieCustomerChildID, _callback);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param searchDocument A document object with the parameters you wish to search on.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a list of potentially matching documents or document references, along with a confidence level in the match.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDocumentCall(UUID xFrankieCustomerID, IdentityDocumentObject searchDocument, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchDocument;

        // create path and map variables
        String localVarPath = "/document/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDocumentValidateBeforeCall(UUID xFrankieCustomerID, IdentityDocumentObject searchDocument, UUID xFrankieCustomerChildID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling searchDocument(Async)");
        }

        // verify the required parameter 'searchDocument' is set
        if (searchDocument == null) {
            throw new ApiException("Missing the required parameter 'searchDocument' when calling searchDocument(Async)");
        }

        return searchDocumentCall(xFrankieCustomerID, searchDocument, xFrankieCustomerChildID, _callback);

    }

    /**
     * Search For a Document !! EXPERIMENTAL !!
     *  Search for an existing document that matches the criteria supplied  There are of course limits to what can be searched upon. For a document search to work, you must supply at a minimum:    * idType   * country   * idNumber  The service will return a list of matching documents with confidence levels.  If you are the \&quot;owner\&quot; of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks)  Note: At this time, we cannot perform searches on document scans. But, you can supply extraData KVPs if they&#39;re known. These will help doublecheck search results with ambiguous results. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param searchDocument A document object with the parameters you wish to search on.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return DocumentSearchResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a list of potentially matching documents or document references, along with a confidence level in the match.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentSearchResultObject searchDocument(UUID xFrankieCustomerID, IdentityDocumentObject searchDocument, UUID xFrankieCustomerChildID) throws ApiException {
        ApiResponse<DocumentSearchResultObject> localVarResp = searchDocumentWithHttpInfo(xFrankieCustomerID, searchDocument, xFrankieCustomerChildID);
        return localVarResp.getData();
    }

    /**
     * Search For a Document !! EXPERIMENTAL !!
     *  Search for an existing document that matches the criteria supplied  There are of course limits to what can be searched upon. For a document search to work, you must supply at a minimum:    * idType   * country   * idNumber  The service will return a list of matching documents with confidence levels.  If you are the \&quot;owner\&quot; of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks)  Note: At this time, we cannot perform searches on document scans. But, you can supply extraData KVPs if they&#39;re known. These will help doublecheck search results with ambiguous results. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param searchDocument A document object with the parameters you wish to search on.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @return ApiResponse&lt;DocumentSearchResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a list of potentially matching documents or document references, along with a confidence level in the match.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentSearchResultObject> searchDocumentWithHttpInfo(UUID xFrankieCustomerID, IdentityDocumentObject searchDocument, UUID xFrankieCustomerChildID) throws ApiException {
        okhttp3.Call localVarCall = searchDocumentValidateBeforeCall(xFrankieCustomerID, searchDocument, xFrankieCustomerChildID, null);
        Type localVarReturnType = new TypeToken<DocumentSearchResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search For a Document !! EXPERIMENTAL !! (asynchronously)
     *  Search for an existing document that matches the criteria supplied  There are of course limits to what can be searched upon. For a document search to work, you must supply at a minimum:    * idType   * country   * idNumber  The service will return a list of matching documents with confidence levels.  If you are the \&quot;owner\&quot; of the document - i.e. the same CustomerID and CustomerChildID (if relevant) - then the full details of the document will be returned, except for the contents of any attached scans. If you are not the owner of the document, then just the ID and confidence level is returned. You can still use this ID to retrieve any check results (see GET /document/{documentId}/checks)  Note: At this time, we cannot perform searches on document scans. But, you can supply extraData KVPs if they&#39;re known. These will help doublecheck search results with ambiguous results. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param searchDocument A document object with the parameters you wish to search on.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Returns a list of potentially matching documents or document references, along with a confidence level in the match.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDocumentAsync(UUID xFrankieCustomerID, IdentityDocumentObject searchDocument, UUID xFrankieCustomerChildID, final ApiCallback<DocumentSearchResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDocumentValidateBeforeCall(xFrankieCustomerID, searchDocument, xFrankieCustomerChildID, _callback);
        Type localVarReturnType = new TypeToken<DocumentSearchResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompareDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument).  In this case, the toDocument should be left blank, and is assumed to be \&quot;this\&quot; document  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompareDocumentCall(UUID xFrankieCustomerID, UUID documentId, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = comparisonSet;

        // create path and map variables
        String localVarPath = "/document/{documentId}/compare"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompareDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateCompareDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateCompareDocument(Async)");
        }

        // verify the required parameter 'comparisonSet' is set
        if (comparisonSet == null) {
            throw new ApiException("Missing the required parameter 'comparisonSet' when calling updateCompareDocument(Async)");
        }

        return updateCompareDocumentCall(xFrankieCustomerID, documentId, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Update Document and Compare to Original.
     * Send the attached document scans to an external service for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument).  In this case, the toDocument should be left blank, and is assumed to be \&quot;this\&quot; document  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentCompareResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCompareResultObject updateCompareDocument(UUID xFrankieCustomerID, UUID documentId, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentCompareResultObject> localVarResp = updateCompareDocumentWithHttpInfo(xFrankieCustomerID, documentId, comparisonSet, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Update Document and Compare to Original.
     * Send the attached document scans to an external service for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument).  In this case, the toDocument should be left blank, and is assumed to be \&quot;this\&quot; document  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentCompareResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCompareResultObject> updateCompareDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = updateCompareDocumentValidateBeforeCall(xFrankieCustomerID, documentId, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentCompareResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Document and Compare to Original. (asynchronously)
     * Send the attached document scans to an external service for processing and comparison, such as comparing a selfie-video against a drivers licence photo.  * NOTE: This is NOT the verification process (see /document/verify)  * NOTE: This is NOT the OCR data extraction process either (see /document/scan) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param comparisonSet Contains the document (compareDocument) we want to compare (toDocument).  In this case, the toDocument should be left blank, and is assumed to be \&quot;this\&quot; document  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document comparison process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompareDocumentAsync(UUID xFrankieCustomerID, UUID documentId, ComparisonSet comparisonSet, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentCompareResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompareDocumentValidateBeforeCall(xFrankieCustomerID, documentId, comparisonSet, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentCompareResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The document to be updated (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param noInvalidate Disable check result invalidation for this update request.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentCall(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Boolean noInvalidate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/{documentId}"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (noInvalidate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noInvalidate", noInvalidate));
        }

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Boolean noInvalidate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocument(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling updateDocument(Async)");
        }

        return updateDocumentCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, noInvalidate, _callback);

    }

    /**
     * Update Existing Document.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The document to be updated (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param noInvalidate Disable check result invalidation for this update request.  (optional)
     * @return DocumentResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentResultObject updateDocument(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Boolean noInvalidate) throws ApiException {
        ApiResponse<DocumentResultObject> localVarResp = updateDocumentWithHttpInfo(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, noInvalidate);
        return localVarResp.getData();
    }

    /**
     * Update Existing Document.
     * Using a previously uploaded but incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The document to be updated (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param noInvalidate Disable check result invalidation for this update request.  (optional)
     * @return ApiResponse&lt;DocumentResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentResultObject> updateDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Boolean noInvalidate) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, noInvalidate, null);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Existing Document. (asynchronously)
     * Using a previously uploaded but incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The document to be updated (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param noInvalidate Disable check result invalidation for this update request.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the document object as it stands now. No docScan file data will be returned unless the /full variant is requested. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentAsync(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, Boolean noInvalidate, final ApiCallback<DocumentResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, noInvalidate, _callback);
        Type localVarReturnType = new TypeToken<DocumentResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScanDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The entity to be optionally updated, then processed. If updating a document, you only need to populate the fields you&#39;re actually adding/updating.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScanDocumentCall(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/document/{documentId}/scan"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScanDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateScanDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateScanDocument(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling updateScanDocument(Async)");
        }

        return updateScanDocumentCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Update and OCR Scan Document
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating OCR processing proceedures immediately. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The entity to be optionally updated, then processed. If updating a document, you only need to populate the fields you&#39;re actually adding/updating.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentScanResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentScanResultObject updateScanDocument(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentScanResultObject> localVarResp = updateScanDocumentWithHttpInfo(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Update and OCR Scan Document
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating OCR processing proceedures immediately. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The entity to be optionally updated, then processed. If updating a document, you only need to populate the fields you&#39;re actually adding/updating.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentScanResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentScanResultObject> updateScanDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = updateScanDocumentValidateBeforeCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentScanResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update and OCR Scan Document (asynchronously)
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating OCR processing proceedures immediately. The service will attempt to extract relevant data from any/all uploaded images/documents and will place those in the extraData KVP block. 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param document The entity to be optionally updated, then processed. If updating a document, you only need to populate the fields you&#39;re actually adding/updating.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document scanning process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScanDocumentAsync(UUID xFrankieCustomerID, UUID documentId, IdentityDocumentObject document, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentScanResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScanDocumentValidateBeforeCall(xFrankieCustomerID, documentId, document, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentScanResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVerifyDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an optional entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty, and is not processed or stored in any way.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVerifyDocumentCall(UUID xFrankieCustomerID, UUID documentId, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processDocument;

        // create path and map variables
        String localVarPath = "/document/{documentId}/verify"
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVerifyDocumentValidateBeforeCall(UUID xFrankieCustomerID, UUID documentId, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling updateVerifyDocument(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateVerifyDocument(Async)");
        }

        // verify the required parameter 'processDocument' is set
        if (processDocument == null) {
            throw new ApiException("Missing the required parameter 'processDocument' when calling updateVerifyDocument(Async)");
        }

        return updateVerifyDocumentCall(xFrankieCustomerID, documentId, processDocument, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Update and Verify Document.
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating verification proceedures immediately.  Sends the updated document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an optional entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty, and is not processed or stored in any way.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentVerifyResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentVerifyResultObject updateVerifyDocument(UUID xFrankieCustomerID, UUID documentId, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentVerifyResultObject> localVarResp = updateVerifyDocumentWithHttpInfo(xFrankieCustomerID, documentId, processDocument, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Update and Verify Document.
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating verification proceedures immediately.  Sends the updated document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an optional entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty, and is not processed or stored in any way.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentVerifyResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentVerifyResultObject> updateVerifyDocumentWithHttpInfo(UUID xFrankieCustomerID, UUID documentId, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = updateVerifyDocumentValidateBeforeCall(xFrankieCustomerID, documentId, processDocument, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentVerifyResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update and Verify Document. (asynchronously)
     * Using a previously uploaded but potentially incomplete document, you can optionally supply updated details (such as corrections on a previous scan), along with one or more additional ID scans (e.g. additional pages). Includes a follow-on action as well initiating verification proceedures immediately.  Sends the updated document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param documentId The documentId returned previously from an earlier call to /check or /entity or /document (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an optional entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty, and is not processed or stored in any way.  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVerifyDocumentAsync(UUID xFrankieCustomerID, UUID documentId, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentVerifyResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVerifyDocumentValidateBeforeCall(xFrankieCustomerID, documentId, processDocument, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentVerifyResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyDocument
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty/  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDocumentCall(UUID xFrankieCustomerID, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processDocument;

        // create path and map variables
        String localVarPath = "/document/new/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xFrankieCustomerID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerID", localVarApiClient.parameterToString(xFrankieCustomerID));
        }

        if (xFrankieCustomerChildID != null) {
            localVarHeaderParams.put("X-Frankie-CustomerChildID", localVarApiClient.parameterToString(xFrankieCustomerChildID));
        }

        if (xFrankieBackground != null) {
            localVarHeaderParams.put("X-Frankie-Background", localVarApiClient.parameterToString(xFrankieBackground));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDocumentValidateBeforeCall(UUID xFrankieCustomerID, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xFrankieCustomerID' is set
        if (xFrankieCustomerID == null) {
            throw new ApiException("Missing the required parameter 'xFrankieCustomerID' when calling verifyDocument(Async)");
        }

        // verify the required parameter 'processDocument' is set
        if (processDocument == null) {
            throw new ApiException("Missing the required parameter 'processDocument' when calling verifyDocument(Async)");
        }

        return verifyDocumentCall(xFrankieCustomerID, processDocument, xFrankieCustomerChildID, xFrankieBackground, _callback);

    }

    /**
     * Create and Verify Document.
     * Send the document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty/  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return DocumentVerifyResultObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public DocumentVerifyResultObject verifyDocument(UUID xFrankieCustomerID, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        ApiResponse<DocumentVerifyResultObject> localVarResp = verifyDocumentWithHttpInfo(xFrankieCustomerID, processDocument, xFrankieCustomerChildID, xFrankieBackground);
        return localVarResp.getData();
    }

    /**
     * Create and Verify Document.
     * Send the document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty/  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @return ApiResponse&lt;DocumentVerifyResultObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentVerifyResultObject> verifyDocumentWithHttpInfo(UUID xFrankieCustomerID, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground) throws ApiException {
        okhttp3.Call localVarCall = verifyDocumentValidateBeforeCall(xFrankieCustomerID, processDocument, xFrankieCustomerChildID, xFrankieBackground, null);
        Type localVarReturnType = new TypeToken<DocumentVerifyResultObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create and Verify Document. (asynchronously)
     * Send the document to an external service to have the detailed verified.  For example, we could send through the details of a drivers licence to be checked against a national database.  * NOTE: This is NOT the OCR data extraction process (see /document/scan) * NOTE: This is NOT the comparison process (see /document/compare) 
     * @param xFrankieCustomerID Customer ID issued by Frankie Financial. This will never change. Your API key, which is mapped to this identity, will change over time.  (required)
     * @param processDocument The document and (possibly) its associated scans to be verified.  There is also an entity object (normally stripped back to it&#39;s bare minimum) that can be used to provide supporting data, such as name, address, etc. The entity object may be empty/  (required)
     * @param xFrankieCustomerChildID If, as a Frankie Customer, you are acting on behalf of your own customers, then you can populate this field with a Frankie-assigned ID.  Note: If using a CustomerChildID, you will also need a separate api_key for each child.  Any documents, checks, entities that are created when this field has been populated will now be tied to this CustomerID + CustomerChildID combination. Just as Customers cannot see data created by other Customers, so too a Customer&#39;s Children will not be able to see each other&#39;s data.  A Customer can see the documents/entities and checks of all their Children.  (optional)
     * @param xFrankieBackground If this header parameter is supplied and set to 1, then the request will not wait for the process to finish, and will return a 202 if there are no obvious errors in the input. The request will then run in the background and send a notification back to the customer. See out callback API for details on this.  See more details here:   https://apidocs.frankiefinancial.com/docs/asynchronous-calls-backgrounding-processes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was valid and able to be processed in some fashion. Results may or may not be successful, but it was completed as far as practical with no actual errors. Returns the results of the document verification process.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was valid and can potentially be fulfilled. The Frankie service has now accepted responsibility for processing and we will either push the results to you, or send you a notification, depending on the request and your configuration. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. One or more request fields is either missing or incorrect. Details are in the error response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request has failed an authorisation check. This can happen for a variety of reasons, such as an invalid or expired API key, or invalid Customer/CustomerChildIDs.  * NOTE: This does not include attempts to read/write data you don&#39;t have access to - that&#39;s a 404 error (as we don&#39;t want to leak information through guessing)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot return response. In the case of a query, or reference to a specific entity/check/etc, it means that the requested item was not found, or you don&#39;t have access to it. Please check your query before trying again. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> A request to POST an update to an object was not allowed due to it&#39;s state. This may indicate an already completed check, or a document that has been processed. You need to create a new document/check if you wish to update the object in question. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> For requests with payloads, an unsupported Content-Type was specified. The Frankie Financial API only supports a content type of application/json. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable request. This can be triggered in a number of ways. * An attempt to force a check or scan to run, but there is insufficient data to be able to do so. * An attempt to run a utility comparison, or similar industry/document/entity specific scan or process on an unsupported document type (e.g. electricity comparison on a passport) Details of what is required will be in the issues list of the error response.  </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The API client is making too many concurrent requests, and some are being throttled. Throttled requests can be retried after a short delay. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error. Something went wrong during the checking process. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> All of the ID sources configured by the customer are unavailable, or there is no available document processor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDocumentAsync(UUID xFrankieCustomerID, DocumentVerify processDocument, UUID xFrankieCustomerChildID, Integer xFrankieBackground, final ApiCallback<DocumentVerifyResultObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDocumentValidateBeforeCall(xFrankieCustomerID, processDocument, xFrankieCustomerChildID, xFrankieBackground, _callback);
        Type localVarReturnType = new TypeToken<DocumentVerifyResultObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
