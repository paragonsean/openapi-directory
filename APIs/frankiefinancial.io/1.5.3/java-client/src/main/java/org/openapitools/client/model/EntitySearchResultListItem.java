/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EntityObject;
import org.openapitools.client.model.SearchResultConfidenceObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the individual search results for an entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntitySearchResultListItem {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private SearchResultConfidenceObject confidence;

  public static final String SERIALIZED_NAME_DOCUMENT_MATCH_TYPES = "documentMatchTypes";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_MATCH_TYPES)
  private List<String> documentMatchTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_NAME_MISMATCHES = "documentNameMismatches";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NAME_MISMATCHES)
  private List<UUID> documentNameMismatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private EntityObject entity;

  public static final String SERIALIZED_NAME_ENTITY_MATCH_TYPES = "entityMatchTypes";
  @SerializedName(SERIALIZED_NAME_ENTITY_MATCH_TYPES)
  private List<String> entityMatchTypes = new ArrayList<>();

  public EntitySearchResultListItem() {
  }

  public EntitySearchResultListItem confidence(SearchResultConfidenceObject confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public SearchResultConfidenceObject getConfidence() {
    return confidence;
  }

  public void setConfidence(SearchResultConfidenceObject confidence) {
    this.confidence = confidence;
  }


  public EntitySearchResultListItem documentMatchTypes(List<String> documentMatchTypes) {
    this.documentMatchTypes = documentMatchTypes;
    return this;
  }

  public EntitySearchResultListItem addDocumentMatchTypesItem(String documentMatchTypesItem) {
    if (this.documentMatchTypes == null) {
      this.documentMatchTypes = new ArrayList<>();
    }
    this.documentMatchTypes.add(documentMatchTypesItem);
    return this;
  }

  /**
   * Array of descriptons of document field matches used to score this search. This is a summary for all the documents for the matched entity. 
   * @return documentMatchTypes
   */
  @javax.annotation.Nullable
  public List<String> getDocumentMatchTypes() {
    return documentMatchTypes;
  }

  public void setDocumentMatchTypes(List<String> documentMatchTypes) {
    this.documentMatchTypes = documentMatchTypes;
  }


  public EntitySearchResultListItem documentNameMismatches(List<UUID> documentNameMismatches) {
    this.documentNameMismatches = documentNameMismatches;
    return this;
  }

  public EntitySearchResultListItem addDocumentNameMismatchesItem(UUID documentNameMismatchesItem) {
    if (this.documentNameMismatches == null) {
      this.documentNameMismatches = new ArrayList<>();
    }
    this.documentNameMismatches.add(documentNameMismatchesItem);
    return this;
  }

  /**
   * If this entity has any level of name match then this is an array of document IDs for the entity where the document has an entity name and it doesn&#39;t match any entity names being sought. 
   * @return documentNameMismatches
   */
  @javax.annotation.Nullable
  public List<UUID> getDocumentNameMismatches() {
    return documentNameMismatches;
  }

  public void setDocumentNameMismatches(List<UUID> documentNameMismatches) {
    this.documentNameMismatches = documentNameMismatches;
  }


  public EntitySearchResultListItem entity(EntityObject entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public EntityObject getEntity() {
    return entity;
  }

  public void setEntity(EntityObject entity) {
    this.entity = entity;
  }


  public EntitySearchResultListItem entityMatchTypes(List<String> entityMatchTypes) {
    this.entityMatchTypes = entityMatchTypes;
    return this;
  }

  public EntitySearchResultListItem addEntityMatchTypesItem(String entityMatchTypesItem) {
    if (this.entityMatchTypes == null) {
      this.entityMatchTypes = new ArrayList<>();
    }
    this.entityMatchTypes.add(entityMatchTypesItem);
    return this;
  }

  /**
   * Array of descriptons of entity field matches used to score this search. 
   * @return entityMatchTypes
   */
  @javax.annotation.Nullable
  public List<String> getEntityMatchTypes() {
    return entityMatchTypes;
  }

  public void setEntityMatchTypes(List<String> entityMatchTypes) {
    this.entityMatchTypes = entityMatchTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitySearchResultListItem entitySearchResultListItem = (EntitySearchResultListItem) o;
    return Objects.equals(this.confidence, entitySearchResultListItem.confidence) &&
        Objects.equals(this.documentMatchTypes, entitySearchResultListItem.documentMatchTypes) &&
        Objects.equals(this.documentNameMismatches, entitySearchResultListItem.documentNameMismatches) &&
        Objects.equals(this.entity, entitySearchResultListItem.entity) &&
        Objects.equals(this.entityMatchTypes, entitySearchResultListItem.entityMatchTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, documentMatchTypes, documentNameMismatches, entity, entityMatchTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitySearchResultListItem {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    documentMatchTypes: ").append(toIndentedString(documentMatchTypes)).append("\n");
    sb.append("    documentNameMismatches: ").append(toIndentedString(documentNameMismatches)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    entityMatchTypes: ").append(toIndentedString(entityMatchTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("documentMatchTypes");
    openapiFields.add("documentNameMismatches");
    openapiFields.add("entity");
    openapiFields.add("entityMatchTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntitySearchResultListItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntitySearchResultListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitySearchResultListItem is not found in the empty JSON string", EntitySearchResultListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntitySearchResultListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntitySearchResultListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `confidence`
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) {
        SearchResultConfidenceObject.validateJsonElement(jsonObj.get("confidence"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentMatchTypes") != null && !jsonObj.get("documentMatchTypes").isJsonNull() && !jsonObj.get("documentMatchTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentMatchTypes` to be an array in the JSON string but got `%s`", jsonObj.get("documentMatchTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentNameMismatches") != null && !jsonObj.get("documentNameMismatches").isJsonNull() && !jsonObj.get("documentNameMismatches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNameMismatches` to be an array in the JSON string but got `%s`", jsonObj.get("documentNameMismatches").toString()));
      }
      // validate the optional field `entity`
      if (jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) {
        EntityObject.validateJsonElement(jsonObj.get("entity"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entityMatchTypes") != null && !jsonObj.get("entityMatchTypes").isJsonNull() && !jsonObj.get("entityMatchTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityMatchTypes` to be an array in the JSON string but got `%s`", jsonObj.get("entityMatchTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitySearchResultListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitySearchResultListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitySearchResultListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitySearchResultListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitySearchResultListItem>() {
           @Override
           public void write(JsonWriter out, EntitySearchResultListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitySearchResultListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntitySearchResultListItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntitySearchResultListItem
   * @throws IOException if the JSON string is invalid with respect to EntitySearchResultListItem
   */
  public static EntitySearchResultListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitySearchResultListItem.class);
  }

  /**
   * Convert an instance of EntitySearchResultListItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

