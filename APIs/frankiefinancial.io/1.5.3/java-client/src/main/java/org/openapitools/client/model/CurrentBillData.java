/*
 * Frankie Financial API
 * ------   This API allows developers to integrate the Frankie Financial Compliance Utility into their applications. The API allows:   - Checking name, address, date of birth against national databases   - Validating Australian driver's licences, passports, medicare, visas and other Australian national ID documents   - Validating Australian electricity bills   - Validating NZ driver's licences   - Validating Chinese bank cards and national ID card   - Validating International passports and national ID documents   - PEP, Sanctions, Watchlist and adverse media checking   - Australian visa checks    - Fraud list and fraud background checks   - ID validation and selfie check comparisons.    ------     Industry specific services    - Comparing Australian electricity retailers for a better deal.  ------     KYB specific services    - Query organisation ownership   - Perform KYC & AML checks on shareholders, beneficial owners and office bearers.   - Query credit score and credit reports   - International company searches   - International company profiles    ------   The full version of this documentation along with supplemental articles can be found here:   - https://apidocs.frankiefinancial.com/  The traditional Swagger view of this documentation can be found here:   - https://app.swaggerhub.com/apis-docs/FrankieFinancial/kycutility  ------   Sandbox base URL is:   - https://api.demo.frankiefinancial.io/compliance/v1.2      - We do have an old sandbox at https://sandbox.frankiefinancial.com/compliance/v1.2 but this has been retired.    - All calls are the same as production, only with canned data.     - Full Swagger definition, along with test data for playing in the sandbox can be obtained once initial commercial discussions have commenced.    - Production and optional UAT access will be opened up only to those with a signed commercial contract.    ------   Contact us at hello@frankiefinancial.com to speak with a sales rep about issuing a Customer ID and Sandbox api key. 
 *
 * The version of the OpenAPI document: 1.5.3
 * Contact: dev-support@frankiefinancial.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrentBillDataSolarInner;
import org.openapitools.client.model.Period;
import org.openapitools.client.model.Retailer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data from uploaded bill
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:14.064522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrentBillData {
  public static final String SERIALIZED_NAME_ACCOUNT_ADDRESS = "accountAddress";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ADDRESS)
  private String accountAddress;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACTUAL_PLAN_TOTAL_COST = "actualPlanTotalCost";
  @SerializedName(SERIALIZED_NAME_ACTUAL_PLAN_TOTAL_COST)
  private BigDecimal actualPlanTotalCost;

  public static final String SERIALIZED_NAME_BILL_DATE_FROM = "billDateFrom";
  @SerializedName(SERIALIZED_NAME_BILL_DATE_FROM)
  private String billDateFrom;

  public static final String SERIALIZED_NAME_BILL_DATE_TO = "billDateTo";
  @SerializedName(SERIALIZED_NAME_BILL_DATE_TO)
  private String billDateTo;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Integer days;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private BigDecimal discount;

  /**
   * * &#x60;E&#x60; - Electricity 
   */
  @JsonAdapter(FuelTypeEnum.Adapter.class)
  public enum FuelTypeEnum {
    E("E");

    private String value;

    FuelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FuelTypeEnum fromValue(String value) {
      for (FuelTypeEnum b : FuelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FuelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FuelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FuelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FuelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FuelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuelType";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private FuelTypeEnum fuelType;

  public static final String SERIALIZED_NAME_NMI = "nmi";
  @SerializedName(SERIALIZED_NAME_NMI)
  private String nmi;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<Period> periods = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETAILER = "retailer";
  @SerializedName(SERIALIZED_NAME_RETAILER)
  private Retailer retailer;

  public static final String SERIALIZED_NAME_SOLAR = "solar";
  @SerializedName(SERIALIZED_NAME_SOLAR)
  private List<CurrentBillDataSolarInner> solar = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPLY_ADDRESS = "supplyAddress";
  @SerializedName(SERIALIZED_NAME_SUPPLY_ADDRESS)
  private String supplyAddress;

  public CurrentBillData() {
  }

  public CurrentBillData accountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
    return this;
  }

  /**
   * Account (Billing) address.
   * @return accountAddress
   */
  @javax.annotation.Nonnull
  public String getAccountAddress() {
    return accountAddress;
  }

  public void setAccountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
  }


  public CurrentBillData accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Customer name.
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public CurrentBillData accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Customer account number
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CurrentBillData actualPlanTotalCost(BigDecimal actualPlanTotalCost) {
    this.actualPlanTotalCost = actualPlanTotalCost;
    return this;
  }

  /**
   * Recalculated cost of the plan based on users comsumption and plan rates including discounts, rebates, concessions etc... Additional fees such as credit card processing fees are ignored.
   * @return actualPlanTotalCost
   */
  @javax.annotation.Nonnull
  public BigDecimal getActualPlanTotalCost() {
    return actualPlanTotalCost;
  }

  public void setActualPlanTotalCost(BigDecimal actualPlanTotalCost) {
    this.actualPlanTotalCost = actualPlanTotalCost;
  }


  public CurrentBillData billDateFrom(String billDateFrom) {
    this.billDateFrom = billDateFrom;
    return this;
  }

  /**
   * Start date for billing period
   * @return billDateFrom
   */
  @javax.annotation.Nonnull
  public String getBillDateFrom() {
    return billDateFrom;
  }

  public void setBillDateFrom(String billDateFrom) {
    this.billDateFrom = billDateFrom;
  }


  public CurrentBillData billDateTo(String billDateTo) {
    this.billDateTo = billDateTo;
    return this;
  }

  /**
   * End date for billing period
   * @return billDateTo
   */
  @javax.annotation.Nonnull
  public String getBillDateTo() {
    return billDateTo;
  }

  public void setBillDateTo(String billDateTo) {
    this.billDateTo = billDateTo;
  }


  public CurrentBillData days(Integer days) {
    this.days = days;
    return this;
  }

  /**
   * Number of days in billing period (billDateTo - billDateFrom)
   * @return days
   */
  @javax.annotation.Nonnull
  public Integer getDays() {
    return days;
  }

  public void setDays(Integer days) {
    this.days = days;
  }


  public CurrentBillData discount(BigDecimal discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Total value of all unconditional discounts applied to the bill
   * @return discount
   */
  @javax.annotation.Nonnull
  public BigDecimal getDiscount() {
    return discount;
  }

  public void setDiscount(BigDecimal discount) {
    this.discount = discount;
  }


  public CurrentBillData fuelType(FuelTypeEnum fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * * &#x60;E&#x60; - Electricity 
   * @return fuelType
   */
  @javax.annotation.Nonnull
  public FuelTypeEnum getFuelType() {
    return fuelType;
  }

  public void setFuelType(FuelTypeEnum fuelType) {
    this.fuelType = fuelType;
  }


  public CurrentBillData nmi(String nmi) {
    this.nmi = nmi;
    return this;
  }

  /**
   * National Meter identifier (NMI)
   * @return nmi
   */
  @javax.annotation.Nonnull
  public String getNmi() {
    return nmi;
  }

  public void setNmi(String nmi) {
    this.nmi = nmi;
  }


  public CurrentBillData periods(List<Period> periods) {
    this.periods = periods;
    return this;
  }

  public CurrentBillData addPeriodsItem(Period periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

  /**
   * Rates and charges for each period on the bill
   * @return periods
   */
  @javax.annotation.Nonnull
  public List<Period> getPeriods() {
    return periods;
  }

  public void setPeriods(List<Period> periods) {
    this.periods = periods;
  }


  public CurrentBillData retailer(Retailer retailer) {
    this.retailer = retailer;
    return this;
  }

  /**
   * Get retailer
   * @return retailer
   */
  @javax.annotation.Nonnull
  public Retailer getRetailer() {
    return retailer;
  }

  public void setRetailer(Retailer retailer) {
    this.retailer = retailer;
  }


  public CurrentBillData solar(List<CurrentBillDataSolarInner> solar) {
    this.solar = solar;
    return this;
  }

  public CurrentBillData addSolarItem(CurrentBillDataSolarInner solarItem) {
    if (this.solar == null) {
      this.solar = new ArrayList<>();
    }
    this.solar.add(solarItem);
    return this;
  }

  /**
   * Array of rates and charges for solar on the bill, by period. If no solar is present on the uploaded bill this object will not be present.
   * @return solar
   */
  @javax.annotation.Nullable
  public List<CurrentBillDataSolarInner> getSolar() {
    return solar;
  }

  public void setSolar(List<CurrentBillDataSolarInner> solar) {
    this.solar = solar;
  }


  public CurrentBillData supplyAddress(String supplyAddress) {
    this.supplyAddress = supplyAddress;
    return this;
  }

  /**
   * Supply address. This may differ from account address if bill payers address is different from account address.
   * @return supplyAddress
   */
  @javax.annotation.Nonnull
  public String getSupplyAddress() {
    return supplyAddress;
  }

  public void setSupplyAddress(String supplyAddress) {
    this.supplyAddress = supplyAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentBillData currentBillData = (CurrentBillData) o;
    return Objects.equals(this.accountAddress, currentBillData.accountAddress) &&
        Objects.equals(this.accountName, currentBillData.accountName) &&
        Objects.equals(this.accountNumber, currentBillData.accountNumber) &&
        Objects.equals(this.actualPlanTotalCost, currentBillData.actualPlanTotalCost) &&
        Objects.equals(this.billDateFrom, currentBillData.billDateFrom) &&
        Objects.equals(this.billDateTo, currentBillData.billDateTo) &&
        Objects.equals(this.days, currentBillData.days) &&
        Objects.equals(this.discount, currentBillData.discount) &&
        Objects.equals(this.fuelType, currentBillData.fuelType) &&
        Objects.equals(this.nmi, currentBillData.nmi) &&
        Objects.equals(this.periods, currentBillData.periods) &&
        Objects.equals(this.retailer, currentBillData.retailer) &&
        Objects.equals(this.solar, currentBillData.solar) &&
        Objects.equals(this.supplyAddress, currentBillData.supplyAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAddress, accountName, accountNumber, actualPlanTotalCost, billDateFrom, billDateTo, days, discount, fuelType, nmi, periods, retailer, solar, supplyAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentBillData {\n");
    sb.append("    accountAddress: ").append(toIndentedString(accountAddress)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    actualPlanTotalCost: ").append(toIndentedString(actualPlanTotalCost)).append("\n");
    sb.append("    billDateFrom: ").append(toIndentedString(billDateFrom)).append("\n");
    sb.append("    billDateTo: ").append(toIndentedString(billDateTo)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    nmi: ").append(toIndentedString(nmi)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    retailer: ").append(toIndentedString(retailer)).append("\n");
    sb.append("    solar: ").append(toIndentedString(solar)).append("\n");
    sb.append("    supplyAddress: ").append(toIndentedString(supplyAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountAddress");
    openapiFields.add("accountName");
    openapiFields.add("accountNumber");
    openapiFields.add("actualPlanTotalCost");
    openapiFields.add("billDateFrom");
    openapiFields.add("billDateTo");
    openapiFields.add("days");
    openapiFields.add("discount");
    openapiFields.add("fuelType");
    openapiFields.add("nmi");
    openapiFields.add("periods");
    openapiFields.add("retailer");
    openapiFields.add("solar");
    openapiFields.add("supplyAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountAddress");
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("accountNumber");
    openapiRequiredFields.add("actualPlanTotalCost");
    openapiRequiredFields.add("billDateFrom");
    openapiRequiredFields.add("billDateTo");
    openapiRequiredFields.add("days");
    openapiRequiredFields.add("discount");
    openapiRequiredFields.add("fuelType");
    openapiRequiredFields.add("nmi");
    openapiRequiredFields.add("periods");
    openapiRequiredFields.add("retailer");
    openapiRequiredFields.add("supplyAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentBillData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentBillData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentBillData is not found in the empty JSON string", CurrentBillData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentBillData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentBillData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrentBillData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAddress").toString()));
      }
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if (!jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if (!jsonObj.get("billDateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billDateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billDateFrom").toString()));
      }
      if (!jsonObj.get("billDateTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billDateTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billDateTo").toString()));
      }
      if (!jsonObj.get("fuelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuelType").toString()));
      }
      // validate the required field `fuelType`
      FuelTypeEnum.validateJsonElement(jsonObj.get("fuelType"));
      if (!jsonObj.get("nmi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nmi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nmi").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("periods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `periods` to be an array in the JSON string but got `%s`", jsonObj.get("periods").toString()));
      }

      JsonArray jsonArrayperiods = jsonObj.getAsJsonArray("periods");
      // validate the required field `periods` (array)
      for (int i = 0; i < jsonArrayperiods.size(); i++) {
        Period.validateJsonElement(jsonArrayperiods.get(i));
      };
      // validate the required field `retailer`
      Retailer.validateJsonElement(jsonObj.get("retailer"));
      if (jsonObj.get("solar") != null && !jsonObj.get("solar").isJsonNull()) {
        JsonArray jsonArraysolar = jsonObj.getAsJsonArray("solar");
        if (jsonArraysolar != null) {
          // ensure the json data is an array
          if (!jsonObj.get("solar").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `solar` to be an array in the JSON string but got `%s`", jsonObj.get("solar").toString()));
          }

          // validate the optional field `solar` (array)
          for (int i = 0; i < jsonArraysolar.size(); i++) {
            CurrentBillDataSolarInner.validateJsonElement(jsonArraysolar.get(i));
          };
        }
      }
      if (!jsonObj.get("supplyAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplyAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentBillData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentBillData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentBillData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentBillData.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentBillData>() {
           @Override
           public void write(JsonWriter out, CurrentBillData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentBillData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentBillData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentBillData
   * @throws IOException if the JSON string is invalid with respect to CurrentBillData
   */
  public static CurrentBillData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentBillData.class);
  }

  /**
   * Convert an instance of CurrentBillData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

